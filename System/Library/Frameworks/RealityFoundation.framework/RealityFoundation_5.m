uint64_t type metadata accessor for __RKEntityProximityTrigger()
{
  return self;
}

uint64_t __RKEntityProximityTrigger.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 24);
  swift_beginAccess();
  int v4 = *(_DWORD *)(v1 + 32);
  swift_beginAccess();
  char v5 = *(unsigned char *)(v1 + 36);
  uint64_t v6 = type metadata accessor for __RKEntityProximityTrigger();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 24) = 0;
  *(_WORD *)(v7 + 37) = 0;
  swift_beginAccess();
  *(void *)(v7 + 24) = v3;
  swift_retain();
  swift_retain();
  swift_release();
  *(_DWORD *)(v7 + 32) = v4;
  *(unsigned char *)(v7 + 36) = v5;
  uint64_t result = swift_release();
  *(_WORD *)(v7 + 16) = 0;
  *(unsigned char *)(v7 + 18) = 0;
  a1[3] = v6;
  *a1 = v7;
  return result;
}

uint64_t __RKEntityProximityTrigger.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 24);
  if (!v5 || *(void *)(v5 + 16) != *(void *)(a1 + 16)) {
    return 0;
  }
  swift_beginAccess();
  int v7 = *(_DWORD *)(v2 + 32);
  swift_beginAccess();
  char v8 = *(unsigned char *)(v2 + 36);
  type metadata accessor for __RKEntityProximityTrigger();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 24) = 0;
  *(_WORD *)(v6 + 37) = 0;
  swift_beginAccess();
  *(void *)(v6 + 24) = a2;
  swift_retain();
  swift_retain();
  swift_release();
  *(_DWORD *)(v6 + 32) = v7;
  *(unsigned char *)(v6 + 36) = v8;
  swift_release();
  *(_WORD *)(v6 + 16) = 0;
  *(unsigned char *)(v6 + 18) = 0;
  return v6;
}

void __RKEntityProximityTrigger.__allocating_init()()
{
}

void __RKEntityProximityTrigger.init()()
{
}

uint64_t __RKEntityProximityTrigger.deinit()
{
  swift_release();
  return v0;
}

uint64_t __RKEntityProximityTrigger.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_2280468E8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 24);
  return swift_retain();
}

float sub_228046938@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  float result = *(float *)(v3 + 32);
  *a2 = result;
  return result;
}

uint64_t sub_228046980(int *a1, uint64_t *a2)
{
  int v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v3 + 32) = v2;
  return result;
}

uint64_t sub_2280469CC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 36);
  return result;
}

uint64_t sub_228046A14(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 36) = v2;
  return result;
}

uint64_t sub_228046A58@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 37);
  return result;
}

uint64_t sub_228046AA0(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 37) = v2;
  return result;
}

uint64_t sub_228046AE4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 38);
  return result;
}

uint64_t sub_228046B2C(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 38) = v2;
  return result;
}

uint64_t method lookup function for __RKEntityProximityTrigger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityProximityTrigger);
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.targetEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.targetEntity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.targetEntity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.__targetEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.distance.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.distance.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.distance.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.type.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.type.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.enterFired.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.exitFired.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.__allocating_init(targetEntity:distance:type:)()
{
  return (*(uint64_t (**)(void))(v0 + 376))();
}

unsigned char *storeEnumTagSinglePayload for __RKEntityProximityTrigger.ExitType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228046E70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityProximityTrigger.ExitType()
{
  return &type metadata for __RKEntityProximityTrigger.ExitType;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for DirectionalLightComponent.Shadow.Type);
}

uint64_t static Component.__typeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

{
  return static Component.__typeName.getter(a1, a2);
}

uint64_t static Component.componentName.getter()
{
  return String.init<A>(reflecting:)();
}

{
  return static Component.componentName.getter();
}

uint64_t protocol witness for static Component.__size.getter in conformance DirectionalLightComponent.Shadow()
{
  return 25;
}

uint64_t static Component.__size.getter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 - 8) + 64);
}

{
  return static Component.__size.getter(a1);
}

double protocol witness for static Component.__load(from:) in conformance DirectionalLightComponent.Shadow@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 12);
  int v4 = *(_DWORD *)(a1 + 20);
  char v5 = *(unsigned char *)(a1 + 24);
  double result = *(double *)a1;
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v2;
  *(void *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 20) = v4;
  *(unsigned char *)(a2 + 24) = v5;
  return result;
}

uint64_t static Component.__load(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

{
  return static Component.__load(from:)(a1, a2, a3);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized static Component.__store(attribute:to:offset:deinitialize:)(a1, a2, a4, a5);
}

{
  return specialized static Component.__store(attribute:to:offset:deinitialize:)(a1, a2, a4, a5);
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = v4;
  *(double *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  *(void *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 20) = v7;
  *(unsigned char *)(a2 + 24) = v8;
  return result;
}

uint64_t static Component.__store(attribute:to:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 40))(a1, a2, a3, 1, a4, a5);
}

void static Component.__free(to:offset:)()
{
}

{
  specialized static Component.__free(to:offset:)();
}

double protocol witness for static Component.__load(from:offset:) in conformance DirectionalLightComponent.Shadow@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 12);
  int v9 = *(_DWORD *)(a1 + 20);
  char v10 = *(unsigned char *)(a1 + 24);
  double result = *(double *)a1;
  *(void *)(v6 + 16) = *(void *)a1;
  *(unsigned char *)(v6 + 24) = v7;
  *(void *)(v6 + 28) = v8;
  *(_DWORD *)(v6 + 36) = v9;
  *(unsigned char *)(v6 + 40) = v10;
  return result;
}

uint64_t static Component.__load(from:offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 32);
  a4[3] = a2;
  a4[4] = a3;
  __swift_allocate_boxed_opaque_existential_1(a4);
  return v7(a1, a2, a3);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for DirectionalLightComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance DirectionalLightComponent()
{
  return 13;
}

uint64_t protocol witness for static Component.__load(from:) in conformance DirectionalLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 12);
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 12) = v3;
  return MEMORY[0x270F9A8A0]();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance DirectionalLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  int v4 = *(_DWORD *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 12);
  *(void *)a4 = *(void *)a1;
  *(_DWORD *)(a4 + 8) = v4;
  *(unsigned char *)(a4 + 12) = v5;
  return MEMORY[0x270F9A8A0]();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for __AmbientLightComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance __AmbientLightComponent()
{
  return 12;
}

uint64_t protocol witness for static Component.__load(from:) in conformance __AmbientLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  return MEMORY[0x270F9A8A0]();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance __AmbientLightComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

float protocol witness for static Component.__store(attribute:to:offset:) in conformance __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  float result = v6;
  *(void *)a2 = v5;
  *(float *)(a2 + 8) = v6;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance __AmbientLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  int v4 = *(_DWORD *)(a1 + 8);
  *(void *)a4 = *(void *)a1;
  *(_DWORD *)(a4 + 8) = v4;
  return MEMORY[0x270F9A8A0]();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ReverbComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ReverbComponent.Type);
}

unsigned char *protocol witness for static Component.__load(from:) in conformance ReverbComponent@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ReverbComponent(uint64_t a1, unsigned char *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ReverbComponent(uint64_t a1, unsigned char *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AudioLibraryComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AudioLibraryComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance AudioLibraryComponent()
{
  return 8;
}

uint64_t protocol witness for static Component.__load(from:) in conformance AudioLibraryComponent@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ImageBasedLightComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance ImageBasedLightComponent()
{
  return 29;
}

uint64_t protocol witness for static Component.__load(from:) in conformance ImageBasedLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 20);
  int v6 = *(_DWORD *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 28);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 20) = v5;
  *(_DWORD *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 28) = v7;
  return outlined copy of ImageBasedLightComponent.Source(v3, v2);
}

float protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ImageBasedLightComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  float result = v10;
  *(_OWORD *)a2 = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 20) = v9;
  *(float *)(a2 + 24) = v10;
  *(unsigned char *)(a2 + 28) = v11;
  return result;
}

float protocol witness for static Component.__store(attribute:to:offset:) in conformance ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  float result = v8;
  *(_OWORD *)a2 = v5;
  *(_DWORD *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 20) = v7;
  *(float *)(a2 + 24) = v8;
  *(unsigned char *)(a2 + 28) = v9;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ImageBasedLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  uint64_t v8 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  int v9 = *(_DWORD *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 20);
  int v11 = *(_DWORD *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 28);
  *(void *)(v6 + 16) = *(void *)a1;
  *(void *)(v6 + 24) = v7;
  *(_DWORD *)(v6 + 32) = v9;
  *(unsigned char *)(v6 + 36) = v10;
  *(_DWORD *)(v6 + 40) = v11;
  *(unsigned char *)(v6 + 44) = v12;

  return outlined copy of ImageBasedLightComponent.Source(v8, v7);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ImageBasedLightReceiverComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ImageBasedLightReceiverComponent.Type);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance __ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for __ImageBasedLightComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance __ImageBasedLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  return swift_retain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance __ImageBasedLightComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance __ImageBasedLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  int v4 = *(_DWORD *)(a1 + 8);
  *(void *)a4 = *(void *)a1;
  *(_DWORD *)(a4 + 8) = v4;
  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SceneUnderstandingComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SceneUnderstandingComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance SceneUnderstandingComponent()
{
  return 16;
}

uint64_t protocol witness for static Component.__load(from:) in conformance SceneUnderstandingComponent@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  *(unsigned char *)a2 = *(unsigned char *)result;
  *(void *)(a2 + 8) = v2;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SceneUnderstandingComponent(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *(unsigned char *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SceneUnderstandingComponent(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *(unsigned char *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance SceneUnderstandingComponent@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  uint64_t v4 = *(void *)(result + 8);
  *(unsigned char *)a4 = *(unsigned char *)result;
  *(void *)(a4 + 8) = v4;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PhysicsBodyComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PhysicsBodyComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance PhysicsBodyComponent()
{
  return 172;
}

uint64_t protocol witness for static Component.__load(from:) in conformance PhysicsBodyComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 80);
  char v7 = *(unsigned char *)(a1 + 88);
  char v8 = *(unsigned char *)(a1 + 89);
  char v9 = *(unsigned char *)(a1 + 90);
  char v10 = *(unsigned char *)(a1 + 91);
  char v11 = *(unsigned char *)(a1 + 92);
  char v12 = *(unsigned char *)(a1 + 93);
  char v13 = *(unsigned char *)(a1 + 94);
  char v14 = *(unsigned char *)(a1 + 95);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 144);
  char v19 = *(unsigned char *)(a1 + 160);
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_DWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(void *)(a2 + 80) = v6;
  *(unsigned char *)(a2 + 88) = v7;
  *(unsigned char *)(a2 + 89) = v8;
  *(unsigned char *)(a2 + 90) = v9;
  *(unsigned char *)(a2 + 91) = v10;
  *(unsigned char *)(a2 + 92) = v11;
  *(unsigned char *)(a2 + 93) = v12;
  *(unsigned char *)(a2 + 94) = v13;
  *(unsigned char *)(a2 + 95) = v14;
  *(_OWORD *)(a2 + 96) = v15;
  *(_OWORD *)(a2 + 112) = v16;
  *(_OWORD *)(a2 + 128) = v17;
  *(_OWORD *)(a2 + 144) = v18;
  *(unsigned char *)(a2 + 160) = v19;
  *(void *)(a2 + 164) = *(void *)(a1 + 164);
  return swift_retain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PhysicsBodyComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance PhysicsBodyComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(unsigned char *)a2 = v5;
  *(_DWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v8;
  *(_OWORD *)(a2 + 64) = v9;
  *(void *)(a2 + 80) = v10;
  *(unsigned char *)(a2 + 88) = v11;
  *(unsigned char *)(a2 + 89) = v12;
  *(unsigned char *)(a2 + 90) = v13;
  *(unsigned char *)(a2 + 91) = v14;
  *(unsigned char *)(a2 + 92) = v15;
  *(unsigned char *)(a2 + 93) = v16;
  *(unsigned char *)(a2 + 94) = v17;
  *(unsigned char *)(a2 + 95) = v18;
  *(_OWORD *)(a2 + 96) = v19;
  *(_OWORD *)(a2 + 112) = v20;
  *(_OWORD *)(a2 + 128) = v21;
  *(_OWORD *)(a2 + 144) = v22;
  *(unsigned char *)(a2 + 160) = v23;
  double result = v24;
  *(double *)(a2 + 164) = v24;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance PhysicsBodyComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  int v7 = *(_DWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  long long v10 = *(_OWORD *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 80);
  char v12 = *(unsigned char *)(a1 + 88);
  char v13 = *(unsigned char *)(a1 + 89);
  char v14 = *(unsigned char *)(a1 + 90);
  char v15 = *(unsigned char *)(a1 + 91);
  char v16 = *(unsigned char *)(a1 + 92);
  char v17 = *(unsigned char *)(a1 + 93);
  char v18 = *(unsigned char *)(a1 + 94);
  char v19 = *(unsigned char *)(a1 + 95);
  long long v20 = *(_OWORD *)(a1 + 96);
  long long v21 = *(_OWORD *)(a1 + 112);
  long long v22 = *(_OWORD *)(a1 + 128);
  long long v23 = *(_OWORD *)(a1 + 144);
  char v24 = *(unsigned char *)(a1 + 160);
  *(unsigned char *)(v6 + 16) = *(unsigned char *)a1;
  *(_DWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = v8;
  *(_OWORD *)(v6 + 64) = v9;
  *(_OWORD *)(v6 + 80) = v10;
  *(void *)(v6 + 96) = v11;
  *(unsigned char *)(v6 + 104) = v12;
  *(unsigned char *)(v6 + 105) = v13;
  *(unsigned char *)(v6 + 106) = v14;
  *(unsigned char *)(v6 + 107) = v15;
  *(unsigned char *)(v6 + 108) = v16;
  *(unsigned char *)(v6 + 109) = v17;
  *(unsigned char *)(v6 + 110) = v18;
  *(unsigned char *)(v6 + 111) = v19;
  *(_OWORD *)(v6 + 112) = v20;
  *(_OWORD *)(v6 + 128) = v21;
  *(_OWORD *)(v6 + 144) = v22;
  *(_OWORD *)(v6 + 160) = v23;
  *(unsigned char *)(v6 + 176) = v24;
  *(void *)(v6 + 180) = *(void *)(a1 + 164);

  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PreviewSupportComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PreviewSupportComponent.Type);
}

void protocol witness for static Component.__fromCore(_:) in conformance PreviewSupportComponent()
{
}

void static Component.__fromCore(_:)()
{
}

{
  static Component.__fromCore(_:)();
}

void protocol witness for Component.__toCore(_:) in conformance PreviewSupportComponent()
{
}

void Component.__toCore(_:)()
{
}

void protocol witness for static Component.__coreComponentType.getter in conformance PreviewSupportComponent(_DWORD *a1@<X8>)
{
  *a1 = 36;
}

void static Component.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 36;
}

{
  static Component.__coreComponentType.getter(a1);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SelectableSceneContentIdentifierComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SelectableSceneContentIdentifierComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SelectableSceneContentIdentifierComponent(uint64_t a1, _DWORD *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SelectableSceneContentIdentifierComponent(uint64_t a1, _DWORD *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *a2 = v4;
  return result;
}

_DWORD *protocol witness for static Component.__load(from:offset:) in conformance SelectableSceneContentIdentifierComponent@<X0>(_DWORD *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  *(_DWORD *)a4 = *result;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance EnvironmentLightingConfigurationComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for EnvironmentLightingConfigurationComponent.Type);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SynchronizationComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SynchronizationComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance SynchronizationComponent()
{
  return 40;
}

void protocol witness for static Component.__load(from:) in conformance SynchronizationComponent(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 9);
  char v4 = *(unsigned char *)(a1 + 10);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 9) = v3;
  *(unsigned char *)(a2 + 10) = v4;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v7;
  outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v6, v5);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SynchronizationComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SynchronizationComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

void protocol witness for static Component.__load(from:offset:) in conformance SynchronizationComponent(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  char v7 = *(unsigned char *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 9);
  char v9 = *(unsigned char *)(a1 + 10);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  *(void *)(v6 + 16) = *(void *)a1;
  *(unsigned char *)(v6 + 24) = v7;
  *(unsigned char *)(v6 + 25) = v8;
  *(unsigned char *)(v6 + 26) = v9;
  *(void *)(v6 + 32) = v11;
  *(void *)(v6 + 40) = v10;
  *(void *)(v6 + 48) = v12;

  outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, v10);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance CustomComponentProxy(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for CustomComponentProxy.Type);
}

void *protocol witness for static Component.__load(from:offset:) in conformance CustomComponentProxy@<X0>(void *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  *a4 = *result;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PortalComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PortalComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance PortalComponent()
{
  return 97;
}

uint64_t protocol witness for static Component.__load(from:) in conformance PortalComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 48);
  char v3 = *(unsigned char *)(a1 + 96);
  *(void *)a2 = *(void *)a1;
  long long v4 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(unsigned char *)(a2 + 48) = v2;
  long long v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  *(unsigned char *)(a2 + 96) = v3;
  return swift_retain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PortalComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(unsigned char *)(a2 + 48) = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 80) = v12;
  *(unsigned char *)(a2 + 96) = v13;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance PortalComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(unsigned char *)(a2 + 48) = v8;
  double result = *(double *)&v9;
  *(_OWORD *)(a2 + 64) = v9;
  *(_OWORD *)(a2 + 80) = v10;
  *(unsigned char *)(a2 + 96) = v11;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance PortalComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  char v7 = *(unsigned char *)(a1 + 48);
  char v8 = *(unsigned char *)(a1 + 96);
  *(void *)(v6 + 16) = *(void *)a1;
  long long v9 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 48) = v9;
  *(unsigned char *)(v6 + 64) = v7;
  long long v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v6 + 96) = v10;
  *(unsigned char *)(v6 + 112) = v8;

  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AdaptiveResolutionComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AdaptiveResolutionComponent.Type);
}

float protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance EnvironmentLightingConfigurationComponent(uint64_t a1, float *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  float result = v4;
  *a2 = v4;
  return result;
}

float protocol witness for static Component.__store(attribute:to:offset:) in conformance EnvironmentLightingConfigurationComponent(uint64_t a1, float *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  float result = v4;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SpotLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SpotLightComponent.Shadow.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance SpotLightComponent.Shadow()
{
  return 21;
}

float protocol witness for static Component.__load(from:) in conformance SpotLightComponent.Shadow@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result = *(float *)a1;
  char v3 = *(unsigned char *)(a1 + 4);
  int v4 = *(_DWORD *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 12);
  int v6 = *(_DWORD *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 20);
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(unsigned char *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 12) = v5;
  *(_DWORD *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 20) = v7;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SpotLightComponent.Shadow(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

float protocol witness for static Component.__store(attribute:to:offset:) in conformance SpotLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  float result = v4;
  *(float *)a2 = v4;
  *(unsigned char *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 12) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 20) = v9;
  return result;
}

void protocol witness for static Component.__free(to:offset:) in conformance SpotLightComponent.Shadow()
{
}

float protocol witness for static Component.__load(from:offset:) in conformance SpotLightComponent.Shadow@<S0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  float result = *(float *)a1;
  char v5 = *(unsigned char *)(a1 + 4);
  int v6 = *(_DWORD *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 12);
  int v8 = *(_DWORD *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 20);
  *(_DWORD *)a4 = *(_DWORD *)a1;
  *(unsigned char *)(a4 + 4) = v5;
  *(_DWORD *)(a4 + 8) = v6;
  *(unsigned char *)(a4 + 12) = v7;
  *(_DWORD *)(a4 + 16) = v8;
  *(unsigned char *)(a4 + 20) = v9;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SpotLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SpotLightComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance SpotLightComponent()
{
  return 28;
}

uint64_t protocol witness for static Component.__load(from:) in conformance SpotLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 24);
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = v2;
  return MEMORY[0x270F9A8A0]();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SpotLightComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SpotLightComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance SpotLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  int v7 = *(_DWORD *)(a1 + 24);
  *(void *)(v6 + 16) = *(void *)a1;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)(v6 + 40) = v7;

  return MEMORY[0x270F9A8A0]();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AudioMixGroupsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AudioMixGroupsComponent.Type);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance RKARSegmentationComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for RKARSegmentationComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance RKARSegmentationComponent()
{
  return 32;
}

uint64_t protocol witness for static Component.__load(from:) in conformance RKARSegmentationComponent@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v5;
  a2[3] = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance RKARSegmentationComponent(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v7;
  *a2 = v7;
  a2[1] = v8;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance RKARSegmentationComponent(uint64_t a1, _OWORD *a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v5;
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance RKARSegmentationComponent@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  long long v6 = (void *)swift_allocObject();
  *a4 = v6;
  uint64_t v7 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v8 = a1[3];
  v6[2] = *a1;
  v6[3] = v7;
  v6[4] = v9;
  v6[5] = v8;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

void *static Component.registerComponent()(uint64_t a1, uint64_t a2)
{
  double result = (*(void *(**)(uint64_t *__return_ptr))(a2 + 80))(&v5);
  if (v5 == 36)
  {
    return (void *)specialized static SceneManager.customComponentType(_:)(v2, a2);
  }
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance VFXComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for VFXComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance VFXComponent()
{
  return 58;
}

uint64_t protocol witness for static Component.__load(from:) in conformance VFXComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 56);
  char v6 = *(unsigned char *)(a1 + 57);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(unsigned char *)(a2 + 16) = v2;
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(unsigned char *)(a2 + 56) = v5;
  *(unsigned char *)(a2 + 57) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance VFXComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance VFXComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = v8;
  double result = *(double *)&v9;
  *(_OWORD *)(a2 + 40) = v9;
  *(unsigned char *)(a2 + 56) = v10;
  *(unsigned char *)(a2 + 57) = v11;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance VFXComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  char v7 = *(unsigned char *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 56);
  char v11 = *(unsigned char *)(a1 + 57);
  *(void *)(v6 + 16) = *(void *)a1;
  *(void *)(v6 + 24) = *(void *)(a1 + 8);
  *(unsigned char *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v8;
  *(void *)(v6 + 48) = v9;
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a1 + 40);
  *(unsigned char *)(v6 + 72) = v10;
  *(unsigned char *)(v6 + 73) = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance HoverEffectComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for HoverEffectComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance HoverEffectComponent()
{
  return 18;
}

id protocol witness for static Component.__load(from:) in conformance HoverEffectComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 17);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 17) = v4;
  return outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(v3, v2, v5);
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance HoverEffectComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(unsigned char *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 17) = v9;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance HoverEffectComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(unsigned char *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 17) = v7;
  return result;
}

id protocol witness for static Component.__load(from:offset:) in conformance HoverEffectComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  long long v5 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 17);
  *(void *)a4 = *(void *)a1;
  *(void *)(a4 + 8) = v4;
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a4 + 16) = v7;
  *(unsigned char *)(a4 + 17) = v6;
  return outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(v5, v4, v7);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SkeletalPosesComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SkeletalPosesComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance SkeletalPosesComponent@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SkeletalPosesComponent(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *a2 = v7;
  a2[1] = v8;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SkeletalPosesComponent(uint64_t a1, void *a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance SkeletalPosesComponent@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PointLightComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PointLightComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance PointLightComponent()
{
  return 20;
}

uint64_t protocol witness for static Component.__load(from:) in conformance PointLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 16);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = v2;
  return MEMORY[0x270F9A8A0]();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PointLightComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance PointLightComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance PointLightComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  int v4 = *(_DWORD *)(a1 + 16);
  *(void *)a4 = *(void *)a1;
  *(void *)(a4 + 8) = *(void *)(a1 + 8);
  *(_DWORD *)(a4 + 16) = v4;
  return MEMORY[0x270F9A8A0]();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PointLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PointLightComponent.Shadow.Type);
}

double protocol witness for static Component.__load(from:) in conformance PointLightComponent.Shadow@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  char v4 = *(unsigned char *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 20);
  char v6 = *(unsigned char *)(a1 + 24);
  double result = *(double *)a1;
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3;
  *(unsigned char *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  *(unsigned char *)(a2 + 24) = v6;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PointLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = v4;
  *(double *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v6;
  *(unsigned char *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = v8;
  *(unsigned char *)(a2 + 24) = v9;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance PointLightComponent.Shadow(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = v4;
  *(double *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v6;
  *(unsigned char *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = v8;
  *(unsigned char *)(a2 + 24) = v9;
  return result;
}

double protocol witness for static Component.__load(from:offset:) in conformance PointLightComponent.Shadow@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  char v7 = *(unsigned char *)(a1 + 8);
  int v8 = *(_DWORD *)(a1 + 12);
  char v9 = *(unsigned char *)(a1 + 16);
  int v10 = *(_DWORD *)(a1 + 20);
  char v11 = *(unsigned char *)(a1 + 24);
  double result = *(double *)a1;
  *(void *)(v6 + 16) = *(void *)a1;
  *(unsigned char *)(v6 + 24) = v7;
  *(_DWORD *)(v6 + 28) = v8;
  *(unsigned char *)(v6 + 32) = v9;
  *(_DWORD *)(v6 + 36) = v10;
  *(unsigned char *)(v6 + 40) = v11;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance WorldComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for WorldComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ImageBasedLightReceiverComponent(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *a2 = v7;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ImageBasedLightReceiverComponent(uint64_t a1, void *a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *a2 = v5;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ImageBasedLightReceiverComponent@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  *a4 = *a1;
  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance DockingRegionComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for DockingRegionComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance DockingRegionComponent()
{
  return 36;
}

__n128 protocol witness for static Component.__load(from:) in conformance DockingRegionComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DockingRegionComponent(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance DockingRegionComponent(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance DockingRegionComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  int v9 = *(_DWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v8;
  *(_DWORD *)(v6 + 48) = v9;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SpatialAudioComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SpatialAudioComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance SpatialAudioComponent()
{
  return 56;
}

__n128 protocol witness for static Component.__load(from:) in conformance SpatialAudioComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(unsigned char *)(a2 + 40) = v3;
  *(void *)(a2 + 48) = v4;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SpatialAudioComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance SpatialAudioComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(void *)(v6 + 32) = v7;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v6 + 40) = result;
  *(unsigned char *)(v6 + 56) = v8;
  *(void *)(v6 + 64) = v9;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance OpacityComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for OpacityComponent.Type);
}

float protocol witness for static Component.__load(from:) in conformance OpacityComponent@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance OpacityComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance OpacityComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

float protocol witness for static Component.__load(from:offset:) in conformance OpacityComponent@<S0>(float *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  float result = *a1;
  *(float *)a4 = *a1;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ProjectiveTransformCameraComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ProjectiveTransformCameraComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance ProjectiveTransformCameraComponent()
{
  return 64;
}

__n128 protocol witness for static Component.__load(from:) in conformance ProjectiveTransformCameraComponent@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ProjectiveTransformCameraComponent(uint64_t a1, _OWORD *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance ProjectiveTransformCameraComponent(uint64_t a1, _OWORD *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance ProjectiveTransformCameraComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  long long v6 = (_OWORD *)swift_allocObject();
  *a4 = v6;
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  v6[1] = *(_OWORD *)a1;
  v6[2] = v8;
  v6[3] = v9;
  v6[4] = v10;
  return result;
}

uint64_t static Component.registerComponentProxy(componentName:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 80))(&v9, a3, a4);
  if (v9 == 36) {
    return specialized static SceneManager.customComponentTypeHelper(_:typeName:)(v4, a4, a1, a2);
  }
  else {
    return 0;
  }
}

void one-time initialization function for baseTraitSetups()
{
  baseTraitSetups._rawValue = &outlined read-only object #0 of one-time initialization function for baseTraitSetups;
}

uint64_t one-time initialization function for traitSetups()
{
  if (one-time initialization token for baseTraitSetups != -1) {
    swift_once();
  }
  rawValue = baseTraitSetups._rawValue;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, rawValue[2] + 1, 1, rawValue);
    rawValue = (void *)result;
  }
  unint64_t v3 = rawValue[2];
  unint64_t v2 = rawValue[3];
  if (v3 >= v2 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v2 > 1), v3 + 1, 1, rawValue);
    rawValue = (void *)result;
  }
  rawValue[2] = v3 + 1;
  uint64_t v4 = &rawValue[2 * v3];
  v4[4] = specialized closure #1 in SetupPair.init<A, B>(_:_:);
  v4[5] = 0;
  traitSetups._rawValue = rawValue;
  return result;
}

uint64_t Component.update<A>(_:)(uint64_t (*a1)(uint64_t))
{
  return a1(v1);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AREnvironmentProbeComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AREnvironmentProbeComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance AREnvironmentProbeComponent()
{
  return 33;
}

uint64_t protocol witness for static Component.__load(from:) in conformance AREnvironmentProbeComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 32);
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(unsigned char *)(a2 + 32) = v3;
  return swift_retain();
}

__n128 protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AREnvironmentProbeComponent(uint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  __n128 result = v8;
  a2->n128_u64[0] = v7;
  a2[1] = v8;
  a2[2].n128_u8[0] = v9;
  return result;
}

__n128 protocol witness for static Component.__store(attribute:to:offset:) in conformance AREnvironmentProbeComponent(uint64_t a1, __n128 *a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  __n128 result = v6;
  a2->n128_u64[0] = v5;
  a2[1] = v6;
  a2[2].n128_u8[0] = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AREnvironmentProbeComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 32);
  *(void *)(v6 + 16) = *(void *)a1;
  *(_OWORD *)(v6 + 32) = v7;
  *(unsigned char *)(v6 + 48) = v8;

  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance StateMachineComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for StateMachineComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance StateMachineComponent()
{
  return 17;
}

uint64_t protocol witness for static Component.__load(from:) in conformance StateMachineComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance StateMachineComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 16) = v9;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance StateMachineComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance StateMachineComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 16);
  *(void *)a4 = *(void *)a1;
  *(void *)(a4 + 8) = v4;
  *(unsigned char *)(a4 + 16) = v5;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance __SkyboxComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for __SkyboxComponent.Type);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance TextComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for TextComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance TextComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of BodyTrackingComponent(a1, a2, (uint64_t (*)(void))type metadata accessor for TextComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance TextComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance TextComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))type metadata accessor for TextComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance TextComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance TextComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void))type metadata accessor for TextComponent);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance TextComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance TextComponent(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for TextComponent, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ModelComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ModelComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance ModelComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 16) = v3;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ModelComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ModelComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

void protocol witness for static Component.__free(to:offset:) in conformance ModelComponent()
{
  swift_arrayDestroy();

  JUMPOUT(0x22A696500);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ModelComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 16);
  *(void *)a4 = *(void *)a1;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v5;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance IKComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for IKComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance IKComponent()
{
  return 24;
}

uint64_t protocol witness for static Component.__load(from:) in conformance IKComponent@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance IKComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v7;
  double result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance IKComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v5;
  double result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance IKComponent@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  *a4 = *a1;
  a4[1] = v4;
  a4[2] = v5;
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance GroundingShadowComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for GroundingShadowComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance GroundingShadowComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of GroundingShadowComponent(a1, a2);
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance GroundingShadowComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 32) = v9;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance GroundingShadowComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(void *)(a2 + 32) = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance GroundingShadowComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance GroundingShadowComponent(a1, a2, a3, outlined init with copy of GroundingShadowComponent, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AcousticModelComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AcousticModelComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance AcousticModelComponent@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AcousticModelComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v7;
  double result = *(double *)&v8;
  *(_OWORD *)(a2 + 8) = v8;
  *(void *)(a2 + 24) = v9;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance AcousticModelComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v5;
  double result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  *(void *)(a2 + 24) = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AcousticModelComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  long long v6 = (void *)swift_allocObject();
  *a4 = v6;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v10 = a1[2];
  uint64_t v9 = a1[3];
  v6[2] = v7;
  v6[3] = v8;
  v6[4] = v10;
  v6[5] = v9;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance InputTargetComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for InputTargetComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance InputTargetComponent@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 4);
  *(unsigned char *)a2 = *(unsigned char *)result;
  *(_DWORD *)(a2 + 4) = v2;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance InputTargetComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance InputTargetComponent(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *(unsigned char *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v5;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance InputTargetComponent@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  int v4 = *(_DWORD *)(result + 4);
  *(unsigned char *)a4 = *(unsigned char *)result;
  *(_DWORD *)(a4 + 4) = v4;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ModelSortGroupComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ModelSortGroupComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance ModelSortGroupComponent@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *a1;
  __int16 v3 = *((_WORD *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 2);
  *(_DWORD *)a2 = v2;
  *(_WORD *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  return swift_retain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ModelSortGroupComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *(_DWORD *)a2 = v7;
  *(_WORD *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ModelSortGroupComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *(_DWORD *)a2 = v5;
  *(_WORD *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ModelSortGroupComponent@<X0>(int *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  int v4 = *a1;
  __int16 v5 = *((_WORD *)a1 + 4);
  uint64_t v6 = *((void *)a1 + 2);
  *(_DWORD *)a4 = v4;
  *(_WORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = v6;
  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance CharacterControllerStateComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for CharacterControllerStateComponent.Type);
}

__n128 protocol witness for static Component.__load(from:) in conformance CharacterControllerStateComponent@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  unsigned __int8 v3 = a1[1].n128_u8[0];
  *a2 = *a1;
  a2[1].n128_u8[0] = v3;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance CharacterControllerStateComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance CharacterControllerStateComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance CharacterControllerStateComponent@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  __n128 result = *a1;
  unsigned __int8 v8 = a1[1].n128_u8[0];
  *(__n128 *)(v6 + 16) = *a1;
  *(unsigned char *)(v6 + 32) = v8;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PhysicsMotionComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PhysicsMotionComponent.Type);
}

__n128 protocol witness for static Component.__load(from:) in conformance PhysicsMotionComponent@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PhysicsMotionComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance PhysicsMotionComponent(uint64_t a1, _OWORD *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  return result;
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance PhysicsMotionComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v8;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AnimationLibraryComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AnimationLibraryComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance AnimationLibraryComponent@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v3, v4);

  return swift_bridgeObjectRetain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AnimationLibraryComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 32) = v9;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance AnimationLibraryComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(void *)(a2 + 32) = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AnimationLibraryComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance AnimationLibraryComponent(a1, a2, a3, a4);
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t vars8;

  a4[3] = a2;
  a4[4] = a3;
  long long v6 = (void *)swift_allocObject();
  *a4 = v6;
  long long v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  char v11 = a1[4];
  v6[2] = v8;
  v6[3] = v7;
  v6[4] = v9;
  v6[5] = v10;
  v6[6] = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v9, v10);

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance _Proto_AnimationLibraryComponent_v1(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for _Proto_AnimationLibraryComponent_v1.Type);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance _Proto_AnimationLibraryComponent_v1@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance AnimationLibraryComponent(a1, a2, a3, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance VideoComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for VideoComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance VideoComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of VideoComponent(a1, a2);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance VideoComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance VideoComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance VideoComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance GroundingShadowComponent(a1, a2, a3, outlined init with copy of VideoComponent, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance VirtualEnvironmentProbeComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for VirtualEnvironmentProbeComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance VirtualEnvironmentProbeComponent@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  return outlined copy of VirtualEnvironmentProbeComponent.Source(v3, v2, v4);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance VirtualEnvironmentProbeComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  long long v6 = (void *)swift_allocObject();
  *a4 = v6;
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  v6[2] = *a1;
  v6[3] = v7;
  v6[4] = v9;
  v6[5] = v10;

  return outlined copy of VirtualEnvironmentProbeComponent.Source(v8, v7, v9);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ChannelAudioComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ChannelAudioComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ChannelAudioComponent(void *a1, void *a2)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ChannelAudioComponent(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  uint64_t v3 = a1[3];
  unint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  return specialized static Component.__store(attribute:to:offset:deinitialize:)((uint64_t)v5, a2, v3, v4);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ChannelAudioComponent(void *a1, void *a2)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance ChannelAudioComponent(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  uint64_t v3 = a1[3];
  unint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  return specialized static Component.__store(attribute:to:offset:deinitialize:)((uint64_t)v5, a2, v3, v4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance OrthographicCameraComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for OrthographicCameraComponent.Type);
}

float protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance OrthographicCameraComponent(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  float result = v5;
  *(void *)a2 = v4;
  *(float *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 12) = v6;
  return result;
}

float protocol witness for static Component.__store(attribute:to:offset:) in conformance OrthographicCameraComponent(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  float result = v5;
  *(void *)a2 = v4;
  *(float *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 12) = v6;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance BillboardComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for BillboardComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance BillboardComponent()
{
  return 84;
}

__n128 protocol witness for static Component.__load(from:) in conformance BillboardComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 48);
  __n128 result = *(__n128 *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(unsigned char *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(unsigned char *)(a2 + 48) = v3;
  *(__n128 *)(a2 + 64) = result;
  *(_DWORD *)(a2 + 80) = v5;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance BillboardComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance BillboardComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance BillboardComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  char v7 = *(unsigned char *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 48);
  __n128 result = *(__n128 *)(a1 + 64);
  int v10 = *(_DWORD *)(a1 + 80);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(unsigned char *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a1 + 32);
  *(unsigned char *)(v6 + 64) = v8;
  *(__n128 *)(v6 + 80) = result;
  *(_DWORD *)(v6 + 96) = v10;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance _proto_StereoProjectiveTransformCameraComponent_v1(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for _proto_StereoProjectiveTransformCameraComponent_v1.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance _proto_StereoProjectiveTransformCameraComponent_v1@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance _proto_StereoProjectiveTransformCameraComponent_v1(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance _proto_StereoProjectiveTransformCameraComponent_v1(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance _proto_StereoProjectiveTransformCameraComponent_v1@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  *a4 = *a1;
  a4[1] = v4;
  a4[2] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance SceneOriginComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for SceneOriginComponent.Type);
}

void protocol witness for static Component.__load(from:offset:) in conformance SceneOriginComponent(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = a1;
  *(void *)(a3 + 32) = a2;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance DynamicLightShadowComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for DynamicLightShadowComponent.Type);
}

unsigned char *protocol witness for static Component.__load(from:offset:) in conformance DynamicLightShadowComponent@<X0>(unsigned char *result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  *(unsigned char *)a4 = *result;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ParticleEmitterComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ParticleEmitterComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance ParticleEmitterComponent()
{
  return 898;
}

uint64_t protocol witness for static Component.__load(from:) in conformance ParticleEmitterComponent@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  memcpy(v5, __src, 0x382uLL);
  memcpy(a2, __src, 0x382uLL);
  return outlined retain of ParticleEmitterComponent((uint64_t)v5);
}

void *protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ParticleEmitterComponent(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  return memcpy(a2, __src, 0x382uLL);
}

void *protocol witness for static Component.__store(attribute:to:offset:) in conformance ParticleEmitterComponent(uint64_t a1, void *a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  return memcpy(a2, __src, 0x382uLL);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ParticleEmitterComponent@<X0>(const void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  long long v7 = (void *)(v6 + 16);
  *a4 = v6;
  memcpy(v9, a1, 0x382uLL);
  memcpy(v7, a1, 0x382uLL);
  return outlined retain of ParticleEmitterComponent((uint64_t)v9);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ForceEffectComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ForceEffectComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance ForceEffectComponent()
{
  return 9;
}

uint64_t protocol witness for static Component.__load(from:) in conformance ForceEffectComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ForceEffectComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = v8;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ForceEffectComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  uint64_t result = swift_dynamicCast();
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v6;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ForceEffectComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  char v4 = *(unsigned char *)(a1 + 8);
  *(void *)a4 = *(void *)a1;
  *(unsigned char *)(a4 + 8) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance GeometricPinsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for GeometricPinsComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AudioLibraryComponent@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  *a4 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ClippingPrimitiveComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ClippingPrimitiveComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance ClippingPrimitiveComponent()
{
  return 82;
}

__n128 protocol witness for static Component.__load(from:) in conformance ClippingPrimitiveComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v6 = *(_OWORD *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 80);
  char v8 = *(unsigned char *)(a1 + 81);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(unsigned char *)(a2 + 80) = v7;
  *(unsigned char *)(a2 + 81) = v8;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ClippingPrimitiveComponent(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v8;
  *(unsigned char *)(a2 + 80) = v9;
  *(unsigned char *)(a2 + 81) = v10;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance ClippingPrimitiveComponent(uint64_t a1, uint64_t a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v8;
  *(unsigned char *)(a2 + 80) = v9;
  *(unsigned char *)(a2 + 81) = v10;
  return result;
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance ClippingPrimitiveComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v11 = *(_OWORD *)(a1 + 64);
  char v12 = *(unsigned char *)(a1 + 80);
  char v13 = *(unsigned char *)(a1 + 81);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v8;
  *(unsigned char *)(v6 + 48) = v9;
  *(_OWORD *)(v6 + 64) = v10;
  *(_OWORD *)(v6 + 80) = v11;
  *(unsigned char *)(v6 + 96) = v12;
  *(unsigned char *)(v6 + 97) = v13;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance VideoPlayerComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for VideoPlayerComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance VideoPlayerComponent()
{
  return 133;
}

uint64_t protocol witness for static Component.__load(from:) in conformance VideoPlayerComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 112);
  long long v19 = *(_OWORD *)(a1 + 96);
  v20[0] = v3;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 32);
  long long v6 = v15;
  long long v16 = v5;
  long long v7 = *(_OWORD *)(a1 + 48);
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v17 = *(_OWORD *)(a1 + 64);
  long long v9 = v17;
  long long v18 = v8;
  long long v10 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  long long v11 = v14[0];
  v14[1] = v10;
  long long v12 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = v19;
  *(_OWORD *)(a2 + 112) = v12;
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v9;
  *(_OWORD *)(a2 + 80) = v2;
  *(void *)((char *)v20 + 13) = *(void *)(a1 + 125);
  *(void *)(a2 + 125) = *(void *)(a1 + 125);
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v4;
  return outlined retain of VideoPlayerComponent((uint64_t)v14);
}

__n128 protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance VideoPlayerComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  long long v6 = v18[0];
  *(_OWORD *)(a2 + 96) = v17;
  *(_OWORD *)(a2 + 112) = v6;
  *(void *)(a2 + 125) = *(void *)((char *)v18 + 13);
  long long v7 = v14;
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v7;
  long long v8 = v16;
  *(_OWORD *)(a2 + 64) = v15;
  *(_OWORD *)(a2 + 80) = v8;
  __n128 result = v12;
  *(_OWORD *)a2 = v11;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 protocol witness for static Component.__store(attribute:to:offset:) in conformance VideoPlayerComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  long long v4 = v16[0];
  *(_OWORD *)(a2 + 96) = v15;
  *(_OWORD *)(a2 + 112) = v4;
  *(void *)(a2 + 125) = *(void *)((char *)v16 + 13);
  long long v5 = v12;
  *(_OWORD *)(a2 + 32) = v11;
  *(_OWORD *)(a2 + 48) = v5;
  long long v6 = v14;
  *(_OWORD *)(a2 + 64) = v13;
  *(_OWORD *)(a2 + 80) = v6;
  __n128 result = v10;
  *(_OWORD *)a2 = v9;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance VideoPlayerComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v8 = *(_OWORD *)(a1 + 112);
  long long v24 = *(_OWORD *)(a1 + 96);
  v25[0] = v8;
  long long v9 = *(_OWORD *)(a1 + 16);
  long long v10 = *(_OWORD *)(a1 + 48);
  long long v20 = *(_OWORD *)(a1 + 32);
  long long v11 = v20;
  long long v21 = v10;
  long long v12 = *(_OWORD *)(a1 + 48);
  long long v13 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 64);
  long long v14 = v22;
  long long v23 = v13;
  long long v15 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  long long v16 = v19[0];
  v19[1] = v15;
  long long v17 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v6 + 112) = v24;
  *(_OWORD *)(v6 + 128) = v17;
  *(_OWORD *)(v6 + 48) = v11;
  *(_OWORD *)(v6 + 64) = v12;
  *(_OWORD *)(v6 + 80) = v14;
  *(_OWORD *)(v6 + 96) = v7;
  *a4 = v6;
  *(void *)((char *)v25 + 13) = *(void *)(a1 + 125);
  *(void *)(v6 + 141) = *(void *)(a1 + 125);
  *(_OWORD *)(v6 + 16) = v16;
  *(_OWORD *)(v6 + 32) = v9;
  return outlined retain of VideoPlayerComponent((uint64_t)v19);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance __AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for __AccessibilityComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance __AccessibilityComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 1);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(unsigned char *)(a2 + 1) = v2;
  *(void *)(a2 + 8) = v3;
  long long v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v6;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance __AccessibilityComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance __AccessibilityComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance __AccessibilityComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  char v7 = *(unsigned char *)(a1 + 1);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  *(unsigned char *)(v6 + 16) = *(unsigned char *)a1;
  *(unsigned char *)(v6 + 17) = v7;
  *(void *)(v6 + 24) = v8;
  long long v11 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 48) = v11;
  *(void *)(v6 + 64) = v9;
  *(void *)(v6 + 72) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AccessibilityComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AccessibilityComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance AccessibilityComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of BodyTrackingComponent(a1, a2, type metadata accessor for AccessibilityComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AccessibilityComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance TextComponent(a1, a2, a3, a4, a5, a6, type metadata accessor for AccessibilityComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance TextComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  MEMORY[0x270FA5388](a1);
  long long v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (v12) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  return _s10RealityKit21BodyTrackingComponentVWObTm_0((uint64_t)v11, a2, a7);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance AccessibilityComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance TextComponent(a1, a2, a3, a4, a5, type metadata accessor for AccessibilityComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance TextComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  return _s10RealityKit21BodyTrackingComponentVWObTm_0((uint64_t)v10, a2, a6);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AccessibilityComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance TextComponent(a1, a2, a3, type metadata accessor for AccessibilityComponent, a4);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance TextComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(void)@<X4>, uint64_t *a5@<X8>)
{
  a5[3] = a2;
  a5[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  return outlined init with copy of BodyTrackingComponent(a1, (uint64_t)boxed_opaque_existential_1, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AmbientAudioComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AmbientAudioComponent.Type);
}

double protocol witness for static Component.__load(from:) in conformance AmbientAudioComponent@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AmbientAudioComponent(void *a1, void *a2)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ChannelAudioComponent(a1, a2);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance AmbientAudioComponent(void *a1, void *a2)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance ChannelAudioComponent(a1, a2);
}

double protocol witness for static Component.__load(from:offset:) in conformance AmbientAudioComponent@<D0>(double *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  double result = *a1;
  *a4 = *(void *)a1;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PerspectiveCameraComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PerspectiveCameraComponent.Type);
}

float protocol witness for static Component.__load(from:) in conformance PerspectiveCameraComponent@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float result = *(float *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 12);
  *(void *)a2 = *(void *)a1;
  *(float *)(a2 + 8) = result;
  *(unsigned char *)(a2 + 12) = v3;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PerspectiveCameraComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance PerspectiveCameraComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

float protocol witness for static Component.__load(from:offset:) in conformance OrthographicCameraComponent@<S0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  float result = *(float *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 12);
  *(void *)a4 = *(void *)a1;
  *(float *)(a4 + 8) = result;
  *(unsigned char *)(a4 + 12) = v5;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance __EntityInfoComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for __EntityInfoComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance __EntityInfoComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance __EntityInfoComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ReferenceComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ReferenceComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance ReferenceComponent()
{
  return 48;
}

uint64_t protocol witness for static Component.__load(from:) in conformance ReferenceComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  char v6 = *((unsigned char *)a1 + 32);
  char v7 = *((unsigned char *)a1 + 33);
  uint64_t v8 = a1[5];
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(unsigned char *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 33) = v7;
  *(void *)(a2 + 40) = v8;
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ReferenceComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ReferenceComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance ReferenceComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  char v10 = *(unsigned char *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 33);
  uint64_t v12 = *(void *)(a1 + 40);
  *(void *)(v6 + 16) = *(void *)a1;
  *(void *)(v6 + 24) = v7;
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v9;
  *(unsigned char *)(v6 + 48) = v10;
  *(unsigned char *)(v6 + 49) = v11;
  *(void *)(v6 + 56) = v12;
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PhysicsSimulationComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PhysicsSimulationComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance PhysicsSimulationComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v2;
  *(void *)(a2 + 40) = v3;
  return MEMORY[0x270F9A8A0]();
}

__n128 protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PhysicsSimulationComponent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  __n128 result = v8;
  *(_OWORD *)a2 = v7;
  *(__n128 *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v9;
  *(void *)(a2 + 40) = v10;
  return result;
}

__n128 protocol witness for static Component.__store(attribute:to:offset:) in conformance PhysicsSimulationComponent(uint64_t a1, uint64_t a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  __n128 result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v8;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance PhysicsSimulationComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  char v7 = *(unsigned char *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v9;
  *(unsigned char *)(v6 + 48) = v7;
  *(void *)(v6 + 56) = v8;

  return MEMORY[0x270F9A8A0]();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance CollisionComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for CollisionComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance CollisionComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 20);
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v2;
  *(void *)(a2 + 12) = *(void *)(a1 + 12);
  *(_DWORD *)(a2 + 20) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance CollisionComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance CollisionComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance CollisionComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  char v4 = *(unsigned char *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 20);
  *(void *)a4 = *(void *)a1;
  *(unsigned char *)(a4 + 8) = v4;
  *(void *)(a4 + 12) = *(void *)(a1 + 12);
  *(_DWORD *)(a4 + 20) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance AnchoringComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for AnchoringComponent.Type);
}

uint64_t protocol witness for static Component.__size.getter in conformance AnchoringComponent(uint64_t a1)
{
  return *(void *)(*(void *)(a1 - 8) + 64);
}

uint64_t protocol witness for static Component.__load(from:) in conformance AnchoringComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of BodyTrackingComponent(a1, a2, type metadata accessor for AnchoringComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AnchoringComponent(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AnchoringComponent(a1, a2, a3, a4, a5, a6, type metadata accessor for AnchoringComponent, type metadata accessor for AnchoringComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance AnchoringComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance AnchoringComponent(a1, a2, a3, a4, a5, type metadata accessor for AnchoringComponent, type metadata accessor for AnchoringComponent);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance AnchoringComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance TextComponent(a1, a2, a3, type metadata accessor for AnchoringComponent, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance CharacterControllerComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for CharacterControllerComponent.Type);
}

double protocol witness for static Component.__load(from:) in conformance CharacterControllerComponent@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_DWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance CharacterControllerComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance CharacterControllerComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

double protocol witness for static Component.__load(from:offset:) in conformance CharacterControllerComponent@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v6 = swift_allocObject();
  *a4 = v6;
  int v7 = *(_DWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_DWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = v8;
  double result = *(double *)(a1 + 48);
  *(double *)(v6 + 64) = result;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance BodyTrackingComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for BodyTrackingComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance BodyTrackingComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of BodyTrackingComponent(a1, a2, type metadata accessor for BodyTrackingComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance BodyTrackingComponent(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AnchoringComponent(a1, a2, a3, a4, a5, a6, type metadata accessor for BodyTrackingComponent, type metadata accessor for BodyTrackingComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance AnchoringComponent(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  long long v14 = __swift_project_boxed_opaque_existential_1(a1, v12);
  return specialized static Component.__store(attribute:to:offset:deinitialize:)((uint64_t)v14, a2, a4, v12, v13, a7, a8);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance BodyTrackingComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance AnchoringComponent(a1, a2, a3, a4, a5, type metadata accessor for BodyTrackingComponent, type metadata accessor for BodyTrackingComponent);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance AnchoringComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = __swift_project_boxed_opaque_existential_1(a1, v10);
  return specialized static Component.__store(attribute:to:offset:deinitialize:)((uint64_t)v12, a2, 1, v10, v11, a6, a7);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance BodyTrackingComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance TextComponent(a1, a2, a3, type metadata accessor for BodyTrackingComponent, a4);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance EventSubscriptionComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for EventSubscriptionComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance EventSubscriptionComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of EventSubscriptionComponent(a1, a2);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance EventSubscriptionComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance EventSubscriptionComponent(uint64_t a1, _OWORD *a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v5;
  a2[1] = v6;
  double result = *(double *)&v7;
  a2[2] = v7;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance EventSubscriptionComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return protocol witness for static Component.__load(from:offset:) in conformance GroundingShadowComponent(a1, a2, a3, outlined init with copy of EventSubscriptionComponent, a4);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance GroundingShadowComponent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(uint64_t, uint64_t)@<X6>, uint64_t *a5@<X8>)
{
  a5[3] = a2;
  a5[4] = a3;
  uint64_t v7 = swift_allocObject();
  *a5 = v7;

  return a4(a1, v7 + 16);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance _Proto_BlendShapeWeightsComponent_v1(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for _Proto_BlendShapeWeightsComponent_v1.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance _Proto_BlendShapeWeightsComponent_v1@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  swift_bridgeObjectRetain();

  return swift_retain();
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance _Proto_BlendShapeWeightsComponent_v1(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  if (a4) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance _Proto_BlendShapeWeightsComponent_v1(uint64_t a1, _OWORD *a2)
{
  swift_arrayDestroy();
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v5;
  *a2 = v5;
  return result;
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance _Proto_BlendShapeWeightsComponent_v1@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance BlendShapeWeightsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for BlendShapeWeightsComponent.Type);
}

uint64_t protocol witness for static Component.__load(from:) in conformance BlendShapeWeightsComponent@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance BlendShapeWeightsComponent@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v4 = a1[1];
  *a4 = *a1;
  a4[1] = v4;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance Transform(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t protocol witness for static Component.componentName.getter in conformance Transform(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for Transform.Type);
}

__n128 protocol witness for static Component.__load(from:) in conformance Transform@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance Transform(uint64_t a1, _OWORD *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

double protocol witness for static Component.__store(attribute:to:offset:) in conformance Transform(uint64_t a1, _OWORD *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  double result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

__n128 protocol witness for static Component.__load(from:offset:) in conformance Transform@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  long long v6 = (_OWORD *)swift_allocObject();
  *a4 = v6;
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 32);
  v6[1] = *(_OWORD *)a1;
  v6[2] = v8;
  v6[3] = v9;
  return result;
}

uint64_t protocol witness for static Component.__typeName.getter in conformance ModelDebugOptionsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for ModelDebugOptionsComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance ModelDebugOptionsComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent.Shadow(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = __swift_project_boxed_opaque_existential_1(a1, v8);

  return a7(v10, a2, v8, v9);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance ModelDebugOptionsComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SpatialAudioComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(a1, v7);

  return a6(v9, a2, v7, v8);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PortalCrossingComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PortalCrossingComponent.Type);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance SceneOriginComponent(uint64_t a1)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  return swift_dynamicCast();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance SceneOriginComponent(uint64_t a1)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  return swift_dynamicCast();
}

uint64_t protocol witness for static Component.__typeName.getter in conformance PhysicsJointsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(a1, a2, &demangling cache variable for type metadata for PhysicsJointsComponent.Type);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance DirectionalLightComponent.Shadow(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return String.init<A>(reflecting:)();
}

uint64_t protocol witness for static Component.__load(from:) in conformance PhysicsJointsComponent@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance PhysicsJointsComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance DirectionalLightComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(a1, v9);

  return a7(v11, a2, a4, v9, v10);
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance PhysicsJointsComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))specialized static Component.__store(attribute:to:offset:deinitialize:));
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance DirectionalLightComponent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(a1, v7);

  return a6(v9, a2, 1, v7, v8);
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance PhysicsJointsComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  *a4 = v5;
  a4[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v15[3] = a3;
  v15[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v10;
  *(void *)(a2 + 12) = v11;
  *(_DWORD *)(a2 + 20) = v12;
  *(unsigned char *)(a2 + 24) = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

{
  uint64_t v7;
  char *v8;
  char v9;
  unsigned char v12[40];

  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (v9) {
    UnsafeMutablePointer.deinitialize(count:)();
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  return _sSpsRi_zrlE10initialize2toyxn_tF((uint64_t)v8, a2, a4);
}

{
  uint64_t *boxed_opaque_existential_1;
  int v9;
  char v10;
  int v11;
  char v12;
  int v13;
  char v14;
  unsigned char v15[40];
  uint64_t v16[5];

  v16[3] = a3;
  v16[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v16, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_DWORD *)a2 = v9;
  *(unsigned char *)(a2 + 4) = v10;
  *(_DWORD *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 12) = v12;
  *(_DWORD *)(a2 + 16) = v13;
  *(unsigned char *)(a2 + 20) = v14;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  int v10;
  char v11;
  unsigned char v12[40];
  uint64_t v13[5];

  v13[3] = a3;
  v13[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v13, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v9;
  *(_DWORD *)(a2 + 8) = v10;
  *(unsigned char *)(a2 + 12) = v11;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

{
  uint64_t *boxed_opaque_existential_1;
  long long v9;
  char v10;
  long long v11;
  char v12;
  long long v13;
  int v14;
  unsigned char v15[40];
  uint64_t v16[5];

  v16[3] = a3;
  v16[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v16, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v9;
  *(unsigned char *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  *(unsigned char *)(a2 + 48) = v12;
  *(_OWORD *)(a2 + 64) = v13;
  *(_DWORD *)(a2 + 80) = v14;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

{
  uint64_t *boxed_opaque_existential_1;
  char v9;
  int v10;
  unsigned char v11[40];
  uint64_t v12[5];

  v12[3] = a3;
  v12[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v12, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(unsigned char *)a2 = v9;
  *(_DWORD *)(a2 + 4) = v10;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

{
  uint64_t *boxed_opaque_existential_1;
  long long v9;
  uint64_t v10;
  long long v11;
  char v12;
  uint64_t v13;
  unsigned char v14[40];
  uint64_t v15[5];

  v15[3] = a3;
  v15[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v9;
  *(void *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 24) = v11;
  *(unsigned char *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

{
  uint64_t *boxed_opaque_existential_1;
  long long v9;
  int v10;
  long long v11;
  uint64_t v12;
  unsigned char v13[40];
  uint64_t v14[5];

  v14[3] = a3;
  v14[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v9;
  *(_DWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 48) = v12;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

{
  uint64_t *boxed_opaque_existential_1;
  long long v9;
  char v10;
  unsigned char v11[40];
  uint64_t v12[5];

  v12[3] = a3;
  v12[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v12, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v9;
  *(unsigned char *)(a2 + 16) = v10;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t specialized static Component.__store(attribute:to:offset:)(uint64_t a1, uint64_t *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  uint64_t v3 = CustomComponentProxy.getJSONData()();
  unint64_t v5 = v4;
  v8[0] = 0;
  CustomComponentProxy.updateJSON(with:)(v3, v4);
  outlined consume of Data?(v3, v5);
  uint64_t v6 = v8[0];
  uint64_t result = *a2;
  if (*a2) {
    uint64_t result = RECIntrospectionFree();
  }
  *a2 = v6;
  return result;
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  v14[3] = a4;
  v14[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v11;
  *(_DWORD *)(a2 + 16) = v12;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  unsigned char v15[40];
  uint64_t v16[5];

  v16[3] = a4;
  v16[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v16, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v11;
  *(unsigned char *)(a2 + 8) = v12;
  *(void *)(a2 + 12) = v13;
  *(_DWORD *)(a2 + 20) = v14;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  long long v12;
  int v13;
  unsigned char v14[40];
  uint64_t v15[5];

  v15[3] = a4;
  v15[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v11;
  *(_OWORD *)(a2 + 8) = v12;
  *(_DWORD *)(a2 + 24) = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned char v14[40];
  uint64_t v15[5];

  v15[3] = a4;
  v15[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v12;
  *(_DWORD *)(a2 + 16) = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

{
  uint64_t *boxed_opaque_existential_1;
  char v11;
  int v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  char v29;
  uint64_t v30;
  unsigned char v31[40];
  uint64_t v32[5];

  v32[3] = a4;
  v32[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v32);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v32, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(unsigned char *)a2 = v11;
  *(_DWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  *(_OWORD *)(a2 + 64) = v15;
  *(void *)(a2 + 80) = v16;
  *(unsigned char *)(a2 + 88) = v17;
  *(unsigned char *)(a2 + 89) = v18;
  *(unsigned char *)(a2 + 90) = v19;
  *(unsigned char *)(a2 + 91) = v20;
  *(unsigned char *)(a2 + 92) = v21;
  *(unsigned char *)(a2 + 93) = v22;
  *(unsigned char *)(a2 + 94) = v23;
  *(unsigned char *)(a2 + 95) = v24;
  *(_OWORD *)(a2 + 96) = v25;
  *(_OWORD *)(a2 + 112) = v26;
  *(_OWORD *)(a2 + 128) = v27;
  *(_OWORD *)(a2 + 144) = v28;
  *(unsigned char *)(a2 + 160) = v29;
  *(void *)(a2 + 164) = v30;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  int v12;
  unsigned char v13[40];
  uint64_t v14[5];

  v14[3] = a4;
  v14[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v12;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  long long v15;
  uint64_t v16;
  unsigned char v17[40];
  uint64_t v18[5];

  v18[3] = a4;
  v18[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v18, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v11;
  *(unsigned char *)(a2 + 8) = v12;
  *(unsigned char *)(a2 + 9) = v13;
  *(unsigned char *)(a2 + 10) = v14;
  *(_OWORD *)(a2 + 16) = v15;
  *(void *)(a2 + 32) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  int v12;
  char v13;
  unsigned char v14[40];
  uint64_t v15[5];

  v15[3] = a4;
  v15[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v12;
  *(unsigned char *)(a2 + 12) = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  char v13;
  long long v14;
  long long v15;
  char v16;
  char v17;
  unsigned char v18[40];
  uint64_t v19[5];

  v19[3] = a4;
  v19[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v19, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v12;
  *(unsigned char *)(a2 + 16) = v13;
  *(_OWORD *)(a2 + 24) = v14;
  *(_OWORD *)(a2 + 40) = v15;
  *(unsigned char *)(a2 + 56) = v16;
  *(unsigned char *)(a2 + 57) = v17;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
}

{
  uint64_t *boxed_opaque_existential_1;
  long long v11;
  long long v12;
  long long v13;
  uint64_t v14;
  unsigned char v15[40];
  uint64_t v16[5];

  v16[3] = a4;
  v16[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v16, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v11;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = v13;
  *(void *)(a2 + 48) = v14;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

{
  uint64_t *boxed_opaque_existential_1;
  long long v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  unsigned char v17[40];
  uint64_t v18[5];

  v18[3] = a4;
  v18[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v18, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(_OWORD *)a2 = v11;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v13;
  *(unsigned char *)(a2 + 32) = v14;
  *(unsigned char *)(a2 + 33) = v15;
  *(void *)(a2 + 40) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

{
  uint64_t *boxed_opaque_existential_1;
  char v11;
  char v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unsigned char v17[40];
  uint64_t v18[5];

  v18[3] = a4;
  v18[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v18, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(unsigned char *)a2 = v11;
  *(unsigned char *)(a2 + 1) = v12;
  *(_OWORD *)(a2 + 8) = v13;
  *(_OWORD *)(a2 + 24) = v14;
  *(_OWORD *)(a2 + 40) = v15;
  *(void *)(a2 + 56) = v16;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  int v12;
  unsigned char v13[40];
  uint64_t v14[5];

  v14[3] = a4;
  v14[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *(void *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v12;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v13 = a6(0);
  MEMORY[0x270FA5388](v13);
  long long v15 = &v18[-v14];
  v19[3] = a4;
  v19[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v19, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  _s10RealityKit21BodyTrackingComponentVWObTm_0((uint64_t)v15, a2, a7);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, _OWORD *a2, char a3, uint64_t a4, uint64_t a5)
{
  v13[3] = a4;
  v13[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v13, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v11;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

{
  uint64_t *boxed_opaque_existential_1;
  long long v11;
  long long v12;
  long long v13;
  unsigned char v14[40];
  uint64_t v15[5];

  v15[3] = a4;
  v15[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v15, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  v12[3] = a3;
  v12[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v12, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v9;
  a2[1] = v10;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  v11[3] = a3;
  v11[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v9;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  v11[3] = a3;
  v11[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v9;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v11[3] = a3;
  v11[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v9;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t specialized static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  v14[3] = a4;
  v14[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a3) {
    swift_arrayDestroy();
  }
  outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  *a2 = v11;
  a2[1] = v12;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

void specialized static Component.__free(to:offset:)()
{
  UnsafeMutablePointer.deinitialize(count:)();

  JUMPOUT(0x22A689520);
}

uint64_t dispatch thunk of static Component.__typeName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static Component.componentName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static Component.__size.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static Component.__load(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static Component.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of static Component.__store(attribute:to:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of static Component.__free(to:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of static Component.__fromCore(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of Component.__toCore(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of static Component.__coreComponentType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of static Component.__addIntrospectionData(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of static Component.__load(from:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t sub_22804DF98()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_22804DFE8()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_22804E030()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t outlined init with copy of VideoComponent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22804E0CC()
{
  return MEMORY[0x270FA0238](v0, 64, 15);
}

uint64_t sub_22804E0DC()
{
  return MEMORY[0x270FA0238](v0, 80, 15);
}

uint64_t sub_22804E0EC()
{
  return MEMORY[0x270FA0238](v0, 64, 15);
}

uint64_t sub_22804E124()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_22804E16C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 149, 15);
}

uint64_t outlined retain of VideoPlayerComponent(uint64_t a1)
{
  return a1;
}

uint64_t sub_22804E1FC()
{
  return MEMORY[0x270FA0238](v0, 112, 15);
}

uint64_t sub_22804E20C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  uint64_t v1 = *(void **)(v0 + 640);
  if (v1)
  {

    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 914, 15);
}

uint64_t outlined retain of ParticleEmitterComponent(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 288);
  uint64_t v3 = *(void **)(a1 + 296);
  unint64_t v5 = *(void **)(a1 + 312);
  unint64_t v4 = *(void **)(a1 + 320);
  uint64_t v19 = *(void *)(a1 + 584);
  uint64_t v20 = *(void *)(a1 + 576);
  uint64_t v17 = *(void *)(a1 + 600);
  uint64_t v18 = *(void *)(a1 + 592);
  uint64_t v15 = *(void *)(a1 + 616);
  uint64_t v16 = *(void *)(a1 + 608);
  uint64_t v13 = *(void **)(a1 + 632);
  uint64_t v14 = *(void **)(a1 + 624);
  long long v11 = *(_OWORD *)(a1 + 656);
  long long v12 = *(_OWORD *)(a1 + 640);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;
  id v9 = v4;
  outlined copy of ParticleEmitterComponent.ParticleEmitter?(v20, v19, v18, v17, v16, v15, v14, v13, v12, *((void **)&v12 + 1), (void *)v11);
  return a1;
}

void outlined copy of ParticleEmitterComponent.ParticleEmitter?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, void *a10, void *a11)
{
  if (a7)
  {
    swift_retain();
    id v13 = a7;
    id v14 = a8;
    id v15 = a10;
    id v16 = a11;
  }
}

uint64_t sub_22804E4AC()
{
  outlined consume of VirtualEnvironmentProbeComponent.Source(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t outlined consume of VirtualEnvironmentProbeComponent.Source(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    if (a3 >> 62 != 1) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t outlined copy of VirtualEnvironmentProbeComponent.Source(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    if (a3 >> 62 != 1) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t objectdestroy_33Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_22804E5E0()
{
  return MEMORY[0x270FA0238](v0, 48, 15);
}

uint64_t sub_22804E5F0()
{
  return objectdestroy_43Tm(MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
}

uint64_t sub_22804E61C()
{
  if (*(void *)(v0 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  }

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t outlined init with copy of GroundingShadowComponent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of BodyTrackingComponent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s10RealityKit21BodyTrackingComponentVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_22804E788()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 49, 15);
}

uint64_t sub_22804E7C0()
{
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_22804E7D0()
{
  return MEMORY[0x270FA0238](v0, 44, 7);
}

uint64_t sub_22804E7E0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 74, 7);
}

uint64_t sub_22804E830()
{
  return objectdestroy_43Tm(MEMORY[0x263F8EEE8], MEMORY[0x263F8EEE8]);
}

uint64_t objectdestroy_43Tm(void (*a1)(void), void (*a2)(void))
{
  a1(v2[2]);
  a2(v2[3]);
  a2(v2[4]);
  a2(v2[5]);

  return MEMORY[0x270FA0238](v2, 48, 7);
}

uint64_t sub_22804E8CC()
{
  return MEMORY[0x270FA0238](v0, 44, 7);
}

uint64_t sub_22804E904()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 113, 15);
}

uint64_t sub_22804E93C()
{
  if (*(void *)(v0 + 40) >= 2uLL) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_22804E980()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 188, 15);
}

uint64_t sub_22804E9B8()
{
  outlined consume of ImageBasedLightComponent.Source(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return MEMORY[0x270FA0238](v0, 45, 7);
}

ValueMetadata *type metadata accessor for SetupPair()
{
  return &type metadata for SetupPair;
}

uint64_t __RKVisibilityBaseAnimation.deinit()
{
  return v0;
}

uint64_t __RKVisibilityBaseAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityBaseAnimation()
{
  return self;
}

uint64_t method lookup function for __RKVisibilityBaseAnimation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKVisibilityBaseAnimation);
}

uint64_t specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)(uint64_t result, uint64_t *a2, float a3, float32x4_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*a2 + 16);
  float v7 = 1.0;
  if (v6)
  {
    id v8 = (_OWORD *)(v5 + 64);
    float v9 = 0.0;
    uint64_t v10 = *(void *)(*a2 + 16);
    do
    {
      long long v11 = *v8;
      float v12 = fabsf(COERCE_FLOAT(*v8));
      if ((LODWORD(v12) & 0x7FFFFF) != 0) {
        float v13 = v9;
      }
      else {
        float v13 = v12;
      }
      if ((~LODWORD(v12) & 0x7F800000) != 0) {
        float v13 = v12;
      }
      if (v12 >= v9) {
        float v9 = v13;
      }
      float v14 = fabsf(*((float *)&v11 + 1));
      if (v14 >= v9)
      {
        if ((LODWORD(v14) & 0x7FFFFF) == 0) {
          float v9 = v14;
        }
        if ((~LODWORD(v14) & 0x7F800000) != 0) {
          float v9 = v14;
        }
      }
      float v15 = fabsf(*((float *)&v11 + 2));
      if (v15 >= v9)
      {
        if ((~LODWORD(v15) & 0x7F800000) != 0)
        {
          float v9 = v15;
        }
        else if ((LODWORD(v15) & 0x7FFFFF) == 0)
        {
          float v9 = v15;
        }
      }
      v8 += 3;
      --v10;
    }
    while (v10);
    if (v9 > 0.0) {
      float v7 = a3 / v9;
    }
  }
  if (v6)
  {
    float32x4_t v16 = *(float32x4_t *)(result + 16);
    float32x4_t v17 = vmulq_f32(v16, (float32x4_t)xmmword_22831EFE0);
    int8x16_t v18 = (int8x16_t)vmulq_f32(v16, v16);
    *(float32x2_t *)v18.i8 = vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
    v18.i32[0] = vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1)).u32[0];
    float32x2_t v19 = vrecpe_f32((float32x2_t)v18.u32[0]);
    float32x2_t v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v18.u32[0], v19));
    float32x4_t v21 = vmulq_n_f32(v17, vmul_f32(v20, vrecps_f32((float32x2_t)v18.u32[0], v20)).f32[0]);
    int32x4_t v22 = (int32x4_t)vnegq_f32(a4);
    int8x16_t v23 = (int8x16_t)vtrn2q_s32((int32x4_t)a4, vtrn1q_s32((int32x4_t)a4, v22));
    float32x4_t v24 = (float32x4_t)vrev64q_s32((int32x4_t)a4);
    v24.i32[0] = v22.i32[1];
    v24.i32[3] = v22.i32[2];
    float32x4_t v43 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)a4, (int8x16_t)v22, 8uLL), *(float32x2_t *)v21.f32, 1), (float32x4_t)vextq_s8(v23, v23, 8uLL), v21.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32(a4, v21, 3), v24, v21, 2));
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_32:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v5);
      uint64_t v5 = result;
    }
    unint64_t v26 = 0;
    float32x4_t v27 = vmulq_f32(v43, (float32x4_t)xmmword_22831EFE0);
    int32x4_t v28 = (int32x4_t)vnegq_f32(v27);
    int8x16_t v29 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, v28));
    float32x4_t v30 = (float32x4_t)vextq_s8(v29, v29, 8uLL);
    float32x4_t v31 = (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v28, 8uLL);
    float32x4_t v32 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
    v32.i32[0] = v28.i32[1];
    v32.i32[3] = v28.i32[2];
    float32x4_t v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 0);
    float32x4_t v34 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2);
    unint64_t v35 = *(void *)(v5 + 16);
    v36 = (float *)(v5 + 64);
    do
    {
      if (v26 >= v35)
      {
        __break(1u);
        goto LABEL_32;
      }
      float32x4_t v37 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v31, v7 * (float)(v36[1] - *(float *)(v5 + 68))), v30, v7 * (float)(*v36 - *(float *)(v5 + 64))), v32, v7 * (float)(v36[2] - *(float *)(v5 + 72)));
      int32x4_t v38 = (int32x4_t)vnegq_f32(v37);
      int8x16_t v39 = (int8x16_t)vtrn2q_s32((int32x4_t)v37, vtrn1q_s32((int32x4_t)v37, v38));
      float32x4_t v40 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v38, 8uLL), *(float32x2_t *)v43.f32, 1), (float32x4_t)vextq_s8(v39, v39, 8uLL), v33);
      float32x4_t v41 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
      v41.i32[0] = v38.i32[1];
      ++v26;
      v41.i32[3] = v38.i32[2];
      float32x4_t v42 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v37, v43, 3), v41, v34), v40);
      v42.i32[3] = v25;
      *(float32x4_t *)v36 = v42;
      v36 += 12;
    }
    while (v6 != v26);
    *a2 = v5;
  }
  return result;
}

uint64_t specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)(uint64_t result, uint64_t a2, float a3, float32x4_t a4)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void *)(*(void *)a2 + 16);
  float v7 = 1.0;
  if (v6)
  {
    id v8 = v5 + 8;
    float v9 = 0.0;
    uint64_t v10 = *(void *)(*(void *)a2 + 16);
    do
    {
      long long v11 = *v8;
      float v12 = fabsf(COERCE_FLOAT(*v8));
      if ((LODWORD(v12) & 0x7FFFFF) != 0) {
        float v13 = v9;
      }
      else {
        float v13 = v12;
      }
      if ((~LODWORD(v12) & 0x7F800000) != 0) {
        float v13 = v12;
      }
      if (v12 >= v9) {
        float v9 = v13;
      }
      float v14 = fabsf(*((float *)&v11 + 1));
      if (v14 >= v9)
      {
        if ((LODWORD(v14) & 0x7FFFFF) == 0) {
          float v9 = v14;
        }
        if ((~LODWORD(v14) & 0x7F800000) != 0) {
          float v9 = v14;
        }
      }
      float v15 = fabsf(*((float *)&v11 + 2));
      if (v15 >= v9)
      {
        if ((~LODWORD(v15) & 0x7F800000) != 0)
        {
          float v9 = v15;
        }
        else if ((LODWORD(v15) & 0x7FFFFF) == 0)
        {
          float v9 = v15;
        }
      }
      v8 += 3;
      --v10;
    }
    while (v10);
    if (v9 > 0.0) {
      float v7 = a3 / v9;
    }
  }
  if (v6)
  {
    float32x4_t v16 = *(float32x4_t *)(result + 16);
    float32x4_t v17 = vmulq_f32(v16, (float32x4_t)xmmword_22831EFE0);
    int8x16_t v18 = (int8x16_t)vmulq_f32(v16, v16);
    *(float32x2_t *)v18.i8 = vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
    v18.i32[0] = vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1)).u32[0];
    float32x2_t v19 = vrecpe_f32((float32x2_t)v18.u32[0]);
    float32x2_t v20 = vmul_f32(v19, vrecps_f32((float32x2_t)v18.u32[0], v19));
    float32x4_t v21 = vmulq_n_f32(v17, vmul_f32(v20, vrecps_f32((float32x2_t)v18.u32[0], v20)).f32[0]);
    int32x4_t v22 = (int32x4_t)vnegq_f32(a4);
    int8x16_t v23 = (int8x16_t)vtrn2q_s32((int32x4_t)a4, vtrn1q_s32((int32x4_t)a4, v22));
    float32x4_t v24 = (float32x4_t)vrev64q_s32((int32x4_t)a4);
    v24.i32[0] = v22.i32[1];
    v24.i32[3] = v22.i32[2];
    float32x4_t v42 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)a4, (int8x16_t)v22, 8uLL), *(float32x2_t *)v21.f32, 1), (float32x4_t)vextq_s8(v23, v23, 8uLL), v21.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32(a4, v21, 3), v24, v21, 2));
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_32:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      uint64_t v5 = (void *)result;
    }
    unint64_t v25 = 0;
    float32x4_t v26 = vmulq_f32(v42, (float32x4_t)xmmword_22831EFE0);
    int32x4_t v27 = (int32x4_t)vnegq_f32(v26);
    int8x16_t v28 = (int8x16_t)vtrn2q_s32((int32x4_t)v26, vtrn1q_s32((int32x4_t)v26, v27));
    float32x4_t v29 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
    float32x4_t v30 = (float32x4_t)vrev64q_s32((int32x4_t)v26);
    v30.i32[0] = v27.i32[1];
    v30.i32[3] = v27.i32[2];
    float32x4_t v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 0);
    float32x4_t v32 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2);
    float32x4_t v33 = (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v27, 8uLL);
    unint64_t v34 = v5[2];
    unint64_t v35 = (float *)(v5 + 8);
    do
    {
      if (v25 >= v34)
      {
        __break(1u);
        goto LABEL_32;
      }
      float32x4_t v36 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v33, v7 * (float)(v35[1] - *((float *)&v5[6 * v34 + 2] + 1))), v29, v7 * (float)(*v35 - *(float *)&v5[6 * v34 + 2])), v30, v7 * (float)(v35[2] - *(float *)&v5[6 * v34 + 3]));
      int32x4_t v37 = (int32x4_t)vnegq_f32(v36);
      int8x16_t v38 = (int8x16_t)vtrn2q_s32((int32x4_t)v36, vtrn1q_s32((int32x4_t)v36, v37));
      float32x4_t v39 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v37, 8uLL), *(float32x2_t *)v42.f32, 1), (float32x4_t)vextq_s8(v38, v38, 8uLL), v31);
      float32x4_t v40 = (float32x4_t)vrev64q_s32((int32x4_t)v36);
      v40.i32[0] = v37.i32[1];
      ++v25;
      v40.i32[3] = v37.i32[2];
      float32x4_t v41 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v36, v42, 3), v40, v32), v39);
      v41.i32[3] = v27.i32[3];
      *(float32x4_t *)unint64_t v35 = v41;
      v35 += 12;
    }
    while (v6 != v25);
    *(void *)a2 = v5;
  }
  return result;
}

uint64_t dispatch thunk of ARKitRunnable.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ARKitRunnable.getSupportedCapabilities(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ARKitRunnable.runARKitSession(withSupportedCapabilities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 24) + **(int **)(a4 + 24));
  float v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *float v9 = v4;
  v9[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ARKitRunnable.runARKitSessionWithoutRequesting(withSupportedCapabilities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ARKitRunnable.stop()(uint64_t a1, uint64_t a2)
{
  float v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 40) + **(int **)(a2 + 40));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return v7(a1, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS10RealityKit6EntityC0E10FoundationE20ConfigurationCatalogV0I3SetV_G_AM0iK5CacheCs5NeverOTg504_s10e4Kit6g5C0A10h3E20ij63V06CachedC6ReaderC17configurationSets12combinationsAHSDySSAF0E3k36VG_SayAF0E11CombinationVGtKcfcAF0eL5L9CALXEfU0_Tf1cn_n(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (!v2) {
    return result;
  }
  uint64_t v39 = MEMORY[0x263F8EE78];
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t result = specialized Dictionary.Values.startIndex.getter(v1);
  unint64_t v5 = result;
  uint64_t v6 = 0;
  char v8 = v7 & 1;
  uint64_t v9 = v1 + 64;
  uint64_t v31 = v4;
  uint64_t v32 = v2;
  uint64_t v28 = v1 + 96;
  uint64_t v29 = v1;
  uint64_t v33 = v1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && (uint64_t)v5 < 1 << *(unsigned char *)(v1 + 32))
  {
    if ((*(void *)(v9 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_33;
    }
    if (*(_DWORD *)(v1 + 36) != v4) {
      goto LABEL_34;
    }
    unint64_t v37 = v5 >> 6;
    char v30 = v8;
    uint64_t v35 = v6;
    uint64_t v36 = v4;
    long long v11 = (uint64_t *)(*(void *)(v1 + 56) + 40 * v5);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v14 = v11[3];
    uint64_t v16 = v11[4];
    type metadata accessor for Entity.ConfigurationCatalog.ConfigurationSetCache();
    float32x4_t v17 = (void *)swift_allocObject();
    v17[2] = v13;
    v17[3] = v12;
    v17[4] = v15;
    v17[5] = v14;
    v17[6] = v16;
    uint64_t v18 = *(void *)(v16 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Entity.ConfigurationCatalog.Configuration>);
      float32x2_t v19 = (void *)swift_allocObject();
      int64_t v20 = _swift_stdlib_malloc_size(v19);
      uint64_t v21 = v20 - 32;
      if (v20 < 32) {
        uint64_t v21 = v20 - 17;
      }
      _OWORD v19[2] = v18;
      v19[3] = 2 * (v21 >> 4);
      uint64_t v34 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v38, v19 + 4, v18, v16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t result = outlined consume of [String : AnimationResource].Iterator._Variant();
      if (v34 != v18) {
        goto LABEL_38;
      }
      swift_bridgeObjectRelease();
      uint64_t v1 = v29;
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      float32x2_t v19 = (void *)MEMORY[0x263F8EE78];
    }
    v17[7] = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17[8] = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = specialized ContiguousArray._endMutation()();
    int64_t v10 = 1 << *(unsigned char *)(v1 + 32);
    if ((uint64_t)v5 >= v10) {
      goto LABEL_35;
    }
    uint64_t v9 = v33;
    unint64_t v22 = v5 >> 6;
    uint64_t v23 = *(void *)(v33 + 8 * v37);
    if ((v23 & (1 << v5)) == 0) {
      goto LABEL_36;
    }
    if (*(_DWORD *)(v1 + 36) != v36) {
      goto LABEL_37;
    }
    unint64_t v24 = v23 & (-2 << (v5 & 0x3F));
    if (v24)
    {
      int64_t v10 = __clz(__rbit64(v24)) | v5 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v25 = v37 + 1;
      unint64_t v26 = (unint64_t)(v10 + 63) >> 6;
      if (v37 + 1 < v26)
      {
        unint64_t v27 = *(void *)(v33 + 8 * v25);
        if (!v27)
        {
          unint64_t v25 = v37 + 2;
          if (v37 + 2 >= v26) {
            goto LABEL_4;
          }
          unint64_t v27 = *(void *)(v33 + 8 * v25);
          if (!v27)
          {
            unint64_t v25 = v37 + 3;
            if (v37 + 3 >= v26) {
              goto LABEL_4;
            }
            unint64_t v27 = *(void *)(v33 + 8 * v25);
            if (!v27)
            {
              while (v26 - 4 != v22)
              {
                unint64_t v27 = *(void *)(v28 + 8 * v22++);
                if (v27)
                {
                  uint64_t result = outlined consume of [String : AnimationResource].Index._Variant(v5, v36, v30 & 1);
                  unint64_t v25 = v22 + 3;
                  goto LABEL_21;
                }
              }
              uint64_t result = outlined consume of [String : AnimationResource].Index._Variant(v5, v36, v30 & 1);
              goto LABEL_4;
            }
          }
        }
LABEL_21:
        int64_t v10 = __clz(__rbit64(v27)) + (v25 << 6);
      }
    }
LABEL_4:
    char v8 = 0;
    uint64_t v6 = v35 + 1;
    unint64_t v5 = v10;
    uint64_t v4 = v31;
    if (v35 + 1 == v32) {
      return v39;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t Entity.ConfigurationCatalog.CachedEntityError.errorDescription.getter()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void **)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  unint64_t result = 0xD000000000000026;
  switch(*(unsigned char *)(v0 + 48))
  {
    case 1:
      uint64_t v12 = *(void *)(v0 + 32);
      long long v11 = *(void **)(v0 + 40);
      _StringGuts.grow(_:)(154);
      v13._object = (void *)0x8000000228356BF0;
      v13._countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v13);
      v14._countAndFlagsBits = v2;
      v14._object = v1;
      String.append(_:)(v14);
      v15._countAndFlagsBits = 0xD00000000000002CLL;
      v15._object = (void *)0x8000000228356C10;
      String.append(_:)(v15);
      v16._countAndFlagsBits = v3;
      v16._object = v4;
      String.append(_:)(v16);
      v17._countAndFlagsBits = 0xD00000000000004ELL;
      v17._object = (void *)0x8000000228356C40;
      String.append(_:)(v17);
      uint64_t v9 = v12;
      int64_t v10 = v11;
      goto LABEL_4;
    case 2:
      _StringGuts.grow(_:)(78);
      v20._countAndFlagsBits = 0xD00000000000004CLL;
      v20._object = (void *)0x8000000228356BA0;
      String.append(_:)(v20);
      unint64_t v18 = v2;
      unint64_t v19 = (unint64_t)v1;
      goto LABEL_8;
    case 3:
      _StringGuts.grow(_:)(71);
      v21._countAndFlagsBits = 0xD000000000000044;
      v21._object = (void *)0x8000000228356B20;
      String.append(_:)(v21);
      v22._countAndFlagsBits = v2;
      v22._object = v1;
      String.append(_:)(v22);
      unint64_t v18 = 46;
      unint64_t v19 = 0xE100000000000000;
      goto LABEL_8;
    case 4:
      _StringGuts.grow(_:)(245);
      v23._countAndFlagsBits = 0xD000000000000023;
      v23._object = (void *)0x8000000228356A10;
      String.append(_:)(v23);
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 0xD00000000000002BLL;
      v25._object = (void *)0x8000000228356A40;
      String.append(_:)(v25);
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      unint64_t v18 = 0xD0000000000000A3;
      unint64_t v19 = 0x8000000228356A70;
      goto LABEL_8;
    case 5:
      return result;
    default:
      _StringGuts.grow(_:)(188);
      v6._countAndFlagsBits = 0xD00000000000001CLL;
      v6._object = (void *)0x8000000228356C90;
      String.append(_:)(v6);
      v7._countAndFlagsBits = v2;
      v7._object = v1;
      String.append(_:)(v7);
      v8._countAndFlagsBits = 0xD00000000000009ALL;
      v8._object = (void *)0x8000000228356CB0;
      String.append(_:)(v8);
      uint64_t v9 = v3;
      int64_t v10 = v4;
LABEL_4:
      String.append(_:)(*(Swift::String *)&v9);
      unint64_t v18 = 11815;
      unint64_t v19 = 0xE200000000000000;
LABEL_8:
      String.append(_:)(*(Swift::String *)&v18);
      return 0;
  }
}

unint64_t lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError;
  if (!lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError);
  }
  return result;
}

uint64_t outlined copy of Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result = a2;
  if (a7 - 2 >= 2)
  {
    if (a7)
    {
      if (a7 != 1) {
        return result;
      }
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1)
{
  return outlined consume of Entity.ConfigurationCatalog.CachedEntityError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
}

uint64_t outlined consume of Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result = a2;
  if (a7 - 2 >= 2)
  {
    if (a7)
    {
      if (a7 != 1) {
        return result;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 48);
  outlined copy of Entity.ConfigurationCatalog.CachedEntityError(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 48);
  outlined copy of Entity.ConfigurationCatalog.CachedEntityError(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  unsigned __int8 v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  outlined consume of Entity.ConfigurationCatalog.CachedEntityError(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  unsigned __int8 v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  outlined consume of Entity.ConfigurationCatalog.CachedEntityError(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.ConfigurationCatalog.CachedEntityError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Entity.ConfigurationCatalog.CachedEntityError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 4u) {
    return *(unsigned __int8 *)(a1 + 48);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for Entity.ConfigurationCatalog.CachedEntityError(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)__n128 result = a2 - 5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)(result + 40) = 0;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.CachedEntityError()
{
  return &type metadata for Entity.ConfigurationCatalog.CachedEntityError;
}

uint64_t Entity.ConfigurationCatalog.CachedEntityReader.init(configurationSets:combinations:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  unsigned int v7 = REGetMaxRealityFileConfigurationSceneCount();
  unint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = v7;
  if (v8 > v7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(void *)uint64_t v10 = v8;
    *(void *)(v10 + 8) = v9;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 16) = 0;
    char v11 = 11;
LABEL_7:
    *(unsigned char *)(v10 + 40) = v11;
    swift_willThrow();
    goto LABEL_8;
  }
  uint64_t v12 = (void *)specialized Sequence.compactMap<A>(_:)(a1);
  uint64_t v13 = v12;
  if (v12[2])
  {
    uint64_t v15 = v12[4];
    uint64_t v14 = v12[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v16 = v13[2];
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
      if (v18)
      {
        uint64_t v19 = *(void *)(a1 + 56) + 40 * v17;
        uint64_t v20 = *(void *)(v19 + 16);
        uint64_t v21 = *(void *)(v19 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(void *)uint64_t v10 = v16;
        *(void *)(v10 + 8) = v15;
        *(void *)(v10 + 16) = v14;
        *(void *)(v10 + 24) = v20;
        *(void *)(v10 + 32) = v21;
        char v11 = 8;
        goto LABEL_7;
      }
LABEL_47:
      swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v23 = swift_bridgeObjectRetain();
  unint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS10RealityKit6EntityC0E10FoundationE20ConfigurationCatalogV0I3SetV_G_AM0iK5CacheCs5NeverOTg504_s10e4Kit6g5C0A10h3E20ij63V06CachedC6ReaderC17configurationSets12combinationsAHSDySSAF0E3k36VG_SayAF0E11CombinationVGtKcfcAF0eL5L9CALXEfU0_Tf1cn_n(v23);
  swift_bridgeObjectRelease();
  type metadata accessor for Entity.ConfigurationCatalog.ConfigurationCollectionCache();
  swift_allocObject();
  uint64_t v25 = Entity.ConfigurationCatalog.ConfigurationCollectionCache.init(sourcePath:configurationSetCaches:)(47, 0xE100000000000000, v24);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v26 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_22831E4E0;
  *(void *)(v27 + 32) = v26;
  v45[0] = v27;
  specialized Array._endMutation()();
  type metadata accessor for Entity.ConfigurationCatalog.ConfigurationMapCache();
  swift_allocObject();
  swift_retain();
  *(void *)(v4 + 16) = Entity.ConfigurationCatalog.ConfigurationMapCache.init(configurationCollectionCaches:)(v45[0]);
  if (!*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_39:
    uint64_t v46 = MEMORY[0x263F8EE80];
    uint64_t v43 = *(void *)(a2 + 16);
    if (v43)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v43; ++i)
      {
        *(_OWORD *)v45 = *(_OWORD *)(a2 + 16 * i + 32);
        swift_retain();
        swift_bridgeObjectRetain();
        closure #3 in Entity.ConfigurationCatalog.CachedEntityReader.init(configurationSets:combinations:)(&v46, v45, v26);
        swift_bridgeObjectRelease();
        swift_release();
      }
      swift_release();
      swift_bridgeObjectRelease_n();
      *(void *)(v4 + 24) = v46;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      *(void *)(v4 + 24) = MEMORY[0x263F8EE80];
    }
    return v4;
  }
  int64_t v28 = 0;
  uint64_t v29 = a1 + 64;
  uint64_t v30 = 1;
  uint64_t v31 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v33 = v32 & *(void *)(a1 + 64);
  int64_t v34 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v33)
    {
      unint64_t v35 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      unint64_t v36 = v35 | (v28 << 6);
      goto LABEL_18;
    }
    int64_t v39 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      goto LABEL_45;
    }
    if (v39 >= v34) {
      break;
    }
    unint64_t v40 = *(void *)(v29 + 8 * v39);
    ++v28;
    if (!v40)
    {
      int64_t v28 = v39 + 1;
      if (v39 + 1 >= v34) {
        break;
      }
      unint64_t v40 = *(void *)(v29 + 8 * v28);
      if (!v40)
      {
        int64_t v28 = v39 + 2;
        if (v39 + 2 >= v34) {
          break;
        }
        unint64_t v40 = *(void *)(v29 + 8 * v28);
        if (!v40)
        {
          int64_t v28 = v39 + 3;
          if (v39 + 3 >= v34) {
            break;
          }
          unint64_t v40 = *(void *)(v29 + 8 * v28);
          if (!v40)
          {
            int64_t v41 = v39 + 4;
            if (v41 >= v34) {
              break;
            }
            unint64_t v40 = *(void *)(v29 + 8 * v41);
            if (!v40)
            {
              while (1)
              {
                int64_t v28 = v41 + 1;
                if (__OFADD__(v41, 1)) {
                  goto LABEL_46;
                }
                if (v28 >= v34) {
                  goto LABEL_36;
                }
                unint64_t v40 = *(void *)(v29 + 8 * v28);
                ++v41;
                if (v40) {
                  goto LABEL_35;
                }
              }
            }
            int64_t v28 = v41;
          }
        }
      }
    }
LABEL_35:
    unint64_t v33 = (v40 - 1) & v40;
    unint64_t v36 = __clz(__rbit64(v40)) + (v28 << 6);
LABEL_18:
    uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 56) + 40 * v36 + 32) + 16);
    uint64_t v38 = (unsigned __int128)(v30 * (__int128)v37) >> 64;
    v30 *= v37;
    if (v38 != v30 >> 63)
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
  }
LABEL_36:
  swift_release();
  if ((uint64_t)v8 >= v30) {
    goto LABEL_39;
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
  swift_allocError();
  *(void *)uint64_t v42 = v8;
  *(void *)(v42 + 8) = v30;
  *(_OWORD *)(v42 + 16) = 0u;
  *(_OWORD *)(v42 + 32) = 0u;
  *(unsigned char *)(v42 + 48) = 4;
  swift_willThrow();
  swift_release();
  swift_release();
LABEL_8:
  type metadata accessor for Entity.ConfigurationCatalog.CachedEntityReader();
  swift_deallocPartialClassInstance();
  return v4;
}

uint64_t closure #3 in Entity.ConfigurationCatalog.CachedEntityReader.init(configurationSets:combinations:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  uint64_t v60 = *a2;
  unint64_t v5 = v4 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v4 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  uint64_t v63 = v4;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * i);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = *(void *)(*(void *)(a3 + 40) + 16);
    swift_bridgeObjectRetain();
    if (!v20
      || (swift_bridgeObjectRetain(),
          specialized __RawDictionaryStorage.find<A>(_:)(v19, v18),
          char v22 = v21,
          swift_bridgeObjectRelease(),
          (v22 & 1) == 0))
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.ConfigurationSetCache].Keys);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [String : Entity.ConfigurationCatalog.ConfigurationSetCache].Keys and conformance [A : B].Keys, &demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.ConfigurationSetCache].Keys);
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v23 = Sequence<>.joined(separator:)();
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
      swift_allocError();
      *(void *)uint64_t v26 = v19;
      *(void *)(v26 + 8) = v18;
      *(void *)(v26 + 16) = v23;
      *(void *)(v26 + 24) = v25;
      *(void *)(v26 + 32) = 0;
      *(void *)(v26 + 40) = 0;
      *(unsigned char *)(v26 + 48) = 0;
      swift_willThrow();
      return swift_release();
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v4 = v63;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if (v14 >= v9) {
      goto LABEL_29;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v9) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v5 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v9) {
          goto LABEL_29;
        }
        unint64_t v15 = *(void *)(v5 + 8 * v11);
        if (!v15)
        {
          int64_t v11 = v14 + 3;
          if (v14 + 3 >= v9) {
            goto LABEL_29;
          }
          unint64_t v15 = *(void *)(v5 + 8 * v11);
          if (!v15)
          {
            int64_t v11 = v14 + 4;
            if (v14 + 4 >= v9) {
              goto LABEL_29;
            }
            unint64_t v15 = *(void *)(v5 + 8 * v11);
            if (!v15) {
              break;
            }
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 5;
  if (v16 >= v9) {
    goto LABEL_29;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      return result;
    }
    if (v11 >= v9) {
      break;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_29:
  swift_release();
  Hasher.init()();
  unint64_t v5 = *(void *)(a3 + 32);
  if (!(v5 >> 62))
  {
    uint64_t v27 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v27) {
      goto LABEL_31;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    Swift::Int v41 = Hasher.finalize()();
    uint64_t v42 = v41;
    if (*(void *)(*a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v41), (v43 & 1) != 0))
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String].Values);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [String : String].Values and conformance [A : B].Values, &demangling cache variable for type metadata for [String : String].Values);
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v44 = Sequence<>.joined(separator:)();
      uint64_t v46 = v45;
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
      swift_allocError();
      *(void *)uint64_t v47 = v44;
      *(void *)(v47 + 8) = v46;
      *(_OWORD *)(v47 + 16) = 0u;
      *(_OWORD *)(v47 + 32) = 0u;
      *(unsigned char *)(v47 + 48) = 2;
      return swift_willThrow();
    }
    else
    {
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v64 = *a1;
      *a1 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v60, v42, isUniquelyReferenced_nonNull_native);
      *a1 = v64;
      return swift_bridgeObjectRelease();
    }
  }
LABEL_61:
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  if (!v27) {
    goto LABEL_41;
  }
LABEL_31:
  uint64_t v62 = v27;
  uint64_t v28 = 0;
  if ((v5 & 0xC000000000000001) != 0)
  {
    while (2)
    {
      uint64_t v29 = MEMORY[0x22A689930](v28, v5);
      uint64_t v30 = v28 + 1;
      if (__OFADD__(v28, 1)) {
        goto LABEL_59;
      }
      uint64_t v31 = (void *)v29;
      uint64_t v32 = *(void *)(v29 + 32);
      uint64_t v33 = *(void *)(v29 + 40);
      uint64_t v34 = *(void *)(v4 + 16);
      swift_bridgeObjectRetain();
      if (v34)
      {
        swift_bridgeObjectRetain();
        unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
        if (v36)
        {
          uint64_t v37 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v35);
          uint64_t v38 = *v37;
          uint64_t v39 = v37[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
LABEL_38:
          if (!*(void *)(v31[8] + 16)) {
            goto LABEL_54;
          }
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
          if ((v40 & 1) == 0) {
            goto LABEL_55;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          ++v28;
          uint64_t v4 = v63;
          if (v30 == v62) {
            goto LABEL_41;
          }
          continue;
        }
        swift_bridgeObjectRelease();
      }
      break;
    }
    uint64_t v38 = v31[2];
    uint64_t v39 = v31[3];
    swift_bridgeObjectRetain();
    goto LABEL_38;
  }
  while (2)
  {
    uint64_t v49 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      goto LABEL_60;
    }
    v50 = *(void **)(v5 + 8 * v28 + 32);
    uint64_t v32 = v50[4];
    uint64_t v33 = v50[5];
    if (*(void *)(v4 + 16))
    {
      swift_bridgeObjectRetain_n();
      swift_retain();
      unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
      if (v52)
      {
        v53 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v51);
        uint64_t v38 = *v53;
        uint64_t v39 = v53[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_53;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    uint64_t v38 = v50[2];
    uint64_t v39 = v50[3];
    swift_bridgeObjectRetain();
LABEL_53:
    if (!*(void *)(v50[8] + 16))
    {
LABEL_54:
      uint64_t v54 = v32;
      goto LABEL_56;
    }
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
    if (v48)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_release();
      ++v28;
      uint64_t v4 = v63;
      if (v49 == v27) {
        goto LABEL_41;
      }
      continue;
    }
    break;
  }
LABEL_55:
  uint64_t v54 = v32;
  swift_bridgeObjectRelease();
LABEL_56:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.Configuration].Keys);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [String : Entity.ConfigurationCatalog.Configuration].Keys and conformance [A : B].Keys, &demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.Configuration].Keys);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v55 = Sequence<>.joined(separator:)();
  uint64_t v57 = v56;
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
  swift_allocError();
  *(void *)uint64_t v58 = v38;
  *(void *)(v58 + 8) = v39;
  *(void *)(v58 + 16) = v54;
  *(void *)(v58 + 24) = v33;
  *(void *)(v58 + 32) = v55;
  *(void *)(v58 + 40) = v57;
  *(unsigned char *)(v58 + 48) = 1;
  swift_willThrow();
  return swift_release();
}

uint64_t Entity.ConfigurationCatalog.CachedEntityReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.CachedEntityReader.loadEntity(into:withConfigurations:loadOptions:), 0, 0);
}

uint64_t Entity.ConfigurationCatalog.CachedEntityReader.loadEntity(into:withConfigurations:loadOptions:)()
{
  uint64_t v1 = *(void *)(v0 + 176);
  if (!v1)
  {
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
    swift_allocError();
    *(_OWORD *)uint64_t v29 = 0u;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(unsigned char *)(v29 + 48) = 5;
    goto LABEL_28;
  }
  if (!*(void *)(v1 + 16)
    || (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(47, 0xE100000000000000), (v3 & 1) == 0))
  {
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(_OWORD *)uint64_t v28 = xmmword_228330E70;
    *(void *)(v28 + 24) = 0;
    *(void *)(v28 + 32) = 0;
    *(void *)(v28 + 16) = 0;
    *(unsigned char *)(v28 + 40) = 1;
LABEL_28:
    swift_willThrow();
    goto LABEL_29;
  }
  uint64_t v4 = *(void *)(*(void *)(*(void *)(v0 + 184) + 16) + 24);
  if (!*(void *)(v4 + 16))
  {
LABEL_27:
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(_OWORD *)uint64_t v30 = xmmword_228330E70;
    *(void *)(v30 + 24) = 0;
    *(void *)(v30 + 32) = 0;
    *(void *)(v30 + 16) = 0;
    *(unsigned char *)(v30 + 40) = 0;
    goto LABEL_28;
  }
  uint64_t v5 = *(void *)(*(void *)(v1 + 56) + 8 * v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(47, 0xE100000000000000);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(*(void *)(v4 + 56) + 8 * v6);
  *(void *)(v0 + 192) = v8;
  swift_retain();
  swift_bridgeObjectRelease();
  Hasher.init()();
  unint64_t v9 = *(void *)(v8 + 32);
  if (v9 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = v11;
    if (v11)
    {
LABEL_8:
      if ((v9 & 0xC000000000000001) != 0)
      {
LABEL_41:
        uint64_t v14 = MEMORY[0x22A689930](0, v9);
        if (!*(void *)(v5 + 16)) {
          goto LABEL_23;
        }
      }
      else
      {
        if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return MEMORY[0x270FA2498](v11, v12, v13);
        }
        uint64_t v14 = *(void *)(v9 + 32);
        swift_retain();
        if (!*(void *)(v5 + 16)) {
          goto LABEL_23;
        }
      }
      uint64_t v15 = *(void *)(v14 + 32);
      uint64_t v16 = *(void *)(v14 + 40);
      swift_bridgeObjectRetain();
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v10 - 1;
        do
        {
          uint64_t v10 = *(void *)(*(void *)(v5 + 56) + 16 * v17 + 8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          String.hash(into:)();
          swift_release();
          swift_bridgeObjectRelease();
          if (v20 == v19) {
            goto LABEL_34;
          }
          unint64_t v21 = v19 + 1;
          if ((v9 & 0xC000000000000001) != 0)
          {
            uint64_t v14 = MEMORY[0x22A689930](v19 + 1, v9);
            if (__OFADD__(v21, 1)) {
              goto LABEL_32;
            }
          }
          else
          {
            if (v21 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_41;
            }
            uint64_t v14 = *(void *)(v9 + 8 * v19 + 40);
            swift_retain();
            if (__OFADD__(v21, 1))
            {
LABEL_32:
              __break(1u);
              goto LABEL_33;
            }
          }
          if (!*(void *)(v5 + 16)) {
            goto LABEL_23;
          }
          uint64_t v22 = *(void *)(v14 + 32);
          uint64_t v23 = *(void *)(v14 + 40);
          swift_bridgeObjectRetain();
          unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23);
          ++v19;
        }
        while ((v24 & 1) != 0);
      }
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(v14 + 32);
      uint64_t v26 = *(void *)(v14 + 40);
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
      swift_allocError();
      *(void *)uint64_t v27 = v25;
      *(void *)(v27 + 8) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0;
      *(void *)(v27 + 16) = 0;
      *(unsigned char *)(v27 + 40) = 4;
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_release();
      swift_release();
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v11 = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_8;
    }
  }
LABEL_34:
  uint64_t v33 = *(void *)(v0 + 184);
  swift_bridgeObjectRelease();
  long long v34 = *(_OWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 120);
  *(_OWORD *)(v0 + 64) = v34;
  *(void *)(v0 + 80) = *(void *)(v0 + 152);
  long long v35 = *(_OWORD *)(v0 + 104);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 88);
  *(_OWORD *)(v0 + 32) = v35;
  Swift::Int v36 = Hasher.finalize()();
  uint64_t v37 = *(void *)(v33 + 24);
  if (*(void *)(v37 + 16))
  {
    unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
    if (v39)
    {
      *(void *)(v0 + 200) = *(void *)(*(void *)(v37 + 56) + 8 * v38);
      swift_retain();
      swift_bridgeObjectRelease();
      type metadata accessor for MainActor();
      *(void *)(v0 + 208) = static MainActor.shared.getter();
      uint64_t v40 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v42 = v41;
      uint64_t v11 = (uint64_t)Entity.ConfigurationCatalog.CachedEntityReader.loadEntity(into:withConfigurations:loadOptions:);
      uint64_t v12 = v40;
      uint64_t v13 = v42;
      return MEMORY[0x270FA2498](v11, v12, v13);
    }
  }
  *(void *)(v0 + 160) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String].Values);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [String : String].Values and conformance [A : B].Values, &demangling cache variable for type metadata for [String : String].Values);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v43 = Sequence<>.joined(separator:)();
  uint64_t v45 = v44;
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Entity.ConfigurationCatalog.CachedEntityError and conformance Entity.ConfigurationCatalog.CachedEntityError();
  swift_allocError();
  *(void *)uint64_t v46 = v43;
  *(void *)(v46 + 8) = v45;
  *(_OWORD *)(v46 + 16) = 0u;
  *(_OWORD *)(v46 + 32) = 0u;
  *(unsigned char *)(v46 + 48) = 3;
  swift_willThrow();
  swift_release();
LABEL_29:
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 168);
  swift_release();
  Entity.copy(to:recursive:)(v1, 1);
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.CachedEntityReader.loadEntity(into:withConfigurations:loadOptions:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.CachedEntityReader()
{
  return self;
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.configurationMapCache.getter in conformance Entity.ConfigurationCatalog.CachedEntityReader()
{
  return swift_retain();
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.loadEntity(into:withConfigurations:loadOptions:) in conformance Entity.ConfigurationCatalog.CachedEntityReader(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *unint64_t v6 = v3;
  v6[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  v6[22] = a2;
  v6[23] = v2;
  v6[21] = a1;
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.CachedEntityReader.loadEntity(into:withConfigurations:loadOptions:), 0, 0);
}

uint64_t QueryType.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t QueryType.evaluate(value:)()
{
  return (*v0)();
}

uint64_t type metadata accessor for QueryType()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AREnvironmentProbeComponent.texture.getter()
{
  return swift_retain();
}

uint64_t AREnvironmentProbeComponent.texture.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AREnvironmentProbeComponent.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 AREnvironmentProbeComponent.extent.getter()
{
  return v0[1];
}

void AREnvironmentProbeComponent.extent.setter(__n128 a1)
{
  v1[1] = a1;
}

uint64_t (*AREnvironmentProbeComponent.extent.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AREnvironmentProbeComponent.useAsBackground.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t AREnvironmentProbeComponent.useAsBackground.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t (*AREnvironmentProbeComponent.useAsBackground.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t AREnvironmentProbeComponent.init(texture:extent:useAsBackground:)@<X0>(unint64_t result@<X0>, unsigned __int8 a2@<W1>, __n128 *a3@<X8>, __n128 a4@<Q0>)
{
  a3->n128_u64[0] = result;
  a3[1] = a4;
  a3[2].n128_u8[0] = a2;
  return result;
}

__n128 static AREnvironmentProbeComponent.__fromCore(_:)@<Q0>(__n128 *a1@<X8>)
{
  uint64_t Texture = REAREnvironmentProbeComponentGetTexture();
  if (Texture)
  {
    uint64_t v3 = Texture;
    type metadata accessor for TextureResource();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    *(void *)(v4 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  else
  {
    uint64_t v4 = 0;
  }
  REAREnvironmentProbeComponentGetExtents();
  __n128 v8 = v5;
  unsigned __int8 UseAsBackground = REAREnvironmentProbeComponentGetUseAsBackground();
  a1->n128_u64[0] = v4;
  __n128 result = v8;
  a1[1] = v8;
  a1[2].n128_u8[0] = UseAsBackground;
  return result;
}

uint64_t AREnvironmentProbeComponent.__toCore(_:)()
{
  REAREnvironmentProbeComponentSetTexture();
  REAREnvironmentProbeComponentSetExtents();
  REAREnvironmentProbeComponentSetUseAsBackground();

  return RENetworkMarkComponentDirty();
}

void static AREnvironmentProbeComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 42;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance AREnvironmentProbeComponent()
{
  REAREnvironmentProbeComponentSetTexture();
  REAREnvironmentProbeComponentSetExtents();
  REAREnvironmentProbeComponentSetUseAsBackground();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance AREnvironmentProbeComponent(_DWORD *a1@<X8>)
{
  *a1 = 42;
}

uint64_t initializeWithCopy for AREnvironmentProbeComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AREnvironmentProbeComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for AREnvironmentProbeComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AREnvironmentProbeComponent(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 33)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AREnvironmentProbeComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AREnvironmentProbeComponent()
{
  return &type metadata for AREnvironmentProbeComponent;
}

uint64_t __RKActiveSceneManager.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v1;
  return result;
}

uint64_t static __RKActiveSceneManager.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t __RKActiveSceneManager.init()()
{
  uint64_t result = v0;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = v2;
  return result;
}

uint64_t __RKActiveSceneManager.activeScene.setter(uint64_t a1)
{
  specialized __RKActiveSceneManager.activeScene.setter(a1);

  return swift_release();
}

uint64_t (*__RKActiveSceneManager.activeScene.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return __RKActiveSceneManager.activeScene.modify;
}

uint64_t __RKActiveSceneManager.activeScene.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    swift_beginAccess();
    uint64_t result = *(void *)(v5 + 24);
    uint64_t v6 = *(void *)(result + 16);
    if (v6)
    {
      char v7 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
      do
      {
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v9 = *v7;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v11 = *(void *)(v8 + 16);
        uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
        swift_retain();
        swift_unknownObjectRetain();
        v12(v8, v11, ObjectType, v9);
        swift_release();
        swift_unknownObjectRelease();
        v7 += 2;
        --v6;
      }
      while (v6);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t __RKActiveSceneManager.addObserver(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void **)(v2 + 24);
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = (void *)(v7 + 32);
    while (*v9 != a1)
    {
      v9 += 2;
      if (!--v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    swift_beginAccess();
    uint64_t v10 = *v5;
    swift_unknownObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v5 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *uint64_t v5 = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
      *uint64_t v5 = v10;
    }
    v10[2] = v13 + 1;
    uint64_t v14 = &v10[2 * v13];
    v14[4] = a1;
    uint64_t v14[5] = a2;
    return swift_endAccess();
  }
  return result;
}

uint64_t __RKActiveSceneManager.removeObserver(observer:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    unint64_t v6 = 0;
    for (unint64_t i = (void *)(v4 + 32); *i != a1; i += 2)
    {
      if (v5 == ++v6) {
        return result;
      }
    }
    swift_beginAccess();
    specialized Array.remove(at:)(v6);
    swift_endAccess();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t __RKActiveSceneManager.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKActiveSceneManager.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t specialized __RKActiveSceneManager.activeScene.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  swift_retain();
  swift_release();
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (uint64_t *)(v5 + 40);
    do
    {
      uint64_t v8 = *v7;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v10 = *(void *)(v2 + 16);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8);
      swift_retain();
      swift_unknownObjectRetain();
      v11(v2, v10, ObjectType, v8);
      swift_unknownObjectRelease();
      swift_release();
      v7 += 2;
      --v6;
    }
    while (v6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_228051C20@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 16);
  return swift_retain();
}

uint64_t sub_228051C6C()
{
  uint64_t v0 = swift_retain();
  specialized __RKActiveSceneManager.activeScene.setter(v0);

  return swift_release();
}

uint64_t dispatch thunk of __RKActiveSceneObserver.manager(_:activeSceneDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for __RKActiveSceneManager()
{
  return self;
}

uint64_t method lookup function for __RKActiveSceneManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKActiveSceneManager);
}

uint64_t dispatch thunk of __RKActiveSceneManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of __RKActiveSceneManager.activeScene.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of __RKActiveSceneManager.activeScene.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of __RKActiveSceneManager.activeScene.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of __RKActiveSceneManager.addObserver(observer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of __RKActiveSceneManager.removeObserver(observer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t HasModel.blendWeights.getter()
{
  REBlendShapeWeightsComponentGetComponentType();
  if (REEntityGetComponentByClass()
    && (uint64_t BlendShapeWeightsCount = REBlendShapeWeightsComponentGetBlendShapeWeightsCount()) != 0)
  {
    uint64_t v1 = BlendShapeWeightsCount;
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendShapeWeightsCount & ~(BlendShapeWeightsCount >> 63), 0, MEMORY[0x263F8EE78]);
    if (v1 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = v2;
      uint64_t v4 = 0;
      uint64_t v5 = MEMORY[0x263F8EE78];
      while (1)
      {
        uint64_t BlendWeightCount = REBlendShapeWeightsComponentGetBlendWeightCount();
        if (BlendWeightCount < 0) {
          break;
        }
        uint64_t v7 = BlendWeightCount;
        if (BlendWeightCount)
        {
          uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v8 + 16) = v7;
        }
        else
        {
          uint64_t v8 = v5;
        }
        REBlendShapeWeightsComponentGetBlendWeights();
        *(void *)(v8 + 16) = v7;
        unint64_t v10 = v3[2];
        unint64_t v9 = v3[3];
        if (v10 >= v9 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v3);
        }
        ++v4;
        v3[2] = v10 + 1;
        v3[v10 + 4] = v8;
        if (v1 == v4) {
          return (uint64_t)v3;
        }
      }
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>);
    uint64_t v3 = (void *)swift_allocObject();
    *((_OWORD *)v3 + 1) = xmmword_22830EC60;
    v3[4] = MEMORY[0x263F8EE78];
    return (uint64_t)v3;
  }
  return result;
}

uint64_t HasModel.blendWeights.setter(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    REBlendShapeWeightsComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      uint64_t BlendShapeWeightsCount = REBlendShapeWeightsComponentGetBlendShapeWeightsCount();
      if (BlendShapeWeightsCount)
      {
        if (BlendShapeWeightsCount == v2)
        {
          uint64_t result = REBlendShapeWeightsComponentGetBlendWeightCount();
          if (!*(void *)(a1 + 16))
          {
LABEL_30:
            __break(1u);
            return result;
          }
          uint64_t v5 = a1 + 32;
          if (result == *(void *)(*(void *)(a1 + 32) + 16))
          {
            uint64_t v6 = 0;
            while (v2 - 1 != v6)
            {
              uint64_t result = REBlendShapeWeightsComponentGetBlendWeightCount();
              if ((unint64_t)(v6 + 1) >= *(void *)(a1 + 16))
              {
LABEL_27:
                __break(1u);
                goto LABEL_28;
              }
              uint64_t v7 = *(void *)(*(void *)(a1 + 8 * v6++ + 40) + 16);
              if (result != v7) {
                goto LABEL_11;
              }
            }
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, MEMORY[0x263F8EE78]);
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v8 = 0;
            while (v8 != v2)
            {
              if (v8 >= *(void *)(a1 + 16)) {
                goto LABEL_29;
              }
              uint64_t v9 = *(void *)(*(void *)(v5 + 8 * v8) + 16);
              if (v9)
              {
                unint64_t v10 = 0;
                while (v10 < *(void *)(*(void *)(v5 + 8 * v8) + 16))
                {
                  unint64_t v11 = v10 + 1;
                  uint64_t result = REBlendShapeWeightsComponentSetBlendWeight();
                  unint64_t v10 = v11;
                  if (v9 == v11) {
                    goto LABEL_15;
                  }
                }
                __break(1u);
                goto LABEL_27;
              }
LABEL_15:
              if (++v8 == v2)
              {
                swift_bridgeObjectRelease();
                return RENetworkMarkComponentDirty();
              }
            }
LABEL_28:
            __break(1u);
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
        }
      }
    }
  }
LABEL_11:

  return swift_bridgeObjectRelease();
}

uint64_t (*HasModel.blendWeights.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = HasModel.blendWeights.getter();
  return HasModel.blendWeights.modify;
}

uint64_t HasModel.blendWeights.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return HasModel.blendWeights.setter(*a1);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  HasModel.blendWeights.setter(v2);

  return swift_bridgeObjectRelease();
}

uint64_t HasModel.blendWeightNames.getter()
{
  REBlendShapeWeightsComponentGetComponentType();
  if (REEntityGetComponentByClass()
    && REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition()
    && (uint64_t BlendShapeWeightsCount = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount()) != 0)
  {
    uint64_t v1 = BlendShapeWeightsCount;
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendShapeWeightsCount & ~(BlendShapeWeightsCount >> 63), 0, MEMORY[0x263F8EE78]);
    if ((v1 & 0x8000000000000000) == 0)
    {
      uint64_t v3 = (void *)result;
      uint64_t v4 = 0;
      uint64_t v16 = v1;
      while (v4 != v1)
      {
        uint64_t BlendWeightCount = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendWeightCount & ~(BlendWeightCount >> 63), 0, MEMORY[0x263F8EE78]);
        if (BlendWeightCount < 0) {
          goto LABEL_20;
        }
        uint64_t v6 = (void *)result;
        if (BlendWeightCount)
        {
          uint64_t v7 = 0;
          do
          {
            REBlendShapeWeightsDefinitionAssetGetBlendWeightName();
            uint64_t result = String.init(cString:)();
            uint64_t v8 = result;
            uint64_t v10 = v9;
            unint64_t v12 = v6[2];
            unint64_t v11 = v6[3];
            if (v12 >= v11 >> 1)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v6);
              uint64_t v6 = (void *)result;
            }
            ++v7;
            v6[2] = v12 + 1;
            unint64_t v13 = &v6[2 * v12];
            v13[4] = v8;
            uint64_t v13[5] = v10;
          }
          while (BlendWeightCount != v7);
        }
        unint64_t v15 = v3[2];
        unint64_t v14 = v3[3];
        if (v15 >= v14 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v3);
          uint64_t v3 = (void *)result;
        }
        uint64_t v1 = v16;
        ++v4;
        v3[2] = v15 + 1;
        v3[v15 + 4] = v6;
        if (v4 == v16) {
          return (uint64_t)v3;
        }
      }
      __break(1u);
LABEL_20:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>);
    uint64_t v3 = (void *)swift_allocObject();
    *((_OWORD *)v3 + 1) = xmmword_22830EC60;
    v3[4] = MEMORY[0x263F8EE78];
    return (uint64_t)v3;
  }
  return result;
}

uint64_t sub_2280523C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = HasModel.blendWeights.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2280523EC()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return HasModel.blendWeights.setter(v0);
}

uint64_t sub_228052418()
{
  return 16;
}

__n128 sub_228052424(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void StateMachineComponent.init()(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v1;
  *(unsigned char *)(a1 + 16) = 0;
}

uint64_t StateMachineComponent.init(stateMachine:explicitParameterBindings:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t StateMachineComponent.stateMachineResource.getter()
{
  return swift_retain();
}

uint64_t StateMachineComponent.stateMachineResource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)uint64_t v1 = a1;
  *(unsigned char *)(v1 + 16) = 0;
  return result;
}

Swift::Void __swiftcall StateMachineComponent.setParametersOutOfSync()()
{
  *(unsigned char *)(v0 + 16) = 0;
}

uint64_t (*StateMachineComponent.stateMachineResource.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return StateMachineComponent.stateMachineResource.modify;
}

uint64_t StateMachineComponent.stateMachineResource.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    *(unsigned char *)(*(void *)result + 16) = 0;
  }
  return result;
}

uint64_t StateMachineComponent.parameters.getter()
{
  if ((v0[2] & 1) == 0)
  {
    uint64_t v1 = *v0;
    if (*v0)
    {
      uint64_t v2 = *(void *)(v1 + 24);
      if (!v2)
      {
        static StateMachineGraphCreator.createGraph(from:)();
        uint64_t v3 = *(void *)&v8[16];
        uint64_t v4 = *(void *)(v1 + 16);
        uint64_t v5 = *(void *)(v1 + 24);
        *(void *)(v1 + 16) = v7;
        *(_OWORD *)(v1 + 24) = *(_OWORD *)v8;
        *(void *)(v1 + 40) = v3;
        uint64_t result = outlined consume of StateMachineGraph?(v4, v5);
        uint64_t v2 = *(void *)(v1 + 24);
        if (!v2)
        {
          __break(1u);
          return result;
        }
      }
      uint64_t v7 = *(void *)(v1 + 16);
      *(void *)uint64_t v8 = v2;
      *(_OWORD *)&v8[8] = *(_OWORD *)(v1 + 32);
      specialized static StateMachineParametersCreator.syncUp(parameters:with:)(v0 + 1, (uint64_t)&v7);
      *((unsigned char *)v0 + 16) = 1;
    }
  }

  return swift_bridgeObjectRetain();
}

uint64_t StateMachineComponent.parameters.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  *(unsigned char *)(v1 + 16) = 0;
  return result;
}

uint64_t (*StateMachineComponent.parameters.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  if (v1[2]) {
    goto LABEL_6;
  }
  uint64_t v3 = *v1;
  if (!*v1) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4) {
    goto LABEL_5;
  }
  static StateMachineGraphCreator.createGraph(from:)();
  uint64_t v5 = *(void *)&v10[16];
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  *(void *)(v3 + 16) = v9;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)v10;
  *(void *)(v3 + 40) = v5;
  uint64_t result = (uint64_t (*)(uint64_t *, char))outlined consume of StateMachineGraph?(v6, v7);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4)
  {
LABEL_5:
    uint64_t v9 = *(void *)(v3 + 16);
    *(void *)uint64_t v10 = v4;
    *(_OWORD *)&v10[8] = *(_OWORD *)(v3 + 32);
    specialized static StateMachineParametersCreator.syncUp(parameters:with:)(v1 + 1, (uint64_t)&v9);
    *((unsigned char *)v1 + 16) = 1;
LABEL_6:
    *a1 = v1[1];
    swift_bridgeObjectRetain();
    return StateMachineComponent.parameters.modify;
  }
  __break(1u);
  return result;
}

uint64_t StateMachineComponent.parameters.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 8) = v2;
    *(unsigned char *)(v3 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 8) = v2;
    *(unsigned char *)(v3 + 16) = 0;
  }
  return result;
}

void *static StateMachineComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t StateMachineAsset = REStateMachineComponentGetStateMachineAsset();
  if (!(id)REAssetGetSwiftObject()) {
    goto LABEL_4;
  }
  type metadata accessor for StateMachineResource();
  uint64_t v3 = swift_dynamicCastClass();
  if (!v3)
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for StateMachineResource();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 48) = StateMachineAsset;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    outlined consume of StateMachineGraph?(0, 0);
    RERetain();
    REAssetSetSwiftObject();
  }
  uint64_t result = specialized static StateMachineParametersCreator.createBoundParameters(from:)();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance StateMachineComponent(uint64_t *a1)
{
  if (*v1)
  {
    uint64_t v2 = v1[1];
    uint64_t v3 = *a1;
    REStateMachineComponentAssignAsset();
    return specialized static StateMachineParametersCreator.updateInCoreComponent(coreComponent:from:)(v3, v2);
  }
  else
  {
    return specialized static StateMachineUtils.logError(_:)(0xD000000000000025, 0x8000000228356E30);
  }
}

uint64_t StateMachineComponent.__toCore(_:)(uint64_t *a1)
{
  if (*v1)
  {
    uint64_t v2 = v1[1];
    uint64_t v3 = *a1;
    REStateMachineComponentAssignAsset();
    return specialized static StateMachineParametersCreator.updateInCoreComponent(coreComponent:from:)(v3, v2);
  }
  else
  {
    return specialized static StateMachineUtils.logError(_:)(0xD000000000000025, 0x8000000228356E30);
  }
}

void protocol witness for static Component.__coreComponentType.getter in conformance StateMachineComponent(_DWORD *a1@<X8>)
{
  *a1 = 2015;
}

void static StateMachineComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2015;
}

uint64_t sub_2280528F0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_2280528FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t destroy for StateMachineComponent()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for StateMachineComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StateMachineComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for StateMachineComponent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineComponent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StateMachineComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineComponent()
{
  return &type metadata for StateMachineComponent;
}

uint64_t __SkyboxComponent.environment.getter()
{
  return swift_retain();
}

uint64_t __SkyboxComponent.environment.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*__SkyboxComponent.environment.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __SkyboxComponent.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t __SkyboxComponent.init(environment:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static __SkyboxComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RESkyboxComponentGetMaterial();
  if (result)
  {
    type metadata accessor for EnvironmentResource();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = 0;
    uint64_t result = swift_beginAccess();
    *(void *)(v3 + 24) = 0;
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance __SkyboxComponent()
{
  return __SkyboxComponent.__toCore(_:)();
}

uint64_t __SkyboxComponent.__toCore(_:)()
{
  uint64_t v0 = (void *)REMaterialParameterBlockValueCreate();
  specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x8000000228356E60);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  RESkyboxComponentSetMaterial();
  RENetworkMarkComponentDirty();
  return swift_release();
}

void protocol witness for static Component.__coreComponentType.getter in conformance __SkyboxComponent(_DWORD *a1@<X8>)
{
  *a1 = 23;
}

void static __SkyboxComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 23;
}

BOOL specialized static __SkyboxComponent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (!*a1) {
    return v3 == 0;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_9;
    }
    return 0;
  }
  if (v5) {
    BOOL v6 = v4 == v5;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return 0;
  }
LABEL_9:
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 24);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 24);
  BOOL result = (v7 | v8) == 0;
  if (v7) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    return v7 == v8;
  }
  return result;
}

ValueMetadata *type metadata accessor for __SkyboxComponent()
{
  return &type metadata for __SkyboxComponent;
}

uint64_t static StateMachineCommandExecutionTiming.== infix(_:_:)()
{
  return 1;
}

void StateMachineCommandExecutionTiming.hash(into:)()
{
}

Swift::Int StateMachineCommandExecutionTiming.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t StateMachineCommand.parameters.getter()
{
  return MEMORY[0x263F8EE78];
}

{
  return MEMORY[0x263F8EE78];
}

__n128 StateMachineAnimationPlayCommand.init(targetEntity:animationName:playToCompletion:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unsigned __int8 a4@<W3>, __n128 *a5@<X8>)
{
  unsigned __int8 v5 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *a5 = *a1;
  a5[1].n128_u8[0] = v5;
  a5[1].n128_u64[1] = a2;
  a5[2].n128_u64[0] = a3;
  a5[2].n128_u8[8] = a4;
  return result;
}

uint64_t StateMachineAnimationPlayCommand.parameters.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  char v6 = *(unsigned char *)(v0 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineCommandParameterProtocol>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_22831E350;
  *(void *)(v7 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<String>);
  *(void *)(v7 + 64) = &protocol witness table for StateMachineCommandParameter<A>;
  uint64_t v8 = swift_allocObject();
  *(void *)(v7 + 32) = v8;
  *(void *)(v8 + 32) = v5;
  *(void *)(v8 + 40) = v4;
  strcpy((char *)(v8 + 16), "AnimationName");
  *(_WORD *)(v8 + 30) = -4864;
  *(void *)(v7 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Bool>);
  *(void *)(v7 + 104) = &protocol witness table for StateMachineCommandParameter<A>;
  *(unsigned char *)(v7 + 88) = v6;
  *(void *)(v7 + 72) = 0xD000000000000018;
  *(void *)(v7 + 80) = 0x8000000228356E80;
  swift_bridgeObjectRetain();
  if (v3 != 255)
  {
    outlined copy of BindTarget?(v1, v2, v3);
    uint64_t v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, 3, 1, (void *)v7);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<BindTarget>);
    unint64_t v13 = &protocol witness table for StateMachineCommandParameter<A>;
    uint64_t v9 = swift_allocObject();
    *(void *)&long long v11 = v9;
    strcpy((char *)(v9 + 16), "TargetEntity");
    *(unsigned char *)(v9 + 29) = 0;
    *(_WORD *)(v9 + 30) = -5120;
    *(void *)(v9 + 32) = v1;
    *(void *)(v9 + 40) = v2;
    *(unsigned char *)(v9 + 48) = v3;
    *(void *)(v7 + 16) = 3;
    outlined init with take of BindableDataInternal(&v11, v7 + 112);
  }
  return v7;
}

uint64_t sub_228052FD8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t StateMachineAnimationPlayCommand.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of BindTarget?(v2, v3, v4);
}

uint64_t StateMachineAnimationPlayCommand.targetEntity.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = v4;
  return result;
}

uint64_t (*StateMachineAnimationPlayCommand.targetEntity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineAnimationPlayCommand.animationName.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineAnimationPlayCommand.animationName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*StateMachineAnimationPlayCommand.animationName.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineAnimationPlayCommand.playToCompletion.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t StateMachineAnimationPlayCommand.playToCompletion.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

uint64_t (*StateMachineAnimationPlayCommand.playToCompletion.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 StateMachineAnimationStopCommand.init(targetEntity:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = v2;
  return result;
}

uint64_t StateMachineAnimationStopCommand.targetEntity.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = v4;
  return result;
}

uint64_t (*StateMachineAnimationStopCommand.targetEntity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineAnimationStopCommand.parameters.getter()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3 == 255)
  {
    uint64_t v4 = MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineCommandParameterProtocol>);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_22830EC60;
    *(void *)(v4 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<BindTarget>);
    *(void *)(v4 + 64) = &protocol witness table for StateMachineCommandParameter<A>;
    uint64_t v5 = swift_allocObject();
    *(void *)(v4 + 32) = v5;
    *(void *)(v5 + 32) = v2;
    *(void *)(v5 + 40) = v1;
    *(unsigned char *)(v5 + 48) = v3;
    strcpy((char *)(v5 + 16), "TargetEntity");
    *(unsigned char *)(v5 + 29) = 0;
    *(_WORD *)(v5 + 30) = -5120;
  }
  outlined copy of BindTarget?(v2, v1, v3);
  return v4;
}

uint64_t StateMachineAnimationStopCommand.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of BindTarget?(v2, v3, v4);
}

uint64_t StateMachineAnimationSetPlaybackTimeCommand.init(targetEntity:playbackTime:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3 = *(unsigned char *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(unsigned char *)(a2 + 16) = v3;
  *(double *)(a2 + 24) = a3;
  return result;
}

uint64_t StateMachineAnimationSetPlaybackTimeCommand.parameters.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineCommandParameterProtocol>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_22830EC60;
  *(void *)(v5 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<Double>);
  *(void *)(v5 + 64) = &protocol witness table for StateMachineCommandParameter<A>;
  *(void *)(v5 + 48) = v4;
  strcpy((char *)(v5 + 32), "PlaybackTime");
  *(unsigned char *)(v5 + 45) = 0;
  *(_WORD *)(v5 + 46) = -5120;
  if (v3 != 255)
  {
    outlined copy of BindTarget(v1, v2, v3);
    uint64_t v5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, 2, 1, (void *)v5);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineCommandParameter<BindTarget>);
    BOOL v10 = &protocol witness table for StateMachineCommandParameter<A>;
    uint64_t v6 = swift_allocObject();
    *(void *)&long long v8 = v6;
    strcpy((char *)(v6 + 16), "TargetEntity");
    *(unsigned char *)(v6 + 29) = 0;
    *(_WORD *)(v6 + 30) = -5120;
    *(void *)(v6 + 32) = v1;
    *(void *)(v6 + 40) = v2;
    *(unsigned char *)(v6 + 48) = v3;
    *(void *)(v5 + 16) = 2;
    outlined init with take of BindableDataInternal(&v8, v5 + 72);
  }
  return v5;
}

uint64_t StateMachineAnimationSetPlaybackTimeCommand.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of BindTarget?(v2, v3, v4);
}

uint64_t StateMachineAnimationSetPlaybackTimeCommand.targetEntity.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = v4;
  return result;
}

uint64_t (*StateMachineAnimationSetPlaybackTimeCommand.targetEntity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double StateMachineAnimationSetPlaybackTimeCommand.playbackTime.getter()
{
  return *(double *)(v0 + 24);
}

void StateMachineAnimationSetPlaybackTimeCommand.playbackTime.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*StateMachineAnimationSetPlaybackTimeCommand.playbackTime.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t sub_2280534C4()
{
  swift_bridgeObjectRelease();
  outlined consume of BindTarget(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x270FA0238](v0, 49, 7);
}

unint64_t lazy protocol witness table accessor for type StateMachineCommandExecutionTiming and conformance StateMachineCommandExecutionTiming()
{
  unint64_t result = lazy protocol witness table cache variable for type StateMachineCommandExecutionTiming and conformance StateMachineCommandExecutionTiming;
  if (!lazy protocol witness table cache variable for type StateMachineCommandExecutionTiming and conformance StateMachineCommandExecutionTiming)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StateMachineCommandExecutionTiming and conformance StateMachineCommandExecutionTiming);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for StateMachineCommandExecutionTiming(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2280535FCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineCommandExecutionTiming()
{
  return &type metadata for StateMachineCommandExecutionTiming;
}

uint64_t dispatch thunk of StateMachineCommand.parameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of StateMachineCommand.timing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t destroy for StateMachineAnimationPlayCommand(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)a1, *(void *)(a1 + 8), v1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StateMachineAnimationPlayCommand(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  }
  else
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    outlined copy of BindTarget(*a2, v6, v4);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v4;
  }
  uint64_t v7 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StateMachineAnimationPlayCommand(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      long long v13 = *a2;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = v13;
    }
    else
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = *((void *)a2 + 1);
      outlined copy of BindTarget(*(void *)a2, v11, v4);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v11;
      *(unsigned char *)(a1 + 16) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of BindTarget(a1);
    char v12 = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(unsigned char *)(a1 + 16) = v12;
  }
  else
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    outlined copy of BindTarget(*(void *)a2, v6, v4);
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    unsigned __int8 v9 = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v4;
    outlined consume of BindTarget(v7, v8, v9);
  }
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  return a1;
}

uint64_t assignWithTake for StateMachineAnimationPlayCommand(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 255) {
    goto LABEL_5;
  }
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 255)
  {
    outlined destroy of BindTarget(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of BindTarget(v6, v7, v4);
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineAnimationPlayCommand(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StateMachineAnimationPlayCommand(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineAnimationPlayCommand()
{
  return &type metadata for StateMachineAnimationPlayCommand;
}

uint64_t destroy for StateMachineAnimationStopCommand(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 16);
  if (v1 != 255) {
    return outlined consume of BindTarget(*(void *)result, *(void *)(result + 8), v1);
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineAnimationStopCommand()
{
  return &type metadata for StateMachineAnimationStopCommand;
}

uint64_t initializeBufferWithCopyOfBuffer for StateMachineAnimationStopCommand(uint64_t a1, uint64_t *a2)
{
  int v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  }
  else
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    outlined copy of BindTarget(*a2, v5, v3);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = v3;
  }
  return a1;
}

uint64_t assignWithCopy for StateMachineAnimationStopCommand(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      long long v13 = *a2;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = v13;
    }
    else
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v10 = *((void *)a2 + 1);
      outlined copy of BindTarget(*(void *)a2, v10, v4);
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = v10;
      *(unsigned char *)(a1 + 16) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of BindTarget(a1);
    char v12 = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(unsigned char *)(a1 + 16) = v12;
  }
  else
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v5 = *((void *)a2 + 1);
    outlined copy of BindTarget(*(void *)a2, v5, v4);
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    unsigned __int8 v9 = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v4;
    outlined consume of BindTarget(v7, v8, v9);
  }
  return a1;
}

uint64_t assignWithTake for StateMachineAnimationStopCommand(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 255) {
    goto LABEL_5;
  }
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 255)
  {
    outlined destroy of BindTarget(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    return a1;
  }
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of BindTarget(v6, v7, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineAnimationStopCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StateMachineAnimationStopCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 249;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineAnimationStopAllCommand()
{
  return &type metadata for StateMachineAnimationStopAllCommand;
}

uint64_t initializeWithCopy for StateMachineAnimationSetPlaybackTimeCommand(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  }
  else
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    outlined copy of BindTarget(*a2, v6, v4);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v4;
  }
  *(void *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t assignWithCopy for StateMachineAnimationSetPlaybackTimeCommand(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      long long v13 = *a2;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = v13;
    }
    else
    {
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = *((void *)a2 + 1);
      outlined copy of BindTarget(*(void *)a2, v11, v4);
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v11;
      *(unsigned char *)(a1 + 16) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of BindTarget(a1);
    char v12 = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(unsigned char *)(a1 + 16) = v12;
  }
  else
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    outlined copy of BindTarget(*(void *)a2, v6, v4);
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    unsigned __int8 v9 = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v4;
    outlined consume of BindTarget(v7, v8, v9);
  }
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  return a1;
}

uint64_t assignWithTake for StateMachineAnimationSetPlaybackTimeCommand(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 255) {
    goto LABEL_5;
  }
  int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 255)
  {
    outlined destroy of BindTarget(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of BindTarget(v6, v7, v4);
LABEL_6:
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineAnimationSetPlaybackTimeCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StateMachineAnimationSetPlaybackTimeCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 249;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineAnimationSetPlaybackTimeCommand()
{
  return &type metadata for StateMachineAnimationSetPlaybackTimeCommand;
}

uint64_t BlendShapeWeightsMapping.__allocating_init(meshResource:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void *)(a1 + 16);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t result = MEMORY[0x22A692220](ServiceLocator);
  if (result)
  {
    if (v3)
    {
      *(void *)(v2 + 16) = REBlendShapeWeightsDefinitionAssetCreateAssetForMesh();
      RERetain();
      swift_retain();
      REAssetSetSwiftObject();
      swift_release();
      swift_release();
      return v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BlendShapeWeightsMapping.init(meshResource:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t result = MEMORY[0x22A692220](ServiceLocator);
  if (result)
  {
    if (v2)
    {
      *(void *)(v1 + 16) = REBlendShapeWeightsDefinitionAssetCreateAssetForMesh();
      RERetain();
      swift_retain();
      REAssetSetSwiftObject();
      swift_release();
      swift_release();
      return v1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BlendShapeWeightsMapping.__allocating_init(blendShapeName:weightNames:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  BlendShapeWeightsMapping.init(blendShapeName:weightNames:)(a1, a2, a3);
  return v6;
}

uint64_t BlendShapeWeightsMapping.init(blendShapeName:weightNames:)(void *a1, void *a2, uint64_t a3)
{
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  if (!MEMORY[0x22A692220](ServiceLocator))
  {
    __break(1u);
LABEL_41:
    __break(1u);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UnsafePointer<Int8>]>);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  *(void *)(inited + 32) = MEMORY[0x263F8EE78];
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = a3 + 40;
    do
    {
      uint64_t v11 = (const char *)(String.utf8CString.getter() + 32);
      swift_bridgeObjectRetain();
      char v12 = strdup(v11);
      swift_release();
      swift_bridgeObjectRelease();
      if (v12)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        }
        unint64_t v14 = v8[2];
        unint64_t v13 = v8[3];
        if (v14 >= v13 >> 1) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v8);
        }
        v8[2] = v14 + 1;
        v8[v14 + 4] = v12;
      }
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = v8[2];
  uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v18 = v16[2];
  unint64_t v17 = v16[3];
  uint64_t v19 = (void *)(v18 + 1);
  if (v18 >= v17 >> 1) {
    goto LABEL_39;
  }
  while (1)
  {
    _OWORD v16[2] = v19;
    uint64_t v20 = &v16[2 * v18 + 4];
    *uint64_t v20 = v15;
    v20[1] = v8 + 4;
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, 2, 1, (void *)inited);
    _OWORD v19[2] = 2;
    uint64_t v19[5] = v8;
    type metadata accessor for NSString();
    unint64_t v21 = NSString.init(stringLiteral:)();
    id v22 = objc_msgSend(v21, sel_UTF8String);
    id v23 = v21;
    if (!v22) {
      goto LABEL_41;
    }
    char v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v26 = v24[2];
    unint64_t v25 = v24[3];
    if (v26 >= v25 >> 1) {
      char v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v24);
    }
    v24[2] = v26 + 1;
    uint64_t v8 = v24 + 4;
    uint64_t v27 = (uint64_t)&v24[4 * v26 + 4];
    *(unsigned char *)uint64_t v27 = 3;
    *(void *)(v27 + 8) = v22;
    *(void *)(v27 + 16) = 0;
    *(_DWORD *)(v27 + 24) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v28 = swift_initStackObject();
    *(_OWORD *)(v28 + 16) = xmmword_22830EC60;
    *(void *)(v28 + 32) = a1;
    *(void *)(v28 + 40) = a2;
    uint64_t v29 = (const char *)(String.utf8CString.getter() + 32);
    swift_bridgeObjectRetain();
    uint64_t v30 = strdup(v29);
    swift_release();
    if (v30)
    {
      swift_bridgeObjectRelease();
      a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v32 = a2[2];
      unint64_t v31 = a2[3];
      if (v32 >= v31 >> 1) {
        a2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, a2);
      }
      a2[2] = v32 + 1;
      a2[v32 + 4] = v30;
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      a2 = (void *)MEMORY[0x263F8EE78];
    }
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v34 = a1[2];
    unint64_t v33 = a1[3];
    if (v34 >= v33 >> 1) {
      a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, a1);
    }
    a1[2] = v34 + 1;
    a1[v34 + 4] = a2 + 4;
    swift_bridgeObjectRetain();
    uint64_t AssetWithDefinitionsAndWeightNames = REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitionsAndWeightNames();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v41 + 16) = AssetWithDefinitionsAndWeightNames;
    uint64_t v36 = a2[2];
    if (v36)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v36; ++i)
      {
        unint64_t v38 = (void *)a2[i + 4];
        free(v38);
      }
      swift_bridgeObjectRelease();
      a1 = a2;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = v19[2];
    if (!v15) {
      break;
    }
    unint64_t inited = 0;
    unint64_t v18 = (unint64_t)(v19 + 4);
    while (1)
    {
      unint64_t v17 = v19[2];
      if (inited >= v17) {
        break;
      }
      a2 = *(void **)(*(void *)(v18 + 8 * inited) + 16);
      if (a2)
      {
        unint64_t v17 = 0;
        while (1)
        {
          uint64_t v39 = *(void *)(v18 + 8 * inited);
          if (v17 >= *(void *)(v39 + 16)) {
            break;
          }
          a1 = (void *)(v17 + 1);
          free(*(void **)(v39 + 8 * v17 + 32));
          unint64_t v17 = (unint64_t)a1;
          if (a2 == a1) {
            goto LABEL_29;
          }
        }
        __break(1u);
        break;
      }
LABEL_29:
      if (++inited == v15) {
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_39:
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), (int64_t)v19, 1, v16);
  }
LABEL_36:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t BlendShapeWeightsMapping.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t BlendShapeWeightsMapping.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v1;
}

uint64_t BlendShapeWeightsMapping.deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t BlendShapeWeightsMapping.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t _Proto_BlendShapeWeightsMappingResource_v1.definition.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_retain();

  return _Proto_BlendShapeWeightsMappingDefinition_v1.init(_:)(v2, a1);
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

uint64_t type metadata accessor for BlendShapeWeightsMapping()
{
  return self;
}

uint64_t method lookup function for BlendShapeWeightsMapping(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for BlendShapeWeightsMapping);
}

uint64_t dispatch thunk of BlendShapeWeightsMapping.__allocating_init(meshResource:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of BlendShapeWeightsMapping.__allocating_init(blendShapeName:weightNames:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of BlendShapeWeightsMapping.__coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of BlendShapeWeightsMapping.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for _Proto_BlendShapeWeightsMappingResource_v1()
{
  return self;
}

uint64_t method lookup function for _Proto_BlendShapeWeightsMappingResource_v1(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _Proto_BlendShapeWeightsMappingResource_v1);
}

uint64_t dispatch thunk of _Proto_BlendShapeWeightsMappingResource_v1.__coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of _Proto_BlendShapeWeightsMappingResource_v1.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for _Proto_BlendShapeWeightsMappingError_v1()
{
  return &type metadata for _Proto_BlendShapeWeightsMappingError_v1;
}

uint64_t one-time initialization function for ecsCoreLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, ecsCoreLogger);
  __swift_project_value_buffer(v0, (uint64_t)ecsCoreLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t static AnalyticsManager.shared.getter()
{
  type metadata accessor for AnalyticsManager();

  return swift_initStaticObject();
}

uint64_t type metadata accessor for AnalyticsManager()
{
  return self;
}

uint64_t AnalyticsManager.ObjectCaptureSessionInitEvent.init(sessionID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t AnalyticsManager.ObjectCaptureSessionImageStatsEvent.init(sessionID:numImages:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(0);
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
}

uint64_t AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.init(sessionID:captureMode:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.init(sessionID:captureMode:)(a1, a2, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent, a3);
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
}

RealityFoundation::AnalyticsManager::ObjectCaptureSessionCaptureModeEvent::CaptureMode_optional __swiftcall AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (RealityFoundation::AnalyticsManager::ObjectCaptureSessionCaptureModeEvent::CaptureMode_optional)rawValue;
}

uint64_t AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode.rawValue.getter()
{
  return *v0;
}

RealityFoundation::AnalyticsManager::ObjectCaptureSessionCaptureModeEvent::CaptureMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode(Swift::Int *a1)
{
  return AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode.init(rawValue:)(*a1);
}

uint64_t AnalyticsManager.ObjectCaptureSessionStatusEvent.init(sessionID:status:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  return AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.init(sessionID:captureMode:)(a1, a2, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent, a3);
}

uint64_t AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.init(sessionID:captureMode:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  char v7 = *a2;
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = a3(0);
  *(unsigned char *)(a4 + *(int *)(result + 20)) = v7;
  return result;
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.ObjectCaptureSessionStatusEvent);
}

uint64_t AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent.init(sessionID:bundleID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(0);
  uint64_t v10 = (void *)(a4 + *(int *)(result + 20));
  *uint64_t v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
}

void AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)(uint64_t a1)
{
  uint64_t inited = type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent(0);
  uint64_t v3 = *(void *)(inited - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](inited);
  int v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v22 - v7;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v24 = a1;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = v3;
    unint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)unint64_t v13 = 136315138;
    id v22 = v13 + 4;
    outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v24;
    swift_bridgeObjectRelease();
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
    _os_log_impl(&dword_227DD2000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v14, -1, -1);
    unint64_t v17 = v13;
    uint64_t v3 = v23;
    MEMORY[0x22A696500](v17, -1, -1);
  }
  else
  {
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
  }

  unint64_t v18 = (void *)MEMORY[0x22A688A50](0xD000000000000030, 0x8000000228356F30);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
  unint64_t v19 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = swift_allocObject();
  outlined init with take of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v5, v20 + v19, type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_16;
  unint64_t v21 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);
}

uint64_t closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)()
{
  uint64_t v0 = UUID.uuidString.getter();
  uint64_t v1 = MEMORY[0x22A688A50](v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v1, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  return v2;
}

void AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  int v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v22 - v7;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v24 = a1;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = v3;
    unint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)unint64_t v13 = 136315138;
    id v22 = v13 + 4;
    outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v24;
    swift_bridgeObjectRelease();
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
    _os_log_impl(&dword_227DD2000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v14, -1, -1);
    unint64_t v17 = v13;
    uint64_t v3 = v23;
    MEMORY[0x22A696500](v17, -1, -1);
  }
  else
  {
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
  }

  unint64_t v18 = (void *)MEMORY[0x22A688A50](0xD000000000000036, 0x8000000228356F70);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
  unint64_t v19 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = swift_allocObject();
  outlined init with take of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v5, v20 + v19, type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_6;
  unint64_t v21 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);
}

uint64_t closure #1 in AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:)()
{
  uint64_t v0 = UUID.uuidString.getter();
  uint64_t v1 = MEMORY[0x22A688A50](v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v1, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(0);
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  char v5 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)isa, 0x6567616D496D756ELL, 0xE900000000000073, v5);
  swift_bridgeObjectRelease();
  return v2;
}

void AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v22 - v7;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v24 = a1;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = v3;
    unint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)unint64_t v13 = 136315138;
    id v22 = v13 + 4;
    outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v24;
    swift_bridgeObjectRelease();
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
    _os_log_impl(&dword_227DD2000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v14, -1, -1);
    unint64_t v17 = v13;
    uint64_t v3 = v23;
    MEMORY[0x22A696500](v17, -1, -1);
  }
  else
  {
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
  }

  unint64_t v18 = (void *)MEMORY[0x22A688A50](0xD000000000000037, 0x8000000228356FB0);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
  unint64_t v19 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = swift_allocObject();
  outlined init with take of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v5, v20 + v19, type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_12_0;
  unint64_t v21 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);
}

void AnalyticsManager.sendObjectCaptureSessionStatusEvent(event:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v22 - v7;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v24 = a1;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = v3;
    unint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)unint64_t v13 = 136315138;
    id v22 = v13 + 4;
    outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v24;
    swift_bridgeObjectRelease();
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
    _os_log_impl(&dword_227DD2000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v14, -1, -1);
    unint64_t v17 = v13;
    uint64_t v3 = v23;
    MEMORY[0x22A696500](v17, -1, -1);
  }
  else
  {
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
  }

  unint64_t v18 = (void *)MEMORY[0x22A688A50](0xD000000000000032, 0x8000000228356FF0);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
  unint64_t v19 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = swift_allocObject();
  outlined init with take of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v5, v20 + v19, type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionStatusEvent(event:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_18_1;
  unint64_t v21 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);
}

uint64_t closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v8 = MEMORY[0x22A688A50](v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  a2(0);
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  char v12 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)isa, a3, a4, v12);
  swift_bridgeObjectRelease();
  return v9;
}

void AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v22 - v7;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v24 = a1;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = v3;
    unint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)unint64_t v13 = 136315138;
    id v22 = v13 + 4;
    outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v24;
    swift_bridgeObjectRelease();
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
    _os_log_impl(&dword_227DD2000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v14, -1, -1);
    unint64_t v17 = v13;
    uint64_t v3 = v23;
    MEMORY[0x22A696500](v17, -1, -1);
  }
  else
  {
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
  }

  unint64_t v18 = (void *)MEMORY[0x22A688A50](0xD00000000000003CLL, 0x8000000228357030);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
  unint64_t v19 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = swift_allocObject();
  outlined init with take of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v5, v20 + v19, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_24;
  unint64_t v21 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7265646C6F66;
  if (*v1) {
    uint64_t v2 = 0x65636E6575716573;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t closure #1 in AnalyticsManager.sendPhotogrammetrySessionInitEvent(event:)(uint64_t a1)
{
  uint64_t v2 = UUID.uuidString.getter();
  uint64_t v3 = MEMORY[0x22A688A50](v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t inited = type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent(0);
  BOOL v7 = *(unsigned char *)(a1 + *(int *)(inited + 20)) == 0;
  if (*(unsigned char *)(a1 + *(int *)(inited + 20))) {
    uint64_t v8 = 0x65636E6575716573;
  }
  else {
    uint64_t v8 = 0x7265646C6F66;
  }
  if (v7) {
    unint64_t v9 = 0xE600000000000000;
  }
  else {
    unint64_t v9 = 0xE800000000000000;
  }
  uint64_t v10 = MEMORY[0x22A688A50](v8, v9);
  swift_bridgeObjectRelease();
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, 0x7954656372756F73, 0xEA00000000006570, v11);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t closure #1 in AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v10 = MEMORY[0x22A688A50](v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = v11;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  uint64_t v13 = v39;
  swift_bridgeObjectRelease();
  uint64_t v14 = (int *)type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(0);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1 + v14[5], (uint64_t)v8, type metadata accessor for PhotogrammetrySession.Request);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t v16 = 0xEA00000000006475;
  uint64_t v17 = 0x6F6C43746E696F70;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      unint64_t v16 = 0xEB00000000797469;
      uint64_t v17 = 0x746E456C65646F6DLL;
      break;
    case 2:
      unint64_t v16 = 0xE600000000000000;
      uint64_t v17 = 0x73646E756F62;
      break;
    case 3:
      break;
    case 4:
      unint64_t v16 = 0xE500000000000000;
      uint64_t v17 = 0x7365736F70;
      break;
    default:
      uint64_t v18 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v8, v18);
      uint64_t v17 = 0x6C69466C65646F6DLL;
      unint64_t v16 = 0xE900000000000065;
      break;
  }
  uint64_t v19 = MEMORY[0x22A688A50](v17, v16);
  swift_bridgeObjectRelease();
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = v13;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0x5474736575716572, 0xEB00000000657079, v20);
  uint64_t v21 = v39;
  swift_bridgeObjectRelease();
  uint64_t v22 = String.init<A>(describing:)();
  uint64_t v23 = MEMORY[0x22A688A50](v22);
  swift_bridgeObjectRelease();
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = v21;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0x6C6961746564, 0xE600000000000000, v24);
  uint64_t v25 = v39;
  swift_bridgeObjectRelease();
  Swift::Int v26 = *(unsigned __int8 *)(a1 + v14[7]);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber);
  Class isa = NSNumber.init(integerLiteral:)(v26).super.super.isa;
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = v25;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)isa, 0x73736563637573, 0xE700000000000000, v28);
  uint64_t v29 = v39;
  swift_bridgeObjectRelease();
  uint64_t v30 = MEMORY[0x22A688A50](a2, a3);
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = v29;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v30, 0x707954726F727265, 0xE900000000000065, v31);
  uint64_t v32 = v39;
  uint64_t v33 = swift_bridgeObjectRelease();
  uint64_t v34 = MEMORY[0x22A6890F0](v33, *(double *)(a1 + v14[9]));
  char v35 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = v32;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, 0xD000000000000019, 0x80000002283570E0, v35);
  uint64_t v36 = v39;
  swift_bridgeObjectRelease();
  return v36;
}

uint64_t closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = UUID.uuidString.getter();
  uint64_t v5 = MEMORY[0x22A688A50](v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = MEMORY[0x263F8EE80];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, 0x496E6F6973736573, 0xE900000000000044, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v8 = a2(0);
  uint64_t v9 = MEMORY[0x22A688A50](*(void *)(a1 + *(int *)(v8 + 20)), *(void *)(a1 + *(int *)(v8 + 20) + 8));
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, 0x4449656C646E7562, 0xE800000000000000, v10);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t AnalyticsManager.deinit()
{
  return v0;
}

uint64_t AnalyticsManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.ObjectCaptureSessionInitEvent);
}

uint64_t sub_228056A68()
{
  return objectdestroyTm_1(type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)(type metadata accessor for AnalyticsManager.ObjectCaptureSessionInitEvent, (uint64_t (*)(uint64_t))closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:));
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_228056B8C()
{
  return objectdestroyTm_1(type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent);
}

uint64_t objectdestroyTm_1(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(a1(0) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v1 + v4;
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return MEMORY[0x270FA0238](v1, v5, v6);
}

uint64_t outlined init with take of AnalyticsManager.ObjectCaptureSessionInitEvent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)(type metadata accessor for AnalyticsManager.ObjectCaptureSessionImageStatsEvent, (uint64_t (*)(uint64_t))closure #1 in AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:));
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4);
}

uint64_t sub_228056D94()
{
  return objectdestroyTm_1(type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)(type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent, (void (*)(void))type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent, 0x4D65727574706163, 0xEB0000000065646FLL);
}

uint64_t sub_228056DE4()
{
  return objectdestroyTm_1(type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionStatusEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)(type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent, (void (*)(void))type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent, 0x737574617473, 0xE600000000000000);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)(uint64_t (*a1)(void), void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1(0) - 8);
  return closure #1 in AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)(v4 + ((*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), a2, a3, a4);
}

uint64_t sub_228056EAC()
{
  return objectdestroy_20Tm(type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent, type metadata accessor for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent);
}

unint64_t lazy protocol witness table accessor for type AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode and conformance AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode()
{
  unint64_t result = lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode and conformance AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode;
  if (!lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode and conformance AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode and conformance AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnalyticsManager.ObjectCaptureSessionStatusEvent.Status and conformance AnalyticsManager.ObjectCaptureSessionStatusEvent.Status()
{
  unint64_t result = lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionStatusEvent.Status and conformance AnalyticsManager.ObjectCaptureSessionStatusEvent.Status;
  if (!lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionStatusEvent.Status and conformance AnalyticsManager.ObjectCaptureSessionStatusEvent.Status)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnalyticsManager.ObjectCaptureSessionStatusEvent.Status and conformance AnalyticsManager.ObjectCaptureSessionStatusEvent.Status);
  }
  return result;
}

uint64_t method lookup function for AnalyticsManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnalyticsManager);
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionInitEvent(event:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionImageStatsEvent(event:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionCaptureModeEvent(event:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionStatusEvent(event:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionInitEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_64Tm_4);
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionInitEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_65Tm_4);
}

uint64_t *initializeBufferWithCopyOfBuffer for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_64Tm_5);
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionImageStatsEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_65Tm_5);
}

uint64_t type metadata completion function for AnalyticsManager.ObjectCaptureSessionImageStatsEvent()
{
  return type metadata completion function for AnalyticsManager.ObjectCaptureSessionImageStatsEvent();
}

{
  uint64_t result;
  unint64_t v1;

  unint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_35Tm);
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_36Tm);
}

uint64_t type metadata completion function for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent()
{
  return type metadata completion function for AnalyticsManager.ObjectCaptureSessionImageStatsEvent();
}

ValueMetadata *type metadata accessor for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode()
{
  return &type metadata for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode;
}

void *initializeBufferWithCopyOfBuffer for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionStatusEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2280576BC);
}

uint64_t __swift_get_extra_inhabitant_index_35Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionStatusEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228057790);
}

uint64_t __swift_store_extra_inhabitant_index_36Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionCaptureModeEvent.CaptureMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22805791CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsManager.ObjectCaptureSessionStatusEvent.Status()
{
  return &type metadata for AnalyticsManager.ObjectCaptureSessionStatusEvent.Status;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t type metadata completion function for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent()
{
  return type metadata completion function for AnalyticsManager.ObjectCaptureSessionImageStatsEvent();
}

void specialized AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:)(uint64_t a1)
{
  uint64_t v68 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x270FA5388](v68);
  int v3 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unsigned int v10 = (char *)&v60 - v9;
  uint64_t v64 = v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v60 - v13;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)logger);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v14, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  v65 = v10;
  v66 = v7;
  uint64_t v63 = v5;
  if (v19)
  {
    v61 = v3;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v67 = v16;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v62 = a1;
    uint64_t v23 = v22;
    aBlock[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v14, (uint64_t)v10, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int v3 = v61;
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v14, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    _os_log_impl(&dword_227DD2000, v17, v18, "Sending PhotogrammetrySessionReconstructionResultEvent: %s...", v21, 0xCu);
    swift_arrayDestroy();
    uint64_t v26 = v23;
    a1 = v62;
    MEMORY[0x22A696500](v26, -1, -1);
    uint64_t v16 = v67;
    MEMORY[0x22A696500](v21, -1, -1);
  }
  else
  {
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v14, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
  }

  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1 + *(int *)(v4 + 20), (uint64_t)v3, type metadata accessor for PhotogrammetrySession.Request);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v3, type metadata accessor for PhotogrammetrySession.Request);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_227DD2000, v27, v28, "sendPhotogrammetrySessionReconstructionResultEvent got non .modelFile request! Punting...", v29, 2u);
      MEMORY[0x22A696500](v29, -1, -1);
    }
  }
  else
  {
    uint64_t v30 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v3, v30);
    uint64_t v68 = v4;
    uint64_t v31 = *(int *)(v4 + 32);
    uint64_t v32 = *(void **)(a1 + v31);
    if (v32)
    {
      aBlock[0] = *(void *)(a1 + v31);
      id v33 = v32;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v34 = String.init<A>(describing:)();
      unint64_t v36 = v35;
    }
    else
    {
      uint64_t v34 = 0;
      unint64_t v36 = 0xE000000000000000;
    }
    uint64_t v67 = v16;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = a1;
      uint64_t v41 = swift_slowAlloc();
      aBlock[0] = v41;
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x80000002283570A0, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_227DD2000, v37, v38, "AnalyticsManaLogging eventName: %s...", v39, 0xCu);
      swift_arrayDestroy();
      uint64_t v42 = v41;
      a1 = v40;
      MEMORY[0x22A696500](v42, -1, -1);
      MEMORY[0x22A696500](v39, -1, -1);
    }

    uint64_t v44 = v63;
    uint64_t v43 = v64;
    uint64_t v45 = (void *)MEMORY[0x22A688A50](0xD000000000000033, 0x80000002283570A0);
    uint64_t v46 = (uint64_t)v65;
    outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v65, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    unint64_t v47 = (*(unsigned __int8 *)(v44 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    unint64_t v48 = (v43 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = a1;
    uint64_t v50 = swift_allocObject();
    outlined init with take of AnalyticsManager.ObjectCaptureSessionInitEvent(v46, v50 + v47, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    unint64_t v51 = (uint64_t *)(v50 + v48);
    *unint64_t v51 = v34;
    v51[1] = v36;
    aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:);
    aBlock[5] = v50;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3] = (uint64_t)&block_descriptor_59;
    char v52 = _Block_copy(aBlock);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v52);

    uint64_t v53 = (uint64_t)v66;
    outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(v49, (uint64_t)v66, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      aBlock[0] = v57;
      *(_DWORD *)uint64_t v56 = 136315138;
      outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(v53, v46, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
      uint64_t v58 = String.init<A>(describing:)();
      uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent(v53, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
      _os_log_impl(&dword_227DD2000, v54, v55, "... event sent! PhotogrammetrySessionReconstructionResultEvent: %s.", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v57, -1, -1);
      MEMORY[0x22A696500](v56, -1, -1);
    }
    else
    {
      outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent(v53, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
    }
  }
}

uint64_t type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
}

uint64_t sub_2280581B4()
{
  uint64_t v1 = type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  uint64_t v6 = v0 + v3 + *(int *)(v1 + 20);
  type metadata accessor for PhotogrammetrySession.Request(0);
  if (!swift_getEnumCaseMultiPayload())
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }

  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0 + v2;
  uint64_t v4 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];

  return closure #1 in AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:)(v3, v5, v6);
}

void specialized AnalyticsManager.sendPhotogrammetrySessionBundleIdentifierEvent(event:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v22 - v7;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v8, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
  unsigned int v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v24 = a1;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = v3;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v22 = v13 + 4;
    outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, (uint64_t)v5, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v24;
    swift_bridgeObjectRelease();
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
    _os_log_impl(&dword_227DD2000, v10, v11, "Sending %s...", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v14, -1, -1);
    uint64_t v17 = v13;
    uint64_t v3 = v23;
    MEMORY[0x22A696500](v17, -1, -1);
  }
  else
  {
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v8, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
  }

  os_log_type_t v18 = (void *)MEMORY[0x22A688A50](0xD00000000000003DLL, 0x8000000228357100);
  outlined init with copy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1, (uint64_t)v5, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
  unint64_t v19 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = swift_allocObject();
  outlined init with take of AnalyticsManager.ObjectCaptureSessionInitEvent((uint64_t)v5, v20 + v19, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionBundleIdentifierEvent(event:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_65;
  uint64_t v21 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);
}

uint64_t type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
}

uint64_t sub_228058780()
{
  return objectdestroy_20Tm(type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
}

uint64_t objectdestroy_20Tm(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(a1(0) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v1 + v4;
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v1, v5, v6);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionBundleIdentifierEvent(event:)()
{
  return partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(uint64_t (*a1)(void), uint64_t (*a2)(void))
{
  uint64_t v4 = *(void *)(a1(0) - 8);
  return closure #1 in AnalyticsManager.sendObjectCaptureSessionBundleIdentifierEvent(event:)(v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), a2);
}

uint64_t type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnalyticsManager.PhotogrammetrySessionInitEvent);
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionInitEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228058950);
}

uint64_t sub_228058950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return v10 - 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionInitEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228058A20);
}

uint64_t sub_228058A20(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata completion function for AnalyticsManager.PhotogrammetrySessionInitEvent()
{
  return type metadata completion function for AnalyticsManager.ObjectCaptureSessionImageStatsEvent();
}

uint64_t *initializeBufferWithCopyOfBuffer for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    unsigned int v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AnalyticsManager.ObjectCaptureSessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1);
}

void *initializeBufferWithCopyOfBuffer for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                   + 64);
      uint64_t v15 = &v9[v14];
      unint64_t v16 = &v10[v14];
      long long v17 = *((_OWORD *)v16 + 5);
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      *((_OWORD *)v15 + 5) = v17;
      v15[96] = v16[96];
      long long v18 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v18;
      long long v19 = *((_OWORD *)v16 + 3);
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      *((_OWORD *)v15 + 3) = v19;
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v20 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v21 = *(void **)((char *)a2 + v20);
    id v22 = v21;
    *(void *)((char *)a1 + v20) = v21;
    *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  }
  return a1;
}

void destroy for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  type metadata accessor for PhotogrammetrySession.Request(0);
  if (!swift_getEnumCaseMultiPayload())
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  uint64_t v7 = *(void **)(a1 + *(int *)(a2 + 32));
}

uint64_t initializeWithCopy for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for PhotogrammetrySession.Request(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v8, v9, v11);
    uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                 + 64);
    uint64_t v13 = &v8[v12];
    uint64_t v14 = &v9[v12];
    long long v15 = *((_OWORD *)v14 + 5);
    *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
    *((_OWORD *)v13 + 5) = v15;
    v13[96] = v14[96];
    long long v16 = *((_OWORD *)v14 + 1);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v16;
    long long v17 = *((_OWORD *)v14 + 3);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v17;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v18 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  long long v19 = *(void **)(a2 + v18);
  id v20 = v19;
  *(void *)(a1 + v18) = v19;
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)(a1 + v7);
    uint64_t v9 = (char *)(a2 + v7);
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1 + v7, type metadata accessor for PhotogrammetrySession.Request);
    uint64_t v10 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v8, v9, v11);
      uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                   + 64);
      uint64_t v13 = &v8[v12];
      uint64_t v14 = &v9[v12];
      long long v15 = *((_OWORD *)v14 + 3);
      long long v16 = *((_OWORD *)v14 + 4);
      long long v17 = *((_OWORD *)v14 + 5);
      v13[96] = v14[96];
      *((_OWORD *)v13 + 4) = v16;
      *((_OWORD *)v13 + 5) = v17;
      *((_OWORD *)v13 + 3) = v15;
      long long v19 = *((_OWORD *)v14 + 1);
      long long v18 = *((_OWORD *)v14 + 2);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v19;
      *((_OWORD *)v13 + 2) = v18;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v20 = a3[8];
  uint64_t v21 = *(void **)(a1 + v20);
  id v22 = *(void **)(a2 + v20);
  id v23 = v22;
  *(void *)(a1 + v20) = v22;

  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for PhotogrammetrySession.Request(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                 + 64);
    uint64_t v13 = &v8[v12];
    uint64_t v14 = &v9[v12];
    long long v15 = *((_OWORD *)v14 + 5);
    *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
    *((_OWORD *)v13 + 5) = v15;
    v13[96] = v14[96];
    long long v16 = *((_OWORD *)v14 + 1);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v16;
    long long v17 = *((_OWORD *)v14 + 3);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v17;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v18 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)(a1 + v7);
    uint64_t v9 = (char *)(a2 + v7);
    outlined destroy of AnalyticsManager.ObjectCaptureSessionInitEvent(a1 + v7, type metadata accessor for PhotogrammetrySession.Request);
    uint64_t v10 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      uint64_t v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                   + 64);
      uint64_t v13 = &v8[v12];
      uint64_t v14 = &v9[v12];
      long long v15 = *((_OWORD *)v14 + 5);
      *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
      *((_OWORD *)v13 + 5) = v15;
      v13[96] = v14[96];
      long long v16 = *((_OWORD *)v14 + 1);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v16;
      long long v17 = *((_OWORD *)v14 + 3);
      *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
      *((_OWORD *)v13 + 3) = v17;
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v18 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  long long v19 = *(void **)(a1 + v18);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);

  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22805976C);
}

uint64_t sub_22805976C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for PhotogrammetrySession.Request(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 32));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2280598A0);
}

uint64_t sub_2280598A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for PhotogrammetrySession.Request(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32)) = a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PhotogrammetrySession.Request(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228059B74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType()
{
  return &type metadata for AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType;
}

unint64_t lazy protocol witness table accessor for type AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType and conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType()
{
  unint64_t result = lazy protocol witness table cache variable for type AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType and conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType;
  if (!lazy protocol witness table cache variable for type AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType and conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType and conformance AnalyticsManager.PhotogrammetrySessionInitEvent.SourceType);
  }
  return result;
}

__n128 Transform.init(_:)(__n128 *a1)
{
  __n128 v1 = a1[1];
  __n128 v2 = a1[2];
  __n128 v3 = a1[3];
  __n128 v4 = a1[4];
  __n128 v5 = a1[5];
  __n128 v6 = a1[6];
  __n128 v7 = a1[7];
  v11[0] = *a1;
  v11[1] = v1;
  v11[2] = v2;
  v11[3] = v3;
  v11[4] = v4;
  uint64_t v11[5] = v5;
  v11[6] = v6;
  v11[7] = v7;
  SPAffineTransform3DGet4x4Matrix((uint64_t)v11, (uint64_t)&v10, v1, v3, v5);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    __n128 v9 = result;
    swift_once();
    return v9;
  }
  return result;
}

__n128 SPAffineTransform3DGet4x4Matrix@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q1>, __n128 a4@<Q3>, __n128 a5@<Q5>)
{
  __n128 result = *(__n128 *)a1;
  a3.n128_u64[0] = *(void *)(a1 + 16);
  long long v6 = *(_OWORD *)(a1 + 32);
  a4.n128_u64[0] = *(void *)(a1 + 48);
  long long v7 = *(_OWORD *)(a1 + 64);
  a5.n128_u64[0] = *(void *)(a1 + 80);
  long long v8 = *(_OWORD *)(a1 + 96);
  __asm { FMOV            V7.2D, #1.0 }
  *(void *)&_Q7 = *(void *)(a1 + 112);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = a3;
  *(_OWORD *)(a2 + 32) = v6;
  *(__n128 *)(a2 + 48) = a4;
  *(_OWORD *)(a2 + 64) = v7;
  *(__n128 *)(a2 + 80) = a5;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 112) = _Q7;
  return result;
}

double SPAffineTransform3D.init(_:)@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q2>)
{
  __n128 v21 = (__n128)vcvtq_f64_f32((float32x2_t)a2.n128_u64[0]);
  long long v22 = COERCE_UNSIGNED_INT64(a2.n128_f32[2]);
  SPSize3DMakeWithVector(&v21, (__n128 *)&v31);
  SPRotation3D.init(_:)(v5, v4);
  long long v18 = v7;
  float64x2_t v19 = v6;
  __n128 v21 = (__n128)vcvtq_f64_f32((float32x2_t)a3.n128_u64[0]);
  long long v22 = COERCE_UNSIGNED_INT64(a3.n128_f32[2]);
  SPSize3DMakeWithVector(&v21, (__n128 *)v29);
  *(_OWORD *)v32.vector.f64 = v18;
  *(float64x2_t *)&v30.x = v19;
  *(_OWORD *)&v30.vector.f64[2] = v18;
  SPAffineTransform3DMake(&v31, v32, &v30, v29, (long long *)&v21, v19, v8, v9);
  double result = v21.n128_f64[0];
  long long v11 = v22;
  long long v12 = v23;
  long long v13 = v24;
  long long v14 = v25;
  long long v15 = v26;
  long long v16 = v27;
  long long v17 = v28;
  *(__n128 *)a1 = v21;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 96) = v16;
  *(_OWORD *)(a1 + 112) = v17;
  return result;
}

__n128 SPSize3DMakeWithVector@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  return result;
}

float64_t *SPAffineTransform3DMake@<X0>(SPSize3D *a1@<X0>, SPRotation3D a2@<0:Q0, 16:Q1>, SPVector3D *a3@<X1>, float64x2_t *a4@<X2>, long long *a5@<X8>, float64x2_t a6@<Q3>, float64x2_t _Q5@<Q5>, float64x2_t _Q6@<Q6>)
{
  v8.f64[0] = a1->depth;
  float64x2_t v10 = (float64x2_t)*(unint64_t *)&a1->width;
  __n128 result = &a1->height;
  v11.f64[0] = 0.0;
  v11.f64[1] = *result;
  _Q1 = *(float64x2_t *)&a3->x;
  _Q0 = *(float64x2_t *)&a3->vector.f64[2];
  _Q6.f64[0] = a3->y;
  __asm { FMLS            D2, D0, V0.D[0] }
  _D7 = a3->vector.f64[3];
  __asm { FMLA            D2, D7, V0.D[1] }
  a6.f64[0] = vmlad_n_f64(vmuld_lane_f64(_Q0.f64[0], _Q0, 1), _Q6.f64[0], a3->x);
  float64_t v19 = a6.f64[0] + a6.f64[0];
  v20.f64[0] = vmuld_lane_f64(_Q6.f64[0], _Q0, 1);
  a6.f64[0] = vmlad_n_f64(-(_Q6.f64[0] * _D7), _Q0.f64[0], a3->x);
  a6.f64[0] = a6.f64[0] + a6.f64[0];
  _Q2.f64[1] = v19;
  double v22 = vmlad_n_f64(-(_Q0.f64[0] * _D7), _Q6.f64[0], a3->x);
  v23.f64[0] = v22 + v22;
  __asm
  {
    FMLA            D5, D6, V1.D[1]
    FMLA            D5, D7, V0.D[1]
    FMLS            D5, D1, V1.D[0]
  }
  v23.f64[1] = _Q5.f64[0];
  __asm
  {
    FMLA            D19, D0, V1.D[1]
    FMLS            D5, D1, V1.D[0]
    FMLS            D5, D6, V1.D[1]
  }
  _Q1.f64[0] = a3->z;
  v20.f64[1] = -(a3->x * _D7);
  _Q6.f64[0] = _D19 + _D19;
  float64x2_t v25 = vmlaq_f64(v20, (float64x2_t)vzip1q_s64(*(int64x2_t *)&a3->x, (int64x2_t)_Q0), _Q1);
  float64x2_t v26 = vaddq_f64(v25, v25);
  float64x2_t v27 = *a4;
  _Q0.f64[0] = a4[1].f64[0];
  *a5 = 0u;
  a5[1] = 0u;
  a5[2] = 0u;
  a5[3] = 0u;
  a5[4] = 0u;
  a5[5] = 0u;
  a5[6] = 0u;
  a5[7] = 0u;
  float64x2_t v30 = *(float64x2_t *)MEMORY[0x263EF8988];
  float64x2_t v29 = *(float64x2_t *)(MEMORY[0x263EF8988] + 16);
  float64x2_t v32 = *(float64x2_t *)(MEMORY[0x263EF8988] + 32);
  float64x2_t v31 = *(float64x2_t *)(MEMORY[0x263EF8988] + 48);
  float64x2_t v34 = *(float64x2_t *)(MEMORY[0x263EF8988] + 64);
  float64x2_t v33 = *(float64x2_t *)(MEMORY[0x263EF8988] + 80);
  int64x2_t v35 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v34, v26), (int8x16_t)vceqq_f64(v32, v23)), (int8x16_t)vceqq_f64(*MEMORY[0x263EF8988], _Q2));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v35, 1), vandq_s8(vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v33, _Q5), (int8x16_t)vceqq_f64(v31, _Q6)), (int8x16_t)vceqq_f64(v29, a6)), (int8x16_t)v35)).u64[0] & 0x8000000000000000) == 0|| (int64x2_t v36 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v32, v11), vandq_s8((int8x16_t)vceqq_f64(v30, v10), (int8x16_t)vceqq_f64(v34, (float64x2_t)0))), (vandq_s8((int8x16_t)vdupq_laneq_s64(v36, 1), vandq_s8(vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v31, (float64x2_t)0), (int8x16_t)vceqq_f64(v29, (float64x2_t)0)), (int8x16_t)vceqq_f64(v33, v8)), (int8x16_t)v36)).u64[0] & 0x8000000000000000) == 0))
  {
    uint64_t v37 = 0;
    float64x2_t v59 = v10;
    float64x2_t v60 = 0uLL;
    float64x2_t v61 = v11;
    float64x2_t v62 = 0uLL;
    float64x2_t v63 = 0uLL;
    float64x2_t v64 = v8;
    long long v68 = 0uLL;
    float64x2_t v69 = 0uLL;
    long long v70 = 0uLL;
    float64x2_t v71 = 0uLL;
    float64x2_t v72 = 0uLL;
    float64x2_t v73 = 0uLL;
    *(void *)&_Q2.f64[1] = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
    *(void *)&v23.f64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    *(void *)&v26.f64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
    do
    {
      float64x2_t v39 = *(float64x2_t *)((char *)&v59 + v37);
      float64x2_t v38 = *(float64x2_t *)((char *)&v59 + v37 + 16);
      uint64_t v40 = (float64x2_t *)((char *)&v68 + v37);
      *uint64_t v40 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q2, v39.f64[0]), v23, v39, 1), v26, v38.f64[0]);
      v40[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(a6, v39), _Q6, v39, 1), v38, _Q5);
      v37 += 32;
    }
    while (v37 != 96);
    _Q2 = (float64x2_t)v68;
    a6 = v69;
    float64x2_t v23 = (float64x2_t)v70;
    _Q6 = v71;
    float64x2_t v26 = v72;
    _Q5 = v73;
    *a5 = v68;
    a5[1] = (__int128)a6;
  }
  long long v41 = xmmword_228331E00;
  long long v42 = xmmword_2283306B0;
  __asm { FMOV            V24.2D, #1.0 }
  int64x2_t v44 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v32, (float64x2_t)xmmword_2283306B0), (int8x16_t)vceqq_f64(v30, (float64x2_t)xmmword_228331E00)), (int8x16_t)vceqzq_f64(v34));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v44, 1), vandq_s8(vandq_s8(vandq_s8((int8x16_t)vceqzq_f64(v31), (int8x16_t)vceqzq_f64(v29)), (int8x16_t)vceqq_f64(v33, _Q24)), (int8x16_t)v44)).u64[0] & 0x8000000000000000) != 0&& (v45 = vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v31, _Q6), (int8x16_t)vceqq_f64(v29, a6)), (int8x16_t)vceqq_f64(v33, _Q5)), int64x2_t v46 = (int64x2_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f64(v32, v23), (int8x16_t)vceqq_f64(v30, _Q2)), (int8x16_t)vceqq_f64(v34, v26)), (vandq_s8((int8x16_t)vdupq_laneq_s64(v46, 1), vandq_s8(v45, (int8x16_t)v46)).u64[0] & 0x8000000000000000) != 0))
  {
    float64x2_t v54 = 0uLL;
    float64x2_t v27 = vaddq_f64(v27, (float64x2_t)0);
    _Q0 = vaddq_f64(_Q0, (float64x2_t)0);
    float64x2_t v53 = 0uLL;
    float64x2_t v52 = 0uLL;
  }
  else
  {
    int64x2_t v47 = vceqzq_f64(v27);
    if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v47, 1), vandq_s8((int8x16_t)vceqzq_f64(_Q0), (int8x16_t)v47)).u64[0] & 0x8000000000000000) != 0)
    {
      uint64_t v55 = 0;
      float64x2_t v59 = _Q2;
      float64x2_t v60 = a6;
      float64x2_t v61 = v23;
      float64x2_t v62 = _Q6;
      float64x2_t v63 = v26;
      float64x2_t v64 = _Q5;
      long long v68 = 0u;
      float64x2_t v69 = 0u;
      long long v70 = 0u;
      float64x2_t v71 = 0u;
      float64x2_t v72 = 0u;
      float64x2_t v73 = 0u;
      do
      {
        float64x2_t v57 = *(float64x2_t *)((char *)&v59 + v55);
        float64x2_t v56 = *(float64x2_t *)((char *)&v59 + v55 + 16);
        uint64_t v58 = (float64x2_t *)((char *)&v68 + v55);
        *uint64_t v58 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_228331E00, v57.f64[0]), (float64x2_t)xmmword_2283306B0, v57, 1), (float64x2_t)0, v56.f64[0]);
        v58[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v57, (float64x2_t)0), (float64x2_t)0, v57, 1), _Q24, v56);
        v55 += 32;
      }
      while (v55 != 96);
      long long v41 = v68;
      float64x2_t v52 = v69;
      long long v42 = v70;
      float64x2_t v53 = v71;
      float64x2_t v54 = v72;
      _Q24 = v73;
    }
    else
    {
      uint64_t v48 = 0;
      _Q0.f64[1] = 1.0;
      float64x2_t v59 = _Q2;
      float64x2_t v60 = (float64x2_t)*(unint64_t *)&a6.f64[0];
      float64x2_t v61 = v23;
      float64x2_t v62 = (float64x2_t)*(unint64_t *)&_Q6.f64[0];
      float64x2_t v63 = v26;
      float64x2_t v64 = (float64x2_t)*(unint64_t *)&_Q5.f64[0];
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      long long v67 = xmmword_2283306B0;
      long long v68 = 0u;
      float64x2_t v69 = 0u;
      long long v70 = 0u;
      float64x2_t v71 = 0u;
      float64x2_t v72 = 0u;
      float64x2_t v73 = 0u;
      float64x2_t v74 = 0u;
      float64x2_t v75 = 0u;
      do
      {
        float64x2_t v50 = *(float64x2_t *)((char *)&v59 + v48);
        float64x2_t v49 = *(float64x2_t *)((char *)&v59 + v48 + 16);
        unint64_t v51 = (float64x2_t *)((char *)&v68 + v48);
        *unint64_t v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_228331E00, v50.f64[0]), (float64x2_t)xmmword_2283306B0, v50, 1), (float64x2_t)0, v49.f64[0]), v27, v49, 1);
        v51[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v50.f64[0]), (float64x2_t)0, v50, 1), (float64x2_t)xmmword_228331E00, v49.f64[0]), _Q0, v49, 1);
        v48 += 32;
      }
      while (v48 != 128);
      long long v41 = v68;
      float64x2_t v52 = v69;
      long long v42 = v70;
      float64x2_t v53 = v71;
      float64x2_t v54 = v72;
      _Q24 = v73;
      float64x2_t v27 = v74;
      _Q0 = v75;
    }
  }
  *a5 = v41;
  a5[1] = (__int128)v52;
  a5[2] = v42;
  a5[3] = (__int128)v53;
  a5[4] = (__int128)v54;
  a5[5] = (__int128)_Q24;
  a5[6] = (__int128)v27;
  a5[7] = (__int128)_Q0;
  return result;
}

uint64_t PhotogrammetrySample.init(_:)(id *a1)
{
  outlined init with copy of PhotogrammetrySample((uint64_t)a1, (uint64_t)v15);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x270FA5388](v2 - 8);
  __n128 v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of (Int, URL)((uint64_t)&v16, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v14)
  {
    uint64_t v5 = type metadata accessor for PhotogrammetrySample();
    int v6 = swift_dynamicCast();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, v6 ^ 1u, 1, v5);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v5 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  }
  outlined destroy of PhotogrammetrySample((uint64_t)v15);
  type metadata accessor for PhotogrammetrySample();
  int v7 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  uint64_t result = outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for PhotogrammetrySample?);
  if (v7 == 1)
  {
    id v9 = a1[1];
    PhotogrammetrySample.init(id:image:)();
    swift_bridgeObjectRetain();
    PhotogrammetrySample.metadata.setter();
    id v10 = a1[3];
    PhotogrammetrySample.depthDataMap.setter();
    PhotogrammetrySample.gravity.setter();
    id v11 = a1[8];
    PhotogrammetrySample.objectMask.setter();
    return outlined destroy of PhotogrammetrySample((uint64_t)a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PhotogrammetrySessionImpl.init(id:using:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v53 = a3;
  uint64_t v49 = a2;
  uint64_t v61 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v48 = &v44[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  uint64_t v46 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  int8x16_t v45 = &v44[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  MEMORY[0x270FA5388](v8);
  id v10 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_activeRequests) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_isProcessing) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_outputMonitor) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession) = 0;
  uint64_t v14 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_requestMap;
  type metadata accessor for PhotogrammetrySessionImpl.RequestMap();
  uint64_t v15 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<[PhotogrammetrySessionImpl.RequestMap.Entry], os_unfair_lock_s>);
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 24) = 0;
  *(void *)(v16 + 16) = v13;
  *(void *)(v15 + 16) = v16;
  *(void *)(v3 + v14) = v15;
  *(void *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_timerToLogResourceUsage) = 0;
  *(void *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sortedImageFiles) = v13;
  *(void *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_invalidSamples) = v13;
  *(void *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_skippedSamples) = v13;
  *(unsigned char *)(v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state) = 0;
  uint64_t v50 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_serialExecutor;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  *(void *)&long long aBlock = v13;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(unsigned char *, void, uint64_t))(v51 + 104))(v10, *MEMORY[0x263F8F130], v52);
  *(void *)(v3 + v50) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v17 = v3 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sessionID;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, v61, v18);
  type metadata accessor for PhotogrammetrySession();
  uint64_t result = static PhotogrammetrySession.isSupported.getter();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v21 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession;
  *(void *)(v4 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession) = v49;
  swift_retain();
  swift_release();
  uint64_t result = outlined init with copy of PhotogrammetrySession.Request(v53, v4 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_configuration, type metadata accessor for PhotogrammetrySession.Configuration);
  if (!*(void *)(v4 + v21))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  swift_retain();
  uint64_t v22 = dispatch thunk of PhotogrammetrySession.outputPublisher.getter();
  swift_release();
  type metadata accessor for OutputPublisherMonitor(0);
  uint64_t v23 = swift_allocObject();
  OutputPublisherMonitor.init(publisher:)(v22);
  uint64_t v24 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_outputMonitor;
  *(void *)(v4 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_outputMonitor) = v23;
  uint64_t result = swift_release();
  uint64_t v25 = *(void *)(v4 + v24);
  if (!v25)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v26 = v25 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_outputs;
  swift_beginAccess();
  uint64_t v27 = v26;
  long long v28 = v48;
  outlined init with copy of (Int, URL)(v27, (uint64_t)v48, &demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29);
  if (result == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  float64x2_t v31 = v45;
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v28, v29);
  uint64_t v59 = type metadata accessor for AsyncOutputIterator(0);
  float64x2_t v60 = &protocol witness table for AsyncOutputIterator;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v58);
  (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v46 + 32))(boxed_opaque_existential_1, v31, v47);
  uint64_t result = outlined init with take of BindableDataInternal(&v58, (uint64_t)&aBlock);
  long long v33 = v55;
  *(_OWORD *)(v4 + 16) = aBlock;
  *(_OWORD *)(v4 + 32) = v33;
  *(void *)(v4 + 48) = v56;
  uint64_t v34 = *(void *)(v4 + v24);
  if (!v34)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v35 = swift_allocObject();
  swift_weakInit();
  uint64_t v36 = *(void *)(v34 + 24);
  *(void *)(v34 + 24) = partial apply for closure #1 in PhotogrammetrySessionImpl.init(id:using:configuration:);
  *(void *)(v34 + 32) = v35;
  uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v36);
  uint64_t v37 = *(void *)(v4 + v24);
  if (!v37)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v38 = swift_allocObject();
  swift_weakInit();
  uint64_t v39 = *(void *)(v37 + 40);
  *(void *)(v37 + 40) = partial apply for closure #2 in PhotogrammetrySessionImpl.init(id:using:configuration:);
  *(void *)(v37 + 48) = v38;
  uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v39);
  if (*(void *)(v4 + v24))
  {
    swift_weakAssign();
    uint64_t v40 = self;
    float64x2_t v56 = closure #3 in PhotogrammetrySessionImpl.init(id:using:configuration:);
    uint64_t v57 = 0;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v55 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    *((void *)&v55 + 1) = &block_descriptor_169;
    long long v41 = _Block_copy(&aBlock);
    id v42 = objc_msgSend(v40, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v41, 5.0);
    _Block_release(v41);
    swift_release();
    outlined destroy of PhotogrammetrySession.Request(v53, type metadata accessor for PhotogrammetrySession.Configuration);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v61, v18);
    uint64_t v43 = *(void **)(v4 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_timerToLogResourceUsage);
    *(void *)(v4 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_timerToLogResourceUsage) = v42;

    return v4;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t closure #1 in PhotogrammetrySessionImpl.init(id:using:configuration:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(NSObject **)(result + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_serialExecutor);
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = partial apply for closure #1 in PhotogrammetrySessionImpl.onProcessingComplete();
    *(void *)(v3 + 24) = v1;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_183;
    uint64_t v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);
    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    uint64_t result = swift_release();
    if (v2) {
      __break(1u);
    }
  }
  return result;
}

uint64_t closure #2 in PhotogrammetrySessionImpl.init(id:using:configuration:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(NSObject **)(result + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_serialExecutor);
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = partial apply for closure #1 in PhotogrammetrySessionImpl.onProcessingCancelled();
    *(void *)(v3 + 24) = v1;
    aBlock[4] = _sIg_Ieg_TRTA_0;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_175;
    uint64_t v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);
    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    uint64_t result = swift_release();
    if (v2) {
      __break(1u);
    }
  }
  return result;
}

void closure #3 in PhotogrammetrySessionImpl.init(id:using:configuration:)()
{
  kern_return_t v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  thread_act_t *v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  mach_msg_type_number_t act_listCnt[2];
  thread_act_array_t act_list[2];

  act_list[1] = *(thread_act_array_t *)MEMORY[0x263EF8340];
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 134349056;
    act_list[0] = (thread_act_array_t)specialized static ResourceUsageHelper.memoryUsage(in:)(2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_227DD2000, v1, v2, "Memory usage: %{public}llu MB", v3, 0xCu);
    MEMORY[0x22A696500](v3, -1, -1);
  }

  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134349056;
    act_list[0] = 0;
    act_listCnt[0] = 0;
    uint64_t v7 = task_threads(*MEMORY[0x263EF8960], act_list, act_listCnt);
    if (act_list[0]) {
      uint64_t v8 = v7 == 0;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = act_listCnt[0];
    if (!v8) {
      uint64_t v9 = -1;
    }
    act_list[0] = (thread_act_array_t)v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_227DD2000, v4, v5, "Thread count: %{public}ld", v6, 0xCu);
    MEMORY[0x22A696500](v6, -1, -1);
  }

  id v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (thread_act_t *)swift_slowAlloc();
    act_list[0] = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    uint64_t v14 = objc_msgSend(self, sel_processInfo);
    uint64_t v15 = objc_msgSend(v14, sel_thermalState);

    *(void *)act_listCnt = v15;
    type metadata accessor for NSProcessInfoThermalState(0);
    uint64_t v16 = String.init<A>(describing:)();
    *(void *)act_listCnt = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)act_list);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227DD2000, v10, v11, "Thermal state: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v13, -1, -1);
    MEMORY[0x22A696500](v12, -1, -1);
  }
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t PhotogrammetrySession.Configuration.init(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  id v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PhotogrammetrySession.Configuration.init()();
  PhotogrammetrySession.Configuration.isObjectMaskingEnabled.setter();
  int v5 = *(unsigned __int8 *)(a1 + 1);
  uint64_t v6 = type metadata accessor for PhotogrammetrySession.Configuration.SampleOrdering();
  __n128 v9 = MEMORY[0x270FA5388](v6);
  if (v5 == 1) {
    id v10 = (unsigned int *)MEMORY[0x263F36940];
  }
  else {
    id v10 = (unsigned int *)MEMORY[0x263F36948];
  }
  (*(void (**)(char *, void, __n128))(v8 + 104))((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), *v10, v9);
  PhotogrammetrySession.Configuration.sampleOrdering.setter();
  int v11 = *(unsigned __int8 *)(a1 + 2);
  uint64_t v12 = type metadata accessor for PhotogrammetrySession.Configuration.FeatureSensitivity();
  __n128 v15 = MEMORY[0x270FA5388](v12);
  if (v11 == 1) {
    uint64_t v16 = (unsigned int *)MEMORY[0x263F36950];
  }
  else {
    uint64_t v16 = (unsigned int *)MEMORY[0x263F36958];
  }
  (*(void (**)(char *, void, __n128))(v14 + 104))((char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *v16, v15);
  PhotogrammetrySession.Configuration.featureSensitivity.setter();
  uint64_t v17 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  outlined init with copy of (Int, URL)(a1 + *(int *)(v17 + 28), (uint64_t)v4, &demangling cache variable for type metadata for URL?);
  PhotogrammetrySession.Configuration.snapshotURL.setter();
  PhotogrammetrySession.Configuration.ignoreBoundingBox.setter();
  if (PhotogrammetrySession.Configuration.ignoreBoundingBox.getter())
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)logger);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_227DD2000, v19, v20, "Setting PhotogrammetrySession.Configuration to ignore bounding box!", v21, 2u);
      MEMORY[0x22A696500](v21, -1, -1);
    }
  }
  return outlined destroy of PhotogrammetrySession.Request(a1, type metadata accessor for PhotogrammetrySession.Configuration);
}

uint64_t closure #1 in PhotogrammetrySessionImpl.init<A>(id:input:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (Int, URL)(a1 + 72, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v13[3])
  {
    uint64_t v7 = type metadata accessor for PhotogrammetrySample();
    int v8 = swift_dynamicCast();
    uint64_t v9 = *(void *)(v7 - 8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, v8 ^ 1u, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7) != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v6, v7);
    }
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v11 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for PhotogrammetrySample?);
  outlined init with copy of PhotogrammetrySample(a1, (uint64_t)v13);
  return PhotogrammetrySample.init(_:)(v13);
}

void PhotogrammetrySessionImpl.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_227DD2000, v3, v4, "~~~ PhotogrammetrySession deinit was called! ~~~", v5, 2u);
    MEMORY[0x22A696500](v5, -1, -1);
  }

  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_outputMonitor);
  if (v6)
  {
    uint64_t v7 = *(void (**)(uint64_t))(v6 + 56);
    if (v7)
    {
      uint64_t v8 = swift_retain();
      v7(v8);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);
    }
    uint64_t v9 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_timerToLogResourceUsage;
    id v10 = *(void **)(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_timerToLogResourceUsage);
    if (v10)
    {
      objc_msgSend(v10, sel_invalidate);
      uint64_t v11 = *(void **)(v1 + v9);
    }
    else
    {
      uint64_t v11 = 0;
    }
    *(void *)(v1 + v9) = 0;

    uint64_t v12 = swift_beginAccess();
    MEMORY[0x270FA5388](v12);
    uint64_t v14 = (void *)(v13 + 16);
    __n128 v15 = (os_unfair_lock_s *)(v13 + 24);
    swift_retain();
    os_unfair_lock_lock(v15);
    partial apply for specialized closure #1 in Atomic.store(_:)(v14);
    os_unfair_lock_unlock(v15);
    swift_endAccess();
    swift_release();
    if (*(void *)(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession))
    {
      swift_retain();
      dispatch thunk of PhotogrammetrySession.close()();
      swift_release();
      outlined destroy of PhotogrammetrySession.Outputs(v1 + 16);
      outlined destroy of PhotogrammetrySession.Request(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_configuration, type metadata accessor for PhotogrammetrySession.Configuration);
      swift_bridgeObjectRelease();
      uint64_t v16 = v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sessionID;
      uint64_t v17 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
      swift_release();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t PhotogrammetrySessionImpl.__deallocating_deinit()
{
  PhotogrammetrySessionImpl.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PhotogrammetrySessionImpl()
{
  return type metadata accessor for PhotogrammetrySessionImpl(0);
}

uint64_t type metadata accessor for PhotogrammetrySessionImpl(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySessionImpl);
}

uint64_t type metadata completion function for PhotogrammetrySessionImpl()
{
  uint64_t result = type metadata accessor for PhotogrammetrySession.Configuration(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

void closure #1 in PhotogrammetrySessionImpl.process(requests:)(uint64_t a1, Swift::OpaquePointer a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request(0);
  uint64_t v58 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v55 = (uint64_t)&v48 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v48 - v11;
  uint64_t v13 = type metadata accessor for URL();
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state;
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state) == 2)
  {
    __break(1u);
    goto LABEL_30;
  }
  int64_t v19 = *((void *)a2._rawValue + 2);
  v20._rawValue = (void *)MEMORY[0x263F8EE78];
  if (!v19)
  {
LABEL_18:
    swift_retain();
    PhotogrammetrySessionImpl.RequestMap.addRequests(apiRequests:internalRequests:)(a2, v20);
    swift_release();
    if (*(void *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession))
    {
      swift_retain();
      dispatch thunk of PhotogrammetrySession.process(requests:)();
      float64x2_t v32 = v3;
      if (!v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        *(unsigned char *)(a1 + v18) = 1;
        *(unsigned char *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_isProcessing) = 1;
        return;
      }
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_21;
    }
LABEL_30:
    __break(1u);
    return;
  }
  uint64_t v49 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state;
  uint64_t v50 = a1;
  uint64_t v57 = v2;
  uint64_t v21 = (uint64_t)a2._rawValue
      + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
  uint64_t v58 = *(void *)(v58 + 72);
  rawValue = a2._rawValue;
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v48 = v15;
  uint64_t v53 = (void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v54 = v14;
  swift_bridgeObjectRetain();
  uint64_t v22 = v21;
  int64_t v23 = v19;
  uint64_t v24 = v54;
  do
  {
    outlined init with copy of PhotogrammetrySession.Request(v22, (uint64_t)v12, type metadata accessor for PhotogrammetrySession.Request);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of PhotogrammetrySession.Request((uint64_t)v12, type metadata accessor for PhotogrammetrySession.Request);
    }
    else
    {
      (*v52)(v17, v12, v24);
      if ((specialized PhotogrammetrySessionImpl.isValidModelUrl(_:)((uint64_t)v17) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for PhotogrammetrySession.Error(0);
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, (void (*)(uint64_t))type metadata accessor for PhotogrammetrySession.Error);
        swift_allocError();
        uint64_t v46 = v48 + 16;
        (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v47, v17, v24);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v46 - 8))(v17, v24);
        return;
      }
      (*v53)(v17, v24);
    }
    v22 += v58;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease();
  float64x2_t v60 = v20._rawValue;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
  uint64_t v25 = type metadata accessor for PhotogrammetrySession.Request();
  uint64_t v53 = (void (**)(char *, uint64_t))v25;
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v54 = *(void *)(v26 + 64);
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v26 + 32);
  while (1)
  {
    MEMORY[0x270FA5388](v25);
    long long v28 = (char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v29 = v55;
    outlined init with copy of PhotogrammetrySession.Request(v21, v55, type metadata accessor for PhotogrammetrySession.Request);
    uint64_t v30 = v56;
    outlined init with copy of PhotogrammetrySession.Request(v29, v56, type metadata accessor for PhotogrammetrySession.Request);
    float64x2_t v31 = v57;
    PhotogrammetrySession.Request.init(_:)(v30, (uint64_t)v28);
    float64x2_t v32 = v31;
    if (v31) {
      break;
    }
    outlined destroy of PhotogrammetrySession.Request(v29, type metadata accessor for PhotogrammetrySession.Request);
    v20._rawValue = v60;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v57 = 0;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v20._rawValue + 2) + 1, 1);
      v20._rawValue = v60;
    }
    unint64_t v35 = *((void *)v20._rawValue + 2);
    unint64_t v34 = *((void *)v20._rawValue + 3);
    if (v35 >= v34 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
      v20._rawValue = v60;
    }
    *((void *)v20._rawValue + 2) = v35 + 1;
    uint64_t v25 = (*(uint64_t (**)(unint64_t, char *, void (**)(char *, uint64_t)))(v26 + 32))((unint64_t)v20._rawValue+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v35, v28, v53);
    float64x2_t v60 = v20._rawValue;
    v21 += v58;
    if (!--v19)
    {
      uint64_t v3 = v57;
      a1 = v50;
      a2._rawValue = rawValue;
      uint64_t v18 = v49;
      goto LABEL_18;
    }
  }
  outlined destroy of PhotogrammetrySession.Request(v29, type metadata accessor for PhotogrammetrySession.Request);
  swift_release();
LABEL_21:
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)logger);
  id v37 = v32;
  id v38 = v32;
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    long long v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    float64x2_t v60 = (void *)v42;
    *(_DWORD *)long long v41 = 136446210;
    uint64_t v59 = (uint64_t)v32;
    id v43 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v44 = String.init<A>(describing:)();
    uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, (uint64_t *)&v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_227DD2000, v39, v40, "process() error: %{public}s", v41, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v42, -1, -1);
    MEMORY[0x22A696500](v41, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
}

uint64_t PhotogrammetrySession.Request.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v112 = a2;
  v116[3] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v110 = v8;
  v111.i64[0] = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v109 = (char *)v93 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v93 - v15;
  uint64_t v17 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x270FA5388](v17);
  int64_t v19 = (char *)v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = a1;
  outlined init with copy of PhotogrammetrySession.Request(a1, (uint64_t)v19, type metadata accessor for PhotogrammetrySession.Request);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v108 = v2;
      uint64_t v94 = *(void *)v19;
      uint64_t v96 = *((void *)v19 + 1);
      uint64_t v95 = *((void *)v19 + 2);
      v98.i64[0] = *((void *)v19 + 3);
      uint64_t v97 = *((void *)v19 + 4);
      v100.i64[0] = *((void *)v19 + 5);
      uint64_t v99 = *((void *)v19 + 6);
      v102.i64[0] = *((void *)v19 + 7);
      uint64_t v101 = *((void *)v19 + 8);
      v104.i64[0] = *((void *)v19 + 9);
      *(void *)&long long v103 = *((void *)v19 + 10);
      *(void *)&long long v105 = *((void *)v19 + 11);
      v106.i32[0] = v19[96];
      uint64_t v36 = self;
      id v37 = objc_msgSend(v36, sel_defaultManager);
      id v38 = objc_msgSend(v37, sel_temporaryDirectory);

      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      UUID.init()();
      UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v39 = v109;
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = v110;
      uint64_t v41 = v111.i64[0];
      uint64_t v42 = v111.i64[0] + 8;
      *(void *)&long long v107 = *(void *)(v111.i64[0] + 8);
      ((void (*)(char *, uint64_t))v107)(v11, v110);
      id v43 = objc_msgSend(v36, sel_defaultManager);
      uint64_t v44 = URL.path.getter();
      unint64_t v45 = (void *)MEMORY[0x22A688A50](v44);
      swift_bridgeObjectRelease();
      v116[0] = 0;
      unsigned int v46 = objc_msgSend(v43, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v45, 1, 0, v116);

      id v47 = v116[0];
      if (v46)
      {
        v93[1] = v42;
        URL.appendingPathComponent(_:)();
        (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v39, v11, v40);
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for Logger();
        __swift_project_value_buffer(v48, (uint64_t)logger);
        uint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v51 = swift_slowAlloc();
          uint64_t v52 = (void *)swift_slowAlloc();
          v116[0] = v52;
          *(_DWORD *)uint64_t v51 = 141558274;
          uint64_t v115 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v51 + 12) = 2080;
          uint64_t v53 = v109;
          swift_beginAccess();
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
          uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)v116);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_227DD2000, v49, v50, "outputURL for modelEntity: %{mask.hash}s", (uint8_t *)v51, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x22A696500](v52, -1, -1);
          MEMORY[0x22A696500](v51, -1, -1);
        }
        else
        {

          uint64_t v53 = v109;
        }
        uint64_t v71 = type metadata accessor for PhotogrammetrySession.Request();
        uint64_t v72 = *(void *)(v71 - 8);
        MEMORY[0x270FA5388](v71);
        float64x2_t v74 = (char *)v93 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?));
        v76 = &v74[*(int *)(v75 + 48)];
        v77 = &v74[*(int *)(v75 + 64)];
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v74, v53, v40);
        uint64_t v78 = *MEMORY[0x263F36A20];
        uint64_t v79 = type metadata accessor for PhotogrammetrySession.Request.Detail();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v79 - 8) + 104))(v76, v78, v79);
        if (v106.i8[0])
        {
          uint64_t v80 = type metadata accessor for PhotogrammetrySession.Request.Geometry();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v77, 1, 1, v80);
          uint64_t v81 = v112;
          uint64_t v82 = v113;
          v83 = (uint64_t (*)(char *, uint64_t))v107;
        }
        else
        {
          v84.i64[0] = v94;
          v84.i64[1] = v96;
          float32x4_t v111 = v84;
          v84.i64[0] = v95;
          v84.i64[1] = v98.i64[0];
          float32x4_t v106 = v84;
          v84.i64[0] = v97;
          v84.i64[1] = v100.i64[0];
          float32x4_t v100 = v84;
          v84.i64[0] = v99;
          v84.i64[1] = v102.i64[0];
          float32x4_t v102 = v84;
          v84.i64[0] = v101;
          v84.i64[1] = v104.i64[0];
          float32x4_t v104 = v84;
          *(void *)&long long v85 = v103;
          *((void *)&v85 + 1) = v105;
          long long v103 = v85;
          REAABBExtents();
          long long v105 = v86;
          REAABBCenter();
          uint64_t v81 = v112;
          uint64_t v82 = v113;
          v83 = (uint64_t (*)(char *, uint64_t))v107;
          if (one-time initialization token for identity != -1)
          {
            float32x4_t v104 = v87;
            swift_once();
            v87.i64[0] = v104.i64[0];
          }
          *(double *)&long long v88 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v87.i64, v102, *(float *)&v105);
          long long v105 = v88;
          float32x4_t v104 = v89;
          long long v103 = v90;
          float32x4_t v102 = v91;
          specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v100.i64, v106, v111.f32[0]);
          PhotogrammetrySession.Request.Geometry.init(orientedBoundsTransform:rootTransform:)();
          uint64_t v92 = type metadata accessor for PhotogrammetrySession.Request.Geometry();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v77, 0, 1, v92);
        }
        outlined destroy of PhotogrammetrySession.Request(v82, type metadata accessor for PhotogrammetrySession.Request);
        (*(void (**)(char *, void, uint64_t))(v72 + 104))(v74, *MEMORY[0x263F36A30], v71);
        (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v81, v74, v71);
        return v83(v109, v40);
      }
      else
      {
        long long v70 = v47;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        outlined destroy of PhotogrammetrySession.Request(v113, type metadata accessor for PhotogrammetrySession.Request);
        return ((uint64_t (*)(char *, uint64_t))v107)(v39, v40);
      }
    case 2u:
      outlined destroy of PhotogrammetrySession.Request(v113, type metadata accessor for PhotogrammetrySession.Request);
      uint64_t v56 = (unsigned int *)MEMORY[0x263F36A28];
      goto LABEL_12;
    case 3u:
      outlined destroy of PhotogrammetrySession.Request(v113, type metadata accessor for PhotogrammetrySession.Request);
      uint64_t v56 = (unsigned int *)MEMORY[0x263F36A10];
      goto LABEL_12;
    case 4u:
      outlined destroy of PhotogrammetrySession.Request(v113, type metadata accessor for PhotogrammetrySession.Request);
      uint64_t v56 = (unsigned int *)MEMORY[0x263F36A18];
LABEL_12:
      uint64_t v57 = *v56;
      uint64_t v58 = type metadata accessor for PhotogrammetrySession.Request();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 104))(v112, v57, v58);
      break;
    default:
      uint64_t v108 = v2;
      Swift::OpaquePointer v20 = &v19[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                        + 64)];
      uint64_t v96 = *(void *)v20;
      v98.i64[0] = *((void *)v20 + 1);
      uint64_t v97 = *((void *)v20 + 2);
      v100.i64[0] = *((void *)v20 + 3);
      uint64_t v99 = *((void *)v20 + 4);
      v102.i64[0] = *((void *)v20 + 5);
      uint64_t v101 = *((void *)v20 + 6);
      v104.i64[0] = *((void *)v20 + 7);
      *(void *)&long long v103 = *((void *)v20 + 8);
      v106.i64[0] = *((void *)v20 + 9);
      *(void *)&long long v105 = *((void *)v20 + 10);
      *(void *)&long long v107 = *((void *)v20 + 11);
      char v21 = v20[96];
      uint64_t v22 = v111.i64[0];
      int64_t v23 = v19;
      uint64_t v24 = v110;
      (*(void (**)(char *, char *, uint64_t))(v111.i64[0] + 32))(v16, v23, v110);
      uint64_t v25 = type metadata accessor for PhotogrammetrySession.Request();
      v109 = (char *)v93;
      uint64_t v26 = *(void *)(v25 - 8);
      MEMORY[0x270FA5388](v25);
      long long v28 = (char *)v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?));
      uint64_t v30 = &v28[*(int *)(v29 + 48)];
      float64x2_t v31 = &v28[*(int *)(v29 + 64)];
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v28, v16, v24);
      uint64_t v32 = *MEMORY[0x263F36A20];
      uint64_t v33 = type metadata accessor for PhotogrammetrySession.Request.Detail();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v30, v32, v33);
      if (v21)
      {
        uint64_t v34 = type metadata accessor for PhotogrammetrySession.Request.Geometry();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v31, 1, 1, v34);
        uint64_t v35 = v112;
      }
      else
      {
        v60.i64[0] = v96;
        v60.i64[1] = v98.i64[0];
        float32x4_t v98 = v60;
        v60.i64[0] = v97;
        v60.i64[1] = v100.i64[0];
        float32x4_t v100 = v60;
        v60.i64[0] = v99;
        v60.i64[1] = v102.i64[0];
        float32x4_t v102 = v60;
        v60.i64[0] = v101;
        v60.i64[1] = v104.i64[0];
        float32x4_t v104 = v60;
        v60.i64[0] = v103;
        v60.i64[1] = v106.i64[0];
        float32x4_t v106 = v60;
        *(void *)&long long v61 = v105;
        *((void *)&v61 + 1) = v107;
        long long v105 = v61;
        REAABBExtents();
        long long v107 = v62;
        REAABBCenter();
        uint64_t v35 = v112;
        if (one-time initialization token for identity != -1)
        {
          float32x4_t v106 = v63;
          swift_once();
          v63.i64[0] = v106.i64[0];
        }
        *(double *)&long long v64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v63.i64, v104, *(float *)&v107);
        float32x4_t v106 = v65;
        long long v107 = v64;
        long long v105 = v66;
        float32x4_t v104 = v67;
        specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v102.i64, v100, v98.f32[0]);
        PhotogrammetrySession.Request.Geometry.init(orientedBoundsTransform:rootTransform:)();
        uint64_t v68 = type metadata accessor for PhotogrammetrySession.Request.Geometry();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v31, 0, 1, v68);
      }
      uint64_t v69 = v110;
      outlined destroy of PhotogrammetrySession.Request(v113, type metadata accessor for PhotogrammetrySession.Request);
      (*(void (**)(char *, uint64_t))(v111.i64[0] + 8))(v16, v69);
      (*(void (**)(char *, void, uint64_t))(v26 + 104))(v28, *MEMORY[0x263F36A30], v25);
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v35, v28, v25);
      break;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(__n128);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t result;
  long long v34;
  long long v35;
  long long v36;
  uint64_t (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(char *, char *, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  long long v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void v59[2];
  long long v60;
  uint64_t v61;
  long long v62;
  long long v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  long long v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  long long v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  uint64_t v4 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PhotogrammetrySession.Request();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v15, a1, v11, v13);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v15, v11);
  if (MEMORY[0x263F36A30] && v16 == *MEMORY[0x263F36A30])
  {
    uint64_t v75 = a1;
    v76 = v4;
    v77 = a2;
    (*(void (**)(char *, uint64_t))(v12 + 96))(v15, v11);
    uint64_t v17 = (uint64_t)&v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                               + 64)];
    uint64_t v82 = v8;
    v83 = v7;
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v78 = v10;
    v18(v10, v15, v7);
    int64_t v19 = type metadata accessor for PhotogrammetrySession.Request.Detail();
    float64x2_t v74 = v59;
    Swift::OpaquePointer v20 = MEMORY[0x270FA5388](v19);
    long long v70 = v21;
    uint64_t v79 = (char *)v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v80 = v22;
    int64_t v23 = *(void (**)(__n128))(v22 + 32);
    uint64_t v81 = v24;
    v23(v20);
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
    uint64_t v73 = v59;
    uint64_t v26 = *(void *)(*(void *)(v25 - 8) + 64);
    MEMORY[0x270FA5388](v25 - 8);
    uint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
    outlined init with take of Transform?(v17, (uint64_t)v59 - v27, &demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
    long long v28 = type metadata accessor for PhotogrammetrySession.Request.Geometry();
    uint64_t v72 = v59;
    uint64_t v29 = *(void *)(v28 - 8);
    MEMORY[0x270FA5388](v28);
    float64x2_t v31 = (char *)v59 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x270FA5388](v32);
    uint64_t v71 = (uint64_t)v59 - v27;
    outlined init with copy of (Int, URL)((uint64_t)v59 - v27, (uint64_t)v59 - v27, &demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
    uint64_t v69 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))((char *)v59 - v27, 1, v28);
    if (v69 == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v59 - v27, &demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
      float32x4_t v63 = 0u;
      long long v61 = 0;
      *(void *)&float32x4_t v60 = 0;
      uint64_t v68 = 0uLL;
      long long v66 = 0;
      float32x4_t v67 = 0;
      long long v64 = 0;
      float32x4_t v65 = 0;
      long long v62 = 0u;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, (char *)v59 - v27, v28);
      PhotogrammetrySession.Request.Geometry.orientedBoundsTransform.getter();
      computeOrientedBoundingBox(for:)(&v84);
      uint64_t v68 = v84;
      float32x4_t v67 = v86;
      long long v66 = v85;
      float32x4_t v65 = v88;
      long long v64 = v87;
      PhotogrammetrySession.Request.Geometry.rootTransform.getter();
      REMakeSRTFromMatrix();
      float32x4_t v63 = v34;
      long long v62 = v35;
      float32x4_t v60 = v36;
      if (one-time initialization token for identity != -1) {
        swift_once();
      }
      (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
      long long v61 = v60;
      *(void *)&float32x4_t v60 = *((void *)&v60 + 1);
    }
    id v37 = *(uint64_t (**)(char *, char *, uint64_t))(v82 + 16);
    uint64_t v72 = v6;
    id v38 = v37(v6, v78, v83);
    v59[1] = v59;
    uint64_t v39 = v70;
    uint64_t v40 = MEMORY[0x270FA5388](v38);
    uint64_t v41 = (char *)v59 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v42 = v80;
    id v43 = *(uint64_t (**)(char *, char *, uint64_t, __n128))(v80 + 16);
    uint64_t v44 = v81;
    unint64_t v45 = v43(v41, v79, v81, v40);
    unsigned int v46 = MEMORY[0x270FA5388](v45);
    v43(v41, v41, v44, v46);
    id v47 = (*(uint64_t (**)(char *, uint64_t))(v42 + 88))(v41, v44);
    if (MEMORY[0x263F36A20] && v47 == *MEMORY[0x263F36A20])
    {
      uint64_t v48 = v69 == 1;
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?));
      os_log_type_t v50 = (uint64_t)v72;
      uint64_t v51 = (char *)v72 + *(int *)(v49 + 64);
      uint64_t v52 = *(void (**)(char *, uint64_t))(v80 + 8);
      uint64_t v53 = v81;
      v52((char *)v59 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), v81);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v75, v11);
      outlined destroy of BodyTrackingComponent?(v71, &demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
      v52(v79, v53);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v78, v83);
      uint64_t v54 = v62;
      *(_OWORD *)uint64_t v51 = v63;
      *((_OWORD *)v51 + 1) = v54;
      unint64_t v55 = v60;
      *((void *)v51 + 4) = v61;
      *((void *)v51 + 5) = v55;
      uint64_t v56 = *((void *)&v68 + 1);
      *((void *)v51 + 6) = v68;
      *((void *)v51 + 7) = v56;
      uint64_t v57 = v67;
      *((void *)v51 + 8) = v66;
      *((void *)v51 + 9) = v57;
      uint64_t v58 = v65;
      *((void *)v51 + 10) = v64;
      *((void *)v51 + 11) = v58;
      v51[96] = v48;
      swift_storeEnumTagMultiPayload();
      return outlined init with take of PhotogrammetrySession.Request(v50, v77, type metadata accessor for PhotogrammetrySession.Request);
    }
  }
  else if (MEMORY[0x263F36A10] && v16 == *MEMORY[0x263F36A10] {
         || MEMORY[0x263F36A28] && v16 == *MEMORY[0x263F36A28]
  }
         || MEMORY[0x263F36A18] && v16 == *MEMORY[0x263F36A18])
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in PhotogrammetrySessionImpl.cancel()(uint64_t result)
{
  *(unsigned char *)(result + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state) = 2;
  if (*(void *)(result + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_photogrammetrySession))
  {
    swift_retain();
    dispatch thunk of PhotogrammetrySession.cancel()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PhotogrammetrySessionImpl.addImageMappingDictionary(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v82 = ((char *)&v71 - v8);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v83 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v81 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  os_log_t v89 = (os_log_t)((char *)&v71 - v13);
  uint64_t v85 = OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sortedImageFiles;
  if (*(void *)(*(void *)(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sortedImageFiles)
                 + 16))
  {
    uint64_t v86 = v12;
    uint64_t v14 = swift_bridgeObjectRetain();
    v90[4] = specialized Set.init<A>(_:)(v14);
    uint64_t v15 = (uint64_t *)(v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_invalidSamples);
    swift_beginAccess();
    uint64_t v16 = *v15;
    uint64_t v17 = *(void *)(*v15 + 16);
    if (v17)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v17; ++i)
      {
        uint64_t v19 = *(void *)(v16 + 8 * i + 32);
        specialized Set._Variant.insert(_:)(v90, v19);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v20 = swift_bridgeObjectRetain();
    char v21 = specialized _copyCollectionToContiguousArray<A>(_:)(v20);
    swift_bridgeObjectRelease();
    v90[0] = (uint64_t)v21;
    specialized MutableCollection<>.sort(by:)(v90);
    swift_bridgeObjectRelease();
    uint64_t v22 = v90[0];
    uint64_t v23 = v86;
    uint64_t v24 = *(void *)(*(void *)(v2 + v85) + 16);
    uint64_t v84 = *(void *)(v90[0] + 16);
    if (v84 != v24)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)logger);
      swift_retain();
      swift_retain();
      uint64_t v88 = v26;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 134218240;
        v90[0] = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v29 + 12) = 2048;
        v90[0] = *(void *)(*(void *)(v2 + v85) + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_227DD2000, v27, v28, "sortedSampleID count=%ld  sortedImageFiles count=%ld", (uint8_t *)v29, 0x16u);
        MEMORY[0x22A696500](v29, -1, -1);
      }
      else
      {

        swift_release();
        swift_release();
      }
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl(&dword_227DD2000, v34, v35, "SampleID and sorted URL counts do not match!  The sampleID to URL mapping may be incorrect!", v36, 2u);
        MEMORY[0x22A696500](v36, -1, -1);
      }

      uint64_t v23 = v86;
    }
    uint64_t v72 = v22;
    if (!v84)
    {
LABEL_43:
      swift_release();
      return;
    }
    unint64_t v37 = 0;
    uint64_t v79 = v83 + 16;
    uint64_t v80 = v72 + 32;
    uint64_t v87 = v83 + 56;
    v77 = (void (**)(char *, unint64_t, uint64_t))(v83 + 32);
    uint64_t v78 = v83 + 48;
    uint64_t v73 = (void (**)(unint64_t, char *, uint64_t))(v83 + 40);
    uint64_t v75 = (void (**)(os_log_t, uint64_t))(v83 + 8);
    float64x2_t v74 = v6;
    uint64_t v76 = v2;
    while (1)
    {
      uint64_t v40 = *(void *)(v2 + v85);
      if (v37 >= *(void *)(v40 + 16))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      uint64_t v41 = *(void *)(v80 + 8 * v37);
      uint64_t v42 = v83;
      uint64_t v43 = v40 + ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80));
      uint64_t v88 = *(void *)(v83 + 72);
      uint64_t v44 = *(void (**)(os_log_t, unint64_t, uint64_t))(v83 + 16);
      os_log_t v45 = v89;
      v44(v89, v43 + v88 * v37, v23);
      uint64_t v46 = (uint64_t)v82;
      v44(v82, (unint64_t)v45, v23);
      id v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
      v47(v46, 0, 1, v23);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v46, 1, v23) == 1)
      {
        outlined destroy of BodyTrackingComponent?(v46, &demangling cache variable for type metadata for URL?);
        unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
        if (v49)
        {
          unint64_t v50 = v48;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v52 = *(void *)(a1 + 8);
          v90[0] = v52;
          *(void *)(a1 + 8) = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v52 = v90[0];
          }
          uint64_t v39 = v86;
          (*v77)(v6, *(void *)(v52 + 56) + v50 * v88, v86);
          specialized _NativeDictionary._delete(at:)(v50, v52);
          *(void *)(a1 + 8) = v52;
          swift_bridgeObjectRelease();
          uint64_t v38 = 0;
        }
        else
        {
          uint64_t v38 = 1;
          uint64_t v39 = v86;
        }
        v47((uint64_t)v6, v38, 1, v39);
        outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for URL?);
        uint64_t v23 = v39;
        uint64_t v2 = v76;
      }
      else
      {
        uint64_t v53 = *v77;
        (*v77)(v81, v46, v23);
        int v54 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v55 = a1;
        int v56 = v54;
        v90[0] = *(void *)(v55 + 8);
        uint64_t v57 = v90[0];
        uint64_t v58 = v55;
        *(void *)(v55 + 8) = 0x8000000000000000;
        unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
        uint64_t v61 = *(void *)(v57 + 16);
        BOOL v62 = (v59 & 1) == 0;
        uint64_t v63 = v61 + v62;
        if (__OFADD__(v61, v62)) {
          goto LABEL_45;
        }
        char v64 = v59;
        if (*(void *)(v57 + 24) >= v63)
        {
          if ((v56 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v63, v56);
          unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
          if ((v64 & 1) != (v66 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            swift_release();
            __break(1u);
            return;
          }
          unint64_t v60 = v65;
        }
        a1 = v58;
        float32x4_t v67 = (void *)v90[0];
        if (v64)
        {
          uint64_t v23 = v86;
          (*v73)(*(void *)(v90[0] + 56) + v60 * v88, v81, v86);
        }
        else
        {
          *(void *)(v90[0] + 8 * (v60 >> 6) + 64) |= 1 << v60;
          *(void *)(v67[6] + 8 * v60) = v41;
          v53((char *)(v67[7] + v60 * v88), (unint64_t)v81, v86);
          uint64_t v68 = v67[2];
          BOOL v69 = __OFADD__(v68, 1);
          uint64_t v70 = v68 + 1;
          if (v69) {
            goto LABEL_46;
          }
          v67[2] = v70;
          uint64_t v23 = v86;
        }
        *(void *)(v58 + 8) = v90[0];
        swift_bridgeObjectRelease();
        uint64_t v2 = v76;
        uint64_t v6 = v74;
      }
      ++v37;
      (*v75)(v89, v23);
      if (v84 == v37) {
        goto LABEL_43;
      }
    }
  }
  if (one-time initialization token for logger != -1) {
LABEL_47:
  }
    swift_once();
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)logger);
  os_log_t v89 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v89, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl(&dword_227DD2000, v89, v31, "There were no image files associated with this session -- not adding mapping.", v32, 2u);
    MEMORY[0x22A696500](v32, -1, -1);
  }
  os_log_t v33 = v89;
}

Swift::Void __swiftcall PhotogrammetrySessionImpl.RequestMap.addRequests(apiRequests:internalRequests:)(Swift::OpaquePointer apiRequests, Swift::OpaquePointer internalRequests)
{
  uint64_t v77 = 0;
  uint64_t v61 = (void *)type metadata accessor for Logger();
  unint64_t v60 = *(v61 - 1);
  MEMORY[0x270FA5388](v61);
  char v59 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0);
  uint64_t v69 = *(void *)(v6 - 8);
  uint64_t v70 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v76 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PhotogrammetrySession.Request(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Request));
  MEMORY[0x270FA5388](v68);
  uint64_t v67 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = v2;
  uint64_t v78 = (os_unfair_lock_s **)(v2 + 16);
  uint64_t v13 = *((void *)apiRequests._rawValue + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v66 = v13;
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = (char *)apiRequests._rawValue
        + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v62 = *(void *)(v9 + 72);
    rawValue = internalRequests._rawValue;
    unint64_t v65 = apiRequests._rawValue;
    uint64_t v63 = v11;
    while (1)
    {
      outlined init with copy of PhotogrammetrySession.Request((uint64_t)v15, (uint64_t)v11, type metadata accessor for PhotogrammetrySession.Request);
      unint64_t v16 = *((void *)internalRequests._rawValue + 2);
      if (v14 == v16)
      {
        outlined destroy of PhotogrammetrySession.Request((uint64_t)v11, type metadata accessor for PhotogrammetrySession.Request);
        goto LABEL_13;
      }
      if (v14 >= v16) {
        break;
      }
      float64x2_t v74 = v15;
      uint64_t v17 = type metadata accessor for PhotogrammetrySession.Request();
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v19 = (char *)internalRequests._rawValue
          + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      uint64_t v20 = *(void *)(v18 + 72);
      unint64_t v75 = v14;
      char v21 = &v19[v20 * v14];
      uint64_t v22 = v67;
      uint64_t v23 = v67 + *(int *)(v68 + 48);
      outlined init with take of PhotogrammetrySession.Request((uint64_t)v11, v67, type metadata accessor for PhotogrammetrySession.Request);
      uint64_t v24 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 16);
      uint64_t v25 = v24(v23, v21, v17);
      uint64_t v71 = &v58;
      __n128 v26 = MEMORY[0x270FA5388](v25);
      os_log_type_t v28 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v72 = v18;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 32))(v28, v23, v17, v26);
      uint64_t v29 = v76;
      outlined init with take of PhotogrammetrySession.Request(v22, v76, type metadata accessor for PhotogrammetrySession.Request);
      uint64_t v30 = v29 + *(int *)(v70 + 20);
      uint64_t v73 = v17;
      v24(v30, v28, v17);
      os_log_type_t v31 = v78;
      Date.init()();
      swift_beginAccess();
      uint64_t v32 = *v31 + 4;
      os_log_t v33 = *v31 + 6;
      os_unfair_lock_lock(v33);
      uint64_t v34 = v77;
      specialized closure #1 in Atomic.load()(v32, &v80);
      os_unfair_lock_unlock(v33);
      unint64_t v35 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, v35);
      }
      unint64_t v37 = *(void *)(v35 + 16);
      unint64_t v36 = *(void *)(v35 + 24);
      uint64_t v11 = v63;
      if (v37 >= v36 >> 1) {
        unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v35);
      }
      uint64_t v38 = v76;
      unint64_t v39 = v75 + 1;
      *(void *)(v35 + 16) = v37 + 1;
      uint64_t v40 = outlined init with take of PhotogrammetrySession.Request(v38, v35+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(void *)(v69 + 72) * v37, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
      unint64_t v80 = v35;
      MEMORY[0x270FA5388](v40);
      *(&v58 - 2) = (uint64_t)&v80;
      uint64_t v42 = v41 + 4;
      uint64_t v43 = v41 + 6;
      os_unfair_lock_lock(v41 + 6);
      partial apply for specialized closure #1 in Atomic.store(_:)(v42);
      uint64_t v77 = v34;
      os_unfair_lock_unlock(v43);
      unint64_t v14 = v39;
      swift_bridgeObjectRelease();
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v28, v73);
      uint64_t v15 = &v74[v62];
      BOOL v44 = v66 == v39;
      internalRequests._rawValue = rawValue;
      apiRequests._rawValue = v65;
      if (v44) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    apiRequests._rawValue = v61;
    unint64_t v14 = v60;
    uint64_t v15 = v59;
    if (one-time initialization token for logger == -1) {
      goto LABEL_14;
    }
  }
  swift_once();
LABEL_14:
  uint64_t v45 = __swift_project_value_buffer((uint64_t)apiRequests._rawValue, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, void *))(v14 + 16))(v15, v45, apiRequests._rawValue);
  swift_retain_n();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    unint64_t v48 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    unint64_t v80 = v49;
    *(_DWORD *)unint64_t v48 = 136446210;
    unint64_t v50 = v78;
    swift_beginAccess();
    uint64_t v51 = *v50;
    uint64_t v52 = *v50 + 4;
    swift_retain();
    os_unfair_lock_lock(v51 + 6);
    uint64_t v53 = v77;
    specialized closure #1 in Atomic.load()(v52, &v79);
    if (v53)
    {
      swift_release();
      os_unfair_lock_unlock(v51 + 6);
      __break(1u);
    }
    else
    {
      os_unfair_lock_unlock(v51 + 6);
      uint64_t v54 = v79;
      swift_release();
      uint64_t v55 = *(void *)(v54 + 16);
      swift_bridgeObjectRelease();
      uint64_t v79 = v55;
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v46, v47, "Number of requests in the map: %{public}s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v49, -1, -1);
      MEMORY[0x22A696500](v48, -1, -1);

      (*(void (**)(char *, void *))(v60 + 8))(v59, v61);
    }
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, void *))(v14 + 8))(v15, apiRequests._rawValue);
  }
}

uint64_t PhotogrammetrySessionImpl.RequestMap.findRequest(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v4 = type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v28 = (uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySessionImpl.RequestMap.Entry?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v27 - v14;
  swift_beginAccess();
  uint64_t v16 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 24));
  specialized closure #1 in Atomic.load()((void *)(v16 + 16), &v30);
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 24));
  uint64_t v17 = v30;
  swift_release();
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v19 = v17 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v20 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of PhotogrammetrySession.Request(v19, (uint64_t)v9, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
      if (MEMORY[0x22A688450](&v9[*(int *)(v4 + 20)], a1)) {
        break;
      }
      outlined destroy of PhotogrammetrySession.Request((uint64_t)v9, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
      v19 += v20;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    outlined init with take of PhotogrammetrySession.Request((uint64_t)v9, (uint64_t)v15, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    uint64_t v21 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v21 = 1;
  }
  uint64_t v22 = v29;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v15, v21, 1, v4);
  swift_bridgeObjectRelease();
  outlined init with copy of (Int, URL)((uint64_t)v15, (uint64_t)v12, &demangling cache variable for type metadata for PhotogrammetrySessionImpl.RequestMap.Entry?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) == 1)
  {
    uint64_t v23 = type metadata accessor for PhotogrammetrySession.Request(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  }
  else
  {
    uint64_t v24 = v28;
    outlined init with take of PhotogrammetrySession.Request((uint64_t)v12, v28, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    outlined init with copy of PhotogrammetrySession.Request(v24, v22, type metadata accessor for PhotogrammetrySession.Request);
    outlined destroy of PhotogrammetrySession.Request(v24, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    uint64_t v25 = type metadata accessor for PhotogrammetrySession.Request(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v22, 0, 1, v25);
  }
  return outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for PhotogrammetrySessionImpl.RequestMap.Entry?);
}

uint64_t PhotogrammetrySessionImpl.RequestMap.removeRequest(internalRequest:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v40 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v39 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v37 = (os_unfair_lock_s **)(v1 + 16);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  specialized closure #1 in Atomic.load()((void *)(v9 + 16), v42);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  uint64_t v10 = v42[0];
  swift_release();
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v38 = v3;
  if (v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = v10 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v14 = *(void *)(v6 + 72);
    while ((MEMORY[0x22A688450](v13 + *(int *)(v5 + 20), a1) & 1) == 0)
    {
      ++v12;
      v13 += v14;
      if (v11 == v12)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = v37;
    swift_beginAccess();
    uint64_t v16 = *v15 + 4;
    uint64_t v17 = *v15 + 6;
    os_unfair_lock_lock(v17);
    specialized closure #1 in Atomic.load()(v16, v43);
    os_unfair_lock_unlock(v17);
    specialized Array.remove(at:)(v12, (uint64_t)v8);
    uint64_t v18 = outlined destroy of PhotogrammetrySession.Request((uint64_t)v8, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    uint64_t v41 = v43[0];
    MEMORY[0x270FA5388](v18);
    *(&v36 - 2) = (uint64_t)&v41;
    uint64_t v20 = v19 + 4;
    uint64_t v21 = v19 + 6;
    os_unfair_lock_lock(v19 + 6);
    partial apply for specialized closure #1 in Atomic.store(_:)(v20);
    os_unfair_lock_unlock(v21);
    swift_bridgeObjectRelease();
    swift_endAccess();
LABEL_8:
    uint64_t v3 = v38;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v23 = v39;
  uint64_t v22 = v40;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v24 = __swift_project_value_buffer(v3, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v23, v24, v3);
  swift_retain_n();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v42[0] = v28;
    *(_DWORD *)uint64_t v27 = 136446210;
    uint64_t v29 = *v37 + 4;
    uint64_t v30 = *v37 + 6;
    swift_retain();
    os_unfair_lock_lock(v30);
    specialized closure #1 in Atomic.load()(v29, v43);
    os_unfair_lock_unlock(v30);
    uint64_t v31 = v43[0];
    swift_release();
    uint64_t v32 = *(void *)(v31 + 16);
    swift_bridgeObjectRelease();
    v43[0] = v32;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227DD2000, v25, v26, "Number of requests left: %{public}s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v28, -1, -1);
    MEMORY[0x22A696500](v27, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v39, v38);
  }
  else
  {

    swift_release_n();
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v23, v3);
  }
}

uint64_t PhotogrammetrySessionImpl.RequestMap.getStartTimestamp(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySessionImpl.RequestMap.Entry?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v12 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
  specialized closure #1 in Atomic.load()((void *)(v12 + 16), &v24);
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
  uint64_t v13 = v24;
  swift_release();
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = v13 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v16 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of PhotogrammetrySession.Request(v15, (uint64_t)v8, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
      if (MEMORY[0x22A688450](&v8[*(int *)(v5 + 20)], a1)) {
        break;
      }
      outlined destroy of PhotogrammetrySession.Request((uint64_t)v8, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
      v15 += v16;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    outlined init with take of PhotogrammetrySession.Request((uint64_t)v8, (uint64_t)v11, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    uint64_t v17 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v17 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v11, v17, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for PhotogrammetrySessionImpl.RequestMap.Entry?);
    uint64_t v18 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
  else
  {
    uint64_t v20 = &v11[*(int *)(v5 + 24)];
    uint64_t v21 = type metadata accessor for Date();
    uint64_t v22 = *(void *)(v21 - 8);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v22 + 16))(a2, v20, v21);
    outlined destroy of PhotogrammetrySession.Request((uint64_t)v11, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(a2, 0, 1, v21);
  }
}

uint64_t PhotogrammetrySessionImpl.RequestMap.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in PhotogrammetrySessionImpl.onProcessingCancelled()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_requestMap);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = (void *)(v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + 24);
  swift_retain();
  os_unfair_lock_lock(v5);
  partial apply for specialized closure #1 in Atomic.store(_:)(v4);
  os_unfair_lock_unlock(v5);
  swift_endAccess();
  uint64_t result = swift_release();
  *(unsigned char *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_isProcessing) = 0;
  *(unsigned char *)(a1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state) = 0;
  return result;
}

uint64_t PhotogrammetrySessionImpl.logAnalyticsEvents(sourceType:)(char a1)
{
  char v2 = a1 & 1;
  uint64_t v28 = type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent(0);
  MEMORY[0x270FA5388](v28);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t inited = type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent(0);
  uint64_t v6 = *(void *)(inited - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](inited);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - v10;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v12 = v1 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sessionID;
  uint64_t v13 = type metadata accessor for UUID();
  os_log_type_t v26 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  uint64_t v27 = v12;
  v26(v11, v12, v13);
  v11[*(int *)(inited + 20)] = v2;
  uint64_t v14 = (void *)MEMORY[0x22A688A50](0xD000000000000031, 0x80000002283575D0);
  outlined init with copy of PhotogrammetrySession.Request((uint64_t)v11, (uint64_t)v8, type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent);
  unint64_t v15 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = swift_allocObject();
  outlined init with take of PhotogrammetrySession.Request((uint64_t)v8, v16 + v15, type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent);
  aBlock[4] = partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionInitEvent(event:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = &block_descriptor_17;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v17);

  outlined destroy of PhotogrammetrySession.Request((uint64_t)v11, type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent);
  id v18 = objc_msgSend(self, sel_mainBundle);
  id v19 = objc_msgSend(v18, sel_bundleIdentifier);

  if (v19)
  {
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v22 = 0xE000000000000000;
  }
  v26(v4, v27, v13);
  uint64_t v23 = (uint64_t *)&v4[*(int *)(v28 + 20)];
  *uint64_t v23 = v20;
  v23[1] = v22;
  specialized AnalyticsManager.sendPhotogrammetrySessionBundleIdentifierEvent(event:)((uint64_t)v4);
  return outlined destroy of PhotogrammetrySession.Request((uint64_t)v4, type metadata accessor for AnalyticsManager.PhotogrammetrySessionBundleIdentifierEvent);
}

uint64_t type metadata accessor for PhotogrammetrySessionImpl.RequestMap()
{
  return self;
}

uint64_t OutputPublisherMonitor.sessionID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v21 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = v1 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor____lazy_storage___sessionID;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v12, (uint64_t)v11, &demangling cache variable for type metadata for UUID?);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v11, 1, v13) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a1, v11, v13);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v22 = a1;
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v17(v8, Strong + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sessionID, v13);
    swift_release();
    id v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v18(v8, 0, 1, v13);
    if (v15(v8, 1, v13) != 1)
    {
      uint64_t v20 = v22;
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22, v8, v13);
      v17(v5, v20, v13);
      goto LABEL_9;
    }
    a1 = v22;
  }
  else
  {
    id v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v18(v8, 1, 1, v13);
  }
  UUID.init()();
  outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v5, a1, v13);
LABEL_9:
  v18(v5, 0, 1, v13);
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)v5, v12, &demangling cache variable for type metadata for UUID?);
  return swift_endAccess();
}

uint64_t OutputPublisherMonitor.init(publisher:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v33 = a1;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation.BufferingPolicy);
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v31 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v30 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v10 - 8);
  *(void *)(v1 + 64) = 0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  uint64_t v11 = v1 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_outputs;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>);
  uint64_t v12 = *(void *)(v28 - 8);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v29 = v12 + 56;
  v27(v11, 1, 1, v28);
  swift_weakInit();
  uint64_t v13 = v1 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor____lazy_storage___sessionID;
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  unint64_t v15 = (void *)(v1 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onOutput);
  *unint64_t v15 = 0;
  v15[1] = 0;
  uint64_t v25 = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_serialOutputQueue;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  uint64_t v37 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8F130], v26);
  *(void *)(v1 + v25) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v16 = (void *)(v1 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  *uint64_t v16 = 0;
  v16[1] = 0;
  uint64_t v17 = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor__internalProcessingCompleteReceived;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Bool, os_unfair_lock_s>);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 20) = 0;
  *(unsigned char *)(v18 + 16) = 0;
  *(void *)(v2 + v17) = v18;
  id v19 = (void *)(v2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete);
  *id v19 = 0;
  v19[1] = 0;
  uint64_t v20 = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks;
  type metadata accessor for OutputPublisherMonitor.Tasks();
  uint64_t v21 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v21 + 112) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v2 + v20) = v21;
  uint64_t v35 = v2;
  uint64_t v36 = v33;
  type metadata accessor for PhotogrammetrySession.Output(0);
  (*(void (**)(char *, void, uint64_t))(v32 + 104))(v31, *MEMORY[0x263F8F580], v34);
  uint64_t v22 = (uint64_t)v30;
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_release();
  v27(v22, 0, 1, v28);
  uint64_t v23 = v2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_outputs;
  swift_beginAccess();
  outlined assign with take of Material?(v22, v23, &demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  swift_endAccess();
  return v2;
}

uint64_t closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = a3;
  uint64_t v53 = a1;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v60 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  char v59 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v58 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  uint64_t v55 = v10;
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = (uint64_t (**)(uint64_t))(a2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onOutput);
  uint64_t v14 = *(void *)(a2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onOutput);
  *uint64_t v13 = partial apply for closure #1 in closure #1 in OutputPublisherMonitor.init(publisher:);
  v13[1] = (uint64_t (*)(uint64_t))v12;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v50 = v8;
  v54(v11, a1, v8);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  uint64_t v51 = v16 | 7;
  uint64_t v52 = v17 + v10;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v15;
  uint64_t v63 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  uint64_t v64 = v9 + 32;
  v63(v18 + v17, v11, v8);
  uint64_t v49 = a2;
  id v19 = (uint64_t (**)(uint64_t))(a2
                                         + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  uint64_t v20 = *(void *)(a2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  *id v19 = partial apply for closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:);
  v19[1] = (uint64_t (*)(uint64_t))v18;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v20);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = v11;
  uint64_t v23 = v11;
  uint64_t v25 = v53;
  uint64_t v24 = v54;
  uint64_t v26 = v50;
  v54(v23, v53, v50);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v21;
  v63(v27 + v17, v22, v26);
  uint64_t v28 = v49;
  uint64_t v29 = (uint64_t (**)())(v49 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete);
  uint64_t v30 = *(void *)(v49 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete);
  *uint64_t v29 = partial apply for closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:);
  v29[1] = (uint64_t (*)())v27;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v30);
  v24(v22, v25, v26);
  uint64_t v31 = swift_allocObject();
  v63(v31 + ((v16 + 16) & ~v16), v22, v26);
  uint64_t v32 = v28;
  uint64_t v33 = *(void *)(v28 + 56);
  *(void *)(v28 + 56) = partial apply for closure #4 in closure #1 in OutputPublisherMonitor.init(publisher:);
  *(void *)(v28 + 64) = v31;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v33);
  swift_retain();
  AsyncStream.Continuation.onTermination.setter();
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<PhotogrammetrySession.Output, Never>>);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v63 = (void (*)(uint64_t, char *, uint64_t))v34;
  uint64_t v64 = v35;
  __n128 v36 = MEMORY[0x270FA5388](v34);
  uint64_t v38 = (char *)&v48 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v61;
  unint64_t v39 = v56;
  uint64_t v40 = v57;
  uint64_t v41 = v58;
  (*(void (**)(char *, void, uint64_t, __n128))(v57 + 104))(v56, *MEMORY[0x263EFDAF0], v58, v36);
  uint64_t v43 = v59;
  uint64_t v42 = v60;
  uint64_t v44 = v62;
  (*(void (**)(char *, void, uint64_t))(v60 + 104))(v59, *MEMORY[0x263EFDB08], v62);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PhotogrammetrySession.Output, Never>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AnyPublisher<PhotogrammetrySession.Output, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PhotogrammetrySession.Output, Never>);
  Publisher.buffer(size:prefetch:whenFull:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Publishers.Buffer<AnyPublisher<PhotogrammetrySession.Output, Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<AnyPublisher<PhotogrammetrySession.Output, Never>>);
  uint64_t v45 = v63;
  uint64_t v46 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, void (*)(uint64_t, char *, uint64_t)))(v64 + 8))(v38, v45);
  *(void *)(v32 + 16) = v46;
  return swift_release();
}

uint64_t closure #1 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    OutputPublisherMonitor.publishOutputMessage(internalOutput:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a3;
  uint64_t v26 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PhotogrammetrySession.Output(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v24 = *(id *)(result + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_serialOutputQueue);
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v12);
    outlined init with copy of PhotogrammetrySession.Request(v26, (uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PhotogrammetrySession.Output);
    unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    unint64_t v18 = (v14 + *(unsigned __int8 *)(v10 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v19 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v19 + v17, v15, v12);
    outlined init with take of PhotogrammetrySession.Request((uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for PhotogrammetrySession.Output);
    aBlock[4] = partial apply for closure #1 in closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:);
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_221_0;
    uint64_t v20 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter();
    uint64_t v31 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v21 = v30;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v22 = v24;
    MEMORY[0x22A689420](0, v8, v5, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v21);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation.YieldResult);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PhotogrammetrySession.Request(a2, (uint64_t)v5, type metadata accessor for PhotogrammetrySession.Output);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v19 = *(void *)(result + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_serialOutputQueue);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v9);
    uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v20 = v6;
    uint64_t v15 = (v14 + 24) & ~v14;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v13;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    aBlock[4] = partial apply for closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_210;
    unint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v23 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t v18 = v22;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v8, v18, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v3);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v20);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1, uint64_t a2)
{
  v24[0] = a2;
  uint64_t v3 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation.YieldResult);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_227DD2000, v12, v13, "Publishing processingComplete...", v14, 2u);
    MEMORY[0x22A696500](v14, -1, -1);
  }

  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = 0;
  v16[3] = 0;
  v16[4] = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:), (uint64_t)v16);
  swift_release();
  uint64_t v17 = swift_beginAccess();
  char v25 = 0;
  MEMORY[0x270FA5388](v17);
  v24[-2] = &v25;
  uint64_t v19 = v18 + 4;
  uint64_t v20 = v18 + 5;
  os_unfair_lock_lock(v18 + 5);
  closure #1 in Atomic.store(_:)specialized partial apply(v19);
  os_unfair_lock_unlock(v20);
  swift_endAccess();
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v22 = *(void (**)(uint64_t))(a1 + 24);
  if (v22)
  {
    uint64_t v23 = swift_retain();
    v22(v23);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v22);
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks);
  *(void *)(v0 + 24) = v1;
  swift_retain();
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OutputPublisherMonitor.Tasks.clear()();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

void closure #4 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_227DD2000, v1, v2, "Ending continuation...", v3, 2u);
    MEMORY[0x22A696500](v3, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  AsyncStream.Continuation.finish()();
}

uint64_t closure #5 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)logger);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_227DD2000, v1, v2, "onTermination() called. Stopping monitoring...", v3, 2u);
    MEMORY[0x22A696500](v3, -1, -1);
  }

  return OutputPublisherMonitor.stopMonitoring()();
}

uint64_t OutputPublisherMonitor.stopMonitoring()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 16))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  *(void *)(v0 + 16) = 0;
  swift_release();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_outputs;
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)v3, v5, &demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  return swift_endAccess();
}

uint64_t closure #1 in OutputPublisherMonitor.connectPublisher(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v28 = *(id *)(result + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_serialOutputQueue);
    swift_release();
    uint64_t v13 = type metadata accessor for PhotogrammetrySession.Output();
    uint64_t v29 = &v24;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = v14;
    char v25 = v7;
    uint64_t v16 = *(void *)(v14 + 64);
    __n128 v17 = MEMORY[0x270FA5388](v13);
    uint64_t v27 = v9;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13, v17);
    uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v26 = v8;
    uint64_t v19 = (v18 + 24) & ~v18;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a2;
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v20 + v19, (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
    aBlock[4] = partial apply for closure #1 in closure #1 in OutputPublisherMonitor.connectPublisher(_:);
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_204;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v30 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v22 = v25;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v23 = v28;
    MEMORY[0x22A689420](0, v11, v22, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v22, v4);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v26);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in OutputPublisherMonitor.connectPublisher(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = *(void (**)(uint64_t))(result + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onOutput);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v4);
    uint64_t result = swift_release();
    if (v4)
    {
      v4(a2);
      return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
    }
  }
  return result;
}

void OutputPublisherMonitor.publishOutputMessage(internalOutput:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySession.Request?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v132 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v132 - v6;
  uint64_t v8 = type metadata accessor for PhotogrammetrySession.Request(0);
  v140 = *(uint64_t **)(v8 - 8);
  v141 = (char *)v8;
  MEMORY[0x270FA5388](v8);
  v139 = (uint64_t *)((char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v132 - v11;
  uint64_t v142 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x270FA5388](v142);
  v143 = (uint64_t *)((char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for PhotogrammetrySession.Output();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __n128 v17 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (uint64_t *)((char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v15 + 16);
  v19(v18, a1, v14, v17);
  uint64_t v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 88))(v18, v14);
  if (MEMORY[0x263F36998] && v20 == *MEMORY[0x263F36998])
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    uint64_t v21 = (char *)v18
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Error))
                 + 48);
    uint64_t v22 = type metadata accessor for PhotogrammetrySession.Request();
    uint64_t v23 = *(void *)(v22 - 8);
    __n128 v24 = MEMORY[0x270FA5388](v22);
    uint64_t v26 = (char *)&v132 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v23 + 32))(v26, v18, v22, v24);
    uint64_t v27 = type metadata accessor for PhotogrammetrySession.Error();
    uint64_t v28 = *(void *)(v27 - 8);
    __n128 v29 = MEMORY[0x270FA5388](v27);
    uint64_t v31 = (char *)&v132 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t, __n128))(v28 + 32))(v31, v21, v27, v29);
    lazy protocol witness table accessor for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error();
    uint64_t v32 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v33, v31, v27);
    OutputPublisherMonitor.handleRequestError(internalRequest:error:)((uint64_t)v26, v32);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);

    return;
  }
  if (MEMORY[0x263F369B8] && v20 == *MEMORY[0x263F369B8])
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    uint64_t v34 = (char *)v18
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                 + 48);
    uint64_t v35 = type metadata accessor for PhotogrammetrySession.Request();
    uint64_t v36 = *(void *)(v35 - 8);
    __n128 v37 = MEMORY[0x270FA5388](v35);
    unint64_t v39 = (char *)&v132 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v36 + 32))(v39, v18, v35, v37);
    uint64_t v40 = type metadata accessor for PhotogrammetrySession.Result();
    uint64_t v41 = *(void *)(v40 - 8);
    __n128 v42 = MEMORY[0x270FA5388](v40);
    uint64_t v44 = (char *)&v132 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t, __n128))(v41 + 32))(v44, v34, v40, v42);
    OutputPublisherMonitor.handleRequestComplete(internalRequest:internalResult:)((uint64_t)v39, (uint64_t)v44);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v40);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    return;
  }
  if (MEMORY[0x263F369C0] && v20 == *MEMORY[0x263F369C0])
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    uint64_t v45 = *(uint64_t *)((char *)v18
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double))
                              + 48));
    uint64_t v46 = type metadata accessor for PhotogrammetrySession.Request();
    v139 = &v132;
    os_log_type_t v47 = *(char **)(v46 - 8);
    uint64_t v48 = *((void *)v47 + 8);
    __n128 v49 = MEMORY[0x270FA5388](v46);
    uint64_t v51 = v50;
    (*((void (**)(char *, uint64_t *, __n128))v47 + 4))((char *)&v132 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v49);
    if (swift_weakLoadStrong())
    {
      swift_retain();
      swift_release();
      PhotogrammetrySessionImpl.RequestMap.findRequest(for:)((uint64_t)&v132 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v7);
      uint64_t v52 = swift_release();
      uint64_t v53 = v140;
      uint64_t v54 = v141;
    }
    else
    {
      uint64_t v53 = v140;
      uint64_t v54 = v141;
      uint64_t v52 = ((uint64_t (*)(char *, uint64_t, uint64_t, char *))v140[7])(v7, 1, 1, v141);
    }
    v138 = v47;
    v140 = &v132;
    __n128 v93 = MEMORY[0x270FA5388](v52);
    unint64_t v137 = (v48 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v94 = (char *)&v132 - v137;
    uint64_t v95 = (void (*)(char *, char *, uint64_t, __n128))*((void *)v47 + 2);
    v141 = (char *)&v132 - v137;
    v95((char *)&v132 - v137, (char *)&v132 - v137, v51, v93);
    uint64_t v96 = ((uint64_t (*)(char *, uint64_t, char *))v53[6])(v7, 1, v54);
    if (v96 == 1)
    {
      __n128 v97 = MEMORY[0x270FA5388](v96);
      float32x4_t v98 = (char *)&v132 - v137;
      v95((char *)&v132 - v137, v94, v51, v97);
      PhotogrammetrySession.Request.init(_:)((uint64_t)v98, (uint64_t)v12);
      uint64_t v99 = (void (*)(char *, uint64_t))*((void *)v138 + 1);
      v99(v94, v51);
      outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for PhotogrammetrySession.Request?);
    }
    else
    {
      uint64_t v99 = (void (*)(char *, uint64_t))*((void *)v138 + 1);
      v99(v94, v51);
      outlined init with take of PhotogrammetrySession.Request((uint64_t)v7, (uint64_t)v12, type metadata accessor for PhotogrammetrySession.Request);
    }
    uint64_t v100 = v51;
    uint64_t v101 = *(void (**)(void *))((char *)v144
                                           + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
    if (v101)
    {
      uint64_t v102 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, fractionComplete: Double))
                    + 48);
      long long v103 = v143;
      outlined init with copy of PhotogrammetrySession.Request((uint64_t)v12, (uint64_t)v143, type metadata accessor for PhotogrammetrySession.Request);
      *(void *)((char *)v103 + v102) = v45;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      v101(v103);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v101);
      outlined destroy of PhotogrammetrySession.Request((uint64_t)v103, type metadata accessor for PhotogrammetrySession.Output);
    }
    outlined destroy of PhotogrammetrySession.Request((uint64_t)v12, type metadata accessor for PhotogrammetrySession.Request);
    v99(v141, v100);
    return;
  }
  if (MEMORY[0x263F369D8] && v20 == *MEMORY[0x263F369D8])
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, progress: PhotogrammetrySession.Output.ProgressInfo));
    uint64_t v55 = type metadata accessor for PhotogrammetrySession.Request();
    uint64_t v56 = *(void **)(v55 - 8);
    uint64_t v57 = v56[8];
    __n128 v58 = MEMORY[0x270FA5388](v55);
    char v59 = (void (*)(char *, uint64_t *, __n128))v56[4];
    unint64_t v137 = v60;
    v59((char *)&v132 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v58);
    uint64_t v61 = type metadata accessor for PhotogrammetrySession.Output.ProgressInfo();
    uint64_t v62 = *(void *)(v61 - 8);
    __n128 v63 = MEMORY[0x270FA5388](v61);
    uint64_t v132 = v64;
    uint64_t v65 = *(void (**)(__n128))(v62 + 32);
    v138 = (char *)&v132 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
    v65(v63);
    uint64_t Strong = swift_weakLoadStrong();
    v135 = &v132;
    v136 = &v132;
    uint64_t v133 = v62;
    uint64_t v134 = v61;
    if (Strong)
    {
      swift_retain();
      swift_release();
      PhotogrammetrySessionImpl.RequestMap.findRequest(for:)((uint64_t)&v132 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v4);
      uint64_t v67 = swift_release();
      uint64_t v68 = (char *)&v132 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v69 = v140;
      uint64_t v70 = v141;
    }
    else
    {
      uint64_t v68 = (char *)&v132 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v69 = v140;
      uint64_t v70 = v141;
      uint64_t v67 = ((uint64_t (*)(char *, uint64_t, uint64_t, char *))v140[7])(v4, 1, 1, v141);
    }
    v140 = &v132;
    __n128 v104 = MEMORY[0x270FA5388](v67);
    unint64_t v105 = (v57 + 15) & 0xFFFFFFFFFFFFFFF0;
    float32x4_t v106 = (char *)&v132 - v105;
    long long v107 = v56;
    uint64_t v108 = (void (*)(char *, char *, unint64_t, __n128))v56[2];
    v141 = v68;
    v109 = v68;
    unint64_t v110 = v137;
    v108((char *)&v132 - v105, v109, v137, v104);
    uint64_t v111 = ((uint64_t (*)(char *, uint64_t, char *))v69[6])(v4, 1, v70);
    if (v111 == 1)
    {
      __n128 v112 = MEMORY[0x270FA5388](v111);
      uint64_t v113 = (char *)&v132 - v105;
      v108((char *)&v132 - v105, (char *)&v132 - v105, v110, v112);
      uint64_t v114 = (uint64_t)v139;
      PhotogrammetrySession.Request.init(_:)((uint64_t)v113, (uint64_t)v139);
      uint64_t v115 = (void (*)(char *, unint64_t))v107[1];
      v115(v106, v110);
      uint64_t v116 = v114;
      outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for PhotogrammetrySession.Request?);
    }
    else
    {
      uint64_t v115 = (void (*)(char *, unint64_t))v107[1];
      v115((char *)&v132 - v105, v110);
      uint64_t v116 = (uint64_t)v139;
      outlined init with take of PhotogrammetrySession.Request((uint64_t)v4, (uint64_t)v139, type metadata accessor for PhotogrammetrySession.Request);
    }
    v117 = *(void (**)(void *))((char *)v144
                                           + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
    uint64_t v119 = v133;
    uint64_t v118 = v134;
    v120 = v138;
    if (v117)
    {
      uint64_t v121 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo))
                    + 48);
      v122 = v143;
      v144 = v107;
      uint64_t v123 = (uint64_t)v143 + v121;
      uint64_t v124 = outlined init with copy of PhotogrammetrySession.Request(v116, (uint64_t)v143, type metadata accessor for PhotogrammetrySession.Request);
      __n128 v125 = MEMORY[0x270FA5388](v124);
      v127 = v115;
      v128 = (char *)&v132 - ((v126 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, char *, uint64_t, __n128))(v119 + 16))(v128, v138, v118, v125);
      swift_retain();
      uint64_t v129 = (uint64_t)v128;
      uint64_t v115 = v127;
      PhotogrammetrySession.Output.ProgressInfo.init(_:)(v129, v123);
      swift_storeEnumTagMultiPayload();
      v117(v122);
      v120 = v138;
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v117);
      outlined destroy of PhotogrammetrySession.Request((uint64_t)v122, type metadata accessor for PhotogrammetrySession.Output);
    }
    outlined destroy of PhotogrammetrySession.Request(v116, type metadata accessor for PhotogrammetrySession.Request);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v118);
    v115(v141, v137);
  }
  else if (MEMORY[0x263F369A8] && v20 == *MEMORY[0x263F369A8])
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    uint64_t v71 = *v18;
    uint64_t v72 = v18[1];
    uint64_t v73 = v18[2];
    uint64_t v74 = swift_weakLoadStrong();
    if (v74)
    {
      unint64_t v75 = (void **)(v74 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_invalidSamples);
      swift_beginAccess();
      uint64_t v76 = *v75;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *unint64_t v75 = v76;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76[2] + 1, 1, v76);
        *unint64_t v75 = v76;
      }
      unint64_t v79 = v76[2];
      unint64_t v78 = v76[3];
      if (v79 >= v78 >> 1)
      {
        uint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v78 > 1), v79 + 1, 1, v76);
        *unint64_t v75 = v76;
      }
      v76[2] = v79 + 1;
      v76[v79 + 4] = v71;
      swift_endAccess();
      swift_release();
    }
    unint64_t v80 = *(void (**)(void *))((char *)v144
                                          + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
    if (v80)
    {
      uint64_t v81 = v143;
      void *v143 = v71;
      v81[1] = v72;
      v81[2] = v73;
      swift_storeEnumTagMultiPayload();
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v80);
      swift_bridgeObjectRetain();
      v80(v81);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v80);
      outlined destroy of PhotogrammetrySession.Request((uint64_t)v81, type metadata accessor for PhotogrammetrySession.Output);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!MEMORY[0x263F369B0] || v20 != *MEMORY[0x263F369B0])
    {
      if (MEMORY[0x263F369A0] && v20 == *MEMORY[0x263F369A0])
      {
        float32x4_t v91 = *(void (**)(void *))((char *)v144
                                              + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
        if (!v91) {
          return;
        }
        uint64_t v92 = v143;
      }
      else if (MEMORY[0x263F369E8] && v20 == *MEMORY[0x263F369E8])
      {
        float32x4_t v91 = *(void (**)(void *))((char *)v144
                                              + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
        if (!v91) {
          return;
        }
        uint64_t v92 = v143;
      }
      else
      {
        if (!MEMORY[0x263F369E0] || v20 != *MEMORY[0x263F369E0])
        {
          if (MEMORY[0x263F369C8] && v20 == *MEMORY[0x263F369C8])
          {
            OutputPublisherMonitor.handleProcessingComplete()();
          }
          else if (MEMORY[0x263F369D0] && v20 == *MEMORY[0x263F369D0])
          {
            OutputPublisherMonitor.handleProcessingCancelled()();
          }
          else
          {
            __n128 v130 = MEMORY[0x270FA5388](v20);
            v19((uint64_t *)((char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0)), a1, v14, v130);
            uint64_t v145 = 0;
            unint64_t v146 = 0xE000000000000000;
            _StringGuts.grow(_:)(48);
            v131._object = (void *)0x8000000228357560;
            v131._countAndFlagsBits = 0xD00000000000002ELL;
            String.append(_:)(v131);
            _print_unlocked<A, B>(_:_:)();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          return;
        }
        float32x4_t v91 = *(void (**)(void *))((char *)v144
                                              + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
        if (!v91) {
          return;
        }
        uint64_t v92 = v143;
      }
      swift_storeEnumTagMultiPayload();
      swift_retain();
      v91(v92);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v91);
      outlined destroy of PhotogrammetrySession.Request((uint64_t)v92, type metadata accessor for PhotogrammetrySession.Output);
      return;
    }
    (*(void (**)(char *, uint64_t))(v15 + 96))((char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
    uint64_t v82 = *v18;
    uint64_t v83 = swift_weakLoadStrong();
    if (v83)
    {
      uint64_t v84 = (void **)(v83 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_skippedSamples);
      swift_beginAccess();
      uint64_t v85 = *v84;
      char v86 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v84 = v85;
      if ((v86 & 1) == 0)
      {
        uint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85[2] + 1, 1, v85);
        *uint64_t v84 = v85;
      }
      unint64_t v88 = v85[2];
      unint64_t v87 = v85[3];
      if (v88 >= v87 >> 1)
      {
        uint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v87 > 1), v88 + 1, 1, v85);
        *uint64_t v84 = v85;
      }
      v85[2] = v88 + 1;
      v85[v88 + 4] = v82;
      swift_endAccess();
      swift_release();
    }
    os_log_t v89 = *(void (**)(void *))((char *)v144
                                          + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
    if (v89)
    {
      long long v90 = v143;
      void *v143 = v82;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      v89(v90);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v89);
      outlined destroy of PhotogrammetrySession.Request((uint64_t)v90, type metadata accessor for PhotogrammetrySession.Output);
    }
  }
}

uint64_t PhotogrammetrySession.Output.ProgressInfo.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = PhotogrammetrySession.Output.ProgressInfo.estimatedRemainingTime.getter();
  char v6 = v5;
  uint64_t v7 = type metadata accessor for PhotogrammetrySession.ProcessStage();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySession.ProcessStage?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  PhotogrammetrySession.Output.ProgressInfo.processStage.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
  {
    uint64_t v14 = type metadata accessor for PhotogrammetrySession.Output.ProgressInfo();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
    uint64_t result = outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for PhotogrammetrySession.ProcessStage?);
    char v16 = 6;
LABEL_22:
    *(void *)a2 = v4;
    *(unsigned char *)(a2 + 8) = v6 & 1;
    *(unsigned char *)(a2 + 9) = v16;
    return result;
  }
  uint64_t v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))((char *)&v21 - v10, v13, v7);
  __n128 v18 = MEMORY[0x270FA5388](v17);
  (*(void (**)(char *, char *, uint64_t, __n128))(v8 + 16))((char *)&v21 - v10, (char *)&v21 - v10, v7, v18);
  int v19 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))((char *)&v21 - v10, v7);
  if (MEMORY[0x263F36918] && v19 == *MEMORY[0x263F36918])
  {
    char v16 = 0;
LABEL_21:
    uint64_t v20 = type metadata accessor for PhotogrammetrySession.Output.ProgressInfo();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))((char *)&v21 - v10, v7);
    goto LABEL_22;
  }
  if (MEMORY[0x263F36920] && v19 == *MEMORY[0x263F36920])
  {
    char v16 = 1;
    goto LABEL_21;
  }
  if (MEMORY[0x263F36938] && v19 == *MEMORY[0x263F36938])
  {
    char v16 = 2;
    goto LABEL_21;
  }
  if (MEMORY[0x263F36928] && v19 == *MEMORY[0x263F36928])
  {
    char v16 = 3;
    goto LABEL_21;
  }
  if (MEMORY[0x263F36930] && v19 == *MEMORY[0x263F36930])
  {
    char v16 = 4;
    goto LABEL_21;
  }
  if (MEMORY[0x263F36910] && v19 == *MEMORY[0x263F36910])
  {
    char v16 = 5;
    goto LABEL_21;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t OutputPublisherMonitor.handleRequestError(internalRequest:error:)(uint64_t a1, void *a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v67 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v68 = *(void *)(v7 - 8);
  uint64_t v69 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v61 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v60 = (char *)&v59 - v10;
  uint64_t v62 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x270FA5388](v62);
  uint64_t v63 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySession.Request?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v73 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PhotogrammetrySession.Request(0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = v2;
  uint64_t v18 = v2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_session;
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v70 = a2;
  uint64_t v65 = v18;
  uint64_t v66 = v17;
  if (Strong)
  {
    swift_retain();
    swift_release();
    PhotogrammetrySessionImpl.RequestMap.findRequest(for:)(a1, v73);
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v73, 1, 1, v14);
  }
  uint64_t v20 = type metadata accessor for PhotogrammetrySession.Request();
  uint64_t v64 = &v59;
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  __n128 v23 = MEMORY[0x270FA5388](v20);
  unint64_t v24 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v25 = (char *)&v59 - v24;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16);
  uint64_t v71 = a1;
  v26((char *)&v59 - v24, a1, v20, v23);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v73, 1, v14);
  if (v27 == 1)
  {
    __n128 v28 = MEMORY[0x270FA5388](v27);
    __n128 v29 = (char *)&v59 - v24;
    v26(v29, (uint64_t)v25, v20, v28);
    uint64_t v30 = (uint64_t)v66;
    PhotogrammetrySession.Request.init(_:)((uint64_t)v29, (uint64_t)v66);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
    outlined destroy of BodyTrackingComponent?(v73, &demangling cache variable for type metadata for PhotogrammetrySession.Request?);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))((char *)&v59 - v24, v20);
    uint64_t v30 = (uint64_t)v66;
    outlined init with take of PhotogrammetrySession.Request(v73, (uint64_t)v66, type metadata accessor for PhotogrammetrySession.Request);
  }
  uint64_t v31 = *(void (**)(uint64_t))(v72
                                       + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  uint64_t v32 = v70;
  if (v31)
  {
    uint64_t v33 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                 + 48);
    uint64_t v34 = v63;
    outlined init with copy of PhotogrammetrySession.Request(v30, v63, type metadata accessor for PhotogrammetrySession.Request);
    *(void *)(v34 + v33) = v32;
    swift_storeEnumTagMultiPayload();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v31);
    id v35 = v32;
    v31(v34);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v31);
    outlined destroy of PhotogrammetrySession.Request(v34, type metadata accessor for PhotogrammetrySession.Output);
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)logger);
  id v37 = v32;
  id v38 = v32;
  unint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = v30;
    uint64_t v43 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 138543362;
    id v44 = v32;
    uint64_t v45 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v74 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v43 = v45;

    _os_log_impl(&dword_227DD2000, v39, v40, "requestError: %{public}@", v41, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v46 = v43;
    uint64_t v30 = v42;
    MEMORY[0x22A696500](v46, -1, -1);
    MEMORY[0x22A696500](v41, -1, -1);
  }
  else
  {
  }
  uint64_t v47 = v71;
  uint64_t v49 = v68;
  uint64_t v48 = v69;

  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    uint64_t v50 = v67;
    PhotogrammetrySessionImpl.RequestMap.getStartTimestamp(for:)(v47, v67);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v50, 1, v48) != 1)
    {
      uint64_t v51 = v60;
      (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v60, v50, v48);
      uint64_t v52 = v61;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v54 = v53;
      uint64_t v55 = *(void (**)(char *, uint64_t))(v49 + 8);
      v55(v52, v48);
      v55(v51, v48);
      char v56 = 0;
      uint64_t v57 = v54;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v50 = v67;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v67, 1, 1, v48);
  }
  outlined destroy of BodyTrackingComponent?(v50, &demangling cache variable for type metadata for Date?);
  uint64_t v57 = 0;
  char v56 = 1;
LABEL_19:
  OutputPublisherMonitor.sendAnalyticsForRequest(request:success:error:requestTime:)(v30, 0, v32, v57, v56);
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    PhotogrammetrySessionImpl.RequestMap.removeRequest(internalRequest:)(v47);
    swift_release();
  }
  return outlined destroy of PhotogrammetrySession.Request(v30, type metadata accessor for PhotogrammetrySession.Request);
}

uint64_t OutputPublisherMonitor.handleRequestComplete(internalRequest:internalResult:)(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a2;
  uint64_t v98 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v84 = (char *)v80 - v11;
  uint64_t v87 = type metadata accessor for PhotogrammetrySession.Output(0);
  MEMORY[0x270FA5388](v87);
  uint64_t v88 = (uint64_t)v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PhotogrammetrySession.Result(0);
  MEMORY[0x270FA5388](v13 - 8);
  __n128 v97 = (char *)v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v82 = *(void *)(v15 - 8);
  uint64_t v83 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v81 = (char *)v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySession.Request?);
  MEMORY[0x270FA5388](v17 - 8);
  int v19 = (char *)v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for PhotogrammetrySession.Request(0);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v90 = (uint64_t)v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)v80 - v24;
  uint64_t v92 = v2 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_session;
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v95 = v6;
  uint64_t v96 = v2;
  __n128 v93 = v5;
  uint64_t v94 = v7;
  uint64_t v85 = v9;
  uint64_t v99 = v25;
  if (Strong)
  {
    swift_retain();
    swift_release();
    uint64_t v27 = v98;
    PhotogrammetrySessionImpl.RequestMap.findRequest(for:)(v98, (uint64_t)v19);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    uint64_t v27 = v98;
  }
  uint64_t v28 = type metadata accessor for PhotogrammetrySession.Request();
  float32x4_t v91 = v80;
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(void *)(v29 + 64);
  __n128 v31 = MEMORY[0x270FA5388](v28);
  unint64_t v32 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v33 = v27;
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16);
  v34((char *)v80 - v32, v33, v28, v31);
  uint64_t v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  char v86 = v34;
  if (v35 == 1)
  {
    v80[1] = v80;
    __n128 v36 = MEMORY[0x270FA5388](v35);
    v34((char *)v80 - v32, (uint64_t)v80 - v32, v28, v36);
    uint64_t v37 = (uint64_t)v99;
    PhotogrammetrySession.Request.init(_:)((uint64_t)v80 - v32, (uint64_t)v99);
    id v38 = *(void (**)(char *, uint64_t))(v29 + 8);
    v38((char *)v80 - v32, v28);
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for PhotogrammetrySession.Request?);
  }
  else
  {
    id v38 = *(void (**)(char *, uint64_t))(v29 + 8);
    v38((char *)v80 - v32, v28);
    uint64_t v37 = (uint64_t)v99;
    outlined init with take of PhotogrammetrySession.Request((uint64_t)v19, (uint64_t)v99, type metadata accessor for PhotogrammetrySession.Request);
  }
  uint64_t v39 = (uint64_t)v97;
  uint64_t v40 = v90;
  uint64_t v41 = (void (*)(char *, char *, uint64_t))v37;
  outlined init with copy of PhotogrammetrySession.Request(v37, v90, type metadata accessor for PhotogrammetrySession.Request);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    __n128 v43 = MEMORY[0x270FA5388](EnumCaseMultiPayload);
    id v44 = (char *)v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v45 = v98;
    v86(v44, v98, v28, v43);
    int v46 = (*(uint64_t (**)(char *, uint64_t))(v29 + 88))(v44, v28);
    if (MEMORY[0x263F36A30] && v46 == *MEMORY[0x263F36A30])
    {
      (*(void (**)(char *, uint64_t))(v29 + 96))((char *)v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0), v28);
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?));
      uint64_t v48 = &v44[*(int *)(v47 + 48)];
      uint64_t v49 = (uint64_t)&v44[*(int *)(v47 + 64)];
      uint64_t v51 = (uint64_t)v81;
      uint64_t v50 = v82;
      uint64_t v52 = v44;
      uint64_t v53 = v83;
      (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v81, v52, v83);
      outlined destroy of BodyTrackingComponent?(v49, &demangling cache variable for type metadata for PhotogrammetrySession.Request.Geometry?);
      uint64_t v54 = type metadata accessor for PhotogrammetrySession.Request.Detail();
      (*(void (**)(char *, uint64_t))(*(void *)(v54 - 8) + 8))(v48, v54);
      OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(v51, v41);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v51, v53);
      uint64_t v56 = v94;
      uint64_t v55 = v95;
      uint64_t v57 = (uint64_t)v93;
      goto LABEL_17;
    }
    v38((char *)v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0), v28);
    uint64_t v55 = v95;
    uint64_t v58 = v96;
    uint64_t v57 = (uint64_t)v93;
    uint64_t v56 = v94;
    uint64_t v39 = (uint64_t)v97;
  }
  else
  {
    outlined destroy of PhotogrammetrySession.Request(v40, type metadata accessor for PhotogrammetrySession.Request);
    uint64_t v55 = v95;
    uint64_t v58 = v96;
    uint64_t v57 = (uint64_t)v93;
    uint64_t v56 = v94;
  }
  uint64_t v59 = swift_weakLoadStrong();
  uint64_t v60 = type metadata accessor for PhotogrammetrySession.Result();
  __n128 v61 = MEMORY[0x270FA5388](v60);
  uint64_t v63 = (char *)v80 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v64 + 16))(v63, v89, v61);
  PhotogrammetrySession.Result.init(session:internalResult:)(v59, (uint64_t)v63, v39);
  uint64_t v65 = *(void (**)(uint64_t))(v58
                                       + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  if (v65)
  {
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result));
    uint64_t v67 = v39;
    uint64_t v68 = v88;
    uint64_t v69 = v88 + *(int *)(v66 + 48);
    outlined init with copy of PhotogrammetrySession.Request((uint64_t)v99, v88, type metadata accessor for PhotogrammetrySession.Request);
    outlined init with copy of PhotogrammetrySession.Request(v67, v69, type metadata accessor for PhotogrammetrySession.Result);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    v65(v68);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v65);
    outlined destroy of PhotogrammetrySession.Request(v68, type metadata accessor for PhotogrammetrySession.Output);
    uint64_t v70 = v67;
  }
  else
  {
    uint64_t v70 = v39;
  }
  outlined destroy of PhotogrammetrySession.Request(v70, type metadata accessor for PhotogrammetrySession.Result);
  uint64_t v45 = v98;
LABEL_17:
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    PhotogrammetrySessionImpl.RequestMap.getStartTimestamp(for:)(v45, v57);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v57, 1, v55) != 1)
    {
      uint64_t v71 = v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v84, v57, v55);
      uint64_t v72 = v85;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v74 = v73;
      unint64_t v75 = *(void (**)(char *, uint64_t))(v56 + 8);
      v75(v72, v55);
      v75(v71, v55);
      char v76 = 0;
      uint64_t v77 = v74;
      goto LABEL_22;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v57, 1, 1, v55);
  }
  outlined destroy of BodyTrackingComponent?(v57, &demangling cache variable for type metadata for Date?);
  uint64_t v77 = 0;
  char v76 = 1;
LABEL_22:
  uint64_t v78 = (uint64_t)v99;
  OutputPublisherMonitor.sendAnalyticsForRequest(request:success:error:requestTime:)((uint64_t)v99, 1, 0, v77, v76);
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    PhotogrammetrySessionImpl.RequestMap.removeRequest(internalRequest:)(v45);
    swift_release();
  }
  return outlined destroy of PhotogrammetrySession.Request(v78, type metadata accessor for PhotogrammetrySession.Request);
}

uint64_t PhotogrammetrySession.Result.init(session:internalResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for PhotogrammetrySession.Result(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (_OWORD *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for PhotogrammetrySession.Result();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a2, v9, v11);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v13, v9);
  if (MEMORY[0x263F36A08] && v14 == *MEMORY[0x263F36A08])
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v15 - 8) + 32))(a3, v13, v15);
    return swift_storeEnumTagMultiPayload();
  }
  else if (MEMORY[0x263F36A00] && v14 == *MEMORY[0x263F36A00])
  {
    (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
    computeOrientedBoundingBox(for:)(&v42);
    long long v38 = v43;
    long long v39 = v44;
    simd_matrix4x4(v42);
    REAABBTransform();
    long long v38 = v18;
    long long v39 = v17;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    *uint64_t v8 = v39;
    v8[1] = v38;
    swift_storeEnumTagMultiPayload();
    return outlined init with take of PhotogrammetrySession.Request((uint64_t)v8, a3, type metadata accessor for PhotogrammetrySession.Result);
  }
  else
  {
    uint64_t v40 = a2;
    uint64_t v41 = v6;
    if (MEMORY[0x263F369F0] && v14 == *MEMORY[0x263F369F0])
    {
      (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
      uint64_t v19 = type metadata accessor for PhotogrammetrySession.PointCloud();
      *(void *)&long long v39 = &v36;
      uint64_t v37 = v19;
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v21 = *(void *)(v20 + 64);
      __n128 v22 = MEMORY[0x270FA5388](v19);
      uint64_t v23 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v24 = (*(uint64_t (**)(char *, char *, __n128))(v20 + 32))(v23, v13, v22);
      *(void *)&long long v38 = &v36;
      __n128 v25 = MEMORY[0x270FA5388](v24);
      uint64_t v26 = v37;
      (*(void (**)(char *, char *, uint64_t, __n128))(v20 + 16))(v23, v23, v37, v25);
      PhotogrammetrySession.PointCloud.init(_:)((uint64_t)v23, &v42);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v40, v9);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v26);
      *(void *)uint64_t v8 = v42.i64[0];
      swift_storeEnumTagMultiPayload();
      return outlined init with take of PhotogrammetrySession.Request((uint64_t)v8, a3, type metadata accessor for PhotogrammetrySession.Result);
    }
    else
    {
      *(void *)&long long v39 = a3;
      if (MEMORY[0x263F369F8] && v14 == *MEMORY[0x263F369F8])
      {
        (*(void (**)(char *, uint64_t))(v10 + 96))(v13, v9);
        uint64_t v27 = type metadata accessor for PhotogrammetrySession.Poses();
        *(void *)&long long v38 = &v36;
        uint64_t v28 = *(void *)(v27 - 8);
        uint64_t v29 = *(void *)(v28 + 64);
        __n128 v30 = MEMORY[0x270FA5388](v27);
        unint64_t v31 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t, __n128))(v28 + 32))((char *)&v36 - v31, v13, v27, v30);
        __n128 v33 = MEMORY[0x270FA5388](v32);
        (*(void (**)(char *, char *, uint64_t, __n128))(v28 + 16))((char *)&v36 - v31, (char *)&v36 - v31, v27, v33);
        PhotogrammetrySession.Poses.init(poses:)((uint64_t)&v36 - v31, (unint64_t *)&v42);
        if (a1)
        {
          swift_retain();
          PhotogrammetrySessionImpl.addImageMappingDictionary(into:)((uint64_t)&v42);
          swift_release_n();
        }
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v40, v9);
        (*(void (**)(char *, uint64_t))(v28 + 8))((char *)&v36 - v31, v27);
        uint64_t v34 = v43;
        uint64_t v35 = v39;
        *(float32x4_t *)long long v39 = v42;
        *(void *)(v35 + 16) = v34;
        return swift_storeEnumTagMultiPayload();
      }
      else
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(uint64_t a1, void (*a2)(char *, char *, uint64_t))
{
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  uint64_t v2 = type metadata accessor for PhotogrammetrySession.Request(0);
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v47 = *(void *)(v50 + 64);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v53 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v38 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = v6;
  uint64_t v8 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v39 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v9 - 8);
  __n128 v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v40 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x270FA5388](v12);
  uint64_t v41 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v14;
  MEMORY[0x270FA5388](v15);
  long long v17 = (char *)&v37 - v16;
  uint64_t v54 = (char *)&v37 - v16;
  UUID.init()();
  uint64_t v45 = type metadata accessor for TaskPriority();
  uint64_t v18 = *(void *)(v45 - 8);
  long long v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v46 = v18 + 56;
  v44(v11, 1, 1, v45);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v48, v4);
  outlined init with copy of PhotogrammetrySession.Request((uint64_t)v49, v53, type metadata accessor for PhotogrammetrySession.Request);
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v49((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v17, v12);
  unint64_t v19 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v20 = (v7 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (*(unsigned __int8 *)(v50 + 80) + v20 + 8) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  uint64_t v22 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v23 = v13;
  uint64_t v43 = v13;
  unint64_t v24 = (v47 + v22 + v21) & ~v22;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = 0;
  *(void *)(v25 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v25 + v19, v39, v38);
  uint64_t v26 = v51;
  *(void *)(v25 + v20) = v51;
  outlined init with take of PhotogrammetrySession.Request(v53, v25 + v21, type metadata accessor for PhotogrammetrySession.Request);
  unint64_t v27 = v25 + v24;
  uint64_t v28 = *(void (**)(unint64_t, char *, uint64_t))(v23 + 32);
  uint64_t v29 = v40;
  __n128 v30 = v41;
  v28(v27, v41, v40);
  swift_retain();
  uint64_t v31 = (uint64_t)v52;
  uint64_t v32 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v52, (uint64_t)&async function pointer to partial apply for closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), v25);
  v44((char *)v31, 1, 1, v45);
  v49(v30, v54, v29);
  uint64_t v33 = (v22 + 40) & ~v22;
  unint64_t v34 = (v42 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = (void *)swift_allocObject();
  v35[2] = 0;
  v35[3] = 0;
  v35[4] = v26;
  v28((unint64_t)v35 + v33, v30, v29);
  *(void *)((char *)v35 + v34) = v32;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v52, (uint64_t)&async function pointer to partial apply for closure #2 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), (uint64_t)v35);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v54, v29);
}

uint64_t closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  v7[14] = type metadata accessor for PhotogrammetrySession.Output(0);
  v7[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL();
  v7[16] = v8;
  v7[17] = *(void *)(v8 - 8);
  v7[18] = swift_task_alloc();
  v7[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), 0, 0);
}

uint64_t closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)()
{
  uint64_t v25 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v5 = type metadata accessor for Logger();
  v0[20] = __swift_project_value_buffer(v5, (uint64_t)logger);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[19];
  uint64_t v12 = v0[16];
  uint64_t v11 = v0[17];
  if (v9)
  {
    os_log_type_t type = v8;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = v23;
    *(_DWORD *)uint64_t v13 = 141558274;
    v0[8] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl(&dword_227DD2000, v7, type, "Loading model from url: %{mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v23, -1, -1);
    MEMORY[0x22A696500](v13, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[19], v0[16]);
  }

  uint64_t v16 = v0[18];
  uint64_t v17 = v0[16];
  uint64_t v18 = v0[10];
  type metadata accessor for ModelEntity();
  v6(v16, v18, v17);
  unint64_t v19 = (void *)swift_task_alloc();
  v0[21] = v19;
  *unint64_t v19 = v0;
  v19[1] = closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:);
  uint64_t v20 = v0[18];
  return Entity.init(contentsOf:withName:)(v20, 0, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_227DD2000, v1, v2, "The model is successfully loaded!", v3, 2u);
    MEMORY[0x22A696500](v3, -1, -1);
  }

  if ((static Task<>.isCancelled.getter() & 1) == 0)
  {
    uint64_t v7 = *(void (**)(uint64_t))(v0[11]
                                        + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
    os_log_type_t v8 = v0[22];
    if (v7)
    {
      BOOL v9 = v0[15];
      uint64_t v10 = v0[12];
      uint64_t v11 = (void *)(v9
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                              + 48));
      outlined init with copy of PhotogrammetrySession.Request(v10, v9, type metadata accessor for PhotogrammetrySession.Request);
      *uint64_t v11 = v8;
      type metadata accessor for PhotogrammetrySession.Result(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v7);
      swift_retain();
      v7(v9);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);
      swift_release();
      outlined destroy of PhotogrammetrySession.Request(v9, type metadata accessor for PhotogrammetrySession.Output);
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_227DD2000, v4, v5, "Task for model loading was canceled!", v6, 2u);
    MEMORY[0x22A696500](v6, -1, -1);

LABEL_8:
    swift_release();
    goto LABEL_10;
  }
  swift_release();

LABEL_10:
  uint64_t v12 = v0[11];
  uint64_t v13 = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks;
  v0[24] = v0[23];
  v0[25] = v13;
  uint64_t v14 = *(void *)(v12 + v13);
  v0[26] = v14;
  swift_retain();
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), v14, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  OutputPublisherMonitor.Tasks.removeTask(ID:)(*(void *)(v0 + 104));
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 216);
  swift_beginAccess();
  *(void *)(v0 + 224) = *(void *)(*(void *)(v1 + 112) + 16);
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  if (!v0[28])
  {
    uint64_t v1 = *(void (**)(uint64_t))(v0[11]
                                        + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete);
    if (v1)
    {
      uint64_t v2 = swift_retain();
      v1(v2);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v1);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  void *v4;
  uint8_t *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if ((static Task<>.isCancelled.getter() & 1) == 0)
  {
    uint64_t v6 = *(void (**)(uint64_t))(v0[11]
                                        + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
    uint64_t v4 = (void *)v0[23];
    if (v6)
    {
      uint64_t v7 = v0[15];
      os_log_type_t v8 = v0[12];
      BOOL v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                  + 48);
      outlined init with copy of PhotogrammetrySession.Request(v8, v7, type metadata accessor for PhotogrammetrySession.Request);
      *(void *)(v7 + v9) = v4;
      swift_storeEnumTagMultiPayload();
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v6);
      uint64_t v10 = v4;
      v6(v7);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v6);

      outlined destroy of PhotogrammetrySession.Request(v7, type metadata accessor for PhotogrammetrySession.Output);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  uint64_t v3 = os_log_type_enabled(v1, v2);
  uint64_t v4 = (void *)v0[23];
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_227DD2000, v1, v2, "Task for model loading was canceled!", v5, 2u);
    MEMORY[0x22A696500](v5, -1, -1);

LABEL_6:
    goto LABEL_8;
  }

LABEL_8:
  uint64_t v11 = v0[11];
  uint64_t v12 = OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks;
  v0[24] = 0;
  v0[25] = v12;
  uint64_t v13 = *(void *)(v11 + v12);
  v0[26] = v13;
  swift_retain();
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), v13, 0);
}

uint64_t closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:);
  }
  else {
    uint64_t v4 = closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:);
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

void closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)()
{
  BOOL v9 = v0;
  uint64_t v1 = v0[24];
  uint64_t v2 = (os_unfair_lock_s **)(v0[11]
                           + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor__internalProcessingCompleteReceived);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 4;
  swift_retain();
  os_unfair_lock_lock(v3 + 5);
  protocol witness for static Component.__load(from:) in conformance ReverbComponent(v4, v8);
  os_unfair_lock_unlock(v3 + 5);
  if (!v1)
  {
    char v5 = v8[0];
    swift_release();
    if (v5)
    {
      uint64_t v6 = *(void *)(v0[11] + v0[25]);
      v0[27] = v6;
      swift_retain();
      MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), v6, 0);
    }
    else
    {
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v7 = (void (*)(void))v0[1];
      v7();
    }
  }
}

uint64_t closure #2 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return MEMORY[0x270FA2498](closure #2 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), 0, 0);
}

uint64_t closure #2 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks);
  *(void *)(v0 + 40) = v1;
  swift_retain();
  return MEMORY[0x270FA2498](closure #2 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), v1, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  OutputPublisherMonitor.Tasks.addTask(ID:task:)(v0[3], v0[4]);
  swift_release();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t OutputPublisherMonitor.handleProcessingComplete()()
{
  return OutputPublisherMonitor.handleProcessingComplete()((uint64_t)&unk_26DCA0220, (uint64_t)&unk_26DCA0248, (uint64_t)&async function pointer to partial apply for closure #1 in OutputPublisherMonitor.handleProcessingComplete());
}

uint64_t closure #1 in OutputPublisherMonitor.handleProcessingComplete()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 64) = a4;
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleProcessingComplete(), 0, 0);
}

uint64_t closure #1 in OutputPublisherMonitor.handleProcessingComplete()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[9] = __swift_project_value_buffer(v1, (uint64_t)logger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_227DD2000, v2, v3, "Got processingComplete from the internal publisher...", v4, 2u);
    MEMORY[0x22A696500](v4, -1, -1);
  }
  uint64_t v5 = v0[8];

  uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks);
  v0[10] = v6;
  swift_retain();
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleProcessingComplete(), v6, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 80);
  swift_beginAccess();
  *(void *)(v0 + 88) = *(void *)(*(void *)(v1 + 112) + 16);
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleProcessingComplete(), 0, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  os_unfair_lock_s **v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  if (*(void *)(v0 + 88))
  {
    uint64_t v1 = Logger.logObject.getter();
    uint64_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v3 = 0;
      _os_log_impl(&dword_227DD2000, v1, v2, "Waiting for internal tasks to finish...", v3, 2u);
      MEMORY[0x22A696500](v3, -1, -1);
    }
    uint64_t v4 = *(void *)(v0 + 64);

    uint64_t v5 = (os_unfair_lock_s **)(v4
                             + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor__internalProcessingCompleteReceived);
    swift_beginAccess();
    *(unsigned char *)(v0 + 96) = 1;
    uint64_t v6 = *v5;
    *(void *)(swift_task_alloc() + 16) = v0 + 96;
    uint64_t v7 = v6 + 4;
    v6 += 5;
    os_unfair_lock_lock(v6);
    partial apply for specialized closure #1 in Atomic.store(_:)(v7);
    os_unfair_lock_unlock(v6);
    swift_task_dealloc();
    swift_endAccess();
  }
  else
  {
    uint64_t v8 = *(void (**)(uint64_t))(*(void *)(v0 + 64)
                                        + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete);
    if (v8)
    {
      BOOL v9 = swift_retain();
      v8(v9);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v8);
    }
  }
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t OutputPublisherMonitor.handleProcessingCancelled()()
{
  return OutputPublisherMonitor.handleProcessingComplete()((uint64_t)&unk_26DCA01A8, (uint64_t)&unk_26DCA01D0, (uint64_t)&async function pointer to partial apply for closure #1 in OutputPublisherMonitor.handleProcessingCancelled());
}

uint64_t OutputPublisherMonitor.handleProcessingComplete()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v5;
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  swift_retain();
  if (v12 == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (v11[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v15;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = v11;
  if (v14 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    _OWORD v18[2] = v13;
    v18[3] = v14;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in OutputPublisherMonitor.handleProcessingCancelled()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = type metadata accessor for PhotogrammetrySession.Output(0);
  v4[4] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleProcessingCancelled(), 0, 0);
}

uint64_t closure #1 in OutputPublisherMonitor.handleProcessingCancelled()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)logger);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_227DD2000, v2, v3, "Got processingCancelled from the internal publisher...", v4, 2u);
    MEMORY[0x22A696500](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 16);

  uint64_t v6 = *(void *)(v5 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_tasks);
  *(void *)(v0 + 40) = v6;
  swift_retain();
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleProcessingCancelled(), v6, 0);
}

{
  uint64_t v1;

  OutputPublisherMonitor.Tasks.clear()();
  swift_release();
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleProcessingCancelled(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[2];
  uint64_t v2 = *(void (**)(uint64_t))(v1
                                      + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage);
  if (v2)
  {
    os_log_type_t v3 = v0[4];
    swift_storeEnumTagMultiPayload();
    swift_retain();
    v2(v3);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v2);
    outlined destroy of PhotogrammetrySession.Request(v3, type metadata accessor for PhotogrammetrySession.Output);
    uint64_t v1 = v0[2];
  }
  uint64_t v4 = *(void (**)(uint64_t))(v1 + 40);
  if (v4)
  {
    uint64_t v5 = swift_retain();
    v4(v5);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
  }
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

void OutputPublisherMonitor.sendAnalyticsForRequest(request:success:error:requestTime:)(uint64_t a1, char a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = (int *)type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent(0);
  MEMORY[0x270FA5388](v10);
  int v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PhotogrammetrySession.Request(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PhotogrammetrySession.Request(a1, (uint64_t)v15, type metadata accessor for PhotogrammetrySession.Request);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of PhotogrammetrySession.Request((uint64_t)v15, type metadata accessor for PhotogrammetrySession.Request);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)logger);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v19 = 0;
      _os_log_impl(&dword_227DD2000, v17, v18, "Not logging the Request to analytics since not .modelFile.", v19, 2u);
      MEMORY[0x22A696500](v19, -1, -1);
    }
  }
  else
  {
    uint64_t v20 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v15, v20);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)logger);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = a3;
      char v25 = a2;
      uint64_t v26 = v24;
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_227DD2000, v22, v23, "Logging the .modelFile Request analytics...", v24, 2u);
      unint64_t v27 = v26;
      a2 = v25;
      a3 = v31;
      MEMORY[0x22A696500](v27, -1, -1);
    }

    if (a5) {
      double v28 = -1.0;
    }
    else {
      double v28 = *(double *)&a4;
    }
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    OutputPublisherMonitor.sessionID.getter((uint64_t)v12);
    outlined init with copy of PhotogrammetrySession.Request(a1, (uint64_t)&v12[v10[5]], type metadata accessor for PhotogrammetrySession.Request);
    v12[v10[7]] = a2 & 1;
    *(void *)&v12[v10[8]] = a3;
    *(double *)&v12[v10[9]] = v28;
    id v29 = a3;
    specialized AnalyticsManager.sendPhotogrammetrySessionReconstructionResultEvent(event:)((uint64_t)v12);
    outlined destroy of PhotogrammetrySession.Request((uint64_t)v12, type metadata accessor for AnalyticsManager.PhotogrammetrySessionReconstructionResultEvent);
  }
}

uint64_t OutputPublisherMonitor.Tasks.addTask(ID:task:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v29 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  double v28 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v24 - v9;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)logger);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v27 = a1;
  v26(v10, a1, v5);
  int v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v31[0] = v25;
    uint64_t v24 = v14;
    *(_DWORD *)uint64_t v14 = 136446210;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v17(v10, v5);
    os_log_type_t v18 = v24;
    _os_log_impl(&dword_227DD2000, v12, v13, "Adding a task: %{public}s", v24, 0xCu);
    uint64_t v19 = v25;
    swift_arrayDestroy();
    MEMORY[0x22A696500](v19, -1, -1);
    MEMORY[0x22A696500](v18, -1, -1);
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v17(v10, v5);
  }

  uint64_t v20 = (uint64_t)v28;
  v26(v28, v27, v5);
  swift_beginAccess();
  uint64_t v21 = v29;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v30 = *(void *)(v3 + 112);
  *(void *)(v3 + 112) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, v20, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 112) = v30;
  swift_bridgeObjectRelease();
  v17((char *)v20, v5);
  return swift_endAccess();
}

uint64_t OutputPublisherMonitor.Tasks.removeTask(ID:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = v1;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v12 = swift_slowAlloc();
    v19[0] = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    uint64_t v17 = a1;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v19);
    a1 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _os_log_impl(&dword_227DD2000, v8, v9, "Removing a task: %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v12, -1, -1);
    MEMORY[0x22A696500](v11, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a1);
  swift_endAccess();
  return swift_release();
}

uint64_t OutputPublisherMonitor.Tasks.clear()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Task<(), Never>)?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v34 - v6;
  if (one-time initialization token for logger == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)logger);
    swift_retain_n();
    os_log_type_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v40[0] = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      swift_beginAccess();
      uint64_t v39 = *(void *)(*(void *)(v1 + 112) + 16);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v9, v10, "Clearing tasks - number of scheduled tasks: %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v12, -1, -1);
      MEMORY[0x22A696500](v11, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v36 = (void *)(v1 + 112);
    swift_beginAccess();
    uint64_t v1 = *(void *)(v1 + 112);
    uint64_t v15 = *(void *)(v1 + 64);
    uint64_t v37 = v1 + 64;
    uint64_t v16 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v17 = -1;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    unint64_t v18 = v17 & v15;
    int64_t v38 = (unint64_t)(v16 + 63) >> 6;
    int64_t v35 = v38 - 1;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v20 = 0;
    uint64_t v21 = MEMORY[0x263F8EE60] + 8;
    if (v18)
    {
      while (1)
      {
        unint64_t v23 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        unint64_t v24 = v23 | (v20 << 6);
LABEL_11:
        uint64_t v25 = *(void *)(v1 + 48);
        uint64_t v26 = type metadata accessor for UUID();
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v4, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v24, v26);
        uint64_t v27 = *(void *)(v1 + 56);
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Task<(), Never>));
        *(void *)&v4[*(int *)(v28 + 48)] = *(void *)(v27 + 8 * v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v4, 0, 1, v28);
        swift_retain();
LABEL_30:
        outlined init with take of Transform?((uint64_t)v4, (uint64_t)v7, &demangling cache variable for type metadata for (key: UUID, value: Task<(), Never>)?);
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Task<(), Never>));
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v7, 1, v33) == 1) {
          break;
        }
        MEMORY[0x22A6890D0](*(void *)&v7[*(int *)(v33 + 48)], v21, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
        swift_release();
        uint64_t v22 = type metadata accessor for UUID();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v7, v22);
        if (!v18) {
          goto LABEL_12;
        }
      }
      swift_release();
      void *v36 = MEMORY[0x263F8EE80];
      return swift_bridgeObjectRelease();
    }
LABEL_12:
    int64_t v29 = v20 + 1;
    if (!__OFADD__(v20, 1)) {
      break;
    }
    __break(1u);
  }
  if (v29 >= v38) {
    goto LABEL_29;
  }
  unint64_t v30 = *(void *)(v37 + 8 * v29);
  if (v30)
  {
LABEL_15:
    unint64_t v18 = (v30 - 1) & v30;
    unint64_t v24 = __clz(__rbit64(v30)) + (v29 << 6);
    int64_t v20 = v29;
    goto LABEL_11;
  }
  int64_t v31 = v20 + 2;
  ++v20;
  if (v29 + 1 >= v38) {
    goto LABEL_29;
  }
  unint64_t v30 = *(void *)(v37 + 8 * v31);
  if (v30)
  {
LABEL_18:
    int64_t v29 = v31;
    goto LABEL_15;
  }
  int64_t v20 = v29 + 1;
  if (v29 + 2 >= v38) {
    goto LABEL_29;
  }
  unint64_t v30 = *(void *)(v37 + 8 * (v29 + 2));
  if (v30)
  {
    v29 += 2;
    goto LABEL_15;
  }
  int64_t v31 = v29 + 3;
  int64_t v20 = v29 + 2;
  if (v29 + 3 >= v38)
  {
LABEL_29:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Task<(), Never>));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v4, 1, 1, v32);
    unint64_t v18 = 0;
    goto LABEL_30;
  }
  unint64_t v30 = *(void *)(v37 + 8 * v31);
  if (v30) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v29 >= v38)
    {
      int64_t v20 = v35;
      goto LABEL_29;
    }
    unint64_t v30 = *(void *)(v37 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t OutputPublisherMonitor.Tasks.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return MEMORY[0x270FA2418](v0);
}

uint64_t *OutputPublisherMonitor.deinit()
{
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v0[3]);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v0[5]);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v0[7]);
  outlined destroy of BodyTrackingComponent?((uint64_t)v0 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_outputs, &demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
  swift_weakDestroy();
  outlined destroy of BodyTrackingComponent?((uint64_t)v0 + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor____lazy_storage___sessionID, &demangling cache variable for type metadata for UUID?);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(uint64_t *)((char *)v0
                                                                          + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onOutput));

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(uint64_t *)((char *)v0
                                                                          + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onPublishOutputMessage));
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(uint64_t *)((char *)v0
                                                                          + OBJC_IVAR____TtC17RealityFoundation22OutputPublisherMonitor_onInternalProcessingComplete));
  swift_release();
  return v0;
}

uint64_t OutputPublisherMonitor.__deallocating_deinit()
{
  OutputPublisherMonitor.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for OutputPublisherMonitor()
{
  return type metadata accessor for OutputPublisherMonitor(0);
}

uint64_t type metadata accessor for OutputPublisherMonitor(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for OutputPublisherMonitor);
}

void type metadata completion function for OutputPublisherMonitor()
{
  type metadata accessor for AsyncStream<PhotogrammetrySession.Output>?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void type metadata accessor for AsyncStream<PhotogrammetrySession.Output>?()
{
  if (!lazy cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>?);
    }
  }
}

uint64_t type metadata accessor for OutputPublisherMonitor.Tasks()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhotogrammetrySessionImpl.RequestMap.Entry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                   + 64);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      long long v13 = *((_OWORD *)v12 + 5);
      *((_OWORD *)v11 + 4) = *((_OWORD *)v12 + 4);
      *((_OWORD *)v11 + 5) = v13;
      v11[96] = v12[96];
      long long v14 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v14;
      long long v15 = *((_OWORD *)v12 + 3);
      *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
      *((_OWORD *)v11 + 3) = v15;
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v16 = *(int *)(a3 + 20);
    uint64_t v17 = (char *)a1 + v16;
    unint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for PhotogrammetrySession.Request();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    uint64_t v20 = *(int *)(a3 + 24);
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return a1;
}

uint64_t destroy for PhotogrammetrySessionImpl.RequestMap.Entry(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PhotogrammetrySession.Request(0);
  if (!swift_getEnumCaseMultiPayload())
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);

  return v9(v7, v8);
}

char *initializeWithCopy for PhotogrammetrySessionImpl.RequestMap.Entry(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                + 64);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    long long v11 = *((_OWORD *)v10 + 5);
    *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
    *((_OWORD *)v9 + 5) = v11;
    v9[96] = v10[96];
    long long v12 = *((_OWORD *)v10 + 1);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v12;
    long long v13 = *((_OWORD *)v10 + 3);
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 3) = v13;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = *(int *)(a3 + 20);
  long long v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for PhotogrammetrySession.Request();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  return a1;
}

char *assignWithCopy for PhotogrammetrySessionImpl.RequestMap.Entry(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Request((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Request);
    uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                  + 64);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      long long v11 = *((_OWORD *)v10 + 3);
      long long v12 = *((_OWORD *)v10 + 4);
      long long v13 = *((_OWORD *)v10 + 5);
      v9[96] = v10[96];
      *((_OWORD *)v9 + 4) = v12;
      *((_OWORD *)v9 + 5) = v13;
      *((_OWORD *)v9 + 3) = v11;
      long long v15 = *((_OWORD *)v10 + 1);
      long long v14 = *((_OWORD *)v10 + 2);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v15;
      *((_OWORD *)v9 + 2) = v14;
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for PhotogrammetrySession.Request();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 24))(v21, v22, v23);
  return a1;
}

char *initializeWithTake for PhotogrammetrySessionImpl.RequestMap.Entry(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                + 64);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    long long v11 = *((_OWORD *)v10 + 5);
    *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
    *((_OWORD *)v9 + 5) = v11;
    v9[96] = v10[96];
    long long v12 = *((_OWORD *)v10 + 1);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v12;
    long long v13 = *((_OWORD *)v10 + 3);
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 3) = v13;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v14 = *(int *)(a3 + 20);
  long long v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for PhotogrammetrySession.Request();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

char *assignWithTake for PhotogrammetrySessionImpl.RequestMap.Entry(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PhotogrammetrySession.Request((uint64_t)a1, type metadata accessor for PhotogrammetrySession.Request);
    uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, detail: PhotogrammetrySession.Request.Detail, geometry: PhotogrammetrySession.Request.Geometry?))
                  + 64);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      long long v11 = *((_OWORD *)v10 + 5);
      *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
      *((_OWORD *)v9 + 5) = v11;
      v9[96] = v10[96];
      long long v12 = *((_OWORD *)v10 + 1);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v12;
      long long v13 = *((_OWORD *)v10 + 3);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 3) = v13;
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v14 = *(int *)(a3 + 20);
  long long v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for PhotogrammetrySession.Request();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhotogrammetrySessionImpl.RequestMap.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228068E70);
}

uint64_t sub_228068E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PhotogrammetrySession.Request(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for PhotogrammetrySession.Request();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = type metadata accessor for Date();
  long long v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySessionImpl.RequestMap.Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228068FD0);
}

uint64_t sub_228068FD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PhotogrammetrySession.Request(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for PhotogrammetrySession.Request();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for PhotogrammetrySessionImpl.RequestMap.Entry);
}

uint64_t type metadata completion function for PhotogrammetrySessionImpl.RequestMap.Entry()
{
  uint64_t result = type metadata accessor for PhotogrammetrySession.Request(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PhotogrammetrySession.Request();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Date();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhotogrammetrySessionImpl.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228069318);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PhotogrammetrySessionImpl.State()
{
  return &unk_26DCA0130;
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySessionImpl.State and conformance PhotogrammetrySessionImpl.State()
{
  unint64_t result = lazy protocol witness table cache variable for type PhotogrammetrySessionImpl.State and conformance PhotogrammetrySessionImpl.State;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySessionImpl.State and conformance PhotogrammetrySessionImpl.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySessionImpl.State and conformance PhotogrammetrySessionImpl.State);
  }
  return result;
}

uint64_t protocol witness for AsyncOutputIteratorProtocol.next() in conformance AsyncOutputIterator(uint64_t a1)
{
  int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  *int v3 = v1;
  v3[1] = protocol witness for AsyncOutputIteratorProtocol.next() in conformance AsyncOutputIterator;
  return MEMORY[0x270FA1F70](a1, v4);
}

uint64_t protocol witness for AsyncOutputIteratorProtocol.next() in conformance AsyncOutputIterator()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

float computeOrientedBoundingBox(for:)@<S0>(_OWORD *a1@<X8>)
{
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    long long v10 = v4;
    long long v11 = v3;
    float32x4_t v9 = v2;
    swift_once();
    float32x4_t v2 = v9;
    long long v4 = v10;
    long long v3 = v11;
  }
  float v5 = vmuls_lane_f32(0.5, v2, 2);
  float32x2_t v6 = vmul_f32(*(float32x2_t *)v2.f32, (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)&long long v7 = vsub_f32(*(float32x2_t *)&v4, v6);
  *((float *)&v7 + 2) = *((float *)&v4 + 2) - v5;
  HIDWORD(v7) = 0;
  *(float32x2_t *)&long long v4 = vadd_f32(*(float32x2_t *)&v4, v6);
  float result = *((float *)&v4 + 2) + v5;
  *((float *)&v4 + 2) = *((float *)&v4 + 2) + v5;
  HIDWORD(v4) = 0;
  *a1 = v3;
  a1[1] = v7;
  a1[2] = v4;
  return result;
}

uint64_t PhotogrammetrySession.PointCloud.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = PhotogrammetrySession.PointCloud.points.getter();
  int64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v29 = a1;
    unint64_t v30 = a2;
    uint64_t v37 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t isUniquelyReferenced_nonNull_native = type metadata accessor for PhotogrammetrySession.PointCloud.Point();
    uint64_t v8 = isUniquelyReferenced_nonNull_native;
    uint64_t v9 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
    long long v10 = *(void (**)(char *, char *, uint64_t, __n128))(v9 + 16);
    uint64_t v34 = v9 + 16;
    int64_t v35 = v10;
    unint64_t v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v28 = v4;
    unint64_t v12 = v4 + v11;
    uint64_t v13 = *(void *)(v9 + 72);
    uint64_t v32 = *(void *)(v9 + 64);
    uint64_t v33 = v13;
    int64_t v31 = (void (**)(char *, uint64_t))(v9 + 8);
    do
    {
      uint64_t v14 = v32;
      __n128 v15 = MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
      uint64_t v16 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v17 = v35;
      uint64_t v18 = ((uint64_t (*)(char *, unint64_t, uint64_t, __n128))v35)(v16, v12, v8, v15);
      __n128 v19 = MEMORY[0x270FA5388](v18);
      v17(v16, v16, v8, v19);
      PhotogrammetrySession.PointCloud.Point.position.getter();
      long long v36 = v20;
      int v21 = PhotogrammetrySession.PointCloud.Point.color.getter();
      uint64_t v22 = *v31;
      (*v31)(v16, v8);
      v22(v16, v8);
      uint64_t v6 = v37;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
        uint64_t v6 = v37;
      }
      unint64_t v24 = *(void *)(v6 + 16);
      unint64_t v23 = *(void *)(v6 + 24);
      if (v24 >= v23 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        uint64_t v6 = v37;
      }
      *(void *)(v6 + 16) = v24 + 1;
      uint64_t v25 = v6 + 32 * v24;
      *(_OWORD *)(v25 + 32) = v36;
      *(_DWORD *)(v25 + 48) = v21;
      v12 += v33;
      --v5;
    }
    while (v5);
    a1 = v29;
    a2 = v30;
  }
  uint64_t v26 = type metadata accessor for PhotogrammetrySession.PointCloud();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(a1, v26);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t PhotogrammetrySession.Poses.init(poses:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v4 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v57 = specialized Dictionary.init(dictionaryLiteral:)(v3);
  uint64_t v54 = a1;
  uint64_t v5 = PhotogrammetrySession.PointCloud.points.getter();
  int64_t v6 = 0;
  uint64_t v58 = v5 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v5 + 64);
  int64_t v59 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      uint64_t v60 = (v9 - 1) & v9;
      int64_t v61 = v6;
      unint64_t v10 = __clz(__rbit64(v9)) | (v6 << 6);
    }
    else
    {
      int64_t v11 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_48;
      }
      if (v11 >= v59)
      {
LABEL_45:
        swift_release();
        unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        uint64_t v52 = type metadata accessor for PhotogrammetrySession.Poses();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v54, v52);
        *a2 = v57;
        a2[1] = v51;
        a2[2] = (unint64_t)v4;
        return result;
      }
      unint64_t v12 = *(void *)(v58 + 8 * v11);
      int64_t v13 = v6 + 1;
      if (!v12)
      {
        int64_t v13 = v6 + 2;
        if (v6 + 2 >= v59) {
          goto LABEL_45;
        }
        unint64_t v12 = *(void *)(v58 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v6 + 3;
          if (v6 + 3 >= v59) {
            goto LABEL_45;
          }
          unint64_t v12 = *(void *)(v58 + 8 * v13);
          if (!v12)
          {
            uint64_t v14 = v6 + 4;
            if (v6 + 4 >= v59) {
              goto LABEL_45;
            }
            unint64_t v12 = *(void *)(v58 + 8 * v14);
            if (!v12)
            {
              while (1)
              {
                int64_t v13 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_49;
                }
                if (v13 >= v59) {
                  goto LABEL_45;
                }
                unint64_t v12 = *(void *)(v58 + 8 * v13);
                ++v14;
                if (v12) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v6 + 4;
          }
        }
      }
LABEL_21:
      uint64_t v60 = (v12 - 1) & v12;
      int64_t v61 = v13;
      unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    }
    uint64_t v15 = *(void *)(*(void *)(v5 + 48) + 8 * v10);
    uint64_t v16 = *(void *)(v5 + 56) + 80 * v10;
    uint64_t v62 = *(void *)v16;
    uint64_t v63 = *(void *)(v16 + 16);
    uint64_t v64 = *(void *)(v16 + 8);
    uint64_t v65 = *(void *)(v16 + 32);
    uint64_t v68 = *(void *)(v16 + 40);
    uint64_t v66 = *(void *)(v16 + 24);
    uint64_t v67 = *(void *)(v16 + 48);
    uint64_t v70 = *(void *)(v16 + 56);
    char v17 = *(unsigned char *)(v16 + 64);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)logger);
    __n128 v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v73[0] = v22;
      *(_DWORD *)uint64_t v21 = 134218242;
      *(void *)(v21 + 4) = v15;
      *(_WORD *)(v21 + 12) = 2080;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_float4x4?);
      uint64_t v23 = String.init<A>(describing:)();
      *(void *)(v21 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v73);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v19, v20, "Caching sampleID=%ld pose=%s.", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v22, -1, -1);
      MEMORY[0x22A696500](v21, -1, -1);
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    uint64_t v28 = v4[2];
    BOOL v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      break;
    }
    char v31 = v26;
    if (v4[3] >= v30)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v26) {
          goto LABEL_33;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v31) {
          goto LABEL_33;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v31 & 1) != (v33 & 1)) {
        goto LABEL_50;
      }
      unint64_t v27 = v32;
      if (v31)
      {
LABEL_33:
        uint64_t v34 = v4[7] + 80 * v27;
        *(void *)uint64_t v34 = v62;
        *(void *)(v34 + 8) = v64;
        *(void *)(v34 + 16) = v63;
        *(void *)(v34 + 24) = v66;
        *(void *)(v34 + 32) = v65;
        *(void *)(v34 + 40) = v68;
        *(void *)(v34 + 48) = v67;
        *(void *)(v34 + 56) = v70;
        *(unsigned char *)(v34 + 64) = v17;
        goto LABEL_37;
      }
    }
    v4[(v27 >> 6) + 8] |= 1 << v27;
    *(void *)(v4[6] + 8 * v27) = v15;
    uint64_t v35 = v4[7] + 80 * v27;
    *(void *)uint64_t v35 = v62;
    *(void *)(v35 + 8) = v64;
    *(void *)(v35 + 16) = v63;
    *(void *)(v35 + 24) = v66;
    *(void *)(v35 + 32) = v65;
    *(void *)(v35 + 40) = v68;
    *(void *)(v35 + 48) = v67;
    *(void *)(v35 + 56) = v70;
    *(unsigned char *)(v35 + 64) = v17;
    uint64_t v36 = v4[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_47;
    }
    v4[2] = v38;
LABEL_37:
    swift_bridgeObjectRelease();
    if (v17)
    {
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 134349056;
        *(void *)(v41 + 4) = v15;
        _os_log_impl(&dword_227DD2000, v39, v40, "Poses: sampleID=%{public}ld was unable to be registered.  Not returning a pose.", (uint8_t *)v41, 0xCu);
        MEMORY[0x22A696500](v41, -1, -1);
      }
    }
    else
    {
      REMakeSRTFromMatrix();
      __n128 v69 = v43;
      if (one-time initialization token for identity != -1)
      {
        __n128 v72 = v42;
        swift_once();
        __n128 v42 = v72;
      }
      v42.n128_u32[3] = v56;
      __n128 v71 = v42;
      long long v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v47 = swift_slowAlloc();
        v73[0] = v47;
        *(_DWORD *)uint64_t v46 = 134349314;
        *(void *)(v46 + 4) = v15;
        *(_WORD *)(v46 + 12) = 2082;
        uint64_t v48 = String.init<A>(describing:)();
        *(void *)(v46 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v73);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_227DD2000, v44, v45, "Adding posesBySample[%{public}ld] = %{public}s", (uint8_t *)v46, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x22A696500](v47, -1, -1);
        MEMORY[0x22A696500](v46, -1, -1);
      }

      char v50 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v50, v71, v69);
      swift_bridgeObjectRelease();
      unsigned __int32 v56 = v71.n128_u32[3];
    }
    unint64_t v9 = v60;
    int64_t v6 = v61;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  int64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          uint64_t v83 = *(void *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      int64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          char v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(void *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          uint64_t v90 = &v86[16 * v85 + 32];
          *(void *)uint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          int64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    uint64_t v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v92 = v2;
  uint64_t v93 = *v2 - 8;
  int64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(void *)(v10 + 8 * v9);
      uint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        uint64_t v16 = v14;
        while (1)
        {
          uint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          uint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        uint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        uint64_t v25 = v22;
        do
        {
          uint64_t v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *uint64_t v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      int64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    BOOL v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          long long v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        unint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        __n128 v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 8 * *(void *)v71), (char *)(v10 + 8 * *(void *)v74), v10 + 8 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)__n128 v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        BOOL v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  Swift::Int v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        while (1)
        {
          Swift::Int v18 = v17 + 8;
          Swift::Int v19 = v6 - 8;
          uint64_t v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            uint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = v20;
            }
            Swift::Int v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v23 = v4;
          uint64_t v15 = v6;
        }
        else
        {
          uint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char v22;
  char *v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;

  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 96;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 96;
  uint64_t v32 = __src;
  unint64_t v31 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -95)
    {
      if (__dst != a2 || &a2[96 * v11] <= __dst) {
        memmove(__dst, a2, 96 * v11);
      }
      Swift::Int v18 = &v4[96 * v11];
      uint64_t v30 = (unint64_t)v18;
      uint64_t v32 = v6;
      if (__src < v6 && v10 >= 96)
      {
        Swift::Int v19 = (char *)(a3 - 96);
        do
        {
          outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)(v18 - 96), (uint64_t)&v28);
          uint64_t v20 = (unint64_t)(v6 - 96);
          outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)(v6 - 96), (uint64_t)&v26);
          if (v26 == v28 && v27 == v29) {
            uint64_t v22 = 0;
          }
          else {
            uint64_t v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          uint64_t v23 = v19 + 96;
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v26);
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v28);
          if (v22)
          {
            if (v23 != v6 || v19 >= v6) {
              memmove(v19, v6 - 96, 0x60uLL);
            }
            v32 -= 96;
            Swift::Int v18 = (char *)v30;
            if (v30 <= (unint64_t)v4) {
              break;
            }
          }
          else
          {
            Swift::Int v24 = v30;
            Swift::Int v18 = (char *)(v30 - 96);
            v30 -= 96;
            if ((unint64_t)v23 < v24 || (unint64_t)v19 >= v24 || v23 != (char *)v24) {
              memmove(v19, (const void *)(v24 - 96), 0x60uLL);
            }
            uint64_t v20 = (unint64_t)v6;
            if (v18 <= v4) {
              break;
            }
          }
          v19 -= 96;
          uint64_t v6 = (char *)v20;
        }
        while (v20 > (unint64_t)__src);
      }
LABEL_51:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v32, (const void **)&v31, &v30);
      return 1;
    }
  }
  else if (v8 >= -95)
  {
    if (__dst != __src || &__src[96 * v9] <= __dst) {
      memmove(__dst, __src, 96 * v9);
    }
    uint64_t v12 = (unint64_t)&v4[96 * v9];
    uint64_t v30 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 96)
    {
      while (1)
      {
        outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)v6, (uint64_t)&v28);
        outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)v4, (uint64_t)&v26);
        if (v26 == v28 && v27 == v29) {
          break;
        }
        uint64_t v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v26);
        outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v28);
        if ((v14 & 1) == 0) {
          goto LABEL_18;
        }
        uint64_t v15 = v32;
        uint64_t v16 = (unint64_t)(v6 + 96);
        if (v32 >= v6 && (unint64_t)v32 < v16 && v32 == v6) {
          uint64_t v15 = v6;
        }
        else {
          memmove(v32, v6, 0x60uLL);
        }
LABEL_22:
        uint64_t v32 = v15 + 96;
        uint64_t v4 = v31;
        if ((unint64_t)v31 < v12)
        {
          uint64_t v6 = (char *)v16;
          if (v16 < a3) {
            continue;
          }
        }
        goto LABEL_51;
      }
      outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v26);
      outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v28);
LABEL_18:
      uint64_t v15 = v32;
      uint64_t v17 = v31 + 96;
      if (v32 != v31 || v32 >= v17) {
        memmove(v32, v31, 0x60uLL);
      }
      unint64_t v31 = v17;
      uint64_t v16 = (unint64_t)v6;
      goto LABEL_22;
    }
    goto LABEL_51;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  char *v18;
  char *v19;
  long long v20;
  long long v21;
  long long v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  BOOL v27;
  char *v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t result;
  char *v36;
  const void *v37;
  char *v38;

  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 63;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 6;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 63;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 6;
  uint64_t v37 = __dst;
  uint64_t v38 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -63)
    {
      uint64_t v23 = v13 << 6;
      if (__dst != a2 || &a2[v23] <= __dst) {
        memmove(__dst, a2, v13 << 6);
      }
      Swift::Int v24 = &v4[v23];
      uint64_t v36 = v24;
      uint64_t v38 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 64) <= 0xFFFFFFFFFFFFFF80)
      {
        uint64_t v25 = (char *)(a3 - 64);
        do
        {
          uint64_t v26 = v25 + 64;
          unint64_t v27 = *((void *)v24 - 7) == *((void *)v6 - 7) && *((void *)v24 - 6) == *((void *)v6 - 6);
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v36 = v24 - 64;
            if (v26 < v24 || v25 >= v24 || v26 != v24)
            {
              uint64_t v32 = *((_OWORD *)v24 - 4);
              uint64_t v33 = *((_OWORD *)v24 - 3);
              uint64_t v34 = *((_OWORD *)v24 - 1);
              *((_OWORD *)v25 + 2) = *((_OWORD *)v24 - 2);
              *((_OWORD *)v25 + 3) = v34;
              *(_OWORD *)uint64_t v25 = v32;
              *((_OWORD *)v25 + 1) = v33;
            }
            unint64_t v28 = v6;
            v24 -= 64;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            unint64_t v28 = v6 - 64;
            if (v26 != v6 || v25 >= v6)
            {
              BOOL v29 = *(_OWORD *)v28;
              uint64_t v30 = *((_OWORD *)v6 - 3);
              unint64_t v31 = *((_OWORD *)v6 - 1);
              *((_OWORD *)v25 + 2) = *((_OWORD *)v6 - 2);
              *((_OWORD *)v25 + 3) = v31;
              *(_OWORD *)uint64_t v25 = v29;
              *((_OWORD *)v25 + 1) = v30;
            }
            uint64_t v38 = v6 - 64;
            if (v28 <= v7) {
              break;
            }
          }
          v25 -= 64;
          uint64_t v6 = v28;
        }
        while (v24 > v4);
      }
LABEL_52:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v38, &v37, &v36);
      return 1;
    }
  }
  else if (v8 >= -63)
  {
    uint64_t v14 = v10 << 6;
    if (__dst != __src || &__src[v14] <= __dst) {
      memmove(__dst, __src, v14);
    }
    uint64_t v15 = &v4[v14];
    uint64_t v36 = v15;
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 64) <= 0xFFFFFFFFFFFFFF80)
    {
      uint64_t v16 = v4;
      while (1)
      {
        uint64_t v17 = *((void *)v6 + 1) == *((void *)v16 + 1) && *((void *)v6 + 2) == *((void *)v16 + 2);
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          uint64_t v4 = v16 + 64;
          Swift::Int v19 = v16;
          Swift::Int v18 = v6;
          if (v7 == v16)
          {
            v16 += 64;
            if (v7 < v4) {
              goto LABEL_26;
            }
          }
          else
          {
            v16 += 64;
          }
        }
        else
        {
          Swift::Int v18 = v6 + 64;
          Swift::Int v19 = v6;
          if (v7 == v6 && v7 < v18) {
            goto LABEL_26;
          }
        }
        uint64_t v20 = *(_OWORD *)v19;
        Swift::Int v21 = *((_OWORD *)v19 + 1);
        uint64_t v22 = *((_OWORD *)v19 + 3);
        *((_OWORD *)v7 + 2) = *((_OWORD *)v19 + 2);
        *((_OWORD *)v7 + 3) = v22;
        *(_OWORD *)uint64_t v7 = v20;
        *((_OWORD *)v7 + 1) = v21;
LABEL_26:
        v7 += 64;
        if (v16 < v15)
        {
          uint64_t v6 = v18;
          if ((unint64_t)v18 < a3) {
            continue;
          }
        }
        uint64_t v37 = v4;
        uint64_t v38 = v7;
        goto LABEL_52;
      }
    }
    goto LABEL_52;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, Date));
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  unint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t vars8;

  unint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -96)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 96;
    if (result != v3 || result >= &v3[96 * v6])
    {
      return (char *)memmove(result, v3, 96 * v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;
  uint64_t vars8;

  unint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -64)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = (v4 + (v4 < 0 ? 0x3FuLL : 0)) & 0xFFFFFFFFFFFFFFC0;
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;
  uint64_t vars8;

  unint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -96)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = 96 * (v4 / 96);
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

uint64_t specialized closure #1 in Atomic.load()@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t outlined destroy of PhotogrammetrySession.Request(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in OutputPublisherMonitor.handleProcessingCancelled()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return closure #1 in OutputPublisherMonitor.handleProcessingCancelled()(a1, v4, v5, v6);
}

uint64_t sub_22806B140()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA_138(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in OutputPublisherMonitor.handleProcessingComplete()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  v3[8] = v2;
  return MEMORY[0x270FA2498](closure #1 in OutputPublisherMonitor.handleProcessingComplete(), 0, 0);
}

unsigned char *partial apply for specialized closure #1 in Atomic.store(_:)(unsigned char *result)
{
  *uint64_t result = **(unsigned char **)(v1 + 16);
  return result;
}

uint64_t sub_22806B3A8()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for PhotogrammetrySession.Request(0) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = *(void *)(v6 + 64);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v20 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = *(void *)(v8 + 64);
  swift_unknownObjectRelease();
  uint64_t v10 = v0 + v4;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v17 = v1;
  uint64_t v12 = v1;
  uint64_t v13 = (v5 + v7 + 8) & ~v7;
  v11(v10, v12);
  swift_release();
  if (!swift_getEnumCaseMultiPayload()) {
    v11(v0 + v13, v17);
  }
  uint64_t v14 = (v13 + v19 + v9) & ~v9;
  uint64_t v15 = v14 + v18;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v14, v20);

  return MEMORY[0x270FA0238](v0, v15, v3 | v7 | v9 | 7);
}

uint64_t partial apply for closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(type metadata accessor for PhotogrammetrySession.Request(0) - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  uint64_t v14 = v1 + v5;
  uint64_t v15 = *(void *)(v1 + v6);
  uint64_t v16 = v1 + v8;
  uint64_t v17 = v1 + (v11 & ~v10);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v18;
  *uint64_t v18 = v2;
  v18[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return closure #1 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)(a1, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_22806B790()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #2 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[3] = v5;
  v7[4] = v6;
  v7[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  v7[2] = v4;
  return MEMORY[0x270FA2498](closure #2 in OutputPublisherMonitor.handleModelEntity(url:apiRequest:), 0, 0);
}

uint64_t outlined init with copy of PhotogrammetrySession.Request(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of PhotogrammetrySession.Request(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error;
  if (!lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error)
  {
    type metadata accessor for PhotogrammetrySession.Error();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in Atomic.store(_:)(void *a1)
{
  return partial apply for specialized closure #1 in Atomic.store(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v3;

  unint64_t v3 = **(void **)(v1 + 16);
  swift_bridgeObjectRelease();
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22806BAD0()
{
  uint64_t v1 = *(void *)(type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for closure #1 in AnalyticsManager.sendPhotogrammetrySessionInitEvent(event:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for AnalyticsManager.PhotogrammetrySessionInitEvent(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in AnalyticsManager.sendPhotogrammetrySessionInitEvent(event:)(v2);
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t outlined destroy of PhotogrammetrySession.Outputs(uint64_t a1)
{
  return a1;
}

uint64_t specialized static PhotogrammetrySessionImpl.verifyFreeStorageForFolderInputOrThrow(inputFolder:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v35 - v12;
  uint64_t result = specialized static ImageHelper.calculateTotalImagesSizeInFolderShallowly(_:)();
  if (v2) {
    return result;
  }
  uint64_t v15 = 3 * result;
  if ((unsigned __int128)(result * (__int128)3) >> 64 != (3 * result) >> 63)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v16 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  outlined init with copy of (Int, URL)(a2 + *(int *)(v16 + 28), (uint64_t)v6, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    if (one-time initialization token for temporaryDirectory == -1)
    {
LABEL_5:
      uint64_t v17 = __swift_project_value_buffer(v7, (uint64_t)static PhotogrammetryFileHelpers.temporaryDirectory);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v17, v7);
      outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for URL?);
      goto LABEL_7;
    }
LABEL_19:
    swift_once();
    goto LABEL_5;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
LABEL_7:
  specialized static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)((uint64_t)v13);
  if (specialized static PhotogrammetryFileHelpers.checkIfSufficientStorageSpace(requiredBytes:directory:)(v15, (uint64_t)v13))
  {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }
  uint64_t v19 = v18;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)logger);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  Swift::Int v21 = Logger.logObject.getter();
  int v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, (os_log_type_t)v22))
  {
    int v37 = v22;
    uint64_t v39 = v19;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v42 = v36;
    *(_DWORD *)uint64_t v23 = 141558530;
    uint64_t v40 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v42);
    v35[2] = &v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
    v38(v10, v7);
    *(_WORD *)(v23 + 22) = 2082;
    v35[1] = v23 + 24;
    if (one-time initialization token for byteFormatter != -1) {
      swift_once();
    }
    uint64_t v26 = v39;
    id v27 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, v39);
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227DD2000, v21, (os_log_type_t)v37, "Insufficient storage remaining in checkpointDirectory = %{mask.hash}s  Required bytes = %{public}s", (uint8_t *)v23, 0x20u);
    uint64_t v31 = v36;
    swift_arrayDestroy();
    MEMORY[0x22A696500](v31, -1, -1);
    uint64_t v32 = v23;
    uint64_t v19 = v26;
    MEMORY[0x22A696500](v32, -1, -1);

    uint64_t v33 = v38;
  }
  else
  {
    uint64_t v33 = *(void (**)(char *, uint64_t))(v8 + 8);
    v33(v10, v7);
  }
  type metadata accessor for PhotogrammetrySession.Error(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, (void (*)(uint64_t))type metadata accessor for PhotogrammetrySession.Error);
  swift_allocError();
  *uint64_t v34 = v19;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return ((uint64_t (*)(char *, uint64_t))v33)(v13, v7);
}

BOOL specialized static PhotogrammetrySessionImpl.containsMinimalNumberOfImages(_:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ImageHelper();
  uint64_t v8 = static ImageHelper.enumerateImageFilesInFolderShallowly(_:sorted:)(a1, 0);
  if (!v1)
  {
    unint64_t v9 = *(void *)(v8 + 16);
    swift_bridgeObjectRelease();
    BOOL v2 = v9 > 2;
    if (v9 <= 2)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)logger);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      int v13 = v12;
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v14 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v23 = v21;
        *(_DWORD *)uint64_t v14 = 141558274;
        uint64_t v22 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v14 + 12) = 2080;
        uint64_t v19 = v14 + 14;
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
        int v20 = v13;
        uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        _os_log_impl(&dword_227DD2000, v11, (os_log_type_t)v20, "There are not enough images in the input folder: %{mask.hash}s", (uint8_t *)v14, 0x16u);
        uint64_t v17 = v21;
        swift_arrayDestroy();
        MEMORY[0x22A696500](v17, -1, -1);
        MEMORY[0x22A696500](v14, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
    }
  }
  return v2;
}

uint64_t specialized static PhotogrammetrySessionImpl.isCheckpointDirectoryValidForResumingReconstruction(checkpointDirectory:inputURL:internalConfiguration:)(uint64_t a1, uint64_t a2)
{
  if (!specialized static PhotogrammetryFileHelpers.isEmptyDirectory(_:)())
  {
    type metadata accessor for ImageHelper();
    uint64_t v4 = static ImageHelper.enumerateImageFilesInFolderShallowly(_:sorted:)(a2, 0);
    type metadata accessor for PhotogrammetrySession();
    uint64_t v5 = static PhotogrammetrySession.getNumberOfSamplesInSnapshot(snapshotURL:)();
    if (v6) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v5;
    }
    uint64_t v8 = *(void *)(v4 + 16);
    swift_bridgeObjectRelease();
    if (v8 == v7)
    {
      if (static PhotogrammetrySession.isConfigurationCompatibleWithSnapshot(configuration:snapshotURL:)())
      {
        if (static PhotogrammetrySession.isDeviceCompatibleWithSnapshot(snapshotURL:)())
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v17 = type metadata accessor for Logger();
          __swift_project_value_buffer(v17, (uint64_t)logger);
          uint64_t v10 = Logger.logObject.getter();
          os_log_type_t v18 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v10, v18))
          {
            uint64_t v3 = 1;
            goto LABEL_24;
          }
          os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v12 = 0;
          _os_log_impl(&dword_227DD2000, v10, v18, "The checkpoint directory is valid for resuming reconstruction.", v12, 2u);
          uint64_t v3 = 1;
          goto LABEL_22;
        }
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)logger);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v10, v11))
        {
          os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v12 = 0;
          int v13 = "The checkpoint is not compatible with this device. Ignoring the checkpoint...";
          goto LABEL_21;
        }
      }
      else
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)logger);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v10, v11))
        {
          os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v12 = 0;
          int v13 = "The configuration is different than the one in the checkpoint. Ignoring the checkpoint...";
LABEL_21:
          _os_log_impl(&dword_227DD2000, v10, v11, v13, v12, 2u);
          uint64_t v3 = 0;
LABEL_22:
          MEMORY[0x22A696500](v12, -1, -1);
LABEL_24:

          return v3;
        }
      }
    }
    else
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)logger);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v12 = 0;
        int v13 = "Number of input images does not match the samples in the checkpoint. Ignoring the checkpoint...";
        goto LABEL_21;
      }
    }
    uint64_t v3 = 0;
    goto LABEL_24;
  }
  return 0;
}

char *specialized PhotogrammetrySessionImpl.__allocating_init(id:input:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v206 = a1;
  uint64_t v207 = type metadata accessor for UUID();
  uint64_t v205 = *(void *)(v207 - 8);
  MEMORY[0x270FA5388](v207);
  v200 = (char *)v176 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v198);
  uint64_t v197 = (uint64_t)v176 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v203 = (void (*)(void, void))((char *)v176 - v8);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v208 = *(void *)(v9 - 8);
  uint64_t v209 = v9;
  MEMORY[0x270FA5388](v9);
  v199 = (char *)v176 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v202 = (void (*)(char *, char *, uint64_t, __n128))((char *)v176 - v12);
  MEMORY[0x270FA5388](v13);
  v201 = (char *)v176 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = ((char *)v176 - v16);
  MEMORY[0x270FA5388](v18);
  int v20 = (char *)v176 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (void (*)(NSObject *, uint64_t, uint64_t))((char *)v176 - v22);
  uint64_t v24 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)v176 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  unint64_t v29 = (char *)v176 - v28;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)v176 - v31;
  uint64_t v33 = (char *)v204;
  specialized static PhotogrammetrySessionImpl.verifyFreeStorageForFolderInputOrThrow(inputFolder:configuration:)(a2, a3);
  if (v33)
  {
    uint64_t v34 = v33;
    outlined destroy of PhotogrammetrySession.Request(a3, type metadata accessor for PhotogrammetrySession.Configuration);
    (*(void (**)(uint64_t, uint64_t))(v208 + 8))(a2, v209);
    (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v206, v207);
    return v34;
  }
  v192 = v29;
  v193 = v32;
  v191 = v20;
  uint64_t v194 = v24;
  v195 = v23;
  v204 = v17;
  v190 = v26;
  uint64_t v196 = a3;
  BOOL v35 = specialized static PhotogrammetrySessionImpl.containsMinimalNumberOfImages(_:)(a2);
  uint64_t v36 = a2;
  uint64_t v38 = v196;
  if (v35)
  {
    v188 = 0;
    uint64_t v39 = type metadata accessor for PhotogrammetrySession.Configuration();
    v181 = v176;
    uint64_t v40 = *(void **)(v39 - 8);
    uint64_t v41 = v40[8];
    MEMORY[0x270FA5388](v39);
    unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v43 = (char *)v176 - v42;
    uint64_t v44 = (uint64_t)v193;
    outlined init with copy of PhotogrammetrySession.Request(v38, (uint64_t)v193, type metadata accessor for PhotogrammetrySession.Configuration);
    PhotogrammetrySession.Configuration.init(_:)(v44);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    uint64_t v46 = __swift_project_value_buffer(v45, (uint64_t)logger);
    v183 = v176;
    __n128 v47 = MEMORY[0x270FA5388](v46);
    uint64_t v48 = (char *)v176 - v42;
    unint64_t v49 = (void (*)(char *, char *, uint64_t, __n128))v40[2];
    v187 = v43;
    v49(v48, v43, v39, v47);
    v193 = (char *)v46;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    int v52 = v51;
    BOOL v53 = os_log_type_enabled(v50, v51);
    v202 = v49;
    v180 = v40;
    uint64_t v185 = v41;
    if (v53)
    {
      uint64_t v54 = swift_slowAlloc();
      int v178 = v52;
      uint64_t v55 = (uint8_t *)v54;
      uint64_t v56 = swift_slowAlloc();
      os_log_t v179 = v56;
      v176[1] = v176;
      v212 = v56;
      os_log_t v177 = v50;
      uint64_t v57 = v55;
      *(_DWORD *)uint64_t v55 = 136315138;
      v182 = (void (*)(char *, uint64_t))(v55 + 4);
      __n128 v58 = MEMORY[0x270FA5388](v56);
      v202((char *)v176 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0), v48, v39, v58);
      uint64_t v59 = String.init<A>(describing:)();
      uint64_t v211 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v49 = v202;
      swift_bridgeObjectRelease();
      v182 = (void (*)(char *, uint64_t))v40[1];
      v182(v48, v39);
      os_log_t v61 = v177;
      _os_log_impl(&dword_227DD2000, v177, (os_log_type_t)v178, "Using internal session config = %s", v55, 0xCu);
      os_log_t v62 = v179;
      swift_arrayDestroy();
      MEMORY[0x22A696500](v62, -1, -1);
      MEMORY[0x22A696500](v57, -1, -1);
    }
    else
    {
      v182 = (void (*)(char *, uint64_t))v40[1];
      v182(v48, v39);
    }
    uint64_t v78 = v203;
    uint64_t v77 = v204;
    outlined init with copy of (Int, URL)(v196 + *(int *)(v194 + 28), (uint64_t)v203, &demangling cache variable for type metadata for URL?);
    int v79 = (*(uint64_t (**)(void (*)(void, void), uint64_t, uint64_t))(v208 + 48))(v78, 1, v209);
    uint64_t v80 = (uint64_t)v195;
    uint64_t v189 = v36;
    uint64_t v186 = v39;
    v184 = v40 + 2;
    if (v79 == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v78, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      (*(void (**)(void, void (*)(void, void), uint64_t))(v208 + 32))(v195, v78, v209);
      uint64_t v83 = v187;
      if (specialized static PhotogrammetrySessionImpl.isCheckpointDirectoryValidForResumingReconstruction(checkpointDirectory:inputURL:internalConfiguration:)(v80, v36))
      {
        uint64_t v84 = v191;
        (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v191, v80, v209);
        unint64_t v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.info.getter();
        int v87 = v86;
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v88 = swift_slowAlloc();
          v183 = swift_slowAlloc();
          v212 = v183;
          *(_DWORD *)uint64_t v88 = 141558274;
          uint64_t v211 = 1752392040;
          os_log_t v179 = v85;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v88 + 12) = 2080;
          v203 = (void (*)(void, void))(v88 + 14);
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
          int v178 = v87;
          uint64_t v89 = v209;
          uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v211 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, (uint64_t *)&v212);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v92 = v89;
          uint64_t v80 = (uint64_t)v195;
          v203 = *(void (**)(void, void))(v208 + 8);
          v203(v84, v92);
          os_log_t v93 = v179;
          _os_log_impl(&dword_227DD2000, v179, (os_log_type_t)v178, "Resuming internal photogrammetry session from checkpointDirectory = %{mask.hash}s", (uint8_t *)v88, 0x16u);
          uint64_t v94 = v183;
          swift_arrayDestroy();
          MEMORY[0x22A696500](v94, -1, -1);
          MEMORY[0x22A696500](v88, -1, -1);
        }
        else
        {
          v203 = *(void (**)(void, void))(v208 + 8);
          v203(v84, v209);
        }
        __n128 v96 = MEMORY[0x270FA5388](v95);
        v49((char *)v176 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0), v83, v186, v96);
        type metadata accessor for PhotogrammetrySession();
        swift_allocObject();
        uint64_t v98 = v188;
        uint64_t v99 = PhotogrammetrySession.init(configuration:)();
        if (!v98)
        {
          uint64_t v109 = v99;
          v203(v80, v209);
          goto LABEL_36;
        }
        v188 = 0;
        uint64_t v100 = v98;
        uint64_t v101 = v98;
        uint64_t v102 = Logger.logObject.getter();
        os_log_type_t v103 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v102, v103))
        {
          __n128 v104 = (uint8_t *)swift_slowAlloc();
          unint64_t v105 = swift_slowAlloc();
          v212 = v105;
          *(_DWORD *)__n128 v104 = 136446210;
          v195 = (void (*)(NSObject *, uint64_t, uint64_t))(v104 + 4);
          uint64_t v211 = (uint64_t)v98;
          float32x4_t v106 = v98;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          uint64_t v107 = String.init<A>(describing:)();
          uint64_t v211 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, (uint64_t *)&v212);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_227DD2000, v102, v103, "Resuming internal photogrammetry session failed with %{public}s", v104, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x22A696500](v105, -1, -1);
          MEMORY[0x22A696500](v104, -1, -1);
        }
        else
        {
        }
        v203(v80, v209);
        uint64_t v39 = v186;
        uint64_t v77 = v204;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v80, v209);
      }
    }
    unint64_t v110 = *(void (**)(NSObject *, uint64_t, uint64_t))(v208 + 16);
    v110(v77, v36, v209);
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v111, v112))
    {
      uint64_t v113 = swift_slowAlloc();
      v204 = swift_slowAlloc();
      v212 = v204;
      *(_DWORD *)uint64_t v113 = 141558274;
      uint64_t v211 = 1752392040;
      uint64_t v114 = v209;
      v195 = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v113 + 12) = 2080;
      v203 = (void (*)(void, void))(v113 + 14);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t v115 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v211 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, (uint64_t *)&v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v110 = v195;
      v203 = *(void (**)(void, void))(v208 + 8);
      v203(v77, v114);
      _os_log_impl(&dword_227DD2000, v111, v112, "Creating internal photogrammetry session from imageURL = %{mask.hash}s", (uint8_t *)v113, 0x16u);
      v117 = v204;
      swift_arrayDestroy();
      MEMORY[0x22A696500](v117, -1, -1);
      uint64_t v118 = v113;
      uint64_t v39 = v186;
      MEMORY[0x22A696500](v118, -1, -1);
    }
    else
    {
      v203 = *(void (**)(void, void))(v208 + 8);
      v203(v77, v209);
    }

    uint64_t v119 = v207;
    uint64_t v120 = ((uint64_t (*)(char *, uint64_t, uint64_t))v110)(v201, v36, v209);
    __n128 v121 = MEMORY[0x270FA5388](v120);
    uint64_t v34 = (char *)v176 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v83 = v187;
    v202(v34, v187, v39, v121);
    type metadata accessor for PhotogrammetrySession();
    swift_allocObject();
    uint64_t v123 = v188;
    uint64_t v124 = PhotogrammetrySession.init(imagesURL:configuration:)();
    if (v123)
    {
      v182(v83, v39);
      LODWORD(v204) = 0;
      uint64_t v125 = v205;
      v212 = v123;
      uint64_t v132 = type metadata accessor for PhotogrammetrySession.Error();
      uint64_t v133 = *(void *)(v132 - 8);
      MEMORY[0x270FA5388](v132);
      v135 = (char *)v176 - ((v134 + 15) & 0xFFFFFFFFFFFFFFF0);
      v136 = v123;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      if (swift_dynamicCast())
      {
        v202 = (void (*)(char *, char *, uint64_t, __n128))v176;
        uint64_t v137 = (*(uint64_t (**)(char *, uint64_t))(v133 + 88))(v135, v132);
        uint64_t v138 = v137;
        if (MEMORY[0x263F36990] && v137 == *MEMORY[0x263F36990])
        {

          uint64_t v139 = (uint64_t)v190;
          outlined init with copy of PhotogrammetrySession.Request(v196, (uint64_t)v190, type metadata accessor for PhotogrammetrySession.Configuration);
          v140 = Logger.logObject.getter();
          os_log_type_t v141 = static os_log_type_t.error.getter();
          int v142 = v141;
          if (os_log_type_enabled(v140, v141))
          {
            uint64_t v143 = swift_slowAlloc();
            uint64_t v144 = swift_slowAlloc();
            v201 = (char *)v144;
            *(_DWORD *)uint64_t v143 = 141558274;
            uint64_t v210 = 1752392040;
            uint64_t v211 = v144;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v143 + 12) = 2080;
            v199 = (char *)(v143 + 14);
            uint64_t v145 = v139 + *(int *)(v194 + 28);
            LODWORD(v200) = v142;
            outlined init with copy of (Int, URL)(v145, v197, &demangling cache variable for type metadata for URL?);
            uint64_t v146 = String.init<A>(describing:)();
            uint64_t v210 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v147, &v211);
            uint64_t v119 = v207;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v148 = v196;
            swift_bridgeObjectRelease();
            outlined destroy of PhotogrammetrySession.Request(v139, type metadata accessor for PhotogrammetrySession.Configuration);
            _os_log_impl(&dword_227DD2000, v140, (os_log_type_t)v200, "Internal photogrammetry session init failed for checkpointDirectory = %{mask.hash}s", (uint8_t *)v143, 0x16u);
            v149 = v201;
            swift_arrayDestroy();
            v150 = v149;
            uint64_t v151 = v148;
            MEMORY[0x22A696500](v150, -1, -1);
            uint64_t v152 = v143;
            uint64_t v125 = v205;
            MEMORY[0x22A696500](v152, -1, -1);
          }
          else
          {
            outlined destroy of PhotogrammetrySession.Request(v139, type metadata accessor for PhotogrammetrySession.Configuration);

            uint64_t v151 = v196;
          }
          int v153 = (int)v204;
          lazy protocol witness table accessor for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error();
          swift_allocError();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v133 + 104))(v172, v138, v132);
          swift_willThrow();
          outlined destroy of PhotogrammetrySession.Request(v151, type metadata accessor for PhotogrammetrySession.Configuration);
          v203(v189, v209);
          (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v206, v119);
LABEL_56:

LABEL_59:
          if (v153) {
            swift_release();
          }
          return v34;
        }
        if (MEMORY[0x263F36988] && v137 == *MEMORY[0x263F36988])
        {

          uint64_t v154 = v209;
          v155 = v199;
          v195 = v110;
          v201 = (char *)(v208 + 16);
          v110(v199, v189, v209);
          v156 = Logger.logObject.getter();
          os_log_type_t v157 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v156, v157))
          {
            uint64_t v158 = swift_slowAlloc();
            uint64_t v159 = swift_slowAlloc();
            v200 = (char *)v159;
            *(_DWORD *)uint64_t v158 = 141558274;
            uint64_t v210 = 1752392040;
            uint64_t v211 = v159;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v158 + 12) = 2080;
            lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
            uint64_t v160 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v210 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, v161, &v211);
            uint64_t v162 = v196;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v163 = v203;
            v203(v155, v154);
            _os_log_impl(&dword_227DD2000, v156, v157, "Internal photogrammetry session init failed for imageURL = %{mask.hash}s", (uint8_t *)v158, 0x16u);
            v164 = v200;
            swift_arrayDestroy();
            v165 = v163;
            MEMORY[0x22A696500](v164, -1, -1);
            MEMORY[0x22A696500](v158, -1, -1);
          }
          else
          {
            v173 = v155;
            v165 = v203;
            v203(v173, v154);

            uint64_t v162 = v196;
          }
          type metadata accessor for PhotogrammetrySession.Error(0);
          lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, (void (*)(uint64_t))type metadata accessor for PhotogrammetrySession.Error);
          swift_allocError();
          uint64_t v174 = v189;
          v195(v175, v189, v154);
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          outlined destroy of PhotogrammetrySession.Request(v162, type metadata accessor for PhotogrammetrySession.Configuration);
          v165(v174, v154);
          (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v206, v207);

          int v153 = (int)v204;
          goto LABEL_59;
        }
        if (MEMORY[0x263F36980] && v137 == *MEMORY[0x263F36980])
        {

          v166 = Logger.logObject.getter();
          os_log_type_t v167 = static os_log_type_t.error.getter();
          BOOL v168 = os_log_type_enabled(v166, v167);
          int v153 = (int)v204;
          if (v168)
          {
            v169 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v169 = 0;
            _os_log_impl(&dword_227DD2000, v166, v167, "Internal photogrammetry session init failed!", v169, 2u);
            MEMORY[0x22A696500](v169, -1, -1);
          }

          lazy protocol witness table accessor for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error();
          swift_allocError();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v133 + 104))(v170, v138, v132);
          swift_willThrow();
          outlined destroy of PhotogrammetrySession.Request(v196, type metadata accessor for PhotogrammetrySession.Configuration);
          v203(v189, v209);
          (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v206, v119);
          goto LABEL_56;
        }
        (*(void (**)(char *, uint64_t))(v133 + 8))(v135, v132);
        int v153 = (int)v204;
      }
      else
      {
        int v153 = (int)v204;
      }

      swift_willThrow();
      outlined destroy of PhotogrammetrySession.Request(v196, type metadata accessor for PhotogrammetrySession.Configuration);
      v203(v189, v209);
      (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v206, v119);
      goto LABEL_59;
    }
    uint64_t v109 = v124;
LABEL_36:
    uint64_t v126 = (uint64_t)v200;
    uint64_t v128 = v205;
    uint64_t v127 = v206;
    (*(void (**)(char *, uint64_t, uint64_t))(v205 + 16))(v200, v206, v207);
    uint64_t v129 = (uint64_t)v192;
    outlined init with copy of PhotogrammetrySession.Request(v196, (uint64_t)v192, type metadata accessor for PhotogrammetrySession.Configuration);
    type metadata accessor for PhotogrammetrySessionImpl(0);
    uint64_t v34 = (char *)swift_allocObject();
    swift_retain();
    PhotogrammetrySessionImpl.init(id:using:configuration:)(v126, v109, v129);
    type metadata accessor for ImageHelper();
    swift_retain();
    uint64_t v130 = v189;
    uint64_t v131 = static ImageHelper.enumerateImageFilesInFolderShallowly(_:sorted:)(v189, 1);
    v188 = 0;
    *(void *)&v34[OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_sortedImageFiles] = v131;
    swift_bridgeObjectRelease();
    uint64_t v171 = swift_bridgeObjectRetain();
    specialized static ImageHelper.logFilenames(files:)(v171);
    swift_release();
    swift_bridgeObjectRelease();
    v182(v83, v186);
    PhotogrammetrySessionImpl.logAnalyticsEvents(sourceType:)(0);
    outlined destroy of PhotogrammetrySession.Request(v196, type metadata accessor for PhotogrammetrySession.Configuration);
    v203(v130, v209);
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v127, v207);
    swift_release();
    return v34;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v63 = type metadata accessor for Logger();
  __swift_project_value_buffer(v63, (uint64_t)logger);
  uint64_t v64 = v208;
  uint64_t v65 = (char *)v202;
  v204 = *(NSObject **)(v208 + 16);
  ((void (*)(void (*)(char *, char *, uint64_t, __n128), uint64_t, uint64_t))v204)(v202, v36, v209);
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.error.getter();
  int v68 = v67;
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v69 = swift_slowAlloc();
    uint64_t v189 = v36;
    uint64_t v70 = v69;
    v203 = (void (*)(void, void))swift_slowAlloc();
    v212 = v203;
    *(_DWORD *)uint64_t v70 = 141558274;
    uint64_t v211 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v70 + 12) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    LODWORD(v201) = v68;
    uint64_t v71 = v209;
    uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v211 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, (uint64_t *)&v212);
    uint64_t v38 = v196;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v74 = *(void (**)(char *, uint64_t))(v64 + 8);
    v74(v65, v71);
    _os_log_impl(&dword_227DD2000, v66, (os_log_type_t)v201, "The given URL didn't have enough images to reconstruct: %{mask.hash}s", (uint8_t *)v70, 0x16u);
    uint64_t v75 = v203;
    swift_arrayDestroy();
    MEMORY[0x22A696500](v75, -1, -1);
    uint64_t v76 = v70;
    uint64_t v36 = v189;
    MEMORY[0x22A696500](v76, -1, -1);
  }
  else
  {
    uint64_t v74 = *(void (**)(char *, uint64_t))(v64 + 8);
    v74(v65, v209);
  }

  uint64_t v34 = (char *)type metadata accessor for PhotogrammetrySession.Error(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, (void (*)(uint64_t))type metadata accessor for PhotogrammetrySession.Error);
  swift_allocError();
  uint64_t v81 = v209;
  ((void (*)(uint64_t, uint64_t, uint64_t))v204)(v82, v36, v209);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  outlined destroy of PhotogrammetrySession.Request(v38, type metadata accessor for PhotogrammetrySession.Configuration);
  v74((char *)v36, v81);
  (*(void (**)(uint64_t, uint64_t))(v205 + 8))(v206, v207);
  return v34;
}

uint64_t specialized static PhotogrammetrySessionImpl.verifyFreeStorageForSequenceInputOrThrow(configuration:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v32 - v11;
  if (one-time initialization token for requiredBytesForImagesCaptureDirectory != -1) {
    swift_once();
  }
  uint64_t v13 = 3 * static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory;
  if ((unsigned __int128)(static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory * (__int128)3) >> 64 != (3 * static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory) >> 63)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v14 = type metadata accessor for PhotogrammetrySession.Configuration(0);
  outlined init with copy of (Int, URL)(a1 + *(int *)(v14 + 28), (uint64_t)v5, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
    goto LABEL_8;
  }
  if (one-time initialization token for temporaryDirectory != -1) {
    goto LABEL_20;
  }
LABEL_6:
  uint64_t v15 = __swift_project_value_buffer(v6, (uint64_t)static PhotogrammetryFileHelpers.temporaryDirectory);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v15, v6);
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
LABEL_8:
  specialized static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)((uint64_t)v12);
  if (v1
    || specialized static PhotogrammetryFileHelpers.checkIfSufficientStorageSpace(requiredBytes:directory:)(v13, (uint64_t)v12))
  {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v18 = v16;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)logger);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v6);
  int v20 = Logger.logObject.getter();
  int v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, (os_log_type_t)v21))
  {
    int v34 = v21;
    os_log_t v35 = v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v38 = v33;
    *(_DWORD *)uint64_t v22 = 141558530;
    uint64_t v36 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v38);
    v32[1] = &v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25(v9, v6);
    *(_WORD *)(v22 + 22) = 2082;
    v32[0] = v22 + 24;
    if (one-time initialization token for byteFormatter != -1) {
      swift_once();
    }
    id v26 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, v18, v32[0]);
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int v20 = v35;
    _os_log_impl(&dword_227DD2000, v35, (os_log_type_t)v34, "Insufficient storage remaining in checkpointDirectory = %{mask.hash}s  Required bytes = %{public}s", (uint8_t *)v22, 0x20u);
    uint64_t v30 = v33;
    swift_arrayDestroy();
    MEMORY[0x22A696500](v30, -1, -1);
    MEMORY[0x22A696500](v22, -1, -1);
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25(v9, v6);
  }

  type metadata accessor for PhotogrammetrySession.Error(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PhotogrammetrySession.Error and conformance PhotogrammetrySession.Error, (void (*)(uint64_t))type metadata accessor for PhotogrammetrySession.Error);
  swift_allocError();
  *uint64_t v31 = v18;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return ((uint64_t (*)(char *, uint64_t))v25)(v12, v6);
}

uint64_t specialized PhotogrammetrySessionImpl.isValidModelUrl(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_14;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    uint64_t v10 = "modelFile output URL must be a file URL!";
    goto LABEL_13;
  }
  if (URL.hasDirectoryPath.getter())
  {
    if (specialized static PhotogrammetryFileHelpers.isExistingDirectory(_:)())
    {
      if (!specialized static PhotogrammetryFileHelpers.isEmptyDirectory(_:)())
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v6 = type metadata accessor for Logger();
        __swift_project_value_buffer(v6, (uint64_t)logger);
        uint64_t v7 = Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v7, v8)) {
          goto LABEL_14;
        }
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        uint64_t v10 = "Existing directory output URL must be empty!";
LABEL_13:
        _os_log_impl(&dword_227DD2000, v7, v8, v10, v9, 2u);
        MEMORY[0x22A696500](v9, -1, -1);
LABEL_14:

        return 0;
      }
    }
    else
    {
      id v14 = objc_msgSend(self, sel_defaultManager);
      uint64_t v15 = URL.path.getter();
      uint64_t v16 = (void *)MEMORY[0x22A688A50](v15);
      swift_bridgeObjectRelease();
      unsigned int v17 = objc_msgSend(v14, sel_fileExistsAtPath_, v16);

      if (v17)
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        __swift_project_value_buffer(v18, (uint64_t)logger);
        uint64_t v7 = Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v7, v8)) {
          goto LABEL_14;
        }
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        uint64_t v10 = "Model output directory URL provided, but a non-directory already exists at this URL!";
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (URL.pathExtension.getter() == 2053403509 && v13 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        __swift_project_value_buffer(v31, (uint64_t)logger);
        uint64_t v7 = Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v7, v8)) {
          goto LABEL_14;
        }
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        uint64_t v10 = "Output URL must be specify a '.usdz' extension file!";
        goto LABEL_13;
      }
    }
    id v20 = objc_msgSend(self, sel_defaultManager);
    uint64_t v21 = URL.path.getter();
    uint64_t v22 = (void *)MEMORY[0x22A688A50](v21);
    swift_bridgeObjectRelease();
    unsigned int v23 = objc_msgSend(v20, sel_fileExistsAtPath_, v22);

    if (v23)
    {
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)logger);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 141558274;
        uint64_t v32 = 1752392040;
        uint64_t v33 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 12) = 2080;
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
        uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        _os_log_impl(&dword_227DD2000, v25, v26, "A file already exists at url %{mask.hash}s and will not be overwritten!", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x22A696500](v28, -1, -1);
        MEMORY[0x22A696500](v27, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      }

      return 0;
    }
  }
  return 1;
}

uint64_t type metadata accessor for AsyncOutputIterator(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AsyncOutputIterator);
}

uint64_t sub_22806F1F8()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PhotogrammetrySessionImpl.init(id:using:configuration:)()
{
  return closure #1 in PhotogrammetrySessionImpl.init(id:using:configuration:)();
}

uint64_t partial apply for closure #2 in PhotogrammetrySessionImpl.init(id:using:configuration:)()
{
  return closure #2 in PhotogrammetrySessionImpl.init(id:using:configuration:)();
}

uint64_t partial apply for closure #1 in PhotogrammetrySessionImpl.onProcessingCancelled()()
{
  return closure #1 in PhotogrammetrySessionImpl.onProcessingCancelled()(v0);
}

uint64_t sub_22806F248()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in PhotogrammetrySessionImpl.onProcessingComplete()()
{
  *(unsigned char *)(v0 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_isProcessing) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC17RealityFoundation25PhotogrammetrySessionImpl_state) = 0;
}

uint64_t sub_22806F2C0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1)
{
  return closure #1 in OutputPublisherMonitor.init(publisher:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1)
{
  return closure #1 in closure #1 in OutputPublisherMonitor.init(publisher:)(a1);
}

uint64_t partial apply for closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation)
                 - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)(a1, v4, v5);
}

uint64_t partial apply for closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  return partial apply for closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)(closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:));
}

uint64_t sub_22806F378()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

void partial apply for closure #4 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);

  closure #4 in closure #1 in OutputPublisherMonitor.init(publisher:)();
}

uint64_t partial apply for closure #5 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  return closure #5 in closure #1 in OutputPublisherMonitor.init(publisher:)();
}

uint64_t partial apply for closure #1 in OutputPublisherMonitor.connectPublisher(_:)(uint64_t a1)
{
  return closure #1 in OutputPublisherMonitor.connectPublisher(_:)(a1, v1);
}

uint64_t sub_22806F480()
{
  uint64_t v1 = type metadata accessor for PhotogrammetrySession.Output();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in OutputPublisherMonitor.connectPublisher(_:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for PhotogrammetrySession.Output() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in closure #1 in OutputPublisherMonitor.connectPublisher(_:)(v2, v3);
}

uint64_t objectdestroy_189Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  return partial apply for closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)(closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:));
}

uint64_t partial apply for closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation)
                 - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t objectdestroyTm_2()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  v3[2] = v2;
  return MEMORY[0x270FA2498](closure #1 in closure #1 in closure #3 in closure #1 in OutputPublisherMonitor.init(publisher:), 0, 0);
}

uint64_t sub_22806F84C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for PhotogrammetrySession.Output(0) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v10 = v0 + v8;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v13 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v0 + v8, v13);
      }
      objc_release(*(id *)(v10
                         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, Error))
                                  + 48)));
      break;
    case 1u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v0 + v8, v11);
      }
      v10 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PhotogrammetrySession.Request, PhotogrammetrySession.Result))
                    + 48);
      type metadata accessor for PhotogrammetrySession.Result(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_7;
        case 1u:
          swift_release();
          break;
        case 3u:
          goto LABEL_13;
        case 4u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_13;
        default:
          goto LABEL_14;
      }
      break;
    case 2u:
    case 5u:
      type metadata accessor for PhotogrammetrySession.Request(0);
      if (!swift_getEnumCaseMultiPayload())
      {
LABEL_7:
        uint64_t v12 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
      }
      break;
    case 3u:
LABEL_13:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
LABEL_14:

  return MEMORY[0x270FA0238](v0, v8 + v9, v3 | v7 | 7);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Continuation)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for PhotogrammetrySession.Output(0) - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return closure #1 in closure #2 in closure #1 in OutputPublisherMonitor.init(publisher:)(v0 + v2, v5);
}

uint64_t outlined init with copy of PhotogrammetrySample(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PhotogrammetrySample(uint64_t a1)
{
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for AsyncOutputIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for AsyncOutputIterator(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for AsyncOutputIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for AsyncOutputIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for AsyncOutputIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for AsyncOutputIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncOutputIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22806FF88);
}

uint64_t sub_22806FF88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AsyncOutputIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22807000C);
}

uint64_t sub_22807000C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for AsyncOutputIterator()
{
  type metadata accessor for UUID?(319, &lazy cache variable for type metadata for AsyncStream<PhotogrammetrySession.Output>.Iterator, type metadata accessor for PhotogrammetrySession.Output, MEMORY[0x263F8F5A8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for UUID?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unsigned char *closure #1 in Atomic.store(_:)specialized partial apply(unsigned char *a1)
{
  return partial apply for specialized closure #1 in Atomic.store(_:)(a1);
}

unsigned char *storeEnumTagSinglePayload for AudioFileGroupResource.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280702C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioFileGroupResource.Error()
{
  return &type metadata for AudioFileGroupResource.Error;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AudioFileGroupResource.Error()
{
  unint64_t v1 = 0xD000000000000050;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000064;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x206E776F6E6B6E55;
  }
}

void MeshJointInfluence.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t MeshJointInfluence.init(jointIndex:weight:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(_DWORD *)a2 = result;
    *(float *)(a2 + 4) = a3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t MeshJointInfluence.jointIndex.getter()
{
  return *v0;
}

uint64_t MeshJointInfluence.jointIndex.setter(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *unint64_t v1 = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t (*MeshJointInfluence.jointIndex.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  return MeshJointInfluence.jointIndex.modify;
}

uint64_t MeshJointInfluence.jointIndex.modify(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)result;
  BOOL v3 = *(void *)result < (uint64_t)0xFFFFFFFF80000000;
  if (a2)
  {
    if (*(void *)result < (int64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
      goto LABEL_9;
    }
    BOOL v3 = v2 < 0x7FFFFFFF;
    if (v2 <= 0x7FFFFFFF)
    {
LABEL_7:
      **(_DWORD **)(result + 8) = v2;
      return result;
    }
    __break(1u);
  }
  if (v3)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 <= 0x7FFFFFFF) {
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

float MeshJointInfluence.weight.getter()
{
  return *(float *)(v0 + 4);
}

void MeshJointInfluence.weight.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

float (*MeshJointInfluence.weight.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  return MeshJointInfluence.weight.modify;
}

float MeshJointInfluence.weight.modify(float *a1)
{
  float result = a1[2];
  *(float *)(*(void *)a1 + 4) = result;
  return result;
}

Swift::Bool __swiftcall MeshBuffers.Identifier.BufferName.validType(_:)(RealityFoundation::MeshBuffers::ElementType a1)
{
  int v2 = *(unsigned __int8 *)a1;
  switch(v1)
  {
    case 4:
      Swift::Bool result = v2 == 8;
      break;
    case 5:
      Swift::Bool result = (v2 - 1) < 2;
      break;
    case 6:
      Swift::Bool result = v2 == 11;
      break;
    case 7:
      Swift::Bool result = v2 == 5;
      break;
    default:
      Swift::Bool result = v2 == 9;
      break;
  }
  return result;
}

BOOL static MeshBuffers.ElementType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t MeshBuffers.Identifier.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshBuffers.Identifier.isCustom.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t MeshBuffers.Identifier.isBlendShape.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

void one-time initialization function for positions()
{
  algn_2681C1C58[7] = -18;
  word_2681C1C60 = 0;
}

uint64_t static MeshBuffers.Identifier.positions.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for positions != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_2681C1C58;
  char v3 = word_2681C1C60;
  char v4 = HIBYTE(word_2681C1C60);
  *(void *)a1 = static MeshBuffers.Identifier.positions;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;

  return swift_bridgeObjectRetain();
}

void one-time initialization function for normals()
{
  unk_2681C1C75 = 0;
  unk_2681C1C76 = -5120;
  word_2681C1C78 = 0;
}

uint64_t static MeshBuffers.Identifier.normals.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for normals != -1) {
    swift_once();
  }
  uint64_t v2 = unk_2681C1C70;
  char v3 = word_2681C1C78;
  char v4 = HIBYTE(word_2681C1C78);
  *(void *)a1 = static MeshBuffers.Identifier.normals;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;

  return swift_bridgeObjectRetain();
}

void one-time initialization function for tangents()
{
  *(_WORD *)&algn_2681C1C88[6] = -4864;
  word_2681C1C90 = 0;
}

uint64_t static MeshBuffers.Identifier.tangents.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for tangents != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_2681C1C88;
  char v3 = word_2681C1C90;
  char v4 = HIBYTE(word_2681C1C90);
  *(void *)a1 = static MeshBuffers.Identifier.tangents;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;

  return swift_bridgeObjectRetain();
}

void one-time initialization function for bitangents()
{
  static MeshBuffers.Identifier.bitangents = 0x6942786574726576;
  unk_2681C1CA0 = 0xEF746E65676E6174;
  word_2681C1CA8 = 0;
}

uint64_t static MeshBuffers.Identifier.bitangents.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for bitangents != -1) {
    swift_once();
  }
  uint64_t v2 = unk_2681C1CA0;
  char v3 = word_2681C1CA8;
  char v4 = HIBYTE(word_2681C1CA8);
  *(void *)a1 = static MeshBuffers.Identifier.bitangents;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;

  return swift_bridgeObjectRetain();
}

void one-time initialization function for textureCoordinates()
{
  static MeshBuffers.Identifier.textureCoordinates = 0x5655786574726576;
  *(void *)algn_2681C1CB8 = 0xE800000000000000;
  word_2681C1CC0 = 0;
}

uint64_t static MeshBuffers.Identifier.textureCoordinates.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for textureCoordinates != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_2681C1CB8;
  char v3 = word_2681C1CC0;
  char v4 = HIBYTE(word_2681C1CC0);
  *(void *)a1 = static MeshBuffers.Identifier.textureCoordinates;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;

  return swift_bridgeObjectRetain();
}

void one-time initialization function for triangleIndices()
{
  unk_2681C1CD7 = -18;
  word_2681C1CD8 = 0;
}

uint64_t static MeshBuffers.Identifier.triangleIndices.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for triangleIndices != -1) {
    swift_once();
  }
  uint64_t v2 = unk_2681C1CD0;
  char v3 = word_2681C1CD8;
  char v4 = HIBYTE(word_2681C1CD8);
  *(void *)a1 = static MeshBuffers.Identifier.triangleIndices;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;

  return swift_bridgeObjectRetain();
}

uint64_t MeshBuffers.Identifier.description.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  if (*(unsigned char *)(v0 + 16)) {
    uint64_t v3 = 34;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*(unsigned char *)(v0 + 16)) {
    char v4 = (void *)0xE100000000000000;
  }
  else {
    char v4 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v1;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v3;
  v6._object = v4;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t MeshBuffers.Identifier.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static MeshBuffers.Identifier.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int MeshBuffers.Identifier.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MeshBuffers.Identifier()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MeshBuffers.Identifier()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MeshBuffers.Identifier()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MeshBuffers.Identifier(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t MeshBuffers.ElementType.genericAttributeDescriptor.getter()
{
  uint64_t v1 = (uint64_t *)MEMORY[0x263F37658];
  uint64_t result = 0;
  switch(*v0)
  {
    case 1:
      uint64_t v1 = (uint64_t *)MEMORY[0x263F37648];
      goto LABEL_12;
    case 2:
      uint64_t v1 = (uint64_t *)MEMORY[0x263F37650];
      goto LABEL_12;
    case 3:
      uint64_t v1 = (uint64_t *)MEMORY[0x263F37640];
      goto LABEL_12;
    case 4:
      uint64_t v1 = (uint64_t *)MEMORY[0x263F37630];
      goto LABEL_12;
    case 5:
      uint64_t v1 = (uint64_t *)MEMORY[0x263F37638];
      goto LABEL_12;
    case 6:
      uint64_t v1 = (uint64_t *)MEMORY[0x263F37610];
      goto LABEL_12;
    case 7:
      return result;
    case 8:
      uint64_t v1 = (uint64_t *)MEMORY[0x263F37618];
      goto LABEL_12;
    case 9:
      uint64_t v1 = (uint64_t *)MEMORY[0x263F37620];
      goto LABEL_12;
    case 0xA:
      uint64_t v1 = (uint64_t *)MEMORY[0x263F37628];
      goto LABEL_12;
    case 0xB:
      uint64_t v1 = (uint64_t *)MEMORY[0x263F37688];
      goto LABEL_12;
    default:
LABEL_12:
      uint64_t v3 = *v1;
      type metadata accessor for MeshAttributeDescriptor();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v3;
      return result;
  }
}

void MeshBuffers.ElementType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

unint64_t BufferDescriptor.init(bufferName:reRate:reType:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  if (a4 <= 0xAu)
  {
    uint64_t v8 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v8)
    {
      int v10 = byte_228332B0A[(char)a4];
      swift_bridgeObjectRetain();
      v16._countAndFlagsBits = a1;
      v16._object = (void *)a2;
      if (specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v16) == 8)
      {
LABEL_6:
        if (a3 <= 3u)
        {
          unsigned int v11 = 0x2010003u >> (8 * a3);
LABEL_15:
          swift_bridgeObjectRetain();
          v17._countAndFlagsBits = a1;
          v17._object = (void *)a2;
          unint64_t result = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v17);
          *(void *)a5 = a1;
          *(void *)(a5 + 8) = a2;
          *(unsigned char *)(a5 + 20) = 1;
          *(_DWORD *)(a5 + 16) = (result == 8) | (v11 << 16) | (v10 << 24);
          return result;
        }
      }
      else
      {
        char v15 = v10;
        if (MeshBuffers.Identifier.BufferName.validType(_:)((RealityFoundation::MeshBuffers::ElementType)&v15))
        {
          switch(v12)
          {
            case 5:
              swift_bridgeObjectRelease();
              break;
            default:
              char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v14 & 1) == 0) {
                goto LABEL_6;
              }
              break;
          }
          LOBYTE(v11) = 2;
          goto LABEL_15;
        }
      }
    }
  }
  unint64_t result = swift_bridgeObjectRelease();
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 13) = 0;
  return result;
}

uint64_t BufferDescriptor.description.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 20);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v1;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  if (v3) {
    uint64_t v7 = 695216160;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v3) {
    unint64_t v8 = 0xE400000000000000;
  }
  else {
    unint64_t v8 = 0xE000000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t MeshBuffers.Semantic.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 17);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

void static MeshBuffers.positions.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 15) = -18;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.normals.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.tangents.getter(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.bitangents.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x6942786574726576;
  *(void *)(a1 + 8) = 0xEF746E65676E6174;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.textureCoordinates.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x5655786574726576;
  *(void *)(a1 + 8) = 0xE800000000000000;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.triangleIndices.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 15) = -18;
  *(_WORD *)(a1 + 16) = 0;
}

unint64_t static MeshBuffers.custom<A>(_:type:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  unint64_t result = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v7);
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = result == 8;
  *(unsigned char *)(a3 + 17) = 0;
  return result;
}

void static MeshBuffers.jointInfluences.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD00000000000001FLL;
  *(void *)(a1 + 8) = 0x800000022834DB60;
  *(_WORD *)(a1 + 16) = 0;
}

void static MeshBuffers.jointInfluenceEndIndices.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xD000000000000023;
  *(void *)(a1 + 8) = 0x800000022834DB80;
  *(_WORD *)(a1 + 16) = 0;
}

void one-time initialization function for jointInfluences()
{
  static MeshBuffers.Identifier.jointInfluences = 0xD00000000000001FLL;
  *(void *)algn_2681C1CE8 = 0x800000022834DB60;
  word_2681C1CF0 = 0;
}

uint64_t static MeshBuffers.Identifier.jointInfluences.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for jointInfluences != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_2681C1CE8;
  char v3 = word_2681C1CF0;
  char v4 = HIBYTE(word_2681C1CF0);
  *(void *)a1 = static MeshBuffers.Identifier.jointInfluences;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;

  return swift_bridgeObjectRetain();
}

void one-time initialization function for jointInfluenceEndIndices()
{
  static MeshBuffers.Identifier.jointInfluenceEndIndices = 0xD000000000000023;
  unk_2681C1D00 = 0x800000022834DB80;
  word_2681C1D08 = 0;
}

uint64_t static MeshBuffers.Identifier.jointInfluenceEndIndices.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for jointInfluenceEndIndices != -1) {
    swift_once();
  }
  uint64_t v2 = unk_2681C1D00;
  char v3 = word_2681C1D08;
  char v4 = HIBYTE(word_2681C1D08);
  *(void *)a1 = static MeshBuffers.Identifier.jointInfluenceEndIndices;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;

  return swift_bridgeObjectRetain();
}

Swift::Bool __swiftcall MeshBuffer.Iterator.getChunk()()
{
  uint64_t v1 = v0;
  uint64_t v2 = ((uint64_t (*)(uint64_t))v0[2])(*v0);
  uint64_t v4 = v3;
  if (v3)
  {
    *uint64_t v1 = v2;
    swift_release();
    v1[1] = v4;
  }
  return v4 != 0;
}

uint64_t MeshBuffer.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = MEMORY[0x270FA5388](v6);
  int v10 = (char *)&v14 - v9;
  if (*(void *)(v2 + 8))
  {
    swift_retain();
    AnyIterator.next()();
    uint64_t v11 = *(void *)(v5 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if (MeshBuffer.Iterator.getChunk()()) {
        MeshBuffer.Iterator.next()(a1);
      }
      else {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, 1, 1, v5);
      }
      return swift_release();
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v10, v5);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v5);
    }
  }
  else
  {
    int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v5 - 8) + 56);
    return v12(a2, 1, 1, v5, v8);
  }
}

BOOL MeshBuffer.makeIterator()@<W0>(uint64_t a1@<X8>)
{
  swift_release();
  swift_release();
  swift_release();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 48);
  return MeshBuffer.Iterator.getChunk()();
}

uint64_t type metadata accessor for MeshBuffer.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MeshBuffer.count.getter()
{
  return *(void *)(v0 + 72);
}

void MeshBuffer.rate.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 80);
}

unsigned char *MeshBuffer.rate.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 80) = *result;
  return result;
}

uint64_t (*MeshBuffer.rate.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t specialized MeshBuffer.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 3;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 4;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 1;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 5;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 2;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 6;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 7;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 8;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = closure #1 in MeshBuffer.init<A>(_:)specialized partial apply;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = closure #2 in MeshBuffer.init<A>(_:)specialized partial apply;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = closure #3 in MeshBuffer.init<A>(_:)specialized partial apply;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = closure #4 in MeshBuffer.init<A>(_:)specialized partial apply;
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 9;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 10;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)a2 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a2 + 56) = v8;
  *(_WORD *)(a2 + 64) = 11;
  *(void *)(a2 + 72) = v4;
  *(unsigned char *)(a2 + 80) = 0;
  return swift_bridgeObjectRetain_n();
}

uint64_t specialized MeshBuffer.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 3;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 4;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 1;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 5;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 2;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 6;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 7;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 8;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 9;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 10;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v10;
  *(_WORD *)(a3 + 64) = 11;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

uint64_t specialized closure #3 in MeshBuffer.init<A>(_:)()
{
  uint64_t ModelPartBufferAttributeCount = REMeshAssetGetModelPartBufferAttributeCount();
  uint64_t v1 = (unsigned __int128)(ModelPartBufferAttributeCount * (__int128)12) >> 64;
  uint64_t result = 12 * ModelPartBufferAttributeCount;
  if (v1 == result >> 63)
  {
    v4[0] = specialized Data.init(count:)(result);
    v4[1] = v3;
    swift_retain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v4);
    return v4[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2[2];

  uint64_t result = REMeshAssetGetModelPartBufferAttributeCount();
  if ((unint64_t)(result - 0x800000000000000) >> 60 == 15)
  {
    v2[0] = specialized Data.init(count:)(16 * result);
    v2[1] = v1;
    swift_retain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v2);
    return v2[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2[2];

  uint64_t result = REMeshAssetGetModelPartBufferAttributeCount();
  if ((unint64_t)(result - 0x1000000000000000) >> 61 == 7)
  {
    v2[0] = specialized Data.init(count:)(8 * result);
    v2[1] = v1;
    swift_retain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v2);
    return v2[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2[2];

  uint64_t result = REMeshAssetGetModelPartBufferAttributeCount();
  if ((unint64_t)(result - 0x2000000000000000) >> 62 == 3)
  {
    v2[0] = specialized Data.init(count:)(4 * result);
    v2[1] = v1;
    swift_retain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v2);
    return v2[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2[2];

  uint64_t result = REMeshAssetGetModelPartBufferAttributeCount();
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    v2[0] = specialized Data.init(count:)(2 * result);
    v2[1] = v1;
    swift_retain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v2);
    return v2[0];
  }
  return result;
}

{
  uint64_t ModelPartBufferAttributeCount;
  uint64_t v1;
  uint64_t v3[2];

  uint64_t ModelPartBufferAttributeCount = REMeshAssetGetModelPartBufferAttributeCount();
  v3[0] = specialized Data.init(count:)(ModelPartBufferAttributeCount);
  v3[1] = v1;
  swift_retain();
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v3);
  return v3[0];
}

uint64_t specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 48);
  if ((v4 & 0x8000000000000000) == 0)
  {
    swift_retain();
    if (v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(a3);
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v4;
    }
    else
    {
      uint64_t v8 = MEMORY[0x263F8EE78];
    }
    uint64_t ModelPartBufferAttributeData = REMeshAssetGetModelPartBufferAttributeData();
    if (v4 < ModelPartBufferAttributeData)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v8 + 16) = ModelPartBufferAttributeData;
      swift_release();
      uint64_t v10 = *(void *)(v8 + 16);
      if (!v10)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      BOOL v11 = __OFADD__(a1, v10);
      uint64_t v12 = a1 + v10;
      if (!v11)
      {
        __swift_instantiateConcreteTypeFromMangledName(a4);
        uint64_t v13 = swift_allocObject();
        *(void *)(v13 + 16) = v8;
        *(void *)(v13 + 24) = 0;
        return v12;
      }
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a2 + 48);
  if ((v4 & 0x8000000000000000) == 0)
  {
    swift_retain();
    if (v4)
    {
      uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v7 + 16) = v4;
    }
    else
    {
      uint64_t v7 = MEMORY[0x263F8EE78];
    }
    uint64_t ModelPartBufferAttributeData = REMeshAssetGetModelPartBufferAttributeData();
    if (v4 < ModelPartBufferAttributeData)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v7 + 16) = ModelPartBufferAttributeData;
      swift_release();
      uint64_t v9 = *(void *)(v7 + 16);
      if (!v9)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      BOOL v10 = __OFADD__(a1, v9);
      uint64_t v11 = a1 + v9;
      if (!v10)
      {
        __swift_instantiateConcreteTypeFromMangledName(a4);
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = v7;
        *(void *)(v12 + 24) = 0;
        return v11;
      }
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MeshBuffer.elements.getter()
{
  uint64_t result = (*v0)();
  if (!result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_getWitnessTable();
    return Array.init<A>(_:)();
  }
  return result;
}

uint64_t MeshBuffer.usingRate(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  uint64_t v4 = *(void *)(v2 + 56);
  char v5 = *(unsigned char *)(v2 + 64);
  char v6 = *(unsigned char *)(v2 + 65);
  uint64_t v7 = *(void *)(v2 + 72);
  *(void *)a2 = *(void *)v2;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v2 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(v2 + 40);
  *(void *)(a2 + 56) = v4;
  *(unsigned char *)(a2 + 64) = v5;
  *(unsigned char *)(a2 + 65) = v6;
  *(void *)(a2 + 72) = v7;
  *(unsigned char *)(a2 + 80) = v3;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t MeshBuffer.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a2;
  uint64_t v16 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v18 - 8);
  __n128 v6 = MEMORY[0x270FA5388](v18);
  uint64_t v8 = (char *)&v16 - v7;
  char v9 = *((unsigned char *)v3 + 64);
  char v10 = *((unsigned char *)v3 + 65);
  uint64_t v11 = *((void *)v3 + 9);
  char v12 = *((unsigned char *)v3 + 80);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v4 - 8) + 56))((char *)&v16 - v7, 1, 1, v4, v6);
  uint64_t v32 = 1;
  long long v13 = v3[1];
  long long v24 = *v3;
  long long v25 = v13;
  long long v14 = v3[3];
  long long v26 = v3[2];
  long long v27 = v14;
  char v28 = v9;
  char v29 = v10;
  uint64_t v30 = v11;
  char v31 = v12;
  uint64_t v19 = v4;
  id v20 = &v32;
  uint64_t v21 = v8;
  uint64_t v22 = v16;
  uint64_t v23 = v17;
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v18);
}

{
  long long *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  unsigned char *v11;
  char v12;
  char v13;
  void (*v14)(unsigned char *, uint64_t, uint64_t, uint64_t, __n128);
  long long v15;
  long long v16;
  void (*v17)(unsigned char *, uint64_t);
  uint64_t v18;
  unsigned char v20[12];
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned char *v29;
  unsigned char *v30;
  uint64_t v31;
  uint64_t v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  long long v25 = a3;
  long long v24 = a2;
  uint64_t v23 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  long long v26 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v20[-v10];
  char v12 = *((unsigned char *)v3 + 64);
  long long v13 = *((unsigned char *)v3 + 65);
  uint64_t v22 = *((void *)v3 + 9);
  uint64_t v21 = *((unsigned __int8 *)v3 + 80);
  long long v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v4 - 8) + 56);
  v14(&v20[-v10], 1, 1, v4, v9);
  ((void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))v14)(v7, 1, 1, v4);
  uint64_t v41 = 1;
  char v15 = v3[1];
  uint64_t v33 = *v3;
  int v34 = v15;
  uint64_t v16 = v3[3];
  os_log_t v35 = v3[2];
  uint64_t v36 = v16;
  uint64_t v37 = v12;
  uint64_t v38 = v13;
  uint64_t v39 = v22;
  uint64_t v40 = v21;
  long long v27 = v4;
  char v28 = &v41;
  char v29 = v11;
  uint64_t v30 = v7;
  char v31 = v23;
  uint64_t v32 = v24;
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  uint64_t v17 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  uint64_t v18 = v26;
  v17(v7, v26);
  return ((uint64_t (*)(unsigned char *, uint64_t))v17)(v11, v18);
}

{
  long long *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unsigned char *v14;
  char v15;
  void (*v16)(unsigned char *, uint64_t, uint64_t, uint64_t, __n128);
  long long v17;
  long long v18;
  void (*v19)(unsigned char *, uint64_t);
  uint64_t v20;
  unsigned char v22[4];
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned char *v32;
  unsigned char *v33;
  unsigned char *v34;
  uint64_t v35;
  uint64_t v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  char v28 = a3;
  long long v27 = a2;
  long long v26 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  char v29 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  char v10 = &v22[-v9];
  char v12 = MEMORY[0x270FA5388](v11);
  long long v14 = &v22[-v13];
  char v15 = *((unsigned char *)v3 + 64);
  long long v25 = *((unsigned __int8 *)v3 + 65);
  long long v24 = *((void *)v3 + 9);
  uint64_t v23 = *((unsigned __int8 *)v3 + 80);
  uint64_t v16 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v4 - 8) + 56);
  v16(&v22[-v13], 1, 1, v4, v12);
  ((void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))v16)(v10, 1, 1, v4);
  ((void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))v16)(v7, 1, 1, v4);
  uint64_t v45 = 1;
  uint64_t v17 = v3[1];
  uint64_t v37 = *v3;
  uint64_t v38 = v17;
  uint64_t v18 = v3[3];
  uint64_t v39 = v3[2];
  uint64_t v40 = v18;
  uint64_t v41 = v15;
  unint64_t v42 = v25;
  unint64_t v43 = v24;
  uint64_t v44 = v23;
  uint64_t v30 = v4;
  char v31 = &v45;
  uint64_t v32 = v14;
  uint64_t v33 = v10;
  int v34 = v7;
  os_log_t v35 = v26;
  uint64_t v36 = v27;
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  id v20 = v29;
  v19(v7, v29);
  v19(v10, v20);
  return ((uint64_t (*)(unsigned char *, uint64_t))v19)(v14, v20);
}

void closure #1 in MeshBuffer.forEach(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(char *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Optional();
  __n128 v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v21 - v16;
  if (*a2 != 2)
  {
    if (*a2 != 1) {
      return;
    }
    (*(void (**)(uint64_t, uint64_t, __n128))(v14 + 8))(a3, v13, v15);
    uint64_t v18 = *(void *)(a6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a3, a1, a6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a3, 0, 1, a6);
    uint64_t v19 = 2;
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t, __n128))(v14 + 16))(v17, a3, v15);
  uint64_t v20 = *(void *)(a6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v17, 1, a6) == 1)
  {
    __break(1u);
    return;
  }
  a4(v17, a1);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v17, a6);
  if (!v6)
  {
    uint64_t v19 = 1;
LABEL_7:
    *a2 = v19;
  }
}

void partial apply for closure #1 in MeshBuffer.forEach(_:)(uint64_t a1)
{
  closure #1 in MeshBuffer.forEach(_:)(a1, *(uint64_t **)(v1 + 24), *(void *)(v1 + 32), *(void (**)(char *, uint64_t))(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 16));
}

{
  uint64_t v1;

  closure #1 in MeshBuffer.forEach(_:)(a1, *(uint64_t **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void (**)(char *, char *, uint64_t))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16));
}

{
  uint64_t v1;

  closure #1 in MeshBuffer.forEach(_:)(a1, *(uint64_t **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void (**)(char *, char *, char *, uint64_t))(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16));
}

void closure #1 in MeshBuffer.forEach(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v31 = a6;
  uint64_t v32 = a5;
  uint64_t v34 = a1;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  __n128 v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v18 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v28 - v17;
  uint64_t v20 = *a2;
  if (*a2 == 1)
  {
    uint64_t v33 = a2;
    uint64_t v21 = 2;
LABEL_10:
    (*(void (**)(uint64_t, uint64_t, __n128))(v13 + 8))(a3, v12, v18);
    uint64_t v27 = *(void *)(a7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(a3, v34, a7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(a3, 0, 1, a7);
    goto LABEL_11;
  }
  if (v20 != 3)
  {
    if (v20 != 2) {
      return;
    }
    uint64_t v33 = a2;
    uint64_t v21 = 3;
    a3 = a4;
    goto LABEL_10;
  }
  uint64_t v33 = a2;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v29 = v7;
  uint64_t v30 = v22;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v22)((char *)&v28 - v17, a3, v12, v18);
  uint64_t v23 = *(void *)(a7 - 8);
  long long v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v24(v19, 1, a7) == 1)
  {
    __break(1u);
    goto LABEL_14;
  }
  v30(v15, a4, v12);
  if (v24(v15, 1, a7) == 1)
  {
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v25 = v29;
  v32(v19, v15, v34);
  long long v26 = *(void (**)(char *, uint64_t))(v23 + 8);
  v26(v15, a7);
  v26(v19, a7);
  if (v25) {
    return;
  }
  uint64_t v21 = 1;
LABEL_11:
  *uint64_t v33 = v21;
}

void closure #1 in MeshBuffer.forEach(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, char *, uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a7;
  uint64_t v33 = a6;
  uint64_t v34 = a5;
  uint64_t v35 = a4;
  uint64_t v38 = a1;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  __n128 v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  __n128 v18 = (char *)&v30 - v17;
  __n128 v21 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v30 - v20;
  uint64_t v36 = a2;
  uint64_t v23 = *a2 - 1;
  uint64_t v37 = v8;
  uint64_t v24 = 2;
  switch(v23)
  {
    case 0:
      goto LABEL_4;
    case 1:
      uint64_t v24 = 3;
      a3 = v35;
      goto LABEL_4;
    case 2:
      uint64_t v24 = 4;
      a3 = v34;
LABEL_4:
      (*(void (**)(uint64_t, uint64_t, __n128))(v13 + 8))(a3, v12, v21);
      uint64_t v25 = *(void *)(a8 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(a3, v38, a8);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(a3, 0, 1, a8);
      goto LABEL_5;
    case 3:
      long long v26 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
      v26((char *)&v30 - v20, a3, v12, v21);
      uint64_t v27 = *(void *)(a8 - 8);
      uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
      if (v31(v22, 1, a8) == 1)
      {
        __break(1u);
        goto LABEL_13;
      }
      ((void (*)(char *, uint64_t, uint64_t))v26)(v18, v35, v12);
      if (v31(v18, 1, a8) == 1)
      {
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      ((void (*)(char *, uint64_t, uint64_t))v26)(v15, v34, v12);
      if (v31(v15, 1, a8) == 1)
      {
LABEL_14:
        __break(1u);
        JUMPOUT(0x2280748BCLL);
      }
      uint64_t v28 = v37;
      v33(v22, v18, v15, v38);
      uint64_t v29 = *(void (**)(char *, uint64_t))(v27 + 8);
      v29(v15, a8);
      v29(v18, a8);
      v29(v22, a8);
      if (!v28)
      {
        uint64_t v37 = 0;
        uint64_t v24 = 1;
LABEL_5:
        uint64_t *v36 = v24;
      }
      return;
    default:
      return;
  }
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MeshBuffer<A>()
{
  uint64_t v0 = specialized Sequence._copyToContiguousArray()();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

double MeshBuffer<A>.init(_:)@<D0>(uint64_t a1@<X8>)
{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(_:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

double MeshBuffer<A>.init(elements:indices:)@<D0>(uint64_t a1@<X8>)
{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

{
  return MeshBuffer<A>.init(elements:indices:)((void (*)(_OWORD *__return_ptr))specialized MeshBuffer.init<A>(_:), a1);
}

uint64_t MeshBuffer<A>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x263F8E498], a2);
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v7;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v7;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v12(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v10;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v11;
  *(_WORD *)(a3 + 64) = 3;
  *(void *)(a3 + 72) = v7;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t result;

  uint64_t v5 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x263F8E778], a2);
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v7;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v7;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v12(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v10;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v11;
  *(_WORD *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = v7;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t result;

  uint64_t v5 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x263F8E4F0], a2);
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v7;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v7;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v12(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v10;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v11;
  *(_WORD *)(a3 + 64) = 4;
  *(void *)(a3 + 72) = v7;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t result;

  uint64_t v5 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x263F8E888], a2);
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v7;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v7;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v12(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v10;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v11;
  *(_WORD *)(a3 + 64) = 1;
  *(void *)(a3 + 72) = v7;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t result;

  uint64_t v5 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x263F8E548], a2);
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v7;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v7;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v12(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v10;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v11;
  *(_WORD *)(a3 + 64) = 5;
  *(void *)(a3 + 72) = v7;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t result;

  uint64_t v5 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x263F8E8F8], a2);
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v7;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v7;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v12(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v10;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v11;
  *(_WORD *)(a3 + 64) = 2;
  *(void *)(a3 + 72) = v7;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t result;

  uint64_t v5 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x263F8D5C8], a2);
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v7;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v7;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v12(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v10;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v11;
  *(_WORD *)(a3 + 64) = 6;
  *(void *)(a3 + 72) = v7;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t result;

  uint64_t v5 = specialized SequenceBuffer.init<A>(_:)(a1, MEMORY[0x263F8D538], a2);
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v7;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v7;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v12(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v10;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v11;
  *(_WORD *)(a3 + 64) = 7;
  *(void *)(a3 + 72) = v7;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t result;

  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  uint64_t v7 = specialized SequenceBuffer.init<A>(_:)(a1, v6, a2);
  uint64_t v9 = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v7;
  *(void *)(v11 + 24) = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v9;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v7;
  *(void *)(v13 + 24) = v9;
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v14(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v12;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v13;
  *(_WORD *)(a3 + 64) = 8;
  *(void *)(a3 + 72) = v9;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t result;

  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  uint64_t v7 = specialized SequenceBuffer.init<A>(_:)(a1, v6, a2);
  uint64_t v9 = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v7;
  *(void *)(v11 + 24) = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v9;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v7;
  *(void *)(v13 + 24) = v9;
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v14(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v12;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v13;
  *(_WORD *)(a3 + 64) = 9;
  *(void *)(a3 + 72) = v9;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t result;

  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  uint64_t v7 = specialized SequenceBuffer.init<A>(_:)(a1, v6, a2);
  uint64_t v9 = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v7;
  *(void *)(v11 + 24) = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v9;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v7;
  *(void *)(v13 + 24) = v9;
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v14(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v12;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v13;
  *(_WORD *)(a3 + 64) = 10;
  *(void *)(a3 + 72) = v9;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t result;

  uint64_t v5 = specialized SequenceBuffer.init<A>(_:)(a1, (uint64_t)&type metadata for MeshJointInfluence, a2);
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v5;
  *(void *)(v10 + 24) = v7;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v7;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  swift_retain_n();
  uint64_t result = v12(a1, a2);
  *(void *)a3 = __RKEntityLookAtCameraAction.reversed();
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 40) = v10;
  *(void *)(a3 + 48) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
  *(void *)(a3 + 56) = v11;
  *(_WORD *)(a3 + 64) = 11;
  *(void *)(a3 + 72) = v7;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

double MeshBuffer<A>.init(_:)@<D0>(void (*a1)(_OWORD *__return_ptr)@<X1>, uint64_t a2@<X8>)
{
  a1(v11);
  char v3 = v12;
  char v4 = v13;
  uint64_t v5 = v14;
  char v6 = v15;
  double result = *(double *)v11;
  long long v8 = v11[1];
  long long v9 = v11[2];
  long long v10 = v11[3];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  *(unsigned char *)(a2 + 64) = v3;
  *(unsigned char *)(a2 + 65) = v4;
  *(void *)(a2 + 72) = v5;
  *(unsigned char *)(a2 + 80) = v6;
  return result;
}

double MeshBuffer<A>.init(elements:indices:)@<D0>(void (*a1)(_OWORD *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  a1(v11);
  char v3 = v12;
  char v4 = v13;
  uint64_t v5 = v14;
  char v6 = v15;
  double result = *(double *)v11;
  long long v8 = v11[1];
  long long v9 = v11[2];
  long long v10 = v11[3];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  *(unsigned char *)(a2 + 64) = v3;
  *(unsigned char *)(a2 + 65) = v4;
  *(void *)(a2 + 72) = v5;
  *(unsigned char *)(a2 + 80) = v6;
  return result;
}

uint64_t IndexingBuffer.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4 >= *(void *)(*(void *)(v2 + 8) + 16))
  {
    long long v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(result + 16) - 8) + 56);
    return v9(a2, 1, 1);
  }
  else
  {
    if (v4 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v5 = *(void *)(result + 16);
      swift_bridgeObjectRetain();
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      double result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 0, 1, v5);
      uint64_t v6 = *(void *)(v2 + 16);
      BOOL v7 = __OFADD__(v6, 1);
      uint64_t v8 = v6 + 1;
      if (!v7)
      {
        *(void *)(v2 + 16) = v8;
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t ConversionBuffer.ConvertingIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v9 = (char *)&v15 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnyIterator.next()();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, v5);
    (*(void (**)(char *))(v2 + 8))(v13);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 0, 1);
  }
}

unsigned __int16 *closure #1 in MeshBuffer<A>.asUInt32.getter@<X0>(unsigned __int16 *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

float closure #1 in MeshBuffer<A>.asSIMD3.getter@<S0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&long long v2 = *(void *)a1;
  *((void *)&v2 + 1) = *(unsigned int *)(a1 + 8);
  *a2 = v2;
  return *(float *)&v2;
}

unint64_t static MeshBuffers.blendShapeOffsets(named:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain_n();
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  unint64_t result = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v7);
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 17) = result == 8;
  return result;
}

__n128 MeshBufferDictionary.BufferEntry.init<A>(_:buffer:)@<Q0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  void (*v13)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char v16;
  __n128 result;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  long long v23;
  long long v24;
  long long v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;

  uint64_t v24 = a2[1];
  uint64_t v25 = *a2;
  uint64_t v22 = (__n128)a2[3];
  uint64_t v23 = a2[2];
  char v9 = *((unsigned char *)a2 + 64);
  char v10 = *((unsigned char *)a2 + 65);
  uint64_t v11 = *((void *)a2 + 9);
  char v12 = *((unsigned char *)a2 + 80);
  char v13 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24);
  v13(&v26, a3, a4);
  uint64_t v20 = v27;
  __n128 v21 = v26;
  __n128 v18 = v29;
  uint64_t v19 = v28;
  v13(&v26, a3, a4);
  uint64_t v15 = v26;
  uint64_t v14 = v27;
  if (one-time initialization token for triangleIndices != -1) {
    swift_once();
  }
  uint64_t v16 = 2;
  if (v15 != static MeshBuffers.Identifier.triangleIndices || v14 != unk_2681C1CD0)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      uint64_t v16 = 2;
    }
    else {
      uint64_t v16 = v12;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  swift_bridgeObjectRelease();
  *(void *)a5 = v21;
  *(void *)(a5 + 8) = v20;
  *(unsigned char *)(a5 + 16) = v19;
  *(unsigned char *)(a5 + 17) = v18;
  *(void *)(a5 + 24) = v11;
  *(unsigned char *)(a5 + 32) = v16;
  *(unsigned char *)(a5 + 33) = v9;
  *(unsigned char *)(a5 + 34) = v10;
  *(_OWORD *)(a5 + 40) = v25;
  *(_OWORD *)(a5 + 56) = v24;
  *(_OWORD *)(a5 + 72) = v23;
  unint64_t result = v22;
  *(__n128 *)(a5 + 88) = v22;
  *(unsigned char *)(a5 + 104) = v9;
  *(unsigned char *)(a5 + 105) = v10;
  *(void *)(a5 + 112) = v11;
  *(unsigned char *)(a5 + 120) = v12;
  return result;
}

uint64_t MeshBufferDictionary.BufferEntry.asGPUData.getter()
{
  return (*(uint64_t (**)(void))(v0 + 72))();
}

double MeshBufferDictionary.BufferEntry.get<A>()@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(v2 + 33);
  if (v3 != 1)
  {
    if (v3 == 9
      && *(unsigned char *)(v2 + 34) == 1
      && __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>) == a1)
    {
      type metadata accessor for MeshBuffer();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffer<FloatVector3Packed>);
      if (swift_dynamicCast())
      {
        uint64_t v4 = swift_allocObject();
        *(_OWORD *)(v4 + 16) = v19;
        *(_OWORD *)(v4 + 32) = v20;
        *(_OWORD *)(v4 + 48) = v21;
        *(_OWORD *)(v4 + 64) = v22;
        *(unsigned char *)(v4 + 80) = v23;
        *(unsigned char *)(v4 + 81) = v24;
        *(void *)(v4 + 88) = v25;
        *(unsigned char *)(v4 + 96) = v26;
        *(void *)(v4 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
        *(void *)(v4 + 112) = 0;
        uint64_t v5 = (void *)swift_allocObject();
        void v5[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
        v5[3] = v4;
        v5[4] = v25;
        uint64_t v6 = (void *)swift_allocObject();
        v6[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
        v6[3] = v4;
        v6[4] = v25;
        Swift::String v7 = (void *)swift_allocObject();
        v7[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
        v7[3] = v4;
        v7[4] = v25;
        uint64_t v8 = (void *)swift_allocObject();
        v8[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
        v8[3] = v4;
        v8[4] = v25;
        swift_retain();
        swift_retain_n();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffer<SIMD3<Float>>);
        type metadata accessor for MeshBuffer();
        char v9 = swift_dynamicCast();
        uint64_t v10 = a2;
        if (v9)
        {
          uint64_t v11 = 256;
          if (!v24) {
            uint64_t v11 = 0;
          }
LABEL_9:
          double result = *(double *)&v19;
          *(_OWORD *)a2 = v19;
          *(_OWORD *)(a2 + 16) = v20;
          *(_OWORD *)(a2 + 32) = v21;
          *(_OWORD *)(a2 + 48) = v22;
          *(void *)(a2 + 64) = v11 | v23;
          *(void *)(a2 + 72) = v25;
          *(unsigned char *)(a2 + 80) = v26;
          return result;
        }
      }
      else
      {
        uint64_t v10 = a2;
      }
      *(unsigned char *)(v10 + 80) = 0;
      double result = 0.0;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)uint64_t v10 = 0u;
      return result;
    }
LABEL_11:
    type metadata accessor for MeshBuffer();
    type metadata accessor for MeshBuffer();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if ((swift_dynamicCast() & 1) == 0)
    {
      *(unsigned char *)(a2 + 80) = 0;
      double result = 0.0;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
    }
    return result;
  }
  if (a1 != MEMORY[0x263F8E8F8]) {
    goto LABEL_11;
  }
  type metadata accessor for MeshBuffer();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffer<UInt16>);
  if (swift_dynamicCast())
  {
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = v19;
    *(_OWORD *)(v13 + 32) = v20;
    *(_OWORD *)(v13 + 48) = v21;
    *(_OWORD *)(v13 + 64) = v22;
    *(unsigned char *)(v13 + 80) = v23;
    *(unsigned char *)(v13 + 81) = v24;
    *(void *)(v13 + 88) = v25;
    *(unsigned char *)(v13 + 96) = v26;
    *(void *)(v13 + 104) = closure #1 in MeshBuffer<A>.asUInt32.getter;
    *(void *)(v13 + 112) = 0;
    uint64_t v14 = (void *)swift_allocObject();
    _OWORD v14[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
    v14[3] = v13;
    v14[4] = v25;
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
    v15[3] = v13;
    v15[4] = v25;
    uint64_t v16 = (void *)swift_allocObject();
    _OWORD v16[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
    v16[3] = v13;
    v16[4] = v25;
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = partial apply for specialized closure #1 in ConversionBuffer.init(_:_:);
    v17[3] = v13;
    v17[4] = v25;
    swift_retain();
    swift_retain_n();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffer<UInt32>);
    type metadata accessor for MeshBuffer();
    if (swift_dynamicCast())
    {
      uint64_t v11 = 256;
      if (!v24) {
        uint64_t v11 = 0;
      }
      goto LABEL_9;
    }
  }
  *(unsigned char *)(a2 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t protocol witness for MeshBufferErased.id.getter in conformance MeshBufferDictionary.BufferEntry<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 17);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;
  return swift_bridgeObjectRetain();
}

void protocol witness for MeshBufferErased.rate.getter in conformance MeshBufferDictionary.BufferEntry<A>(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

void protocol witness for MeshBufferErased.elementType.getter in conformance MeshBufferDictionary.BufferEntry<A>(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 33);
}

double protocol witness for MeshBufferErased.get<A>() in conformance MeshBufferDictionary.BufferEntry<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MeshBufferDictionary.BufferEntry.get<A>()(a1, a2);
}

double MeshBufferDictionary.subscript.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 24))(v17, a2, a3);
  if (*(void *)(a1 + 16)
    && (!v19 ? (__int16 v6 = 0) : (__int16 v6 = 256),
        unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v17[0], v17[1], v6 | v18),
        (v8 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(void *)(a1 + 56) + 40 * v7, (uint64_t)&v14);
    swift_bridgeObjectRelease();
    if (*((void *)&v15 + 1))
    {
      outlined init with take of BindableDataInternal(&v14, (uint64_t)v20);
      uint64_t v9 = v21;
      uint64_t v10 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v11(AssociatedTypeWitness, v9, v10);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      return result;
    }
  }
  else
  {
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    swift_bridgeObjectRelease();
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v14, &demangling cache variable for type metadata for MeshBufferErased?);
  *(unsigned char *)(a4 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  return result;
}

uint64_t MeshBufferDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v19)(void *__return_ptr, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  long long v49;
  long long v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  char v57;
  uint64_t v58[2];
  unsigned __int8 v59;
  char v60;
  uint64_t v61;
  _UNKNOWN **v62;
  void v63[2];
  unsigned __int8 v64;
  unsigned __int8 v65;

  uint64_t v4 = *(void *)(a3 - 8);
  __n128 v10 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)v5;
  if (*(void *)v5)
  {
    __n128 v47 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v48 = *(void *)(v5 + 72);
    uint64_t v13 = *(void *)(v5 + 56);
    uint64_t v46 = *(void *)(v5 + 64);
    uint64_t v14 = *(void *)(v5 + 40);
    uint64_t v41 = *(void *)(v5 + 48);
    uint64_t v15 = v41;
    uint64_t v32 = v14;
    uint64_t v40 = *(void *)(v5 + 32);
    uint64_t v16 = v40;
    uint64_t v44 = v3;
    uint64_t v18 = *(void *)(v5 + 16);
    uint64_t v17 = *(void *)(v5 + 24);
    uint64_t v45 = v4;
    uint64_t v39 = v18;
    uint64_t v31 = *(void *)(v5 + 8);
    uint64_t v35 = (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    char v19 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, __n128))(v8 + 24);
    uint64_t v38 = v12;
    long long v20 = v6;
    uint64_t v34 = v6;
    uint64_t v21 = v7;
    uint64_t v33 = v8;
    v19(v63, v7, v8, v10);
    unint64_t v43 = v63[0];
    unint64_t v42 = v63[1];
    uint64_t v37 = v64;
    uint64_t v36 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v11, v20, v21);
    *(void *)&unint64_t v49 = v12;
    *((void *)&v49 + 1) = v31;
    *(void *)&uint64_t v50 = v18;
    *((void *)&v50 + 1) = v17;
    os_log_type_t v51 = v16;
    int v52 = v32;
    BOOL v53 = v15;
    uint64_t v54 = v13;
    uint64_t v55 = v46 & 0x1FF;
    uint64_t v56 = v48;
    uint64_t v57 = v47;
    uint64_t v22 = v33;
    swift_getAssociatedTypeWitness();
    os_log_t v61 = type metadata accessor for MeshBufferDictionary.BufferEntry();
    os_log_t v62 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    unsigned __int8 v23 = swift_allocObject();
    char v24 = v23 + 16;
    v58[0] = v23;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    MeshBufferDictionary.BufferEntry.init<A>(_:buffer:)(v35, &v49, v21, v22, v24);
    if (v36) {
      uint64_t v25 = 256;
    }
    else {
      uint64_t v25 = 0;
    }
    specialized Dictionary.subscript.setter((uint64_t)v58, v43, v42, v25 | v37);
    outlined consume of MeshBuffer<SIMD3<Float>>?(v38);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v34, v21);
  }
  else
  {
    uint64_t v27 = v6;
    uint64_t v28 = v7;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(v8 + 24))(v58, v7, v8, v10);
    if (v60) {
      uint64_t v29 = 256;
    }
    else {
      uint64_t v29 = 0;
    }
    os_log_type_t v51 = 0;
    unint64_t v49 = 0u;
    uint64_t v50 = 0u;
    specialized Dictionary.subscript.setter((uint64_t)&v49, v58[0], v58[1], v29 | v59);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v27, v28);
  }
}

uint64_t AnyMeshBuffer.id.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t AnyMeshBuffer.count.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t AnyMeshBuffer.rate.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t AnyMeshBuffer.elementType.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t AnyMeshBuffer.get<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, v4, v5);
}

uint64_t specialized MeshBufferContainer.positions.getter@<X0>(uint64_t a1@<X8>)
{
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;

  uint64_t v3 = *(void *)(v1 + 16);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_5;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
  if ((v5 & 1) == 0) {
    goto LABEL_5;
  }
  outlined init with copy of __REAssetService(*(void *)(v3 + 56) + 40 * v4, (uint64_t)&v27);
  outlined init with take of BindableDataInternal((long long *)&v27, (uint64_t)&v19);
  uint64_t v6 = *((void *)&v20 + 1);
  uint64_t v7 = v21;
  __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
  uint64_t v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v8(&v27, v9, v6, v7);
  double result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  if (v27)
  {
    uint64_t v11 = v34;
    uint64_t v12 = v33;
    uint64_t v13 = v32;
    uint64_t v14 = v31;
    *(void *)a1 = v27;
    *(_OWORD *)(a1 + 8) = v28;
    *(_OWORD *)(a1 + 24) = v29;
    *(_OWORD *)(a1 + 40) = v30;
    uint64_t v15 = (v13 >> 8) & 1;
    *(void *)(a1 + 56) = v14;
  }
  else
  {
LABEL_5:
    double result = specialized MeshBuffer.init<A>(_:)(MEMORY[0x263F8EE78], (uint64_t)&v19);
    LOBYTE(v13) = v23;
    LOBYTE(v15) = v24;
    uint64_t v12 = v25;
    uint64_t v11 = v26;
    uint64_t v16 = v20;
    uint64_t v17 = v21;
    uint64_t v18 = v22;
    *(_OWORD *)a1 = v19;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)(a1 + 48) = v18;
  }
  *(unsigned char *)(a1 + 64) = v13;
  *(unsigned char *)(a1 + 65) = v15;
  *(void *)(a1 + 72) = v12;
  *(unsigned char *)(a1 + 80) = v11;
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;

  uint64_t v3 = *v1;
  if (!*(void *)(v3 + 16)) {
    goto LABEL_5;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
  if ((v5 & 1) == 0) {
    goto LABEL_5;
  }
  outlined init with copy of __REAssetService(*(void *)(v3 + 56) + 40 * v4, (uint64_t)&v27);
  outlined init with take of BindableDataInternal((long long *)&v27, (uint64_t)&v19);
  uint64_t v6 = *((void *)&v20 + 1);
  uint64_t v7 = v21;
  __swift_project_boxed_opaque_existential_1(&v19, *((uint64_t *)&v20 + 1));
  uint64_t v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v8(&v27, v9, v6, v7);
  double result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  if (v27)
  {
    uint64_t v11 = v34;
    uint64_t v12 = v33;
    uint64_t v13 = v32;
    uint64_t v14 = v31;
    *(void *)a1 = v27;
    *(_OWORD *)(a1 + 8) = v28;
    *(_OWORD *)(a1 + 24) = v29;
    *(_OWORD *)(a1 + 40) = v30;
    uint64_t v15 = (v13 >> 8) & 1;
    *(void *)(a1 + 56) = v14;
  }
  else
  {
LABEL_5:
    double result = specialized MeshBuffer.init<A>(_:)(MEMORY[0x263F8EE78], (uint64_t)&v19);
    LOBYTE(v13) = v23;
    LOBYTE(v15) = v24;
    uint64_t v12 = v25;
    uint64_t v11 = v26;
    uint64_t v16 = v20;
    uint64_t v17 = v21;
    uint64_t v18 = v22;
    *(_OWORD *)a1 = v19;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)(a1 + 48) = v18;
  }
  *(unsigned char *)(a1 + 64) = v13;
  *(unsigned char *)(a1 + 65) = v15;
  *(void *)(a1 + 72) = v12;
  *(unsigned char *)(a1 + 80) = v11;
  return result;
}

void *MeshBufferContainer.positions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *(*v6)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  void *result;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char v33;

  strcpy((char *)&v18, "vertexPosition");
  HIBYTE(v18) = -18;
  LOWORD(v19) = 0;
  uint64_t v6 = *(void *(**)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  uint64_t v8 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(&lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  double result = v6(&v26, &v18, v7, v8, a1, a2);
  if (v26)
  {
    __n128 v10 = v33;
    uint64_t v11 = v32;
    uint64_t v12 = v31;
    uint64_t v13 = v30;
    *(void *)a3 = v26;
    *(_OWORD *)(a3 + 8) = v27;
    *(_OWORD *)(a3 + 24) = v28;
    *(_OWORD *)(a3 + 40) = v29;
    uint64_t v14 = (v12 >> 8) & 1;
    *(void *)(a3 + 56) = v13;
  }
  else
  {
    double result = (void *)specialized MeshBuffer.init<A>(_:)(MEMORY[0x263F8EE78], (uint64_t)&v18);
    LOBYTE(v12) = v22;
    LOBYTE(v14) = v23;
    uint64_t v11 = v24;
    __n128 v10 = v25;
    uint64_t v15 = v19;
    uint64_t v16 = v20;
    uint64_t v17 = v21;
    *(_OWORD *)a3 = v18;
    *(_OWORD *)(a3 + 16) = v15;
    *(_OWORD *)(a3 + 32) = v16;
    *(_OWORD *)(a3 + 48) = v17;
  }
  *(unsigned char *)(a3 + 64) = v12;
  *(unsigned char *)(a3 + 65) = v14;
  *(void *)(a3 + 72) = v11;
  *(unsigned char *)(a3 + 80) = v10;
  return result;
}

double key path getter for MeshBufferContainer.positions : <A>A@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  MeshBufferContainer.positions.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8), (uint64_t)v11);
  char v4 = v14;
  char v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v11[1];
  *(_OWORD *)a3 = v11[0];
  *(_OWORD *)(a3 + 16) = v8;
  double result = *(double *)&v12;
  long long v10 = v13;
  *(_OWORD *)(a3 + 32) = v12;
  *(_OWORD *)(a3 + 48) = v10;
  *(unsigned char *)(a3 + 64) = v4;
  *(unsigned char *)(a3 + 65) = v5;
  *(void *)(a3 + 72) = v6;
  *(unsigned char *)(a3 + 80) = v7;
  return result;
}

uint64_t key path setter for MeshBufferContainer.positions : <A>A(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 16);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v6 = a1[7];
  char v7 = *((unsigned char *)a1 + 64);
  char v8 = *((unsigned char *)a1 + 65);
  uint64_t v9 = a1[9];
  char v10 = *((unsigned char *)a1 + 80);
  uint64_t v13 = *a1;
  long long v12 = *(_OWORD *)(a1 + 3);
  long long v14 = *(_OWORD *)(a1 + 1);
  long long v15 = v12;
  long long v16 = *(_OWORD *)(a1 + 5);
  uint64_t v17 = v6;
  char v18 = v7;
  char v19 = v8;
  uint64_t v20 = v9;
  char v21 = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return MeshBufferContainer.positions.setter((uint64_t)&v13, v4, v5);
}

uint64_t MeshBufferContainer.positions.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  char v7 = *(unsigned char *)(a1 + 80);
  uint64_t v8 = 256;
  if (!*(unsigned char *)(a1 + 65)) {
    uint64_t v8 = 0;
  }
  long long v9 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v9;
  long long v10 = *(_OWORD *)(a1 + 48);
  uint64_t v17[2] = *(_OWORD *)(a1 + 32);
  v17[3] = v10;
  uint64_t v18 = v8 | v5;
  uint64_t v19 = v6;
  char v20 = v7;
  strcpy(v15, "vertexPosition");
  v15[15] = -18;
  __int16 v16 = 0;
  uint64_t v11 = *(uint64_t (**)(_OWORD *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  uint64_t v13 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(&lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  return v11(v17, v15, v12, v13, a2, a3);
}

void (*MeshBufferContainer.positions.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  char v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  MeshBufferContainer.positions.getter(a2, a3, (uint64_t)v7);
  return MeshBufferContainer.positions.modify;
}

void MeshBufferContainer.positions.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  uint64_t v10 = v2[7];
  char v11 = *((unsigned char *)v2 + 64);
  char v12 = *((unsigned char *)v2 + 65);
  uint64_t v13 = v2[9];
  char v14 = *((unsigned char *)v2 + 80);
  uint64_t v15 = v2[12];
  uint64_t v16 = v2[11];
  v17[0] = v4;
  v17[1] = v3;
  uint64_t v17[2] = v5;
  v17[3] = v6;
  _OWORD v17[4] = v7;
  v17[5] = v8;
  v17[6] = v9;
  v17[7] = v10;
  char v18 = v11;
  char v19 = v12;
  uint64_t v20 = v13;
  char v21 = v14;
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    MeshBufferContainer.positions.setter((uint64_t)v17, v16, v15);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    MeshBufferContainer.positions.setter((uint64_t)v17, v16, v15);
  }

  free(v2);
}

uint64_t MeshBufferContainer.normals.getter(uint64_t a1, uint64_t a2)
{
  return MeshBufferContainer.normals.getter(a1, a2, 0x6F4E786574726576, 0xEC0000006C616D72, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

uint64_t MeshBufferContainer.normals.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MeshBufferContainer.normals.setter(a1, a2, a3, 0x6F4E786574726576, 0xEC0000006C616D72, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

void (*MeshBufferContainer.normals.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  MeshBufferContainer.normals.getter(a2, a3);
  return MeshBufferContainer.normals.modify;
}

void MeshBufferContainer.normals.modify(uint64_t **a1, char a2)
{
}

uint64_t MeshBufferContainer.tangents.getter(uint64_t a1, uint64_t a2)
{
  return MeshBufferContainer.normals.getter(a1, a2, 0x6154786574726576, 0xED0000746E65676ELL, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

uint64_t MeshBufferContainer.normals.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t *a6)
{
  v14[0] = a3;
  v14[1] = a4;
  __int16 v15 = 0;
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v12 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(a6, a5);
  return v10(v14, v11, v12, a1, a2);
}

uint64_t MeshBufferContainer.tangents.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MeshBufferContainer.normals.setter(a1, a2, a3, 0x6154786574726576, 0xED0000746E65676ELL, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

uint64_t MeshBufferContainer.normals.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unint64_t *a7)
{
  char v11 = *(unsigned char *)(a1 + 80);
  long long v12 = *(_OWORD *)(a1 + 16);
  v20[0] = *(_OWORD *)a1;
  v20[1] = v12;
  long long v13 = *(_OWORD *)(a1 + 48);
  _OWORD v20[2] = *(_OWORD *)(a1 + 32);
  void v20[3] = v13;
  v20[4] = *(_OWORD *)(a1 + 64);
  char v21 = v11;
  v18[0] = a4;
  v18[1] = a5;
  __int16 v19 = 0;
  char v14 = *(uint64_t (**)(_OWORD *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a6);
  uint64_t v16 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(a7, a6);
  return v14(v20, v18, v15, v16, a2, a3);
}

void (*MeshBufferContainer.tangents.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  MeshBufferContainer.tangents.getter(a2, a3);
  return MeshBufferContainer.tangents.modify;
}

void MeshBufferContainer.tangents.modify(uint64_t **a1, char a2)
{
}

uint64_t MeshBufferContainer.bitangents.getter(uint64_t a1, uint64_t a2)
{
  return MeshBufferContainer.normals.getter(a1, a2, 0x6942786574726576, 0xEF746E65676E6174, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

uint64_t MeshBufferContainer.bitangents.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MeshBufferContainer.normals.setter(a1, a2, a3, 0x6942786574726576, 0xEF746E65676E6174, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>);
}

void (*MeshBufferContainer.bitangents.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  MeshBufferContainer.bitangents.getter(a2, a3);
  return MeshBufferContainer.bitangents.modify;
}

void MeshBufferContainer.bitangents.modify(uint64_t **a1, char a2)
{
}

uint64_t MeshBufferContainer.textureCoordinates.getter(uint64_t a1, uint64_t a2)
{
  return MeshBufferContainer.normals.getter(a1, a2, 0x5655786574726576, 0xE800000000000000, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD2<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD2<Float>> and conformance MeshBuffers.Semantic<A>);
}

double key path getter for MeshBufferContainer.normals : <A>A@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void (*a3)(_OWORD *__return_ptr, void, void)@<X3>, uint64_t a4@<X8>)
{
  a3(v9, *(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  char v5 = v11;
  long long v6 = v9[1];
  *(_OWORD *)a4 = v9[0];
  *(_OWORD *)(a4 + 16) = v6;
  long long v7 = v9[3];
  *(_OWORD *)(a4 + 32) = v9[2];
  *(_OWORD *)(a4 + 48) = v7;
  double result = *(double *)&v10;
  *(_OWORD *)(a4 + 64) = v10;
  *(unsigned char *)(a4 + 80) = v5;
  return result;
}

uint64_t key path setter for MeshBufferContainer.normals : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(a4 + a3 - 16);
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 72);
  char v17 = *(unsigned char *)(a1 + 80);
  v19[0] = *(void *)a1;
  v19[1] = v8;
  _OWORD v19[2] = v9;
  uint64_t v19[3] = v10;
  v19[4] = v11;
  uint64_t v19[5] = v12;
  v19[6] = v13;
  v19[7] = v14;
  v19[8] = v15;
  v19[9] = v16;
  char v20 = v17;
  outlined copy of MeshBuffer<SIMD3<Float>>?(v19[0]);
  return a5(v19, v6, v7);
}

uint64_t MeshBufferContainer.textureCoordinates.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MeshBufferContainer.normals.setter(a1, a2, a3, 0x5655786574726576, 0xE800000000000000, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD2<Float>>, &lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD2<Float>> and conformance MeshBuffers.Semantic<A>);
}

void (*MeshBufferContainer.textureCoordinates.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x70uLL);
  *a1 = v7;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  MeshBufferContainer.textureCoordinates.getter(a2, a3);
  return MeshBufferContainer.textureCoordinates.modify;
}

void MeshBufferContainer.textureCoordinates.modify(uint64_t **a1, char a2)
{
}

void MeshBufferContainer.normals.modify(uint64_t **a1, char a2, void (*a3)(void *, uint64_t, uint64_t))
{
  char v5 = *a1;
  uint64_t v6 = **a1;
  uint64_t v7 = v5[1];
  uint64_t v8 = v5[2];
  uint64_t v9 = v5[3];
  uint64_t v10 = v5[4];
  uint64_t v11 = v5[5];
  uint64_t v12 = v5[6];
  uint64_t v13 = v5[7];
  uint64_t v14 = v5[8];
  uint64_t v15 = v5[9];
  char v16 = *((unsigned char *)v5 + 80);
  uint64_t v17 = v5[12];
  uint64_t v18 = v5[11];
  v19[0] = v6;
  v19[1] = v7;
  _OWORD v19[2] = v8;
  uint64_t v19[3] = v9;
  v19[4] = v10;
  uint64_t v19[5] = v11;
  v19[6] = v12;
  v19[7] = v13;
  v19[8] = v14;
  v19[9] = v15;
  char v20 = v16;
  if (a2)
  {
    outlined copy of MeshBuffer<SIMD3<Float>>?(v6);
    a3(v19, v18, v17);
    outlined consume of MeshBuffer<SIMD3<Float>>?(*v5);
  }
  else
  {
    a3(v19, v18, v17);
  }

  free(v5);
}

uint64_t MeshBufferContainer.blendShapeOffsets(named:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = a1;
  v15._object = a2;
  v12[0] = a1;
  v12[1] = a2;
  char v13 = 0;
  BOOL v14 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v15) == 8;
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  uint64_t v10 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(&lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  return v8(v12, v9, v10, a3, a4);
}

uint64_t MeshBufferContainer.setBlendShapeOffsets(named:buffer:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(a3 + 32);
  uint64_t v19 = *(void *)(a3 + 48);
  uint64_t v20 = *(void *)(a3 + 40);
  uint64_t v12 = *(void *)(a3 + 64);
  uint64_t v18 = *(void *)(a3 + 56);
  uint64_t v13 = *(void *)(a3 + 72);
  char v14 = *(unsigned char *)(a3 + 80);
  swift_bridgeObjectRetain_n();
  v29._countAndFlagsBits = a1;
  v29._object = a2;
  v27[0] = v7;
  v27[1] = v8;
  v27[2] = v9;
  v27[3] = v10;
  v27[4] = v11;
  v27[5] = v20;
  v27[6] = v19;
  v27[7] = v18;
  v27[8] = v12;
  v27[9] = v13;
  char v28 = v14;
  v24[0] = a1;
  v24[1] = a2;
  char v25 = 0;
  BOOL v26 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v29) == 8;
  char v21 = *(uint64_t (**)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24);
  outlined copy of MeshBuffer<SIMD3<Float>>?(v7);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  uint64_t v16 = lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(&lazy protocol witness table cache variable for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>, &demangling cache variable for type metadata for MeshBuffers.Semantic<SIMD3<Float>>);
  return v21(v27, v24, v15, v16, a4, a5);
}

uint64_t MeshBufferContainer.blendShapeNames.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 8))();
  uint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(result + 64);
  uint64_t v43 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  int64_t v41 = v9 - 5;
  int64_t v39 = v9 - 1;
  uint64_t v40 = result + 104;
  unint64_t v42 = (void *)MEMORY[0x263F8EE78];
  int64_t v44 = v9;
  if ((v7 & v5) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v11 = v10 | (v4 << 6);
LABEL_7:
  uint64_t v12 = *(void *)(v3 + 56);
  uint64_t v13 = *(void *)(v3 + 48) + 24 * v11;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  char v16 = *(unsigned char *)(v13 + 16);
  LOBYTE(v13) = *(unsigned char *)(v13 + 17);
  *(void *)&long long v46 = v14;
  *((void *)&v46 + 1) = v15;
  LOBYTE(v47) = v16;
  BYTE1(v47) = v13;
  outlined init with copy of AnyMeshBuffer(v12 + 40 * v11, (uint64_t)&v47 + 8);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of Transform?((uint64_t)&v46, (uint64_t)&v50, &demangling cache variable for type metadata for (key: MeshBuffers.Identifier, value: AnyMeshBuffer)?);
    unint64_t v20 = v51;
    if (!v51)
    {
      swift_release();
      return (uint64_t)v42;
    }
    uint64_t v21 = v50;
    long long v46 = v53;
    long long v47 = v54;
    *(void *)&long long v48 = v55;
    if ((v52 & 1) == 0)
    {
      outlined destroy of AnyMeshBuffer((uint64_t)&v46);
      uint64_t result = swift_bridgeObjectRelease();
      if (v8) {
        goto LABEL_6;
      }
      goto LABEL_8;
    }
    uint64_t v22 = *((void *)&v47 + 1);
    uint64_t v23 = v48;
    __swift_project_boxed_opaque_existential_1(&v46, *((uint64_t *)&v47 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 24))(&v45, v22, v23);
    if ((_BYTE)v45)
    {
      type metadata accessor for OS_os_log();
      swift_bridgeObjectRetain();
      char v24 = static OS_os_log.default.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v45 = v27;
        *(_DWORD *)uint64_t v26 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v45);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_227DD2000, v24, v25, "Skipping non-vertex rate blendShape attribute '%s'", (uint8_t *)v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22A696500](v27, -1, -1);
        uint64_t v28 = v26;
        int64_t v9 = v44;
LABEL_22:
        MEMORY[0x22A696500](v28, -1, -1);

        goto LABEL_24;
      }
LABEL_23:

      swift_bridgeObjectRelease_n();
      goto LABEL_24;
    }
    uint64_t v29 = *((void *)&v47 + 1);
    uint64_t v30 = v48;
    __swift_project_boxed_opaque_existential_1(&v46, *((uint64_t *)&v47 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v30 + 32))(&v45, v29, v30);
    uint64_t v31 = MeshBuffers.ElementType.genericAttributeDescriptor.getter();
    swift_release();
    if (!v31)
    {
      type metadata accessor for OS_os_log();
      swift_bridgeObjectRetain();
      char v24 = static OS_os_log.default.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        uint64_t v45 = v34;
        *(_DWORD *)uint64_t v33 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v33 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v45);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_227DD2000, v24, v32, "Skipping unknown element type '%s'", (uint8_t *)v33, 0xCu);
        swift_arrayDestroy();
        uint64_t v35 = v34;
        int64_t v9 = v44;
        MEMORY[0x22A696500](v35, -1, -1);
        uint64_t v28 = v33;
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
    }
    unint64_t v37 = v42[2];
    unint64_t v36 = v42[3];
    if (v37 >= v36 >> 1) {
      unint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v42);
    }
    v42[2] = v37 + 1;
    uint64_t v38 = &v42[2 * v37];
    v38[4] = v21;
    v38[5] = v20;
LABEL_24:
    uint64_t result = outlined destroy of AnyMeshBuffer((uint64_t)&v46);
    if (v8) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v17 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v17 >= v9)
    {
      int64_t v19 = v4;
    }
    else
    {
      unint64_t v18 = *(void *)(v43 + 8 * v17);
      if (v18) {
        goto LABEL_11;
      }
      int64_t v19 = v4 + 1;
      if (v4 + 2 < v9)
      {
        unint64_t v18 = *(void *)(v43 + 8 * (v4 + 2));
        if (v18)
        {
          int64_t v17 = v4 + 2;
LABEL_11:
          unint64_t v8 = (v18 - 1) & v18;
          unint64_t v11 = __clz(__rbit64(v18)) + (v17 << 6);
          int64_t v4 = v17;
          goto LABEL_7;
        }
        int64_t v19 = v4 + 2;
        if (v4 + 3 < v9)
        {
          unint64_t v18 = *(void *)(v43 + 8 * (v4 + 3));
          if (v18)
          {
            int64_t v17 = v4 + 3;
            goto LABEL_11;
          }
          int64_t v17 = v4 + 4;
          int64_t v19 = v4 + 3;
          if (v4 + 4 < v9)
          {
            unint64_t v18 = *(void *)(v43 + 8 * v17);
            if (v18) {
              goto LABEL_11;
            }
            while (v41 != v4)
            {
              unint64_t v18 = *(void *)(v40 + 8 * v4++);
              if (v18)
              {
                int64_t v17 = v4 + 4;
                goto LABEL_11;
              }
            }
            int64_t v19 = v39;
          }
        }
      }
    }
    unint64_t v8 = 0;
    long long v48 = 0u;
    long long v49 = 0u;
    int64_t v4 = v19;
    long long v46 = 0u;
    long long v47 = 0u;
  }
  __break(1u);
  return result;
}

RealityFoundation::MeshSkeleton __swiftcall MeshSkeleton.init(name:inverseBindPoses:jointPaths:)(Swift::String name, Swift::OpaquePointer inverseBindPoses, Swift::OpaquePointer jointPaths)
{
  *(Swift::String *)uint64_t v3 = name;
  *(Swift::OpaquePointer *)(v3 + 16) = inverseBindPoses;
  *(Swift::OpaquePointer *)(v3 + 24) = jointPaths;
  result.name = name;
  result.jointPaths = jointPaths;
  result.inverseBindPoses = inverseBindPoses;
  return result;
}

uint64_t MeshSkeleton.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshSkeleton.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshSkeleton.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshSkeleton.inverseBindPoses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshSkeleton.inverseBindPoses.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MeshSkeleton.inverseBindPoses.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshSkeleton.jointPaths.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshSkeleton.jointPaths.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*MeshSkeleton.jointPaths.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::OpaquePointer __swiftcall MeshSkeleton.makeSkeletonDef()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = RESkeletonDefinitionCreate();
  String.utf8CString.getter();
  RESkeletonDefinitionSetName();
  swift_release();
  unint64_t v4 = *(void *)(v2 + 16);
  if (HIDWORD(v4)) {
    goto LABEL_10;
  }
  RESkeletonDefinitionSetJointCount();
  if (v4)
  {
    if (*(void *)(v2 + 16))
    {
      uint64_t v5 = 0;
      uint64_t v6 = v2 + 40;
      while (1)
      {
        String.utf8CString.getter();
        RESkeletonDefinitionSetJointName();
        swift_release();
        if (v4 - 1 == v5) {
          break;
        }
        v6 += 16;
        if ((unint64_t)++v5 >= *(void *)(v2 + 16)) {
          goto LABEL_7;
        }
      }
    }
    else
    {
LABEL_7:
      __break(1u);
    }
  }
  if (HIDWORD(*(void *)(v1 + 16)))
  {
LABEL_10:
    result._rawValue = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    RESkeletonDefinitionSetInverseBindPoses();
    return (Swift::OpaquePointer)v3;
  }
  return result;
}

double MeshDescriptor.init(name:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = v6;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 56) = -1;
  double result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(void *)(a3 + 96) = 0;
  return result;
}

uint64_t MeshDescriptor.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshDescriptor.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshDescriptor.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.materials.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  char v3 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of MeshDescriptor.Materials(v2, v3);
}

uint64_t MeshDescriptor.materials.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = outlined consume of MeshDescriptor.Materials(*(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
  *(void *)(v1 + 24) = v2;
  *(unsigned char *)(v1 + 32) = v3;
  return result;
}

uint64_t (*MeshDescriptor.materials.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.primitives.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 56);
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of MeshDescriptor.Primitives?(v2, v3, v4);
}

uint64_t MeshDescriptor.primitives.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of MeshDescriptor.Primitives?(*(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56));
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  *(unsigned char *)(v1 + 56) = v4;
  return result;
}

uint64_t (*MeshDescriptor.primitives.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.buffers.getter()
{
  return specialized _NativeDictionary.mapValues<A>(_:)(*(void *)(v0 + 16));
}

double MeshDescriptor.subscript.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return MeshBufferDictionary.subscript.getter(*(void *)(v3 + 16), a1, a2, a3);
}

double key path getter for MeshDescriptor.subscript<A>(_:) : <A>MeshDescriptorA@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  MeshDescriptor.subscript.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8), (uint64_t)v8);
  char v4 = v10;
  long long v5 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v5;
  long long v6 = v8[3];
  *(_OWORD *)(a3 + 32) = v8[2];
  *(_OWORD *)(a3 + 48) = v6;
  double result = *(double *)&v9;
  *(_OWORD *)(a3 + 64) = v9;
  *(unsigned char *)(a3 + 80) = v4;
  return result;
}

uint64_t key path setter for MeshDescriptor.subscript<A>(_:) : <A>MeshDescriptorA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  char v15 = *(unsigned char *)(a1 + 80);
  v17[0] = *(void *)a1;
  v17[1] = v6;
  uint64_t v17[2] = v7;
  v17[3] = v8;
  _OWORD v17[4] = v9;
  v17[5] = v10;
  v17[6] = v11;
  v17[7] = v12;
  void v17[8] = v13;
  v17[9] = v14;
  char v18 = v15;
  outlined copy of MeshBuffer<SIMD3<Float>>?(v17[0]);
  return specialized MeshDescriptor.subscript.setter((uint64_t)v17, a3, v5);
}

uint64_t MeshDescriptor.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized MeshDescriptor.subscript.setter(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v5(a2, a3);
}

void (*MeshDescriptor.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v8 = malloc(0x80uLL);
  *a1 = v8;
  v8[12] = a4;
  v8[13] = v4;
  v8[11] = a3;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = v9;
  v8[14] = v9;
  v8[15] = malloc(*(void *)(v9 + 64));
  (*(void (**)(void))(v10 + 16))();
  MeshBufferDictionary.subscript.getter(*(void *)(v4 + 16), a3, a4, (uint64_t)v8);
  return MeshDescriptor.subscript.modify;
}

void MeshDescriptor.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = v3[6];
  uint64_t v11 = v3[7];
  uint64_t v12 = v3[8];
  uint64_t v13 = v3[9];
  char v14 = *((unsigned char *)v3 + 80);
  uint64_t v16 = v3[14];
  char v15 = (void *)v3[15];
  uint64_t v17 = v3[11];
  v18[0] = v4;
  v18[1] = v5;
  void v18[2] = v6;
  v18[3] = v7;
  void v18[4] = v8;
  v18[5] = v9;
  v18[6] = v10;
  v18[7] = v11;
  v18[8] = v12;
  v18[9] = v13;
  char v19 = v14;
  if (a2)
  {
    outlined copy of MeshBuffer<SIMD3<Float>>?(v4);
    specialized MeshDescriptor.subscript.setter((uint64_t)v18, (uint64_t)v15, v17);
    (*(void (**)(void *, uint64_t))(v16 + 8))(v15, v17);
    outlined consume of MeshBuffer<SIMD3<Float>>?(*v3);
  }
  else
  {
    specialized MeshDescriptor.subscript.setter((uint64_t)v18, (uint64_t)v15, v17);
    (*(void (**)(void *, uint64_t))(v16 + 8))(v15, v17);
  }
  free(v15);

  free(v3);
}

uint64_t MeshDescriptor.skinning.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[8];
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  uint64_t v5 = v1[11];
  uint64_t v6 = v1[12];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return outlined copy of MeshDescriptor.Skinning?(v2, v3);
}

__n128 MeshDescriptor.skinning.setter(__n128 *a1)
{
  __n128 v4 = a1[1];
  __n128 v5 = *a1;
  unint64_t v2 = a1[2].n128_u64[0];
  outlined consume of StateMachineGraph?(v1[4].n128_i64[0], v1[4].n128_i64[1]);
  __n128 result = v4;
  v1[4] = v5;
  v1[5] = v4;
  v1[6].n128_u64[0] = v2;
  return result;
}

uint64_t (*MeshDescriptor.skinning.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for MeshBufferContainer.buffers.getter in conformance MeshDescriptor()
{
  return specialized _NativeDictionary.mapValues<A>(_:)(*(void *)(v0 + 16));
}

uint64_t protocol witness for MeshBufferContainer.subscript.setter in conformance MeshDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized MeshDescriptor.subscript.setter(a1, a2, a3);
  __n128 v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v5(a2, a3);
}

void (*protocol witness for MeshBufferContainer.subscript.modify in conformance MeshDescriptor(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  _OWORD v8[4] = MeshDescriptor.subscript.modify(v8, a2, a3, a4);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t MeshDescriptor.Skinning.skeletonName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshDescriptor.Skinning.skeletonName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshDescriptor.Skinning.skeletonName.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.Skinning.jointIndices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshDescriptor.Skinning.jointIndices.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MeshDescriptor.Skinning.jointIndices.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.Skinning.weights.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshDescriptor.Skinning.weights.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*MeshDescriptor.Skinning.weights.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.Skinning.influencesPerVertex.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t MeshDescriptor.Skinning.influencesPerVertex.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*MeshDescriptor.Skinning.influencesPerVertex.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshDescriptor.Skinning.init(skeletonName:jointIndices:weights:influencesPerVertex:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(void *a1, uint64_t (*a2)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  unsigned int v60 = 0x30201u >> (8 * v73);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (uint64_t v13 = a1[3],
        uint64_t v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (uint64_t v15 = v73) != 0))
  {
    uint64_t v17 = *((void *)&v73 + 1);
    uint64_t v16 = v74;
    char v18 = v75;
    char v19 = v76;
    unint64_t v20 = v77;
    uint64_t v56 = v78;
    char v21 = v80;
    __n128 v58 = v79;
    uint64_t v22 = v81;
    char v57 = v82;
    unsigned int v55 = (v80 >> 8) & 1;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v15;
    *(void *)(v23 + 24) = v17;
    *(void *)(v23 + 32) = v16;
    *(void *)(v23 + 40) = v18;
    *(void *)(v23 + 48) = v19;
    *(void *)(v23 + 56) = v20;
    *(void *)(v23 + 64) = v56;
    *(void *)(v23 + 72) = v58;
    *(unsigned char *)(v23 + 80) = v21;
    *(unsigned char *)(v23 + 81) = v55;
    *(void *)(v23 + 88) = v22;
    *(unsigned char *)(v23 + 96) = v57;
    *(void *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(void *)(v23 + 112) = 0;
    *(void *)&long long v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((void *)&v63 + 1) = v23;
    uint64_t v64 = v22;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    uint64_t v54 = v15;
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(void *)(v24 + 32) = v64;
    os_log_type_t v25 = (void *)swift_allocObject();
    _OWORD v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v22;
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v22;
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v22;
    *(void *)&long long v73 = __RKEntityLookAtCameraAction.reversed();
    *((void *)&v73 + 1) = v24;
    uint64_t v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    uint64_t v75 = v25;
    uint64_t v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    uint64_t v77 = v26;
    uint64_t v78 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
    int v79 = v27;
    LOWORD(v80) = 9;
    uint64_t v81 = v22;
    char v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v54);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    int64_t v29 = *(void *)(v28 + 16);
    *(void *)&long long v63 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    uint64_t v30 = v63;
    uint64_t v31 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      goto LABEL_13;
    }
    uint64_t v50 = a1[3];
    uint64_t v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v22 & 0x8000000000000000) == 0 && !((unint64_t)v22 >> 32))
    {
      uint64_t v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v52 + 32, v60, v22, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    uint64_t v34 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x263F8E778], v32, v33);
    uint64_t v35 = v73;
    if ((void)v73)
    {
      uint64_t v36 = ((uint64_t (*)(void *))v74)(v34);
      if (v36)
      {
        char v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(void *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          char v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    uint64_t v40 = a1[3];
    uint64_t v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    unint64_t v42 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x263F8E778], v40, v41);
    uint64_t v43 = v63;
    if (!(void)v63)
    {
LABEL_13:
      char v39 = 0;
      return v39 & 1;
    }
    long long v73 = v63;
    uint64_t v74 = v64;
    uint64_t v75 = v65;
    uint64_t v76 = v66;
    uint64_t v77 = v67;
    uint64_t v78 = v68;
    int v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    uint64_t v81 = v71;
    char v82 = v72;
    uint64_t v44 = ((uint64_t (*)(void *))v63)(v42);
    if (v44)
    {
      uint64_t v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    uint64_t v46 = a1[3];
    uint64_t v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    unint64_t v48 = *(void *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      uint64_t v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  void *v18;
  uint64_t (*v19)();
  void *v20;
  char v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  unsigned int v55;
  uint64_t (*v56)();
  char v57;
  void *v58;
  unsigned int v60;
  unsigned char v62[32];
  long long v63;
  uint64_t (*v64)();
  void *v65;
  uint64_t (*v66)();
  void *v67;
  uint64_t (*v68)();
  void *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  long long v73;
  uint64_t (*v74)();
  void *v75;
  uint64_t (*v76)();
  void *v77;
  uint64_t (*v78)();
  void *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  unsigned int v60 = 0x30201u >> (8 * v73);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (uint64_t v13 = a1[3],
        uint64_t v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (uint64_t v15 = v73) != 0))
  {
    uint64_t v17 = *((void *)&v73 + 1);
    uint64_t v16 = v74;
    char v18 = v75;
    char v19 = v76;
    unint64_t v20 = v77;
    uint64_t v56 = v78;
    char v21 = v80;
    __n128 v58 = v79;
    uint64_t v22 = v81;
    char v57 = v82;
    unsigned int v55 = (v80 >> 8) & 1;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v15;
    *(void *)(v23 + 24) = v17;
    *(void *)(v23 + 32) = v16;
    *(void *)(v23 + 40) = v18;
    *(void *)(v23 + 48) = v19;
    *(void *)(v23 + 56) = v20;
    *(void *)(v23 + 64) = v56;
    *(void *)(v23 + 72) = v58;
    *(unsigned char *)(v23 + 80) = v21;
    *(unsigned char *)(v23 + 81) = v55;
    *(void *)(v23 + 88) = v22;
    *(unsigned char *)(v23 + 96) = v57;
    *(void *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(void *)(v23 + 112) = 0;
    *(void *)&long long v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((void *)&v63 + 1) = v23;
    uint64_t v64 = v22;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    uint64_t v54 = v15;
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(void *)(v24 + 32) = v64;
    os_log_type_t v25 = (void *)swift_allocObject();
    _OWORD v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v22;
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v22;
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v22;
    *(void *)&long long v73 = __RKEntityLookAtCameraAction.reversed();
    *((void *)&v73 + 1) = v24;
    uint64_t v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    uint64_t v75 = v25;
    uint64_t v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    uint64_t v77 = v26;
    uint64_t v78 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
    int v79 = v27;
    LOWORD(v80) = 9;
    uint64_t v81 = v22;
    char v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v54);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    int64_t v29 = *(void *)(v28 + 16);
    *(void *)&long long v63 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    uint64_t v30 = v63;
    uint64_t v31 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      goto LABEL_13;
    }
    uint64_t v50 = a1[3];
    uint64_t v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v22 & 0x8000000000000000) == 0 && !((unint64_t)v22 >> 32))
    {
      uint64_t v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v52 + 32, v60, v22, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    uint64_t v34 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x263F8E888], v32, v33);
    uint64_t v35 = v73;
    if ((void)v73)
    {
      uint64_t v36 = ((uint64_t (*)(void *))v74)(v34);
      if (v36)
      {
        char v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(void *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          char v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    uint64_t v40 = a1[3];
    uint64_t v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    unint64_t v42 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x263F8E888], v40, v41);
    uint64_t v43 = v63;
    if (!(void)v63)
    {
LABEL_13:
      char v39 = 0;
      return v39 & 1;
    }
    long long v73 = v63;
    uint64_t v74 = v64;
    uint64_t v75 = v65;
    uint64_t v76 = v66;
    uint64_t v77 = v67;
    uint64_t v78 = v68;
    int v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    uint64_t v81 = v71;
    char v82 = v72;
    uint64_t v44 = ((uint64_t (*)(void *))v63)(v42);
    if (v44)
    {
      uint64_t v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    uint64_t v46 = a1[3];
    uint64_t v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    unint64_t v48 = *(void *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      uint64_t v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  void *v18;
  uint64_t (*v19)();
  void *v20;
  char v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  unsigned int v55;
  uint64_t (*v56)();
  char v57;
  void *v58;
  unsigned int v60;
  unsigned char v62[32];
  long long v63;
  uint64_t (*v64)();
  void *v65;
  uint64_t (*v66)();
  void *v67;
  uint64_t (*v68)();
  void *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  long long v73;
  uint64_t (*v74)();
  void *v75;
  uint64_t (*v76)();
  void *v77;
  uint64_t (*v78)();
  void *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  unsigned int v60 = 0x30201u >> (8 * v73);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (uint64_t v13 = a1[3],
        uint64_t v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (uint64_t v15 = v73) != 0))
  {
    uint64_t v17 = *((void *)&v73 + 1);
    uint64_t v16 = v74;
    char v18 = v75;
    char v19 = v76;
    unint64_t v20 = v77;
    uint64_t v56 = v78;
    char v21 = v80;
    __n128 v58 = v79;
    uint64_t v22 = v81;
    char v57 = v82;
    unsigned int v55 = (v80 >> 8) & 1;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v15;
    *(void *)(v23 + 24) = v17;
    *(void *)(v23 + 32) = v16;
    *(void *)(v23 + 40) = v18;
    *(void *)(v23 + 48) = v19;
    *(void *)(v23 + 56) = v20;
    *(void *)(v23 + 64) = v56;
    *(void *)(v23 + 72) = v58;
    *(unsigned char *)(v23 + 80) = v21;
    *(unsigned char *)(v23 + 81) = v55;
    *(void *)(v23 + 88) = v22;
    *(unsigned char *)(v23 + 96) = v57;
    *(void *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(void *)(v23 + 112) = 0;
    *(void *)&long long v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((void *)&v63 + 1) = v23;
    uint64_t v64 = v22;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    uint64_t v54 = v15;
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(void *)(v24 + 32) = v64;
    os_log_type_t v25 = (void *)swift_allocObject();
    _OWORD v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v22;
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v22;
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v22;
    *(void *)&long long v73 = __RKEntityLookAtCameraAction.reversed();
    *((void *)&v73 + 1) = v24;
    uint64_t v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    uint64_t v75 = v25;
    uint64_t v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    uint64_t v77 = v26;
    uint64_t v78 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
    int v79 = v27;
    LOWORD(v80) = 9;
    uint64_t v81 = v22;
    char v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v54);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    int64_t v29 = *(void *)(v28 + 16);
    *(void *)&long long v63 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    uint64_t v30 = v63;
    uint64_t v31 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      goto LABEL_13;
    }
    uint64_t v50 = a1[3];
    uint64_t v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v22 & 0x8000000000000000) == 0 && !((unint64_t)v22 >> 32))
    {
      uint64_t v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v52 + 32, v60, v22, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    uint64_t v34 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x263F8E8F8], v32, v33);
    uint64_t v35 = v73;
    if ((void)v73)
    {
      uint64_t v36 = ((uint64_t (*)(void *))v74)(v34);
      if (v36)
      {
        char v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(void *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          char v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    uint64_t v40 = a1[3];
    uint64_t v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    unint64_t v42 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x263F8E8F8], v40, v41);
    uint64_t v43 = v63;
    if (!(void)v63)
    {
LABEL_13:
      char v39 = 0;
      return v39 & 1;
    }
    long long v73 = v63;
    uint64_t v74 = v64;
    uint64_t v75 = v65;
    uint64_t v76 = v66;
    uint64_t v77 = v67;
    uint64_t v78 = v68;
    int v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    uint64_t v81 = v71;
    char v82 = v72;
    uint64_t v44 = ((uint64_t (*)(void *))v63)(v42);
    if (v44)
    {
      uint64_t v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    uint64_t v46 = a1[3];
    uint64_t v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    unint64_t v48 = *(void *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      uint64_t v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  void *v18;
  uint64_t (*v19)();
  void *v20;
  char v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  unsigned int v55;
  uint64_t (*v56)();
  char v57;
  void *v58;
  unsigned int v60;
  unsigned char v62[32];
  long long v63;
  uint64_t (*v64)();
  void *v65;
  uint64_t (*v66)();
  void *v67;
  uint64_t (*v68)();
  void *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  long long v73;
  uint64_t (*v74)();
  void *v75;
  uint64_t (*v76)();
  void *v77;
  uint64_t (*v78)();
  void *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  unsigned int v60 = 0x30201u >> (8 * v73);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (uint64_t v13 = a1[3],
        uint64_t v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (uint64_t v15 = v73) != 0))
  {
    uint64_t v17 = *((void *)&v73 + 1);
    uint64_t v16 = v74;
    char v18 = v75;
    char v19 = v76;
    unint64_t v20 = v77;
    uint64_t v56 = v78;
    char v21 = v80;
    __n128 v58 = v79;
    uint64_t v22 = v81;
    char v57 = v82;
    unsigned int v55 = (v80 >> 8) & 1;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v15;
    *(void *)(v23 + 24) = v17;
    *(void *)(v23 + 32) = v16;
    *(void *)(v23 + 40) = v18;
    *(void *)(v23 + 48) = v19;
    *(void *)(v23 + 56) = v20;
    *(void *)(v23 + 64) = v56;
    *(void *)(v23 + 72) = v58;
    *(unsigned char *)(v23 + 80) = v21;
    *(unsigned char *)(v23 + 81) = v55;
    *(void *)(v23 + 88) = v22;
    *(unsigned char *)(v23 + 96) = v57;
    *(void *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(void *)(v23 + 112) = 0;
    *(void *)&long long v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((void *)&v63 + 1) = v23;
    uint64_t v64 = v22;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    uint64_t v54 = v15;
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(void *)(v24 + 32) = v64;
    os_log_type_t v25 = (void *)swift_allocObject();
    _OWORD v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v22;
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v22;
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v22;
    *(void *)&long long v73 = __RKEntityLookAtCameraAction.reversed();
    *((void *)&v73 + 1) = v24;
    uint64_t v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    uint64_t v75 = v25;
    uint64_t v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    uint64_t v77 = v26;
    uint64_t v78 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
    int v79 = v27;
    LOWORD(v80) = 9;
    uint64_t v81 = v22;
    char v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v54);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    int64_t v29 = *(void *)(v28 + 16);
    *(void *)&long long v63 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    uint64_t v30 = v63;
    uint64_t v31 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      goto LABEL_13;
    }
    uint64_t v50 = a1[3];
    uint64_t v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v22 & 0x8000000000000000) == 0 && !((unint64_t)v22 >> 32))
    {
      uint64_t v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v52 + 32, v60, v22, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    uint64_t v34 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x263F8E498], v32, v33);
    uint64_t v35 = v73;
    if ((void)v73)
    {
      uint64_t v36 = ((uint64_t (*)(void *))v74)(v34);
      if (v36)
      {
        char v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(void *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          char v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    uint64_t v40 = a1[3];
    uint64_t v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    unint64_t v42 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x263F8E498], v40, v41);
    uint64_t v43 = v63;
    if (!(void)v63)
    {
LABEL_13:
      char v39 = 0;
      return v39 & 1;
    }
    long long v73 = v63;
    uint64_t v74 = v64;
    uint64_t v75 = v65;
    uint64_t v76 = v66;
    uint64_t v77 = v67;
    uint64_t v78 = v68;
    int v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    uint64_t v81 = v71;
    char v82 = v72;
    uint64_t v44 = ((uint64_t (*)(void *))v63)(v42);
    if (v44)
    {
      uint64_t v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    uint64_t v46 = a1[3];
    uint64_t v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    unint64_t v48 = *(void *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      uint64_t v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  void *v18;
  uint64_t (*v19)();
  void *v20;
  char v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  unsigned int v55;
  uint64_t (*v56)();
  char v57;
  void *v58;
  unsigned int v60;
  unsigned char v62[32];
  long long v63;
  uint64_t (*v64)();
  void *v65;
  uint64_t (*v66)();
  void *v67;
  uint64_t (*v68)();
  void *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  long long v73;
  uint64_t (*v74)();
  void *v75;
  uint64_t (*v76)();
  void *v77;
  uint64_t (*v78)();
  void *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  unsigned int v60 = 0x30201u >> (8 * v73);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (uint64_t v13 = a1[3],
        uint64_t v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (uint64_t v15 = v73) != 0))
  {
    uint64_t v17 = *((void *)&v73 + 1);
    uint64_t v16 = v74;
    char v18 = v75;
    char v19 = v76;
    unint64_t v20 = v77;
    uint64_t v56 = v78;
    char v21 = v80;
    __n128 v58 = v79;
    uint64_t v22 = v81;
    char v57 = v82;
    unsigned int v55 = (v80 >> 8) & 1;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v15;
    *(void *)(v23 + 24) = v17;
    *(void *)(v23 + 32) = v16;
    *(void *)(v23 + 40) = v18;
    *(void *)(v23 + 48) = v19;
    *(void *)(v23 + 56) = v20;
    *(void *)(v23 + 64) = v56;
    *(void *)(v23 + 72) = v58;
    *(unsigned char *)(v23 + 80) = v21;
    *(unsigned char *)(v23 + 81) = v55;
    *(void *)(v23 + 88) = v22;
    *(unsigned char *)(v23 + 96) = v57;
    *(void *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(void *)(v23 + 112) = 0;
    *(void *)&long long v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((void *)&v63 + 1) = v23;
    uint64_t v64 = v22;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    uint64_t v54 = v15;
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(void *)(v24 + 32) = v64;
    os_log_type_t v25 = (void *)swift_allocObject();
    _OWORD v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v22;
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v22;
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v22;
    *(void *)&long long v73 = __RKEntityLookAtCameraAction.reversed();
    *((void *)&v73 + 1) = v24;
    uint64_t v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    uint64_t v75 = v25;
    uint64_t v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    uint64_t v77 = v26;
    uint64_t v78 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
    int v79 = v27;
    LOWORD(v80) = 9;
    uint64_t v81 = v22;
    char v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v54);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    int64_t v29 = *(void *)(v28 + 16);
    *(void *)&long long v63 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    uint64_t v30 = v63;
    uint64_t v31 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      goto LABEL_13;
    }
    uint64_t v50 = a1[3];
    uint64_t v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v22 & 0x8000000000000000) == 0 && !((unint64_t)v22 >> 32))
    {
      uint64_t v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v52 + 32, v60, v22, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    uint64_t v34 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x263F8E4F0], v32, v33);
    uint64_t v35 = v73;
    if ((void)v73)
    {
      uint64_t v36 = ((uint64_t (*)(void *))v74)(v34);
      if (v36)
      {
        char v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(void *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          char v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    uint64_t v40 = a1[3];
    uint64_t v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    unint64_t v42 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x263F8E4F0], v40, v41);
    uint64_t v43 = v63;
    if (!(void)v63)
    {
LABEL_13:
      char v39 = 0;
      return v39 & 1;
    }
    long long v73 = v63;
    uint64_t v74 = v64;
    uint64_t v75 = v65;
    uint64_t v76 = v66;
    uint64_t v77 = v67;
    uint64_t v78 = v68;
    int v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    uint64_t v81 = v71;
    char v82 = v72;
    uint64_t v44 = ((uint64_t (*)(void *))v63)(v42);
    if (v44)
    {
      uint64_t v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    uint64_t v46 = a1[3];
    uint64_t v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    unint64_t v48 = *(void *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      uint64_t v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  void *v18;
  uint64_t (*v19)();
  void *v20;
  char v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  unsigned int v55;
  uint64_t (*v56)();
  char v57;
  void *v58;
  unsigned int v60;
  unsigned char v62[32];
  long long v63;
  uint64_t (*v64)();
  void *v65;
  uint64_t (*v66)();
  void *v67;
  uint64_t (*v68)();
  void *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  long long v73;
  uint64_t (*v74)();
  void *v75;
  uint64_t (*v76)();
  void *v77;
  uint64_t (*v78)();
  void *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  unsigned int v60 = 0x30201u >> (8 * v73);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (uint64_t v13 = a1[3],
        uint64_t v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (uint64_t v15 = v73) != 0))
  {
    uint64_t v17 = *((void *)&v73 + 1);
    uint64_t v16 = v74;
    char v18 = v75;
    char v19 = v76;
    unint64_t v20 = v77;
    uint64_t v56 = v78;
    char v21 = v80;
    __n128 v58 = v79;
    uint64_t v22 = v81;
    char v57 = v82;
    unsigned int v55 = (v80 >> 8) & 1;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v15;
    *(void *)(v23 + 24) = v17;
    *(void *)(v23 + 32) = v16;
    *(void *)(v23 + 40) = v18;
    *(void *)(v23 + 48) = v19;
    *(void *)(v23 + 56) = v20;
    *(void *)(v23 + 64) = v56;
    *(void *)(v23 + 72) = v58;
    *(unsigned char *)(v23 + 80) = v21;
    *(unsigned char *)(v23 + 81) = v55;
    *(void *)(v23 + 88) = v22;
    *(unsigned char *)(v23 + 96) = v57;
    *(void *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(void *)(v23 + 112) = 0;
    *(void *)&long long v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((void *)&v63 + 1) = v23;
    uint64_t v64 = v22;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    uint64_t v54 = v15;
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(void *)(v24 + 32) = v64;
    os_log_type_t v25 = (void *)swift_allocObject();
    _OWORD v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v22;
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v22;
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v22;
    *(void *)&long long v73 = __RKEntityLookAtCameraAction.reversed();
    *((void *)&v73 + 1) = v24;
    uint64_t v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    uint64_t v75 = v25;
    uint64_t v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    uint64_t v77 = v26;
    uint64_t v78 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
    int v79 = v27;
    LOWORD(v80) = 9;
    uint64_t v81 = v22;
    char v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v54);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    int64_t v29 = *(void *)(v28 + 16);
    *(void *)&long long v63 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    uint64_t v30 = v63;
    uint64_t v31 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      goto LABEL_13;
    }
    uint64_t v50 = a1[3];
    uint64_t v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v22 & 0x8000000000000000) == 0 && !((unint64_t)v22 >> 32))
    {
      uint64_t v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v52 + 32, v60, v22, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    uint64_t v34 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x263F8E548], v32, v33);
    uint64_t v35 = v73;
    if ((void)v73)
    {
      uint64_t v36 = ((uint64_t (*)(void *))v74)(v34);
      if (v36)
      {
        char v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(void *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          char v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    uint64_t v40 = a1[3];
    uint64_t v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    unint64_t v42 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x263F8E548], v40, v41);
    uint64_t v43 = v63;
    if (!(void)v63)
    {
LABEL_13:
      char v39 = 0;
      return v39 & 1;
    }
    long long v73 = v63;
    uint64_t v74 = v64;
    uint64_t v75 = v65;
    uint64_t v76 = v66;
    uint64_t v77 = v67;
    uint64_t v78 = v68;
    int v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    uint64_t v81 = v71;
    char v82 = v72;
    uint64_t v44 = ((uint64_t (*)(void *))v63)(v42);
    if (v44)
    {
      uint64_t v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    uint64_t v46 = a1[3];
    uint64_t v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    unint64_t v48 = *(void *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      uint64_t v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  void *v18;
  uint64_t (*v19)();
  void *v20;
  char v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  unsigned int v55;
  uint64_t (*v56)();
  char v57;
  void *v58;
  unsigned int v60;
  unsigned char v62[32];
  long long v63;
  uint64_t (*v64)();
  void *v65;
  uint64_t (*v66)();
  void *v67;
  uint64_t (*v68)();
  void *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  long long v73;
  uint64_t (*v74)();
  void *v75;
  uint64_t (*v76)();
  void *v77;
  uint64_t (*v78)();
  void *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  unsigned int v60 = 0x30201u >> (8 * v73);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (uint64_t v13 = a1[3],
        uint64_t v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (uint64_t v15 = v73) != 0))
  {
    uint64_t v17 = *((void *)&v73 + 1);
    uint64_t v16 = v74;
    char v18 = v75;
    char v19 = v76;
    unint64_t v20 = v77;
    uint64_t v56 = v78;
    char v21 = v80;
    __n128 v58 = v79;
    uint64_t v22 = v81;
    char v57 = v82;
    unsigned int v55 = (v80 >> 8) & 1;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v15;
    *(void *)(v23 + 24) = v17;
    *(void *)(v23 + 32) = v16;
    *(void *)(v23 + 40) = v18;
    *(void *)(v23 + 48) = v19;
    *(void *)(v23 + 56) = v20;
    *(void *)(v23 + 64) = v56;
    *(void *)(v23 + 72) = v58;
    *(unsigned char *)(v23 + 80) = v21;
    *(unsigned char *)(v23 + 81) = v55;
    *(void *)(v23 + 88) = v22;
    *(unsigned char *)(v23 + 96) = v57;
    *(void *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(void *)(v23 + 112) = 0;
    *(void *)&long long v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((void *)&v63 + 1) = v23;
    uint64_t v64 = v22;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    uint64_t v54 = v15;
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(void *)(v24 + 32) = v64;
    os_log_type_t v25 = (void *)swift_allocObject();
    _OWORD v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v22;
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v22;
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v22;
    *(void *)&long long v73 = __RKEntityLookAtCameraAction.reversed();
    *((void *)&v73 + 1) = v24;
    uint64_t v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    uint64_t v75 = v25;
    uint64_t v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    uint64_t v77 = v26;
    uint64_t v78 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
    int v79 = v27;
    LOWORD(v80) = 9;
    uint64_t v81 = v22;
    char v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v54);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    int64_t v29 = *(void *)(v28 + 16);
    *(void *)&long long v63 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    uint64_t v30 = v63;
    uint64_t v31 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      goto LABEL_13;
    }
    uint64_t v50 = a1[3];
    uint64_t v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v22 & 0x8000000000000000) == 0 && !((unint64_t)v22 >> 32))
    {
      uint64_t v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v52 + 32, v60, v22, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    uint64_t v34 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x263F8D5C8], v32, v33);
    uint64_t v35 = v73;
    if ((void)v73)
    {
      uint64_t v36 = ((uint64_t (*)(void *))v74)(v34);
      if (v36)
      {
        char v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(void *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          char v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    uint64_t v40 = a1[3];
    uint64_t v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    unint64_t v42 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x263F8D5C8], v40, v41);
    uint64_t v43 = v63;
    if (!(void)v63)
    {
LABEL_13:
      char v39 = 0;
      return v39 & 1;
    }
    long long v73 = v63;
    uint64_t v74 = v64;
    uint64_t v75 = v65;
    uint64_t v76 = v66;
    uint64_t v77 = v67;
    uint64_t v78 = v68;
    int v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    uint64_t v81 = v71;
    char v82 = v72;
    uint64_t v44 = ((uint64_t (*)(void *))v63)(v42);
    if (v44)
    {
      uint64_t v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    uint64_t v46 = a1[3];
    uint64_t v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    unint64_t v48 = *(void *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      uint64_t v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  void *v18;
  uint64_t (*v19)();
  void *v20;
  char v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  unsigned int v55;
  uint64_t (*v56)();
  char v57;
  void *v58;
  unsigned int v60;
  unsigned char v62[32];
  long long v63;
  uint64_t (*v64)();
  void *v65;
  uint64_t (*v66)();
  void *v67;
  uint64_t (*v68)();
  void *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  long long v73;
  uint64_t (*v74)();
  void *v75;
  uint64_t (*v76)();
  void *v77;
  uint64_t (*v78)();
  void *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  unsigned int v60 = 0x30201u >> (8 * v73);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9
    && (uint64_t v13 = a1[3],
        uint64_t v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14), (uint64_t v15 = v73) != 0))
  {
    uint64_t v17 = *((void *)&v73 + 1);
    uint64_t v16 = v74;
    char v18 = v75;
    char v19 = v76;
    unint64_t v20 = v77;
    uint64_t v56 = v78;
    char v21 = v80;
    __n128 v58 = v79;
    uint64_t v22 = v81;
    char v57 = v82;
    unsigned int v55 = (v80 >> 8) & 1;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v15;
    *(void *)(v23 + 24) = v17;
    *(void *)(v23 + 32) = v16;
    *(void *)(v23 + 40) = v18;
    *(void *)(v23 + 48) = v19;
    *(void *)(v23 + 56) = v20;
    *(void *)(v23 + 64) = v56;
    *(void *)(v23 + 72) = v58;
    *(unsigned char *)(v23 + 80) = v21;
    *(unsigned char *)(v23 + 81) = v55;
    *(void *)(v23 + 88) = v22;
    *(unsigned char *)(v23 + 96) = v57;
    *(void *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(void *)(v23 + 112) = 0;
    *(void *)&long long v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((void *)&v63 + 1) = v23;
    uint64_t v64 = v22;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
    uint64_t v54 = v15;
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v63;
    *(void *)(v24 + 32) = v64;
    os_log_type_t v25 = (void *)swift_allocObject();
    _OWORD v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v22;
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v22;
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v22;
    *(void *)&long long v73 = __RKEntityLookAtCameraAction.reversed();
    *((void *)&v73 + 1) = v24;
    uint64_t v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    uint64_t v75 = v25;
    uint64_t v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    uint64_t v77 = v26;
    uint64_t v78 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
    int v79 = v27;
    LOWORD(v80) = 9;
    uint64_t v81 = v22;
    char v82 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v54);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    int64_t v29 = *(void *)(v28 + 16);
    *(void *)&long long v63 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    uint64_t v30 = v63;
    uint64_t v31 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      goto LABEL_13;
    }
    uint64_t v50 = a1[3];
    uint64_t v51 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v50);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v51 + 8))(&v63, v50, v51);
    if (((unint64_t)v22 & 0x8000000000000000) == 0 && !((unint64_t)v22 >> 32))
    {
      uint64_t v52 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v52 + 32, v60, v22, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v54);
      swift_release();
      swift_release();
      return v39 & 1;
    }
  }
  else
  {
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    uint64_t v34 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v33 + 56))(&v73, MEMORY[0x263F8D538], v32, v33);
    uint64_t v35 = v73;
    if ((void)v73)
    {
      uint64_t v36 = ((uint64_t (*)(void *))v74)(v34);
      if (v36)
      {
        char v38 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v36 + 32, *(void *)(v36 + 16), v37, a4, a5, a6, a1, v60);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38 != 2)
        {
          char v39 = v38 & 1;
          return v39 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v35);
      }
    }
    uint64_t v40 = a1[3];
    uint64_t v41 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v40);
    unint64_t v42 = (*(void *(**)(long long *__return_ptr, void, uint64_t, uint64_t))(v41 + 56))(&v63, MEMORY[0x263F8D538], v40, v41);
    uint64_t v43 = v63;
    if (!(void)v63)
    {
LABEL_13:
      char v39 = 0;
      return v39 & 1;
    }
    long long v73 = v63;
    uint64_t v74 = v64;
    uint64_t v75 = v65;
    uint64_t v76 = v66;
    uint64_t v77 = v67;
    uint64_t v78 = v68;
    int v79 = v69;
    LOWORD(v80) = v70 & 0x1FF;
    uint64_t v81 = v71;
    char v82 = v72;
    uint64_t v44 = ((uint64_t (*)(void *))v63)(v42);
    if (v44)
    {
      uint64_t v45 = v44;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v45 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v43);
    uint64_t v46 = a1[3];
    uint64_t v47 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v46);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v47 + 8))(&v63, v46, v47);
    unint64_t v48 = *(void *)(v45 + 16);
    if (!HIDWORD(v48))
    {
      uint64_t v49 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      char v39 = a2(a6, v49 + 32, v60, (uint64_t (*)())v48, v45 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v39 & 1;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  void *v18;
  uint64_t (*v19)();
  void *v20;
  char v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *(*v34)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  unsigned int v57;
  uint64_t (*v58)();
  char v59;
  void *v60;
  unsigned int v62;
  unsigned char v64[32];
  long long v65;
  uint64_t (*v66)();
  void *v67;
  uint64_t (*v68)();
  void *v69;
  uint64_t (*v70)();
  void *v71;
  uint64_t v72;
  uint64_t (*v73)();
  char v74;
  long long v75;
  uint64_t (*v76)();
  void *v77;
  uint64_t (*v78)();
  void *v79;
  uint64_t (*v80)();
  void *v81;
  uint64_t v82;
  uint64_t (*v83)();
  char v84;

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v75, v9, v10);
  os_log_t v62 = 0x30201u >> (8 * v75);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v75, v11, v12);
  if (v75 == 9
    && (uint64_t v13 = a1[3],
        uint64_t v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v75, &type metadata for FloatVector3Packed, v13, v14), (uint64_t v15 = v75) != 0))
  {
    uint64_t v17 = *((void *)&v75 + 1);
    uint64_t v16 = v76;
    char v18 = v77;
    char v19 = v78;
    unint64_t v20 = v79;
    __n128 v58 = v80;
    char v21 = v82;
    unsigned int v60 = v81;
    uint64_t v22 = v83;
    uint64_t v59 = v84;
    char v57 = (v82 >> 8) & 1;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v15;
    *(void *)(v23 + 24) = v17;
    *(void *)(v23 + 32) = v16;
    *(void *)(v23 + 40) = v18;
    *(void *)(v23 + 48) = v19;
    *(void *)(v23 + 56) = v20;
    *(void *)(v23 + 64) = v58;
    *(void *)(v23 + 72) = v60;
    *(unsigned char *)(v23 + 80) = v21;
    *(unsigned char *)(v23 + 81) = v57;
    *(void *)(v23 + 88) = v22;
    *(unsigned char *)(v23 + 96) = v59;
    *(void *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(void *)(v23 + 112) = 0;
    *(void *)&uint64_t v65 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((void *)&v65 + 1) = v23;
    uint64_t v66 = v22;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v65, (uint64_t)v64);
    uint64_t v56 = v15;
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v65;
    *(void *)(v24 + 32) = v66;
    os_log_type_t v25 = (void *)swift_allocObject();
    _OWORD v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v22;
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v22;
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v22;
    *(void *)&uint64_t v75 = __RKEntityLookAtCameraAction.reversed();
    *((void *)&v75 + 1) = v24;
    uint64_t v76 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    uint64_t v77 = v25;
    uint64_t v78 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    int v79 = v26;
    uint64_t v80 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
    uint64_t v81 = v27;
    LOWORD(v82) = 9;
    uint64_t v83 = v22;
    uint64_t v84 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v64, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v56);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v75);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    int64_t v29 = *(void *)(v28 + 16);
    *(void *)&uint64_t v65 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    uint64_t v30 = v65;
    uint64_t v31 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v56);
      goto LABEL_13;
    }
    uint64_t v52 = a1[3];
    long long v53 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v52);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v53 + 8))(&v65, v52, v53);
    if (((unint64_t)v22 & 0x8000000000000000) == 0 && !((unint64_t)v22 >> 32))
    {
      uint64_t v54 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v41 = a2(a6, v54 + 32, v62, v22, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v56);
      swift_release();
      swift_release();
      return v41 & 1;
    }
  }
  else
  {
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    uint64_t v34 = *(void *(**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v33 + 56);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    uint64_t v36 = v34(&v75, v35, v32, v33);
    uint64_t v37 = v75;
    if ((void)v75)
    {
      char v38 = ((uint64_t (*)(void *))v76)(v36);
      if (v38)
      {
        uint64_t v40 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v38 + 32, *(void *)(v38 + 16), v39, a4, a5, a6, a1, v62);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v40 != 2)
        {
          uint64_t v41 = v40 & 1;
          return v41 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v37);
      }
    }
    unint64_t v42 = a1[3];
    uint64_t v43 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v42);
    uint64_t v44 = (*(void *(**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v43 + 56))(&v65, v35, v42, v43);
    uint64_t v45 = v65;
    if (!(void)v65)
    {
LABEL_13:
      uint64_t v41 = 0;
      return v41 & 1;
    }
    uint64_t v75 = v65;
    uint64_t v76 = v66;
    uint64_t v77 = v67;
    uint64_t v78 = v68;
    int v79 = v69;
    uint64_t v80 = v70;
    uint64_t v81 = v71;
    LOWORD(v82) = v72 & 0x1FF;
    uint64_t v83 = v73;
    uint64_t v84 = v74;
    uint64_t v46 = ((uint64_t (*)(void *))v65)(v44);
    if (v46)
    {
      uint64_t v47 = v46;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v47 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v75);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v45);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v45);
    unint64_t v48 = a1[3];
    uint64_t v49 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v48);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v49 + 8))(&v65, v48, v49);
    uint64_t v50 = *(void *)(v47 + 16);
    if (!HIDWORD(v50))
    {
      uint64_t v51 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v41 = a2(a6, v51 + 32, v62, (uint64_t (*)())v50, v47 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v41 & 1;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  void *v18;
  uint64_t (*v19)();
  void *v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void *(*v36)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t (*v54)();
  unsigned int v55;
  uint64_t v56;
  char v57;
  uint64_t (*v58)();
  unsigned int v60;
  unsigned char v62[32];
  long long v63;
  uint64_t (*v64)();
  void *v65;
  uint64_t (*v66)();
  void *v67;
  uint64_t (*v68)();
  void *v69;
  uint64_t v70;
  uint64_t (*v71)();
  char v72;
  long long v73;
  uint64_t (*v74)();
  void *v75;
  uint64_t (*v76)();
  void *v77;
  uint64_t (*v78)();
  void *v79;
  uint64_t v80;
  uint64_t (*v81)();
  char v82;

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v73, v9, v10);
  unsigned int v60 = 0x30201u >> (8 * v73);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v73, v11, v12);
  if (v73 == 9)
  {
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v73, &type metadata for FloatVector3Packed, v13, v14);
    uint64_t v15 = v73;
    if ((void)v73)
    {
      uint64_t v16 = *((void *)&v73 + 1);
      uint64_t v17 = v74;
      char v18 = v75;
      char v19 = v76;
      unint64_t v20 = v77;
      __n128 v58 = v78;
      uint64_t v22 = v79;
      char v21 = v80;
      uint64_t v54 = v81;
      char v57 = v82;
      unsigned int v55 = (v80 >> 8) & 1;
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v15;
      *(void *)(v23 + 24) = v16;
      *(void *)(v23 + 32) = v17;
      *(void *)(v23 + 40) = v18;
      *(void *)(v23 + 48) = v19;
      *(void *)(v23 + 56) = v20;
      *(void *)(v23 + 64) = v58;
      *(void *)(v23 + 72) = v22;
      *(unsigned char *)(v23 + 80) = v21;
      *(unsigned char *)(v23 + 81) = v55;
      *(void *)(v23 + 88) = v54;
      *(unsigned char *)(v23 + 96) = v57;
      *(void *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
      *(void *)(v23 + 112) = 0;
      *(void *)&long long v63 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
      *((void *)&v63 + 1) = v23;
      uint64_t v64 = v54;
      outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v63, (uint64_t)v62);
      uint64_t v56 = v15;
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = v63;
      *(void *)(v24 + 32) = v64;
      os_log_type_t v25 = (void *)swift_allocObject();
      _OWORD v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
      v25[3] = v23;
      v25[4] = v54;
      uint64_t v26 = (void *)swift_allocObject();
      v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
      v26[3] = v23;
      v26[4] = v54;
      uint64_t v27 = (void *)swift_allocObject();
      v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
      v27[3] = v23;
      v27[4] = v54;
      *(void *)&long long v73 = __RKEntityLookAtCameraAction.reversed();
      *((void *)&v73 + 1) = v24;
      uint64_t v74 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
      uint64_t v75 = v25;
      uint64_t v76 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
      uint64_t v77 = v26;
      uint64_t v78 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
      int v79 = v27;
      LOWORD(v80) = 9;
      uint64_t v81 = v54;
      char v82 = 0;
      swift_retain();
      outlined destroy of BodyTrackingComponent?((uint64_t)v62, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
      swift_retain_n();
      outlined copy of MeshBuffer<SIMD3<Float>>?(v56);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      int64_t v29 = specialized _arrayConditionalCast<A, B>(_:)(v28);
      swift_bridgeObjectRelease();
      if (v29)
      {
        uint64_t v30 = a1[3];
        uint64_t v31 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v30);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v31 + 8))(&v63, v30, v31);
        if (((unint64_t)v54 & 0x8000000000000000) == 0 && !((unint64_t)v54 >> 32))
        {
          uint64_t v32 = String.utf8CString.getter();
          swift_bridgeObjectRelease();
          uint64_t v33 = a2(a6, v32 + 32, v60, v54, v29 + 32);
          outlined consume of MeshBuffer<SIMD3<Float>>?(v56);
LABEL_18:
          swift_release();
          swift_bridgeObjectRelease();
          return v33 & 1;
        }
        goto LABEL_22;
      }
      outlined consume of MeshBuffer<SIMD3<Float>>?(v56);
LABEL_20:
      uint64_t v33 = 0;
      return v33 & 1;
    }
  }
  uint64_t v34 = a1[3];
  uint64_t v35 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v34);
  uint64_t v36 = *(void *(**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v35 + 56);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  char v38 = v36(&v73, v37, v34, v35);
  char v39 = v73;
  if ((void)v73)
  {
    uint64_t v40 = ((uint64_t (*)(void *))v74)(v38);
    if (v40)
    {
      unint64_t v42 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v40 + 32, *(void *)(v40 + 16), v41, a4, a5, a6, a1, v60);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v42 != 2)
      {
        uint64_t v33 = v42 & 1;
        return v33 & 1;
      }
    }
    else
    {
      outlined consume of MeshBuffer<SIMD3<Float>>?(v39);
    }
  }
  uint64_t v43 = a1[3];
  uint64_t v44 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v43);
  uint64_t v45 = (*(void *(**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v44 + 56))(&v63, v37, v43, v44);
  uint64_t v46 = v63;
  if (!(void)v63) {
    goto LABEL_20;
  }
  long long v73 = v63;
  uint64_t v74 = v64;
  uint64_t v75 = v65;
  uint64_t v76 = v66;
  uint64_t v77 = v67;
  uint64_t v78 = v68;
  int v79 = v69;
  LOWORD(v80) = v70 & 0x1FF;
  uint64_t v81 = v71;
  char v82 = v72;
  uint64_t v47 = ((uint64_t (*)(void *))v63)(v45);
  if (v47)
  {
    unint64_t v48 = v47;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    unint64_t v48 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v73);
    outlined consume of MeshBuffer<SIMD3<Float>>?(v46);
  }
  outlined consume of MeshBuffer<SIMD3<Float>>?(v46);
  uint64_t v49 = a1[3];
  uint64_t v50 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v49);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v50 + 8))(&v63, v49, v50);
  uint64_t v51 = *(void *)(v48 + 16);
  if (!HIDWORD(v51))
  {
    uint64_t v52 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v33 = a2(a6, v52 + 32, v60, (uint64_t (*)())v51, v48 + 32);
    goto LABEL_18;
  }
LABEL_22:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  void *v18;
  uint64_t (*v19)();
  void *v20;
  char v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *(*v34)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  unsigned int v57;
  uint64_t (*v58)();
  char v59;
  void *v60;
  unsigned int v62;
  unsigned char v64[32];
  long long v65;
  uint64_t (*v66)();
  void *v67;
  uint64_t (*v68)();
  void *v69;
  uint64_t (*v70)();
  void *v71;
  uint64_t v72;
  uint64_t (*v73)();
  char v74;
  long long v75;
  uint64_t (*v76)();
  void *v77;
  uint64_t (*v78)();
  void *v79;
  uint64_t (*v80)();
  void *v81;
  uint64_t v82;
  uint64_t (*v83)();
  char v84;

  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v75, v9, v10);
  os_log_t v62 = 0x30201u >> (8 * v75);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 32))(&v75, v11, v12);
  if (v75 == 9
    && (uint64_t v13 = a1[3],
        uint64_t v14 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v13),
        (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t, uint64_t))(v14 + 56))(&v75, &type metadata for FloatVector3Packed, v13, v14), (uint64_t v15 = v75) != 0))
  {
    uint64_t v17 = *((void *)&v75 + 1);
    uint64_t v16 = v76;
    char v18 = v77;
    char v19 = v78;
    unint64_t v20 = v79;
    __n128 v58 = v80;
    char v21 = v82;
    unsigned int v60 = v81;
    uint64_t v22 = v83;
    uint64_t v59 = v84;
    char v57 = (v82 >> 8) & 1;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v15;
    *(void *)(v23 + 24) = v17;
    *(void *)(v23 + 32) = v16;
    *(void *)(v23 + 40) = v18;
    *(void *)(v23 + 48) = v19;
    *(void *)(v23 + 56) = v20;
    *(void *)(v23 + 64) = v58;
    *(void *)(v23 + 72) = v60;
    *(unsigned char *)(v23 + 80) = v21;
    *(unsigned char *)(v23 + 81) = v57;
    *(void *)(v23 + 88) = v22;
    *(unsigned char *)(v23 + 96) = v59;
    *(void *)(v23 + 104) = closure #1 in MeshBuffer<A>.asSIMD3.getter;
    *(void *)(v23 + 112) = 0;
    *(void *)&uint64_t v65 = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    *((void *)&v65 + 1) = v23;
    uint64_t v66 = v22;
    outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>((uint64_t)&v65, (uint64_t)v64);
    uint64_t v56 = v15;
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v65;
    *(void *)(v24 + 32) = v66;
    os_log_type_t v25 = (void *)swift_allocObject();
    _OWORD v25[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v25[3] = v23;
    v25[4] = v22;
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v26[3] = v23;
    v26[4] = v22;
    uint64_t v27 = (void *)swift_allocObject();
    v27[2] = closure #1 in ConversionBuffer.init(_:_:)specialized partial apply;
    v27[3] = v23;
    v27[4] = v22;
    *(void *)&uint64_t v75 = __RKEntityLookAtCameraAction.reversed();
    *((void *)&v75 + 1) = v24;
    uint64_t v76 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    uint64_t v77 = v25;
    uint64_t v78 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    int v79 = v26;
    uint64_t v80 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
    uint64_t v81 = v27;
    LOWORD(v82) = 9;
    uint64_t v83 = v22;
    uint64_t v84 = 0;
    swift_retain();
    outlined destroy of BodyTrackingComponent?((uint64_t)v64, &demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
    swift_retain_n();
    outlined copy of MeshBuffer<SIMD3<Float>>?(v56);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v28 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v75);
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    int64_t v29 = *(void *)(v28 + 16);
    *(void *)&uint64_t v65 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    uint64_t v30 = v65;
    uint64_t v31 = *(void *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();
      outlined consume of MeshBuffer<SIMD3<Float>>?(v56);
      goto LABEL_13;
    }
    uint64_t v52 = a1[3];
    long long v53 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v52);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v53 + 8))(&v65, v52, v53);
    if (((unint64_t)v22 & 0x8000000000000000) == 0 && !((unint64_t)v22 >> 32))
    {
      uint64_t v54 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v41 = a2(a6, v54 + 32, v62, v22, v30 + 32);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v56);
      swift_release();
      swift_release();
      return v41 & 1;
    }
  }
  else
  {
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v32);
    uint64_t v34 = *(void *(**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v33 + 56);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    uint64_t v36 = v34(&v75, v35, v32, v33);
    uint64_t v37 = v75;
    if ((void)v75)
    {
      char v38 = ((uint64_t (*)(void *))v76)(v36);
      if (v38)
      {
        uint64_t v40 = specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(v38 + 32, *(void *)(v38 + 16), v39, a4, a5, a6, a1, v62);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v40 != 2)
        {
          uint64_t v41 = v40 & 1;
          return v41 & 1;
        }
      }
      else
      {
        outlined consume of MeshBuffer<SIMD3<Float>>?(v37);
      }
    }
    unint64_t v42 = a1[3];
    uint64_t v43 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v42);
    uint64_t v44 = (*(void *(**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v43 + 56))(&v65, v35, v42, v43);
    uint64_t v45 = v65;
    if (!(void)v65)
    {
LABEL_13:
      uint64_t v41 = 0;
      return v41 & 1;
    }
    uint64_t v75 = v65;
    uint64_t v76 = v66;
    uint64_t v77 = v67;
    uint64_t v78 = v68;
    int v79 = v69;
    uint64_t v80 = v70;
    uint64_t v81 = v71;
    LOWORD(v82) = v72 & 0x1FF;
    uint64_t v83 = v73;
    uint64_t v84 = v74;
    uint64_t v46 = ((uint64_t (*)(void *))v65)(v44);
    if (v46)
    {
      uint64_t v47 = v46;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v47 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v75);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v45);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v45);
    unint64_t v48 = a1[3];
    uint64_t v49 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v48);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v49 + 8))(&v65, v48, v49);
    uint64_t v50 = *(void *)(v47 + 16);
    if (!HIDWORD(v50))
    {
      uint64_t v51 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t v41 = a2(a6, v51 + 32, v62, (uint64_t (*)())v50, v47 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      return v41 & 1;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeUInt8(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22A68EC40](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeUInt8(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeUInt8();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeUInt16(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22A68EC20](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeUInt16(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeUInt16();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeUInt32(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22A68EC30](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeUInt32(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeUInt32();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeInt8(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22A68EC10](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeInt8(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeInt8();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeInt16(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22A68EBF0](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeInt16(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeInt16();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeInt32(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22A68EC00](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeInt32(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeInt32();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeFloat(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22A68EBE0](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeFloat(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeFloat();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeDouble(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22A68EBD0](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeDouble(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeDouble();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeVector2F(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22A68EC50](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeVector2F(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeVector2F();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeVector3F(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22A68EC60](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeVector3F(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeVector3F();
}

uint64_t @nonobjc REGeomModelDescriptorAddAttributeVector4F(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return MEMORY[0x22A68EC70](a1, a2, a3);
}

uint64_t @nonobjc REGeomModelDescriptorAddIndexedAttributeVector4F(_:_:_:_:_:_:_:)()
{
  return REGeomModelDescriptorAddIndexedAttributeVector4F();
}

uint64_t MeshDescriptor.makeGeomMesh()@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[4];
  long long v4 = v1[5];
  long long v5 = v1[2];
  long long v58 = v1[3];
  v59[0] = v3;
  v59[1] = v4;
  long long v6 = v1[1];
  long long v55 = *v1;
  uint64_t v60 = *((void *)v1 + 12);
  long long v56 = v6;
  long long v57 = v5;
  outlined retain of MeshDescriptor((uint64_t)&v55);
  specialized MeshBufferContainer.positions.getter((uint64_t)&v51);
  outlined release of MeshDescriptor((uint64_t)&v55);
  unint64_t v7 = v54;
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (!v7)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
LABEL_68:
    *(_WORD *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 18) = 1;
    return result;
  }
  outlined retain of MeshDescriptor((uint64_t)&v55);
  specialized MeshBufferContainer.positions.getter((uint64_t)&v51);
  outlined release of MeshDescriptor((uint64_t)&v55);
  unint64_t v9 = v54;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v10 = *((void *)&v57 + 1);
  uint64_t v11 = v58;
  if (BYTE8(v58) > 1u)
  {
    if (BYTE8(v58) == 2)
    {
      size_t v13 = *(void *)(*((void *)&v57 + 1) + 16) / 3uLL;
      size_t v14 = *(void *)(v58 + 16) >> 2;
      size_t v12 = v14 + v13;
      outlined copy of MeshDescriptor.Primitives(*((uint64_t *)&v57 + 1), v58, 2u);
      uint64_t v15 = specialized Array.init(repeating:count:)(3, v13);
      uint64_t v16 = specialized Array.init(repeating:count:)(4, v14);
      *(void *)&long long v51 = v15;
      specialized Array.append<A>(contentsOf:)(v16);
      *(void *)&long long v51 = v10;
      specialized Array.append<A>(contentsOf:)(v11);
    }
    else
    {
      size_t v12 = 0;
    }
  }
  else if (BYTE8(v58))
  {
    size_t v12 = *(void *)(*((void *)&v57 + 1) + 16);
    outlined copy of MeshDescriptor.Primitives(*((uint64_t *)&v57 + 1), v58, 1u);
  }
  else
  {
    size_t v12 = *(void *)(*((void *)&v57 + 1) + 16) / 3uLL;
    outlined copy of MeshDescriptor.Primitives(*((uint64_t *)&v57 + 1), v58, 0);
    specialized Array.init(repeating:count:)(3, v12);
  }
  if ((v9 & 0x8000000000000000) != 0 || HIDWORD(v9) || HIDWORD(v12)) {
    goto LABEL_89;
  }
  uint64_t v17 = REGeomModelDescriptorCreate();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v17)
  {
    *(_OWORD *)a1 = xmmword_228323FE0;
    goto LABEL_68;
  }
  uint64_t v45 = a1;
  uint64_t v46 = v17;
  unint64_t v44 = v9;
  uint64_t v18 = v56;
  outlined retain of MeshDescriptor((uint64_t)&v55);
  uint64_t v19 = specialized _NativeDictionary.mapValues<A>(_:)(v18);
  outlined release of MeshDescriptor((uint64_t)&v55);
  int64_t v20 = 0;
  uint64_t v21 = v19 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & *(void *)(v19 + 64);
  int64_t v25 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      unint64_t v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v27 = v26 | (v20 << 6);
      goto LABEL_37;
    }
    int64_t v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    if (v28 >= v25) {
      goto LABEL_65;
    }
    unint64_t v29 = *(void *)(v21 + 8 * v28);
    ++v20;
    if (v29) {
      goto LABEL_36;
    }
    int64_t v20 = v28 + 1;
    if (v28 + 1 >= v25) {
      goto LABEL_65;
    }
    unint64_t v29 = *(void *)(v21 + 8 * v20);
    if (v29) {
      goto LABEL_36;
    }
    int64_t v20 = v28 + 2;
    if (v28 + 2 >= v25) {
      goto LABEL_65;
    }
    unint64_t v29 = *(void *)(v21 + 8 * v20);
    if (v29) {
      goto LABEL_36;
    }
    int64_t v20 = v28 + 3;
    if (v28 + 3 >= v25) {
      goto LABEL_65;
    }
    unint64_t v29 = *(void *)(v21 + 8 * v20);
    if (v29) {
      goto LABEL_36;
    }
    int64_t v30 = v28 + 4;
    if (v30 >= v25)
    {
LABEL_65:
      swift_release();
      String.utf8CString.getter();
      REGeomModelDescriptorSetName();
      swift_release();
      outlined init with take of MeshDescriptor.Materials((uint64_t *)&v56 + 1, (uint64_t)v64);
      outlined init with take of MeshDescriptor.Materials(v64, (uint64_t)&v47);
      if (v48) {
        REGeomModelDescriptorSetMaterialAssignmentsPerFace();
      }
      else {
        REGeomModelDescriptorSetMaterialAssignmentForModel();
      }
      outlined init with take of Transform?((uint64_t)v59, (uint64_t)&v61, &demangling cache variable for type metadata for MeshDescriptor.Skinning?);
      uint64_t result = outlined init with take of Transform?((uint64_t)&v61, (uint64_t)&v51, &demangling cache variable for type metadata for MeshDescriptor.Skinning?);
      if (!*((void *)&v51 + 1)) {
        goto LABEL_78;
      }
      uint64_t v38 = v53 * v44;
      if ((unsigned __int128)(v53 * (__int128)(uint64_t)v44) >> 64 == (uint64_t)(v53 * v44) >> 63)
      {
        if (!v38 || *(void *)(*((void *)&v52 + 1) + 16) != v38 || *(void *)(v52 + 16) != v38)
        {
          uint64_t result = RERelease();
          *(_OWORD *)uint64_t v45 = xmmword_228323FE0;
          *(_WORD *)(v45 + 16) = 0;
          *(unsigned char *)(v45 + 18) = 1;
          return result;
        }
        if (v53 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v53 <= 0x7FFFFFFF)
          {
            String.utf8CString.getter();
            REGeomModelDescriptorAddSkinningData();
            uint64_t result = swift_release();
LABEL_78:
            *(void *)uint64_t v45 = v46;
            *(void *)(v45 + 8) = 0;
            *(_WORD *)(v45 + 16) = 0;
            *(unsigned char *)(v45 + 18) = 0;
            return result;
          }
LABEL_88:
          __break(1u);
LABEL_89:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x22807F958);
        }
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    unint64_t v29 = *(void *)(v21 + 8 * v30);
    if (!v29)
    {
      while (1)
      {
        int64_t v20 = v30 + 1;
        if (__OFADD__(v30, 1)) {
          goto LABEL_85;
        }
        if (v20 >= v25) {
          goto LABEL_65;
        }
        unint64_t v29 = *(void *)(v21 + 8 * v20);
        ++v30;
        if (v29) {
          goto LABEL_36;
        }
      }
    }
    int64_t v20 = v30;
LABEL_36:
    unint64_t v24 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v20 << 6);
LABEL_37:
    outlined init with copy of AnyMeshBuffer(*(void *)(v19 + 56) + 40 * v27, (uint64_t)&v51);
    uint64_t v63 = v53;
    long long v61 = v51;
    long long v62 = v52;
    uint64_t v31 = *((void *)&v52 + 1);
    uint64_t v32 = v53;
    __swift_project_boxed_opaque_existential_1(&v61, *((uint64_t *)&v52 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v32 + 8))(&v47, v31, v32);
    uint64_t v34 = v47;
    uint64_t v33 = v48;
    if (one-time initialization token for triangleIndices != -1) {
      swift_once();
    }
    if (v34 == static MeshBuffers.Identifier.triangleIndices && v33 == unk_2681C1CD0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0) {
      break;
    }
LABEL_18:
    outlined destroy of AnyMeshBuffer((uint64_t)&v61);
  }
  uint64_t v36 = *((void *)&v62 + 1);
  uint64_t v37 = v63;
  __swift_project_boxed_opaque_existential_1(&v61, *((uint64_t *)&v62 + 1));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v37 + 32))(&v47, v36, v37);
  switch((char)v47)
  {
    case 1:
      if ((specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(&v61, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))@nonobjc REGeomModelDescriptorAddAttributeUInt16(_:_:_:_:_:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))@nonobjc REGeomModelDescriptorAddIndexedAttributeUInt16(_:_:_:_:_:_:_:), 0, v46) & 1) == 0)goto LABEL_80; {
      goto LABEL_18;
      }
    case 2:
      if ((specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(&v61, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))@nonobjc REGeomModelDescriptorAddAttributeUInt32(_:_:_:_:_:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))@nonobjc REGeomModelDescriptorAddIndexedAttributeUInt32(_:_:_:_:_:_:_:), 0, v46) & 1) == 0)goto LABEL_80; {
      goto LABEL_18;
      }
    case 3:
      if ((specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(&v61, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))@nonobjc REGeomModelDescriptorAddAttributeInt8(_:_:_:_:_:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))@nonobjc REGeomModelDescriptorAddIndexedAttributeInt8(_:_:_:_:_:_:_:), 0, v46) & 1) == 0)goto LABEL_80; {
      goto LABEL_18;
      }
    case 4:
      if ((specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(&v61, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))@nonobjc REGeomModelDescriptorAddAttributeInt16(_:_:_:_:_:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))@nonobjc REGeomModelDescriptorAddIndexedAttributeInt16(_:_:_:_:_:_:_:), 0, v46) & 1) == 0)goto LABEL_80; {
      goto LABEL_18;
      }
    case 5:
      if ((specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(&v61, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))@nonobjc REGeomModelDescriptorAddAttributeInt32(_:_:_:_:_:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))@nonobjc REGeomModelDescriptorAddIndexedAttributeInt32(_:_:_:_:_:_:_:), 0, v46) & 1) == 0)goto LABEL_80; {
      goto LABEL_18;
      }
    case 6:
      if ((specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(&v61, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))@nonobjc REGeomModelDescriptorAddAttributeFloat(_:_:_:_:_:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))@nonobjc REGeomModelDescriptorAddIndexedAttributeFloat(_:_:_:_:_:_:_:), 0, v46) & 1) == 0)goto LABEL_80; {
      goto LABEL_18;
      }
    case 7:
      if ((specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(&v61, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))@nonobjc REGeomModelDescriptorAddAttributeDouble(_:_:_:_:_:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))@nonobjc REGeomModelDescriptorAddIndexedAttributeDouble(_:_:_:_:_:_:_:), 0, v46) & 1) == 0)goto LABEL_80; {
      goto LABEL_18;
      }
    case 8:
      if ((specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(&v61, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))@nonobjc REGeomModelDescriptorAddAttributeVector2F(_:_:_:_:_:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))@nonobjc REGeomModelDescriptorAddIndexedAttributeVector2F(_:_:_:_:_:_:_:), 0, v46) & 1) == 0)goto LABEL_80; {
      goto LABEL_18;
      }
    case 9:
      if ((specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(&v61, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))@nonobjc REGeomModelDescriptorAddAttributeVector3F(_:_:_:_:_:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))@nonobjc REGeomModelDescriptorAddIndexedAttributeVector3F(_:_:_:_:_:_:_:), 0, v46) & 1) == 0)goto LABEL_80; {
      goto LABEL_18;
      }
    case 10:
      if ((specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(&v61, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))@nonobjc REGeomModelDescriptorAddAttributeVector4F(_:_:_:_:_:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))@nonobjc REGeomModelDescriptorAddIndexedAttributeVector4F(_:_:_:_:_:_:_:), 0, v46) & 1) == 0)goto LABEL_80; {
      goto LABEL_18;
      }
    case 11:
      goto LABEL_80;
    default:
      if (specialized addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(&v61, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))@nonobjc REGeomModelDescriptorAddAttributeUInt8(_:_:_:_:_:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))@nonobjc REGeomModelDescriptorAddIndexedAttributeUInt8(_:_:_:_:_:_:_:), 0, v46))goto LABEL_18; {
LABEL_80:
      }
      RERelease();
      uint64_t v39 = *((void *)&v62 + 1);
      uint64_t v40 = v63;
      __swift_project_boxed_opaque_existential_1(&v61, *((uint64_t *)&v62 + 1));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v40 + 8))(&v47, v39, v40);
      outlined destroy of AnyMeshBuffer((uint64_t)&v61);
      uint64_t result = swift_release();
      uint64_t v41 = v48;
      __int16 v42 = v49;
      if (v50) {
        __int16 v43 = 256;
      }
      else {
        __int16 v43 = 0;
      }
      *(void *)uint64_t v45 = v47;
      *(void *)(v45 + 8) = v41;
      *(_WORD *)(v45 + 16) = v43 | v42;
      *(unsigned char *)(v45 + 18) = 1;
      break;
  }
  return result;
}

uint64_t MeshPartBuffer.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t static MeshResource.Skeleton.unpack(coreAsset:skeletonIndex:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t SkeletonJointCount = REMeshAssetGetSkeletonJointCount();
  REMeshAssetGetSkeletonName();
  uint64_t v3 = String.init(cString:)();
  unint64_t v5 = v4;
  long long v6 = (void *)MEMORY[0x263F8EE78];
  unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletonJointCount & ~(SkeletonJointCount >> 63), 0, MEMORY[0x263F8EE78]);
  uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletonJointCount & ~(SkeletonJointCount >> 63), 0, v6);
  unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletonJointCount & ~(SkeletonJointCount >> 63), 0, v6);
  if (SkeletonJointCount < 0)
  {
    __break(1u);
    _StringGuts.grow(_:)(31);
    v31._object = (void *)0x8000000228357860;
    v31._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v31);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v10 = v9;
    unint64_t v35 = v5;
    uint64_t v36 = v3;
    if (SkeletonJointCount)
    {
      uint64_t v34 = a1;
      for (uint64_t i = 0; i != SkeletonJointCount; ++i)
      {
        REMeshAssetGetSkeletonJointName();
        uint64_t v12 = String.init(cString:)();
        uint64_t v14 = v13;
        unint64_t v16 = v7[2];
        unint64_t v15 = v7[3];
        if (v16 >= v15 >> 1) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v7);
        }
        v7[2] = v16 + 1;
        uint64_t v17 = &v7[2 * v16];
        _OWORD v17[4] = v12;
        v17[5] = v14;
        REMeshAssetGetSkeletonBindPoseTransform();
        long long v21 = v18;
        if (one-time initialization token for identity != -1)
        {
          long long v39 = v20;
          long long v41 = v18;
          long long v32 = v19;
          swift_once();
          long long v19 = v32;
          long long v20 = v39;
          long long v21 = v41;
        }
        unint64_t v23 = v8[2];
        unint64_t v22 = v8[3];
        if (v23 >= v22 >> 1)
        {
          long long v40 = v20;
          long long v42 = v21;
          long long v33 = v19;
          int64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v8);
          long long v19 = v33;
          long long v20 = v40;
          long long v21 = v42;
          uint64_t v8 = v28;
        }
        HIDWORD(v21) = v38;
        HIDWORD(v20) = v37;
        v8[2] = v23 + 1;
        unint64_t v24 = &v8[6 * v23];
        void v24[2] = v21;
        v24[3] = v19;
        v24[4] = v20;
        uint64_t SkeletonJointParent = REMeshAssetGetSkeletonJointParent();
        unint64_t v27 = v10[2];
        unint64_t v26 = v10[3];
        if (v27 >= v26 >> 1) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v10);
        }
        v10[2] = v27 + 1;
        v10[v27 + 4] = SkeletonJointParent;
      }
      if (SkeletonJointCount < 1)
      {
        uint64_t v29 = MEMORY[0x263F8EE78];
      }
      else
      {
        type metadata accessor for simd_float4x4(0);
        uint64_t v29 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v29 + 16) = SkeletonJointCount;
      }
      a1 = v34;
    }
    else
    {
      uint64_t v29 = MEMORY[0x263F8EE78];
    }
    REMeshAssetCopySkeletonInverseBindPoseTransforms();
    *(void *)(v29 + 16) = SkeletonJointCount;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MeshResource.Skeleton.init(id:jointNames:inverseBindPose:localRestPose:parentIndices:)(v36, v35, (uint64_t)v7, v29, (uint64_t)v8, (uint64_t)v10, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MeshResource.Model.combine()()
{
  void (*v18)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  long long v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t i;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  Class v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  Class isa;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  Class v120;
  uint64_t v121;
  int64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  int64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  char v138;
  char v139;
  unint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  Class v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t (*v153)(uint64_t);
  uint64_t v154;
  long long v155;
  long long v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  long long v170;
  Class v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  Class v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)();
  long long v213;
  Class v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  void (*v222)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  void (*v239)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void (*v251)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v252;
  long long v253;
  uint64_t v254;
  uint64_t v255;
  long long v256;
  __int16 v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void (*v264)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v265;
  long long v266;
  uint64_t v267;
  uint64_t v268;
  long long v269;
  __int16 v270;
  char v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void (*v277)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v278;
  long long v279;
  uint64_t v280;
  uint64_t v281;
  long long v282;
  __int16 v283;
  char v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t (*v289)(uint64_t);
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  Class v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  float v315;
  float v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t result;
  uint64_t v320;
  uint64_t v321;
  long long v322;
  long long *v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  int64_t v363;
  uint64_t (*v364)(uint64_t, uint64_t);
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  int64_t v373;
  long long v374[2];
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  long long v379;
  long long v380;
  uint64_t v381;
  _OWORD v382[4];
  long long v383;
  long long v384;
  long long v385;
  long long v386;
  long long v387;
  char v388;
  long long v389;
  long long v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  void v394[3];
  uint64_t v395;
  uint64_t v396;
  uint64_t v397[10];
  void v398[6];
  long long v399;
  __int16 v400;
  uint64_t v401;
  char v402;
  _OWORD v403[5];
  char v404;
  long long v405;
  long long v406;
  unsigned char v407[25];
  _OWORD v408[4];
  __int16 v409;
  uint64_t v410;
  char v411;
  _OWORD v412[4];
  __int16 v413;
  uint64_t v414;
  char v415;
  _OWORD v416[4];
  __int16 v417;
  uint64_t v418;
  char v419;
  _OWORD v420[4];
  __int16 v421;
  uint64_t v422;
  char v423;
  long long v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  long long v429;
  __int16 v430;
  uint64_t v431;
  char v432;
  long long v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  long long v438;
  __int16 v439;
  uint64_t v440;
  char v441;
  long long v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  long long v447;
  __int16 v448;
  uint64_t v449;
  char v450;
  _OWORD v451[4];
  __int16 v452;
  uint64_t v453;
  char v454;
  _OWORD v455[4];
  __int16 v456;
  uint64_t v457;
  char v458;
  _OWORD v459[4];
  __int16 v460;
  uint64_t v461;
  char v462;
  _OWORD v463[4];
  __int16 v464;
  uint64_t v465;
  char v466;
  char v467[8];
  unsigned char v468[16];
  char v469[8];
  uint64_t v470;
  void v471[2];
  int v472;
  char v473;
  uint64_t v474;

  uint64_t v2 = *(void *)(v0 + 16);
  v337 = *(void *)(v0 + 32);
  uint64_t v3 = REMeshModelDefinitionCreate();
  type metadata accessor for MeshModelDefinition();
  v338 = swift_allocObject();
  *(void *)(v338 + 16) = v3;
  String.utf8CString.getter();
  REMeshModelDefinitionSetName();
  swift_release();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v397[0] = (uint64_t)v4;
  specialized MutableCollection<>.sort(by:)(v397, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  if (v1) {
    goto LABEL_332;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v397[0];
  uint64_t v6 = *(void *)(v397[0] + 16);
  if (!v6)
  {
    swift_release();
    return v338;
  }
  unint64_t v7 = 0;
  v349 = v397[0] + 32;
  v474 = (uint64_t)&v384 + 8;
  v334 = *MEMORY[0x263F37688];
  v333 = *MEMORY[0x263F37680];
  v360 = *MEMORY[0x263F375E8];
  v328 = *MEMORY[0x263F37620];
  v329 = *MEMORY[0x263F37628];
  v327 = *MEMORY[0x263F37618];
  v330 = *MEMORY[0x263F376A0];
  v331 = *MEMORY[0x263F375D8];
  v332 = *MEMORY[0x263F37690];
  v335 = *MEMORY[0x263F37660];
  v345 = *MEMORY[0x263F37670];
  v370 = -1;
  v342 = v397[0];
  v340 = v6;
  while (1)
  {
    if (v7 >= *(void *)(v5 + 16)) {
      goto LABEL_319;
    }
    uint64_t v8 = (long long *)(v349 + (v7 << 6));
    long long v10 = v8[1];
    long long v9 = v8[2];
    long long v11 = *v8;
    *(_OWORD *)&v407[9] = *(long long *)((char *)v8 + 41);
    *(_OWORD *)v407 = v9;
    v405 = v11;
    v406 = v10;
    uint64_t v12 = v11;
    ++v370;
    uint64_t v13 = *(void *)(v11 + 16);
    outlined retain of MeshResource.Part((uint64_t)&v405);
    outlined retain of MeshResource.Part((uint64_t)&v405);
    if (!v13) {
      goto LABEL_4;
    }
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
    if ((v15 & 1) == 0) {
      goto LABEL_4;
    }
    v344 = v12;
    outlined init with copy of __REAssetService(*(void *)(v12 + 56) + 40 * v14, (uint64_t)&v383);
    outlined init with take of BindableDataInternal(&v383, (uint64_t)v394);
    v346 = v7;
    uint64_t v16 = v395;
    uint64_t v17 = v396;
    __swift_project_boxed_opaque_existential_1(v394, v395);
    long long v18 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(v17 + 56);
    long long v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    long long v20 = v16;
    unint64_t v7 = v346;
    uint64_t v5 = v342;
    v18(v397, v19, v20, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v394);
    long long v21 = v397[0];
    if (!v397[0])
    {
LABEL_4:
      swift_release();
      swift_bridgeObjectRelease_n();
      outlined release of MeshResource.Part((uint64_t)&v405);
      goto LABEL_5;
    }
    unint64_t v22 = v397[9];
    outlined release of MeshResource.Part((uint64_t)&v405);
    unint64_t v7 = v346;
    uint64_t v5 = v342;
    uint64_t v6 = v340;
    outlined consume of MeshBuffer<SIMD3<Float>>?(v21);
    v339 = v22;
    if (v22 >= 1) {
      break;
    }
LABEL_5:
    outlined release of MeshResource.Part((uint64_t)&v405);
LABEL_6:
    if (++v7 == v6)
    {
      swift_release();
      return v338;
    }
  }
  outlined init with take of Transform?((uint64_t)&v406 + 8, (uint64_t)v468, &demangling cache variable for type metadata for String?);
  unint64_t v23 = (void *)MEMORY[0x263F8EE78];
  v393 = MEMORY[0x263F8EE78];
  unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  v341 = specialized Dictionary.init(dictionaryLiteral:)(v23);
  v392 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v23);
  v391 = 0;
  v389 = 0u;
  v390 = 0u;
  v382[0] = v405;
  v382[1] = v406;
  v382[2] = *(_OWORD *)v407;
  *(_OWORD *)((char *)&v382[2] + 9) = *(_OWORD *)&v407[9];
  MeshResource.Part.jointInfluences.getter((uint64_t)&v383);
  outlined init with take of Transform?((uint64_t)&v383, (uint64_t)v394, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  outlined release of MeshResource.JointInfluences?((uint64_t)v394);
  outlined init with take of Transform?((uint64_t)v394, (uint64_t)v397, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  if (getEnumTag for RealityRenderer.CameraSettings.ColorBackground.Value(v397) != 1)
  {
    outlined init with take of Transform?((uint64_t)v468, (uint64_t)v469, &demangling cache variable for type metadata for String?);
    if (v470)
    {
      type metadata accessor for MeshAttributeDescriptor();
      int64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v334;
      MEMORY[0x22A688E10](v25, v26, v27);
      if (*(void *)((v393 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v393 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      int64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v333;
      MEMORY[0x22A688E10](v28, v29, v30);
      if (*(void *)((v393 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v393 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  v362 = v24;
  outlined retain of MeshResource.Part((uint64_t)&v405);
  Swift::String v31 = specialized _NativeDictionary.mapValues<A>(_:)(v344);
  outlined release of MeshResource.Part((uint64_t)&v405);
  long long v32 = 0;
  long long v33 = *(void *)(v31 + 64);
  v371 = v31 + 64;
  uint64_t v34 = 1 << *(unsigned char *)(v31 + 32);
  if (v34 < 64) {
    unint64_t v35 = ~(-1 << v34);
  }
  else {
    unint64_t v35 = -1;
  }
  uint64_t v36 = v35 & v33;
  v373 = (unint64_t)(v34 + 63) >> 6;
  if ((v35 & v33) == 0) {
    goto LABEL_25;
  }
LABEL_23:
  int v37 = __clz(__rbit64(v36));
  v36 &= v36 - 1;
  int v38 = v37 | (v32 << 6);
LABEL_24:
  long long v39 = *(void *)(v31 + 56);
  long long v40 = *(void *)(v31 + 48) + 24 * v38;
  long long v41 = *(void *)v40;
  long long v42 = *(void *)(v40 + 8);
  __int16 v43 = *(unsigned char *)(v40 + 16);
  LOBYTE(v40) = *(unsigned char *)(v40 + 17);
  *(void *)&v382[0] = v41;
  *((void *)&v382[0] + 1) = v42;
  LOBYTE(v382[1]) = v43;
  BYTE1(v382[1]) = v40;
  outlined init with copy of AnyMeshBuffer(v39 + 40 * v38, (uint64_t)&v382[1] + 8);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of Transform?((uint64_t)v382, (uint64_t)&v383, &demangling cache variable for type metadata for (key: MeshBuffers.Identifier, value: AnyMeshBuffer)?);
    uint64_t v47 = *((void *)&v383 + 1);
    if (!*((void *)&v383 + 1)) {
      break;
    }
    uint64_t v48 = v383;
    unsigned __int8 v49 = BYTE1(v384);
    char v50 = *(_OWORD *)(v474 + 16);
    v382[0] = *(_OWORD *)v474;
    v382[1] = v50;
    *(void *)&v382[2] = *(void *)(v474 + 32);
    if (one-time initialization token for triangleIndices != -1) {
      swift_once();
    }
    if (v48 == static MeshBuffers.Identifier.triangleIndices && unk_2681C1CD0 == v47
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v389, &demangling cache variable for type metadata for AnyMeshBuffer?);
      v389 = v382[0];
      v390 = v382[1];
      v391 = *(void *)&v382[2];
      if (v36) {
        goto LABEL_23;
      }
    }
    else
    {
      if (one-time initialization token for jointInfluences != -1) {
        swift_once();
      }
      if (v48 == static MeshBuffers.Identifier.jointInfluences && *(void *)algn_2681C1CE8 == v47
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        goto LABEL_49;
      }
      if (one-time initialization token for jointInfluenceEndIndices != -1) {
        swift_once();
      }
      if (v48 == static MeshBuffers.Identifier.jointInfluenceEndIndices && unk_2681C1D00 == v47
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_49:
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v51 = *((void *)&v382[1] + 1);
        long long v52 = *(void *)&v382[2];
        __swift_project_boxed_opaque_existential_1(v382, *((uint64_t *)&v382[1] + 1));
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v52 + 24))(&v379, v51, v52);
        if ((_BYTE)v379)
        {
          type metadata accessor for OS_os_log();
          swift_bridgeObjectRetain();
          uint64_t v53 = static OS_os_log.default.getter();
          unint64_t v54 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v53, v54))
          {
            long long v55 = swift_slowAlloc();
            long long v56 = swift_slowAlloc();
            *(void *)&v379 = v56;
            *(_DWORD *)long long v55 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)(v55 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v47, (uint64_t *)&v379);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_227DD2000, v53, v54, "Skipping non-vertex rate attribute '%s'", (uint8_t *)v55, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x22A696500](v56, -1, -1);
            MEMORY[0x22A696500](v55, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }
        }
        else
        {
          long long v57 = *((void *)&v382[1] + 1);
          long long v58 = *(void *)&v382[2];
          __swift_project_boxed_opaque_existential_1(v382, *((uint64_t *)&v382[1] + 1));
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v58 + 32))(&v379, v57, v58);
          if (!MeshBuffers.ElementType.genericAttributeDescriptor.getter()) {
            goto LABEL_323;
          }
          uint64_t v59 = *((void *)&v382[1] + 1);
          uint64_t v60 = *(void *)&v382[2];
          __swift_project_boxed_opaque_existential_1(v382, *((uint64_t *)&v382[1] + 1));
          v364 = *(uint64_t (**)(uint64_t, uint64_t))(v60 + 48);
          swift_bridgeObjectRetain();
          long long v61 = v364(v59, v60);
          if (v62 >> 60 == 15)
          {
            specialized Dictionary._Variant.removeValue(forKey:)(v48, v47, &v379);
            swift_bridgeObjectRelease();
            outlined consume of Data?(v379, *((unint64_t *)&v379 + 1));
          }
          else
          {
            uint64_t v63 = v61;
            uint64_t v64 = v62;
            uint64_t v65 = v392;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v379 = v65;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, v64, v48, v47, isUniquelyReferenced_nonNull_native);
            v392 = v379;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          os_log_type_t v67 = v393;
          int v68 = v393 >> 62;
          if (v393 >> 62)
          {
            swift_bridgeObjectRetain();
            v365 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v365 = *(void *)((v393 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRetain();
          uint64_t v69 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v379 = v341;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, v47, v365, v69);
          v341 = v379;
          swift_bridgeObjectRelease();
          if (v68)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v70 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          uint64_t v71 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v379 = v362;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v70, v48, v47, v71);
          v362 = v379;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          if (v49)
          {
            type metadata accessor for MeshAttributeDescriptor();
            char v72 = swift_allocObject();
            *(void *)(v72 + 16) = v360;
            MEMORY[0x22A688E10](v72, v73, v74);
            if (*(void *)((v393 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v393 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
          }
          else
          {
            uint64_t v75 = swift_retain();
            MEMORY[0x22A688E10](v75);
            if (*(void *)((v393 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v393 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
        }
      }
      outlined destroy of AnyMeshBuffer((uint64_t)v382);
      if (v36) {
        goto LABEL_23;
      }
    }
LABEL_25:
    unint64_t v44 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
LABEL_318:
      __break(1u);
LABEL_319:
      __break(1u);
LABEL_320:
      outlined release of MeshResource.Part((uint64_t)&v405);
      swift_release();
      swift_bridgeObjectRelease();
      v320 = *((void *)&v382[1] + 1);
      v321 = *(void *)&v382[2];
      __swift_project_boxed_opaque_existential_1(v382, *((uint64_t *)&v382[1] + 1));
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v321 + 8))(&v383, v320, v321);
      v322 = v383;
      lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
      swift_allocError();
      *v323 = v322;
      swift_willThrow();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v382);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v389, &demangling cache variable for type metadata for AnyMeshBuffer?);
      swift_bridgeObjectRelease();
LABEL_321:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v338;
    }
    if (v44 >= v373)
    {
      uint64_t v46 = v32;
    }
    else
    {
      uint64_t v45 = *(void *)(v371 + 8 * v44);
      if (v45) {
        goto LABEL_28;
      }
      uint64_t v46 = v32 + 1;
      if (v32 + 2 < v373)
      {
        uint64_t v45 = *(void *)(v371 + 8 * (v32 + 2));
        if (v45)
        {
          unint64_t v44 = v32 + 2;
LABEL_28:
          uint64_t v36 = (v45 - 1) & v45;
          int v38 = __clz(__rbit64(v45)) + (v44 << 6);
          long long v32 = v44;
          goto LABEL_24;
        }
        uint64_t v46 = v32 + 2;
        if (v32 + 3 < v373)
        {
          uint64_t v45 = *(void *)(v371 + 8 * (v32 + 3));
          if (v45)
          {
            unint64_t v44 = v32 + 3;
            goto LABEL_28;
          }
          unint64_t v44 = v32 + 4;
          uint64_t v46 = v32 + 3;
          if (v32 + 4 < v373)
          {
            uint64_t v45 = *(void *)(v371 + 8 * v44);
            if (v45) {
              goto LABEL_28;
            }
            while (v373 - 5 != v32)
            {
              uint64_t v45 = *(void *)(v31 + 104 + 8 * v32++);
              if (v45)
              {
                unint64_t v44 = v32 + 4;
                goto LABEL_28;
              }
            }
            uint64_t v46 = v373 - 1;
          }
        }
      }
    }
    uint64_t v36 = 0;
    long long v32 = v46;
    memset(v382, 0, sizeof(v382));
  }
  swift_release();
  uint64_t v76 = v393;
  if (*((void *)&v390 + 1))
  {
    outlined init with copy of AnyMeshBuffer((uint64_t)&v389, (uint64_t)&v383);
    uint64_t v77 = *((void *)&v384 + 1);
    uint64_t v78 = v385;
    __swift_project_boxed_opaque_existential_1(&v383, *((uint64_t *)&v384 + 1));
    int v79 = *(void (**)(uint64_t, uint64_t))(v78 + 16);
    swift_bridgeObjectRetain();
    v79(v77, v78);
    outlined destroy of AnyMeshBuffer((uint64_t)&v383);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v80 = v362;
  if (v76 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v81) {
      goto LABEL_104;
    }
LABEL_91:
    *(void *)&v383 = MEMORY[0x263F8EE78];
    char v82 = (unint64_t)&v383;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v81 & ~(v81 >> 63), 0);
    if (v81 < 0) {
      goto LABEL_326;
    }
    uint64_t v83 = v383;
    if ((v76 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v81; ++i)
      {
        unint64_t v85 = *(void *)(MEMORY[0x22A689930](i, v76) + 16);
        swift_unknownObjectRelease();
        *(void *)&v383 = v83;
        int v87 = *(void *)(v83 + 16);
        os_log_type_t v86 = *(void *)(v83 + 24);
        if (v87 >= v86 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1);
          uint64_t v83 = v383;
        }
        *(void *)(v83 + 16) = v87 + 1;
        *(void *)(v83 + 8 * v87 + 32) = v85;
      }
    }
    else
    {
      uint64_t v88 = 0;
      uint64_t v89 = *(void *)(v383 + 16);
      do
      {
        uint64_t v90 = *(void *)(*(void *)(v76 + 8 * v88 + 32) + 16);
        *(void *)&v383 = v83;
        unint64_t v91 = *(void *)(v83 + 24);
        if (v89 >= v91 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v89 + 1, 1);
          uint64_t v83 = v383;
        }
        ++v88;
        *(void *)(v83 + 16) = v89 + 1;
        *(void *)(v83 + 8 * v89++ + 32) = v90;
      }
      while (v81 != v88);
    }
    swift_bridgeObjectRelease();
    uint64_t v80 = v362;
  }
  else
  {
    uint64_t v81 = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v81) {
      goto LABEL_91;
    }
LABEL_104:
    swift_bridgeObjectRelease();
    uint64_t v83 = MEMORY[0x263F8EE78];
  }
  closure #2 in MeshDefinition.init(attributes:vertexCount:indexCount:customNames:)(v83 + 32, v341, (uint64_t *)&v383);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v92 = v383;
  type metadata accessor for MeshDefinition();
  v361 = swift_allocObject();
  *(void *)(v361 + 16) = v92;
  if (*((void *)&v390 + 1))
  {
    outlined init with copy of AnyMeshBuffer((uint64_t)&v389, (uint64_t)&v379);
    outlined init with take of BindableDataInternal(&v379, (uint64_t)&v383);
    outlined init with take of BindableDataInternal(&v383, (uint64_t)v382);
    os_log_t v93 = *((void *)&v382[1] + 1);
    uint64_t v94 = *(void *)&v382[2];
    __swift_project_boxed_opaque_existential_1(v382, *((uint64_t *)&v382[1] + 1));
    uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 48))(v93, v94);
    if (v96 >> 60 == 15)
    {
      uint64_t v97 = *((void *)&v382[1] + 1);
      uint64_t v98 = *(void *)&v382[2];
      __swift_project_boxed_opaque_existential_1(v382, *((uint64_t *)&v382[1] + 1));
      (*(void (**)(long long *__return_ptr, void, uint64_t, uint64_t))(v98 + 56))(&v383, MEMORY[0x263F8E8F8], v97, v98);
      uint64_t v99 = (uint64_t (*)(uint64_t))v383;
      if ((void)v383)
      {
        v459[0] = v383;
        v459[1] = v384;
        v459[2] = v385;
        v459[3] = v386;
        v460 = v387 & 0x1FF;
        v461 = *((void *)&v387 + 1);
        v462 = v388;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v100 = swift_retain();
        uint64_t v101 = v99(v100);
        if (v101)
        {
          uint64_t v102 = v101;
        }
        else
        {
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v102 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v459);
          outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v99);
        }
        outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v99);
        os_log_type_t v112 = specialized Data.init<A>(buffer:)(v102 + 32, *(void *)(v102 + 16));
        uint64_t v114 = v113;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        outlined consume of Data._Representation(v112, v114);
        REMeshDefinitionSetIndicesWithDataUInt32();
        swift_bridgeObjectRelease();

        unint64_t v116 = (uint64_t)v99;
      }
      else
      {
        float32x4_t v106 = *((void *)&v382[1] + 1);
        uint64_t v107 = *(void *)&v382[2];
        __swift_project_boxed_opaque_existential_1(v382, *((uint64_t *)&v382[1] + 1));
        (*(void (**)(long long *__return_ptr, void, uint64_t, uint64_t))(v107 + 56))(&v383, MEMORY[0x263F8E888], v106, v107);
        unint64_t v108 = (uint64_t (*)(uint64_t))v383;
        if (!(void)v383) {
          goto LABEL_320;
        }
        v463[0] = v383;
        v463[1] = v384;
        v463[2] = v385;
        v463[3] = v386;
        v464 = v387 & 0x1FF;
        v465 = *((void *)&v387 + 1);
        v466 = v388;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v109 = swift_retain();
        unint64_t v110 = v108(v109);
        if (v110)
        {
          uint64_t v111 = v110;
        }
        else
        {
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v111 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v463);
          outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v108);
        }
        outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v108);
        v117 = specialized Data.init<A>(buffer:)(v111 + 32, *(void *)(v111 + 16));
        uint64_t v119 = v118;
        uint64_t v120 = Data._bridgeToObjectiveC()().super.isa;
        outlined consume of Data._Representation(v117, v119);
        REMeshDefinitionSetIndicesWithDataUInt16();
        swift_bridgeObjectRelease();

        unint64_t v116 = (uint64_t)v108;
      }
      outlined consume of MeshBuffer<SIMD3<Float>>?(v116);
      uint64_t v80 = v362;
    }
    else
    {
      os_log_type_t v103 = v95;
      __n128 v104 = v96;
      unint64_t v105 = Data._bridgeToObjectiveC()().super.isa;
      REMeshDefinitionSetIndicesWithData();

      outlined consume of Data?(v103, v104);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v382);
  }
  outlined retain of MeshResource.Part((uint64_t)&v405);
  __n128 v121 = specialized _NativeDictionary.mapValues<A>(_:)(v344);
  outlined release of MeshResource.Part((uint64_t)&v405);
  uint64_t v122 = 0;
  v347 = v121 + 64;
  uint64_t v123 = 1 << *(unsigned char *)(v121 + 32);
  if (v123 < 64) {
    uint64_t v124 = ~(-1 << v123);
  }
  else {
    uint64_t v124 = -1;
  }
  uint64_t v125 = v124 & *(void *)(v121 + 64);
  v363 = (unint64_t)(v123 + 63) >> 6;
  v336 = v121 + 104;
  v343 = v121;
  while (1)
  {
    if (v125)
    {
      uint64_t v126 = __clz(__rbit64(v125));
      v125 &= v125 - 1;
      uint64_t v127 = v126 | (v122 << 6);
LABEL_127:
      uint64_t v128 = *(void *)(v121 + 56);
      uint64_t v129 = *(void *)(v121 + 48) + 24 * v127;
      uint64_t v130 = *(void *)v129;
      uint64_t v131 = *(void *)(v129 + 8);
      uint64_t v132 = *(unsigned char *)(v129 + 16);
      LOBYTE(v129) = *(unsigned char *)(v129 + 17);
      *(void *)&v383 = v130;
      *((void *)&v383 + 1) = v131;
      LOBYTE(v384) = v132;
      BYTE1(v384) = v129;
      outlined init with copy of AnyMeshBuffer(v128 + 40 * v127, v474);
      swift_bridgeObjectRetain();
      goto LABEL_137;
    }
    uint64_t v133 = v122 + 1;
    if (__OFADD__(v122, 1)) {
      goto LABEL_318;
    }
    if (v133 < v363)
    {
      uint64_t v134 = *(void *)(v347 + 8 * v133);
      if (v134) {
        goto LABEL_131;
      }
      if (v122 + 2 >= v363)
      {
        ++v122;
      }
      else
      {
        uint64_t v134 = *(void *)(v347 + 8 * (v122 + 2));
        if (v134)
        {
          uint64_t v133 = v122 + 2;
LABEL_131:
          uint64_t v125 = (v134 - 1) & v134;
          uint64_t v127 = __clz(__rbit64(v134)) + (v133 << 6);
          uint64_t v122 = v133;
          goto LABEL_127;
        }
        if (v122 + 3 >= v363)
        {
          v122 += 2;
        }
        else
        {
          uint64_t v134 = *(void *)(v347 + 8 * (v122 + 3));
          if (v134)
          {
            uint64_t v133 = v122 + 3;
            goto LABEL_131;
          }
          uint64_t v133 = v122 + 4;
          if (v122 + 4 >= v363)
          {
            v122 += 3;
          }
          else
          {
            uint64_t v134 = *(void *)(v347 + 8 * v133);
            if (v134) {
              goto LABEL_131;
            }
            while (v363 - 5 != v122)
            {
              uint64_t v134 = *(void *)(v336 + 8 * v122++);
              if (v134)
              {
                uint64_t v133 = v122 + 4;
                goto LABEL_131;
              }
            }
            uint64_t v122 = v363 - 1;
          }
        }
      }
    }
    uint64_t v125 = 0;
    v385 = 0u;
    v386 = 0u;
    v383 = 0u;
    v384 = 0u;
LABEL_137:
    outlined init with take of Transform?((uint64_t)&v383, (uint64_t)v382, &demangling cache variable for type metadata for (key: MeshBuffers.Identifier, value: AnyMeshBuffer)?);
    v135 = *((void *)&v382[0] + 1);
    if (!*((void *)&v382[0] + 1))
    {
      swift_release();
      outlined retain of MeshResource.Part((uint64_t)&v405);
      specialized MeshResource.Part.subscript.getter(0xD00000000000001FLL, 0x800000022834DB60, 0, (uint64_t)&v383);
      outlined release of MeshResource.Part((uint64_t)&v405);
      v289 = (uint64_t (*)(uint64_t))v383;
      if ((void)v383)
      {
        uint64_t v48 = *((void *)&v383 + 1);
        v451[0] = v383;
        v451[1] = v384;
        v451[2] = v385;
        v451[3] = v386;
        v452 = v387 & 0x1FF;
        v453 = *((void *)&v387 + 1);
        v454 = v388;
        outlined init with take of Transform?((uint64_t)v468, (uint64_t)v471, &demangling cache variable for type metadata for String?);
        if (v471[1])
        {
          uint64_t v47 = v471[0];
          outlined retain of MeshResource.Part((uint64_t)&v405);
          outlined retain of String?((uint64_t)v468);
          specialized MeshResource.Part.subscript.getter(0xD000000000000023, 0x800000022834DB80, 0, (uint64_t)&v383);
          v290 = outlined release of MeshResource.Part((uint64_t)&v405);
          v291 = v383;
          if ((void)v383)
          {
            v455[0] = v383;
            v455[1] = v384;
            v455[2] = v385;
            v455[3] = v386;
            v456 = v387 & 0x1FF;
            v457 = *((void *)&v387 + 1);
            v458 = v388;
            v292 = ((uint64_t (*)(uint64_t))v383)(v290);
            if (v292)
            {
              v353 = v292;
            }
            else
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v353 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v455);
              outlined consume of MeshBuffer<SIMD3<Float>>?(v291);
            }
            outlined consume of MeshBuffer<SIMD3<Float>>?(v291);
LABEL_292:
            type metadata accessor for MeshAttributeDescriptor();
            *(void *)(swift_allocObject() + 16) = v334;
            swift_retain();
            swift_retain();
            swift_retain();
            v299 = swift_retain();
            v300 = v289(v299);
            if (v300)
            {
              v301 = v300;
            }
            else
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v451);
              v348 = v302;
              outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v289);
              v301 = v348;
            }
            outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v289);
            v303 = MeshAttributeDescriptor.makeData(jointInfluences:)(v301);
            v305 = v304;
            v306 = Data._bridgeToObjectiveC()().super.isa;
            REMeshDefinitionSetAttributeWithData();

            outlined consume of Data._Representation(v303, v305);
            swift_bridgeObjectRelease();
            swift_setDeallocating();
            swift_deallocClassInstance();
            v307 = swift_allocObject();
            *(void *)(v307 + 16) = v333;
            MeshDefinition.setAttribute(_:skinInfluenceEndIndices:)(v307, v353);
            swift_bridgeObjectRelease();
            swift_setDeallocating();
            swift_deallocClassInstance();
            String.utf8CString.getter();
            REMeshDefinitionSetSkeletonName();
            swift_release();
            outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v289);
            outlined release of IKRig.Joint?((uint64_t)v468);
            v293 = v337;
          }
          else
          {
            outlined init with take of Transform?((uint64_t)&v407[8], (uint64_t)v467, &demangling cache variable for type metadata for Int32?);
            outlined init with take of Transform?((uint64_t)v467, (uint64_t)&v472, &demangling cache variable for type metadata for Int32?);
            v293 = v337;
            if ((v473 & 1) == 0)
            {
              v294 = v472;
              v295 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              v297 = 0;
              v298 = 0;
              *(void *)(v295 + 16) = v339;
              *(void *)&v383 = v295;
              while (!__OFADD__(v297, v294))
              {
                *(_DWORD *)(v295 + 32 + 4 * v298) = v297 + v294;
                v297 += v294;
                if (v339 == ++v298)
                {
                  *(void *)(v295 + 16) = v339;
                  destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v295, v296);
                  v353 = v383;
                  goto LABEL_292;
                }
              }
              __break(1u);
LABEL_323:
              outlined release of MeshResource.Part((uint64_t)&v405);
              swift_release();
              swift_bridgeObjectRelease();
              lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
              swift_allocError();
              *v324 = v48;
              v324[1] = v47;
              swift_willThrow();
              swift_release();
              swift_release();
              outlined destroy of AnyMeshBuffer((uint64_t)v382);
              outlined destroy of BodyTrackingComponent?((uint64_t)&v389, &demangling cache variable for type metadata for AnyMeshBuffer?);
              swift_bridgeObjectRelease();
              goto LABEL_321;
            }
            outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v289);
            outlined release of IKRig.Joint?((uint64_t)v468);
          }
        }
        else
        {
          outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v289);
          v293 = v337;
        }
      }
      else
      {
        v293 = v337;
      }
      v308 = *(void *)(v293 + 16);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v309 = specialized _copyCollectionToContiguousArray<A>(_:)(v293);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&v383 = v309;
      specialized MutableCollection<>.sort(by:)((uint64_t *)&v383, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v310 = v383;
      swift_bridgeObjectRelease();
      v311 = *(void *)(v310 + 16);
      if (v311)
      {
        v312 = 0;
        v313 = v310 + 32;
        v314 = v308 - 1;
        v315 = 0.0;
        v316 = INFINITY;
        do
        {
          outlined init with copy of MeshResource._Proto_Level_v1(v313, (uint64_t)&v383);
          outlined init with copy of __REAssetService((uint64_t)&v384, (uint64_t)v382);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshResource._Proto_LevelAssemblyData_v1);
          type metadata accessor for MeshResource._Proto_SerialLevelAssemblyData_v1();
          if (swift_dynamicCast() && (v317 = *(unsigned int *)(v379 + 16), swift_release(), v370 < v317))
          {
            outlined init with copy of __REAssetService((uint64_t)&v386 + 8, (uint64_t)v382);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshResource._Proto_LevelStrategyData_v1);
            type metadata accessor for MeshResource._Proto_ScreenAreaLevelStrategyData_v1();
            if (swift_dynamicCast())
            {
              v315 = *(float *)(v379 + 16);
              swift_release();
            }
            else
            {
              v315 = 0.0;
            }
            outlined init with copy of __REAssetService((uint64_t)&v386 + 8, (uint64_t)v382);
            outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v383);
            type metadata accessor for MeshResource._Proto_ViewDepthLevelStrategyData_v1();
            if (swift_dynamicCast())
            {
              v316 = *(float *)(v379 + 16);
              swift_release();
            }
            else
            {
              v316 = INFINITY;
            }
            v312 = v314;
          }
          else
          {
            outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v383);
          }
          --v314;
          v313 += 96;
          --v311;
        }
        while (v311);
        swift_release();
        uint64_t v6 = v340;
        if ((v312 & 0x8000000000000000) != 0 || HIDWORD(v312)) {
          goto LABEL_331;
        }
      }
      else
      {
        swift_release();
        v312 = 0;
        v315 = 0.0;
        v316 = INFINITY;
        uint64_t v6 = v340;
      }
      v318 = *(void *)&v407[16];
      MEMORY[0x22A6906B0](*(void *)(v338 + 16), v312, v315, v316);
      MeshModelDefinition.append(triangles:materialIndex:levelOfDetail:name:)(v361, v318, v312);
      swift_setDeallocating();
      RERelease();
      swift_deallocClassInstance();
      outlined release of MeshResource.Part((uint64_t)&v405);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v389, &demangling cache variable for type metadata for AnyMeshBuffer?);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = v342;
      unint64_t v7 = v346;
      goto LABEL_6;
    }
    v136 = *(void *)&v382[0];
    uint64_t v137 = BYTE1(v382[1]);
    v381 = *((void *)&v382[3] + 1);
    v379 = *(_OWORD *)((char *)&v382[1] + 8);
    v380 = *(_OWORD *)((char *)&v382[2] + 8);
    if (!*(void *)(v80 + 16)
      || (swift_bridgeObjectRetain(),
          v372 = v125,
          specialized __RawDictionaryStorage.find<A>(_:)(v136, v135),
          uint64_t v139 = v138,
          swift_bridgeObjectRelease(),
          (v139 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      outlined destroy of AnyMeshBuffer((uint64_t)&v379);
      continue;
    }
    v140 = v392;
    v369 = v122;
    if (*(void *)(v392 + 16)) {
      break;
    }
LABEL_152:
    if (v137)
    {
      v149 = *((void *)&v380 + 1);
      v150 = v381;
      __swift_project_boxed_opaque_existential_1(&v379, *((uint64_t *)&v380 + 1));
      uint64_t v151 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v150 + 56);
      uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v151(&v383, v152, v149, v150);
      char v82 = *((void *)&v383 + 1);
      int v153 = (uint64_t (*)(uint64_t))v383;
      v368 = *((void *)&v384 + 1);
      v366 = v385;
      v367 = v384;
      uint64_t v154 = *((void *)&v385 + 1);
      v155 = v386;
      v156 = v387;
      os_log_type_t v157 = v388;
      type metadata accessor for MeshAttributeDescriptor();
      *(void *)(swift_allocObject() + 16) = v360;
      if (!v153) {
        goto LABEL_327;
      }
      v398[0] = v153;
      v398[1] = v82;
      v398[2] = v367;
      v398[3] = v368;
      v398[4] = v366;
      v398[5] = v154;
      v399 = v155;
      v400 = v156 & 0x1FF;
      v401 = *((void *)&v156 + 1);
      v402 = v157;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v158 = swift_retain();
      uint64_t v159 = v153(v158);
      if (v159)
      {
        uint64_t v160 = v159;
      }
      else
      {
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v160 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v398);
        outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v153);
      }
      outlined consume of MeshBuffer<SIMD3<Float>>?((uint64_t)v153);
      v166 = swift_allocObject();
      *(void *)(v166 + 16) = v360;
      os_log_type_t v167 = *(void *)(v160 + 16);
      BOOL v168 = MEMORY[0x22A690310](v360, v160 + 32, v167);
      *(void *)&v383 = specialized Data.init(count:)(v168);
      *((void *)&v383 + 1) = v169;
      swift_bridgeObjectRetain();
      _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_n(&v383, (void (*)(uint64_t, void, uint64_t, uint64_t))_s17RealityFoundation23MeshAttributeDescriptorC8makeData17blendShapeOffsets0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0, v166, v160 + 32, v167, v160);
      uint64_t v170 = v383;
      swift_release();
      uint64_t v171 = Data._bridgeToObjectiveC()().super.isa;
      String.utf8CString.getter();
      REMeshDefinitionSetCustomAttributeWithData();

      swift_release();
      outlined consume of Data._Representation(v170, *((unint64_t *)&v170 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      swift_deallocClassInstance();
      uint64_t v172 = (uint64_t)v153;
      goto LABEL_165;
    }
    if (one-time initialization token for positions != -1) {
      swift_once();
    }
    if (static MeshBuffers.Identifier.positions == v136 && *(void *)algn_2681C1C58 == v135
      || (unint64_t v161 = _stringCompareWithSmolCheck(_:_:expecting:)(), v162 = v136, (v161 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MeshAttributeDescriptor();
      *(void *)(swift_allocObject() + 16) = v345;
      outlined retain of MeshResource.Part((uint64_t)&v405);
      specialized MeshBufferContainer.positions.getter((uint64_t)&v383);
      v163 = outlined release of MeshResource.Part((uint64_t)&v405);
      v403[2] = v385;
      v403[3] = v386;
      v403[4] = v387;
      v404 = v388;
      v403[0] = v383;
      v403[1] = v384;
      v164 = ((uint64_t (*)(uint64_t))v383)(v163);
      if (v164)
      {
        v165 = v164;
      }
      else
      {
        outlined retain of MeshBuffer<SIMD3<Float>>((uint64_t)v403);
        v165 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v403);
        outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v403);
      }
      outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v403);
      v173 = swift_allocObject();
      *(void *)(v173 + 16) = v345;
      uint64_t v174 = *(void *)(v165 + 16);
      v175 = MEMORY[0x22A6903A0](v345, v165 + 32, v174);
      v375 = specialized Data.init(count:)(v175);
      v376 = v176;
      swift_bridgeObjectRetain();
      _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_n(&v375, (void (*)(uint64_t, void, uint64_t, uint64_t))_s17RealityFoundation23MeshAttributeDescriptorC8makeData9positions0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0, v173, v165 + 32, v174, v165);
      os_log_t v177 = v375;
      int v178 = v376;
      swift_release();
      os_log_t v179 = Data._bridgeToObjectiveC()().super.isa;
      REMeshDefinitionSetAttributeWithData();

      outlined consume of Data._Representation(v177, v178);
      swift_release();
LABEL_195:
      swift_bridgeObjectRelease();
      outlined destroy of AnyMeshBuffer((uint64_t)&v379);
LABEL_196:
      uint64_t v80 = v362;
LABEL_197:
      uint64_t v122 = v369;
      uint64_t v125 = v372;
      continue;
    }
    if (one-time initialization token for normals != -1)
    {
      swift_once();
      uint64_t v162 = v136;
    }
    if (static MeshBuffers.Identifier.normals == v162 && unk_2681C1C70 == v135
      || (v180 = _stringCompareWithSmolCheck(_:_:expecting:)(), v181 = v136, (v180 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MeshAttributeDescriptor();
      v182 = swift_allocObject();
      *(void *)(v182 + 16) = v335;
      if (*(void *)(v344 + 16))
      {
        outlined retain of MeshResource.Part((uint64_t)&v405);
        v183 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F4E786574726576, 0xEC0000006C616D72, 0);
        if (v184)
        {
          outlined init with copy of __REAssetService(*(void *)(v344 + 56) + 40 * v183, (uint64_t)v374);
          outlined init with take of BindableDataInternal(v374, (uint64_t)&v375);
          uint64_t v185 = v377;
          uint64_t v186 = v378;
          __swift_project_boxed_opaque_existential_1(&v375, v377);
          v187 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v186 + 56);
          v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
          v187(&v383, v188, v185, v186);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v375);
          uint64_t v189 = outlined release of MeshResource.Part((uint64_t)&v405);
          v190 = v383;
          if ((void)v383)
          {
            v408[0] = v383;
            v408[1] = v384;
            v408[2] = v385;
            v408[3] = v386;
            v409 = v387 & 0x1FF;
            v410 = *((void *)&v387 + 1);
            v411 = v388;
            v191 = ((uint64_t (*)(uint64_t))v383)(v189);
            if (v191)
            {
              v192 = v191;
            }
            else
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v192 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v408);
              outlined consume of MeshBuffer<SIMD3<Float>>?(v190);
            }
            outlined consume of MeshBuffer<SIMD3<Float>>?(v190);
            __n128 v121 = v343;
LABEL_193:
            uint64_t v205 = *(void *)(v182 + 16);
            uint64_t v206 = swift_allocObject();
            *(void *)(v206 + 16) = v205;
            uint64_t v207 = v192 + 32;
            uint64_t v208 = *(void *)(v192 + 16);
            uint64_t v209 = specialized Array.count.getter(v192);
            uint64_t v210 = MEMORY[0x22A690390](v205, v192 + 32, v209, 0, 0);
            *(void *)&v383 = specialized Data.init(count:)(v210);
            *((void *)&v383 + 1) = v211;
            swift_bridgeObjectRetain();
            v212 = _s17RealityFoundation23MeshAttributeDescriptorC8makeData7normals0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0;
LABEL_194:
            _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_n(&v383, (void (*)(uint64_t, void, uint64_t, uint64_t))v212, v206, v207, v208, v192);
            v213 = v383;
            swift_release();
            v214 = Data._bridgeToObjectiveC()().super.isa;
            REMeshDefinitionSetAttributeWithData();

            outlined consume of Data._Representation(v213, *((unint64_t *)&v213 + 1));
            swift_setDeallocating();
            MeshAttributeDescriptor.__deallocating_deinit();
            goto LABEL_195;
          }
        }
        else
        {
          outlined release of MeshResource.Part((uint64_t)&v405);
        }
      }
      v192 = specialized static Array._allocateUninitialized(_:)(0);
      goto LABEL_193;
    }
    if (one-time initialization token for tangents != -1)
    {
      swift_once();
      v181 = v136;
    }
    if (static MeshBuffers.Identifier.tangents == v181 && *(void *)algn_2681C1C88 == v135
      || (v193 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t v194 = v136, (v193 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MeshAttributeDescriptor();
      v195 = swift_allocObject();
      *(void *)(v195 + 16) = v332;
      if (*(void *)(v344 + 16))
      {
        outlined retain of MeshResource.Part((uint64_t)&v405);
        uint64_t v196 = specialized __RawDictionaryStorage.find<A>(_:)(0x6154786574726576, 0xED0000746E65676ELL, 0);
        if (v197)
        {
          outlined init with copy of __REAssetService(*(void *)(v344 + 56) + 40 * v196, (uint64_t)v374);
          outlined init with take of BindableDataInternal(v374, (uint64_t)&v375);
          uint64_t v198 = v377;
          v199 = v378;
          __swift_project_boxed_opaque_existential_1(&v375, v377);
          v200 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v199 + 56);
          v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
          v200(&v383, v201, v198, v199);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v375);
          v202 = outlined release of MeshResource.Part((uint64_t)&v405);
          v203 = v383;
          if ((void)v383)
          {
            v412[0] = v383;
            v412[1] = v384;
            v412[2] = v385;
            v412[3] = v386;
            v413 = v387 & 0x1FF;
            v414 = *((void *)&v387 + 1);
            v415 = v388;
            v204 = ((uint64_t (*)(uint64_t))v383)(v202);
            if (v204)
            {
              v192 = v204;
            }
            else
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v192 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v412);
              outlined consume of MeshBuffer<SIMD3<Float>>?(v203);
            }
            outlined consume of MeshBuffer<SIMD3<Float>>?(v203);
            __n128 v121 = v343;
            goto LABEL_216;
          }
        }
        else
        {
          outlined release of MeshResource.Part((uint64_t)&v405);
        }
      }
      v192 = specialized static Array._allocateUninitialized(_:)(0);
LABEL_216:
      v228 = *(void *)(v195 + 16);
      uint64_t v206 = swift_allocObject();
      *(void *)(v206 + 16) = v228;
      uint64_t v207 = v192 + 32;
      uint64_t v208 = *(void *)(v192 + 16);
      v229 = specialized Array.count.getter(v192);
      v230 = MEMORY[0x22A6903C0](v228, v192 + 32, v229, 0, 0);
      *(void *)&v383 = specialized Data.init(count:)(v230);
      *((void *)&v383 + 1) = v231;
      swift_bridgeObjectRetain();
      v212 = _s17RealityFoundation23MeshAttributeDescriptorC8makeData8tangents0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0;
      goto LABEL_194;
    }
    if (one-time initialization token for bitangents != -1)
    {
      swift_once();
      uint64_t v194 = v136;
    }
    if (static MeshBuffers.Identifier.bitangents == v194 && unk_2681C1CA0 == v135
      || (v215 = _stringCompareWithSmolCheck(_:_:expecting:)(), v216 = v136, (v215 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MeshAttributeDescriptor();
      v217 = swift_allocObject();
      *(void *)(v217 + 16) = v331;
      if (*(void *)(v344 + 16))
      {
        outlined retain of MeshResource.Part((uint64_t)&v405);
        v218 = specialized __RawDictionaryStorage.find<A>(_:)(0x6942786574726576, 0xEF746E65676E6174, 0);
        if (v219)
        {
          outlined init with copy of __REAssetService(*(void *)(v344 + 56) + 40 * v218, (uint64_t)v374);
          outlined init with take of BindableDataInternal(v374, (uint64_t)&v375);
          v220 = v377;
          v221 = v378;
          __swift_project_boxed_opaque_existential_1(&v375, v377);
          v222 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v221 + 56);
          v223 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
          v222(&v383, v223, v220, v221);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v375);
          v224 = outlined release of MeshResource.Part((uint64_t)&v405);
          v225 = v383;
          if ((void)v383)
          {
            v416[0] = v383;
            v416[1] = v384;
            v416[2] = v385;
            v416[3] = v386;
            v417 = v387 & 0x1FF;
            v418 = *((void *)&v387 + 1);
            v419 = v388;
            v226 = ((uint64_t (*)(uint64_t))v383)(v224);
            if (v226)
            {
              v227 = v226;
            }
            else
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v227 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v416);
              outlined consume of MeshBuffer<SIMD3<Float>>?(v225);
            }
            outlined consume of MeshBuffer<SIMD3<Float>>?(v225);
            uint64_t v80 = v362;
            __n128 v121 = v343;
LABEL_232:
            MeshDefinition.setAttribute(_:bitangents:)(v217, v227);
LABEL_233:
            swift_setDeallocating();
            MeshAttributeDescriptor.__deallocating_deinit();
LABEL_234:
            swift_bridgeObjectRelease();
            outlined destroy of AnyMeshBuffer((uint64_t)&v379);
            goto LABEL_197;
          }
        }
        else
        {
          outlined release of MeshResource.Part((uint64_t)&v405);
        }
      }
      v227 = specialized static Array._allocateUninitialized(_:)(0);
      goto LABEL_232;
    }
    if (one-time initialization token for textureCoordinates != -1)
    {
      swift_once();
      v216 = v136;
    }
    if (static MeshBuffers.Identifier.textureCoordinates == v216 && *(void *)algn_2681C1CB8 == v135
      || (v232 = _stringCompareWithSmolCheck(_:_:expecting:)(), v233 = v136, (v232 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MeshAttributeDescriptor();
      v234 = swift_allocObject();
      *(void *)(v234 + 16) = v330;
      if (*(void *)(v344 + 16))
      {
        outlined retain of MeshResource.Part((uint64_t)&v405);
        v235 = specialized __RawDictionaryStorage.find<A>(_:)(0x5655786574726576, 0xE800000000000000, 0);
        if (v236)
        {
          outlined init with copy of __REAssetService(*(void *)(v344 + 56) + 40 * v235, (uint64_t)v374);
          outlined init with take of BindableDataInternal(v374, (uint64_t)&v375);
          v237 = v377;
          v238 = v378;
          __swift_project_boxed_opaque_existential_1(&v375, v377);
          v239 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v238 + 56);
          v240 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
          v239(&v383, v240, v237, v238);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v375);
          v241 = outlined release of MeshResource.Part((uint64_t)&v405);
          v242 = v383;
          if ((void)v383)
          {
            v420[0] = v383;
            v420[1] = v384;
            v420[2] = v385;
            v420[3] = v386;
            v421 = v387 & 0x1FF;
            v422 = *((void *)&v387 + 1);
            v423 = v388;
            v243 = ((uint64_t (*)(uint64_t))v383)(v241);
            if (v243)
            {
              v244 = v243;
            }
            else
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              v244 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v420);
              outlined consume of MeshBuffer<SIMD3<Float>>?(v242);
            }
            outlined consume of MeshBuffer<SIMD3<Float>>?(v242);
            uint64_t v80 = v362;
            __n128 v121 = v343;
            goto LABEL_251;
          }
        }
        else
        {
          outlined release of MeshResource.Part((uint64_t)&v405);
        }
      }
      v244 = specialized static Array._allocateUninitialized(_:)(0);
LABEL_251:
      MeshDefinition.setAttribute(_:uvs:)(v234, v244);
      goto LABEL_233;
    }
    if (one-time initialization token for jointInfluences != -1)
    {
      swift_once();
      v233 = v136;
    }
    uint64_t v125 = v372;
    if (static MeshBuffers.Identifier.jointInfluences != v233 || *(void *)algn_2681C1CE8 != v135)
    {
      v245 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v246 = v136;
      if ((v245 & 1) == 0)
      {
        if (one-time initialization token for jointInfluenceEndIndices != -1)
        {
          swift_once();
          v246 = v136;
        }
        if ((static MeshBuffers.Identifier.jointInfluenceEndIndices != v246 || unk_2681C1D00 != v135)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          v247 = *((void *)&v380 + 1);
          v248 = v381;
          __swift_project_boxed_opaque_existential_1(&v379, *((uint64_t *)&v380 + 1));
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v248 + 32))(&v375, v247, v248);
          switch(v375)
          {
            case 0xAu:
              v262 = *((void *)&v380 + 1);
              v263 = v381;
              __swift_project_boxed_opaque_existential_1(&v379, *((uint64_t *)&v380 + 1));
              v264 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v263 + 56);
              v265 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
              v264(&v383, v265, v262, v263);
              v266 = v383;
              v267 = *((void *)&v384 + 1);
              char v82 = v384;
              v268 = *((void *)&v385 + 1);
              v269 = v386;
              v270 = v387;
              v355 = v385;
              v358 = *((void *)&v387 + 1);
              v271 = v388;
              type metadata accessor for MeshAttributeDescriptor();
              v351 = swift_allocObject();
              *(void *)(v351 + 16) = v329;
              if (!(void)v266) {
                goto LABEL_329;
              }
              v442 = v266;
              v443 = v82;
              v444 = v267;
              v445 = v355;
              v446 = v268;
              v447 = v269;
              v448 = v270 & 0x1FF;
              v449 = v358;
              v450 = v271;
              swift_retain();
              swift_retain();
              swift_retain();
              v272 = swift_retain();
              v273 = ((uint64_t (*)(uint64_t))v266)(v272);
              if (v273)
              {
                v274 = v273;
              }
              else
              {
                swift_retain();
                swift_retain();
                swift_retain();
                swift_retain();
                v274 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v442);
                outlined consume of MeshBuffer<SIMD3<Float>>?(v266);
              }
              v288 = v266;
              outlined consume of MeshBuffer<SIMD3<Float>>?(v266);
              MeshDefinition.setAttribute(_:custom:name:)(v351, v274, v136, v135);
              break;
            case 9u:
              v275 = *((void *)&v380 + 1);
              v276 = v381;
              __swift_project_boxed_opaque_existential_1(&v379, *((uint64_t *)&v380 + 1));
              v277 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v276 + 56);
              v278 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
              v277(&v383, v278, v275, v276);
              v279 = v383;
              v280 = *((void *)&v384 + 1);
              char v82 = v384;
              v281 = *((void *)&v385 + 1);
              v282 = v386;
              v283 = v387;
              v356 = v385;
              v359 = *((void *)&v387 + 1);
              v284 = v388;
              type metadata accessor for MeshAttributeDescriptor();
              v352 = swift_allocObject();
              *(void *)(v352 + 16) = v328;
              if (!(void)v279) {
                goto LABEL_330;
              }
              v433 = v279;
              v434 = v82;
              v435 = v280;
              v436 = v356;
              v437 = v281;
              v438 = v282;
              v439 = v283 & 0x1FF;
              v440 = v359;
              v441 = v284;
              swift_retain();
              swift_retain();
              swift_retain();
              v285 = swift_retain();
              v286 = ((uint64_t (*)(uint64_t))v279)(v285);
              if (v286)
              {
                v287 = v286;
              }
              else
              {
                swift_retain();
                swift_retain();
                swift_retain();
                swift_retain();
                v287 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v433);
                outlined consume of MeshBuffer<SIMD3<Float>>?(v279);
              }
              v288 = v279;
              outlined consume of MeshBuffer<SIMD3<Float>>?(v279);
              MeshDefinition.setAttribute(_:custom:name:)(v352, v287, v136, v135);
              break;
            case 8u:
              v249 = *((void *)&v380 + 1);
              v250 = v381;
              __swift_project_boxed_opaque_existential_1(&v379, *((uint64_t *)&v380 + 1));
              v251 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v250 + 56);
              v252 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
              v251(&v383, v252, v249, v250);
              v253 = v383;
              v254 = *((void *)&v384 + 1);
              char v82 = v384;
              v255 = *((void *)&v385 + 1);
              v256 = v386;
              v257 = v387;
              v354 = v385;
              v357 = *((void *)&v387 + 1);
              v258 = v388;
              type metadata accessor for MeshAttributeDescriptor();
              v350 = swift_allocObject();
              *(void *)(v350 + 16) = v327;
              if (!(void)v253) {
                goto LABEL_328;
              }
              v424 = v253;
              v425 = v82;
              v426 = v254;
              v427 = v354;
              v428 = v255;
              v429 = v256;
              v430 = v257 & 0x1FF;
              v431 = v357;
              v432 = v258;
              swift_retain();
              swift_retain();
              swift_retain();
              v259 = swift_retain();
              v260 = ((uint64_t (*)(uint64_t))v253)(v259);
              if (v260)
              {
                v261 = v260;
              }
              else
              {
                swift_retain();
                swift_retain();
                swift_retain();
                swift_retain();
                v261 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)&v424);
                outlined consume of MeshBuffer<SIMD3<Float>>?(v253);
              }
              v288 = v253;
              outlined consume of MeshBuffer<SIMD3<Float>>?(v253);
              MeshDefinition.setAttribute(_:custom:name:)(v350, v261, v136, v135);
              break;
            default:
              goto LABEL_234;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          MeshAttributeDescriptor.__deallocating_deinit();
          uint64_t v172 = v288;
LABEL_165:
          outlined consume of MeshBuffer<SIMD3<Float>>?(v172);
          outlined destroy of AnyMeshBuffer((uint64_t)&v379);
          uint64_t v80 = v362;
          __n128 v121 = v343;
          goto LABEL_197;
        }
      }
    }
    outlined destroy of AnyMeshBuffer((uint64_t)&v379);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  os_log_type_t v141 = specialized __RawDictionaryStorage.find<A>(_:)(v136, v135);
  if ((v142 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_152;
  }
  uint64_t v143 = (uint64_t *)(*(void *)(v140 + 56) + 16 * v141);
  uint64_t v145 = *v143;
  uint64_t v144 = v143[1];
  outlined copy of Data._Representation(*v143, v144);
  swift_bridgeObjectRelease();
  if (!*(void *)(v80 + 16)) {
    goto LABEL_151;
  }
  swift_bridgeObjectRetain();
  uint64_t v146 = specialized __RawDictionaryStorage.find<A>(_:)(v136, v135);
  if ((v147 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_151:
    outlined consume of Data._Representation(v145, v144);
    uint64_t v122 = v369;
    goto LABEL_152;
  }
  char v82 = *(void *)(*(void *)(v80 + 56) + 8 * v146);
  swift_bridgeObjectRelease();
  if ((v393 & 0xC000000000000001) != 0)
  {
    MEMORY[0x22A689930](v82);
LABEL_148:
    uint64_t v148 = Data._bridgeToObjectiveC()().super.isa;
    String.utf8CString.getter();
    REMeshDefinitionSetCustomAttributeWithData();

    swift_release();
    outlined consume of Data._Representation(v145, v144);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of AnyMeshBuffer((uint64_t)&v379);
    goto LABEL_196;
  }
  if ((v82 & 0x8000000000000000) == 0)
  {
    if (v82 >= *(void *)((v393 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_325;
    }
    swift_retain();
    goto LABEL_148;
  }
  __break(1u);
LABEL_325:
  __break(1u);
LABEL_326:
  __break(1u);
LABEL_327:
  __break(1u);
LABEL_328:
  __break(1u);
LABEL_329:
  __break(1u);
LABEL_330:
  __break(1u);
  v325 = swift_release();
  __break(1u);
  *(void *)(v325 + 16) = v82;
  destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v325, v326);
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_331:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_332:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t AnyMeshBuffer.customMirror.getter()
{
  uint64_t v1 = (void *)v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of AnyMeshBuffer(v0, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_228324960;
  *(void *)(v9 + 32) = 25705;
  *(void *)(v9 + 40) = 0xE200000000000000;
  *(void *)(v9 + 72) = &type metadata for MeshBuffers.Identifier;
  uint64_t v10 = *(void *)(v0 + 24);
  uint64_t v11 = *(void *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  *(void *)(v9 + 80) = 0x746E756F63;
  *(void *)(v9 + 88) = 0xE500000000000000;
  uint64_t v12 = *(void *)(v0 + 24);
  uint64_t v13 = *(void *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  uint64_t v15 = MEMORY[0x263F8D6C8];
  *(void *)(v9 + 96) = v14;
  *(void *)(v9 + 120) = v15;
  *(void *)(v9 + 128) = 1702125938;
  *(void *)(v9 + 136) = 0xE400000000000000;
  *(void *)(v9 + 168) = &type metadata for MeshBuffers.Rate;
  uint64_t v16 = *(void *)(v0 + 24);
  uint64_t v17 = *(void *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  (*(void (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
  *(void *)(v9 + 176) = 0x54746E656D656C65;
  *(void *)(v9 + 184) = 0xEB00000000657079;
  *(void *)(v9 + 216) = &type metadata for MeshBuffers.ElementType;
  uint64_t v18 = *(void *)(v0 + 24);
  uint64_t v19 = *(void *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
  uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t __deallocating_deinit in BufferInstaller #1 in static MeshResource.Part.unpack(coreAsset:modelIndex:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v5 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v6 = v2 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_13;
      }
      if (v6 < (int)v2) {
        goto LABEL_22;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v2, __DataStorage._offset.getter())) {
        goto LABEL_23;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v9 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v5 = v9;
LABEL_13:
      if (v6 < (int)v2) {
        goto LABEL_20;
      }
      if (!__DataStorage._bytes.getter()) {
        goto LABEL_25;
      }
      if (__OFSUB__((int)v2, __DataStorage._offset.getter())) {
        goto LABEL_21;
      }
      __DataStorage._length.getter();
      REMeshAssetGetModelPartBufferAttributeData();
      uint64_t result = swift_release();
      unint64_t v8 = v5 | 0x4000000000000000;
      break;
    case 2uLL:
      uint64_t v10 = *a1;
      uint64_t v12 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v2 = v10;
      uint64_t v7 = *(void *)(v10 + 16);
      if (!__DataStorage._bytes.getter())
      {
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x228083F40);
      }
      if (__OFSUB__(v7, __DataStorage._offset.getter()))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
      __DataStorage._length.getter();
      REMeshAssetGetModelPartBufferAttributeData();
      uint64_t result = swift_release();
      unint64_t v8 = v12 | 0x8000000000000000;
      break;
    case 3uLL:
      REMeshAssetGetModelPartBufferAttributeData();
      return swift_release();
    default:
      LOWORD(v11) = a1[1];
      BYTE2(v11) = BYTE2(a1[1]);
      HIBYTE(v11) = BYTE3(a1[1]);
      __int16 v13 = WORD2(a1[1]);
      unsigned __int8 v14 = BYTE6(a1[1]);
      REMeshAssetGetModelPartBufferAttributeData();
      uint64_t result = swift_release();
      *a1 = v2;
      a1[1] = v11 | ((unint64_t)v13 << 32) | ((unint64_t)HIBYTE(v13) << 40) | ((unint64_t)v14 << 48);
      return result;
  }
  *a1 = v2;
  a1[1] = v8;
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v2 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v2);
  if (result >= v2)
  {
    if (v2 < 0) {
      goto LABEL_148;
    }
    if (v2) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, a1);
    }
    return result;
  }
  if (v2 >= 0) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = v2 + 1;
  }
  if (v2 < -1) {
    goto LABEL_156;
  }
  Swift::Int v95 = result;
  uint64_t v107 = v1;
  if (v2 < 2)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v2 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v9 = (char *)MEMORY[0x263F8EE78];
      uint64_t v10 = a1;
LABEL_114:
      unint64_t v85 = v9;
      uint64_t v94 = v7;
      if (v11 >= 2)
      {
        uint64_t v86 = *v10;
        do
        {
          unint64_t v87 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_143;
          }
          if (!v86) {
            goto LABEL_155;
          }
          uint64_t v88 = v85;
          uint64_t v89 = *(void *)&v85[16 * v87 + 32];
          uint64_t v90 = *(void *)&v85[16 * v11 + 24];
          uint64_t v91 = v107;
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v86 + 96 * v89), (char *)(v86 + 96 * *(void *)&v85[16 * v11 + 16]), v86 + 96 * v90, __dst);
          uint64_t v107 = v91;
          if (v91) {
            break;
          }
          if (v90 < v89) {
            goto LABEL_144;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v88);
          }
          if (v87 >= *((void *)v88 + 2)) {
            goto LABEL_145;
          }
          uint64_t v92 = &v88[16 * v87 + 32];
          *(void *)uint64_t v92 = v89;
          *((void *)v92 + 1) = v90;
          unint64_t v93 = *((void *)v88 + 2);
          if (v11 > v93) {
            goto LABEL_146;
          }
          memmove(&v88[16 * v11 + 16], &v88[16 * v11 + 32], 16 * (v93 - v11));
          unint64_t v85 = v88;
          *((void *)v88 + 2) = v93 - 1;
          unint64_t v11 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(void *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v5 = v4 >> 1;
    uint64_t v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v6 + 16) = v5;
    uint64_t v94 = v6;
    __dst = (char *)(v6 + 32);
  }
  Swift::Int v8 = 0;
  uint64_t v9 = (char *)MEMORY[0x263F8EE78];
  uint64_t v10 = a1;
  while (1)
  {
    Swift::Int v12 = v8++;
    if (v8 < v2)
    {
      uint64_t v13 = *v10;
      Swift::Int v14 = v12;
      outlined init with copy of MeshResource._Proto_Level_v1(*v10 + 96 * v8, (uint64_t)&v101);
      uint64_t v96 = v13;
      outlined init with copy of MeshResource._Proto_Level_v1(v13 + 96 * v12, (uint64_t)&v99);
      if (v99 == (void)v101 && v100 == *((void *)&v101 + 1)) {
        int v16 = 0;
      }
      else {
        int v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v99);
      outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v101);
      Swift::Int v8 = v12 + 2;
      if (v12 + 2 < v2)
      {
        uint64_t v17 = v96 + 96 * v12 + 96;
        while (1)
        {
          outlined init with copy of MeshResource._Proto_Level_v1(v17 + 96, (uint64_t)&v101);
          outlined init with copy of MeshResource._Proto_Level_v1(v17, (uint64_t)&v99);
          BOOL v18 = v99 == (void)v101 && v100 == *((void *)&v101 + 1);
          int v19 = v18 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v99);
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v101);
          if ((v16 ^ v19)) {
            break;
          }
          ++v8;
          v17 += 96;
          if (v2 == v8)
          {
            Swift::Int v8 = v2;
            break;
          }
        }
      }
      if (v16)
      {
        if (v8 < v12) {
          goto LABEL_149;
        }
        if (v12 < v8)
        {
          uint64_t v20 = (_OWORD *)(v96 + 96 * v8 - 96);
          long long v21 = (long long *)(v96 + 96 * v12);
          Swift::Int v22 = v8;
          do
          {
            if (v14 != --v22)
            {
              if (!v96) {
                goto LABEL_154;
              }
              long long v103 = v21[2];
              long long v104 = v21[3];
              long long v105 = v21[4];
              long long v106 = v21[5];
              long long v101 = *v21;
              long long v102 = v21[1];
              memmove(v21, v20, 0x60uLL);
              _OWORD v20[2] = v103;
              void v20[3] = v104;
              v20[4] = v105;
              _OWORD v20[5] = v106;
              *uint64_t v20 = v101;
              v20[1] = v102;
            }
            ++v14;
            v20 -= 6;
            v21 += 6;
          }
          while (v14 < v22);
        }
      }
    }
    if (v8 >= v2) {
      goto LABEL_63;
    }
    if (__OFSUB__(v8, v12)) {
      goto LABEL_147;
    }
    if (v8 - v12 >= v95) {
      goto LABEL_63;
    }
    if (__OFADD__(v12, v95)) {
      goto LABEL_150;
    }
    if (v12 + v95 < v2) {
      Swift::Int v2 = v12 + v95;
    }
    if (v2 < v12) {
      break;
    }
    if (v8 != v2)
    {
      uint64_t v23 = 96 * v8;
      do
      {
        Swift::Int v24 = v12;
        uint64_t v25 = v23;
        while (1)
        {
          uint64_t v26 = *v10 + v25;
          outlined init with copy of MeshResource._Proto_Level_v1(v26, (uint64_t)&v101);
          outlined init with copy of MeshResource._Proto_Level_v1(v26 - 96, (uint64_t)&v99);
          if (v99 == (void)v101 && v100 == *((void *)&v101 + 1)) {
            break;
          }
          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v99);
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v101);
          if ((v28 & 1) == 0) {
            goto LABEL_52;
          }
          if (!*v10) {
            goto LABEL_152;
          }
          uint64_t v29 = (long long *)(*v10 + v25);
          long long v103 = v29[2];
          long long v104 = v29[3];
          long long v105 = v29[4];
          long long v106 = v29[5];
          long long v101 = *v29;
          long long v102 = v29[1];
          long long v30 = *(v29 - 3);
          float64x2_t v29[2] = *(v29 - 4);
          v29[3] = v30;
          long long v31 = *(v29 - 1);
          v29[4] = *(v29 - 2);
          v29[5] = v31;
          long long v32 = *(v29 - 5);
          *uint64_t v29 = *(v29 - 6);
          v29[1] = v32;
          *(v29 - 5) = v102;
          *(v29 - 6) = v101;
          *(v29 - 1) = v106;
          *(v29 - 2) = v105;
          *(v29 - 3) = v104;
          *(v29 - 4) = v103;
          v25 -= 96;
          if (v8 == ++v24) {
            goto LABEL_52;
          }
        }
        outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v99);
        outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v101);
LABEL_52:
        ++v8;
        v23 += 96;
      }
      while (v8 != v2);
      Swift::Int v8 = v2;
    }
LABEL_63:
    if (v8 < v12) {
      goto LABEL_142;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v34 = *((void *)v9 + 2);
    unint64_t v33 = *((void *)v9 + 3);
    unint64_t v11 = v34 + 1;
    if (v34 >= v33 >> 1) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v11;
    unint64_t v35 = v9 + 32;
    uint64_t v36 = &v9[16 * v34 + 32];
    *(void *)uint64_t v36 = v12;
    *((void *)v36 + 1) = v8;
    if (v34)
    {
      uint64_t v10 = a1;
      while (1)
      {
        unint64_t v37 = v11 - 1;
        if (v11 >= 4)
        {
          long long v42 = &v35[16 * v11];
          uint64_t v43 = *((void *)v42 - 8);
          uint64_t v44 = *((void *)v42 - 7);
          BOOL v48 = __OFSUB__(v44, v43);
          uint64_t v45 = v44 - v43;
          if (v48) {
            goto LABEL_131;
          }
          uint64_t v47 = *((void *)v42 - 6);
          uint64_t v46 = *((void *)v42 - 5);
          BOOL v48 = __OFSUB__(v46, v47);
          uint64_t v40 = v46 - v47;
          char v41 = v48;
          if (v48) {
            goto LABEL_132;
          }
          unint64_t v49 = v11 - 2;
          char v50 = &v35[16 * v11 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          BOOL v48 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v48) {
            goto LABEL_134;
          }
          BOOL v48 = __OFADD__(v40, v53);
          uint64_t v54 = v40 + v53;
          if (v48) {
            goto LABEL_137;
          }
          if (v54 >= v45)
          {
            char v72 = &v35[16 * v37];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v48 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v48) {
              goto LABEL_141;
            }
            BOOL v65 = v40 < v75;
            goto LABEL_101;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v66 = *((void *)v9 + 4);
            uint64_t v67 = *((void *)v9 + 5);
            BOOL v48 = __OFSUB__(v67, v66);
            uint64_t v59 = v67 - v66;
            char v60 = v48;
            goto LABEL_95;
          }
          uint64_t v39 = *((void *)v9 + 4);
          uint64_t v38 = *((void *)v9 + 5);
          BOOL v48 = __OFSUB__(v38, v39);
          uint64_t v40 = v38 - v39;
          char v41 = v48;
        }
        if (v41) {
          goto LABEL_133;
        }
        unint64_t v49 = v11 - 2;
        long long v55 = &v35[16 * v11 - 32];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v58 = __OFSUB__(v56, v57);
        uint64_t v59 = v56 - v57;
        char v60 = v58;
        if (v58) {
          goto LABEL_136;
        }
        long long v61 = &v35[16 * v37];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v48 = __OFSUB__(v62, v63);
        uint64_t v64 = v62 - v63;
        if (v48) {
          goto LABEL_139;
        }
        if (__OFADD__(v59, v64)) {
          goto LABEL_140;
        }
        if (v59 + v64 >= v40)
        {
          BOOL v65 = v40 < v64;
LABEL_101:
          if (v65) {
            unint64_t v37 = v49;
          }
          goto LABEL_103;
        }
LABEL_95:
        if (v60) {
          goto LABEL_135;
        }
        int v68 = &v35[16 * v37];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v48 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v48) {
          goto LABEL_138;
        }
        if (v71 < v59) {
          goto LABEL_15;
        }
LABEL_103:
        unint64_t v76 = v37 - 1;
        if (v37 - 1 >= v11)
        {
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        uint64_t v77 = *v10;
        if (!*v10) {
          goto LABEL_153;
        }
        uint64_t v78 = v9;
        int v79 = &v35[16 * v76];
        uint64_t v80 = *(void *)v79;
        uint64_t v81 = &v35[16 * v37];
        uint64_t v82 = *((void *)v81 + 1);
        uint64_t v83 = v107;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v77 + 96 * *(void *)v79), (char *)(v77 + 96 * *(void *)v81), v77 + 96 * v82, __dst);
        uint64_t v107 = v83;
        if (v83) {
          goto LABEL_111;
        }
        if (v82 < v80) {
          goto LABEL_128;
        }
        if (v37 > *((void *)v78 + 2)) {
          goto LABEL_129;
        }
        *(void *)int v79 = v80;
        *(void *)&v35[16 * v76 + 8] = v82;
        unint64_t v84 = *((void *)v78 + 2);
        if (v37 >= v84) {
          goto LABEL_130;
        }
        uint64_t v9 = v78;
        unint64_t v11 = v84 - 1;
        memmove(&v35[16 * v37], v81 + 16, 16 * (v84 - 1 - v37));
        *((void *)v78 + 2) = v84 - 1;
        BOOL v65 = v84 > 2;
        uint64_t v10 = a1;
        if (!v65) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
    uint64_t v10 = a1;
LABEL_15:
    Swift::Int v2 = v10[1];
    if (v8 >= v2)
    {
      uint64_t v7 = v94;
      goto LABEL_114;
    }
  }
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  Swift::Int v21;
  void *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  Swift::Int v29;
  long long v30;
  long long v31;
  long long v32;
  uint64_t v33;
  long long *v34;
  long long *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  int v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  char v54;
  long long v55;
  long long v56;
  long long v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  char v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  Swift::Int v119;
  Swift::Int v120;
  uint64_t v121;
  char *__dst;
  uint64_t v123;

  uint64_t v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_156;
    }
    if (v3) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_164;
  }
  uint64_t v119 = result;
  uint64_t v120 = v3;
  uint64_t v123 = v1;
  unint64_t v116 = a1;
  if (v3 < 2)
  {
    Swift::Int v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      Swift::Int v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_122:
      unint64_t v108 = v11;
      uint64_t v118 = v8;
      if (v12 >= 2)
      {
        uint64_t v109 = *v116;
        do
        {
          unint64_t v110 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_151;
          }
          if (!v109) {
            goto LABEL_163;
          }
          uint64_t v111 = v108;
          os_log_type_t v112 = *(void *)&v108[16 * v110 + 32];
          uint64_t v113 = *(void *)&v108[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v109 + (v112 << 6)), (char *)(v109 + (*(void *)&v108[16 * v12 + 16] << 6)), v109 + (v113 << 6), __dst);
          if (v123) {
            break;
          }
          if (v113 < v112) {
            goto LABEL_152;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v111 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v111);
          }
          if (v110 >= *((void *)v111 + 2)) {
            goto LABEL_153;
          }
          uint64_t v114 = &v111[16 * v110 + 32];
          *(void *)uint64_t v114 = v112;
          *((void *)v114 + 1) = v113;
          uint64_t v115 = *((void *)v111 + 2);
          if (v12 > v115) {
            goto LABEL_154;
          }
          memmove(&v111[16 * v12 + 16], &v111[16 * v12 + 32], 16 * (v115 - v12));
          unint64_t v108 = v111;
          *((void *)v111 + 2) = v115 - 1;
          Swift::Int v12 = v115 - 1;
        }
        while (v115 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
      *(void *)(v118 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v118 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v3 = v120;
    uint64_t v118 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  v117 = *a1 + 16;
  unint64_t v11 = (char *)MEMORY[0x263F8EE78];
  __n128 v121 = v10;
  while (2)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3)
    {
LABEL_23:
      if (v9 < v3) {
        goto LABEL_52;
      }
      goto LABEL_71;
    }
    Swift::Int v14 = v10 + (v9 << 6);
    uint64_t v15 = *(void *)(v14 + 8);
    int v16 = *(void *)(v14 + 16);
    uint64_t v17 = v10 + (v13 << 6);
    if (v15 == *(void *)(v17 + 8) && v16 == *(void *)(v17 + 16))
    {
      long long v21 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_51;
      }
      uint64_t v20 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v20 = v19;
      long long v21 = v13 + 2;
      if (v13 + 2 >= v3)
      {
        uint64_t v9 = v13 + 2;
        if ((v19 & 1) == 0) {
          goto LABEL_23;
        }
LABEL_40:
        if (v21 < v13) {
          break;
        }
        goto LABEL_41;
      }
    }
    Swift::Int v22 = (void *)(v117 + (v21 << 6));
    while (1)
    {
      Swift::Int v24 = v10 + (v9 << 6);
      if (*(v22 - 1) != *(void *)(v24 + 8) || *v22 != *(void *)(v24 + 16))
      {
        if ((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)())) {
          goto LABEL_39;
        }
        goto LABEL_29;
      }
      if (v20) {
        break;
      }
LABEL_29:
      uint64_t v23 = v21 + 1;
      v22 += 8;
      uint64_t v9 = v21;
      long long v21 = v23;
      if (v23 >= v120)
      {
        long long v21 = v23;
LABEL_39:
        uint64_t v3 = v120;
        uint64_t v9 = v21;
        if ((v20 & 1) == 0) {
          goto LABEL_23;
        }
        goto LABEL_40;
      }
    }
    uint64_t v3 = v120;
    if (v21 >= v13)
    {
LABEL_41:
      if (v13 < v21)
      {
        uint64_t v26 = (v21 << 6) - 64;
        unint64_t v27 = v13 << 6;
        char v28 = v21;
        uint64_t v29 = v13;
        do
        {
          if (v29 != --v28)
          {
            if (!v10) {
              goto LABEL_162;
            }
            unint64_t v34 = (long long *)(v10 + v27);
            unint64_t v35 = (long long *)(v10 + v26);
            uint64_t v36 = *(void *)(v10 + v27);
            unint64_t v37 = *(void *)(v10 + v27 + 8);
            uint64_t v38 = *(void *)(v10 + v27 + 16);
            uint64_t v39 = *(_OWORD *)(v10 + v27 + 24);
            uint64_t v40 = *(_DWORD *)(v10 + v27 + 40);
            char v41 = *(unsigned char *)(v10 + v27 + 44);
            long long v42 = *(void *)(v10 + v27 + 48);
            uint64_t v43 = *(unsigned char *)(v10 + v27 + 56);
            if (v27 != v26 || v34 >= v35 + 4)
            {
              long long v30 = *v35;
              long long v31 = v35[1];
              long long v32 = v35[3];
              v34[2] = v35[2];
              v34[3] = v32;
              *unint64_t v34 = v30;
              v34[1] = v31;
            }
            unint64_t v33 = v10 + v26;
            *(void *)unint64_t v33 = v36;
            *(void *)(v33 + 8) = v37;
            *(void *)(v33 + 16) = v38;
            *(_OWORD *)(v33 + 24) = v39;
            *(_DWORD *)(v33 + 40) = v40;
            *(unsigned char *)(v33 + 44) = v41;
            *(void *)(v33 + 48) = v42;
            *(unsigned char *)(v33 + 56) = v43;
          }
          ++v29;
          v26 -= 64;
          v27 += 64;
        }
        while (v29 < v28);
      }
LABEL_51:
      uint64_t v9 = v21;
      if (v21 < v3)
      {
LABEL_52:
        if (__OFSUB__(v9, v13)) {
          goto LABEL_155;
        }
        if (v9 - v13 < v119)
        {
          if (__OFADD__(v13, v119)) {
            goto LABEL_157;
          }
          if (v13 + v119 < v3) {
            uint64_t v3 = v13 + v119;
          }
          if (v3 < v13)
          {
LABEL_158:
            __break(1u);
            break;
          }
          if (v9 != v3)
          {
            uint64_t v44 = v10 + (v9 << 6);
            do
            {
              uint64_t v45 = v44;
              uint64_t v46 = v13;
              do
              {
                uint64_t v47 = *(void *)(v45 + 8) == *(void *)(v45 - 56) && *(void *)(v45 + 16) == *(void *)(v45 - 48);
                if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                  break;
                }
                if (!v10) {
                  goto LABEL_160;
                }
                BOOL v48 = *(void *)v45;
                unint64_t v49 = *(void *)(v45 + 8);
                char v50 = *(void *)(v45 + 16);
                uint64_t v51 = *(_DWORD *)(v45 + 40);
                uint64_t v52 = *(unsigned char *)(v45 + 44);
                uint64_t v53 = *(void *)(v45 + 48);
                uint64_t v54 = *(unsigned char *)(v45 + 56);
                long long v55 = *(_OWORD *)(v45 + 24);
                uint64_t v56 = *(_OWORD *)(v45 - 48);
                *(_OWORD *)uint64_t v45 = *(_OWORD *)(v45 - 64);
                *(_OWORD *)(v45 + 16) = v56;
                uint64_t v57 = *(_OWORD *)(v45 - 16);
                *(_OWORD *)(v45 + 32) = *(_OWORD *)(v45 - 32);
                *(_OWORD *)(v45 + 48) = v57;
                *(void *)(v45 - 56) = v49;
                *(void *)(v45 - 48) = v50;
                *(_OWORD *)(v45 - 40) = v55;
                *(_DWORD *)(v45 - 24) = v51;
                *(unsigned char *)(v45 - 20) = v52;
                *(void *)(v45 - 16) = v53;
                *(unsigned char *)(v45 - 8) = v54;
                ++v46;
                *(void *)(v45 - 64) = v48;
                v45 -= 64;
              }
              while (v9 != v46);
              ++v9;
              v44 += 64;
            }
            while (v9 != v3);
            uint64_t v9 = v3;
          }
        }
      }
LABEL_71:
      if (v9 < v13) {
        goto LABEL_150;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
      }
      uint64_t v59 = *((void *)v11 + 2);
      BOOL v58 = *((void *)v11 + 3);
      Swift::Int v12 = v59 + 1;
      if (v59 >= v58 >> 1) {
        unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v11);
      }
      *((void *)v11 + 2) = v12;
      char v60 = v11 + 32;
      long long v61 = &v11[16 * v59 + 32];
      *(void *)long long v61 = v13;
      *((void *)v61 + 1) = v9;
      if (v59)
      {
        uint64_t v10 = v121;
        while (1)
        {
          uint64_t v62 = v12 - 1;
          if (v12 >= 4)
          {
            uint64_t v67 = &v60[16 * v12];
            int v68 = *((void *)v67 - 8);
            uint64_t v69 = *((void *)v67 - 7);
            uint64_t v73 = __OFSUB__(v69, v68);
            uint64_t v70 = v69 - v68;
            if (v73) {
              goto LABEL_139;
            }
            char v72 = *((void *)v67 - 6);
            uint64_t v71 = *((void *)v67 - 5);
            uint64_t v73 = __OFSUB__(v71, v72);
            BOOL v65 = v71 - v72;
            uint64_t v66 = v73;
            if (v73) {
              goto LABEL_140;
            }
            uint64_t v74 = v12 - 2;
            uint64_t v75 = &v60[16 * v12 - 32];
            uint64_t v77 = *(void *)v75;
            unint64_t v76 = *((void *)v75 + 1);
            uint64_t v73 = __OFSUB__(v76, v77);
            uint64_t v78 = v76 - v77;
            if (v73) {
              goto LABEL_142;
            }
            uint64_t v73 = __OFADD__(v65, v78);
            int v79 = v65 + v78;
            if (v73) {
              goto LABEL_145;
            }
            if (v79 >= v70)
            {
              uint64_t v97 = &v60[16 * v62];
              uint64_t v99 = *(void *)v97;
              uint64_t v98 = *((void *)v97 + 1);
              uint64_t v73 = __OFSUB__(v98, v99);
              uint64_t v100 = v98 - v99;
              if (v73) {
                goto LABEL_149;
              }
              uint64_t v90 = v65 < v100;
              goto LABEL_109;
            }
          }
          else
          {
            if (v12 != 3)
            {
              uint64_t v91 = *((void *)v11 + 4);
              uint64_t v92 = *((void *)v11 + 5);
              uint64_t v73 = __OFSUB__(v92, v91);
              unint64_t v84 = v92 - v91;
              unint64_t v85 = v73;
              goto LABEL_103;
            }
            uint64_t v64 = *((void *)v11 + 4);
            uint64_t v63 = *((void *)v11 + 5);
            uint64_t v73 = __OFSUB__(v63, v64);
            BOOL v65 = v63 - v64;
            uint64_t v66 = v73;
          }
          if (v66) {
            goto LABEL_141;
          }
          uint64_t v74 = v12 - 2;
          uint64_t v80 = &v60[16 * v12 - 32];
          uint64_t v82 = *(void *)v80;
          uint64_t v81 = *((void *)v80 + 1);
          uint64_t v83 = __OFSUB__(v81, v82);
          unint64_t v84 = v81 - v82;
          unint64_t v85 = v83;
          if (v83) {
            goto LABEL_144;
          }
          uint64_t v86 = &v60[16 * v62];
          uint64_t v88 = *(void *)v86;
          unint64_t v87 = *((void *)v86 + 1);
          uint64_t v73 = __OFSUB__(v87, v88);
          uint64_t v89 = v87 - v88;
          if (v73) {
            goto LABEL_147;
          }
          if (__OFADD__(v84, v89)) {
            goto LABEL_148;
          }
          if (v84 + v89 >= v65)
          {
            uint64_t v90 = v65 < v89;
LABEL_109:
            if (v90) {
              uint64_t v62 = v74;
            }
            goto LABEL_111;
          }
LABEL_103:
          if (v85) {
            goto LABEL_143;
          }
          unint64_t v93 = &v60[16 * v62];
          Swift::Int v95 = *(void *)v93;
          uint64_t v94 = *((void *)v93 + 1);
          uint64_t v73 = __OFSUB__(v94, v95);
          uint64_t v96 = v94 - v95;
          if (v73) {
            goto LABEL_146;
          }
          if (v96 < v84) {
            goto LABEL_15;
          }
LABEL_111:
          long long v101 = v62 - 1;
          if (v62 - 1 >= v12)
          {
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
            goto LABEL_158;
          }
          if (!v10) {
            goto LABEL_161;
          }
          long long v102 = v10;
          long long v103 = &v60[16 * v101];
          long long v104 = *(void *)v103;
          long long v105 = &v60[16 * v62];
          long long v106 = *((void *)v105 + 1);
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v102 + (*(void *)v103 << 6)), (char *)(v102 + (*(void *)v105 << 6)), v102 + (v106 << 6), __dst);
          if (v123) {
            goto LABEL_119;
          }
          if (v106 < v104) {
            goto LABEL_136;
          }
          if (v62 > *((void *)v11 + 2)) {
            goto LABEL_137;
          }
          *(void *)long long v103 = v104;
          *(void *)&v60[16 * v101 + 8] = v106;
          uint64_t v107 = *((void *)v11 + 2);
          if (v62 >= v107) {
            goto LABEL_138;
          }
          Swift::Int v12 = v107 - 1;
          memmove(&v60[16 * v62], v105 + 16, 16 * (v107 - 1 - v62));
          *((void *)v11 + 2) = v107 - 1;
          uint64_t v90 = v107 > 2;
          uint64_t v10 = v121;
          if (!v90) {
            goto LABEL_15;
          }
        }
      }
      Swift::Int v12 = 1;
      uint64_t v10 = v121;
LABEL_15:
      uint64_t v3 = v120;
      if (v9 >= v120)
      {
        Swift::Int v8 = v118;
        goto LABEL_122;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  Swift::Int v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  float v29;
  _OWORD *v30;
  uint64_t v31;
  long long v32;
  long long v33;
  char v34;
  uint64_t v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  long long *v92;
  uint64_t v93;
  uint64_t v94;
  long long *v95;
  uint64_t v96;
  long long *v97;
  float v98;
  _OWORD *v99;
  uint64_t v100;
  long long v101;
  long long v102;
  char v103;
  uint64_t v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  long long v109;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  Swift::Int v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  Swift::Int v125;
  Swift::Int v126;
  long long v127;
  long long v128;
  long long v129;
  uint64_t v130;
  float *v131;
  uint64_t v132;

  uint64_t v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v92 = (long long *)*a1;
      unint64_t v93 = -1;
      uint64_t v94 = 1;
      Swift::Int v95 = (long long *)*a1;
      do
      {
        uint64_t v96 = v93;
        uint64_t v97 = v95;
        do
        {
          uint64_t v98 = *((float *)v97 + 36);
          if (v98 >= *((float *)v97 + 12)) {
            break;
          }
          if (!v92) {
            goto LABEL_142;
          }
          uint64_t v99 = v97 + 6;
          uint64_t v100 = *((void *)v97 + 12);
          long long v101 = v97[7];
          long long v102 = v97[8];
          long long v103 = *((unsigned char *)v97 + 168);
          long long v104 = *((void *)v97 + 22);
          long long v105 = *(long long *)((char *)v97 + 152);
          long long v106 = v97[3];
          v97[8] = v97[2];
          v97[9] = v106;
          uint64_t v107 = v97[5];
          v97[10] = v97[4];
          v97[11] = v107;
          unint64_t v108 = *v97;
          uint64_t v109 = v97[1];
          *(void *)uint64_t v97 = v100;
          v97[1] = v101;
          v97[2] = v102;
          *((float *)v97 + 12) = v98;
          *(long long *)((char *)v97 + 56) = v105;
          *((unsigned char *)v97 + 72) = v103;
          *((void *)v97 + 10) = v104;
          v97 -= 6;
          *uint64_t v99 = v108;
          v99[1] = v109;
        }
        while (!__CFADD__(v96++, 1));
        ++v94;
        v95 += 6;
        --v93;
      }
      while (v94 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_147;
  }
  uint64_t v125 = result;
  __n128 v121 = a1;
  if (v3 < 2)
  {
    Swift::Int v8 = MEMORY[0x263F8EE78];
    uint64_t v131 = (float *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      Swift::Int v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_104:
      uint64_t v111 = v11;
      uint64_t v124 = v8;
      if (v12 >= 2)
      {
        os_log_type_t v112 = *v121;
        do
        {
          uint64_t v113 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_133;
          }
          if (!v112) {
            goto LABEL_146;
          }
          uint64_t v114 = v111;
          uint64_t v115 = *(void *)&v111[16 * v113 + 32];
          unint64_t v116 = *(void *)&v111[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v112 + 96 * v115), (float *)(v112 + 96 * *(void *)&v111[16 * v12 + 16]), v112 + 96 * v116, v131);
          if (v1) {
            break;
          }
          if (v116 < v115) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v114);
          }
          if (v113 >= *((void *)v114 + 2)) {
            goto LABEL_135;
          }
          v117 = &v114[16 * v113 + 32];
          *(void *)v117 = v115;
          *((void *)v117 + 1) = v116;
          uint64_t v118 = *((void *)v114 + 2);
          if (v12 > v118) {
            goto LABEL_136;
          }
          memmove(&v114[16 * v12 + 16], &v114[16 * v12 + 32], 16 * (v118 - v12));
          uint64_t v111 = v114;
          *((void *)v114 + 2) = v118 - 1;
          Swift::Int v12 = v118 - 1;
        }
        while (v118 > 2);
      }
LABEL_94:
      swift_bridgeObjectRelease();
      *(void *)(v124 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v124 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v124 = v7;
    uint64_t v131 = (float *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v122 = *a1 + 144;
  uint64_t v123 = *a1 + 48;
  uint64_t v120 = *a1 - 96;
  unint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v126 = v3;
  uint64_t v132 = v10;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 < v3)
    {
      Swift::Int v14 = *(float *)(v123 + 96 * v9);
      uint64_t v15 = *(float *)(v123 + 96 * v13);
      uint64_t v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        int v16 = (float *)(v122 + 96 * v13);
        while (v14 < v15 != v16[24] >= *v16)
        {
          ++v9;
          v16 += 24;
          if (v3 == v9)
          {
            uint64_t v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_139;
        }
        if (v13 < v9)
        {
          uint64_t v17 = 96 * v9;
          BOOL v18 = 96 * v13;
          int v19 = v9;
          uint64_t v119 = v13;
          do
          {
            if (v13 != --v19)
            {
              if (!v10) {
                goto LABEL_145;
              }
              uint64_t v20 = v11;
              long long v21 = v10 + v17;
              Swift::Int v22 = *(void *)(v10 + v18);
              uint64_t v128 = *(_OWORD *)(v10 + v18 + 32);
              uint64_t v129 = *(_OWORD *)(v10 + v18 + 16);
              uint64_t v23 = *(_DWORD *)(v10 + v18 + 48);
              Swift::Int v24 = *(unsigned char *)(v10 + v18 + 72);
              uint64_t v130 = *(void *)(v10 + v18 + 80);
              uint64_t v127 = *(_OWORD *)(v10 + v18 + 56);
              memmove((void *)(v10 + v18), (const void *)(v10 + v17 - 96), 0x60uLL);
              uint64_t v10 = v132;
              *(void *)(v21 - 96) = v22;
              *(_OWORD *)(v21 - 80) = v129;
              *(_OWORD *)(v21 - 64) = v128;
              *(_DWORD *)(v21 - 48) = v23;
              *(_OWORD *)(v21 - 40) = v127;
              *(unsigned char *)(v21 - 24) = v24;
              *(void *)(v21 - 16) = v130;
              unint64_t v11 = v20;
            }
            ++v13;
            v17 -= 96;
            v18 += 96;
          }
          while (v13 < v19);
          uint64_t v3 = v126;
          uint64_t v13 = v119;
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_137;
    }
    if (v9 - v13 >= v125) {
      goto LABEL_47;
    }
    uint64_t v25 = v13 + v125;
    if (__OFADD__(v13, v125)) {
      goto LABEL_140;
    }
    if (v25 >= v3) {
      uint64_t v25 = v3;
    }
    if (v25 < v13) {
      break;
    }
    if (v9 != v25)
    {
      uint64_t v26 = v120 + 96 * v9;
      do
      {
        unint64_t v27 = v13;
        char v28 = v26;
        do
        {
          uint64_t v29 = *(float *)(v28 + 144);
          if (v29 >= *(float *)(v28 + 48)) {
            break;
          }
          if (!v10) {
            goto LABEL_143;
          }
          long long v30 = (_OWORD *)(v28 + 96);
          long long v31 = *(void *)(v28 + 96);
          long long v32 = *(_OWORD *)(v28 + 112);
          unint64_t v33 = *(_OWORD *)(v28 + 128);
          unint64_t v34 = *(unsigned char *)(v28 + 168);
          unint64_t v35 = *(void *)(v28 + 176);
          uint64_t v36 = *(_OWORD *)(v28 + 152);
          unint64_t v37 = *(_OWORD *)(v28 + 48);
          *(_OWORD *)(v28 + 128) = *(_OWORD *)(v28 + 32);
          *(_OWORD *)(v28 + 144) = v37;
          uint64_t v38 = *(_OWORD *)(v28 + 80);
          *(_OWORD *)(v28 + 160) = *(_OWORD *)(v28 + 64);
          *(_OWORD *)(v28 + 176) = v38;
          uint64_t v39 = *(_OWORD *)v28;
          uint64_t v40 = *(_OWORD *)(v28 + 16);
          *(void *)char v28 = v31;
          *(_OWORD *)(v28 + 16) = v32;
          *(_OWORD *)(v28 + 32) = v33;
          *(float *)(v28 + 48) = v29;
          *(_OWORD *)(v28 + 56) = v36;
          *(unsigned char *)(v28 + 72) = v34;
          *(void *)(v28 + 80) = v35;
          v28 -= 96;
          ++v27;
          *long long v30 = v39;
          v30[1] = v40;
        }
        while (v9 != v27);
        ++v9;
        v26 += 96;
      }
      while (v9 != v25);
      uint64_t v9 = v25;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_132;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    long long v42 = *((void *)v11 + 2);
    char v41 = *((void *)v11 + 3);
    Swift::Int v12 = v42 + 1;
    uint64_t v10 = v132;
    if (v42 >= v41 >> 1)
    {
      uint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v11);
      uint64_t v10 = v132;
      unint64_t v11 = v91;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v43 = v11 + 32;
    uint64_t v44 = &v11[16 * v42 + 32];
    *(void *)uint64_t v44 = v13;
    *((void *)v44 + 1) = v9;
    if (v42)
    {
      while (1)
      {
        uint64_t v45 = v12 - 1;
        if (v12 >= 4)
        {
          char v50 = &v43[16 * v12];
          uint64_t v51 = *((void *)v50 - 8);
          uint64_t v52 = *((void *)v50 - 7);
          uint64_t v56 = __OFSUB__(v52, v51);
          uint64_t v53 = v52 - v51;
          if (v56) {
            goto LABEL_121;
          }
          long long v55 = *((void *)v50 - 6);
          uint64_t v54 = *((void *)v50 - 5);
          uint64_t v56 = __OFSUB__(v54, v55);
          BOOL v48 = v54 - v55;
          unint64_t v49 = v56;
          if (v56) {
            goto LABEL_122;
          }
          uint64_t v57 = v12 - 2;
          BOOL v58 = &v43[16 * v12 - 32];
          char v60 = *(void *)v58;
          uint64_t v59 = *((void *)v58 + 1);
          uint64_t v56 = __OFSUB__(v59, v60);
          long long v61 = v59 - v60;
          if (v56) {
            goto LABEL_124;
          }
          uint64_t v56 = __OFADD__(v48, v61);
          uint64_t v62 = v48 + v61;
          if (v56) {
            goto LABEL_127;
          }
          if (v62 >= v53)
          {
            uint64_t v80 = &v43[16 * v45];
            uint64_t v82 = *(void *)v80;
            uint64_t v81 = *((void *)v80 + 1);
            uint64_t v56 = __OFSUB__(v81, v82);
            uint64_t v83 = v81 - v82;
            if (v56) {
              goto LABEL_131;
            }
            uint64_t v73 = v48 < v83;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v74 = *((void *)v11 + 4);
            uint64_t v75 = *((void *)v11 + 5);
            uint64_t v56 = __OFSUB__(v75, v74);
            uint64_t v67 = v75 - v74;
            int v68 = v56;
            goto LABEL_78;
          }
          uint64_t v47 = *((void *)v11 + 4);
          uint64_t v46 = *((void *)v11 + 5);
          uint64_t v56 = __OFSUB__(v46, v47);
          BOOL v48 = v46 - v47;
          unint64_t v49 = v56;
        }
        if (v49) {
          goto LABEL_123;
        }
        uint64_t v57 = v12 - 2;
        uint64_t v63 = &v43[16 * v12 - 32];
        BOOL v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        uint64_t v66 = __OFSUB__(v64, v65);
        uint64_t v67 = v64 - v65;
        int v68 = v66;
        if (v66) {
          goto LABEL_126;
        }
        uint64_t v69 = &v43[16 * v45];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        uint64_t v56 = __OFSUB__(v70, v71);
        char v72 = v70 - v71;
        if (v56) {
          goto LABEL_129;
        }
        if (__OFADD__(v67, v72)) {
          goto LABEL_130;
        }
        if (v67 + v72 >= v48)
        {
          uint64_t v73 = v48 < v72;
LABEL_84:
          if (v73) {
            uint64_t v45 = v57;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v68) {
          goto LABEL_125;
        }
        unint64_t v76 = &v43[16 * v45];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        uint64_t v56 = __OFSUB__(v77, v78);
        int v79 = v77 - v78;
        if (v56) {
          goto LABEL_128;
        }
        if (v79 < v67) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v84 = v45 - 1;
        if (v45 - 1 >= v12)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v10) {
          goto LABEL_144;
        }
        unint64_t v85 = v11;
        uint64_t v86 = &v43[16 * v84];
        unint64_t v87 = *(void *)v86;
        uint64_t v88 = &v43[16 * v45];
        uint64_t v89 = *((void *)v88 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v10 + 96 * *(void *)v86), (float *)(v10 + 96 * *(void *)v88), v10 + 96 * v89, v131);
        if (v1) {
          goto LABEL_94;
        }
        if (v89 < v87) {
          goto LABEL_118;
        }
        if (v45 > *((void *)v85 + 2)) {
          goto LABEL_119;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v43[16 * v84 + 8] = v89;
        uint64_t v90 = *((void *)v85 + 2);
        if (v45 >= v90) {
          goto LABEL_120;
        }
        unint64_t v11 = v85;
        Swift::Int v12 = v90 - 1;
        memmove(&v43[16 * v45], v88 + 16, 16 * (v90 - 1 - v45));
        *((void *)v85 + 2) = v90 - 1;
        uint64_t v10 = v132;
        if (v90 <= 2) {
          goto LABEL_15;
        }
      }
    }
    Swift::Int v12 = 1;
LABEL_15:
    uint64_t v3 = v126;
    if (v9 >= v126)
    {
      Swift::Int v8 = v124;
      goto LABEL_104;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v7 = result;
    uint64_t v8 = 96 * a3;
LABEL_6:
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    while (1)
    {
      uint64_t v11 = *a4 + v10;
      outlined init with copy of MeshResource._Proto_Level_v1(v11, (uint64_t)&v19);
      outlined init with copy of MeshResource._Proto_Level_v1(v11 - 96, (uint64_t)v18);
      if (v18[0] == (void)v19 && v18[1] == *((void *)&v19 + 1))
      {
        outlined destroy of MeshResource._Proto_Level_v1((uint64_t)v18);
        Swift::Int result = outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v19);
LABEL_5:
        ++v5;
        v8 += 96;
        if (v5 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined destroy of MeshResource._Proto_Level_v1((uint64_t)v18);
      Swift::Int result = outlined destroy of MeshResource._Proto_Level_v1((uint64_t)&v19);
      if ((v13 & 1) == 0) {
        goto LABEL_5;
      }
      if (!*a4) {
        break;
      }
      Swift::Int v14 = (long long *)(*a4 + v10);
      long long v21 = v14[2];
      long long v22 = v14[3];
      long long v23 = v14[4];
      long long v24 = v14[5];
      long long v19 = *v14;
      long long v20 = v14[1];
      long long v15 = *(v14 - 3);
      void v14[2] = *(v14 - 4);
      v14[3] = v15;
      long long v16 = *(v14 - 1);
      v14[4] = *(v14 - 2);
      uint64_t v14[5] = v16;
      long long v17 = *(v14 - 5);
      *Swift::Int v14 = *(v14 - 6);
      v14[1] = v17;
      *(v14 - 5) = v20;
      *(v14 - 6) = v19;
      *(v14 - 1) = v24;
      *(v14 - 2) = v23;
      *(v14 - 3) = v22;
      *(v14 - 4) = v21;
      v10 -= 96;
      if (v5 == ++v9) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = (uint64_t *)(*a4 + (a3 << 6));
LABEL_5:
    uint64_t v9 = v8;
    uint64_t v10 = v6;
    while (1)
    {
      Swift::Int result = v9[1];
      BOOL v11 = result == *(v9 - 7) && v9[2] == *(v9 - 6);
      if (v11 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t v12 = *v9;
      uint64_t v13 = v9[1];
      uint64_t v14 = v9[2];
      int v15 = *((_DWORD *)v9 + 10);
      char v16 = *((unsigned char *)v9 + 44);
      uint64_t v17 = v9[6];
      char v18 = *((unsigned char *)v9 + 56);
      long long v19 = *(_OWORD *)(v9 + 3);
      long long v20 = *((_OWORD *)v9 - 3);
      *(_OWORD *)uint64_t v9 = *((_OWORD *)v9 - 4);
      *((_OWORD *)v9 + 1) = v20;
      long long v21 = *((_OWORD *)v9 - 1);
      *((_OWORD *)v9 + 2) = *((_OWORD *)v9 - 2);
      *((_OWORD *)v9 + 3) = v21;
      *(v9 - 7) = v13;
      *(v9 - 6) = v14;
      *(_OWORD *)(v9 - 5) = v19;
      *((_DWORD *)v9 - 6) = v15;
      *((unsigned char *)v9 - 20) = v16;
      *(v9 - 2) = v17;
      *((unsigned char *)v9 - 8) = v18;
      ++v10;
      *(v9 - 8) = v12;
      v9 -= 8;
      if (v4 == v10) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MeshBuffers.Identifier, AnyMeshBuffer>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v3 = 0;
  uint64_t v34 = a1;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v27 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  int64_t v28 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v29 = (void *)result;
  uint64_t v30 = result + 64;
  if ((v6 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  int64_t v9 = v3;
  for (unint64_t i = v8 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    uint64_t v15 = *(void *)(v34 + 48) + 24 * i;
    uint64_t v17 = *(void *)v15;
    uint64_t v16 = *(void *)(v15 + 8);
    char v18 = *(unsigned char *)(v15 + 16);
    char v19 = *(unsigned char *)(v15 + 17);
    outlined init with copy of __REAssetService(*(void *)(v34 + 56) + 40 * i, (uint64_t)v33);
    outlined init with copy of __REAssetService((uint64_t)v33, (uint64_t)v31);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    uint64_t result = (uint64_t)v29;
    *(void *)(v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v20 = v29[6] + 24 * i;
    *(void *)uint64_t v20 = v17;
    *(void *)(v20 + 8) = v16;
    *(unsigned char *)(v20 + 16) = v18;
    *(unsigned char *)(v20 + 17) = v19;
    uint64_t v21 = v29[7] + 40 * i;
    long long v22 = v31[0];
    long long v23 = v31[1];
    *(void *)(v21 + 32) = v32;
    *(_OWORD *)uint64_t v21 = v22;
    *(_OWORD *)(v21 + 16) = v23;
    uint64_t v24 = v29[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    float64x2_t v29[2] = v26;
    int64_t v3 = v9;
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_24;
    }
    if (v11 >= v28) {
      return result;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    int64_t v13 = v3 + 1;
    if (!v12)
    {
      int64_t v13 = v3 + 2;
      if (v3 + 2 >= v28) {
        return result;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v3 + 3;
        if (v3 + 3 >= v28) {
          return result;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v13);
        if (!v12) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v7 = (v12 - 1) & v12;
    int64_t v9 = v13;
  }
  uint64_t v14 = v3 + 4;
  if (v3 + 4 >= v28) {
    return result;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v28) {
      return result;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a1) {
    return 0;
  }
  uint64_t v4 = *a2;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = 0;
  swift_bridgeObjectRetain();
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a1) {
    return 0;
  }
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v5;
  v6[3] = v4;
  v6[4] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return 1;
}

uint64_t specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a1) {
    return 0;
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(a3);
  *(void *)(swift_allocObject() + 16) = v5;
  return 1;
}

uint64_t specialized closure #1 in ConversionBuffer.init(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(a2 + 48))();
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  unint64_t v12 = (void *)swift_allocObject();
  void v12[2] = v11;
  v12[3] = a3;
  v12[4] = a4;
  swift_retain();
  return v10;
}

uint64_t specialized closure #1 in MeshBuffer.init<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  uint64_t ModelPartBufferAttributeCount = REMeshAssetGetModelPartBufferAttributeCount();
  swift_retain();
  uint64_t v7 = a3(ModelPartBufferAttributeCount, v5, 0, ModelPartBufferAttributeCount, a2);
  swift_release();
  return v7;
}

unint64_t specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MeshBuffers.Identifier.BufferName.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v6 + 16) = a1;
    }
    else
    {
      uint64_t v6 = MEMORY[0x263F8EE78];
    }
    uint64_t ModelPartBufferAttributeData = REMeshAssetGetModelPartBufferAttributeData();
    if (ModelPartBufferAttributeData <= a1)
    {
      *(void *)(v6 + 16) = ModelPartBufferAttributeData;
      return v6;
    }
    __break(1u);
  }
  swift_release();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v2 + 16) = a1;
    }
    else
    {
      uint64_t v2 = MEMORY[0x263F8EE78];
    }
    uint64_t ModelPartBufferAttributeData = REMeshAssetGetModelPartBufferAttributeData();
    if (ModelPartBufferAttributeData <= a1)
    {
      *(void *)(v2 + 16) = ModelPartBufferAttributeData;
      return v2;
    }
    __break(1u);
  }
  swift_release();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized SequenceBuffer.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  Sequence.count(where:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  return AnySequence.init<A>(_:)();
}

uint64_t sub_228086080()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for specialized closure #3 in MeshBuffer.init<A>(_:)()
{
  return 0;
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return specialized closure #3 in MeshBuffer.init<A>(_:)();
}

{
  return partial apply for specialized closure #3 in MeshBuffer.init<A>(_:)();
}

uint64_t partial apply for specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1)
{
  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<Int8>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<UInt8>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<Int16>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<UInt16>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<Int32>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<UInt32>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<Float>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<Double>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<SIMD2<Float>>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<SIMD3<Float>>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<SIMD4<Float>>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1 + 16, &demangling cache variable for type metadata for _IteratorBox<AnyIterator<MeshJointInfluence>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, (uint64_t)&type metadata for MeshJointInfluence, &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[MeshJointInfluence]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD4<Float>]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, &demangling cache variable for type metadata for SIMD3<Float>, &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD3<Float>]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, (uint64_t)&type metadata for FloatVector3Packed, &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[FloatVector3Packed]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, &demangling cache variable for type metadata for SIMD2<Float>, &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD2<Float>]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x263F8D538], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Double]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x263F8D5C8], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Float]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x263F8E548], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int32]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x263F8E4F0], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int16]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x263F8E498], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int8]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x263F8E8F8], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt32]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x263F8E888], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt16]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, v1, MEMORY[0x263F8E778], &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt8]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<MeshJointInfluence>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[MeshJointInfluence]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<SIMD4<Float>>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD4<Float>]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<SIMD3<Float>>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<SIMD2<Float>>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD2<Float>]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<Double>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Double]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<Float>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Float]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<UInt32>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt32]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<Int32>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int32]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<UInt16>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt16]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<Int16>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int16]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<UInt8>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[UInt8]>>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingBuffer<Int8>.Iterator>);
}

{
  uint64_t v1;

  return specialized closure #4 in MeshBuffer.init<A>(_:)(a1, (uint64_t *)(v1 + 16), &demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[Int8]>>);
}

uint64_t lazy protocol witness table accessor for type MeshBuffers.Semantic<SIMD3<Float>> and conformance MeshBuffers.Semantic<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of AnyMeshBuffer(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyMeshBuffer(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of MeshDescriptor.Materials(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of MeshDescriptor.Materials(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of MeshDescriptor.Primitives?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return outlined copy of MeshDescriptor.Primitives(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined copy of MeshDescriptor.Primitives(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 < 2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (!a3)
  {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of MeshDescriptor.Primitives?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return outlined consume of MeshDescriptor.Primitives(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined consume of MeshDescriptor.Primitives(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 < 2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (!a3)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized MeshDescriptor.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *v6;
  long long v16 = v6[1];
  long long v17 = v7;
  long long v8 = v6[2];
  long long v14 = v6[3];
  long long v15 = v8;
  uint64_t v9 = *((void *)v6 + 8);
  uint64_t v10 = *((void *)v6 + 9);
  char v11 = *((unsigned char *)v6 + 80);
  (*(void (**)(char *))(v12 + 16))(v5);
  v18[0] = v17;
  v18[1] = v16;
  void v18[2] = v15;
  v18[3] = v14;
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  char v21 = v11;
  return MeshBufferDictionary.subscript.setter((uint64_t)v18, (uint64_t)v5, a3);
}

uint64_t outlined copy of MeshDescriptor.Skinning?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of MeshDescriptor(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 64);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v2, v3);
  outlined copy of MeshDescriptor.Primitives?(v4, v5, v7);
  outlined copy of MeshDescriptor.Skinning?(v9, v6);
  return a1;
}

uint64_t outlined release of MeshDescriptor(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 64);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MeshDescriptor.Materials(v2, v3);
  outlined consume of MeshDescriptor.Primitives?(v4, v5, v7);
  outlined consume of StateMachineGraph?(v9, v6);
  return a1;
}

uint64_t outlined init with take of MeshDescriptor.Materials(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a1 + 8);
  *(void *)a2 = v2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier;
  if (!lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier;
  if (!lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshBuffers.Identifier and conformance MeshBuffers.Identifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshBuffers.Rate and conformance MeshBuffers.Rate()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshBuffers.Rate and conformance MeshBuffers.Rate;
  if (!lazy protocol witness table cache variable for type MeshBuffers.Rate and conformance MeshBuffers.Rate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshBuffers.Rate and conformance MeshBuffers.Rate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshBuffers.ElementType and conformance MeshBuffers.ElementType()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshBuffers.ElementType and conformance MeshBuffers.ElementType;
  if (!lazy protocol witness table cache variable for type MeshBuffers.ElementType and conformance MeshBuffers.ElementType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshBuffers.ElementType and conformance MeshBuffers.ElementType);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for MeshBuffers.Semantic<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in MeshBuffer<A>()
{
  return swift_getWitnessTable();
}

int *sub_2280868E8@<X0>(int *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t *sub_2280868F4(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  if (*result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    *a2 = v2;
    return result;
  }
  __break(1u);
  return result;
}

float sub_228086920@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 4);
  *a2 = result;
  return result;
}

float sub_22808692C(float *a1, uint64_t a2)
{
  float result = *a1;
  *(float *)(a2 + 4) = *a1;
  return result;
}

uint64_t sub_228086940()
{
  return 16;
}

__n128 sub_22808694C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_228086958@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return key path getter for MeshBufferContainer.normals : <A>A(a1, a2, (void (*)(_OWORD *__return_ptr, void, void))MeshBufferContainer.normals.getter, a3);
}

uint64_t sub_228086984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MeshBufferContainer.normals : <A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))MeshBufferContainer.normals.setter);
}

uint64_t sub_2280869B0()
{
  return 16;
}

__n128 sub_2280869BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_2280869C8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return key path getter for MeshBufferContainer.normals : <A>A(a1, a2, (void (*)(_OWORD *__return_ptr, void, void))MeshBufferContainer.tangents.getter, a3);
}

uint64_t sub_2280869F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MeshBufferContainer.normals : <A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))MeshBufferContainer.tangents.setter);
}

uint64_t sub_228086A20()
{
  return 16;
}

__n128 sub_228086A2C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_228086A38@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return key path getter for MeshBufferContainer.normals : <A>A(a1, a2, (void (*)(_OWORD *__return_ptr, void, void))MeshBufferContainer.bitangents.getter, a3);
}

uint64_t sub_228086A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MeshBufferContainer.normals : <A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))MeshBufferContainer.bitangents.setter);
}

uint64_t sub_228086A90()
{
  return 16;
}

__n128 sub_228086A9C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_228086AA8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return key path getter for MeshBufferContainer.normals : <A>A(a1, a2, (void (*)(_OWORD *__return_ptr, void, void))MeshBufferContainer.textureCoordinates.getter, a3);
}

uint64_t sub_228086AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for MeshBufferContainer.normals : <A>A(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))MeshBufferContainer.textureCoordinates.setter);
}

uint64_t sub_228086B00()
{
  return 16;
}

__n128 sub_228086B0C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_228086B20()
{
  return 16;
}

__n128 sub_228086B2C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for MeshJointInfluence()
{
  return &type metadata for MeshJointInfluence;
}

ValueMetadata *type metadata accessor for MeshBuffers()
{
  return &type metadata for MeshBuffers;
}

ValueMetadata *type metadata accessor for MeshBuffers.Identifier()
{
  return &type metadata for MeshBuffers.Identifier;
}

unsigned char *storeEnumTagSinglePayload for MeshBuffers.Rate(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228086C48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshBuffers.Rate()
{
  return &type metadata for MeshBuffers.Rate;
}

unsigned char *storeEnumTagSinglePayload for MeshBuffers.ElementType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *__n128 result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228086D4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshBuffers.ElementType()
{
  return &type metadata for MeshBuffers.ElementType;
}

uint64_t dispatch thunk of MeshBufferSemantic.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t initializeBufferWithCopyOfBuffer for MeshBuffers.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshBuffers.Identifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for MeshBuffers.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshBuffers.Identifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 18)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshBuffers.Identifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for MeshBuffers.Semantic()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for MeshBuffer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v3;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MeshBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for MeshBuffer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t type metadata accessor for MeshBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for MeshBuffer.Iterator()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for MeshBuffer.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for MeshBuffer.Iterator(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MeshBuffer.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshBuffer.Iterator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshBuffer.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t initializeWithCopy for AnyMeshBuffer(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyMeshBuffer(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for AnyMeshBuffer(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyMeshBuffer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyMeshBuffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyMeshBuffer()
{
  return &type metadata for AnyMeshBuffer;
}

uint64_t dispatch thunk of MeshBufferContainer.buffers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MeshBufferContainer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of MeshBufferContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of MeshBufferContainer.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

ValueMetadata *type metadata accessor for MeshSkeleton()
{
  return &type metadata for MeshSkeleton;
}

uint64_t destroy for MeshDescriptor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MeshDescriptor.Materials(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  int v2 = *(unsigned __int8 *)(a1 + 56);
  if (v2 != 255) {
    outlined consume of MeshDescriptor.Primitives(*(void *)(a1 + 40), *(void *)(a1 + 48), v2);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for MeshDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v5, v6);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  int v7 = *(unsigned __int8 *)(a2 + 56);
  if (v7 == 255)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    uint64_t v10 = *(void *)(a2 + 72);
    if (v10) {
      goto LABEL_3;
    }
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    return a1;
  }
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  outlined copy of MeshDescriptor.Primitives(v8, v9, *(unsigned char *)(a2 + 56));
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v7;
  uint64_t v10 = *(void *)(a2 + 72);
  if (!v10) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 32);
  outlined copy of MeshDescriptor.Materials(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  outlined consume of MeshDescriptor.Materials(v6, v7);
  uint64_t v8 = (long long *)(a1 + 40);
  uint64_t v9 = (long long *)(a2 + 40);
  int v10 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v10 == 255)
    {
      long long v19 = *v9;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      *uint64_t v8 = v19;
    }
    else
    {
      uint64_t v16 = *(void *)(a2 + 40);
      uint64_t v17 = *(void *)(a2 + 48);
      outlined copy of MeshDescriptor.Primitives(v16, v17, *(unsigned char *)(a2 + 56));
      *(void *)(a1 + 40) = v16;
      *(void *)(a1 + 48) = v17;
      *(unsigned char *)(a1 + 56) = v10;
    }
  }
  else if (v10 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 40);
    char v18 = *(unsigned char *)(a2 + 56);
    *uint64_t v8 = *v9;
    *(unsigned char *)(a1 + 56) = v18;
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v12 = *(void *)(a2 + 48);
    outlined copy of MeshDescriptor.Primitives(v11, v12, *(unsigned char *)(a2 + 56));
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v12;
    unsigned __int8 v15 = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v10;
    outlined consume of MeshDescriptor.Primitives(v13, v14, v15);
  }
  uint64_t v20 = (_OWORD *)(a1 + 64);
  char v21 = (_OWORD *)(a2 + 64);
  uint64_t v22 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v22)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
    }
    else
    {
      outlined destroy of MeshDescriptor.Skinning(a1 + 64);
      uint64_t v23 = *(void *)(a2 + 96);
      long long v24 = *(_OWORD *)(a2 + 80);
      *uint64_t v20 = *v21;
      *(_OWORD *)(a1 + 80) = v24;
      *(void *)(a1 + 96) = v23;
    }
  }
  else if (v22)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v25 = *v21;
    long long v26 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *uint64_t v20 = v25;
    *(_OWORD *)(a1 + 80) = v26;
  }
  return a1;
}

uint64_t outlined destroy of MeshDescriptor.Primitives(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of MeshDescriptor.Skinning(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for MeshDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v5;
  outlined consume of MeshDescriptor.Materials(v6, v7);
  uint64_t v8 = (_OWORD *)(a2 + 40);
  int v9 = *(unsigned __int8 *)(a1 + 56);
  if (v9 != 255)
  {
    int v10 = *(unsigned __int8 *)(a2 + 56);
    if (v10 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 48);
      *(_OWORD *)(a1 + 40) = *v8;
      *(unsigned char *)(a1 + 56) = v10;
      outlined consume of MeshDescriptor.Primitives(v11, v12, v9);
      goto LABEL_6;
    }
    outlined destroy of MeshDescriptor.Primitives(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
LABEL_6:
  if (!*(void *)(a1 + 72))
  {
LABEL_10:
    long long v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    return a1;
  }
  uint64_t v13 = *(void *)(a2 + 72);
  if (!v13)
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 64);
    goto LABEL_10;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v13;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

ValueMetadata *type metadata accessor for MeshDescriptor()
{
  return &type metadata for MeshDescriptor;
}

uint64_t initializeBufferWithCopyOfBuffer for MeshDescriptor.Materials(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of MeshDescriptor.Materials(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for MeshDescriptor.Materials(uint64_t a1)
{
  return outlined consume of MeshDescriptor.Materials(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for MeshDescriptor.Materials(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of MeshDescriptor.Materials(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of MeshDescriptor.Materials(v5, v6);
  return a1;
}

uint64_t assignWithTake for MeshDescriptor.Materials(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of MeshDescriptor.Materials(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MeshDescriptor.Materials()
{
  return &type metadata for MeshDescriptor.Materials;
}

uint64_t destroy for MeshDescriptor.Primitives(uint64_t a1)
{
  return outlined consume of MeshDescriptor.Primitives(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for MeshDescriptor.Primitives(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MeshDescriptor.Primitives(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MeshDescriptor.Primitives(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MeshDescriptor.Primitives(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of MeshDescriptor.Primitives(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MeshDescriptor.Primitives(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of MeshDescriptor.Primitives(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MeshDescriptor.Primitives()
{
  return &type metadata for MeshDescriptor.Primitives;
}

void *initializeWithCopy for MeshDescriptor.Skinning(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MeshDescriptor.Skinning(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for MeshDescriptor.Skinning(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshDescriptor.Skinning(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshDescriptor.Skinning(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshDescriptor.Skinning()
{
  return &type metadata for MeshDescriptor.Skinning;
}

unint64_t destroy for GeomMeshError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GeomMeshError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for GeomMeshError(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
  return a1;
}

uint64_t assignWithTake for GeomMeshError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeomMeshError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GeomMeshError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for GeomMeshError(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GeomMeshError()
{
  return &type metadata for GeomMeshError;
}

uint64_t type metadata completion function for MeshPartBuffer()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MeshPartBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for BufferInstaller #1 in static MeshResource.Part.unpack(coreAsset:modelIndex:)()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for BufferDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BufferDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for BufferDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for BufferDescriptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 21)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BufferDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 21) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BufferDescriptor()
{
  return &type metadata for BufferDescriptor;
}

ValueMetadata *type metadata accessor for MeshBufferLocation()
{
  return &type metadata for MeshBufferLocation;
}

uint64_t destroy for MeshBuffer()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for MeshBuffer.Closures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for MeshBuffer.Closures(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for MeshBuffer.Closures(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshBuffer.Closures(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshBuffer.Closures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for MeshBuffer.Closures()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for MeshBufferDictionary()
{
  return &type metadata for MeshBufferDictionary;
}

uint64_t destroy for MeshBufferDictionary.BufferEntry()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for MeshBufferDictionary.BufferEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t v4 = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = v4;
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MeshBufferDictionary.BufferEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(long long *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for MeshBufferDictionary.BufferEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshBufferDictionary.BufferEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 121)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshBufferDictionary.BufferEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 120) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 121) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 121) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for MeshBufferDictionary.BufferEntry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for specialized closure #1 in ConversionBuffer.init(_:_:)(uint64_t a1)
{
  return specialized closure #1 in ConversionBuffer.init(_:_:)(a1, v1 + 16, *(void *)(v1 + 104), *(void *)(v1 + 112), &demangling cache variable for type metadata for _IteratorBox<ConversionBuffer<UInt32, MeshBuffer<UInt16>>.ConvertingIterator<UInt16>>);
}

{
  uint64_t v1;

  return specialized closure #1 in ConversionBuffer.init(_:_:)(a1, v1 + 16, *(void *)(v1 + 104), *(void *)(v1 + 112), &demangling cache variable for type metadata for _IteratorBox<ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>.ConvertingIterator<FloatVector3Packed>>);
}

uint64_t sub_228088934()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for specialized closure #4 in MeshBuffer.init<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined retain of MeshResource.Part(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of MeshResource.Part(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of MeshResource.JointInfluences?(uint64_t a1)
{
  outlined consume of MeshResource.JointInfluences?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(unsigned char *)(a1 + 168));
  return a1;
}

uint64_t outlined consume of MeshResource.JointInfluences?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return outlined consume of MeshResource.JointInfluences.InfluenceRate(a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
  }
  return result;
}

uint64_t outlined consume of MeshResource.JointInfluences.InfluenceRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11 < 0)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of MeshResource._Proto_Level_v1(uint64_t a1)
{
  return a1;
}

uint64_t sub_228088C70()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void _s17RealityFoundation23MeshAttributeDescriptorC8makeData8tangents0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0()
{
}

uint64_t sub_228088C88()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void _s17RealityFoundation23MeshAttributeDescriptorC8makeData7normals0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0()
{
}

uint64_t outlined retain of MeshBuffer<SIMD3<Float>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of MeshBuffer<SIMD3<Float>>(uint64_t a1)
{
  return a1;
}

uint64_t sub_228088D50()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void _s17RealityFoundation23MeshAttributeDescriptorC8makeData9positions0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0()
{
}

uint64_t sub_228088D68()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void _s17RealityFoundation23MeshAttributeDescriptorC8makeData17blendShapeOffsets0B00G0VSays5SIMD3VySfGG_tFSiSPyAKG_SiSvSgSitcSo06REMeshdE3Refacfu_SiAM_SiANSitcfu0_TA_0()
{
}

unint64_t lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshResourceError and conformance MeshResourceError;
  if (!lazy protocol witness table cache variable for type MeshResourceError and conformance MeshResourceError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshResourceError and conformance MeshResourceError);
  }
  return result;
}

uint64_t specialized closure #1 in addAttribute #1 <A>(_:_:_:) in OpaquePointer.addAttribute(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t), uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  if (!a1) {
    return 2;
  }
  unint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = a7[3];
  uint64_t v15 = a7[4];
  __swift_project_boxed_opaque_existential_1(a7, v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 8))(&v20, v14, v15);
  if ((a2 & 0x8000000000000000) != 0 || HIDWORD(a2) || HIDWORD(v13))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v16 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    char v17 = a4(a6, v16 + 32, a8, a2, a1, v13, a3 + 32);
    swift_release();
    return v17 & 1;
  }
  return result;
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(unint64_t a1, const __CFData *a2, unint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      uint64_t v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v6 + 16) = a1;
    }
    else
    {
      uint64_t v6 = MEMORY[0x263F8EE78];
    }
    BytePtr = CFDataGetBytePtr(a2);
    if (BytePtr)
    {
      if ((a3 & 0x8000000000000000) != 0) {
        goto LABEL_17;
      }
      unsigned __int8 v8 = BytePtr;
      int v9 = (char *)(v6 + 32);
      if ((unint64_t)v8 < v6 + 32 + 8 * a3 && v9 < (char *)&v8[8 * a3]) {
        goto LABEL_17;
      }
      memcpy(v9, v8, 8 * a3);
      if (a1 >= a3)
      {
        *(void *)(v6 + 16) = a3;
        return v6;
      }
      __break(1u);
    }
    __break(1u);
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_17:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v6;
  const UInt8 *BytePtr;
  const UInt8 *v8;
  char *v9;
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      uint64_t v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v6 + 16) = a1;
    }
    else
    {
      uint64_t v6 = MEMORY[0x263F8EE78];
    }
    BytePtr = CFDataGetBytePtr(a2);
    if (BytePtr)
    {
      if ((a3 & 0x8000000000000000) != 0) {
        goto LABEL_17;
      }
      unsigned __int8 v8 = BytePtr;
      int v9 = (char *)(v6 + 32);
      if ((unint64_t)v8 < v6 + 32 + 4 * a3 && v9 < (char *)&v8[4 * a3]) {
        goto LABEL_17;
      }
      memcpy(v9, v8, 4 * a3);
      if (a1 >= a3)
      {
        *(void *)(v6 + 16) = a3;
        return v6;
      }
      __break(1u);
    }
    __break(1u);
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_17:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v6;
  const UInt8 *BytePtr;
  const UInt8 *v8;
  char *v9;
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0)
  {
    if (a1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      uint64_t v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v6 + 16) = a1;
    }
    else
    {
      uint64_t v6 = MEMORY[0x263F8EE78];
    }
    BytePtr = CFDataGetBytePtr(a2);
    if (BytePtr)
    {
      if ((a3 & 0x8000000000000000) != 0) {
        goto LABEL_17;
      }
      unsigned __int8 v8 = BytePtr;
      int v9 = (char *)(v6 + 32);
      if ((unint64_t)v8 < v6 + 32 + 16 * a3 && v9 < (char *)&v8[16 * a3]) {
        goto LABEL_17;
      }
      memcpy(v9, v8, 16 * a3);
      if (a1 >= a3)
      {
        *(void *)(v6 + 16) = a3;
        return v6;
      }
      __break(1u);
    }
    __break(1u);
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_17:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized static MeshResource.Part.unpack(coreAsset:modelIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v528 = *MEMORY[0x263EF8340];
  uint64_t v477 = a1;
  uint64_t v478 = a2;
  uint64_t ModelPartCount = REMeshAssetGetModelPartCount();
  if (ModelPartCount < 0) {
    goto LABEL_253;
  }
  uint64_t v3 = ModelPartCount;
  if (!ModelPartCount) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v4 = 0;
  uint64_t v474 = 0;
  v468 = (void *)MEMORY[0x263F8EE78];
  unint64_t v469 = 0x8000000228357880;
  v464 = "ertexUV";
  v465 = "skinnedAnimationJointInfluences";
  unint64_t v463 = 0x800000022834DB80;
  unint64_t v462 = 0x800000022834DB60;
  v471 = (void *)MEMORY[0x263F8EE78];
  uint64_t v466 = ModelPartCount;
  do
  {
    if (v4 == v3) {
      goto LABEL_250;
    }
    REMeshAssetGetModelPartName();
    uint64_t v5 = String.init(cString:)();
    uint64_t v7 = v6;
    unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v479 = v4;
    unint64_t v480 = v8;
    uint64_t ModelPartBufferCount = REMeshAssetGetModelPartBufferCount();
    if (ModelPartBufferCount < 0)
    {
LABEL_251:
      __break(1u);
LABEL_252:
      __break(1u);
LABEL_253:
      __break(1u);
    }
    *(void *)&long long v482 = v5;
    *(void *)&long long v483 = v7;
    if (ModelPartBufferCount)
    {
      uint64_t v10 = ModelPartBufferCount;
      uint64_t v11 = 0;
      uint64_t v484 = ModelPartBufferCount;
      while (v10 != v11)
      {
        REMeshAssetGetModelPartBufferName();
        uint64_t v14 = String.init(cString:)();
        uint64_t v16 = v15;
        unsigned __int8 ModelPartBufferAttributeRate = REMeshAssetGetModelPartBufferAttributeRate();
        unsigned __int8 ModelPartBufferAttributeType = REMeshAssetGetModelPartBufferAttributeType();
        swift_bridgeObjectRetain();
        BufferDescriptor.init(bufferName:reRate:reType:)(v14, (unint64_t)v16, ModelPartBufferAttributeRate, ModelPartBufferAttributeType, (uint64_t)&v516);
        uint64_t v19 = v517;
        if ((void)v517)
        {
          unint64_t v20 = v516;
          uint64_t v21 = BYTE12(v517);
          uint64_t v22 = DWORD2(v517);
          swift_bridgeObjectRelease();
          unint64_t v23 = v480;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v516 = v23;
          unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
          uint64_t v27 = *(void *)(v23 + 16);
          BOOL v28 = (v25 & 1) == 0;
          uint64_t v29 = v27 + v28;
          if (__OFADD__(v27, v28)) {
            goto LABEL_247;
          }
          char v30 = v25;
          if (*(void *)(v23 + 24) >= v29)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
            unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
            if ((v30 & 1) != (v32 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              JUMPOUT(0x22808CEE8);
            }
            unint64_t v26 = v31;
          }
          unint64_t v46 = v22 | (v21 << 32);
          uint64_t v47 = (v46 >> 16) & 0xFFFFFF;
          char v48 = v46 & 1;
          char v49 = BYTE1(v46) & 1;
          BYTE4(v22) = BYTE4(v46) & 1;
          char v50 = (void *)v516;
          unint64_t v480 = v516;
          if (v30)
          {
            uint64_t v12 = *(void *)(v516 + 56) + 24 * v26;
            swift_bridgeObjectRelease();
            *(void *)uint64_t v12 = v20;
            *(void *)(v12 + 8) = v19;
            *(unsigned char *)(v12 + 16) = v48;
            *(unsigned char *)(v12 + 17) = v49;
            *(unsigned char *)(v12 + 18) = v47;
            *(unsigned char *)(v12 + 19) = BYTE3(v22);
            *(unsigned char *)(v12 + 20) = BYTE4(v22);
          }
          else
          {
            *(void *)(v516 + 8 * (v26 >> 6) + 64) |= 1 << v26;
            *(void *)(v50[6] + 8 * v26) = v11;
            uint64_t v51 = v50[7] + 24 * v26;
            *(void *)uint64_t v51 = v20;
            *(void *)(v51 + 8) = v19;
            *(unsigned char *)(v51 + 16) = v48;
            *(unsigned char *)(v51 + 17) = v49;
            *(unsigned char *)(v51 + 18) = v47;
            *(unsigned char *)(v51 + 19) = BYTE3(v22);
            *(unsigned char *)(v51 + 20) = BYTE4(v22);
            uint64_t v52 = v50[2];
            BOOL v53 = __OFADD__(v52, 1);
            uint64_t v54 = v52 + 1;
            if (v53) {
              goto LABEL_248;
            }
            v50[2] = v54;
          }
          swift_bridgeObjectRelease();
          uint64_t v10 = v484;
        }
        else
        {
          unint64_t v516 = 0;
          *(void *)&long long v517 = 0xE000000000000000;
          _StringGuts.grow(_:)(30);
          swift_bridgeObjectRelease();
          unint64_t v516 = 0xD000000000000010;
          *(void *)&long long v517 = v469;
          v525[0] = v11;
          v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v33);
          swift_bridgeObjectRelease();
          v34._countAndFlagsBits = 8250;
          v34._object = (void *)0xE200000000000000;
          String.append(_:)(v34);
          v35._countAndFlagsBits = v14;
          v35._object = v16;
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          v36._countAndFlagsBits = 8236;
          v36._object = (void *)0xE200000000000000;
          String.append(_:)(v36);
          LOBYTE(v525[0]) = ModelPartBufferAttributeRate;
          v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v37);
          swift_bridgeObjectRelease();
          v38._countAndFlagsBits = 8236;
          v38._object = (void *)0xE200000000000000;
          String.append(_:)(v38);
          LOBYTE(v525[0]) = ModelPartBufferAttributeType;
          v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v39);
          swift_bridgeObjectRelease();
          unint64_t v40 = v516;
          uint64_t v41 = v517;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v471 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v471[2] + 1, 1, v471);
          }
          unint64_t v43 = v471[2];
          unint64_t v42 = v471[3];
          if (v43 >= v42 >> 1) {
            v471 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v471);
          }
          uint64_t v44 = v471;
          v471[2] = v43 + 1;
          uint64_t v45 = &v44[2 * v43];
          v45[4] = v40;
          v45[5] = v41;
        }
        ++v11;
        uint64_t v13 = v477;
        if (v10 == v11) {
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_246:
      __break(1u);
LABEL_247:
      __break(1u);
LABEL_248:
      __break(1u);
      goto LABEL_249;
    }
    uint64_t v13 = v477;
LABEL_28:
    unsigned int v487 = 0;
    uint64_t v55 = v478;
    uint64_t v56 = v479;
    uint64_t v57 = v13;
    int ModelPartMaterial = REMeshAssetGetModelPartMaterial();
    uint64_t v59 = v487;
    type metadata accessor for BufferInstaller #1 in static MeshResource.Part.unpack(coreAsset:modelIndex:)();
    char v60 = (void *)swift_allocObject();
    long long v61 = v60;
    v60[14] = 0;
    v60[15] = 0;
    *(void *)((char *)v60 + 125) = 0;
    v60[10] = v57;
    v60[11] = v55;
    if (!ModelPartMaterial) {
      uint64_t v59 = 0;
    }
    v60[12] = v56;
    v60[13] = -1;
    v60[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    v481 = v61 + 2;
    uint64_t v62 = v483;
    v61[3] = v482;
    v61[4] = v62;
    v61[5] = 0;
    v61[6] = 0;
    *((_DWORD *)v61 + 14) = 0;
    *((unsigned char *)v61 + 60) = 1;
    v61[8] = v59;
    uint64_t v484 = (uint64_t)v61;
    *((unsigned char *)v61 + 72) = 0;
    if ((ModelPartMaterial & 1) == 0)
    {
      swift_beginAccess();
      *(unsigned char *)(v484 + 72) = 0;
    }
    uint64_t v467 = v479 + 1;
    uint64_t v63 = *(void *)(v480 + 64);
    CFDataRef v475 = (const __CFData *)(v480 + 64);
    uint64_t v64 = 1 << *(unsigned char *)(v480 + 32);
    if (v64 < 64) {
      uint64_t v65 = ~(-1 << v64);
    }
    else {
      uint64_t v65 = -1;
    }
    unint64_t v66 = v65 & v63;
    *(void *)&long long v476 = (unint64_t)(v64 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v67 = 0;
    while (1)
    {
      if (v66)
      {
        *(void *)&long long v482 = (v66 - 1) & v66;
        *(void *)&long long v483 = v67;
        unint64_t v80 = __clz(__rbit64(v66)) | (v67 << 6);
        unint64_t v81 = v480;
        goto LABEL_54;
      }
      BOOL v53 = __OFADD__(v67, 1);
      uint64_t v82 = v67 + 1;
      if (v53) {
        goto LABEL_246;
      }
      unint64_t v81 = v480;
      if (v82 >= (uint64_t)v476) {
        break;
      }
      unint64_t v83 = *((void *)v475 + v82);
      if (!v83)
      {
        uint64_t v84 = v82 + 1;
        if (v82 + 1 >= (uint64_t)v476) {
          break;
        }
        unint64_t v83 = *((void *)v475 + v84);
        if (!v83)
        {
          uint64_t v84 = v82 + 2;
          if (v82 + 2 >= (uint64_t)v476) {
            break;
          }
          unint64_t v83 = *((void *)v475 + v84);
          if (!v83)
          {
            uint64_t v84 = v82 + 3;
            if (v82 + 3 >= (uint64_t)v476) {
              break;
            }
            unint64_t v83 = *((void *)v475 + v84);
            if (!v83)
            {
              while (1)
              {
                uint64_t v82 = v84 + 1;
                if (__OFADD__(v84, 1)) {
                  break;
                }
                if (v82 >= (uint64_t)v476) {
                  goto LABEL_201;
                }
                unint64_t v83 = *((void *)v475 + v82);
                ++v84;
                if (v83) {
                  goto LABEL_53;
                }
              }
LABEL_249:
              __break(1u);
LABEL_250:
              __break(1u);
              goto LABEL_251;
            }
          }
        }
        uint64_t v82 = v84;
      }
LABEL_53:
      *(void *)&long long v482 = (v83 - 1) & v83;
      *(void *)&long long v483 = v82;
      unint64_t v80 = __clz(__rbit64(v83)) + (v82 << 6);
LABEL_54:
      uint64_t v85 = *(void *)(*(void *)(v81 + 48) + 8 * v80);
      uint64_t v86 = *(void *)(v81 + 56) + 24 * v80;
      uint64_t v87 = *(void *)v86;
      uint64_t v88 = *(void **)(v86 + 8);
      int v89 = *(unsigned __int8 *)(v86 + 16);
      int v90 = *(unsigned __int8 *)(v86 + 17);
      int v91 = *(unsigned __int8 *)(v86 + 18);
      uint64_t v92 = *(unsigned __int8 *)(v86 + 19);
      int v93 = *(unsigned __int8 *)(v86 + 20);
      int v94 = 256;
      if (!v90) {
        int v94 = 0;
      }
      uint64_t v95 = v484;
      *(void *)(v484 + 104) = v85;
      *(void *)(v95 + 112) = v87;
      *(void *)(v95 + 120) = v88;
      *(unsigned char *)(v95 + 132) = v93 != 0;
      *(_DWORD *)(v95 + 128) = v94 | v89 | (v91 << 16) | (v92 << 24);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      switch(v92)
      {
        case 1:
          swift_bridgeObjectRetain_n();
          os_log_t v179 = (void *)v484;
          swift_retain();
          v180._countAndFlagsBits = v87;
          v180._object = v88;
          unint64_t v181 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MeshBuffers.Identifier.BufferName.init(rawValue:), v180);
          swift_bridgeObjectRelease();
          uint64_t v182 = v179[10];
          uint64_t v183 = v179[11];
          uint64_t v184 = v179[12];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<UInt16>);
          uint64_t v185 = (void *)swift_allocObject();
          v185[2] = v182;
          v185[3] = v183;
          v185[4] = v184;
          v185[5] = v85;
          int IsSlow = REMeshAssetModelPartBufferAttributeIsSlow();
          uint64_t v187 = 512;
          if (IsSlow) {
            uint64_t v187 = 0x40000;
          }
          v185[6] = v187;
          RERetain();
          swift_retain();
          uint64_t ModelPartBufferAttributeCount = REMeshAssetGetModelPartBufferAttributeCount();
          swift_beginAccess();
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<UInt16>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v189 = swift_allocObject();
          unint64_t v516 = v189;
          uint64_t v190 = one-time initialization token for triangleIndices;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          if (v190 != -1) {
            swift_once();
          }
          if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
          {
            char v191 = 2;
          }
          else if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            char v191 = 2;
          }
          else
          {
            char v191 = v91;
          }
          __int16 v297 = v181 > 7;
          *(void *)(v189 + 16) = v87;
          *(void *)(v189 + 24) = v88;
          *(unsigned char *)(v189 + 32) = v297;
          *(unsigned char *)(v189 + 33) = 0;
          *(void *)(v189 + 40) = ModelPartBufferAttributeCount;
          *(unsigned char *)(v189 + 48) = v191;
          *(_WORD *)(v189 + 49) = 1;
          *(void *)(v189 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v189 + 64) = v185;
          *(void *)(v189 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
          *(void *)(v189 + 80) = v185;
          *(void *)(v189 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v189 + 96) = v185;
          *(void *)(v189 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v189 + 112) = v185;
          *(_WORD *)(v189 + 120) = 1;
          *(void *)(v189 + 128) = ModelPartBufferAttributeCount;
          *(unsigned char *)(v189 + 136) = v91;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          uint64_t v70 = v484;
          char v298 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = 0x8000000000000000;
          uint64_t v299 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          __n128 v300 = MEMORY[0x270FA5388](v299);
          v302 = (_OWORD *)((char *)&v462 - ((v301 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v303 + 16))(v302, v300);
          long long v304 = v302[5];
          v490[4] = v302[4];
          v490[5] = v304;
          v491[0] = v302[6];
          *(_OWORD *)((char *)v491 + 9) = *(_OWORD *)((char *)v302 + 105);
          long long v305 = v302[1];
          v490[0] = *v302;
          v490[1] = v305;
          long long v306 = v302[3];
          v490[2] = v302[2];
          v490[3] = v306;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v490, v87, (uint64_t)v88, v297, v298, &v486);
          break;
        case 2:
          swift_bridgeObjectRetain_n();
          uint64_t v143 = (void *)v484;
          swift_retain();
          v532._countAndFlagsBits = v87;
          v532._object = v88;
          char v144 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v532);
          uint64_t v145 = v143[10];
          uint64_t v146 = v143[11];
          uint64_t v147 = v143[12];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<UInt32>);
          uint64_t v148 = (void *)swift_allocObject();
          v148[2] = v145;
          v148[3] = v146;
          v148[4] = v147;
          v148[5] = v85;
          int v149 = REMeshAssetModelPartBufferAttributeIsSlow();
          uint64_t v150 = 512;
          if (v149) {
            uint64_t v150 = 0x40000;
          }
          v148[6] = v150;
          RERetain();
          swift_retain();
          uint64_t v151 = REMeshAssetGetModelPartBufferAttributeCount();
          swift_beginAccess();
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<UInt32>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v152 = swift_allocObject();
          unint64_t v516 = v152;
          uint64_t v153 = one-time initialization token for triangleIndices;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          if (v153 != -1) {
            swift_once();
          }
          if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
          {
            char v154 = 2;
          }
          else if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            char v154 = 2;
          }
          else
          {
            char v154 = v91;
          }
          __int16 v257 = v144 == 8;
          *(void *)(v152 + 16) = v87;
          *(void *)(v152 + 24) = v88;
          *(unsigned char *)(v152 + 32) = v257;
          *(unsigned char *)(v152 + 33) = 0;
          *(void *)(v152 + 40) = v151;
          *(unsigned char *)(v152 + 48) = v154;
          *(_WORD *)(v152 + 49) = 2;
          *(void *)(v152 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v152 + 64) = v148;
          *(void *)(v152 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
          *(void *)(v152 + 80) = v148;
          *(void *)(v152 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v152 + 96) = v148;
          *(void *)(v152 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v152 + 112) = v148;
          *(_WORD *)(v152 + 120) = 2;
          *(void *)(v152 + 128) = v151;
          *(unsigned char *)(v152 + 136) = v91;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          uint64_t v70 = v484;
          char v258 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = 0x8000000000000000;
          uint64_t v259 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          __n128 v260 = MEMORY[0x270FA5388](v259);
          v262 = (_OWORD *)((char *)&v462 - ((v261 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v263 + 16))(v262, v260);
          long long v264 = v262[5];
          v492[4] = v262[4];
          v492[5] = v264;
          v493[0] = v262[6];
          *(_OWORD *)((char *)v493 + 9) = *(_OWORD *)((char *)v262 + 105);
          long long v265 = v262[1];
          v492[0] = *v262;
          v492[1] = v265;
          long long v266 = v262[3];
          v492[2] = v262[2];
          v492[3] = v266;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v492, v87, (uint64_t)v88, v257, v258, &v486);
          break;
        case 3:
          swift_bridgeObjectRetain_n();
          v155 = (void *)v484;
          swift_retain();
          v533._countAndFlagsBits = v87;
          v533._object = v88;
          char v156 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v533);
          uint64_t v157 = v155[10];
          uint64_t v158 = v155[11];
          uint64_t v159 = v155[12];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<Int8>);
          uint64_t v160 = (void *)swift_allocObject();
          v160[2] = v157;
          v160[3] = v158;
          v160[4] = v159;
          v160[5] = v85;
          int v161 = REMeshAssetModelPartBufferAttributeIsSlow();
          uint64_t v162 = 512;
          if (v161) {
            uint64_t v162 = 0x40000;
          }
          v160[6] = v162;
          RERetain();
          swift_retain();
          uint64_t v163 = REMeshAssetGetModelPartBufferAttributeCount();
          swift_beginAccess();
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int8>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v164 = swift_allocObject();
          unint64_t v516 = v164;
          uint64_t v165 = one-time initialization token for triangleIndices;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          if (v165 != -1) {
            swift_once();
          }
          if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
          {
            char v166 = 2;
          }
          else if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            char v166 = 2;
          }
          else
          {
            char v166 = v91;
          }
          __int16 v267 = v156 == 8;
          *(void *)(v164 + 16) = v87;
          *(void *)(v164 + 24) = v88;
          *(unsigned char *)(v164 + 32) = v267;
          *(unsigned char *)(v164 + 33) = 0;
          *(void *)(v164 + 40) = v163;
          *(unsigned char *)(v164 + 48) = v166;
          *(_WORD *)(v164 + 49) = 3;
          *(void *)(v164 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v164 + 64) = v160;
          *(void *)(v164 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
          *(void *)(v164 + 80) = v160;
          *(void *)(v164 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v164 + 96) = v160;
          *(void *)(v164 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v164 + 112) = v160;
          *(_WORD *)(v164 + 120) = 3;
          *(void *)(v164 + 128) = v163;
          *(unsigned char *)(v164 + 136) = v91;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          uint64_t v70 = v484;
          char v268 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = 0x8000000000000000;
          uint64_t v269 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          __n128 v270 = MEMORY[0x270FA5388](v269);
          v272 = (_OWORD *)((char *)&v462 - ((v271 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v273 + 16))(v272, v270);
          long long v274 = v272[5];
          v494[4] = v272[4];
          v494[5] = v274;
          v495[0] = v272[6];
          *(_OWORD *)((char *)v495 + 9) = *(_OWORD *)((char *)v272 + 105);
          long long v275 = v272[1];
          v494[0] = *v272;
          v494[1] = v275;
          long long v276 = v272[3];
          v494[2] = v272[2];
          v494[3] = v276;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v494, v87, (uint64_t)v88, v267, v268, &v486);
          break;
        case 4:
          swift_bridgeObjectRetain_n();
          uint64_t v120 = (void *)v484;
          swift_retain();
          v530._countAndFlagsBits = v87;
          v530._object = v88;
          char v121 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v530);
          uint64_t v122 = v120[10];
          uint64_t v123 = v120[11];
          uint64_t v124 = v120[12];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<Int16>);
          uint64_t v125 = (void *)swift_allocObject();
          v125[2] = v122;
          v125[3] = v123;
          v125[4] = v124;
          v125[5] = v85;
          int v126 = REMeshAssetModelPartBufferAttributeIsSlow();
          uint64_t v127 = 512;
          if (v126) {
            uint64_t v127 = 0x40000;
          }
          v125[6] = v127;
          RERetain();
          swift_retain();
          uint64_t v128 = REMeshAssetGetModelPartBufferAttributeCount();
          swift_beginAccess();
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int16>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v129 = swift_allocObject();
          unint64_t v516 = v129;
          uint64_t v130 = one-time initialization token for triangleIndices;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          if (v130 != -1) {
            swift_once();
          }
          if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
          {
            char v131 = 2;
          }
          else if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            char v131 = 2;
          }
          else
          {
            char v131 = v91;
          }
          __int16 v240 = v121 == 8;
          *(void *)(v129 + 16) = v87;
          *(void *)(v129 + 24) = v88;
          *(unsigned char *)(v129 + 32) = v240;
          *(unsigned char *)(v129 + 33) = 0;
          *(void *)(v129 + 40) = v128;
          *(unsigned char *)(v129 + 48) = v131;
          *(_WORD *)(v129 + 49) = 4;
          *(void *)(v129 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v129 + 64) = v125;
          *(void *)(v129 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
          *(void *)(v129 + 80) = v125;
          *(void *)(v129 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v129 + 96) = v125;
          *(void *)(v129 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v129 + 112) = v125;
          *(_WORD *)(v129 + 120) = 4;
          *(void *)(v129 + 128) = v128;
          *(unsigned char *)(v129 + 136) = v91;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          uint64_t v70 = v484;
          char v241 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = 0x8000000000000000;
          uint64_t v242 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          __n128 v243 = MEMORY[0x270FA5388](v242);
          v245 = (_OWORD *)((char *)&v462 - ((v244 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v246 + 16))(v245, v243);
          long long v247 = v245[5];
          v496[4] = v245[4];
          v496[5] = v247;
          v497[0] = v245[6];
          *(_OWORD *)((char *)v497 + 9) = *(_OWORD *)((char *)v245 + 105);
          long long v248 = v245[1];
          v496[0] = *v245;
          v496[1] = v248;
          long long v249 = v245[3];
          v496[2] = v245[2];
          v496[3] = v249;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v496, v87, (uint64_t)v88, v240, v241, &v486);
          break;
        case 5:
          swift_bridgeObjectRetain_n();
          v192 = (void *)v484;
          swift_retain();
          v535._countAndFlagsBits = v87;
          v535._object = v88;
          char v193 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v535);
          uint64_t v194 = v192[10];
          uint64_t v195 = v192[11];
          uint64_t v196 = v192[12];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<Int32>);
          uint64_t v197 = (void *)swift_allocObject();
          v197[2] = v194;
          v197[3] = v195;
          v197[4] = v196;
          v197[5] = v85;
          int v198 = REMeshAssetModelPartBufferAttributeIsSlow();
          uint64_t v199 = 512;
          if (v198) {
            uint64_t v199 = 0x40000;
          }
          v197[6] = v199;
          RERetain();
          swift_retain();
          uint64_t v200 = REMeshAssetGetModelPartBufferAttributeCount();
          swift_beginAccess();
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int32>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v201 = swift_allocObject();
          unint64_t v516 = v201;
          uint64_t v202 = one-time initialization token for triangleIndices;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          if (v202 != -1) {
            swift_once();
          }
          if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
          {
            char v203 = 2;
          }
          else if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            char v203 = 2;
          }
          else
          {
            char v203 = v91;
          }
          __int16 v307 = v193 == 8;
          *(void *)(v201 + 16) = v87;
          *(void *)(v201 + 24) = v88;
          *(unsigned char *)(v201 + 32) = v307;
          *(unsigned char *)(v201 + 33) = 0;
          *(void *)(v201 + 40) = v200;
          *(unsigned char *)(v201 + 48) = v203;
          *(_WORD *)(v201 + 49) = 5;
          *(void *)(v201 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v201 + 64) = v197;
          *(void *)(v201 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
          *(void *)(v201 + 80) = v197;
          *(void *)(v201 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v201 + 96) = v197;
          *(void *)(v201 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v201 + 112) = v197;
          *(_WORD *)(v201 + 120) = 5;
          *(void *)(v201 + 128) = v200;
          *(unsigned char *)(v201 + 136) = v91;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          uint64_t v70 = v484;
          char v308 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = 0x8000000000000000;
          uint64_t v309 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          __n128 v310 = MEMORY[0x270FA5388](v309);
          v312 = (_OWORD *)((char *)&v462 - ((v311 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v313 + 16))(v312, v310);
          long long v314 = v312[5];
          v498[4] = v312[4];
          v498[5] = v314;
          v499[0] = v312[6];
          *(_OWORD *)((char *)v499 + 9) = *(_OWORD *)((char *)v312 + 105);
          long long v315 = v312[1];
          v498[0] = *v312;
          v498[1] = v315;
          long long v316 = v312[3];
          v498[2] = v312[2];
          v498[3] = v316;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v498, v87, (uint64_t)v88, v307, v308, &v486);
          break;
        case 6:
          swift_bridgeObjectRetain_n();
          v204 = (void *)v484;
          swift_retain();
          v536._countAndFlagsBits = v87;
          v536._object = v88;
          char v205 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v536);
          uint64_t v206 = v204[10];
          uint64_t v207 = v204[11];
          uint64_t v208 = v204[12];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<Float>);
          uint64_t v209 = (void *)swift_allocObject();
          v209[2] = v206;
          v209[3] = v207;
          v209[4] = v208;
          v209[5] = v85;
          int v210 = REMeshAssetModelPartBufferAttributeIsSlow();
          uint64_t v211 = 512;
          if (v210) {
            uint64_t v211 = 0x40000;
          }
          v209[6] = v211;
          RERetain();
          swift_retain();
          uint64_t v212 = REMeshAssetGetModelPartBufferAttributeCount();
          swift_beginAccess();
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Float>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v213 = swift_allocObject();
          unint64_t v516 = v213;
          uint64_t v214 = one-time initialization token for triangleIndices;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          if (v214 != -1) {
            swift_once();
          }
          if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
          {
            char v215 = 2;
          }
          else if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            char v215 = 2;
          }
          else
          {
            char v215 = v91;
          }
          __int16 v317 = v205 == 8;
          *(void *)(v213 + 16) = v87;
          *(void *)(v213 + 24) = v88;
          *(unsigned char *)(v213 + 32) = v317;
          *(unsigned char *)(v213 + 33) = 0;
          *(void *)(v213 + 40) = v212;
          *(unsigned char *)(v213 + 48) = v215;
          *(_WORD *)(v213 + 49) = 6;
          *(void *)(v213 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v213 + 64) = v209;
          *(void *)(v213 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
          *(void *)(v213 + 80) = v209;
          *(void *)(v213 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v213 + 96) = v209;
          *(void *)(v213 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v213 + 112) = v209;
          *(_WORD *)(v213 + 120) = 6;
          *(void *)(v213 + 128) = v212;
          *(unsigned char *)(v213 + 136) = v91;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          uint64_t v70 = v484;
          char v318 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = 0x8000000000000000;
          uint64_t v319 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          __n128 v320 = MEMORY[0x270FA5388](v319);
          v322 = (_OWORD *)((char *)&v462 - ((v321 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v323 + 16))(v322, v320);
          long long v324 = v322[5];
          v500[4] = v322[4];
          v500[5] = v324;
          v501[0] = v322[6];
          *(_OWORD *)((char *)v501 + 9) = *(_OWORD *)((char *)v322 + 105);
          long long v325 = v322[1];
          v500[0] = *v322;
          v500[1] = v325;
          long long v326 = v322[3];
          v500[2] = v322[2];
          v500[3] = v326;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v500, v87, (uint64_t)v88, v317, v318, &v486);
          break;
        case 7:
          swift_bridgeObjectRetain_n();
          os_log_type_t v167 = (void *)v484;
          swift_retain();
          v534._countAndFlagsBits = v87;
          v534._object = v88;
          char v168 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v534);
          uint64_t v169 = v167[10];
          uint64_t v170 = v167[11];
          uint64_t v171 = v167[12];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<Double>);
          uint64_t v172 = (void *)swift_allocObject();
          v172[2] = v169;
          v172[3] = v170;
          v172[4] = v171;
          v172[5] = v85;
          int v173 = REMeshAssetModelPartBufferAttributeIsSlow();
          uint64_t v174 = 512;
          if (v173) {
            uint64_t v174 = 0x40000;
          }
          v172[6] = v174;
          RERetain();
          swift_retain();
          uint64_t v175 = REMeshAssetGetModelPartBufferAttributeCount();
          swift_beginAccess();
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Double>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v176 = swift_allocObject();
          unint64_t v516 = v176;
          uint64_t v177 = one-time initialization token for triangleIndices;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          if (v177 != -1) {
            swift_once();
          }
          if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
          {
            char v178 = 2;
          }
          else if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            char v178 = 2;
          }
          else
          {
            char v178 = v91;
          }
          __int16 v277 = v168 == 8;
          *(void *)(v176 + 16) = v87;
          *(void *)(v176 + 24) = v88;
          *(unsigned char *)(v176 + 32) = v277;
          *(unsigned char *)(v176 + 33) = 0;
          *(void *)(v176 + 40) = v175;
          *(unsigned char *)(v176 + 48) = v178;
          *(_WORD *)(v176 + 49) = 7;
          *(void *)(v176 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v176 + 64) = v172;
          *(void *)(v176 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
          *(void *)(v176 + 80) = v172;
          *(void *)(v176 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v176 + 96) = v172;
          *(void *)(v176 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v176 + 112) = v172;
          *(_WORD *)(v176 + 120) = 7;
          *(void *)(v176 + 128) = v175;
          *(unsigned char *)(v176 + 136) = v91;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          uint64_t v70 = v484;
          char v278 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = 0x8000000000000000;
          uint64_t v279 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          __n128 v280 = MEMORY[0x270FA5388](v279);
          v282 = (_OWORD *)((char *)&v462 - ((v281 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v283 + 16))(v282, v280);
          long long v284 = v282[5];
          v502[4] = v282[4];
          v502[5] = v284;
          v503[0] = v282[6];
          *(_OWORD *)((char *)v503 + 9) = *(_OWORD *)((char *)v282 + 105);
          long long v285 = v282[1];
          v502[0] = *v282;
          v502[1] = v285;
          long long v286 = v282[3];
          v502[2] = v282[2];
          v502[3] = v286;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v502, v87, (uint64_t)v88, v277, v278, &v486);
          break;
        case 8:
          swift_bridgeObjectRetain_n();
          v216 = (void *)v484;
          swift_retain();
          v537._countAndFlagsBits = v87;
          v537._object = v88;
          char v217 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v537);
          uint64_t v218 = v216[10];
          uint64_t v219 = v216[11];
          uint64_t v220 = v216[12];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<SIMD2<Float>>);
          v221 = (void *)swift_allocObject();
          v221[2] = v218;
          v221[3] = v219;
          v221[4] = v220;
          v221[5] = v85;
          int v222 = REMeshAssetModelPartBufferAttributeIsSlow();
          uint64_t v223 = 512;
          if (v222) {
            uint64_t v223 = 0x40000;
          }
          v221[6] = v223;
          RERetain();
          swift_retain();
          uint64_t v224 = REMeshAssetGetModelPartBufferAttributeCount();
          swift_beginAccess();
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD2<Float>>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v225 = swift_allocObject();
          unint64_t v516 = v225;
          uint64_t v226 = one-time initialization token for triangleIndices;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          if (v226 != -1) {
            swift_once();
          }
          if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
          {
            char v227 = 2;
          }
          else if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            char v227 = 2;
          }
          else
          {
            char v227 = v91;
          }
          __int16 v337 = v217 == 8;
          *(void *)(v225 + 16) = v87;
          *(void *)(v225 + 24) = v88;
          *(unsigned char *)(v225 + 32) = v337;
          *(unsigned char *)(v225 + 33) = 0;
          *(void *)(v225 + 40) = v224;
          *(unsigned char *)(v225 + 48) = v227;
          *(_WORD *)(v225 + 49) = 8;
          *(void *)(v225 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v225 + 64) = v221;
          *(void *)(v225 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
          *(void *)(v225 + 80) = v221;
          *(void *)(v225 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v225 + 96) = v221;
          *(void *)(v225 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v225 + 112) = v221;
          *(_WORD *)(v225 + 120) = 8;
          *(void *)(v225 + 128) = v224;
          *(unsigned char *)(v225 + 136) = v91;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          uint64_t v70 = v484;
          char v338 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = 0x8000000000000000;
          uint64_t v339 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          __n128 v340 = MEMORY[0x270FA5388](v339);
          v342 = (_OWORD *)((char *)&v462 - ((v341 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v343 + 16))(v342, v340);
          long long v344 = v342[5];
          v504[4] = v342[4];
          v504[5] = v344;
          v505[0] = v342[6];
          *(_OWORD *)((char *)v505 + 9) = *(_OWORD *)((char *)v342 + 105);
          long long v345 = v342[1];
          v504[0] = *v342;
          v504[1] = v345;
          long long v346 = v342[3];
          v504[2] = v342[2];
          v504[3] = v346;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v504, v87, (uint64_t)v88, v337, v338, &v486);
          break;
        case 9:
          swift_bridgeObjectRetain_n();
          uint64_t v132 = (void *)v484;
          swift_retain();
          v531._countAndFlagsBits = v87;
          v531._object = v88;
          LODWORD(v473) = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v531);
          uint64_t v134 = v132[10];
          uint64_t v133 = v132[11];
          uint64_t v135 = v132[12];
          if (v93)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<FloatVector3Packed>);
            v136 = (void *)swift_allocObject();
            v136[2] = v134;
            v136[3] = v133;
            v136[4] = v135;
            v136[5] = v85;
            int v137 = REMeshAssetModelPartBufferAttributeIsSlow();
            uint64_t v138 = 512;
            if (v137) {
              uint64_t v138 = 0x40000;
            }
            v136[6] = v138;
            RERetain();
            swift_retain();
            uint64_t v139 = REMeshAssetGetModelPartBufferAttributeCount();
            swift_beginAccess();
            *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<FloatVector3Packed>);
            *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
            uint64_t v140 = swift_allocObject();
            unint64_t v516 = v140;
            uint64_t v141 = one-time initialization token for triangleIndices;
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            if (v141 != -1) {
              swift_once();
            }
            if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
            {
              char v142 = 2;
            }
            else if (_stringCompareWithSmolCheck(_:_:expecting:)())
            {
              char v142 = 2;
            }
            else
            {
              char v142 = v91;
            }
            __int16 v347 = v473 == 8;
            *(void *)(v140 + 16) = v87;
            *(void *)(v140 + 24) = v88;
            *(unsigned char *)(v140 + 32) = v347;
            *(unsigned char *)(v140 + 33) = 0;
            *(void *)(v140 + 40) = v139;
            *(unsigned char *)(v140 + 48) = v142;
            *(_WORD *)(v140 + 49) = 265;
            *(void *)(v140 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
            *(void *)(v140 + 64) = v136;
            *(void *)(v140 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
            *(void *)(v140 + 80) = v136;
            *(void *)(v140 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
            *(void *)(v140 + 96) = v136;
            *(void *)(v140 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
            *(void *)(v140 + 112) = v136;
            *(_WORD *)(v140 + 120) = 265;
            *(void *)(v140 + 128) = v139;
            *(unsigned char *)(v140 + 136) = v91;
            outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
            uint64_t v70 = v484;
            char v348 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v486 = *(void *)(v70 + 16);
            *(void *)(v70 + 16) = 0x8000000000000000;
            uint64_t v349 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
            __n128 v350 = MEMORY[0x270FA5388](v349);
            v352 = (_OWORD *)((char *)&v462 - ((v351 + 15) & 0xFFFFFFFFFFFFFFF0));
            (*(void (**)(_OWORD *, __n128))(v353 + 16))(v352, v350);
            long long v354 = v352[5];
            v506[4] = v352[4];
            v506[5] = v354;
            v507[0] = v352[6];
            *(_OWORD *)((char *)v507 + 9) = *(_OWORD *)((char *)v352 + 105);
            long long v355 = v352[1];
            v506[0] = *v352;
            v506[1] = v355;
            long long v356 = v352[3];
            v506[2] = v352[2];
            v506[3] = v356;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v506, v87, (uint64_t)v88, v347, v348, &v486);
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<SIMD3<Float>>);
            v250 = (void *)swift_allocObject();
            v250[2] = v134;
            v250[3] = v133;
            v250[4] = v135;
            v250[5] = v85;
            int v251 = REMeshAssetModelPartBufferAttributeIsSlow();
            uint64_t v252 = 512;
            if (v251) {
              uint64_t v252 = 0x40000;
            }
            v250[6] = v252;
            RERetain();
            swift_retain();
            uint64_t v253 = REMeshAssetGetModelPartBufferAttributeCount();
            swift_beginAccess();
            *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
            *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
            uint64_t v254 = swift_allocObject();
            unint64_t v516 = v254;
            uint64_t v255 = one-time initialization token for triangleIndices;
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            if (v255 != -1) {
              swift_once();
            }
            if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
            {
              char v256 = 2;
            }
            else if (_stringCompareWithSmolCheck(_:_:expecting:)())
            {
              char v256 = 2;
            }
            else
            {
              char v256 = v91;
            }
            __int16 v357 = v473 == 8;
            *(void *)(v254 + 16) = v87;
            *(void *)(v254 + 24) = v88;
            *(unsigned char *)(v254 + 32) = v357;
            *(unsigned char *)(v254 + 33) = 0;
            *(void *)(v254 + 40) = v253;
            *(unsigned char *)(v254 + 48) = v256;
            *(_WORD *)(v254 + 49) = 9;
            *(void *)(v254 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
            *(void *)(v254 + 64) = v250;
            *(void *)(v254 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
            *(void *)(v254 + 80) = v250;
            *(void *)(v254 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
            *(void *)(v254 + 96) = v250;
            *(void *)(v254 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
            *(void *)(v254 + 112) = v250;
            *(_WORD *)(v254 + 120) = 9;
            *(void *)(v254 + 128) = v253;
            *(unsigned char *)(v254 + 136) = v91;
            outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
            uint64_t v70 = v484;
            char v358 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v486 = *(void *)(v70 + 16);
            *(void *)(v70 + 16) = 0x8000000000000000;
            uint64_t v359 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
            __n128 v360 = MEMORY[0x270FA5388](v359);
            v362 = (_OWORD *)((char *)&v462 - ((v361 + 15) & 0xFFFFFFFFFFFFFFF0));
            (*(void (**)(_OWORD *, __n128))(v363 + 16))(v362, v360);
            long long v364 = v362[5];
            v508[4] = v362[4];
            v508[5] = v364;
            v509[0] = v362[6];
            *(_OWORD *)((char *)v509 + 9) = *(_OWORD *)((char *)v362 + 105);
            long long v365 = v362[1];
            v508[0] = *v362;
            v508[1] = v365;
            long long v366 = v362[3];
            v508[2] = v362[2];
            v508[3] = v366;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v508, v87, (uint64_t)v88, v357, v358, &v486);
          }
          break;
        case 10:
          swift_bridgeObjectRetain_n();
          v228 = (void *)v484;
          swift_retain();
          v538._countAndFlagsBits = v87;
          v538._object = v88;
          char v229 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v538);
          uint64_t v230 = v228[10];
          uint64_t v231 = v228[11];
          uint64_t v232 = v228[12];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<SIMD4<Float>>);
          v233 = (void *)swift_allocObject();
          v233[2] = v230;
          v233[3] = v231;
          v233[4] = v232;
          v233[5] = v85;
          int v234 = REMeshAssetModelPartBufferAttributeIsSlow();
          uint64_t v235 = 512;
          if (v234) {
            uint64_t v235 = 0x40000;
          }
          v233[6] = v235;
          RERetain();
          swift_retain();
          uint64_t v236 = REMeshAssetGetModelPartBufferAttributeCount();
          swift_beginAccess();
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD4<Float>>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v237 = swift_allocObject();
          unint64_t v516 = v237;
          uint64_t v238 = one-time initialization token for triangleIndices;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          if (v238 != -1) {
            swift_once();
          }
          if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
          {
            char v239 = 2;
          }
          else if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            char v239 = 2;
          }
          else
          {
            char v239 = v91;
          }
          __int16 v327 = v229 == 8;
          *(void *)(v237 + 16) = v87;
          *(void *)(v237 + 24) = v88;
          *(unsigned char *)(v237 + 32) = v327;
          *(unsigned char *)(v237 + 33) = 0;
          *(void *)(v237 + 40) = v236;
          *(unsigned char *)(v237 + 48) = v239;
          *(_WORD *)(v237 + 49) = 10;
          *(void *)(v237 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v237 + 64) = v233;
          *(void *)(v237 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
          *(void *)(v237 + 80) = v233;
          *(void *)(v237 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v237 + 96) = v233;
          *(void *)(v237 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v237 + 112) = v233;
          *(_WORD *)(v237 + 120) = 10;
          *(void *)(v237 + 128) = v236;
          *(unsigned char *)(v237 + 136) = v91;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          uint64_t v70 = v484;
          char v328 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = 0x8000000000000000;
          uint64_t v329 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          __n128 v330 = MEMORY[0x270FA5388](v329);
          v332 = (_OWORD *)((char *)&v462 - ((v331 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v333 + 16))(v332, v330);
          long long v334 = v332[5];
          v510[4] = v332[4];
          v510[5] = v334;
          v511[0] = v332[6];
          *(_OWORD *)((char *)v511 + 9) = *(_OWORD *)((char *)v332 + 105);
          long long v335 = v332[1];
          v510[0] = *v332;
          v510[1] = v335;
          long long v336 = v332[3];
          v510[2] = v332[2];
          v510[3] = v336;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v510, v87, (uint64_t)v88, v327, v328, &v486);
          break;
        case 11:
          swift_bridgeObjectRetain_n();
          uint64_t v109 = (void *)v484;
          swift_retain();
          v529._countAndFlagsBits = v87;
          v529._object = v88;
          char v110 = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v529);
          uint64_t v111 = v109[10];
          uint64_t v112 = v109[11];
          uint64_t v113 = v109[12];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<MeshJointInfluence>);
          uint64_t v114 = (void *)swift_allocObject();
          v114[2] = v111;
          v114[3] = v112;
          v114[4] = v113;
          v114[5] = v85;
          int v115 = REMeshAssetModelPartBufferAttributeIsSlow();
          uint64_t v116 = 512;
          if (v115) {
            uint64_t v116 = 0x40000;
          }
          v114[6] = v116;
          RERetain();
          swift_retain();
          uint64_t v117 = REMeshAssetGetModelPartBufferAttributeCount();
          swift_beginAccess();
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<MeshJointInfluence>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v118 = swift_allocObject();
          unint64_t v516 = v118;
          uint64_t v119 = one-time initialization token for triangleIndices;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          if (v119 != -1) {
            swift_once();
          }
          if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
          {
            char v68 = 2;
          }
          else if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            char v68 = 2;
          }
          else
          {
            char v68 = v91;
          }
          __int16 v69 = v110 == 8;
          *(void *)(v118 + 16) = v87;
          *(void *)(v118 + 24) = v88;
          *(unsigned char *)(v118 + 32) = v69;
          *(unsigned char *)(v118 + 33) = 0;
          *(void *)(v118 + 40) = v117;
          *(unsigned char *)(v118 + 48) = v68;
          *(_WORD *)(v118 + 49) = 11;
          *(void *)(v118 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v118 + 64) = v114;
          *(void *)(v118 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
          *(void *)(v118 + 80) = v114;
          *(void *)(v118 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v118 + 96) = v114;
          *(void *)(v118 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v118 + 112) = v114;
          *(_WORD *)(v118 + 120) = 11;
          *(void *)(v118 + 128) = v117;
          *(unsigned char *)(v118 + 136) = v91;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          uint64_t v70 = v484;
          char v71 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = 0x8000000000000000;
          uint64_t v72 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          __n128 v73 = MEMORY[0x270FA5388](v72);
          uint64_t v75 = (_OWORD *)((char *)&v462 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v76 + 16))(v75, v73);
          long long v77 = v75[5];
          v512[4] = v75[4];
          v512[5] = v77;
          v513[0] = v75[6];
          *(_OWORD *)((char *)v513 + 9) = *(_OWORD *)((char *)v75 + 105);
          long long v78 = v75[1];
          v512[0] = *v75;
          v512[1] = v78;
          long long v79 = v75[3];
          v512[2] = v75[2];
          v512[3] = v79;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v512, v87, (uint64_t)v88, v69, v71, &v486);
          break;
        default:
          swift_bridgeObjectRetain_n();
          uint64_t v96 = (void *)v484;
          swift_retain();
          v97._countAndFlagsBits = v87;
          v97._object = v88;
          unint64_t v98 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MeshBuffers.Identifier.BufferName.init(rawValue:), v97);
          swift_bridgeObjectRelease();
          uint64_t v99 = v96[10];
          uint64_t v100 = v96[11];
          uint64_t v101 = v96[12];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshPartBuffer<UInt8>);
          long long v102 = (void *)swift_allocObject();
          v102[2] = v99;
          v102[3] = v100;
          v102[4] = v101;
          v102[5] = v85;
          int v103 = REMeshAssetModelPartBufferAttributeIsSlow();
          uint64_t v104 = 512;
          if (v103) {
            uint64_t v104 = 0x40000;
          }
          v102[6] = v104;
          RERetain();
          swift_retain();
          uint64_t v105 = REMeshAssetGetModelPartBufferAttributeCount();
          swift_beginAccess();
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<UInt8>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v106 = swift_allocObject();
          unint64_t v516 = v106;
          uint64_t v107 = one-time initialization token for triangleIndices;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          if (v107 != -1) {
            swift_once();
          }
          if (v87 == static MeshBuffers.Identifier.triangleIndices && v88 == (void *)unk_2681C1CD0)
          {
            char v108 = 2;
          }
          else if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            char v108 = 2;
          }
          else
          {
            char v108 = v91;
          }
          __int16 v287 = v98 > 7;
          *(void *)(v106 + 16) = v87;
          *(void *)(v106 + 24) = v88;
          *(unsigned char *)(v106 + 32) = v287;
          *(unsigned char *)(v106 + 33) = 0;
          *(void *)(v106 + 40) = v105;
          *(unsigned char *)(v106 + 48) = v108;
          *(_WORD *)(v106 + 49) = 0;
          *(void *)(v106 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v106 + 64) = v102;
          *(void *)(v106 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
          *(void *)(v106 + 80) = v102;
          *(void *)(v106 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v106 + 96) = v102;
          *(void *)(v106 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v106 + 112) = v102;
          *(_WORD *)(v106 + 120) = 0;
          *(void *)(v106 + 128) = v105;
          *(unsigned char *)(v106 + 136) = v91;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          uint64_t v70 = v484;
          char v288 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *(void *)(v70 + 16);
          *(void *)(v70 + 16) = 0x8000000000000000;
          uint64_t v289 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          __n128 v290 = MEMORY[0x270FA5388](v289);
          v292 = (_OWORD *)((char *)&v462 - ((v291 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v293 + 16))(v292, v290);
          long long v294 = v292[5];
          v488[4] = v292[4];
          v488[5] = v294;
          v489[0] = v292[6];
          *(_OWORD *)((char *)v489 + 9) = *(_OWORD *)((char *)v292 + 105);
          long long v295 = v292[1];
          v488[0] = *v292;
          v488[1] = v295;
          long long v296 = v292[3];
          v488[2] = v292[2];
          v488[3] = v296;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v488, v87, (uint64_t)v88, v287, v288, &v486);
          break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v525);
      *(void *)(v70 + 16) = v486;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
      uint64_t v67 = v483;
      unint64_t v66 = v482;
    }
LABEL_201:
    swift_release();
    CFDataRef v367 = (const __CFData *)REMeshAssetCopyModelPartSkinInfluences();
    if (v367)
    {
      CFDataRef v368 = v367;
      CFIndex v369 = CFDataGetLength(v367) / 8;
      CFDataRef v370 = v368;
      unint64_t v371 = v369;
      unint64_t v372 = v369;
      uint64_t v373 = v474;
      uint64_t v374 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v371, v370, v372);
      uint64_t v474 = v373;
      CFDataRef v475 = v370;

      specialized MeshBuffer.init<A>(_:)(v374, (uint64_t)&v516);
      long long v482 = v518;
      long long v483 = v517;
      long long v476 = v519;
      unint64_t v472 = v516;
      uint64_t v375 = v520;
      char v376 = v521;
      char v377 = v522;
      uint64_t v378 = v523;
      LODWORD(v473) = v524;
      swift_beginAccess();
      uint64_t v526 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<MeshJointInfluence>);
      v527 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
      uint64_t v379 = swift_allocObject();
      v525[0] = v379;
      uint64_t v380 = one-time initialization token for triangleIndices;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      if (v380 != -1) {
        swift_once();
      }
      if (static MeshBuffers.Identifier.triangleIndices == 0xD00000000000001FLL && unk_2681C1CD0 == v462)
      {
        char v381 = 2;
        v382 = v464;
        char v383 = v473;
      }
      else
      {
        v384 = v464;
        char v385 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v382 = v384;
        char v383 = v473;
        if (v385) {
          char v381 = 2;
        }
        else {
          char v381 = v473;
        }
      }
      *(void *)(v379 + 16) = 0xD00000000000001FLL;
      *(void *)(v379 + 24) = (unint64_t)v382 | 0x8000000000000000;
      *(_WORD *)(v379 + 32) = 0;
      *(void *)(v379 + 40) = v378;
      *(unsigned char *)(v379 + 48) = v381;
      *(unsigned char *)(v379 + 49) = v376;
      *(unsigned char *)(v379 + 50) = v377;
      *(void *)(v379 + 56) = v472;
      long long v386 = v482;
      *(_OWORD *)(v379 + 64) = v483;
      *(_OWORD *)(v379 + 80) = v386;
      *(_OWORD *)(v379 + 96) = v476;
      *(void *)(v379 + 112) = v375;
      *(unsigned char *)(v379 + 120) = v376;
      *(unsigned char *)(v379 + 121) = v377;
      *(void *)(v379 + 128) = v378;
      *(unsigned char *)(v379 + 136) = v383;
      specialized Dictionary.subscript.setter((uint64_t)v525, 0xD00000000000001FLL, (unint64_t)v382 | 0x8000000000000000, 0);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_endAccess();
      int ModelPartSkinUniformInfluenceCount = REMeshAssetGetModelPartSkinUniformInfluenceCount();

      if (ModelPartSkinUniformInfluenceCount)
      {
        uint64_t v388 = v484;
        *(_DWORD *)(v484 + 56) = ModelPartSkinUniformInfluenceCount;
        *(unsigned char *)(v388 + 60) = 0;
      }
    }
    CFDataRef v389 = (const __CFData *)REMeshAssetCopyModelPartSkinInfluenceEndIndices();
    if (v389)
    {
      CFDataRef v390 = v389;
      CFIndex v391 = CFDataGetLength(v389) / 4;
      CFDataRef v392 = v390;
      unint64_t v393 = v391;
      unint64_t v394 = v391;
      uint64_t v395 = v474;
      uint64_t v396 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v393, v392, v394);
      uint64_t v474 = v395;
      CFDataRef v475 = v392;

      specialized MeshBuffer.init<A>(_:)(v396, (uint64_t)&v516);
      long long v482 = v518;
      long long v483 = v517;
      long long v476 = v519;
      unint64_t v472 = v516;
      uint64_t v397 = v520;
      char v398 = v521;
      char v399 = v522;
      uint64_t v400 = v523;
      LODWORD(v473) = v524;
      swift_beginAccess();
      uint64_t v526 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int32>);
      v527 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
      uint64_t v401 = swift_allocObject();
      v525[0] = v401;
      uint64_t v402 = one-time initialization token for triangleIndices;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      if (v402 != -1) {
        swift_once();
      }
      v403 = v465;
      if (static MeshBuffers.Identifier.triangleIndices == 0xD000000000000023 && unk_2681C1CD0 == v463)
      {
        char v404 = 2;
        char v405 = v473;
      }
      else
      {
        char v406 = _stringCompareWithSmolCheck(_:_:expecting:)();
        char v405 = v473;
        if (v406) {
          char v404 = 2;
        }
        else {
          char v404 = v473;
        }
      }
      *(void *)(v401 + 16) = 0xD000000000000023;
      *(void *)(v401 + 24) = (unint64_t)v403 | 0x8000000000000000;
      *(_WORD *)(v401 + 32) = 0;
      *(void *)(v401 + 40) = v400;
      *(unsigned char *)(v401 + 48) = v404;
      *(unsigned char *)(v401 + 49) = v398;
      *(unsigned char *)(v401 + 50) = v399;
      *(void *)(v401 + 56) = v472;
      long long v407 = v482;
      *(_OWORD *)(v401 + 64) = v483;
      *(_OWORD *)(v401 + 80) = v407;
      *(_OWORD *)(v401 + 96) = v476;
      *(void *)(v401 + 112) = v397;
      *(unsigned char *)(v401 + 120) = v398;
      *(unsigned char *)(v401 + 121) = v399;
      *(void *)(v401 + 128) = v400;
      *(unsigned char *)(v401 + 136) = v405;
      specialized Dictionary.subscript.setter((uint64_t)v525, 0xD000000000000023, (unint64_t)v403 | 0x8000000000000000, 0);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_endAccess();
    }
    int v485 = -1;
    if (REMeshAssetGetModelPartSkeletonIndex())
    {
      REMeshAssetGetSkeletonName();
      uint64_t v408 = String.init(cString:)();
      uint64_t v410 = v409;
      swift_beginAccess();
      uint64_t v411 = v484;
      *(void *)(v484 + 40) = v408;
      *(void *)(v411 + 48) = v410;
      swift_bridgeObjectRelease();
    }
    uint64_t BlendShapeDefinitionCountForPart = REMeshAssetGetBlendShapeDefinitionCountForPart();
    if (BlendShapeDefinitionCountForPart < 0) {
      goto LABEL_252;
    }
    uint64_t v413 = BlendShapeDefinitionCountForPart;
    if (BlendShapeDefinitionCountForPart)
    {
      uint64_t v414 = 0;
      uint64_t v470 = BlendShapeDefinitionCountForPart;
      do
      {
        REMeshAssetGetBlendShapeDefinitionNameForPart();
        *(void *)&long long v483 = String.init(cString:)();
        v416 = v415;
        CFDataRef v417 = (const __CFData *)(id)REMeshAssetGetBlendShapeOffsetsForPart();
        if (v417)
        {
          CFDataRef v418 = v417;
          CFIndex v419 = CFDataGetLength(v417) / 16;
          CFDataRef v420 = v418;
          unint64_t v421 = v419;
          unint64_t v422 = v419;
          uint64_t v423 = v474;
          uint64_t v424 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(v421, v420, v422);
          uint64_t v474 = v423;
          *(void *)&long long v482 = v420;

          *(void *)&long long v476 = *(void *)(v424 + 16);
          uint64_t v425 = swift_allocObject();
          *(void *)(v425 + 16) = v424;
          uint64_t v426 = swift_allocObject();
          *(void *)(v426 + 16) = v424;
          uint64_t v427 = swift_allocObject();
          *(void *)(v427 + 16) = v424;
          uint64_t v428 = swift_allocObject();
          *(void *)(v428 + 16) = v424;
          swift_beginAccess();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          v539._countAndFlagsBits = v483;
          v539._object = v416;
          LODWORD(v473) = specialized MeshBuffers.Identifier.BufferName.init(rawValue:)(v539);
          *(void *)&long long v518 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
          *((void *)&v518 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
          uint64_t v429 = swift_allocObject();
          unint64_t v516 = v429;
          uint64_t v430 = one-time initialization token for triangleIndices;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          CFDataRef v431 = (const __CFData *)v427;
          swift_retain();
          uint64_t v432 = v428;
          swift_retain();
          if (v430 != -1) {
            swift_once();
          }
          if ((void)v483 == static MeshBuffers.Identifier.triangleIndices && v416 == (void *)unk_2681C1CD0
            || (char v433 = _stringCompareWithSmolCheck(_:_:expecting:)(), v434 = 0, (v433 & 1) != 0))
          {
            char v434 = 2;
          }
          __int16 v435 = v473 == 8;
          uint64_t v436 = v483;
          *(void *)(v429 + 16) = v483;
          *(void *)(v429 + 24) = v416;
          *(unsigned char *)(v429 + 32) = 0;
          *(unsigned char *)(v429 + 33) = v435;
          uint64_t v437 = v476;
          *(void *)(v429 + 40) = v476;
          *(unsigned char *)(v429 + 48) = v434;
          *(_WORD *)(v429 + 49) = 9;
          *(void *)(v429 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
          *(void *)(v429 + 64) = v425;
          *(void *)(v429 + 72) = partial apply for specialized closure #2 in MeshBuffer.init<A>(_:);
          *(void *)(v429 + 80) = v426;
          *(void *)(v429 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
          *(void *)(v429 + 96) = v431;
          CFDataRef v475 = v431;
          *(void *)(v429 + 104) = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
          *(void *)(v429 + 112) = v432;
          *(_WORD *)(v429 + 120) = 9;
          *(void *)(v429 + 128) = v437;
          *(unsigned char *)(v429 + 136) = 0;
          outlined init with take of BindableDataInternal((long long *)&v516, (uint64_t)v525);
          *(void *)&long long v476 = v425;
          v438 = v481;
          LODWORD(v472) = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v486 = *v438;
          uint64_t *v438 = 0x8000000000000000;
          uint64_t v439 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v525, v526);
          uint64_t v473 = v426;
          __n128 v440 = MEMORY[0x270FA5388](v439);
          v442 = (_OWORD *)((char *)&v462 - ((v441 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(_OWORD *, __n128))(v443 + 16))(v442, v440);
          long long v444 = v442[5];
          v514[4] = v442[4];
          v514[5] = v444;
          v515[0] = v442[6];
          *(_OWORD *)((char *)v515 + 9) = *(_OWORD *)((char *)v442 + 105);
          long long v445 = v442[1];
          v514[0] = *v442;
          v514[1] = v445;
          long long v446 = v442[3];
          v514[2] = v442[2];
          v514[3] = v446;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v514, v436, (uint64_t)v416, v435 << 8, v472, &v486);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v525);
          uint64_t *v438 = v486;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();
          swift_bridgeObjectRelease();

          uint64_t v413 = v470;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        ++v414;
      }
      while (v413 != v414);
    }
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v447 = *(void *)(v484 + 16);
    uint64_t v448 = *(void *)(v484 + 24);
    uint64_t v449 = *(void *)(v484 + 32);
    uint64_t v450 = *(void *)(v484 + 40);
    uint64_t v451 = *(void *)(v484 + 48);
    int v452 = *(_DWORD *)(v484 + 56);
    char v453 = *(unsigned char *)(v484 + 60);
    uint64_t v454 = *(void *)(v484 + 64);
    int v455 = *(unsigned __int8 *)(v484 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v456 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v483 = v454;
    LODWORD(v482) = v455;
    if ((v456 & 1) == 0) {
      v468 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v468[2] + 1, 1, v468);
    }
    unint64_t v458 = v468[2];
    unint64_t v457 = v468[3];
    if (v458 >= v457 >> 1) {
      v468 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v457 > 1), v458 + 1, 1, v468);
    }
    v459 = v468;
    v468[2] = v458 + 1;
    v460 = &v459[8 * v458];
    v460[4] = v447;
    v460[5] = v448;
    v460[6] = v449;
    v460[7] = v450;
    v460[8] = v451;
    *((_DWORD *)v460 + 18) = v452;
    *((unsigned char *)v460 + 76) = v453;
    v460[10] = v483;
    *((unsigned char *)v460 + 88) = v482;
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocClassInstance();
    uint64_t v3 = v466;
    uint64_t v4 = v467;
  }
  while (v467 != v466);
  swift_bridgeObjectRelease();
  return v468;
}

uint64_t partial apply for specialized closure #1 in MeshBuffer.init<A>(_:)()
{
  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, (uint64_t)&type metadata for MeshJointInfluence, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, (uint64_t)&demangling cache variable for type metadata for SIMD4<Float>, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, (uint64_t)&demangling cache variable for type metadata for SIMD3<Float>, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, (uint64_t)&type metadata for FloatVector3Packed, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, (uint64_t)&demangling cache variable for type metadata for SIMD2<Float>, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x263F8D538], (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x263F8D5C8], (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x263F8E548], (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x263F8E4F0], (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x263F8E498], (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x263F8E8F8], (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x263F8E888], (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  uint64_t v1;

  return specialized closure #1 in MeshBuffer.init<A>(_:)(&v1, MEMORY[0x263F8E778], (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t))specialized Array.init(_unsafeUninitializedCapacity:initializingWith:));
}

{
  return specialized closure #1 in MeshBuffer.init<A>(_:)();
}

{
  return swift_bridgeObjectRetain();
}

uint64_t sub_22808D59C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for specialized closure #2 in MeshBuffer.init<A>(_:)()
{
  return protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction();
}

{
  uint64_t v0;
  uint64_t v1;

  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t objectdestroy_307Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 137, 7);
}

uint64_t outlined init with copy of ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversionBuffer<SIMD3<Float>, MeshBuffer<FloatVector3Packed>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of MeshBuffer<SIMD3<Float>>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of MeshBuffer<SIMD3<Float>>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t objectdestroy_265Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 120, 7);
}

uint64_t objectdestroy_584Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t type metadata accessor for IndexingBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for IndexingBuffer.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for ConversionBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

void *initializeBufferWithCopyOfBuffer for ConversionBuffer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

void *assignWithCopy for ConversionBuffer(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for ConversionBuffer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t type metadata accessor for ConversionBuffer()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for ConversionBuffer.ConvertingIterator()
{
  swift_release();

  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for ConversionBuffer.ConvertingIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ConversionBuffer.ConvertingIterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ConversionBuffer.ConvertingIterator(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for ConversionBuffer.ConvertingIterator()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for FloatVector3Packed(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FloatVector3Packed(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FloatVector3Packed()
{
  return &type metadata for FloatVector3Packed;
}

uint64_t static RealityFusionSession.sharedSession.getter()
{
  return swift_retain();
}

uint64_t static RealityFusionSession.sharedSession.setter(void *a1)
{
  static RealityFusionSession.sharedSession = a1;
  return swift_release();
}

uint64_t (*static RealityFusionSession.sharedSession.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

void key path setter for RealityFusionSession.serviceManager : RealityFusionSession(void **a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;
  id v5 = v2;
}

void *RealityFusionSession.serviceManager.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void RealityFusionSession.serviceManager.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t RealityFusionSession.sharedCount.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 24);
}

uint64_t RealityFusionSession.sharedCount.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  if (!a1)
  {
    swift_beginAccess();
    uint64_t v4 = static RealityFusionSession.sharedSession;
    if (static RealityFusionSession.sharedSession)
    {
      swift_beginAccess();
      if (v4[2])
      {
        id v5 = (id)RFServiceManagerGetAnchorManagementService();
        if (v5)
        {
          uint64_t v6 = v5;
          specialized static __ServiceLocator.shared.getter();
          swift_beginAccess();
          RFAnchorManagementServiceCleanupWithServiceLocator();
        }
      }
    }
    RFServiceManagerCleanUp();
    static RealityFusionSession.sharedSession = 0;
    return swift_release();
  }
  return result;
}

void (*RealityFusionSession.sharedCount.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  swift_beginAccess();
  return RealityFusionSession.sharedCount.modify;
}

void RealityFusionSession.sharedCount.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0 && !*(void *)(v3[9] + 24))
  {
    swift_beginAccess();
    uint64_t v4 = static RealityFusionSession.sharedSession;
    if (static RealityFusionSession.sharedSession)
    {
      swift_beginAccess();
      if (v4[2])
      {
        id v5 = (id)RFServiceManagerGetAnchorManagementService();
        if (v5)
        {
          uint64_t v6 = v5;
          specialized static __ServiceLocator.shared.getter();
          swift_beginAccess();
          RFAnchorManagementServiceCleanupWithServiceLocator();
        }
      }
    }
    RFServiceManagerCleanUp();
    static RealityFusionSession.sharedSession = 0;
    swift_release();
  }

  free(v3);
}

uint64_t RealityFusionSession.__allocating_init(_:)()
{
  swift_allocObject();
  uint64_t v0 = specialized RealityFusionSession.init(_:)();
  swift_release();
  return v0;
}

uint64_t RealityFusionSession.init(_:)()
{
  uint64_t v0 = specialized RealityFusionSession.init(_:)();
  swift_release();
  return v0;
}

uint64_t RealityFusionSession.__allocating_init(_:arSession:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RealityFusionSession();
  swift_allocObject();
  uint64_t v3 = specialized RealityFusionSession.init(_:)();
  swift_retain();
  RealityFusionSession.configure(with:)(a2);
  swift_release();
  swift_release();
  outlined destroy of __AnyARKitObject(a2);
  return v3;
}

uint64_t static RealityFusionSession.destroyRealityFusionSession()()
{
  uint64_t result = swift_beginAccess();
  uint64_t v1 = static RealityFusionSession.sharedSession;
  if (static RealityFusionSession.sharedSession)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v2 = v1[3];
    BOOL v3 = __OFSUB__(v2, 1);
    uint64_t v4 = v2 - 1;
    if (v3)
    {
      __break(1u);
    }
    else
    {
      v1[3] = v4;
      if (!v4)
      {
        id v5 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession && (swift_beginAccess(), v5[2]))
        {
          swift_retain();
          id v6 = (id)RFServiceManagerGetAnchorManagementService();
          if (v6)
          {
            uint64_t v7 = v6;
            specialized static __ServiceLocator.shared.getter();
            swift_beginAccess();
            RFAnchorManagementServiceCleanupWithServiceLocator();
          }
        }
        else
        {
          swift_retain();
        }
        RFServiceManagerCleanUp();
        static RealityFusionSession.sharedSession = 0;
        swift_release();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t RealityFusionSession.deinit()
{
  return v0;
}

uint64_t RealityFusionSession.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void RealityFusionSession.configure(with:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)&aBlock);
  type metadata accessor for ARSession();
  swift_dynamicCast();
  uint64_t v2 = v26;
  BOOL v3 = (id *)(v1 + 16);
  swift_beginAccess();
  uint64_t v4 = *(void **)(v1 + 16);
  if (!v4) {
    goto LABEL_11;
  }
  id v5 = v4;
  id v6 = (id)RFServiceManagerGetARKitDataProvider();
  if (!v6) {
    goto LABEL_5;
  }
  uint64_t v7 = v6;
  id v8 = (id)RFARKitDataProviderGetARSession();
  char v9 = static NSObject.== infix(_:_:)();

  if (v9)
  {

LABEL_5:
    id v10 = (id)RFARKitDataProviderCreate();
    RFServiceManagerSetARKitDataProvider();
    goto LABEL_7;
  }
  id v10 = v2;
  RFARKitDataProviderSetARSession();

LABEL_7:
  if (*v3)
  {
    id v11 = *v3;
    id v12 = (id)RFServiceManagerGetEnvironmentProbePlacementService();
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v2;
      long long v24 = partial apply for closure #1 in RealityFusionSession.configure(with:);
      uint64_t v25 = v14;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v21 = 1107296256;
      uint64_t v22 = thunk for @escaping @callee_guaranteed (@unowned RFEnvProbeData) -> ();
      unint64_t v23 = &block_descriptor_18;
      uint64_t v15 = _Block_copy(&aBlock);
      id v16 = v2;
      swift_release();
      RFEnvironmentProbePlacementServiceSetOnProbeDataCreatedCallback();
      _Block_release(v15);
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v16;
      long long v24 = partial apply for closure #2 in RealityFusionSession.configure(with:);
      uint64_t v25 = v17;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v21 = 1107296256;
      uint64_t v22 = thunk for @escaping @callee_guaranteed (@unowned RFEnvProbeData) -> ();
      unint64_t v23 = &block_descriptor_6_0;
      char v18 = _Block_copy(&aBlock);
      id v19 = v16;
      swift_release();
      RFEnvironmentProbePlacementServiceSetOnProbeDataRemovedCallback();

      _Block_release(v18);
      uint64_t v2 = v13;
    }
  }
LABEL_11:
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned RFEnvProbeData) -> ()(uint64_t a1, uint64_t *a2)
{
  long long v2 = *((_OWORD *)a2 + 1);
  long long v3 = *((_OWORD *)a2 + 2);
  long long v4 = *((_OWORD *)a2 + 3);
  long long v5 = *((_OWORD *)a2 + 4);
  long long v6 = *((_OWORD *)a2 + 5);
  uint64_t v9 = *a2;
  long long v10 = v2;
  long long v11 = v3;
  long long v12 = v4;
  long long v13 = v5;
  long long v14 = v6;
  uint64_t v7 = *(void (**)(uint64_t *))(a1 + 32);
  swift_retain();
  v7(&v9);

  return swift_release();
}

uint64_t closure #1 in RealityFusionSession.configure(with:)(_OWORD *a1, void *a2, SEL *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  long long v12 = (char *)&v20 - v11;
  UUID.init(uuid:)();
  UUID.uuid.getter();
  UUID.init(uuid:)();
  long long v13 = a1[5];
  long long v23 = a1[4];
  long long v24 = v13;
  long long v14 = a1[3];
  long long v21 = a1[2];
  long long v22 = v14;
  long long v20 = a1[1];
  id v15 = objc_allocWithZone(MEMORY[0x263EF8F30]);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v17 = objc_msgSend(v15, sel_initWithIdentifier_transform_extent_, isa, *(double *)&v20, *(double *)&v21, *(double *)&v22, *(double *)&v23, *(double *)&v24);

  char v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v9, v6);
  objc_msgSend(a2, *a3, v17);

  return ((uint64_t (*)(char *, uint64_t))v18)(v12, v6);
}

uint64_t specialized RealityFusionSession.init(_:)()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  uint64_t v1 = RFServiceManagerCreate();
  swift_beginAccess();
  long long v2 = *(void **)(v0 + 16);
  *(void *)(v0 + 16) = v1;

  long long v3 = *(void **)(v0 + 16);
  if (v3)
  {
    id v4 = v3;
    long long v5 = (void *)RFMeshReconstructionServiceCreate();
    RFServiceManagerSetMeshReconstructionService();
    uint64_t v6 = (void *)RFAnchorManagementServiceCreate();
    RFServiceManagerSetAnchorManagementService();
    uint64_t v7 = (void *)RFLoggingServiceCreate();
    RFServiceManagerSetLoggingService();
    uint64_t v8 = (void *)RFEnvironmentProbePlacementServiceCreate();
    RFServiceManagerSetEnvironmentProbePlacementService();
    uint64_t v9 = (void *)RFAtmospherePlacementServiceCreate();
    RFServiceManagerSetAtmospherePlacementService();
    uint64_t v10 = (void *)RFAnchorDataProviderCreate();
    RFServiceManagerSetAnchorDataProvider();
  }
  swift_beginAccess();
  *(void *)(v0 + 24) = 1;
  swift_beginAccess();
  static RealityFusionSession.sharedSession = (_UNKNOWN *)v0;
  swift_retain();
  swift_release();
  return v0;
}

uint64_t specialized static RealityFusionSession.createRealityFusionSession(arSession:)(uint64_t a1)
{
  swift_beginAccess();
  long long v2 = static RealityFusionSession.sharedSession;
  if (!static RealityFusionSession.sharedSession)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    specialized static __ServiceLocator.shared.getter();
    if (v7)
    {
      uint64_t result = outlined init with copy of __AnyARKitObject?(a1, (uint64_t)v11);
      if (!v12) {
        goto LABEL_17;
      }
      type metadata accessor for RealityFusionSession();
      swift_allocObject();
      swift_retain();
      long long v2 = (void *)specialized RealityFusionSession.init(_:)();
      swift_retain();
      RealityFusionSession.configure(with:)((uint64_t)v11);
      swift_release();
      swift_release();
      outlined destroy of __AnyARKitObject((uint64_t)v11);
    }
    else
    {
      type metadata accessor for RealityFusionSession();
      swift_allocObject();
      return specialized RealityFusionSession.init(_:)();
    }
    return (uint64_t)v2;
  }
  uint64_t result = swift_beginAccess();
  uint64_t v4 = v2[3];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (!v5)
  {
    v2[3] = v6;
    if (v6)
    {
      swift_retain();
    }
    else
    {
      uint64_t v8 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession && (swift_beginAccess(), v8[2]))
      {
        swift_retain();
        id v9 = (id)RFServiceManagerGetAnchorManagementService();
        if (v9)
        {
          uint64_t v10 = v9;
          specialized static __ServiceLocator.shared.getter();
          swift_beginAccess();
          RFAnchorManagementServiceCleanupWithServiceLocator();
        }
      }
      else
      {
        swift_retain();
      }
      RFServiceManagerCleanUp();
      static RealityFusionSession.sharedSession = 0;
      swift_release();
    }
    return (uint64_t)v2;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RealityFusionSession()
{
  return self;
}

unint64_t type metadata accessor for ARSession()
{
  unint64_t result = lazy cache variable for type metadata for ARSession;
  if (!lazy cache variable for type metadata for ARSession)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ARSession);
  }
  return result;
}

uint64_t sub_22808F108()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in RealityFusionSession.configure(with:)(_OWORD *a1)
{
  return closure #1 in RealityFusionSession.configure(with:)(a1, *(void **)(v1 + 16), (SEL *)&selRef_addAnchor_);
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in RealityFusionSession.configure(with:)(_OWORD *a1)
{
  return closure #1 in RealityFusionSession.configure(with:)(a1, *(void **)(v1 + 16), (SEL *)&selRef_removeAnchor_);
}

id sub_22808F1A0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 16);
  *a2 = v4;

  return v4;
}

uint64_t sub_22808F1FC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 24);
  return result;
}

uint64_t sub_22808F244(uint64_t *a1)
{
  return RealityFusionSession.sharedCount.setter(*a1);
}

uint64_t method lookup function for RealityFusionSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RealityFusionSession);
}

uint64_t dispatch thunk of RealityFusionSession.serviceManager.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of RealityFusionSession.serviceManager.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of RealityFusionSession.serviceManager.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of RealityFusionSession.sharedCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of RealityFusionSession.sharedCount.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of RealityFusionSession.sharedCount.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of RealityFusionSession.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t outlined init with copy of __AnyARKitObject?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for __AnyARKitObject?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Array<A>.hasLookAtInteractions.getter(uint64_t a1)
{
  v138[1] = 0;
  uint64_t v2 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v141 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v138 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v138 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v138 - v9;
  MEMORY[0x270FA5388](v11);
  long long v13 = (char *)v138 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v172 = (char *)v138 - v15;
  MEMORY[0x270FA5388](v16);
  char v18 = (char *)v138 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v164 = (char *)v138 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v165 = (uint64_t)v138 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v155 = (uint64_t)v138 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v138 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v150 = (uint64_t)v138 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v151 = (uint64_t)v138 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v145 = (uint64_t)v138 - v33;
  uint64_t v144 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v34 = *(void *)(v144 - 8);
  MEMORY[0x270FA5388](v144);
  uint64_t v147 = (uint64_t)v138 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v36 = *(void *)(a1 + 16);
  if (!v36) {
    goto LABEL_114;
  }
  uint64_t v179 = v2;
  uint64_t v158 = v27;
  char v168 = v18;
  uint64_t v191 = MEMORY[0x263F8EE78];
  int64_t v139 = v36;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
  uint64_t v37 = 0;
  uint64_t v143 = a1 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
  uint64_t v142 = *(void *)(v34 + 72);
  long long v185 = xmmword_22830EC60;
  uint64_t v174 = v13;
  uint64_t v175 = v10;
  Swift::String v38 = v13;
  uint64_t v39 = (uint64_t)v172;
  unint64_t v181 = v7;
LABEL_3:
  uint64_t v146 = v37;
  uint64_t v40 = v147;
  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v143 + v142 * v37, v147, type metadata accessor for __RKEntityInteractionSpecification);
  uint64_t v41 = v40 + *(int *)(v144 + 20);
  uint64_t v42 = v145;
  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v41, v145, type metadata accessor for __RKEntityActionSpecification);
  if (swift_getEnumCaseMultiPayload() != 6)
  {
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v42, type metadata accessor for __RKEntityActionSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    unint64_t v127 = (*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
    uint64_t v128 = swift_allocObject();
    *(_OWORD *)(v128 + 16) = v185;
    uint64_t v153 = v128;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v41, v128 + v127, type metadata accessor for __RKEntityActionSpecification);
    goto LABEL_109;
  }
  uint64_t v43 = *(void *)(v42 + 8);
  uint64_t v44 = (uint64_t)v164;
  uint64_t v148 = *(void *)(v43 + 16);
  if (!v148)
  {
    swift_bridgeObjectRelease();
    uint64_t v153 = MEMORY[0x263F8EE78];
    goto LABEL_109;
  }
  uint64_t v45 = *(unsigned __int8 *)(v141 + 80);
  uint64_t v46 = (v45 + 32) & ~v45;
  uint64_t v149 = v43 + v46;
  uint64_t v47 = *(void *)(v141 + 72);
  uint64_t v186 = v46;
  uint64_t v183 = v45 | 7;
  uint64_t v184 = v47 + v46;
  v138[0] = v43;
  swift_bridgeObjectRetain();
  uint64_t v48 = 0;
  uint64_t v153 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v152 = v48;
    uint64_t v49 = v151;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v149 + v47 * v48, v151, type metadata accessor for __RKEntityActionSpecification);
    uint64_t v50 = v150;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v49, v150, type metadata accessor for __RKEntityActionSpecification);
    if (swift_getEnumCaseMultiPayload() == 6) {
      break;
    }
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v50, type metadata accessor for __RKEntityActionSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v113 = swift_allocObject();
    *(_OWORD *)(v113 + 16) = v185;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v49, v113 + v186, type metadata accessor for __RKEntityActionSpecification);
    uint64_t v114 = v49;
    uint64_t v53 = v113;
LABEL_89:
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v114, type metadata accessor for __RKEntityActionSpecification);
    uint64_t v115 = *(void *)(v53 + 16);
    int64_t v116 = *(void *)(v153 + 16);
    int64_t v117 = v116 + v115;
    if (__OFADD__(v116, v115)) {
      goto LABEL_123;
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v119 = v153;
    if (!isUniquelyReferenced_nonNull_native || v117 > *(void *)(v153 + 24) >> 1)
    {
      if (v116 <= v117) {
        int64_t v120 = v116 + v115;
      }
      else {
        int64_t v120 = v116;
      }
      uint64_t v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v120, 1, v153);
    }
    uint64_t v39 = (uint64_t)v172;
    uint64_t v44 = (uint64_t)v164;
    uint64_t v121 = *(void *)(v53 + 16);
    uint64_t v153 = v119;
    if (v121)
    {
      uint64_t v122 = *(void *)(v119 + 16);
      if ((*(void *)(v119 + 24) >> 1) - v122 < v115) {
        goto LABEL_125;
      }
      unint64_t v123 = v119 + v186 + v122 * v47;
      if (v53 + v186 < v123 + v115 * v47 && v123 < v53 + v186 + v115 * v47) {
        goto LABEL_127;
      }
      swift_arrayInitWithCopy();
      if (v115)
      {
        uint64_t v125 = *(void *)(v153 + 16);
        BOOL v97 = __OFADD__(v125, v115);
        uint64_t v126 = v125 + v115;
        if (v97) {
          goto LABEL_126;
        }
        *(void *)(v153 + 16) = v126;
      }
    }
    else if (v115)
    {
      goto LABEL_124;
    }
    uint64_t v48 = v152 + 1;
    swift_bridgeObjectRelease();
    if (v48 == v148)
    {
      swift_bridgeObjectRelease_n();
LABEL_109:
      _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v147, type metadata accessor for __RKEntityInteractionSpecification);
      uint64_t v129 = v191;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v129 + 16) + 1, 1);
        uint64_t v129 = v191;
      }
      int64_t v130 = v139;
      uint64_t v131 = v146;
      unint64_t v133 = *(void *)(v129 + 16);
      unint64_t v132 = *(void *)(v129 + 24);
      if (v133 >= v132 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v132 > 1, v133 + 1, 1);
        uint64_t v131 = v146;
        int64_t v130 = v139;
        uint64_t v129 = v191;
      }
      uint64_t v37 = v131 + 1;
      *(void *)(v129 + 16) = v133 + 1;
      *(void *)(v129 + 8 * v133 + 32) = v153;
      if (v37 == v130)
      {
LABEL_114:
        uint64_t v134 = swift_bridgeObjectRetain();
        specialized Sequence.filter(_:)(v134);
        uint64_t v136 = *(void *)(v135 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v136 != 0;
      }
      goto LABEL_3;
    }
  }
  uint64_t v51 = *(void *)(v50 + 8);
  uint64_t v157 = *(void *)(v51 + 16);
  if (!v157)
  {
    swift_bridgeObjectRelease();
    uint64_t v53 = MEMORY[0x263F8EE78];
LABEL_88:
    uint64_t v114 = v151;
    goto LABEL_89;
  }
  uint64_t v156 = v51 + v186;
  uint64_t v140 = v51;
  swift_bridgeObjectRetain();
  uint64_t v52 = 0;
  uint64_t v53 = MEMORY[0x263F8EE78];
  while (1)
  {
    unint64_t v160 = v53;
    uint64_t v159 = v52;
    uint64_t v54 = (uint64_t)v158;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v156 + v52 * v47, (uint64_t)v158, type metadata accessor for __RKEntityActionSpecification);
    uint64_t v55 = v155;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v54, v155, type metadata accessor for __RKEntityActionSpecification);
    if (swift_getEnumCaseMultiPayload() != 6)
    {
      _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v55, type metadata accessor for __RKEntityActionSpecification);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      uint64_t v99 = swift_allocObject();
      *(_OWORD *)(v99 + 16) = v185;
      _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v54, v99 + v186, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v100 = v54;
      goto LABEL_68;
    }
    uint64_t v56 = *(void *)(v55 + 8);
    uint64_t v163 = *(void *)(v56 + 16);
    if (v163) {
      break;
    }
    swift_bridgeObjectRelease();
    uint64_t v99 = MEMORY[0x263F8EE78];
    uint64_t v100 = (uint64_t)v158;
LABEL_68:
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v100, type metadata accessor for __RKEntityActionSpecification);
    unint64_t v167 = v99;
    uint64_t v101 = *(void *)(v99 + 16);
    int64_t v102 = *(void *)(v160 + 16);
    int64_t v103 = v102 + v101;
    if (__OFADD__(v102, v101)) {
      goto LABEL_119;
    }
    unint64_t v104 = v160;
    int v105 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v106 = v104;
    if (!v105 || v103 > *(void *)(v104 + 24) >> 1)
    {
      if (v102 <= v103) {
        int64_t v107 = v102 + v101;
      }
      else {
        int64_t v107 = v102;
      }
      uint64_t v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v105, v107, 1, v104);
    }
    uint64_t v39 = (uint64_t)v172;
    uint64_t v44 = (uint64_t)v164;
    if (*(void *)(v167 + 16))
    {
      uint64_t v108 = *(void *)(v106 + 16);
      if ((*(void *)(v106 + 24) >> 1) - v108 < v101) {
        goto LABEL_121;
      }
      unint64_t v109 = v106 + v186 + v108 * v47;
      if (v167 + v186 < v109 + v101 * v47 && v109 < v167 + v186 + v101 * v47) {
        goto LABEL_127;
      }
      uint64_t v53 = v106;
      swift_arrayInitWithCopy();
      if (v101)
      {
        uint64_t v111 = *(void *)(v53 + 16);
        BOOL v97 = __OFADD__(v111, v101);
        uint64_t v112 = v111 + v101;
        if (v97) {
          goto LABEL_122;
        }
        *(void *)(v53 + 16) = v112;
      }
    }
    else
    {
      uint64_t v53 = v106;
      if (v101) {
        goto LABEL_120;
      }
    }
    uint64_t v52 = v159 + 1;
    swift_bridgeObjectRelease();
    if (v52 == v157)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_88;
    }
  }
  uint64_t v162 = v56 + v186;
  uint64_t v154 = v56;
  swift_bridgeObjectRetain();
  uint64_t v57 = 0;
  unint64_t v167 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v166 = v57;
    uint64_t v58 = v162 + v57 * v47;
    uint64_t v59 = v165;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v58, v165, type metadata accessor for __RKEntityActionSpecification);
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v59, v44, type metadata accessor for __RKEntityActionSpecification);
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      uint64_t v60 = *(void *)(v44 + 8);
      uint64_t v61 = MEMORY[0x263F8EE78];
      uint64_t v190 = MEMORY[0x263F8EE78];
      uint64_t v171 = *(void *)(v60 + 16);
      if (v171)
      {
        uint64_t v170 = v60 + v186;
        uint64_t v161 = v60;
        swift_bridgeObjectRetain();
        uint64_t v62 = 0;
        uint64_t v63 = (uint64_t)v168;
        do
        {
          uint64_t v173 = v62;
          _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v170 + v62 * v47, v63, type metadata accessor for __RKEntityActionSpecification);
          _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v63, v39, type metadata accessor for __RKEntityActionSpecification);
          if (swift_getEnumCaseMultiPayload() == 6)
          {
            uint64_t v66 = *(void *)(v39 + 8);
            uint64_t v64 = MEMORY[0x263F8EE78];
            uint64_t v189 = MEMORY[0x263F8EE78];
            if (*(void *)(v66 + 16))
            {
              uint64_t v67 = *(void *)(v66 + 16);
              uint64_t v68 = v66 + v186;
              uint64_t v169 = v66;
              swift_bridgeObjectRetain();
              uint64_t v69 = 0;
              uint64_t v70 = (uint64_t)v38;
              uint64_t v176 = v67;
              uint64_t v177 = v68;
              do
              {
                uint64_t v180 = v69;
                _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v68 + v69 * v47, v70, type metadata accessor for __RKEntityActionSpecification);
                _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v70, (uint64_t)v10, type metadata accessor for __RKEntityActionSpecification);
                uint64_t v73 = v179;
                if (swift_getEnumCaseMultiPayload() == 6)
                {
                  uint64_t v74 = *((void *)v10 + 1);
                  uint64_t v75 = MEMORY[0x263F8EE78];
                  uint64_t v188 = MEMORY[0x263F8EE78];
                  uint64_t v76 = *(void *)(v74 + 16);
                  if (v76)
                  {
                    uint64_t v77 = v74 + v186;
                    uint64_t v178 = v74;
                    swift_bridgeObjectRetain();
                    uint64_t v78 = 0;
                    uint64_t v182 = v77;
                    do
                    {
                      _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v77 + v78 * v47, (uint64_t)v7, type metadata accessor for __RKEntityActionSpecification);
                      _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0((uint64_t)v7, (uint64_t)v4, type metadata accessor for __RKEntityActionSpecification);
                      if (swift_getEnumCaseMultiPayload() == 6)
                      {
                        uint64_t v80 = v73;
                        unint64_t v81 = v4;
                        uint64_t v82 = *((void *)v4 + 1);
                        uint64_t v79 = MEMORY[0x263F8EE78];
                        uint64_t v187 = MEMORY[0x263F8EE78];
                        uint64_t v83 = *(void *)(v82 + 16);
                        swift_bridgeObjectRetain();
                        if (v83)
                        {
                          uint64_t v84 = v82 + v186;
                          do
                          {
                            uint64_t v85 = __RKEntityActionSpecification.flattened.getter();
                            specialized Array.append<A>(contentsOf:)(v85);
                            v84 += v47;
                            --v83;
                          }
                          while (v83);
                          uint64_t v79 = v187;
                        }
                        swift_bridgeObjectRelease_n();
                        uint64_t v4 = v81;
                        uint64_t v73 = v80;
                        uint64_t v7 = v181;
                        uint64_t v77 = v182;
                      }
                      else
                      {
                        _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v4, type metadata accessor for __RKEntityActionSpecification);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
                        uint64_t v79 = swift_allocObject();
                        *(_OWORD *)(v79 + 16) = v185;
                        _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0((uint64_t)v7, v79 + v186, type metadata accessor for __RKEntityActionSpecification);
                      }
                      ++v78;
                      _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v7, type metadata accessor for __RKEntityActionSpecification);
                      specialized Array.append<A>(contentsOf:)(v79);
                    }
                    while (v78 != v76);
                    swift_bridgeObjectRelease_n();
                    uint64_t v72 = v188;
                    uint64_t v70 = (uint64_t)v174;
                    char v71 = v175;
                    uint64_t v67 = v176;
                    uint64_t v68 = v177;
                  }
                  else
                  {
                    char v71 = v10;
                    swift_bridgeObjectRelease();
                    uint64_t v72 = v75;
                    uint64_t v68 = v177;
                  }
                }
                else
                {
                  char v71 = v10;
                  _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v10, type metadata accessor for __RKEntityActionSpecification);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
                  uint64_t v72 = swift_allocObject();
                  *(_OWORD *)(v72 + 16) = v185;
                  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v70, v72 + v186, type metadata accessor for __RKEntityActionSpecification);
                }
                uint64_t v69 = v180 + 1;
                _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v70, type metadata accessor for __RKEntityActionSpecification);
                specialized Array.append<A>(contentsOf:)(v72);
                uint64_t v10 = v71;
              }
              while (v69 != v67);
              Swift::String v38 = (char *)v70;
              swift_bridgeObjectRelease_n();
              uint64_t v64 = v189;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            uint64_t v63 = (uint64_t)v168;
          }
          else
          {
            _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v39, type metadata accessor for __RKEntityActionSpecification);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
            uint64_t v64 = swift_allocObject();
            *(_OWORD *)(v64 + 16) = v185;
            _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v63, v64 + v186, type metadata accessor for __RKEntityActionSpecification);
          }
          uint64_t v65 = v173 + 1;
          _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v63, type metadata accessor for __RKEntityActionSpecification);
          specialized Array.append<A>(contentsOf:)(v64);
          uint64_t v62 = v65;
          uint64_t v39 = (uint64_t)v172;
        }
        while (v65 != v171);
        swift_bridgeObjectRelease_n();
        uint64_t v61 = v190;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v86 = v165;
    }
    else
    {
      _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v44, type metadata accessor for __RKEntityActionSpecification);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      uint64_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = v185;
      _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v59, v61 + v186, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v86 = v59;
    }
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v86, type metadata accessor for __RKEntityActionSpecification);
    uint64_t v87 = *(void *)(v61 + 16);
    unint64_t v88 = v167;
    int64_t v89 = *(void *)(v167 + 16);
    int64_t v90 = v89 + v87;
    if (__OFADD__(v89, v87)) {
      break;
    }
    int v91 = swift_isUniquelyReferenced_nonNull_native();
    if (!v91 || v90 > *(void *)(v88 + 24) >> 1)
    {
      if (v89 <= v90) {
        int64_t v92 = v89 + v87;
      }
      else {
        int64_t v92 = v89;
      }
      unint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v91, v92, 1, v88);
    }
    uint64_t v39 = (uint64_t)v172;
    uint64_t v44 = (uint64_t)v164;
    if (*(void *)(v61 + 16))
    {
      uint64_t v93 = *(void *)(v88 + 16);
      if ((*(void *)(v88 + 24) >> 1) - v93 < v87) {
        goto LABEL_117;
      }
      unint64_t v94 = v88 + v186 + v93 * v47;
      if (v61 + v186 < v94 + v87 * v47 && v94 < v61 + v186 + v87 * v47) {
        goto LABEL_127;
      }
      swift_arrayInitWithCopy();
      if (v87)
      {
        uint64_t v96 = *(void *)(v88 + 16);
        BOOL v97 = __OFADD__(v96, v87);
        uint64_t v98 = v96 + v87;
        if (v97) {
          goto LABEL_118;
        }
        *(void *)(v88 + 16) = v98;
      }
    }
    else if (v87)
    {
      goto LABEL_116;
    }
    unint64_t v167 = v88;
    uint64_t v57 = v166 + 1;
    swift_bridgeObjectRelease();
    Swift::String v38 = v174;
    uint64_t v10 = v175;
    if (v57 == v163)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v100 = (uint64_t)v158;
      uint64_t v99 = v167;
      goto LABEL_68;
    }
  }
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Array<A>.hasProximityTriggers.getter(uint64_t a1)
{
  v139[2] = 0;
  uint64_t v2 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v142 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (void *)((char *)v139 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v139 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (void *)((char *)v139 - v9);
  MEMORY[0x270FA5388](v11);
  long long v13 = (char *)v139 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v172 = (char *)v139 - v15;
  MEMORY[0x270FA5388](v16);
  char v18 = (char *)v139 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v164 = (char *)v139 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v165 = (uint64_t)v139 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v155 = (uint64_t)v139 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v139 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v150 = (uint64_t)v139 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v151 = (uint64_t)v139 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v145 = (uint64_t)v139 - v33;
  uint64_t v34 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34 - 8);
  uint64_t v146 = (uint64_t)v139 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v37 = *(void *)(a1 + 16);
  if (!v37) {
    goto LABEL_114;
  }
  uint64_t v179 = v2;
  uint64_t v158 = v27;
  char v168 = v18;
  uint64_t v191 = MEMORY[0x263F8EE78];
  int64_t v140 = v37;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
  uint64_t v38 = 0;
  uint64_t v144 = a1 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
  uint64_t v143 = *(void *)(v35 + 72);
  long long v185 = xmmword_22830EC60;
  uint64_t v174 = v13;
  uint64_t v175 = v10;
  uint64_t v39 = v13;
  uint64_t v40 = (uint64_t *)v172;
  unint64_t v181 = v7;
LABEL_3:
  uint64_t v147 = v38;
  uint64_t v41 = v146;
  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v144 + v143 * v38, v146, type metadata accessor for __RKEntityInteractionSpecification);
  uint64_t v42 = v145;
  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v41, v145, type metadata accessor for __RKEntityTriggerSpecification);
  if (swift_getEnumCaseMultiPayload() != 5)
  {
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v42, type metadata accessor for __RKEntityTriggerSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
    unint64_t v128 = (*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
    uint64_t v129 = swift_allocObject();
    *(_OWORD *)(v129 + 16) = v185;
    uint64_t v153 = v129;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v41, v129 + v128, type metadata accessor for __RKEntityTriggerSpecification);
    goto LABEL_109;
  }
  uint64_t v43 = *(void *)v42;
  uint64_t v44 = *(void *)(*(void *)v42 + 16);
  uint64_t v45 = (uint64_t *)v164;
  uint64_t v148 = v44;
  if (!v44)
  {
    swift_bridgeObjectRelease();
    uint64_t v153 = MEMORY[0x263F8EE78];
    goto LABEL_109;
  }
  uint64_t v46 = *(unsigned __int8 *)(v142 + 80);
  uint64_t v47 = (v46 + 32) & ~v46;
  uint64_t v149 = v43 + v47;
  uint64_t v48 = *(void *)(v142 + 72);
  uint64_t v186 = v47;
  uint64_t v183 = v46 | 7;
  uint64_t v184 = v48 + v47;
  v139[1] = v43;
  swift_bridgeObjectRetain();
  uint64_t v49 = 0;
  uint64_t v153 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v152 = v49;
    uint64_t v50 = v151;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v149 + v48 * v49, v151, type metadata accessor for __RKEntityTriggerSpecification);
    uint64_t v51 = v150;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v50, v150, type metadata accessor for __RKEntityTriggerSpecification);
    if (swift_getEnumCaseMultiPayload() == 5) {
      break;
    }
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v51, type metadata accessor for __RKEntityTriggerSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
    uint64_t v114 = swift_allocObject();
    *(_OWORD *)(v114 + 16) = v185;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v50, v114 + v186, type metadata accessor for __RKEntityTriggerSpecification);
    uint64_t v115 = v50;
    uint64_t v54 = v114;
LABEL_89:
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v115, type metadata accessor for __RKEntityTriggerSpecification);
    uint64_t v116 = *(void *)(v54 + 16);
    int64_t v117 = *(void *)(v153 + 16);
    int64_t v118 = v117 + v116;
    if (__OFADD__(v117, v116)) {
      goto LABEL_123;
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v120 = v153;
    if (!isUniquelyReferenced_nonNull_native || v118 > *(void *)(v153 + 24) >> 1)
    {
      if (v117 <= v118) {
        int64_t v121 = v117 + v116;
      }
      else {
        int64_t v121 = v117;
      }
      uint64_t v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v121, 1, v153);
    }
    uint64_t v40 = (uint64_t *)v172;
    uint64_t v45 = (uint64_t *)v164;
    uint64_t v122 = *(void *)(v54 + 16);
    uint64_t v153 = v120;
    if (v122)
    {
      uint64_t v123 = *(void *)(v120 + 16);
      if ((*(void *)(v120 + 24) >> 1) - v123 < v116) {
        goto LABEL_125;
      }
      unint64_t v124 = v120 + v186 + v123 * v48;
      if (v54 + v186 < v124 + v116 * v48 && v124 < v54 + v186 + v116 * v48) {
        goto LABEL_127;
      }
      swift_arrayInitWithCopy();
      if (v116)
      {
        uint64_t v126 = *(void *)(v153 + 16);
        BOOL v98 = __OFADD__(v126, v116);
        uint64_t v127 = v126 + v116;
        if (v98) {
          goto LABEL_126;
        }
        *(void *)(v153 + 16) = v127;
      }
    }
    else if (v116)
    {
      goto LABEL_124;
    }
    uint64_t v49 = v152 + 1;
    swift_bridgeObjectRelease();
    if (v49 == v148)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v41 = v146;
LABEL_109:
      _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v41, type metadata accessor for __RKEntityInteractionSpecification);
      uint64_t v130 = v191;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v130 + 16) + 1, 1);
        uint64_t v130 = v191;
      }
      int64_t v131 = v140;
      uint64_t v132 = v147;
      unint64_t v134 = *(void *)(v130 + 16);
      unint64_t v133 = *(void *)(v130 + 24);
      if (v134 >= v133 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v133 > 1, v134 + 1, 1);
        uint64_t v132 = v147;
        int64_t v131 = v140;
        uint64_t v130 = v191;
      }
      uint64_t v38 = v132 + 1;
      *(void *)(v130 + 16) = v134 + 1;
      *(void *)(v130 + 8 * v134 + 32) = v153;
      if (v38 == v131)
      {
LABEL_114:
        uint64_t v135 = swift_bridgeObjectRetain();
        specialized Sequence.filter(_:)(v135);
        uint64_t v137 = *(void *)(v136 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v137 != 0;
      }
      goto LABEL_3;
    }
  }
  uint64_t v52 = *(void *)v51;
  uint64_t v157 = *(void *)(*(void *)v51 + 16);
  if (!v157)
  {
    swift_bridgeObjectRelease();
    uint64_t v54 = MEMORY[0x263F8EE78];
LABEL_88:
    uint64_t v115 = v151;
    goto LABEL_89;
  }
  uint64_t v156 = v52 + v186;
  uint64_t v141 = v52;
  swift_bridgeObjectRetain();
  uint64_t v53 = 0;
  uint64_t v54 = MEMORY[0x263F8EE78];
  while (1)
  {
    unint64_t v160 = v54;
    uint64_t v159 = v53;
    uint64_t v55 = (uint64_t)v158;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v156 + v53 * v48, (uint64_t)v158, type metadata accessor for __RKEntityTriggerSpecification);
    uint64_t v56 = v155;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v55, v155, type metadata accessor for __RKEntityTriggerSpecification);
    if (swift_getEnumCaseMultiPayload() != 5)
    {
      _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v56, type metadata accessor for __RKEntityTriggerSpecification);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
      uint64_t v100 = swift_allocObject();
      *(_OWORD *)(v100 + 16) = v185;
      _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v55, v100 + v186, type metadata accessor for __RKEntityTriggerSpecification);
      uint64_t v101 = v55;
      goto LABEL_68;
    }
    uint64_t v57 = *(void *)v56;
    uint64_t v163 = *(void *)(*(void *)v56 + 16);
    if (v163) {
      break;
    }
    swift_bridgeObjectRelease();
    uint64_t v100 = MEMORY[0x263F8EE78];
    uint64_t v101 = (uint64_t)v158;
LABEL_68:
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v101, type metadata accessor for __RKEntityTriggerSpecification);
    unint64_t v167 = v100;
    uint64_t v102 = *(void *)(v100 + 16);
    int64_t v103 = *(void *)(v160 + 16);
    int64_t v104 = v103 + v102;
    if (__OFADD__(v103, v102)) {
      goto LABEL_119;
    }
    unint64_t v105 = v160;
    int v106 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v107 = v105;
    if (!v106 || v104 > *(void *)(v105 + 24) >> 1)
    {
      if (v103 <= v104) {
        int64_t v108 = v103 + v102;
      }
      else {
        int64_t v108 = v103;
      }
      uint64_t v107 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v106, v108, 1, v105);
    }
    uint64_t v40 = (uint64_t *)v172;
    uint64_t v45 = (uint64_t *)v164;
    if (*(void *)(v167 + 16))
    {
      uint64_t v109 = *(void *)(v107 + 16);
      if ((*(void *)(v107 + 24) >> 1) - v109 < v102) {
        goto LABEL_121;
      }
      unint64_t v110 = v107 + v186 + v109 * v48;
      if (v167 + v186 < v110 + v102 * v48 && v110 < v167 + v186 + v102 * v48) {
        goto LABEL_127;
      }
      uint64_t v54 = v107;
      swift_arrayInitWithCopy();
      if (v102)
      {
        uint64_t v112 = *(void *)(v54 + 16);
        BOOL v98 = __OFADD__(v112, v102);
        uint64_t v113 = v112 + v102;
        if (v98) {
          goto LABEL_122;
        }
        *(void *)(v54 + 16) = v113;
      }
    }
    else
    {
      uint64_t v54 = v107;
      if (v102) {
        goto LABEL_120;
      }
    }
    uint64_t v53 = v159 + 1;
    swift_bridgeObjectRelease();
    if (v53 == v157)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_88;
    }
  }
  uint64_t v162 = v57 + v186;
  uint64_t v154 = v57;
  swift_bridgeObjectRetain();
  uint64_t v58 = 0;
  unint64_t v167 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v166 = v58;
    uint64_t v59 = v162 + v58 * v48;
    uint64_t v60 = v165;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v59, v165, type metadata accessor for __RKEntityTriggerSpecification);
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v60, (uint64_t)v45, type metadata accessor for __RKEntityTriggerSpecification);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      uint64_t v61 = *v45;
      uint64_t v62 = MEMORY[0x263F8EE78];
      uint64_t v190 = MEMORY[0x263F8EE78];
      uint64_t v171 = *(void *)(v61 + 16);
      if (v171)
      {
        uint64_t v170 = v61 + v186;
        uint64_t v161 = v61;
        swift_bridgeObjectRetain();
        uint64_t v63 = 0;
        uint64_t v64 = (uint64_t)v168;
        do
        {
          uint64_t v173 = v63;
          _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v170 + v63 * v48, v64, type metadata accessor for __RKEntityTriggerSpecification);
          _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v64, (uint64_t)v40, type metadata accessor for __RKEntityTriggerSpecification);
          if (swift_getEnumCaseMultiPayload() == 5)
          {
            uint64_t v67 = *v40;
            uint64_t v65 = MEMORY[0x263F8EE78];
            uint64_t v189 = MEMORY[0x263F8EE78];
            if (*(void *)(v67 + 16))
            {
              uint64_t v68 = *(void *)(v67 + 16);
              uint64_t v69 = v67 + v186;
              uint64_t v169 = v67;
              swift_bridgeObjectRetain();
              uint64_t v70 = 0;
              uint64_t v71 = (uint64_t)v39;
              uint64_t v176 = v68;
              uint64_t v177 = v69;
              do
              {
                uint64_t v180 = v70;
                _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v69 + v70 * v48, v71, type metadata accessor for __RKEntityTriggerSpecification);
                _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v71, (uint64_t)v10, type metadata accessor for __RKEntityTriggerSpecification);
                uint64_t v74 = v179;
                if (swift_getEnumCaseMultiPayload() == 5)
                {
                  uint64_t v75 = *v10;
                  uint64_t v76 = MEMORY[0x263F8EE78];
                  uint64_t v188 = MEMORY[0x263F8EE78];
                  uint64_t v77 = *(void *)(v75 + 16);
                  if (v77)
                  {
                    uint64_t v78 = v75 + v186;
                    uint64_t v178 = v75;
                    swift_bridgeObjectRetain();
                    uint64_t v79 = 0;
                    uint64_t v182 = v78;
                    do
                    {
                      _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v78 + v79 * v48, (uint64_t)v7, type metadata accessor for __RKEntityTriggerSpecification);
                      _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0((uint64_t)v7, (uint64_t)v4, type metadata accessor for __RKEntityTriggerSpecification);
                      if (swift_getEnumCaseMultiPayload() == 5)
                      {
                        uint64_t v81 = v74;
                        uint64_t v82 = v4;
                        uint64_t v83 = *v4;
                        uint64_t v80 = MEMORY[0x263F8EE78];
                        uint64_t v187 = MEMORY[0x263F8EE78];
                        uint64_t v84 = *(void *)(v83 + 16);
                        swift_bridgeObjectRetain();
                        if (v84)
                        {
                          uint64_t v85 = v83 + v186;
                          do
                          {
                            uint64_t v86 = __RKEntityTriggerSpecification.flattened.getter();
                            specialized Array.append<A>(contentsOf:)(v86);
                            v85 += v48;
                            --v84;
                          }
                          while (v84);
                          uint64_t v80 = v187;
                        }
                        swift_bridgeObjectRelease_n();
                        uint64_t v4 = v82;
                        uint64_t v74 = v81;
                        uint64_t v7 = v181;
                        uint64_t v78 = v182;
                      }
                      else
                      {
                        _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v4, type metadata accessor for __RKEntityTriggerSpecification);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
                        uint64_t v80 = swift_allocObject();
                        *(_OWORD *)(v80 + 16) = v185;
                        _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0((uint64_t)v7, v80 + v186, type metadata accessor for __RKEntityTriggerSpecification);
                      }
                      ++v79;
                      _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v7, type metadata accessor for __RKEntityTriggerSpecification);
                      specialized Array.append<A>(contentsOf:)(v80);
                    }
                    while (v79 != v77);
                    swift_bridgeObjectRelease_n();
                    uint64_t v73 = v188;
                    uint64_t v71 = (uint64_t)v174;
                    uint64_t v72 = v175;
                    uint64_t v68 = v176;
                    uint64_t v69 = v177;
                  }
                  else
                  {
                    uint64_t v72 = v10;
                    swift_bridgeObjectRelease();
                    uint64_t v73 = v76;
                    uint64_t v69 = v177;
                  }
                }
                else
                {
                  uint64_t v72 = v10;
                  _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v10, type metadata accessor for __RKEntityTriggerSpecification);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
                  uint64_t v73 = swift_allocObject();
                  *(_OWORD *)(v73 + 16) = v185;
                  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v71, v73 + v186, type metadata accessor for __RKEntityTriggerSpecification);
                }
                uint64_t v70 = v180 + 1;
                _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v71, type metadata accessor for __RKEntityTriggerSpecification);
                specialized Array.append<A>(contentsOf:)(v73);
                uint64_t v10 = v72;
              }
              while (v70 != v68);
              uint64_t v39 = (char *)v71;
              swift_bridgeObjectRelease_n();
              uint64_t v65 = v189;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            uint64_t v64 = (uint64_t)v168;
          }
          else
          {
            _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v40, type metadata accessor for __RKEntityTriggerSpecification);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
            uint64_t v65 = swift_allocObject();
            *(_OWORD *)(v65 + 16) = v185;
            _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v64, v65 + v186, type metadata accessor for __RKEntityTriggerSpecification);
          }
          uint64_t v66 = v173 + 1;
          _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v64, type metadata accessor for __RKEntityTriggerSpecification);
          specialized Array.append<A>(contentsOf:)(v65);
          uint64_t v63 = v66;
          uint64_t v40 = (uint64_t *)v172;
        }
        while (v66 != v171);
        swift_bridgeObjectRelease_n();
        uint64_t v62 = v190;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v87 = v165;
    }
    else
    {
      _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v45, type metadata accessor for __RKEntityTriggerSpecification);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
      uint64_t v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = v185;
      _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v60, v62 + v186, type metadata accessor for __RKEntityTriggerSpecification);
      uint64_t v87 = v60;
    }
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v87, type metadata accessor for __RKEntityTriggerSpecification);
    uint64_t v88 = *(void *)(v62 + 16);
    unint64_t v89 = v167;
    int64_t v90 = *(void *)(v167 + 16);
    int64_t v91 = v90 + v88;
    if (__OFADD__(v90, v88)) {
      break;
    }
    int v92 = swift_isUniquelyReferenced_nonNull_native();
    if (!v92 || v91 > *(void *)(v89 + 24) >> 1)
    {
      if (v90 <= v91) {
        int64_t v93 = v90 + v88;
      }
      else {
        int64_t v93 = v90;
      }
      unint64_t v89 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v92, v93, 1, v89);
    }
    uint64_t v40 = (uint64_t *)v172;
    uint64_t v45 = (uint64_t *)v164;
    if (*(void *)(v62 + 16))
    {
      uint64_t v94 = *(void *)(v89 + 16);
      if ((*(void *)(v89 + 24) >> 1) - v94 < v88) {
        goto LABEL_117;
      }
      unint64_t v95 = v89 + v186 + v94 * v48;
      if (v62 + v186 < v95 + v88 * v48 && v95 < v62 + v186 + v88 * v48) {
        goto LABEL_127;
      }
      swift_arrayInitWithCopy();
      if (v88)
      {
        uint64_t v97 = *(void *)(v89 + 16);
        BOOL v98 = __OFADD__(v97, v88);
        uint64_t v99 = v97 + v88;
        if (v98) {
          goto LABEL_118;
        }
        *(void *)(v89 + 16) = v99;
      }
    }
    else if (v88)
    {
      goto LABEL_116;
    }
    unint64_t v167 = v89;
    uint64_t v58 = v166 + 1;
    swift_bridgeObjectRelease();
    uint64_t v39 = v174;
    uint64_t v10 = v175;
    if (v58 == v163)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v101 = (uint64_t)v158;
      uint64_t v100 = v167;
      goto LABEL_68;
    }
  }
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __RKEntityActionSpecification.flattened.getter()
{
  uint64_t v1 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v17 - v6;
  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v0, (uint64_t)&v17 - v6, type metadata accessor for __RKEntityActionSpecification);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v8 = *((void *)v7 + 1);
    uint64_t v18 = MEMORY[0x263F8EE78];
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = v8 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v11 = *(void *)(v2 + 72);
      swift_bridgeObjectRetain();
      do
      {
        uint64_t v12 = _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v10, (uint64_t)v4, type metadata accessor for __RKEntityActionSpecification);
        uint64_t v13 = __RKEntityActionSpecification.flattened.getter(v12);
        _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v4, type metadata accessor for __RKEntityActionSpecification);
        specialized Array.append<A>(contentsOf:)(v13);
        v10 += v11;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease_n();
      return v18;
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v7, type metadata accessor for __RKEntityActionSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    unint64_t v15 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_22830EC60;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v0, v14 + v15, type metadata accessor for __RKEntityActionSpecification);
  }
  return v14;
}

uint64_t __RKEntityTriggerSpecification.flattened.getter()
{
  uint64_t v1 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (uint64_t *)((char *)&v17 - v6);
  _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v0, (uint64_t)&v17 - v6, type metadata accessor for __RKEntityTriggerSpecification);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    uint64_t v8 = *v7;
    uint64_t v18 = MEMORY[0x263F8EE78];
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = v8 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v11 = *(void *)(v2 + 72);
      swift_bridgeObjectRetain();
      do
      {
        uint64_t v12 = _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v10, (uint64_t)v4, type metadata accessor for __RKEntityTriggerSpecification);
        uint64_t v13 = __RKEntityTriggerSpecification.flattened.getter(v12);
        _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v4, type metadata accessor for __RKEntityTriggerSpecification);
        specialized Array.append<A>(contentsOf:)(v13);
        v10 += v11;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease_n();
      return v18;
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0((uint64_t)v7, type metadata accessor for __RKEntityTriggerSpecification);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
    unint64_t v15 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_22830EC60;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v0, v14 + v15, type metadata accessor for __RKEntityTriggerSpecification);
  }
  return v14;
}

void specialized Sequence.filter(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionSpecification?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v37 - v7;
  uint64_t v9 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v44 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v43 = (uint64_t)&v37 - v12;
  __n128 v14 = MEMORY[0x270FA5388](v13);
  uint64_t v42 = (uint64_t)&v37 - v15;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v51 = MEMORY[0x263F8EE78];
  uint64_t v20 = (void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v19 + 56);
  uint64_t v21 = a1 + 32;
  uint64_t v47 = v19 + 48;
  uint64_t v48 = v19;
  uint64_t v50 = v1;
  uint64_t v45 = v8;
  uint64_t v46 = a1;
  uint64_t v41 = v22;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = *(void *)(v17 + 16);
      if (v16 != v23) {
        goto LABEL_14;
      }
      (*v20)(v5, 1, 1, v9, v14);
      outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
    }
    unint64_t v24 = *(void *)(a1 + 16);
    if (v18 == v24)
    {
LABEL_23:
      (*v20)(v8, 1, 1, v9, v14);
      swift_bridgeObjectRelease();
LABEL_24:
      swift_bridgeObjectRelease();
      outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
      return;
    }
    if (v18 >= v24) {
      break;
    }
    while (1)
    {
      uint64_t v17 = *(void *)(v21 + 8 * v18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v17) {
        break;
      }
LABEL_10:
      ++v18;
      unint64_t v25 = *(void *)(a1 + 16);
      if (v18 == v25) {
        goto LABEL_23;
      }
      if (v18 >= v25) {
        goto LABEL_26;
      }
    }
    unint64_t v23 = *(void *)(v17 + 16);
    if (!v23)
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v20)(v5, 1, 1, v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
      goto LABEL_10;
    }
    unint64_t v16 = 0;
    ++v18;
LABEL_14:
    if (v16 >= v23) {
      goto LABEL_27;
    }
    uint64_t v26 = v48;
    unint64_t v40 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    uint64_t v39 = *(void *)(v48 + 72);
    uint64_t v27 = (uint64_t)v8;
    unint64_t v28 = v16;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v17 + v40 + v39 * v16, (uint64_t)v5, type metadata accessor for __RKEntityActionSpecification);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v5, 0, 1, v9);
    outlined init with take of Transform?((uint64_t)v5, v27, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v27, 1, v9) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = (char *)v27;
      goto LABEL_24;
    }
    unint64_t v49 = v28 + 1;
    uint64_t v29 = v42;
    _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_1(v27, v42, type metadata accessor for __RKEntityActionSpecification);
    uint64_t v30 = v43;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v29, v43, type metadata accessor for __RKEntityActionSpecification);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v30, type metadata accessor for __RKEntityActionSpecification);
    if (EnumCaseMultiPayload == 17)
    {
      _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_1(v29, v44, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v32 = v51;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a1 = v46;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1);
        uint64_t v32 = v51;
      }
      uint64_t v9 = v41;
      unint64_t v35 = *(void *)(v32 + 16);
      unint64_t v34 = *(void *)(v32 + 24);
      unint64_t v36 = v35 + 1;
      if (v35 >= v34 >> 1)
      {
        unint64_t v38 = v35 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        unint64_t v36 = v38;
        uint64_t v32 = v51;
      }
      *(void *)(v32 + 16) = v36;
      _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_1(v44, v32 + v40 + v35 * v39, type metadata accessor for __RKEntityActionSpecification);
      unint64_t v16 = v49;
      uint64_t v8 = v45;
    }
    else
    {
      _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v29, type metadata accessor for __RKEntityActionSpecification);
      uint64_t v8 = v45;
      a1 = v46;
      uint64_t v9 = v41;
      unint64_t v16 = v49;
    }
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (**v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v46 = (uint64_t)&v36 - v7;
  uint64_t v8 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v40 = (uint64_t)&v36 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v47 = (uint64_t)&v36 - v14;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v48 = MEMORY[0x263F8EE78];
  uint64_t v19 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v20 = a1 + 32;
  uint64_t v42 = v18 + 48;
  uint64_t v43 = v18;
  uint64_t v44 = v1;
  uint64_t v41 = a1;
  while (1)
  {
    if (v16)
    {
      uint64_t v21 = *(void *)(v16 + 16);
      if (v15 != v21) {
        goto LABEL_14;
      }
      ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))*v19)(v5, 1, 1, v8, v13);
      outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
    }
    uint64_t v22 = *(void *)(a1 + 16);
    if (v17 == v22)
    {
LABEL_23:
      uint64_t v27 = v46;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))*v19)(v46, 1, 1, v8, v13);
      swift_bridgeObjectRelease();
LABEL_24:
      swift_bridgeObjectRelease();
      outlined destroy of BodyTrackingComponent?(v27, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
      return;
    }
    if (v17 >= v22) {
      break;
    }
    while (1)
    {
      unint64_t v16 = *(void *)(v20 + 8 * v17);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v16) {
        break;
      }
LABEL_10:
      ++v17;
      unint64_t v23 = *(void *)(a1 + 16);
      if (v17 == v23) {
        goto LABEL_23;
      }
      if (v17 >= v23) {
        goto LABEL_26;
      }
    }
    uint64_t v21 = *(void *)(v16 + 16);
    if (!v21)
    {
      (*v19)(v5, 1, 1, v8);
      outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
      goto LABEL_10;
    }
    uint64_t v15 = 0;
    ++v17;
LABEL_14:
    if (v15 >= v21) {
      goto LABEL_27;
    }
    unint64_t v24 = v43;
    unint64_t v38 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    uint64_t v37 = *(void *)(v43 + 72);
    unint64_t v25 = v8;
    uint64_t v26 = v15;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v16 + v38 + v37 * v15, (uint64_t)v5, type metadata accessor for __RKEntityTriggerSpecification);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v5, 0, 1, v25);
    uint64_t v27 = v46;
    outlined init with take of Transform?((uint64_t)v5, v46, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v27, 1, v25) == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    uint64_t v45 = v26 + 1;
    unint64_t v28 = v47;
    _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_1(v27, v47, type metadata accessor for __RKEntityTriggerSpecification);
    uint64_t v29 = v28;
    uint64_t v30 = v40;
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v29, v40, type metadata accessor for __RKEntityTriggerSpecification);
    uint64_t v8 = v25;
    if (swift_getEnumCaseMultiPayload())
    {
      _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v30, type metadata accessor for __RKEntityTriggerSpecification);
      _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(v47, type metadata accessor for __RKEntityTriggerSpecification);
      uint64_t v15 = v45;
      a1 = v41;
    }
    else
    {
      uint64_t v31 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v30, v31);
      _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_1(v47, v39, type metadata accessor for __RKEntityTriggerSpecification);
      uint64_t v32 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1);
        uint64_t v32 = v48;
      }
      a1 = v41;
      unint64_t v34 = *(void *)(v32 + 16);
      uint64_t v33 = *(void *)(v32 + 24);
      unint64_t v35 = v34 + 1;
      if (v34 >= v33 >> 1)
      {
        unint64_t v36 = v34 + 1;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        unint64_t v35 = v36;
        uint64_t v32 = v48;
      }
      *(void *)(v32 + 16) = v35;
      _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_1(v39, v32 + v38 + v34 * v37, type metadata accessor for __RKEntityTriggerSpecification);
      uint64_t v15 = v45;
    }
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t Scene.hasLookAtOrProximityInteractions.getter()
{
  uint64_t v74 = type metadata accessor for Data.Deallocator();
  uint64_t v1 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v3 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v62 - v5;
  uint64_t v76 = 91;
  unint64_t v77 = 0xE100000000000000;
  v78._countAndFlagsBits = 0;
  v78._object = (void *)0xE000000000000000;
  uint64_t v79 = v0;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v78);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8285;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_release();
  uint64_t v11 = (const char *)v76;
  unint64_t v10 = v77;
  uint64_t v12 = Scene.__interactionService.getter();
  type metadata accessor for __RKEntityInteractionManager();
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
    uint64_t v76 = (uint64_t)v11;
    unint64_t v77 = v10;
    os_log_type_t v34 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v34, &v76);
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_beginAccess();
  if (!static __RKEntityInteractionsComponent.registration)
  {
    uint64_t v76 = (uint64_t)v11;
    unint64_t v77 = v10;
    os_log_type_t v37 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v37, &v76);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v72 = v3;
  uint64_t v68 = v11;
  uint64_t v69 = v12;
  unint64_t v70 = v10;
  unint64_t v13 = closure #1 in __RKEntityInteractionManager.entitiesWithInteractionSpecifications()();
  unint64_t v14 = v13;
  uint64_t v79 = MEMORY[0x263F8EE78];
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v15 = result;
  }
  else
  {
    uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v17 = &lazy cache variable for type metadata for REBlendWeightsMeshMap;
  if (!v15)
  {
    swift_bridgeObjectRelease();
    unint64_t v36 = 0;
    uint64_t v35 = MEMORY[0x263F8EE78];
    goto LABEL_36;
  }
  if (v15 < 1)
  {
    __break(1u);
    __break(1u);
    return result;
  }
  uint64_t v71 = v6;
  uint64_t v18 = v1;
  uint64_t v19 = 0;
  uint64_t v73 = 0;
  LODWORD(v67) = *MEMORY[0x263F06F00];
  uint64_t v66 = (void (**)(char *, uint64_t))(v18 + 104);
  uint64_t v63 = v18;
  uint64_t v65 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v20 = MEMORY[0x263F8EE78];
  do
  {
    if ((v14 & 0xC000000000000001) != 0)
    {
      MEMORY[0x22A689930](v19, v14);
      if (!static __RKEntityInteractionsComponent.registration) {
        goto LABEL_18;
      }
    }
    else
    {
      swift_retain();
      if (!static __RKEntityInteractionsComponent.registration) {
        goto LABEL_18;
      }
    }
    if (!REEntityGetCustomComponent() || (uint64_t Object = RECustomComponentGetObject()) == 0)
    {
LABEL_18:
      uint64_t v23 = v20;
      goto LABEL_29;
    }
    uint64_t v22 = *(void *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)&v76);
    if (v22)
    {
      uint64_t v23 = v22;
    }
    else
    {
      uint64_t v24 = v76;
      if (v76)
      {
        size_t v25 = strlen((const char *)v76);
        ((void (*)(char *, void, uint64_t))*v66)(v71, v67, v74);
        uint64_t v26 = Data.Deallocator._deallocator.getter();
        if (v25)
        {
          uint64_t v64 = v26;
          type metadata accessor for __DataStorage();
          swift_allocObject();
          swift_retain();
          uint64_t v27 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
          uint64_t v28 = specialized Data._Representation.init(_:count:)(v27, v25);
          unint64_t v30 = v29;
          swift_release();
        }
        else
        {
          uint64_t v31 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
          v31(v24, 0);
          swift_release();
          swift_release();
          uint64_t v28 = 0;
          unint64_t v30 = 0xC000000000000000;
        }
        (*v65)(v71, v74);
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
        lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
        uint64_t v32 = v73;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        if (v32)
        {
          swift_release();
          outlined consume of Data._Representation(v28, v30);

          uint64_t v73 = 0;
          uint64_t v23 = MEMORY[0x263F8EE78];
        }
        else
        {
          uint64_t v73 = 0;
          swift_release();
          outlined consume of Data._Representation(v28, v30);
          uint64_t v23 = v75;
        }
        uint64_t v17 = &lazy cache variable for type metadata for REBlendWeightsMeshMap;
      }
      else
      {
        uint64_t v23 = MEMORY[0x263F8EE78];
      }
    }
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)&v76);
    uint64_t v20 = MEMORY[0x263F8EE78];
LABEL_29:
    char v33 = Array<A>.hasLookAtInteractions.getter(v23);
    swift_bridgeObjectRelease();
    if (v33)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
    ++v19;
  }
  while (v15 != v19);
  swift_bridgeObjectRelease();
  uint64_t v35 = v79;
  unint64_t v36 = v73;
  uint64_t v1 = v63;
LABEL_36:
  uint64_t v38 = MEMORY[0x263F8EE78];
  if (v35 < 0 || (v35 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    uint64_t v39 = *(void *)(v35 + 16);
  }
  swift_release();
  uint64_t v79 = v38;
  if (v15)
  {
    uint64_t v64 = v39;
    uint64_t v73 = v36;
    LODWORD(v71) = *MEMORY[0x263F06F00];
    uint64_t v66 = (void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v67 = (void (**)(char *, void, uint64_t))(v1 + 104);
    swift_bridgeObjectRetain();
    uint64_t v40 = 0;
    while (1)
    {
      if ((v14 & 0xC000000000000001) != 0)
      {
        MEMORY[0x22A689930](v40, v14);
        if (!v17[163]) {
          goto LABEL_52;
        }
      }
      else
      {
        swift_retain();
        if (!v17[163]) {
          goto LABEL_52;
        }
      }
      if (REEntityGetCustomComponent())
      {
        uint64_t v41 = RECustomComponentGetObject();
        if (v41)
        {
          uint64_t v42 = *(void *)(v41 + 16);
          outlined init with copy of __RKEntityInteractionsComponent(v41, (uint64_t)&v76);
          if (v42)
          {
            uint64_t v43 = v42;
          }
          else
          {
            uint64_t v45 = v76;
            if (v76)
            {
              size_t v46 = strlen((const char *)v76);
              (*v67)(v72, v71, v74);
              uint64_t v47 = Data.Deallocator._deallocator.getter();
              if (v46)
              {
                uint64_t v65 = (void (**)(char *, uint64_t))v47;
                type metadata accessor for __DataStorage();
                swift_allocObject();
                swift_retain();
                uint64_t v48 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                uint64_t v49 = specialized Data._Representation.init(_:count:)(v48, v46);
                unint64_t v51 = v50;
                swift_release();
              }
              else
              {
                uint64_t v52 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
                v52(v45, 0);
                swift_release();
                swift_release();
                uint64_t v49 = 0;
                unint64_t v51 = 0xC000000000000000;
              }
              (*v66)(v72, v74);
              type metadata accessor for JSONDecoder();
              swift_allocObject();
              JSONDecoder.init()();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
              lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
              uint64_t v53 = v73;
              dispatch thunk of JSONDecoder.decode<A>(_:from:)();
              if (v53)
              {
                swift_release();
                outlined consume of Data._Representation(v49, v51);

                uint64_t v73 = 0;
                uint64_t v38 = MEMORY[0x263F8EE78];
                uint64_t v43 = MEMORY[0x263F8EE78];
                uint64_t v17 = &lazy cache variable for type metadata for REBlendWeightsMeshMap;
              }
              else
              {
                uint64_t v73 = 0;
                swift_release();
                outlined consume of Data._Representation(v49, v51);
                uint64_t v43 = v75;
                uint64_t v17 = &lazy cache variable for type metadata for REBlendWeightsMeshMap;
                uint64_t v38 = MEMORY[0x263F8EE78];
              }
            }
            else
            {
              uint64_t v38 = MEMORY[0x263F8EE78];
              uint64_t v43 = MEMORY[0x263F8EE78];
            }
          }
          swift_bridgeObjectRetain();
          outlined destroy of __RKEntityInteractionsComponent((uint64_t)&v76);
          goto LABEL_53;
        }
      }
LABEL_52:
      uint64_t v43 = v38;
LABEL_53:
      char v44 = Array<A>.hasProximityTriggers.getter(v43);
      swift_bridgeObjectRelease();
      if (v44)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_release();
      }
      if (v15 == ++v40)
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = v79;
        uint64_t v39 = v64;
        break;
      }
    }
  }
  if (v38 < 0 || (v38 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    uint64_t v54 = *(void *)(v38 + 16);
  }
  uint64_t v55 = swift_release();
  MEMORY[0x270FA5388](v55);
  *(&v62 - 2) = v14;
  *((unsigned char *)&v62 - 8) = v39 != 0;
  *((unsigned char *)&v62 - 7) = v56;
  uint64_t v57 = v68;
  unint64_t v58 = v70;
  uint64_t v76 = (uint64_t)v68;
  unint64_t v77 = v70;
  uint64_t v59 = static os_log_type_t.info.getter();
  uint64_t v60 = specialized InteractionsLogger.log(_:_:)(v59, &v76, partial apply for implicit closure #4 in Scene.hasLookAtOrProximityInteractions.getter, &v62 - 4);
  MEMORY[0x270FA5388](v60);
  *(&v62 - 2) = v14;
  uint64_t v76 = (uint64_t)v57;
  unint64_t v77 = v58;
  uint64_t v61 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v61, &v76, partial apply for implicit closure #5 in Scene.hasLookAtOrProximityInteractions.getter, &v62 - 4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return (v39 | v54) != 0;
}

uint64_t implicit closure #4 in Scene.hasLookAtOrProximityInteractions.getter(unint64_t a1, char a2, char a3)
{
  _StringGuts.grow(_:)(91);
  v6._countAndFlagsBits = 0x2064656B63656843;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD000000000000035;
  v8._object = (void *)0x8000000228357940;
  String.append(_:)(v8);
  if (a2) {
    uint64_t v9 = 1702195828;
  }
  else {
    uint64_t v9 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v10 = 0xE400000000000000;
  }
  else {
    unint64_t v10 = 0xE500000000000000;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._object = (void *)0x8000000228357980;
  v12._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v12);
  if (a3) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if (a3) {
    unint64_t v14 = 0xE400000000000000;
  }
  else {
    unint64_t v14 = 0xE500000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  String.append(_:)(v16);
  return 0;
}

uint64_t implicit closure #5 in Scene.hasLookAtOrProximityInteractions.getter(unint64_t a1)
{
  uint64_t v42 = type metadata accessor for Data.Deallocator();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  v5._countAndFlagsBits = 0x203A7363657053;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v47 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v40 = v4;
      uint64_t v7 = v47;
      unint64_t v44 = a1 & 0xC000000000000001;
      swift_beginAccess();
      uint64_t v9 = 0;
      unsigned int v39 = *MEMORY[0x263F06F00];
      uint64_t v38 = (void (**)(char *, void, uint64_t))(v2 + 104);
      os_log_type_t v37 = (void (**)(char *, uint64_t))(v2 + 8);
      unint64_t v43 = a1;
      while (1)
      {
        uint64_t v10 = v6;
        if (v44) {
          MEMORY[0x22A689930](v9, a1);
        }
        else {
          swift_retain();
        }
        if (static __RKEntityInteractionsComponent.registration)
        {
          if (REEntityGetCustomComponent())
          {
            uint64_t Object = RECustomComponentGetObject();
            if (Object) {
              break;
            }
          }
        }
        uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_24:
        uint64_t v24 = type metadata accessor for __RKEntityInteractionSpecification(0);
        uint64_t v25 = MEMORY[0x22A688E60](v13, v24);
        uint64_t v27 = v26;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v47 = v7;
        unint64_t v29 = *(void *)(v7 + 16);
        unint64_t v28 = *(void *)(v7 + 24);
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          uint64_t v7 = v47;
        }
        ++v9;
        *(void *)(v7 + 16) = v29 + 1;
        uint64_t v30 = v7 + 16 * v29;
        *(void *)(v30 + 32) = v25;
        *(void *)(v30 + 40) = v27;
        uint64_t v6 = v10;
        a1 = v43;
        if (v10 == v9) {
          goto LABEL_27;
        }
      }
      uint64_t v12 = *(void *)(Object + 16);
      outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v46);
      if (v12)
      {
        uint64_t v13 = v12;
      }
      else
      {
        unint64_t v14 = v46[0];
        if (v46[0])
        {
          uint64_t v41 = 0;
          size_t v15 = strlen(v46[0]);
          Swift::String v16 = v40;
          (*v38)(v40, v39, v42);
          uint64_t v17 = Data.Deallocator._deallocator.getter();
          if (v15)
          {
            uint64_t v36 = v17;
            type metadata accessor for __DataStorage();
            swift_allocObject();
            swift_retain();
            uint64_t v18 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
            uint64_t v19 = specialized Data._Representation.init(_:count:)(v18, v15);
            unint64_t v21 = v20;
            swift_release();
          }
          else
          {
            uint64_t v22 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
            v22(v14, 0);
            swift_release();
            swift_release();
            uint64_t v19 = 0;
            unint64_t v21 = 0xC000000000000000;
          }
          (*v37)(v16, v42);
          type metadata accessor for JSONDecoder();
          swift_allocObject();
          JSONDecoder.init()();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
          lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
          uint64_t v23 = v41;
          dispatch thunk of JSONDecoder.decode<A>(_:from:)();
          if (!v23)
          {
            swift_release();
            outlined consume of Data._Representation(v19, v21);
            uint64_t v13 = v45;
            goto LABEL_23;
          }
          swift_release();
          outlined consume of Data._Representation(v19, v21);
        }
        uint64_t v13 = MEMORY[0x263F8EE78];
      }
LABEL_23:
      swift_bridgeObjectRetain();
      outlined destroy of __RKEntityInteractionsComponent((uint64_t)v46);
      goto LABEL_24;
    }
    __break(1u);
  }
  else
  {
LABEL_27:
    v46[0] = (const char *)v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
    char v33 = v32;
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = v31;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 0;
    v35._object = (void *)0xE000000000000000;
    String.append(_:)(v35);
    return v48;
  }
  return result;
}

uint64_t partial apply for implicit closure #4 in Scene.hasLookAtOrProximityInteractions.getter()
{
  return implicit closure #4 in Scene.hasLookAtOrProximityInteractions.getter(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(unsigned char *)(v0 + 25));
}

uint64_t partial apply for implicit closure #5 in Scene.hasLookAtOrProximityInteractions.getter()
{
  return implicit closure #5 in Scene.hasLookAtOrProximityInteractions.getter(*(void *)(v0 + 16));
}

uint64_t _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s10RealityKit30__RKEntityTriggerSpecificationOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10RealityKit30__RKEntityTriggerSpecificationOWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t ResourceUsageHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceUsageHelper()
{
  return self;
}

char *specialized static ResourceUsageHelper.memoryUsage(in:)(char a1)
{
  v31[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v2 - 8);
  int v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  memset(v15, 0, sizeof(v15));
  mach_msg_type_number_t v14 = 93;
  mach_error_t v3 = task_info(*MEMORY[0x263EF8960], 0x16u, v15, &v14);
  if (!v3) {
    return (char *)((unint64_t)v16 / qword_228332B78[a1]);
  }
  uint64_t result = mach_error_string(v3);
  if (result)
  {
    static String.Encoding.ascii.getter();
    uint64_t v5 = String.init(cString:encoding:)();
    if (v6) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 0x206E776F6E6B6E55;
    }
    if (v6) {
      unint64_t v8 = v6;
    }
    else {
      unint64_t v8 = 0xED0000726F727245;
    }
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)logger);
    swift_bridgeObjectRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v31[0] = v13;
      *(_DWORD *)uint64_t v12 = 136446210;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227DD2000, v10, v11, "Error with task_info(): %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v13, -1, -1);
      MEMORY[0x22A696500](v12, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for SharedCacheStorage()
{
  return swift_initClassMetadata2();
}

uint64_t SharedCacheStorage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SharedCacheStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ShaderCacheLoader()
{
  return swift_initClassMetadata2();
}

uint64_t ShaderCacheLoader.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ShaderCacheLoader.__deallocating_deinit()
{
  ShaderCacheLoader.deinit();

  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for ShaderCacheLoader()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ShaderCache()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance ShaderCacheLoader<A>()
{
  return protocol witness for Actor.unownedExecutor.getter in conformance Entity.ConfigurationCatalog.RealityFileConfigurationReader();
}

uint64_t ShaderCache.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  return v0;
}

uint64_t ShaderCache.__deallocating_deinit()
{
  ShaderCache.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ShaderCache()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for ShaderCacheError()
{
  return &type metadata for ShaderCacheError;
}

uint64_t Entity.playAudio(configuration:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  v10[0] = *a1;
  v10[1] = v5;
  v10[2] = v6;
  type metadata accessor for AudioGeneratorController();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  specialized AudioGeneratorController.init(generatorRenderHandler:configuration:entity:)(a2, a3, (int *)v10);
  uint64_t v8 = v7;
  swift_release();
  swift_release();
  AudioGeneratorController.play()();
  return v8;
}

uint64_t Entity.prepareAudio(configuration:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  v10[0] = *a1;
  v10[1] = v5;
  v10[2] = v6;
  type metadata accessor for AudioGeneratorController();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  specialized AudioGeneratorController.init(generatorRenderHandler:configuration:entity:)(a2, a3, (int *)v10);
  uint64_t v8 = v7;
  swift_release();
  swift_release();
  return v8;
}

uint64_t __RKEmphasisBlinkAnimation.deinit()
{
  return v0;
}

uint64_t __RKEmphasisBlinkAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisBlinkAnimation()
{
  return self;
}

uint64_t specialized static __RKEmphasisBlinkAnimation.createBlinkAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  if (*a8)
  {
    if (*a8 == 1)
    {
      v36._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 168, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for playfulBlinkAnimationData == -1) {
        goto LABEL_8;
      }
    }
    else
    {
      v36._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 226, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for wildBlinkAnimationData == -1) {
        goto LABEL_8;
      }
    }
LABEL_18:
    swift_once();
    goto LABEL_8;
  }
  v36._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 133, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for basicBlinkAnimationData != -1) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v36);
  swift_bridgeObjectRelease();
  rawValue = v36._rawValue;
  if (!*((void *)v36._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v18 = rawValue[2];
  if (!v18)
  {
    __break(1u);
    goto LABEL_17;
  }
  char v8 = v32;
  float v10 = (float)v18;
  int v9 = v34;
  long long v19 = (long long *)&rawValue[6 * v18];
  long long v27 = *v19;
  long long v28 = *(v19 - 1);
  long long v26 = v19[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_17:
  }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
  unint64_t v21 = rawValue[2];
  unint64_t v20 = rawValue[3];
  float v22 = a5 / v10;
  if (v21 >= v20 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, rawValue);
  }
  rawValue[2] = v21 + 1;
  long long v23 = &rawValue[6 * v21];
  v23[2] = v28;
  v23[3] = v27;
  v23[4] = v26;
  v36._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v29, (float32x2_t **)&v36);
  v29[0] = 1;
  int v30 = "Transform.transform";
  char v31 = 1;
  char v32 = v8;
  float v33 = v22;
  int v34 = v9;
  float v35 = a5;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v25 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_22830EC60;
    *(void *)(result + 32) = v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Material.parameters.setter(void *a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  swift_retain();
  uint64_t v7 = v6(v4, v5);
  swift_release();
  swift_release();
  uint64_t v9 = v2[3];
  uint64_t v8 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v9);
  if (v3 == v7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v61, v9, v8);
    uint64_t v45 = v61;
    char v46 = v62;
    uint64_t v48 = v63;
    uint64_t v47 = v64;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 8) = v45;
    *(unsigned char *)(v1 + 16) = v46;
    *(void *)(v1 + 24) = v48;
    *(void *)(v1 + 32) = v47;
  }
  else
  {
    uint64_t v10 = Material.allKeys.getter(v9, v8);
    uint64_t v11 = specialized Sequence.compactMap<A>(_:)(v10);
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      unint64_t v50 = v2;
      uint64_t v13 = (uint64_t *)(v11 + 40);
      uint64_t v57 = v1;
      do
      {
        uint64_t v56 = v12;
        uint64_t v32 = *(v13 - 1);
        uint64_t v33 = *v13;
        uint64_t v34 = v2[3];
        __swift_project_boxed_opaque_existential_1(v2, v34);
        swift_bridgeObjectRetain();
        uint64_t v54 = v33;
        uint64_t v55 = v32;
        Material.subscript.getter(v32, v33, v34, (uint64_t)&v61);
        uint64_t v14 = 0;
        int v35 = 255;
        char v36 = 1;
        uint64_t v53 = v13;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        switch(v69)
        {
          case 0u:
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            char v36 = 0;
            int v35 = 1;
            uint64_t v14 = v61;
            break;
          case 1u:
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            char v36 = 0;
            int v35 = 0;
            uint64_t v39 = v64;
            uint64_t v14 = v61;
            uint64_t v37 = v62;
            uint64_t v38 = v63;
            break;
          case 2u:
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            char v36 = 0;
            uint64_t v14 = v61;
            int v35 = 2;
            break;
          case 3u:
          case 6u:
          case 0xCu:
          case 0x10u:
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            char v36 = 0;
            uint64_t v14 = v61;
            goto LABEL_9;
          case 4u:
          case 5u:
          case 7u:
          case 0xDu:
          case 0xEu:
          case 0x11u:
          case 0x12u:
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            char v36 = 0;
            uint64_t v14 = v61;
            uint64_t v37 = v62;
            goto LABEL_9;
          case 8u:
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            char v36 = 0;
            uint64_t v14 = v61;
            uint64_t v37 = v62;
            uint64_t v38 = v63;
            uint64_t v39 = v64;
            uint64_t v40 = v65;
            uint64_t v41 = v66;
LABEL_9:
            int v35 = v69;
            break;
          case 9u:
            char v36 = 0;
            int v35 = 9;
            uint64_t v14 = v61;
            uint64_t v37 = v62;
            uint64_t v42 = v67;
            uint64_t v43 = v68;
            uint64_t v38 = v63;
            uint64_t v39 = v64;
            uint64_t v40 = v65;
            uint64_t v41 = v66;
            break;
          case 0xAu:
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            char v36 = 0;
            uint64_t v14 = v61 & 1;
            int v35 = 10;
            break;
          case 0xBu:
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            char v36 = 0;
            uint64_t v14 = v61;
            int v35 = 11;
            break;
          case 0xFu:
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            char v36 = 0;
            uint64_t v14 = v61;
            int v35 = 15;
            break;
          case 0x13u:
            break;
          default:
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            break;
        }
        uint64_t v59 = &type metadata for CustomMaterial;
        uint64_t v60 = &protocol witness table for CustomMaterial;
        char v44 = v36;
        v58[0] = swift_allocObject();
        outlined init with copy of CustomMaterial(v57, v58[0] + 16);
        if (v44)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          char v22 = 19;
          long long v23 = v53;
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          long long v23 = v53;
          char v22 = 0;
          switch(v35)
          {
            case 1:
              break;
            case 2:
              uint64_t v15 = 0;
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v14 = v14;
              char v22 = 2;
              break;
            case 3:
            case 6:
            case 12:
            case 16:
              uint64_t v15 = 0;
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              goto LABEL_27;
            case 4:
            case 5:
            case 7:
            case 13:
            case 14:
            case 17:
            case 18:
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v15 = v37;
              goto LABEL_27;
            case 8:
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v15 = v37;
              uint64_t v16 = v38;
              uint64_t v17 = v39;
              uint64_t v18 = v40;
              uint64_t v19 = v41;
              goto LABEL_27;
            case 9:
              uint64_t v15 = v37;
              uint64_t v16 = v38;
              uint64_t v17 = v39;
              uint64_t v18 = v40;
              uint64_t v19 = v41;
              uint64_t v20 = v42;
              uint64_t v21 = v43;
LABEL_27:
              char v22 = v35;
              break;
            case 10:
              uint64_t v15 = 0;
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              v14 &= 1u;
              char v22 = 10;
              break;
            case 11:
              uint64_t v15 = 0;
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v14 = v14;
              char v22 = 11;
              break;
            case 15:
              uint64_t v15 = 0;
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v14 = v14;
              char v22 = 15;
              break;
            default:
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v17 = v39;
              char v22 = 1;
              uint64_t v15 = v37;
              uint64_t v16 = v38;
              break;
          }
        }
        long long v24 = v23 + 2;
        uint64_t v25 = v59;
        uint64_t v51 = v21;
        uint64_t v52 = (uint64_t)v60;
        uint64_t v26 = v16;
        uint64_t v27 = v17;
        uint64_t v28 = v18;
        uint64_t v29 = v20;
        uint64_t v30 = v15;
        char v31 = v22;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v58, (uint64_t)v59);
        uint64_t v61 = v14;
        uint64_t v62 = v30;
        uint64_t v13 = v24;
        uint64_t v63 = v26;
        uint64_t v64 = v27;
        uint64_t v65 = v28;
        uint64_t v66 = v19;
        uint64_t v67 = v29;
        uint64_t v68 = v51;
        unsigned __int8 v69 = v31;
        Material.subscript.setter((uint64_t)&v61, v55, v54, (uint64_t)v25, v52);
        specialized Material.parameters.setter(v58);
        uint64_t v12 = v56 - 1;
        uint64_t v2 = v50;
      }
      while (v56 != 1);
    }
    swift_bridgeObjectRelease();
  }
  return outlined destroy of MaterialParameters((uint64_t)v2);
}

{
  uint64_t *v1;
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char v66;
  void *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void v72[5];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;

  uint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v4 = *v1;
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  swift_retain();
  uint64_t v8 = v7(v5, v6);
  swift_release();
  swift_release();
  uint64_t v9 = v3[3];
  uint64_t v10 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v9);
  if (v4 == v8)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 16))(&v73, v9, v10);
    unint64_t v50 = v73;
    uint64_t v51 = v74;
    uint64_t v52 = v75;
    uint64_t v53 = v76;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1[1] = v50;
    *((unsigned char *)v1 + 16) = v51;
    v1[3] = v52;
    v1[4] = v53;
  }
  else
  {
    uint64_t v11 = Material.allKeys.getter(v9, v10);
    uint64_t v12 = specialized Sequence.compactMap<A>(_:)(v11);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      uint64_t v14 = (uint64_t *)(v12 + 40);
      uint64_t v57 = v1;
      unint64_t v58 = v3;
      do
      {
        uint64_t v71 = v13;
        uint64_t v26 = *(v14 - 1);
        uint64_t v27 = *v14;
        uint64_t v28 = v3[3];
        __swift_project_boxed_opaque_existential_1(v3, v28);
        swift_bridgeObjectRetain();
        unsigned __int8 v69 = v27;
        unint64_t v70 = v26;
        Material.subscript.getter(v26, v27, v28, (uint64_t)&v73);
        uint64_t v29 = 0;
        uint64_t v30 = 255;
        char v31 = 1;
        uint64_t v68 = v14;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        int v35 = 0;
        char v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        switch(v81)
        {
          case 0u:
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            int v35 = 0;
            char v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            char v31 = 0;
            uint64_t v30 = 1;
            uint64_t v29 = v73;
            break;
          case 1u:
            int v35 = 0;
            char v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            char v31 = 0;
            uint64_t v30 = 0;
            uint64_t v34 = v76;
            uint64_t v29 = v73;
            uint64_t v32 = v74;
            uint64_t v33 = v75;
            break;
          case 2u:
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            int v35 = 0;
            char v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            char v31 = 0;
            uint64_t v29 = v73;
            uint64_t v30 = 2;
            break;
          case 3u:
          case 6u:
          case 0xCu:
          case 0x10u:
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            int v35 = 0;
            char v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            char v31 = 0;
            uint64_t v29 = v73;
            goto LABEL_9;
          case 4u:
          case 5u:
          case 7u:
          case 0xDu:
          case 0xEu:
          case 0x11u:
          case 0x12u:
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            int v35 = 0;
            char v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            char v31 = 0;
            uint64_t v29 = v73;
            uint64_t v32 = v74;
            goto LABEL_9;
          case 8u:
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            char v31 = 0;
            uint64_t v29 = v73;
            uint64_t v32 = v74;
            uint64_t v33 = v75;
            uint64_t v34 = v76;
            int v35 = v77;
            char v36 = v78;
LABEL_9:
            uint64_t v30 = v81;
            break;
          case 9u:
            char v31 = 0;
            uint64_t v30 = 9;
            uint64_t v29 = v73;
            uint64_t v32 = v74;
            uint64_t v37 = v79;
            uint64_t v38 = v80;
            uint64_t v33 = v75;
            uint64_t v34 = v76;
            int v35 = v77;
            char v36 = v78;
            break;
          case 0xAu:
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            int v35 = 0;
            char v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            char v31 = 0;
            uint64_t v29 = v73 & 1;
            uint64_t v30 = 10;
            break;
          case 0xBu:
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            int v35 = 0;
            char v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            char v31 = 0;
            uint64_t v29 = v73;
            uint64_t v30 = 11;
            break;
          case 0xFu:
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            int v35 = 0;
            char v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            char v31 = 0;
            uint64_t v29 = v73;
            uint64_t v30 = 15;
            break;
          case 0x13u:
            break;
          default:
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            int v35 = 0;
            char v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            break;
        }
        uint64_t v55 = v38;
        uint64_t v56 = v37;
        uint64_t v64 = v30;
        uint64_t v65 = v29;
        uint64_t v59 = v36;
        uint64_t v60 = v35;
        uint64_t v61 = v34;
        uint64_t v62 = v33;
        uint64_t v63 = v32;
        uint64_t v39 = *v2;
        uint64_t v40 = v2[1];
        uint64_t v66 = *((unsigned char *)v2 + 16);
        uint64_t v41 = v2[3];
        uint64_t v42 = (void *)v2[4];
        uint64_t v43 = v2[5];
        char v44 = *((unsigned char *)v2 + 48);
        uint64_t v45 = *((unsigned char *)v2 + 49);
        char v46 = v2[7];
        uint64_t v47 = *((unsigned char *)v2 + 64);
        v72[3] = &type metadata for ShaderGraphMaterial;
        v72[4] = &protocol witness table for ShaderGraphMaterial;
        uint64_t v48 = v31;
        unint64_t v49 = swift_allocObject();
        v72[0] = v49;
        *(void *)(v49 + 16) = v39;
        *(void *)(v49 + 24) = v40;
        *(unsigned char *)(v49 + 32) = v66;
        uint64_t v67 = v42;
        *(void *)(v49 + 40) = v41;
        *(void *)(v49 + 48) = v42;
        *(void *)(v49 + 56) = v43;
        *(unsigned char *)(v49 + 64) = v44;
        *(unsigned char *)(v49 + 65) = v45;
        *(void *)(v49 + 72) = v46;
        *(unsigned char *)(v49 + 80) = v47;
        if (v48)
        {
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          char v22 = 0;
          long long v23 = 19;
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          char v22 = 0;
          uint64_t v15 = v65;
          long long v23 = 0;
          switch(v64)
          {
            case 1:
              break;
            case 2:
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              char v22 = 0;
              uint64_t v15 = v65;
              long long v23 = 2;
              break;
            case 3:
            case 6:
            case 12:
            case 16:
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              char v22 = 0;
              goto LABEL_27;
            case 4:
            case 5:
            case 7:
            case 13:
            case 14:
            case 17:
            case 18:
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              char v22 = 0;
              uint64_t v16 = v63;
              goto LABEL_27;
            case 8:
              uint64_t v21 = 0;
              char v22 = 0;
              uint64_t v17 = v62;
              uint64_t v16 = v63;
              uint64_t v19 = v60;
              uint64_t v18 = v61;
              uint64_t v20 = v59;
              goto LABEL_27;
            case 9:
              uint64_t v17 = v62;
              uint64_t v16 = v63;
              uint64_t v19 = v60;
              uint64_t v18 = v61;
              uint64_t v20 = v59;
              char v22 = v55;
              uint64_t v21 = v56;
LABEL_27:
              long long v23 = v64;
              break;
            case 10:
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              char v22 = 0;
              uint64_t v15 = v65 & 1;
              long long v23 = 10;
              break;
            case 11:
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              char v22 = 0;
              uint64_t v15 = v65;
              long long v23 = 11;
              break;
            case 15:
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              char v22 = 0;
              uint64_t v15 = v65;
              long long v23 = 15;
              break;
            default:
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              char v22 = 0;
              uint64_t v17 = v62;
              uint64_t v18 = v61;
              long long v23 = 1;
              uint64_t v16 = v63;
              break;
          }
        }
        uint64_t v14 = v68 + 2;
        long long v24 = v23;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v72, (uint64_t)&type metadata for ShaderGraphMaterial);
        uint64_t v73 = v15;
        uint64_t v74 = v16;
        uint64_t v75 = v17;
        uint64_t v76 = v18;
        unint64_t v77 = v19;
        Swift::String v78 = v20;
        uint64_t v79 = v21;
        uint64_t v80 = v22;
        uint64_t v81 = v24;
        swift_bridgeObjectRetain();
        uint64_t v25 = v67;
        swift_retain();
        swift_bridgeObjectRetain();
        Material.subscript.setter((uint64_t)&v73, v70, v69, (uint64_t)&type metadata for ShaderGraphMaterial, (uint64_t)&protocol witness table for ShaderGraphMaterial);
        uint64_t v2 = v57;
        specialized Material.parameters.setter(v72);
        uint64_t v13 = v71 - 1;
        uint64_t v3 = v58;
      }
      while (v71 != 1);
    }
    swift_bridgeObjectRelease();
  }
  return outlined destroy of MaterialParameters((uint64_t)v3);
}

BOOL static CustomMaterial.CustomParameterError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CustomMaterial.CustomParameterError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance CustomMaterial.CustomParameterError()
{
  return MEMORY[0x270EEE940]();
}

uint64_t CustomMaterial.customParameters.getter@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for CustomMaterial;
  a1[4] = (uint64_t)&protocol witness table for CustomMaterial;
  uint64_t v3 = swift_allocObject();
  *a1 = v3;

  return outlined init with copy of CustomMaterial(v1, v3 + 16);
}

uint64_t sub_228095180()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((unint64_t)(*(void *)(v0 + 80) - 1) >= 2) {
    swift_release();
  }
  outlined consume of CustomMaterial.CustomUniformsState(*(void **)(v0 + 96), *(void **)(v0 + 104), *(unsigned char *)(v0 + 112));
  if (*(void *)(v0 + 144)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  }
  swift_release();
  if (*(void *)(v0 + 208))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 256))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((unint64_t)(*(void *)(v0 + 304) - 1) >= 3) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 346, 7);
}

uint64_t key path setter for CustomMaterial.customParameters : CustomMaterial(uint64_t a1)
{
  outlined init with copy of UniformParameters(a1, (uint64_t)v3);
  outlined init with copy of MaterialParameters((uint64_t)v3, (uint64_t)v2);
  specialized Material.parameters.setter(v2);
  return outlined destroy of UniformParameters((uint64_t)v3);
}

uint64_t CustomMaterial.customParameters.setter(uint64_t a1)
{
  outlined init with copy of MaterialParameters(a1, (uint64_t)v3);
  specialized Material.parameters.setter(v3);
  return outlined destroy of UniformParameters(a1);
}

uint64_t outlined destroy of UniformParameters(uint64_t a1)
{
  return a1;
}

void (*CustomMaterial.customParameters.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  v3[3] = &type metadata for CustomMaterial;
  v3[4] = &protocol witness table for CustomMaterial;
  uint64_t v4 = swift_allocObject();
  *uint64_t v3 = v4;
  outlined init with copy of CustomMaterial(v1, v4 + 16);
  return CustomMaterial.customParameters.modify;
}

void CustomMaterial.customParameters.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (void *)(*a1 + 40);
  if (a2)
  {
    outlined init with copy of UniformParameters(*a1, (uint64_t)v3);
    outlined init with copy of MaterialParameters((uint64_t)v3, (uint64_t)(v2 + 10));
    specialized Material.parameters.setter(v2 + 10);
    outlined destroy of UniformParameters((uint64_t)v3);
  }
  else
  {
    outlined init with copy of MaterialParameters(*a1, (uint64_t)v3);
    specialized Material.parameters.setter(v3);
  }
  outlined destroy of UniformParameters((uint64_t)v2);

  free(v2);
}

uint64_t outlined init with copy of UniformParameters(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t CustomMaterial.getCustomParameter(name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  strcpy((char *)v8, "customParams.");
  HIWORD(v8[0]) = -4864;
  String.append(_:)(*(Swift::String *)&a1);
  void v10[3] = &type metadata for CustomMaterial;
  v10[4] = &protocol witness table for CustomMaterial;
  v10[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v3, v10[0] + 16);
  __swift_project_boxed_opaque_existential_1(v10, (uint64_t)&type metadata for CustomMaterial);
  Material.subscript.getter(*(uint64_t *)&v8[0], *((uint64_t *)&v8[0] + 1), (uint64_t)&type metadata for CustomMaterial, (uint64_t)v8);
  if (v9 == 255)
  {
    swift_bridgeObjectRelease();
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(unsigned char *)(a2 + 64) = -1;
  }
  else
  {
    v6[0] = v8[0];
    v6[1] = v8[1];
    v6[2] = v8[2];
    v6[3] = v8[3];
    unsigned __int8 v7 = v9;
    MaterialParameters.Value.init(_:)((uint64_t *)v6, a2);
    swift_bridgeObjectRelease();
  }
  return outlined destroy of MaterialParameters((uint64_t)v10);
}

void CustomMaterial.setCustomParameter(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)a3;
  uint64_t v30 = *(void *)(a3 + 8);
  uint64_t v47 = *(void *)(a3 + 16);
  uint64_t v26 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(a3 + 40);
  uint64_t v28 = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(a3 + 48);
  uint64_t v6 = *(void *)(a3 + 56);
  int v8 = *(unsigned __int8 *)(a3 + 64);
  strcpy((char *)&v32, "customParams.");
  HIWORD(v32) = -4864;
  String.append(_:)(*(Swift::String *)&a1);
  long long v9 = v32;
  if (v8 == 255)
  {
    uint64_t v45 = &type metadata for CustomMaterial;
    char v46 = &protocol witness table for CustomMaterial;
    v44[0] = swift_allocObject();
    outlined init with copy of CustomMaterial(v3, v44[0] + 16);
    *(void *)&long long v38 = v4;
    *((void *)&v38 + 1) = v30;
    *(void *)&long long v39 = v47;
    *((void *)&v39 + 1) = v26;
    *(void *)&long long v40 = v28;
    *((void *)&v40 + 1) = v5;
    uint64_t v41 = v7;
    uint64_t v42 = v6;
    char v43 = -1;
    __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v38, (uint64_t)&v32);
    long long v29 = v33;
    long long v31 = v32;
    long long v27 = v34;
    uint64_t v16 = v35;
    uint64_t v17 = v36;
    char v18 = v37;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v44, (uint64_t)&type metadata for CustomMaterial);
    long long v38 = v31;
    long long v39 = v29;
    long long v40 = v27;
    uint64_t v41 = v16;
    uint64_t v42 = v17;
    char v43 = v18;
    Material.subscript.setter((uint64_t)&v38, v9, *((uint64_t *)&v9 + 1), (uint64_t)&type metadata for CustomMaterial, (uint64_t)&protocol witness table for CustomMaterial);
    specialized Material.parameters.setter(v44);
  }
  else
  {
    outlined init with copy of CustomMaterial(v3, (uint64_t)&v32);
    swift_beginAccess();
    String.utf8CString.getter();
    uint64_t v10 = v47;
    uint64_t v25 = v5;
    outlined copy of MaterialParameters.Value(v4, v30, v47, v26, v28, v5, v7, v6, v8);
    int ParameterType = REMaterialAssetGetParameterType();
    swift_release();
    if (ParameterType)
    {
      *(void *)&long long v38 = v4;
      *((void *)&v38 + 1) = v30;
      *(void *)&long long v39 = v10;
      *((void *)&v39 + 1) = v26;
      *(void *)&long long v40 = v28;
      *((void *)&v40 + 1) = v5;
      uint64_t v41 = v7;
      uint64_t v42 = v6;
      char v43 = v8;
      if (ParameterType == MaterialParameters.Value.getMaterialParameterType()())
      {
        outlined destroy of CustomMaterial((uint64_t)&v32);
        uint64_t v45 = &type metadata for CustomMaterial;
        char v46 = &protocol witness table for CustomMaterial;
        v44[0] = swift_allocObject();
        outlined init with copy of CustomMaterial(v3, v44[0] + 16);
        *(void *)&long long v38 = v4;
        *((void *)&v38 + 1) = v30;
        *(void *)&long long v39 = v10;
        *((void *)&v39 + 1) = v26;
        *(void *)&long long v40 = v28;
        *((void *)&v40 + 1) = v5;
        uint64_t v41 = v7;
        uint64_t v42 = v6;
        char v43 = v8;
        __RKMaterialParameterBlock.Parameter.init(_:)((uint64_t)&v38, (uint64_t)&v32);
        long long v23 = v33;
        long long v24 = v32;
        long long v22 = v34;
        uint64_t v13 = v35;
        uint64_t v12 = v36;
        char v14 = v37;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v44, (uint64_t)&type metadata for CustomMaterial);
        long long v38 = v24;
        long long v39 = v23;
        long long v40 = v22;
        uint64_t v41 = v13;
        uint64_t v42 = v12;
        char v43 = v14;
        uint64_t v15 = v47;
        outlined copy of MaterialParameters.Value(v4, v30, v47, v26, v28, v25, v7, v6, v8);
        Material.subscript.setter((uint64_t)&v38, v9, *((uint64_t *)&v9 + 1), (uint64_t)&type metadata for CustomMaterial, (uint64_t)&protocol witness table for CustomMaterial);
        specialized Material.parameters.setter(v44);
        outlined consume of MaterialParameters.Value?(v4, v30, v15, v26, v28, v25, v7, v6, v8);
        return;
      }
      uint64_t v19 = v30;
      char v20 = 0;
    }
    else
    {
      uint64_t v19 = v30;
      char v20 = 1;
    }
    lazy protocol witness table accessor for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError();
    swift_allocError();
    *uint64_t v21 = v20;
    swift_willThrow();
    outlined destroy of CustomMaterial((uint64_t)&v32);
    swift_bridgeObjectRelease();
    outlined consume of MaterialParameters.Value?(v4, v19, v47, v26, v28, v5, v7, v6, v8);
  }
}

void CustomMaterial.CustomUniformsState.withSharedBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(v3 + 16))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v7 = *(void **)v3;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(unsigned char *)(v3 + 16) = 2;
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      id v8 = v7;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      uint64_t v7 = (void *)REDirectParameterBufferCopy();
    }
    long long v9 = *(void **)v3;
    uint64_t v10 = *(void **)(v3 + 8);
    char v11 = *(unsigned char *)(v3 + 16);
    id v12 = v7;
    specialized CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:)(v12, a1, a2, a3);

    outlined consume of CustomMaterial.CustomUniformsState(v9, v10, v11);
    *(void *)uint64_t v3 = v12;
    *(void *)(v3 + 8) = 0;
    *(unsigned char *)(v3 + 16) = 0;
  }
}

void CustomMaterial.CustomUniformsState.withUniqueGeometryBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(v3 + 16) == 1)
  {
    uint64_t v7 = *(void **)v3;
    uint64_t v8 = *(void *)(v3 + 8);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(unsigned char *)(v3 + 16) = 2;
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      id v9 = v7;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      uint64_t v7 = (void *)REDirectParameterBufferCopy();
    }
    uint64_t v10 = *(void **)v3;
    char v11 = *(void **)(v3 + 8);
    char v12 = *(unsigned char *)(v3 + 16);
    id v13 = v7;
    specialized CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:)(v13, a1, a2, a3);

    outlined consume of CustomMaterial.CustomUniformsState(v10, v11, v12);
    *(void *)uint64_t v3 = v13;
    *(void *)(v3 + 8) = v8;
    *(unsigned char *)(v3 + 16) = 1;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void CustomMaterial.CustomUniformsState.withUniqueSurfaceBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(v3 + 16) == 1)
  {
    uint64_t v8 = *(void **)v3;
    uint64_t v7 = *(void **)(v3 + 8);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(unsigned char *)(v3 + 16) = 2;
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      id v9 = v7;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      uint64_t v7 = (void *)REDirectParameterBufferCopy();
    }
    uint64_t v10 = *(void **)v3;
    char v11 = *(void **)(v3 + 8);
    char v12 = *(unsigned char *)(v3 + 16);
    id v13 = v7;
    specialized CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:)(v13, a1, a2, a3);

    outlined consume of CustomMaterial.CustomUniformsState(v10, v11, v12);
    *(void *)uint64_t v3 = v8;
    *(void *)(v3 + 8) = v13;
    *(unsigned char *)(v3 + 16) = 1;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

Swift::Void __swiftcall CustomMaterial.CustomUniformsState.convertToSharedWithSize(size:)(Swift::Int size)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void **)(v1 + 8);
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    outlined consume of CustomMaterial.CustomUniformsState(*(void **)v1, *(void **)(v1 + 8), 1);
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    *(void *)uint64_t v1 = REDirectParameterBufferCreateWithSize();
  }
  else
  {
    if (*(unsigned char *)(v1 + 16)) {
      return;
    }
    outlined copy of CustomMaterial.CustomUniformsState(*(id *)v1, *(void **)(v1 + 8), 0);
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    if (REDirectParameterBufferGetSize() >= size)
    {

      return;
    }
    outlined consume of CustomMaterial.CustomUniformsState(v3, v4, 0);
    *(void *)uint64_t v1 = 0;
    *(void *)(v1 + 8) = 0;
    *(unsigned char *)(v1 + 16) = 2;
    if (swift_isUniquelyReferenced_nonNull())
    {
      id v5 = v3;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      REDirectParameterBufferResize();

      *(void *)uint64_t v1 = v3;
    }
    else
    {
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      uint64_t v6 = REDirectParameterBufferCreateWithSize();

      *(void *)uint64_t v1 = v6;
    }
  }
  *(void *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 16) = 0;
}

Swift::Void __swiftcall CustomMaterial.CustomUniformsState.convertToUniqueWithGeomSize(size:)(Swift::Int size)
{
  uint64_t v3 = *(void **)v1;
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    uint64_t v4 = *(void **)(v1 + 8);
    outlined copy of CustomMaterial.CustomUniformsState(*(id *)v1, v4, 1);
    id v5 = v3;
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    Swift::Int v6 = REDirectParameterBufferGetSize();

    if (v6 >= size)
    {

      return;
    }
    outlined consume of CustomMaterial.CustomUniformsState(v3, v4, 1);
    *(void *)uint64_t v1 = 0;
    *(void *)(v1 + 8) = 0;
    *(unsigned char *)(v1 + 16) = 2;
    if (swift_isUniquelyReferenced_nonNull())
    {
      id v5 = v5;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      REDirectParameterBufferResize();
    }
    else
    {
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      uint64_t v3 = (void *)REDirectParameterBufferCreateWithSize();
    }

    *(void *)uint64_t v1 = v3;
    *(void *)(v1 + 8) = v4;
  }
  else
  {
    if (*(unsigned char *)(v1 + 16)) {
      return;
    }
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    *(void *)uint64_t v1 = REDirectParameterBufferCreateWithSize();
    *(void *)(v1 + 8) = v3;
  }
  *(unsigned char *)(v1 + 16) = 1;
}

Swift::Void __swiftcall CustomMaterial.CustomUniformsState.convertToUniqueWithSurfSize(size:)(Swift::Int size)
{
  id v3 = *(id *)v1;
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    id v5 = *(void **)(v1 + 8);
    outlined copy of CustomMaterial.CustomUniformsState(*(id *)v1, v5, 1);
    id v6 = v5;
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    Swift::Int v7 = REDirectParameterBufferGetSize();

    if (v7 >= size)
    {

      return;
    }
    outlined consume of CustomMaterial.CustomUniformsState(v3, v5, 1);
    *(void *)uint64_t v1 = 0;
    *(void *)(v1 + 8) = 0;
    *(unsigned char *)(v1 + 16) = 2;
    if (swift_isUniquelyReferenced_nonNull())
    {
      id v6 = v6;
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      REDirectParameterBufferResize();
    }
    else
    {
      specialized static __ServiceLocator.shared.getter();
      swift_beginAccess();
      id v5 = (void *)REDirectParameterBufferCreateWithSize();
    }

    *(void *)uint64_t v1 = v3;
    *(void *)(v1 + 8) = v5;
  }
  else
  {
    if (*(unsigned char *)(v1 + 16)) {
      return;
    }
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    uint64_t v4 = REDirectParameterBufferCreateWithSize();
    *(void *)uint64_t v1 = v3;
    *(void *)(v1 + 8) = v4;
  }
  *(unsigned char *)(v1 + 16) = 1;
}

uint64_t CustomMaterial.ResourceStorage.subscript.getter()
{
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v0 & 1) != 0 || (uint64_t TextureAssetAtOffset = REDirectParameterBufferGetTextureAssetAtOffset()) == 0)
  {
    uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v4, (uint64_t)v6);
    uint64_t v3 = closure #1 in static TextureResource.builtinTexture(named:)(v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    uint64_t v2 = TextureAssetAtOffset;
    type metadata accessor for TextureResource();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  return v3;
}

uint64_t CustomMaterial.ResourceStorage.subscript.setter()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v5)
  {
    Logger.init()();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_227DD2000, v8, v9, "Attempted to assign texture to invalid key path", v10, 2u);
      MEMORY[0x22A696500](v10, -1, -1);
    }
    swift_release();
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    id v6 = *v0;
    REDirectParameterBufferSetTextureAssetAtOffset();

    swift_release();
    return swift_release();
  }
}

uint64_t (*CustomMaterial.ResourceStorage.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = CustomMaterial.ResourceStorage.subscript.getter();
  return CustomMaterial.ResourceStorage.subscript.modify;
}

uint64_t CustomMaterial.ResourceStorage.subscript.modify(uint64_t a1, char a2)
{
  swift_retain();
  if ((a2 & 1) == 0) {
    return CustomMaterial.ResourceStorage.subscript.setter();
  }
  swift_retain();
  CustomMaterial.ResourceStorage.subscript.setter();

  return swift_release();
}

void CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::Int v9 = *(void *)(*(void *)(a5 - 8) + 64);
  if (*a2 == 1)
  {
    CustomMaterial.CustomUniformsState.convertToUniqueWithSurfSize(size:)(v9);
    MEMORY[0x270FA5388](v10);
    uint64_t v13 = a5;
    uint64_t v14 = a1;
    uint64_t v15 = a3;
    uint64_t v16 = a4;
    CustomMaterial.CustomUniformsState.withUniqueSurfaceBytes<A>(_:)((uint64_t)partial apply for closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:), (uint64_t)v12, a5);
  }
  else
  {
    CustomMaterial.CustomUniformsState.convertToUniqueWithGeomSize(size:)(v9);
    MEMORY[0x270FA5388](v11);
    uint64_t v13 = a5;
    uint64_t v14 = a1;
    uint64_t v15 = a3;
    uint64_t v16 = a4;
    CustomMaterial.CustomUniformsState.withUniqueGeometryBytes<A>(_:)((uint64_t)partial apply for closure #2 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:), (uint64_t)v12, a5);
  }
}

void CustomMaterial.withMutableUniforms<A>(ofType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CustomMaterial.CustomUniformsState.convertToSharedWithSize(size:)(*(void *)(*(void *)(a4 - 8) + 64));
  v8[2] = a4;
  v8[3] = a1;
  _OWORD v8[4] = a2;
  uint64_t v8[5] = a3;
  CustomMaterial.CustomUniformsState.withSharedBytes<A>(_:)((uint64_t)partial apply for closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:_:), (uint64_t)v8, a4);
}

uint64_t closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, uint64_t (*a5)(uint64_t, id *), uint64_t a6, uint64_t a7)
{
  if (a1)
  {
    uint64_t v9 = *(void *)(*(void *)(a7 - 8) + 72);
    if (v9)
    {
      if (a2 - a1 != 0x8000000000000000 || v9 != -1)
      {
        uint64_t v10 = (a2 - a1) / v9;
        goto LABEL_7;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v10 = 0;
LABEL_7:
  uint64_t v11 = MEMORY[0x22A689560](a1, v10, a7);
  if (v11) {
    return a5(v11, a3);
  }
LABEL_11:

  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError;
  if (!lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError;
  if (!lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.CustomParameterError and conformance CustomMaterial.CustomParameterError);
  }
  return result;
}

uint64_t partial apply for closure #2 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(uint64_t a1, uint64_t a2, id *a3)
{
  return closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(a1, a2, a3, *(void *)(v3 + 24), *(uint64_t (**)(uint64_t, id *))(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 16));
}

uint64_t partial apply for closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(uint64_t a1, uint64_t a2, id *a3)
{
  return closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(a1, a2, a3, *(void *)(v3 + 24), *(uint64_t (**)(uint64_t, id *))(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 16));
}

uint64_t partial apply for closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:_:)(uint64_t a1, uint64_t a2, id *a3)
{
  return closure #1 in CustomMaterial.withMutableUniforms<A>(ofType:stage:_:)(a1, a2, a3, *(void *)(v3 + 24), *(uint64_t (**)(uint64_t, id *))(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type CustomShaderStage and conformance CustomShaderStage()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomShaderStage and conformance CustomShaderStage;
  if (!lazy protocol witness table cache variable for type CustomShaderStage and conformance CustomShaderStage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomShaderStage and conformance CustomShaderStage);
  }
  return result;
}

uint64_t sub_228096A08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = (uint64_t)&type metadata for CustomMaterial;
  a2[4] = (uint64_t)&protocol witness table for CustomMaterial;
  uint64_t v4 = swift_allocObject();
  *a2 = v4;

  return outlined init with copy of CustomMaterial(a1, v4 + 16);
}

ValueMetadata *type metadata accessor for CustomMaterial.CustomParameterError()
{
  return &type metadata for CustomMaterial.CustomParameterError;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.ResourceStorage(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.ResourceStorage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CustomMaterial.ResourceStorage()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for CustomMaterial.CustomParameterError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228096BF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomShaderStage()
{
  return &type metadata for CustomShaderStage;
}

void destroy for CustomMaterial.CustomUniformsState(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CustomMaterial.CustomUniformsState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CustomMaterial.CustomUniformsState(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.CustomUniformsState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CustomMaterial.CustomUniformsState(*(id *)a2, v4, v5);
  unsigned int v6 = *(void **)a1;
  Swift::Int v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of CustomMaterial.CustomUniformsState(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CustomMaterial.CustomUniformsState(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  unsigned int v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of CustomMaterial.CustomUniformsState(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for CustomMaterial.CustomUniformsState()
{
  return &type metadata for CustomMaterial.CustomUniformsState;
}

uint64_t sub_228096D3C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 81, 7);
}

void specialized CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  id v8 = (id)REDirectParameterBufferGetDirectBuffer();
  DRBufferSetBytesUsed();
  uint64_t v15 = a1;
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a4;
  v9[3] = a2;
  _OWORD v9[4] = a3;
  v9[5] = &v15;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:);
  *(void *)(v10 + 24) = v9;
  v14[4] = _sSvSuIgyy_SvSuIegyy_TRTA_0;
  uint64_t v14[5] = v10;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 1107296256;
  void v14[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v14[3] = &block_descriptor_19;
  uint64_t v11 = _Block_copy(v14);
  id v12 = a1;
  swift_retain();
  swift_release();
  DRBufferUpdate();

  _Block_release(v11);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (a1)
  {
    __break(1u);
  }
  else
  {
    Swift::String v13 = v15;
    swift_release();
  }
}

uint64_t sub_228096F4C()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in CustomMaterial.CustomUniformsState.updateDirectBufferForData<A>(data:_:)(uint64_t result, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(v2 + 24))(result, result + a2, *(void *)(v2 + 40));
  }
  __break(1u);
  return result;
}

uint64_t sub_228096F98()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sSvSuIgyy_SvSuIegyy_TRTA_0(uint64_t a1, uint64_t a2)
{
  return thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ()(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t __RKLightTrigger.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(unsigned char *)(result + 18) = 0;
  return result;
}

uint64_t __RKLightTrigger.init()()
{
  uint64_t result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 18) = 0;
  return result;
}

uint64_t __RKLightTrigger.deinit()
{
  return v0;
}

uint64_t __RKLightTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKLightTrigger()
{
  return self;
}

double TextComponent.size.getter()
{
  return *(double *)v0;
}

void TextComponent.size.setter(double a1, double a2)
{
  if (a1 > 2048.0) {
    a1 = 2048.0;
  }
  if (a2 > 2048.0) {
    a2 = 2048.0;
  }
  *uint64_t v2 = a1;
  v2[1] = a2;
}

int8x16_t (*TextComponent.size.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return TextComponent.size.modify;
}

int8x16_t TextComponent.size.modify(uint64_t a1)
{
  float64x2_t v1 = (float64x2_t)vdupq_n_s64(0x40A0000000000000uLL);
  int8x16_t result = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)a1, v1), (int8x16_t)v1, *(int8x16_t *)a1);
  *(int8x16_t *)*(void *)(a1 + 16) = result;
  return result;
}

uint64_t TextComponent.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TextComponent() + 20);

  return outlined init with copy of AttributedString?(v3, a1);
}

uint64_t type metadata accessor for TextComponent()
{
  uint64_t result = type metadata singleton initialization cache for TextComponent;
  if (!type metadata singleton initialization cache for TextComponent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of AttributedString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TextComponent.text.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TextComponent() + 20);

  return outlined assign with take of AttributedString?(a1, v3);
}

uint64_t outlined assign with take of AttributedString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*TextComponent.text.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void *TextComponent.backgroundColor.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for TextComponent() + 24));
  id v2 = v1;
  return v1;
}

void TextComponent.backgroundColor.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for TextComponent() + 24);

  *(void *)(v1 + v3) = a1;
}

uint64_t (*TextComponent.backgroundColor.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float TextComponent.cornerRadius.getter()
{
  return *(float *)(v0 + *(int *)(type metadata accessor for TextComponent() + 28));
}

uint64_t TextComponent.cornerRadius.setter(float a1)
{
  uint64_t result = type metadata accessor for TextComponent();
  *(float *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*TextComponent.cornerRadius.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float TextComponent.coreEdgeInsets.getter()
{
  return *(float *)(v0 + *(int *)(type metadata accessor for TextComponent() + 32));
}

uint64_t TextComponent.coreEdgeInsets.setter(float a1, float a2, float a3, float a4)
{
  uint64_t result = type metadata accessor for TextComponent();
  uint64_t v10 = (float *)(v4 + *(int *)(result + 32));
  *uint64_t v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  void v10[3] = a4;
  return result;
}

uint64_t (*TextComponent.coreEdgeInsets.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t TextComponent.init()@<X0>(void *a1@<X8>)
{
  id v2 = (int *)type metadata accessor for TextComponent();
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = (char *)a1 + v2[5];
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(void *)((char *)a1 + v2[6]) = 0;
  *(_DWORD *)((char *)a1 + v2[7]) = 0;
  char v6 = (void *)((char *)a1 + v2[8]);
  *char v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t static TextComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TextComponent();
  id v8 = (int *)(v7 - 8);
  __n128 v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (double *)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *a1;
  *uint64_t v11 = 0.0;
  v11[1] = 0.0;
  uint64_t v13 = (uint64_t)v11 + v8[7];
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
  v30(v13, 1, 1, v3, v9);
  uint64_t v14 = v8[8];
  *(double *)((char *)v11 + v14) = 0.0;
  uint64_t v31 = v8[9];
  *(_DWORD *)((char *)v11 + v31) = 0;
  uint64_t v15 = (char *)v11 + v8[10];
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  RETextComponentGetSize();
  if (v16 > 2048.0) {
    double v16 = 2048.0;
  }
  if (v17 > 2048.0) {
    double v17 = 2048.0;
  }
  *uint64_t v11 = v16;
  v11[1] = v17;
  id v18 = (id)RETextComponentGetAttributedString();
  AttributedString.init(_:)();
  outlined destroy of BodyTrackingComponent?(v13, &demangling cache variable for type metadata for AttributedString?);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v13, v6, v3);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v30)(v13, 0, 1, v3);
  id v19 = (id)RETextComponentGetBackgroundColor();

  *(void *)((char *)v11 + v14) = v19;
  RETextComponentGetCornerRadius();
  *(_DWORD *)((char *)v11 + v31) = v20;
  float v21 = MEMORY[0x22A692E90](v12);
  int v23 = v22;
  int v25 = v24;
  int v27 = v26;

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(float *)uint64_t v15 = v21;
  *((_DWORD *)v15 + 1) = v23;
  *((_DWORD *)v15 + 2) = v25;
  *((_DWORD *)v15 + 3) = v27;
  outlined init with copy of TextComponent((uint64_t)v11, v32);
  return outlined destroy of TextComponent((uint64_t)v11);
}

uint64_t outlined init with copy of TextComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextComponent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TextComponent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TextComponent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t TextComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TextComponent();
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  MEMORY[0x270FA5388](v7 - 8);
  __n128 v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  RETextComponentSetSize();
  outlined init with copy of AttributedString?(v2 + *(int *)(v4 + 20), (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    AttributedString.init(stringLiteral:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for AttributedString?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  }
  type metadata accessor for NSAttributedString();
  uint64_t v15 = NSAttributedString.init(_:)();
  MEMORY[0x22A692EB0](v14, v15);
  double v16 = *(void **)(v2 + *(int *)(v4 + 24));
  if (v16)
  {
    CGColorRef GenericGray = *(CGColorRef *)(v2 + *(int *)(v4 + 24));
  }
  else
  {
    CGColorRef GenericGray = CGColorCreateGenericGray(1.0, 0.0);
    double v16 = 0;
  }
  id v18 = v16;
  MEMORY[0x22A692EC0](v14, GenericGray);

  RETextComponentSetCornerRadius();
  RETextComponentSetEdgeInsets();
  outlined init with copy of TextComponent(v2, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextComponentRender);
  if (swift_dynamicCast())
  {
    outlined init with take of BindableDataInternal(&aBlock, (uint64_t)v26);
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    swift_getDynamicType();
    uint64_t v24 = (*(uint64_t (**)(void))(v26[4] + 8))();
    uint64_t v25 = v19;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v23 = thunk for @escaping @callee_guaranteed (@guaranteed CGContextRef, @guaranteed CFAttributedStringRef, @unowned CGRect, @guaranteed CGColorRef, @unowned CGSize) -> ();
    *((void *)&v23 + 1) = &block_descriptor_20;
    int v20 = _Block_copy(&aBlock);
    swift_release();
    RETextComponentSetRenderBlock();
    _Block_release(v20);

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    uint64_t v24 = 0;
    long long aBlock = 0u;
    long long v23 = 0u;

    return outlined destroy of BodyTrackingComponent?((uint64_t)&aBlock, &demangling cache variable for type metadata for TextComponentRender?);
  }
}

unint64_t type metadata accessor for NSAttributedString()
{
  unint64_t result = lazy cache variable for type metadata for NSAttributedString;
  if (!lazy cache variable for type metadata for NSAttributedString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CGContextRef, @guaranteed CFAttributedStringRef, @unowned CGRect, @guaranteed CGColorRef, @unowned CGSize) -> ()(uint64_t a1, void *a2, void *a3, void *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v19 = *(void (**)(id, id, id, double, double, double, double, double, double))(a1 + 32);
  swift_retain();
  id v22 = a2;
  id v20 = a3;
  id v21 = a4;
  v19(v22, v20, v21, a5, a6, a7, a8, a9, a10);
  swift_release();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

void static TextComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2027;
}

void protocol witness for static Component.__coreComponentType.getter in conformance TextComponent(_DWORD *a1@<X8>)
{
  *a1 = 2027;
}

__n128 sub_228097D7C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

int8x16_t sub_228097D88(float64x2_t *a1, int8x16_t *a2)
{
  float64x2_t v2 = (float64x2_t)vdupq_n_s64(0x40A0000000000000uLL);
  int8x16_t result = vbslq_s8((int8x16_t)vcgtq_f64(*a1, v2), (int8x16_t)v2, *(int8x16_t *)a1);
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of static TextComponentRender.renderBlock.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t *initializeBufferWithCopyOfBuffer for TextComponent(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    __n128 v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for AttributedString();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    double v16 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = (uint64_t)v16;
    *(_DWORD *)((char *)v4 + v15) = *(_DWORD *)((char *)a2 + v15);
    *(_OWORD *)((char *)v4 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
    id v17 = v16;
  }
  return v4;
}

void destroy for TextComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = *(void **)(a1 + *(int *)(a2 + 24));
}

_OWORD *initializeWithCopy for TextComponent(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void **)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v14;
  *(_DWORD *)((char *)a1 + v13) = *(_DWORD *)((char *)a2 + v13);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  id v15 = v14;
  return a1;
}

void *assignWithCopy for TextComponent(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  double v16 = *(void **)((char *)a1 + v15);
  id v17 = *(void **)((char *)a2 + v15);
  *(void *)((char *)a1 + v15) = v17;
  id v18 = v17;

  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  uint64_t v19 = a3[8];
  id v20 = (_DWORD *)((char *)a1 + v19);
  id v21 = (_DWORD *)((char *)a2 + v19);
  *id v20 = *v21;
  v20[1] = v21[1];
  _OWORD v20[2] = v21[2];
  void v20[3] = v21[3];
  return a1;
}

_OWORD *initializeWithTake for TextComponent(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_DWORD *)((char *)a1 + v12) = *(_DWORD *)((char *)a2 + v12);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

_OWORD *assignWithTake for TextComponent(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  double v16 = *(void **)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);

  uint64_t v17 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22809865C);
}

uint64_t sub_22809865C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TextComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228098744);
}

uint64_t sub_228098744(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = a2;
  }
  return result;
}

void type metadata completion function for TextComponent()
{
  type metadata accessor for AttributedString?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for AttributedString?()
{
  if (!lazy cache variable for type metadata for AttributedString?)
  {
    type metadata accessor for AttributedString();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?);
    }
  }
}

Swift::Void __swiftcall AudioGeneratorController.play()()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  if (swift_weakLoadStrong() && (uint64_t v2 = specialized HasHierarchy.parent.getter(), swift_release(), swift_release(), v2))
  {
    if (*(void *)(v0 + 72))
    {
LABEL_4:
      REAudioPlayerComponentPlayToken();
      RENetworkMarkComponentDirty();
      return;
    }
  }
  else
  {
    static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log();
    uint64_t v3 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    if (*(void *)(v1 + 72)) {
      goto LABEL_4;
    }
  }
  static os_log_type_t.error.getter();
  type metadata accessor for OS_os_log();
  uint64_t v4 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
}

uint64_t AudioGeneratorController.entity.getter()
{
  return swift_weakLoadStrong();
}

uint64_t AudioGeneratorController.configuration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[7];
  uint64_t v2 = v1[8];
  *a1 = v1[6];
  a1[1] = v3;
  a1[2] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutablePointer<ObjCBool>, @unowned UnsafePointer<AudioTimeStamp>, @unowned UInt32, @unowned UnsafeMutablePointer<AudioBufferList>) -> (@unowned Int32)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v10 = v9(a2, a3, a4, a5);
  swift_release();
  return v10;
}

uint64_t AudioGeneratorController.deinit()
{
  MEMORY[0x22A68C6D0](*(void *)(v0 + 24), *(void *)(v0 + 72));
  RENetworkMarkComponentDirty();
  swift_weakDestroy();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioGeneratorController.__deallocating_deinit()
{
  MEMORY[0x22A68C6D0](*(void *)(v0 + 24), *(void *)(v0 + 72));
  RENetworkMarkComponentDirty();
  swift_weakDestroy();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

double AudioGeneratorController.gain.getter()
{
  REAudioPlayerComponentGetDecibelGainForToken();
  return v0;
}

uint64_t key path setter for AudioGeneratorController.gain : AudioGeneratorController(double *a1)
{
  double v1 = *a1;
  REAudioPlayerComponentGetDecibelGainForToken();
  double v3 = v2;
  uint64_t result = REAudioPlayerComponentSetDecibelGainForToken();
  if (v1 != v3)
  {
    return RENetworkMarkComponentDirty();
  }
  return result;
}

uint64_t AudioGeneratorController.gain.setter(double a1)
{
  REAudioPlayerComponentGetDecibelGainForToken();
  double v3 = v2;
  uint64_t result = REAudioPlayerComponentSetDecibelGainForToken();
  if (v3 != a1)
  {
    return RENetworkMarkComponentDirty();
  }
  return result;
}

uint64_t (*AudioGeneratorController.gain.modify(uint64_t a1))(double *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(a1 + 8) = v1;
  *(void *)(a1 + 16) = v3;
  REAudioPlayerComponentGetDecibelGainForToken();
  *(double *)a1 = v4;
  return AudioGeneratorController.gain.modify;
}

uint64_t AudioGeneratorController.gain.modify(double *a1)
{
  double v1 = *a1;
  REAudioPlayerComponentGetDecibelGainForToken();
  double v3 = v2;
  uint64_t result = REAudioPlayerComponentSetDecibelGainForToken();
  if (v1 != v3)
  {
    return RENetworkMarkComponentDirty();
  }
  return result;
}

uint64_t AudioGeneratorController.isPlaying.getter()
{
  return MEMORY[0x22A68C5A0](*(void *)(v0 + 24), *(void *)(v0 + 72));
}

Swift::Void __swiftcall AudioGeneratorController.stop()()
{
  MEMORY[0x22A68C6D0](*(void *)(v0 + 24), *(void *)(v0 + 72));

  RENetworkMarkComponentDirty();
}

uint64_t sub_228098E14@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_228098E64()
{
  return swift_weakAssign();
}

double sub_228098EB4@<D0>(double *a1@<X8>)
{
  REAudioPlayerComponentGetDecibelGainForToken();
  double result = v2;
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for AudioGeneratorController()
{
  return self;
}

uint64_t method lookup function for AudioGeneratorController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AudioGeneratorController);
}

uint64_t dispatch thunk of AudioGeneratorController.entity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

void specialized AudioGeneratorController.init(generatorRenderHandler:configuration:entity:)(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = v3;
  int v8 = *a3;
  int v7 = a3[1];
  uint64_t v10 = *((void *)a3 + 1);
  uint64_t v9 = *((void *)a3 + 2);
  swift_weakInit();
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = a2;
  *(_DWORD *)(v4 + 48) = v8;
  *(_DWORD *)(v4 + 52) = v7;
  *(void *)(v4 + 56) = v10;
  *(void *)(v4 + 64) = v9;
  swift_beginAccess();
  swift_weakAssign();
  swift_bridgeObjectRetain();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  *(void *)(v4 + 24) = REEntityGetOrAddComponentByClass();
  RERetain();
  REAudioGeneratorBlockConfigurationCreate();
  REAudioGeneratorBlockConfigurationSetLayoutTag();
  if (v9)
  {
    uint64_t v11 = (void *)MEMORY[0x22A688A50](v10, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
  }
  REAudioGeneratorBlockConfigurationSetMixGroupName();

  uint64_t v12 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12, (uint64_t)v18);
  int v13 = v19;
  uint64_t v14 = v20;
  __swift_project_boxed_opaque_existential_1(v18, (uint64_t)v19);
  (*(void (**)(void *, uint64_t))(v14 + 32))(v13, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  uint64_t v15 = *(void *)(v4 + 40);
  uint64_t v20 = *(void *)(v4 + 32);
  uint64_t v21 = v15;
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 1107296256;
  void v18[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutablePointer<ObjCBool>, @unowned UnsafePointer<AudioTimeStamp>, @unowned UInt32, @unowned UnsafeMutablePointer<AudioBufferList>) -> (@unowned Int32);
  uint64_t v19 = &block_descriptor_21;
  double v16 = _Block_copy(v18);
  swift_retain();
  swift_release();
  uint64_t v17 = REAudioGeneratorAssetCreateWithRenderBlock();
  _Block_release(v16);
  *(void *)(v4 + 80) = v17;
  if (v17)
  {
    *(void *)(v4 + 72) = REAudioPlayerComponentPrepareAsset();
    RENetworkMarkComponentDirty();
  }
  else
  {
    __break(1u);
  }
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t Scene.subscribe<A>(to:on:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, ValueMetadata *a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, 0, 0, 0, a2, a6, a3, a4, a5);
}

uint64_t Scene.subscribe<A>(to:on:componentType:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, ValueMetadata *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  return Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, a2, a3, 0, a4, a8, a5, a6, a7);
}

uint64_t Scene.publisher<A>(for:on:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2, 0, 0, 0, a3, a5, a4);
}

double PhysicsSimulationEvents.WillSimulate.deltaTime.getter()
{
  return *(double *)v0;
}

double PhysicsSimulationEvents.DidSimulate.deltaTime.getter()
{
  return *(double *)v0;
}

double SceneEvents.Update.deltaTime.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t SceneEvents.AnchoredStateChanged.isAnchored.getter()
{
  return *v0;
}

uint64_t SceneEvents.AnchoredStateChanged.anchor.getter()
{
  return swift_retain();
}

uint64_t SceneEvents.DidReparentEntity.child.getter()
{
  return swift_retain();
}

uint64_t SceneEvents.DidReparentEntity.previousParent.getter()
{
  return swift_retain();
}

float AnimationEvents.SkeletalPoseUpdateComplete.deltaTime.getter()
{
  return *(float *)v0;
}

uint64_t AudioEvents.PlaybackBegan.playbackController.getter()
{
  return swift_retain();
}

uint64_t AudioEvents.PlaybackCompleted.playbackController.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *double v1 = a1;
  return result;
}

uint64_t (*AudioEvents.PlaybackCompleted.playbackController.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 Contact.point.getter()
{
  return *(__n128 *)v0;
}

__n128 Contact.normal.getter()
{
  return v0[1];
}

float Contact.impulse.getter()
{
  return *(float *)(v0 + 32);
}

__n128 Contact.impulseDirection.getter()
{
  return v0[3];
}

float Contact.penetrationDistance.getter()
{
  return *(float *)(v0 + 64);
}

uint64_t CollisionEvents.Began.entityA.getter()
{
  return swift_retain();
}

uint64_t CollisionEvents.Began.entityB.getter()
{
  return swift_retain();
}

__n128 CollisionEvents.Began.position.getter()
{
  return v0[1];
}

float CollisionEvents.Began.impulse.getter()
{
  return *(float *)(v0 + 32);
}

uint64_t CollisionEvents.Ended.entityB.getter()
{
  return swift_retain();
}

float CollisionEvents.Began.penetrationDistance.getter()
{
  return *(float *)(v0 + 64);
}

__n128 CollisionEvents.Began.impulseDirection.getter()
{
  return v0[3];
}

uint64_t CollisionEvents.Began.contacts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SynchronizationEvents.OwnershipRequest.entity.getter()
{
  return swift_retain();
}

uint64_t SynchronizationEvents.OwnershipRequest.requester.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of __REAssetService(v1 + 8, a1);
}

uint64_t SynchronizationEvents.OwnershipRequest.accept.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_retain();
  return v1;
}

BOOL static SynchronizationEvents.OwnershipResponse.Response.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SynchronizationEvents.OwnershipResponse.Response.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int SynchronizationEvents.OwnershipResponse.Response.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t SynchronizationEvents.OwnershipResponse.entity.getter()
{
  return swift_retain();
}

uint64_t SynchronizationEvents.OwnershipResponse.previousOwner.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SynchronizationPeerID?(v1 + 8, a1);
}

void SynchronizationEvents.OwnershipResponse.response.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 48);
}

uint64_t SynchronizationEvents.OwnershipChanged.entity.getter()
{
  return swift_retain();
}

uint64_t SynchronizationEvents.OwnershipChanged.newOwner.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SynchronizationPeerID?(v1 + 8, a1);
}

uint64_t ComponentEvents.WillRemove.entity.getter()
{
  return swift_retain();
}

uint64_t ComponentEvents.WillRemove.componentType.getter()
{
  return *(void *)(v0 + 8);
}

void VideoPlayerEvents.ViewingModeDidChange.currentViewingMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void VideoPlayerEvents.ViewingModeDidChange.previousViewingMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

double VideoPlayerEvents.VideoSizeDidChange.screenMeshSize.getter()
{
  return *(double *)v0;
}

double VideoPlayerEvents.VideoSizeDidChange.videoDimension.getter()
{
  return *(double *)(v0 + 8);
}

RealityFoundation::VideoPlayerEvents::MediaTypeDidChange::MediaType_optional __swiftcall VideoPlayerEvents.MediaTypeDidChange.MediaType.init(rawValue:)(RealityFoundation::VideoPlayerEvents::MediaTypeDidChange::MediaType_optional rawValue)
{
  if (rawValue.value == RealityFoundation_VideoPlayerEvents_MediaTypeDidChange_MediaType_mono) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (rawValue.value == RealityFoundation_VideoPlayerEvents_MediaTypeDidChange_MediaType_invalid) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return rawValue;
}

uint64_t VideoPlayerEvents.MediaTypeDidChange.MediaType.rawValue.getter()
{
  return *v0;
}

unsigned char *protocol witness for RawRepresentable.init(rawValue:) in conformance VideoPlayerEvents.MediaTypeDidChange.MediaType@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void VideoPlayerEvents.MediaTypeDidChange.newType.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void VideoPlayerEvents.MediaTypeDidChange.previousType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

uint64_t VideoPlayerEvents.VideoReceiverEndpointDidChanged.videoReceiverEndpoint.getter()
{
  return *(void *)v0;
}

uint64_t VideoPlayerEvents.VideoReceiverEndpointDidChanged.videoReceiverEndpointHash.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t VideoPlayerEvents.VideoReceiverEndpointDidChanged.videoReceiverEndpointType.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Scene.publisher<A>(for:on:componentType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  return Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2, a3, a4, 0, a5, a7, a6);
}

uint64_t Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t *a6@<X8>, uint64_t a7, ValueMetadata *a8, uint64_t a9)
{
  if (a8 == &type metadata for SynchronizationEvents.OwnershipRequest)
  {
    Scene.eventService.getter((uint64_t)v24);
    uint64_t v15 = v25;
    uint64_t v16 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    type metadata accessor for REOwnershipRequestEvent(0);
    EventService.publisher<A>(for:on:)(v17, a1, v15, v17, v16);
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    uint64_t v19 = (void *)swift_allocObject();
    _OWORD v19[2] = &type metadata for SynchronizationEvents.OwnershipRequest;
    uint64_t v19[3] = a9;
    v19[4] = v18;
    uint64_t v19[5] = a5;
    v19[6] = a7;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipRequestEvent>);
    lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REOwnershipRequestEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipRequestEvent>);
    uint64_t v21 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    if (a8 == &type metadata for SceneEvents.Update || a8 == &type metadata for SceneEvents.Render)
    {
      Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)a8, a1, a2, a3, 0, (uint64_t)a8, v24, a9);
      uint64_t v13 = swift_allocObject();
      swift_weakInit();
      uint64_t v14 = (void *)swift_allocObject();
      void v14[2] = a8;
      v14[3] = a9;
      v14[4] = v13;
      uint64_t v14[5] = a5;
      void v14[6] = a7;
      type metadata accessor for Scene.Publisher();
      swift_retain();
      swift_retain();
      swift_getWitnessTable();
      uint64_t v21 = Publisher<>.sink(receiveValue:)();
      swift_release();
    }
    else
    {
      Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)a8, a1, a2, a3, a4, (uint64_t)a8, v24, a9);
      uint64_t v20 = (void *)swift_allocObject();
      _OWORD v20[2] = a8;
      void v20[3] = a9;
      v20[4] = a5;
      _OWORD v20[5] = a7;
      type metadata accessor for Scene.Publisher();
      swift_retain();
      swift_getWitnessTable();
      uint64_t v21 = Publisher<>.sink(receiveValue:)();
    }
    swift_release();
    swift_release();
  }
  uint64_t result = type metadata accessor for AnyCancellable();
  uint64_t v23 = MEMORY[0x263EFDD10];
  a6[3] = result;
  a6[4] = v23;
  *a6 = v21;
  return result;
}

uint64_t outlined init with copy of SynchronizationPeerID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  void (*v18)(long long *__return_ptr, long long *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  unsigned char *v27;
  long long v28[4];
  long long v29;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  unsigned char v33[40];

  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  int v27 = (unsigned char *)v11[2];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = result;
    swift_beginAccess();
    if (!*(void *)(v15 + 216)) {
      return swift_release();
    }
    uint64_t v26 = a4;
    uint64_t v24 = a3;
    uint64_t v25 = v8;
    uint64_t v16 = *(void *)(v15 + 224);
    uint64_t ObjectType = swift_getObjectType();
    *(void *)&v28[0] = v12;
    uint64_t v18 = *(void (**)(long long *__return_ptr, long long *, uint64_t, uint64_t))(v16 + 32);
    swift_unknownObjectRetain();
    v18(&v29, v28, ObjectType, v16);
    if (!v30)
    {
      swift_release();
      swift_unknownObjectRelease();
      return outlined destroy of BodyTrackingComponent?((uint64_t)&v29, &demangling cache variable for type metadata for SynchronizationPeerID?);
    }
    outlined init with take of BindableDataInternal(&v29, (uint64_t)v33);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MutableBox<Bool>);
    uint64_t result = swift_allocObject();
    *(unsigned char *)(result + 16) = 0;
    if (v13)
    {
      uint64_t v19 = result;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        uint64_t v20 = swift_dynamicCastClassUnconditional();
        goto LABEL_7;
      }
      uint64_t result = REEntityIsBeingDestroyed();
      if ((result & 1) == 0)
      {
        id v22 = specialized static Entity.entityInfoType(_:)();
        if (v22)
        {
          uint64_t v21 = (*(uint64_t (**)(void))(v22 + 232))();
          uint64_t v23 = *(void *)(v21 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v23, 0);
          *(void *)(v21 + 16) = v13;
          MEMORY[0x22A68E750](v13, v21);
          swift_release();
LABEL_13:
          outlined init with copy of __REAssetService((uint64_t)v33, (uint64_t)v28);
          *(void *)&uint64_t v29 = v21;
          outlined init with take of BindableDataInternal(v28, (uint64_t)&v29 + 8);
          uint64_t v31 = partial apply for closure #1 in closure #1 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:);
          uint64_t v32 = v19;
          outlined init with copy of SynchronizationEvents.OwnershipRequest((uint64_t)&v29, (uint64_t)v28);
          swift_retain();
          swift_dynamicCast();
          v24(v10);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v10, a5);
          if (v27)
          {
            *int v27 = *(unsigned char *)(v19 + 16);
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            outlined destroy of SynchronizationEvents.OwnershipRequest((uint64_t)&v29);
            return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
          }
LABEL_19:
          __break(1u);
          return result;
        }
        uint64_t v20 = makeEntity(for:)(v13);
LABEL_7:
        uint64_t v21 = v20;
        goto LABEL_13;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

uint64_t closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (RESceneIsFromActiveRealityRendererSceneGroup()) {
      a3(a1);
    }
    return swift_release();
  }
  return result;
}

uint64_t Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v482 = a6;
  uint64_t v450 = a4;
  uint64_t v449 = a3;
  uint64_t v480 = a2;
  long long v483 = a7;
  uint64_t v448 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent>, VideoPlayerEvents.VideoReceiverEndpointDidChanged>);
  uint64_t v447 = *(void *)(v448 - 8);
  MEMORY[0x270FA5388](v448);
  long long v446 = (char *)&v381 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v445 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerViewingModeChangedEvent>, VideoPlayerEvents.ViewingModeDidChange>);
  uint64_t v444 = *(void *)(v445 - 8);
  MEMORY[0x270FA5388](v445);
  uint64_t v443 = (char *)&v381 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v442 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerVideoSizeChangedEvent>, VideoPlayerEvents.VideoSizeDidChange>);
  uint64_t v441 = *(void *)(v442 - 8);
  MEMORY[0x270FA5388](v442);
  __n128 v440 = (char *)&v381 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v439 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>, VideoPlayerEvents.ContentTypeDidChange>);
  uint64_t v438 = *(void *)(v439 - 8);
  MEMORY[0x270FA5388](v439);
  uint64_t v437 = (char *)&v381 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v435 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>, VideoPlayerEvents.MediaTypeDidChange>);
  uint64_t v433 = *(void *)(v435 - 8);
  MEMORY[0x270FA5388](v435);
  CFDataRef v431 = (char *)&v381 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v436 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentDidChangeEvent>, ComponentEvents.DidChange>);
  uint64_t v434 = *(void *)(v436 - 8);
  MEMORY[0x270FA5388](v436);
  uint64_t v432 = (char *)&v381 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v430 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentWillRemoveEvent>, ComponentEvents.WillRemove>);
  uint64_t v429 = *(void *)(v430 - 8);
  MEMORY[0x270FA5388](v430);
  uint64_t v428 = (char *)&v381 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v427 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentWillDeactivateEvent>, ComponentEvents.WillDeactivate>);
  uint64_t v426 = *(void *)(v427 - 8);
  MEMORY[0x270FA5388](v427);
  uint64_t v425 = (char *)&v381 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v424 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentDidActivateEvent>, ComponentEvents.DidActivate>);
  uint64_t v423 = *(void *)(v424 - 8);
  MEMORY[0x270FA5388](v424);
  unint64_t v422 = (char *)&v381 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v421 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentDidAddEvent>, ComponentEvents.DidAdd>);
  uint64_t v420 = *(void *)(v421 - 8);
  MEMORY[0x270FA5388](v421);
  CFIndex v419 = (char *)&v381 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v415 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAudioPlayerDidCompleteEvent>, AudioEvents.PlaybackCompleted>);
  uint64_t v413 = *(void *)(v415 - 8);
  MEMORY[0x270FA5388](v415);
  uint64_t v411 = (char *)&v381 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v418 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REOwnershipChangedEvent>, SynchronizationEvents.OwnershipChanged>);
  uint64_t v417 = *(void *)(v418 - 8);
  MEMORY[0x270FA5388](v418);
  v416 = (char *)&v381 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v414 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REOwnershipResponseEvent>, SynchronizationEvents.OwnershipResponse>);
  uint64_t v412 = *(void *)(v414 - 8);
  MEMORY[0x270FA5388](v414);
  uint64_t v410 = (char *)&v381 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v409 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REOwnershipRequestEvent>, SynchronizationEvents.OwnershipRequest>);
  uint64_t v408 = *(void *)(v409 - 8);
  MEMORY[0x270FA5388](v409);
  long long v407 = (char *)&v381 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v406 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REMotionStateDidChangeEvent>, MotionStateEvents.DidChange>);
  uint64_t v405 = *(void *)(v406 - 8);
  MEMORY[0x270FA5388](v406);
  char v404 = (char *)&v381 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v403 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEntityPhysicsDidSimulateEvent>, PhysicsSimulationEvents.DidSimulate>);
  uint64_t v402 = *(void *)(v403 - 8);
  MEMORY[0x270FA5388](v403);
  uint64_t v401 = (char *)&v381 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v400 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEntityPhysicsWillSimulateEvent>, PhysicsSimulationEvents.WillSimulate>);
  uint64_t v399 = *(void *)(v400 - 8);
  MEMORY[0x270FA5388](v400);
  char v398 = (char *)&v381 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v397 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStopEvent>, CollisionEvents.Ended>);
  uint64_t v396 = *(void *)(v397 - 8);
  MEMORY[0x270FA5388](v397);
  uint64_t v395 = (char *)&v381 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v394 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RECollisionDidUpdateEventEx>, CollisionEvents.Updated>);
  uint64_t v393 = *(void *)(v394 - 8);
  MEMORY[0x270FA5388](v394);
  CFDataRef v392 = (char *)&v381 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v391 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStartEventEx>, CollisionEvents.Began>);
  uint64_t v390 = *(void *)(v391 - 8);
  MEMORY[0x270FA5388](v391);
  CFDataRef v389 = (char *)&v381 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v388 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasStartedEvent>, AnimationEvents.PlaybackStarted>);
  uint64_t v387 = *(void *)(v388 - 8);
  MEMORY[0x270FA5388](v388);
  v384 = (char *)&v381 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v386 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasTerminatedEvent>, AnimationEvents.PlaybackTerminated>);
  uint64_t v385 = *(void *)(v386 - 8);
  MEMORY[0x270FA5388](v386);
  char v383 = (char *)&v381 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v453 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasLoopedEvent>, AnimationEvents.PlaybackLooped>);
  uint64_t v452 = *(void *)(v453 - 8);
  MEMORY[0x270FA5388](v453);
  uint64_t v451 = (char *)&v381 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v456 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasCompletedEvent>, AnimationEvents.PlaybackCompleted>);
  uint64_t v455 = *(void *)(v456 - 8);
  MEMORY[0x270FA5388](v456);
  uint64_t v454 = (char *)&v381 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v459 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationSkeletalPoseUpdateCompleteEvent>, AnimationEvents.SkeletalPoseUpdateComplete>);
  uint64_t v458 = *(void *)(v459 - 8);
  MEMORY[0x270FA5388](v459);
  unint64_t v457 = (char *)&v381 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v462 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidReparentEvent>, SceneEvents.DidReparentEntity>);
  uint64_t v461 = *(void *)(v462 - 8);
  MEMORY[0x270FA5388](v462);
  v460 = (char *)&v381 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v465 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneEntityWillRemoveEvent>, SceneEvents.WillRemoveEntity>);
  uint64_t v464 = *(void *)(v465 - 8);
  MEMORY[0x270FA5388](v465);
  unint64_t v463 = (char *)&v381 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v468 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneEntityWillDeactivateEvent>, SceneEvents.WillDeactivateEntity>);
  uint64_t v467 = *(void *)(v468 - 8);
  MEMORY[0x270FA5388](v468);
  uint64_t v466 = (char *)&v381 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v471 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidActivateEvent>, SceneEvents.DidActivateEntity>);
  uint64_t v470 = *(void *)(v471 - 8);
  MEMORY[0x270FA5388](v471);
  unint64_t v469 = (char *)&v381 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v474 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidAddEvent>, SceneEvents.DidAddEntity>);
  uint64_t v473 = *(void *)(v474 - 8);
  MEMORY[0x270FA5388](v474);
  unint64_t v472 = (char *)&v381 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RESceneAnchoredStateChangedEvent>, SceneEvents.AnchoredStateChanged>);
  uint64_t v475 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v381 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEngineDoRenderEvent>, SceneEvents.Render>);
  uint64_t v477 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v45 = (char *)&v381 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, SceneEvents.Update>);
  uint64_t v478 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v48 = (char *)&v381 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, EngineUpdateEvent>);
  uint64_t v479 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v51 = (char *)&v381 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5) {
    uint64_t v476 = *(void *)(a5 + 16);
  }
  else {
    uint64_t v476 = 0;
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v52 = a1;
  }
  else {
    uint64_t v52 = 0;
  }
  if (v52)
  {
    Scene.eventService.getter((uint64_t)&v489);
    uint64_t v53 = v491;
    uint64_t v54 = v492;
    __swift_project_boxed_opaque_existential_1(&v489, v491);
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    uint64_t v486 = 0;
    long long v484 = 0u;
    long long v485 = 0u;
    EventService.publisher<A>(for:on:)(v55, (uint64_t)&v484, v53, v55, v54);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v484, &demangling cache variable for type metadata for EventSource?);
    long long v481 = v487;
    uint64_t v56 = v488;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
    long long v489 = v481;
    uint64_t v490 = v56;
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = v482;
    *(void *)(v57 + 24) = a8;
    unint64_t v58 = partial apply for closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
  }
  else
  {
    uint64_t v382 = a8;
    if (swift_conformsToProtocol2()) {
      uint64_t v59 = a1;
    }
    else {
      uint64_t v59 = 0;
    }
    if (v59)
    {
      Scene.eventService.getter((uint64_t)&v489);
      uint64_t v60 = v491;
      uint64_t v61 = v492;
      __swift_project_boxed_opaque_existential_1(&v489, v491);
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      uint64_t v486 = 0;
      long long v484 = 0u;
      long long v485 = 0u;
      EventService.publisher<A>(for:on:)(v62, (uint64_t)&v484, v60, v62, v61);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v484, &demangling cache variable for type metadata for EventSource?);
      long long v481 = v487;
      uint64_t v63 = v488;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
      long long v489 = v481;
      uint64_t v490 = v63;
      uint64_t v64 = swift_allocObject();
      uint64_t v65 = v382;
      *(void *)(v64 + 16) = v482;
      *(void *)(v64 + 24) = v65;
      unint64_t v58 = partial apply for closure #2 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
    }
    else
    {
      if (swift_conformsToProtocol2()) {
        uint64_t v66 = a1;
      }
      else {
        uint64_t v66 = 0;
      }
      if (v66)
      {
        Scene.eventService.getter((uint64_t)&v489);
        uint64_t v67 = v491;
        uint64_t v68 = v492;
        __swift_project_boxed_opaque_existential_1(&v489, v491);
        uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        uint64_t v486 = 0;
        long long v484 = 0u;
        long long v485 = 0u;
        EventService.publisher<A>(for:on:)(v69, (uint64_t)&v484, v67, v69, v68);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v484, &demangling cache variable for type metadata for EventSource?);
        long long v481 = v487;
        uint64_t v70 = v488;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
        long long v489 = v481;
        uint64_t v490 = v70;
        uint64_t v71 = swift_allocObject();
        uint64_t v72 = v382;
        *(void *)(v71 + 16) = v482;
        *(void *)(v71 + 24) = v72;
        unint64_t v58 = partial apply for closure #3 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
      }
      else
      {
        if (swift_conformsToProtocol2()) {
          uint64_t v73 = a1;
        }
        else {
          uint64_t v73 = 0;
        }
        if (v73)
        {
          Scene.eventService.getter((uint64_t)&v489);
          uint64_t v74 = v491;
          uint64_t v75 = v492;
          __swift_project_boxed_opaque_existential_1(&v489, v491);
          uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          uint64_t v486 = 0;
          long long v484 = 0u;
          long long v485 = 0u;
          EventService.publisher<A>(for:on:)(v76, (uint64_t)&v484, v74, v76, v75);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v484, &demangling cache variable for type metadata for EventSource?);
          long long v481 = v487;
          uint64_t v77 = v488;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
          long long v489 = v481;
          uint64_t v490 = v77;
          uint64_t v78 = swift_allocObject();
          uint64_t v79 = v382;
          *(void *)(v78 + 16) = v482;
          *(void *)(v78 + 24) = v79;
          unint64_t v58 = partial apply for closure #4 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
        }
        else
        {
          if (swift_conformsToProtocol2()) {
            uint64_t v80 = a1;
          }
          else {
            uint64_t v80 = 0;
          }
          if (!v80)
          {
            if (swift_dynamicCastMetatype())
            {
              Scene.engineEventService.getter((uint64_t *)&v489);
              uint64_t v88 = v491;
              uint64_t v89 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REEngineDoUpdateEvent(0);
              EventService.publisher<A>(for:on:)(v90, v480, v88, v90, v89);
              long long v91 = v484;
              uint64_t v92 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              swift_allocObject();
              swift_weakInit();
              long long v489 = v91;
              uint64_t v490 = v92;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEngineDoUpdateEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>);
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, EngineUpdateEvent>>);
              int64_t v93 = (char *)swift_allocObject();
              uint64_t v94 = v479;
              (*(void (**)(char *, char *, uint64_t))(v479 + 16))(&v93[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v93 + 16)], v51, v49);
              swift_release();
              (*(void (**)(char *, uint64_t))(v94 + 8))(v51, v49);
              swift_release();
              *(void *)&long long v489 = v93;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<EngineUpdateEvent>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.engineEventService.getter((uint64_t *)&v489);
              uint64_t v96 = v491;
              uint64_t v97 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REEngineDoUpdateEvent(0);
              EventService.publisher<A>(for:on:)(v98, v480, v96, v98, v97);
              long long v99 = v484;
              uint64_t v100 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              swift_allocObject();
              swift_weakInit();
              long long v489 = v99;
              uint64_t v490 = v100;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEngineDoUpdateEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>);
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, SceneEvents.Update>>);
              uint64_t v101 = (char *)swift_allocObject();
              uint64_t v102 = v478;
              (*(void (**)(char *, char *, uint64_t))(v478 + 16))(&v101[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v101 + 16)], v48, v46);
              swift_release();
              (*(void (**)(char *, uint64_t))(v102 + 8))(v48, v46);
              swift_release();
              *(void *)&long long v489 = v101;
              unint64_t v95 = &demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Update>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.engineEventService.getter((uint64_t *)&v489);
              uint64_t v103 = v491;
              uint64_t v104 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REEngineDoRenderEvent(0);
              EventService.publisher<A>(for:on:)(v105, v480, v103, v105, v104);
              long long v106 = v484;
              uint64_t v107 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              swift_allocObject();
              swift_weakInit();
              long long v489 = v106;
              uint64_t v490 = v107;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoRenderEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEngineDoRenderEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoRenderEvent>);
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEngineDoRenderEvent>, SceneEvents.Render>>);
              int64_t v108 = (char *)swift_allocObject();
              uint64_t v109 = v477;
              (*(void (**)(char *, char *, uint64_t))(v477 + 16))(&v108[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v108 + 16)], v45, v43);
              swift_release();
              (*(void (**)(char *, uint64_t))(v109 + 8))(v45, v43);
              swift_release();
              *(void *)&long long v489 = v108;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Render>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v110 = v491;
              uint64_t v111 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for RESceneAnchoredStateChangedEvent(0);
              EventService.publisher<A>(for:on:)(v112, v480, v110, v112, v111);
              long long v113 = v484;
              uint64_t v114 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              *(void *)(swift_allocObject() + 16) = v476;
              long long v489 = v113;
              uint64_t v490 = v114;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneAnchoredStateChangedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneAnchoredStateChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneAnchoredStateChangedEvent>);
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneAnchoredStateChangedEvent>, SceneEvents.AnchoredStateChanged>>);
              uint64_t v115 = (char *)swift_allocObject();
              uint64_t v116 = v475;
              (*(void (**)(char *, char *, uint64_t))(v475 + 16))(&v115[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v115 + 16)], v42, v40);
              swift_release();
              (*(void (**)(char *, uint64_t))(v116 + 8))(v42, v40);
              swift_release();
              *(void *)&long long v489 = v115;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.AnchoredStateChanged>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v117 = v491;
              uint64_t v118 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for RESceneEntityDidAddEvent(0);
              EventService.publisher<A>(for:on:)(v119, v480, v117, v119, v118);
              long long v120 = v484;
              uint64_t v121 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              *(void *)(swift_allocObject() + 16) = v476;
              long long v489 = v120;
              uint64_t v490 = v121;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidAddEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneEntityDidAddEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidAddEvent>);
              uint64_t v122 = v472;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidAddEvent>, SceneEvents.DidAddEntity>>);
              uint64_t v123 = (char *)swift_allocObject();
              uint64_t v124 = v473;
              uint64_t v125 = v474;
              (*(void (**)(char *, char *, uint64_t))(v473 + 16))(&v123[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v123 + 16)], v122, v474);
              swift_release();
              (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v125);
              swift_release();
              *(void *)&long long v489 = v123;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.DidAddEntity>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v126 = v491;
              uint64_t v127 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for RESceneEntityDidActivateEvent(0);
              EventService.publisher<A>(for:on:)(v128, v480, v126, v128, v127);
              long long v129 = v484;
              uint64_t v130 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              *(void *)(swift_allocObject() + 16) = v476;
              long long v489 = v129;
              uint64_t v490 = v130;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidActivateEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneEntityDidActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidActivateEvent>);
              int64_t v131 = v469;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidActivateEvent>, SceneEvents.DidActivateEntity>>);
              uint64_t v132 = (char *)swift_allocObject();
              uint64_t v133 = v470;
              uint64_t v134 = v471;
              (*(void (**)(char *, char *, uint64_t))(v470 + 16))(&v132[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v132 + 16)], v131, v471);
              swift_release();
              (*(void (**)(char *, uint64_t))(v133 + 8))(v131, v134);
              swift_release();
              *(void *)&long long v489 = v132;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.DidActivateEntity>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v135 = v491;
              uint64_t v136 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for RESceneEntityWillDeactivateEvent(0);
              EventService.publisher<A>(for:on:)(v137, v480, v135, v137, v136);
              long long v138 = v484;
              uint64_t v139 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              *(void *)(swift_allocObject() + 16) = v476;
              long long v489 = v138;
              uint64_t v490 = v139;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityWillDeactivateEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneEntityWillDeactivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityWillDeactivateEvent>);
              int64_t v140 = v466;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneEntityWillDeactivateEvent>, SceneEvents.WillDeactivateEntity>>);
              uint64_t v141 = (char *)swift_allocObject();
              uint64_t v142 = v467;
              uint64_t v143 = v468;
              (*(void (**)(char *, char *, uint64_t))(v467 + 16))(&v141[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v141 + 16)], v140, v468);
              swift_release();
              (*(void (**)(char *, uint64_t))(v142 + 8))(v140, v143);
              swift_release();
              *(void *)&long long v489 = v141;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.WillDeactivateEntity>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v144 = v491;
              uint64_t v145 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for RESceneEntityWillRemoveEvent(0);
              EventService.publisher<A>(for:on:)(v146, v480, v144, v146, v145);
              long long v147 = v484;
              uint64_t v148 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              *(void *)(swift_allocObject() + 16) = v476;
              long long v489 = v147;
              uint64_t v490 = v148;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityWillRemoveEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneEntityWillRemoveEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityWillRemoveEvent>);
              uint64_t v149 = v463;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneEntityWillRemoveEvent>, SceneEvents.WillRemoveEntity>>);
              uint64_t v150 = (char *)swift_allocObject();
              uint64_t v151 = v464;
              uint64_t v152 = v465;
              (*(void (**)(char *, char *, uint64_t))(v464 + 16))(&v150[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v150 + 16)], v149, v465);
              swift_release();
              (*(void (**)(char *, uint64_t))(v151 + 8))(v149, v152);
              swift_release();
              *(void *)&long long v489 = v150;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.WillRemoveEntity>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v153 = v491;
              uint64_t v154 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for RESceneEntityDidReparentEvent(0);
              EventService.publisher<A>(for:on:)(v155, v480, v153, v155, v154);
              long long v156 = v484;
              uint64_t v157 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              *(void *)(swift_allocObject() + 16) = v476;
              long long v489 = v156;
              uint64_t v490 = v157;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidReparentEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RESceneEntityDidReparentEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RESceneEntityDidReparentEvent>);
              uint64_t v158 = v460;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RESceneEntityDidReparentEvent>, SceneEvents.DidReparentEntity>>);
              uint64_t v159 = (char *)swift_allocObject();
              uint64_t v160 = v461;
              uint64_t v161 = v462;
              (*(void (**)(char *, char *, uint64_t))(v461 + 16))(&v159[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v159 + 16)], v158, v462);
              swift_release();
              (*(void (**)(char *, uint64_t))(v160 + 8))(v158, v161);
              swift_release();
              *(void *)&long long v489 = v159;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.DidReparentEntity>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v162 = v491;
              uint64_t v163 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REAnimationSkeletalPoseUpdateCompleteEvent(0);
              EventService.publisher<A>(for:on:)(v164, v480, v162, v164, v163);
              long long v165 = v484;
              uint64_t v166 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v165;
              uint64_t v490 = v166;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationSkeletalPoseUpdateCompleteEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationSkeletalPoseUpdateCompleteEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REAnimationSkeletalPoseUpdateCompleteEvent>);
              unint64_t v167 = v457;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationSkeletalPoseUpdateCompleteEvent>, AnimationEvents.SkeletalPoseUpdateComplete>>);
              char v168 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v458 + 32))(&v168[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v168 + 16)], v167, v459);
              swift_release();
              *(void *)&long long v489 = v168;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.SkeletalPoseUpdateComplete>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v169 = v491;
              uint64_t v170 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REAnimationHasCompletedEvent(0);
              EventService.publisher<A>(for:on:)(v171, v480, v169, v171, v170);
              long long v172 = v484;
              uint64_t v173 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              *(void *)(swift_allocObject() + 16) = v476;
              long long v489 = v172;
              uint64_t v490 = v173;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasCompletedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasCompletedEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasCompletedEvent>);
              uint64_t v174 = v454;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasCompletedEvent>, AnimationEvents.PlaybackCompleted>>);
              uint64_t v175 = (char *)swift_allocObject();
              uint64_t v176 = v455;
              uint64_t v177 = v456;
              (*(void (**)(char *, char *, uint64_t))(v455 + 16))(&v175[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v175 + 16)], v174, v456);
              swift_release();
              (*(void (**)(char *, uint64_t))(v176 + 8))(v174, v177);
              swift_release();
              *(void *)&long long v489 = v175;
              unint64_t v95 = &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v178 = v491;
              uint64_t v179 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REAnimationHasLoopedEvent(0);
              EventService.publisher<A>(for:on:)(v180, v480, v178, v180, v179);
              long long v181 = v484;
              uint64_t v182 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              *(void *)(swift_allocObject() + 16) = v476;
              long long v489 = v181;
              uint64_t v490 = v182;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasLoopedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasLoopedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasLoopedEvent>);
              uint64_t v183 = v451;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasLoopedEvent>, AnimationEvents.PlaybackLooped>>);
              uint64_t v184 = (char *)swift_allocObject();
              uint64_t v185 = v452;
              uint64_t v186 = v453;
              (*(void (**)(char *, char *, uint64_t))(v452 + 16))(&v184[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v184 + 16)], v183, v453);
              swift_release();
              (*(void (**)(char *, uint64_t))(v185 + 8))(v183, v186);
              swift_release();
              *(void *)&long long v489 = v184;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackLooped>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v187 = v491;
              uint64_t v188 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REAnimationHasTerminatedEvent(0);
              EventService.publisher<A>(for:on:)(v189, v480, v187, v189, v188);
              long long v190 = v484;
              uint64_t v191 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              *(void *)(swift_allocObject() + 16) = v476;
              long long v489 = v190;
              uint64_t v490 = v191;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasTerminatedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasTerminatedEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasTerminatedEvent>);
              v192 = v383;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasTerminatedEvent>, AnimationEvents.PlaybackTerminated>>);
              char v193 = (char *)swift_allocObject();
              uint64_t v194 = v385;
              uint64_t v195 = v386;
              (*(void (**)(char *, char *, uint64_t))(v385 + 16))(&v193[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v193 + 16)], v192, v386);
              swift_release();
              (*(void (**)(char *, uint64_t))(v194 + 8))(v192, v195);
              swift_release();
              *(void *)&long long v489 = v193;
              unint64_t v95 = &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v196 = v491;
              uint64_t v197 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REAnimationHasStartedEvent(0);
              EventService.publisher<A>(for:on:)(v198, v480, v196, v198, v197);
              long long v199 = v484;
              uint64_t v200 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v199;
              uint64_t v490 = v200;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasStartedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasStartedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasStartedEvent>);
              uint64_t v201 = v384;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasStartedEvent>, AnimationEvents.PlaybackStarted>>);
              uint64_t v202 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v387 + 32))(&v202[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v202 + 16)], v201, v388);
              swift_release();
              *(void *)&long long v489 = v202;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackStarted>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v203 = v491;
              uint64_t v204 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for RECollisionDidStartEventEx(0);
              EventService.publisher<A>(for:on:)(v205, v480, v203, v205, v204);
              long long v206 = v484;
              uint64_t v207 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v206;
              uint64_t v490 = v207;
              swift_retain();
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStartEventEx>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RECollisionDidStartEventEx> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStartEventEx>);
              uint64_t v208 = v389;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStartEventEx>, CollisionEvents.Began>>);
              uint64_t v209 = (char *)swift_allocObject();
              uint64_t v210 = v390;
              uint64_t v211 = v391;
              (*(void (**)(char *, char *, uint64_t))(v390 + 16))(&v209[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v209 + 16)], v208, v391);
              swift_release();
              (*(void (**)(char *, uint64_t))(v210 + 8))(v208, v211);
              swift_release();
              *(void *)&long long v489 = v209;
              unint64_t v95 = &demangling cache variable for type metadata for Scene.Publisher<CollisionEvents.Began>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v212 = v491;
              uint64_t v213 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for RECollisionDidUpdateEventEx(0);
              EventService.publisher<A>(for:on:)(v214, v480, v212, v214, v213);
              long long v215 = v484;
              uint64_t v216 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v215;
              uint64_t v490 = v216;
              swift_retain();
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidUpdateEventEx>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RECollisionDidUpdateEventEx> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidUpdateEventEx>);
              char v217 = v392;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RECollisionDidUpdateEventEx>, CollisionEvents.Updated>>);
              uint64_t v218 = (char *)swift_allocObject();
              uint64_t v219 = v393;
              uint64_t v220 = v394;
              (*(void (**)(char *, char *, uint64_t))(v393 + 16))(&v218[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v218 + 16)], v217, v394);
              swift_release();
              (*(void (**)(char *, uint64_t))(v219 + 8))(v217, v220);
              swift_release();
              *(void *)&long long v489 = v218;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<CollisionEvents.Updated>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v221 = v491;
              uint64_t v222 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for RECollisionDidStopEvent(0);
              EventService.publisher<A>(for:on:)(v223, v480, v221, v223, v222);
              long long v224 = v484;
              uint64_t v225 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v224;
              uint64_t v490 = v225;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStopEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RECollisionDidStopEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStopEvent>);
              uint64_t v226 = v395;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStopEvent>, CollisionEvents.Ended>>);
              char v227 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v396 + 32))(&v227[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v227 + 16)], v226, v397);
              swift_release();
              *(void *)&long long v489 = v227;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<CollisionEvents.Ended>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v228 = v491;
              uint64_t v229 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REEntityPhysicsWillSimulateEvent(0);
              EventService.publisher<A>(for:on:)(v230, v480, v228, v230, v229);
              long long v231 = v484;
              uint64_t v232 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v231;
              uint64_t v490 = v232;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REEntityPhysicsWillSimulateEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEntityPhysicsWillSimulateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REEntityPhysicsWillSimulateEvent>);
              v233 = v398;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEntityPhysicsWillSimulateEvent>, PhysicsSimulationEvents.WillSimulate>>);
              int v234 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v399 + 32))(&v234[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v234 + 16)], v233, v400);
              swift_release();
              *(void *)&long long v489 = v234;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<PhysicsSimulationEvents.WillSimulate>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v235 = v491;
              uint64_t v236 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REEntityPhysicsDidSimulateEvent(0);
              EventService.publisher<A>(for:on:)(v237, v480, v235, v237, v236);
              long long v238 = v484;
              uint64_t v239 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v238;
              uint64_t v490 = v239;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REEntityPhysicsDidSimulateEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEntityPhysicsDidSimulateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REEntityPhysicsDidSimulateEvent>);
              __int16 v240 = v401;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEntityPhysicsDidSimulateEvent>, PhysicsSimulationEvents.DidSimulate>>);
              char v241 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v402 + 32))(&v241[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v241 + 16)], v240, v403);
              swift_release();
              *(void *)&long long v489 = v241;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<PhysicsSimulationEvents.DidSimulate>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v242 = v491;
              uint64_t v243 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REMotionStateDidChangeEvent(0);
              EventService.publisher<A>(for:on:)(v244, v480, v242, v244, v243);
              long long v245 = v484;
              uint64_t v246 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v245;
              uint64_t v490 = v246;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REMotionStateDidChangeEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REMotionStateDidChangeEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REMotionStateDidChangeEvent>);
              long long v247 = v404;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REMotionStateDidChangeEvent>, MotionStateEvents.DidChange>>);
              long long v248 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v405 + 32))(&v248[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v248 + 16)], v247, v406);
              swift_release();
              *(void *)&long long v489 = v248;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<MotionStateEvents.DidChange>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v249 = v491;
              uint64_t v250 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REOwnershipRequestEvent(0);
              EventService.publisher<A>(for:on:)(v251, v480, v249, v251, v250);
              long long v252 = v484;
              uint64_t v253 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              static os_log_type_t.info.getter();
              type metadata accessor for OS_os_log();
              uint64_t v254 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();

              swift_allocObject();
              swift_weakInit();
              long long v489 = v252;
              uint64_t v490 = v253;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipRequestEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REOwnershipRequestEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipRequestEvent>);
              uint64_t v255 = v407;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REOwnershipRequestEvent>, SynchronizationEvents.OwnershipRequest>>);
              char v256 = (char *)swift_allocObject();
              uint64_t v257 = v408;
              uint64_t v258 = v409;
              (*(void (**)(char *, char *, uint64_t))(v408 + 16))(&v256[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v256 + 16)], v255, v409);
              swift_release();
              (*(void (**)(char *, uint64_t))(v257 + 8))(v255, v258);
              swift_release();
              *(void *)&long long v489 = v256;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SynchronizationEvents.OwnershipRequest>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v259 = v491;
              uint64_t v260 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REOwnershipResponseEvent(0);
              EventService.publisher<A>(for:on:)(v261, v480, v259, v261, v260);
              long long v262 = v484;
              uint64_t v263 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              static os_log_type_t.info.getter();
              type metadata accessor for OS_os_log();
              long long v264 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();

              swift_allocObject();
              swift_weakInit();
              long long v489 = v262;
              uint64_t v490 = v263;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipResponseEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REOwnershipResponseEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipResponseEvent>);
              long long v265 = v410;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REOwnershipResponseEvent>, SynchronizationEvents.OwnershipResponse>>);
              long long v266 = (char *)swift_allocObject();
              uint64_t v267 = v412;
              uint64_t v268 = v414;
              (*(void (**)(char *, char *, uint64_t))(v412 + 16))(&v266[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v266 + 16)], v265, v414);
              swift_release();
              (*(void (**)(char *, uint64_t))(v267 + 8))(v265, v268);
              swift_release();
              *(void *)&long long v489 = v266;
              unint64_t v95 = &demangling cache variable for type metadata for Scene.Publisher<SynchronizationEvents.OwnershipResponse>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v269 = v491;
              uint64_t v270 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REOwnershipChangedEvent(0);
              EventService.publisher<A>(for:on:)(v271, v480, v269, v271, v270);
              long long v272 = v484;
              uint64_t v273 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              static os_log_type_t.info.getter();
              type metadata accessor for OS_os_log();
              long long v274 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();

              swift_allocObject();
              swift_weakInit();
              long long v489 = v272;
              uint64_t v490 = v273;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipChangedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REOwnershipChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipChangedEvent>);
              long long v275 = v416;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REOwnershipChangedEvent>, SynchronizationEvents.OwnershipChanged>>);
              long long v276 = (char *)swift_allocObject();
              uint64_t v277 = v417;
              uint64_t v278 = v418;
              (*(void (**)(char *, char *, uint64_t))(v417 + 16))(&v276[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v276 + 16)], v275, v418);
              swift_release();
              (*(void (**)(char *, uint64_t))(v277 + 8))(v275, v278);
              swift_release();
              *(void *)&long long v489 = v276;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<SynchronizationEvents.OwnershipChanged>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v279 = v491;
              uint64_t v280 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REAudioPlayerDidCompleteEvent(0);
              EventService.publisher<A>(for:on:)(v281, v480, v279, v281, v280);
              long long v282 = v484;
              uint64_t v283 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v282;
              uint64_t v490 = v283;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REAudioPlayerDidCompleteEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAudioPlayerDidCompleteEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REAudioPlayerDidCompleteEvent>);
              long long v284 = v411;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAudioPlayerDidCompleteEvent>, AudioEvents.PlaybackCompleted>>);
              long long v285 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v413 + 32))(&v285[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v285 + 16)], v284, v415);
              swift_release();
              *(void *)&long long v489 = v285;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<AudioEvents.PlaybackCompleted>;
            }
            else if (swift_dynamicCastMetatype())
            {
              uint64_t v286 = v481;
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v287 = v491;
              uint64_t v288 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REComponentDidAddEvent(0);
              (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v288 + 8))(&v484, v289, v480, v449, v450, v289, v287, v288);
              long long v290 = v484;
              uint64_t v291 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              uint64_t v292 = swift_allocObject();
              uint64_t v293 = v476;
              *(void *)(v292 + 16) = v286;
              *(void *)(v292 + 24) = v293;
              long long v489 = v290;
              uint64_t v490 = v291;
              swift_retain();
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidAddEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentDidAddEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidAddEvent>);
              long long v294 = v419;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentDidAddEvent>, ComponentEvents.DidAdd>>);
              long long v295 = (char *)swift_allocObject();
              uint64_t v296 = v420;
              uint64_t v297 = v421;
              (*(void (**)(char *, char *, uint64_t))(v420 + 16))(&v295[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v295 + 16)], v294, v421);
              swift_release();
              (*(void (**)(char *, uint64_t))(v296 + 8))(v294, v297);
              swift_release();
              *(void *)&long long v489 = v295;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.DidAdd>;
            }
            else if (swift_dynamicCastMetatype())
            {
              uint64_t v298 = v481;
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v299 = v491;
              uint64_t v300 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REComponentDidActivateEvent(0);
              (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v300 + 8))(&v484, v301, v480, v449, v450, v301, v299, v300);
              long long v302 = v484;
              uint64_t v303 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              uint64_t v304 = swift_allocObject();
              uint64_t v305 = v476;
              *(void *)(v304 + 16) = v298;
              *(void *)(v304 + 24) = v305;
              long long v489 = v302;
              uint64_t v490 = v303;
              swift_retain();
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidActivateEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentDidActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidActivateEvent>);
              long long v306 = v422;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentDidActivateEvent>, ComponentEvents.DidActivate>>);
              __int16 v307 = (char *)swift_allocObject();
              uint64_t v308 = v423;
              uint64_t v309 = v424;
              (*(void (**)(char *, char *, uint64_t))(v423 + 16))(&v307[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v307 + 16)], v306, v424);
              swift_release();
              (*(void (**)(char *, uint64_t))(v308 + 8))(v306, v309);
              swift_release();
              *(void *)&long long v489 = v307;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.DidActivate>;
            }
            else if (swift_dynamicCastMetatype())
            {
              uint64_t v310 = v481;
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v311 = v491;
              uint64_t v312 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REComponentWillDeactivateEvent(0);
              (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v312 + 8))(&v484, v313, v480, v449, v450, v313, v311, v312);
              long long v314 = v484;
              uint64_t v315 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              uint64_t v316 = swift_allocObject();
              uint64_t v317 = v476;
              *(void *)(v316 + 16) = v310;
              *(void *)(v316 + 24) = v317;
              long long v489 = v314;
              uint64_t v490 = v315;
              swift_retain();
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillDeactivateEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>((unint64_t *)&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentWillDeactivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillDeactivateEvent>);
              char v318 = v425;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentWillDeactivateEvent>, ComponentEvents.WillDeactivate>>);
              uint64_t v319 = (char *)swift_allocObject();
              uint64_t v320 = v426;
              uint64_t v321 = v427;
              (*(void (**)(char *, char *, uint64_t))(v426 + 16))(&v319[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v319 + 16)], v318, v427);
              swift_release();
              (*(void (**)(char *, uint64_t))(v320 + 8))(v318, v321);
              swift_release();
              *(void *)&long long v489 = v319;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.WillDeactivate>;
            }
            else if (swift_dynamicCastMetatype())
            {
              uint64_t v322 = v481;
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v323 = v491;
              uint64_t v324 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REComponentWillRemoveEvent(0);
              (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v324 + 8))(&v484, v325, v480, v449, v450, v325, v323, v324);
              long long v326 = v484;
              uint64_t v327 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              uint64_t v328 = swift_allocObject();
              uint64_t v329 = v476;
              *(void *)(v328 + 16) = v322;
              *(void *)(v328 + 24) = v329;
              long long v489 = v326;
              uint64_t v490 = v327;
              swift_retain();
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillRemoveEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentWillRemoveEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillRemoveEvent>);
              __n128 v330 = v428;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentWillRemoveEvent>, ComponentEvents.WillRemove>>);
              uint64_t v331 = (char *)swift_allocObject();
              uint64_t v332 = v429;
              uint64_t v333 = v430;
              (*(void (**)(char *, char *, uint64_t))(v429 + 16))(&v331[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v331 + 16)], v330, v430);
              swift_release();
              (*(void (**)(char *, uint64_t))(v332 + 8))(v330, v333);
              swift_release();
              *(void *)&long long v489 = v331;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.WillRemove>;
            }
            else if (swift_dynamicCastMetatype())
            {
              uint64_t v334 = v481;
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v335 = v491;
              uint64_t v336 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REComponentDidChangeEvent(0);
              (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v336 + 8))(&v484, v337, v480, v449, v450, v337, v335, v336);
              long long v338 = v484;
              uint64_t v339 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              uint64_t v340 = swift_allocObject();
              uint64_t v341 = v476;
              *(void *)(v340 + 16) = v334;
              *(void *)(v340 + 24) = v341;
              long long v489 = v338;
              uint64_t v490 = v339;
              swift_retain();
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidChangeEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentDidChangeEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentDidChangeEvent>);
              v342 = v432;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentDidChangeEvent>, ComponentEvents.DidChange>>);
              uint64_t v343 = (char *)swift_allocObject();
              uint64_t v344 = v434;
              uint64_t v345 = v436;
              (*(void (**)(char *, char *, uint64_t))(v434 + 16))(&v343[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v343 + 16)], v342, v436);
              swift_release();
              (*(void (**)(char *, uint64_t))(v344 + 8))(v342, v345);
              swift_release();
              *(void *)&long long v489 = v343;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.DidChange>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v346 = v491;
              uint64_t v347 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REVideoPlayerContentTypeChangedEvent(0);
              EventService.publisher<A>(for:on:)(v348, v480, v346, v348, v347);
              long long v349 = v484;
              uint64_t v350 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v349;
              uint64_t v490 = v350;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>);
              uint64_t v351 = v431;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>, VideoPlayerEvents.MediaTypeDidChange>>);
              v352 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v433 + 32))(&v352[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v352 + 16)], v351, v435);
              swift_release();
              *(void *)&long long v489 = v352;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<VideoPlayerEvents.MediaTypeDidChange>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v353 = v491;
              uint64_t v354 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REVideoPlayerContentTypeChangedEvent(0);
              EventService.publisher<A>(for:on:)(v355, v480, v353, v355, v354);
              long long v356 = v484;
              uint64_t v357 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v356;
              uint64_t v490 = v357;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>);
              char v358 = v437;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerContentTypeChangedEvent>, VideoPlayerEvents.ContentTypeDidChange>>);
              uint64_t v359 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v438 + 32))(&v359[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v359 + 16)], v358, v439);
              swift_release();
              *(void *)&long long v489 = v359;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<VideoPlayerEvents.ContentTypeDidChange>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v360 = v491;
              uint64_t v361 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REVideoPlayerVideoSizeChangedEvent(0);
              EventService.publisher<A>(for:on:)(v362, v480, v360, v362, v361);
              long long v363 = v484;
              uint64_t v364 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v363;
              uint64_t v490 = v364;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerVideoSizeChangedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REVideoPlayerVideoSizeChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerVideoSizeChangedEvent>);
              long long v365 = v440;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerVideoSizeChangedEvent>, VideoPlayerEvents.VideoSizeDidChange>>);
              long long v366 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v441 + 32))(&v366[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v366 + 16)], v365, v442);
              swift_release();
              *(void *)&long long v489 = v366;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<VideoPlayerEvents.VideoSizeDidChange>;
            }
            else if (swift_dynamicCastMetatype())
            {
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v367 = v491;
              uint64_t v368 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REVideoPlayerViewingModeChangedEvent(0);
              EventService.publisher<A>(for:on:)(v369, v480, v367, v369, v368);
              long long v370 = v484;
              uint64_t v371 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v370;
              uint64_t v490 = v371;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerViewingModeChangedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REVideoPlayerViewingModeChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerViewingModeChangedEvent>);
              unint64_t v372 = v443;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerViewingModeChangedEvent>, VideoPlayerEvents.ViewingModeDidChange>>);
              uint64_t v373 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v444 + 32))(&v373[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v373 + 16)], v372, v445);
              swift_release();
              *(void *)&long long v489 = v373;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<VideoPlayerEvents.ViewingModeDidChange>;
            }
            else
            {
              if (!swift_dynamicCastMetatype())
              {
                uint64_t result = _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                return result;
              }
              Scene.eventService.getter((uint64_t)&v489);
              uint64_t v374 = v491;
              uint64_t v375 = v492;
              __swift_project_boxed_opaque_existential_1(&v489, v491);
              type metadata accessor for REVideoPlayerVideoReceiverEndpointChangedEvent(0);
              EventService.publisher<A>(for:on:)(v376, v480, v374, v376, v375);
              long long v377 = v484;
              uint64_t v378 = v485;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
              long long v489 = v377;
              uint64_t v490 = v378;
              swift_retain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent>);
              lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent>);
              uint64_t v379 = v446;
              Publisher.compactMap<A>(_:)();
              swift_release();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent>, VideoPlayerEvents.VideoReceiverEndpointDidChanged>>);
              uint64_t v380 = (char *)swift_allocObject();
              (*(void (**)(char *, char *, uint64_t))(v447 + 32))(&v380[*(void *)(*MEMORY[0x263EFDD00] + *(void *)v380 + 16)], v379, v448);
              swift_release();
              *(void *)&long long v489 = v380;
              unint64_t v95 = (uint64_t *)&demangling cache variable for type metadata for Scene.Publisher<VideoPlayerEvents.VideoReceiverEndpointDidChanged>;
            }
            __swift_instantiateConcreteTypeFromMangledName(v95);
            type metadata accessor for Scene.Publisher();
            return swift_dynamicCast();
          }
          Scene.eventService.getter((uint64_t)&v489);
          uint64_t v81 = v491;
          uint64_t v82 = v492;
          __swift_project_boxed_opaque_existential_1(&v489, v491);
          uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
          uint64_t v486 = 0;
          long long v484 = 0u;
          long long v485 = 0u;
          EventService.publisher<A>(for:on:)(v83, (uint64_t)&v484, v81, v83, v82);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v484, &demangling cache variable for type metadata for EventSource?);
          long long v481 = v487;
          uint64_t v84 = v488;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v489);
          long long v489 = v481;
          uint64_t v490 = v84;
          uint64_t v85 = swift_allocObject();
          uint64_t v86 = v382;
          *(void *)(v85 + 16) = v482;
          *(void *)(v85 + 24) = v86;
          unint64_t v58 = partial apply for closure #5 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
        }
      }
    }
  }
  uint64_t result = Scene.Publisher.init<A>(corePublisher:transform:)(&v489, (uint64_t)v58, (uint64_t *)&v484);
  *long long v483 = v484;
  return result;
}

uint64_t Scene.publisher<A>(for:on:componentType:rootEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  return Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2, a3, a4, a5, a6, a8, a7);
}

uint64_t Scene.Publisher.init<A>(corePublisher:transform:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  type metadata accessor for Scene.CorePublisher();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for Publishers.CompactMap();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *((void *)a1 + 2);
  long long v16 = *a1;
  uint64_t v17 = v11;
  Publisher.compactMap<A>(_:)();
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
  swift_getWitnessTable();
  uint64_t v12 = AnyPublisher.init<A>(_:)();
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  *uint64_t v15 = v12;
  return result;
}

uint64_t closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v7 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a4, v7 ^ 1u, 1, a2);
}

uint64_t closure #6 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v5 = result;
  if (result) {
    uint64_t result = swift_release();
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

uint64_t closure #7 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float v3 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  double v5 = v3;
  if (!result) {
    double v5 = 0.0;
  }
  *(void *)a2 = result;
  *(double *)(a2 + 8) = v5;
  return result;
}

uint64_t closure #8 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

void closure #9 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  if ((REEntityIsNonHiddenAndInHierarchy() & 1) == 0) {
    goto LABEL_20;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v5 = swift_dynamicCastClassUnconditional();
    goto LABEL_4;
  }
  if ((REEntityIsBeingDestroyed() & 1) == 0)
  {
    uint64_t v7 = specialized static Entity.entityInfoType(_:)();
    if (v7)
    {
      uint64_t v6 = (*(uint64_t (**)(void))(v7 + 232))();
      uint64_t v8 = *(void *)(v6 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v8, 0);
      *(void *)(v6 + 16) = v3;
      MEMORY[0x22A68E750](v3, v6);
      swift_release();
LABEL_8:
      uint64_t v9 = swift_conformsToProtocol2();
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      if (v9) {
        uint64_t v11 = v6;
      }
      else {
        uint64_t v11 = 0;
      }
      if (v11)
      {
        *a2 = v4;
        a2[1] = v11;
        a2[2] = v10;
        return;
      }
      if (one-time initialization token for ecsCoreLogger == -1) {
        goto LABEL_17;
      }
      goto LABEL_23;
    }
    uint64_t v5 = makeEntity(for:)(v3);
LABEL_4:
    uint64_t v6 = v5;
    goto LABEL_8;
  }
  __break(1u);
LABEL_23:
  swift_once();
LABEL_17:
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)ecsCoreLogger);
  swift_retain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v19 = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    REEntityGetName();
    uint64_t v17 = String.init(cString:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2048;
    REEntityGetLocalId();
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_227DD2000, v13, v14, "AnchoredStateChanged event was not delivered because '%s' (%llx) does not conform to HasAnchoring", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v16, -1, -1);
    MEMORY[0x22A696500](v15, -1, -1);
    swift_release();
  }
  else
  {

    swift_release_n();
  }
LABEL_20:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t closure #10 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = REEntityIsNonHiddenAndInHierarchy();
  if (!result)
  {
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t result = swift_dynamicCastClassUnconditional();
LABEL_4:
    uint64_t v5 = result;
LABEL_6:
    *a2 = v5;
    return result;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v6 = specialized static Entity.entityInfoType(_:)();
    if (v6)
    {
      uint64_t v5 = (*(uint64_t (**)(void))(v6 + 232))();
      uint64_t v7 = *(void *)(v5 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v7, 0);
      *(void *)(v5 + 16) = v3;
      MEMORY[0x22A68E750](v3, v5);
      uint64_t result = swift_release();
      goto LABEL_6;
    }
    uint64_t result = makeEntity(for:)(v3);
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t closure #14 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = REEntityIsNonHiddenAndInHierarchy();
  if ((result & 1) == 0) {
    goto LABEL_12;
  }
  if (v4)
  {
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v6 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result)
      {
        __break(1u);
        goto LABEL_23;
      }
      uint64_t v8 = specialized static Entity.entityInfoType(_:)();
      if (v8)
      {
        uint64_t v7 = (*(uint64_t (**)(void))(v8 + 232))();
        uint64_t v9 = *(void *)(v7 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v9, 0);
        *(void *)(v7 + 16) = v4;
        MEMORY[0x22A68E750](v4, v7);
        swift_release();
LABEL_10:
        if (REIsEntityHidden())
        {
          uint64_t result = swift_release();
LABEL_12:
          *a2 = 0;
          a2[1] = 0;
          return result;
        }
        goto LABEL_13;
      }
      uint64_t v6 = makeEntity(for:)(v4);
    }
    uint64_t v7 = v6;
    goto LABEL_10;
  }
  uint64_t v7 = 0;
LABEL_13:
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t result = swift_dynamicCastClassUnconditional();
    goto LABEL_15;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v11 = specialized static Entity.entityInfoType(_:)();
    if (v11)
    {
      uint64_t v10 = (*(uint64_t (**)(void))(v11 + 232))();
      uint64_t v12 = *(void *)(v10 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v12, 0);
      *(void *)(v10 + 16) = v3;
      MEMORY[0x22A68E750](v3, v10);
      uint64_t result = swift_release();
      goto LABEL_19;
    }
    uint64_t result = makeEntity(for:)(v3);
LABEL_15:
    uint64_t v10 = result;
LABEL_19:
    *a2 = v10;
    a2[1] = v7;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t *closure #16 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result)
  {
    uint64_t v4 = result[1];
    uint64_t result = (uint64_t *)REEntityIsNonHiddenAndInHierarchy();
    if (!result)
    {
      uint64_t v5 = 0;
LABEL_11:
      *a2 = v5;
      return result;
    }
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
LABEL_10:
      type metadata accessor for AnimationPlaybackController();
      uint64_t v5 = swift_allocObject();
      swift_weakInit();
      *(void *)(v5 + 16) = v4;
      swift_beginAccess();
      swift_weakAssign();
      uint64_t result = (uint64_t *)swift_release();
      goto LABEL_11;
    }
    uint64_t result = (uint64_t *)REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      uint64_t v6 = specialized static Entity.entityInfoType(_:)();
      if (v6)
      {
        uint64_t v7 = (*(uint64_t (**)(void))(v6 + 232))();
        uint64_t v8 = *(void *)(v7 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v8, 0);
        *(void *)(v7 + 16) = v2;
        MEMORY[0x22A68E750](v2, v7);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v2);
      }
      goto LABEL_10;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *closure #19 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result)
  {
    uint64_t v4 = result[1];
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
LABEL_8:
      type metadata accessor for AnimationPlaybackController();
      uint64_t v8 = swift_allocObject();
      swift_weakInit();
      *(void *)(v8 + 16) = v4;
      swift_beginAccess();
      swift_weakAssign();
      uint64_t result = (uint64_t *)swift_release();
      *a2 = v8;
      return result;
    }
    uint64_t result = (uint64_t *)REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      uint64_t v5 = specialized static Entity.entityInfoType(_:)();
      if (v5)
      {
        uint64_t v6 = (*(uint64_t (**)(void))(v5 + 232))();
        uint64_t v7 = *(void *)(v6 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v7, 0);
        *(void *)(v6 + 16) = v2;
        MEMORY[0x22A68E750](v2, v6);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v2);
      }
      goto LABEL_8;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #20 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (!*(void *)result) {
    goto LABEL_42;
  }
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t result = RECollisionObjectGetUserData();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v5 = result;
  if (!result)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (!v3)
  {
LABEL_43:
    __break(1u);
    return result;
  }
  uint64_t result = RECollisionObjectGetUserData();
  if (result < 0) {
    goto LABEL_38;
  }
  uint64_t v6 = result;
  if (!result)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v7 = swift_dynamicCastClassUnconditional();
LABEL_9:
    uint64_t v8 = v7;
    goto LABEL_13;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if (result)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v9 = specialized static Entity.entityInfoType(_:)();
  if (!v9)
  {
    uint64_t v7 = makeEntity(for:)(v5);
    goto LABEL_9;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(v9 + 232))();
  uint64_t v10 = *(void *)(v8 + 16);
  swift_retain();
  MEMORY[0x22A68E750](v10, 0);
  *(void *)(v8 + 16) = v5;
  MEMORY[0x22A68E750](v5, v8);
  swift_release();
LABEL_13:
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v11 = swift_dynamicCastClassUnconditional();
    goto LABEL_15;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if (result) {
    goto LABEL_41;
  }
  uint64_t v13 = specialized static Entity.entityInfoType(_:)();
  if (v13)
  {
    uint64_t v12 = (*(uint64_t (**)(void))(v13 + 232))();
    uint64_t v14 = *(void *)(v12 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v14, 0);
    *(void *)(v12 + 16) = v6;
    MEMORY[0x22A68E750](v6, v12);
    swift_release();
    goto LABEL_19;
  }
  uint64_t v11 = makeEntity(for:)(v6);
LABEL_15:
  uint64_t v12 = v11;
LABEL_19:
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable) {
    goto LABEL_25;
  }
  uint64_t v16 = SceneNullable;
  id v17 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v17)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v16);
  }
  uint64_t v18 = Scene.physicsOrigin.getter();
  swift_release();
  swift_release();
  if (v18)
  {
    float32x4_t v37 = *(float32x4_t *)&zmmword_22830EC90[48];
    float32x4_t v40 = *(float32x4_t *)&zmmword_22830EC90[32];
    float32x4_t v39 = *(float32x4_t *)&zmmword_22830EC90[16];
    float32x4_t v42 = *(float32x4_t *)zmmword_22830EC90;
  }
  else
  {
LABEL_25:
    uint64_t v19 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    *(double *)v20.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v19, 0);
    float32x4_t v40 = v21;
    float32x4_t v42 = v20;
    float32x4_t v37 = v23;
    float32x4_t v39 = v22;
    swift_release();
  }
  swift_retain();
  if (!REEntityGetComponent())
  {
    swift_release();
    goto LABEL_30;
  }
  CollisionComponent.init(_:)((uint64_t)&v44);
  char v24 = v45;
  swift_release();
  swift_bridgeObjectRelease();
  if ((v24 & 4) == 0)
  {
LABEL_30:
    uint64_t v26 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_31;
  }
  char v25 = REContactSetNeedsSwap();
  uint64_t v26 = specialized Scene.copyContacts(from:swapContacts:sceneFromPhysics:)(v42, v39, v40, v37, v4, v25);
LABEL_31:
  REContactSetGetAveragePosition();
  *(float32x2_t *)&long long v28 = simd_float4x4.transform(position:)(v27, v42, v39, v40, v37);
  long long v38 = v28;
  REContactSetGetTotalImpulse();
  float32x4_t v41 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v42, v29.f32[0]), v39, *(float32x2_t *)v29.f32, 1), v40, v29, 2);
  float32x4_t v30 = vmulq_f32(v41, v41);
  unint64_t v31 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).u64[0];
  *(float *)&unint64_t v31 = sqrtf(*(float *)&v31);
  float32x4_t v32 = vmulq_f32(v42, v42);
  float32x4_t v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1);
  if (*(float *)&v31 <= 0.00000011921) {
    *(float *)&unint64_t v31 = 0.00000011921;
  }
  int32x2_t v43 = (int32x2_t)v31;
  float v34 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, v33)).f32[0]);
  uint64_t result = REContactSetGetMaxPenetrationDepth();
  *(float32x2_t *)&long long v35 = vdiv_f32(*(float32x2_t *)v41.f32, (float32x2_t)vdup_lane_s32(v43, 0));
  *((float *)&v35 + 2) = v41.f32[2] / *(float *)v43.i32;
  HIDWORD(v35) = 0;
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v12;
  *(_OWORD *)(a2 + 16) = v38;
  *(void *)(a2 + 32) = v43.u32[0];
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 48) = v35;
  *(void *)(a2 + 64) = COERCE_UNSIGNED_INT(v34 * v36);
  *(void *)(a2 + 72) = v26;
  return result;
}

uint64_t closure #22 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = *a1;
  if (!result) {
    goto LABEL_28;
  }
  uint64_t v5 = a1[1];
  uint64_t result = RECollisionObjectGetUserData();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v6 = result;
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v5)
  {
    uint64_t result = RECollisionObjectGetUserData();
    if ((result & 0x8000000000000000) == 0)
    {
      uint64_t v7 = result;
      if (result)
      {
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          uint64_t v8 = swift_dynamicCastClassUnconditional();
          goto LABEL_9;
        }
        uint64_t result = REEntityIsBeingDestroyed();
        if ((result & 1) == 0)
        {
          uint64_t v10 = specialized static Entity.entityInfoType(_:)();
          if (v10)
          {
            uint64_t v9 = (*(uint64_t (**)(void))(v10 + 232))();
            uint64_t v11 = *(void *)(v9 + 16);
            swift_retain();
            MEMORY[0x22A68E750](v11, 0);
            *(void *)(v9 + 16) = v6;
            MEMORY[0x22A68E750](v6, v9);
            swift_release();
            goto LABEL_13;
          }
          uint64_t v8 = makeEntity(for:)(v6);
LABEL_9:
          uint64_t v9 = v8;
LABEL_13:
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            uint64_t result = swift_dynamicCastClassUnconditional();
            goto LABEL_15;
          }
          uint64_t result = REEntityIsBeingDestroyed();
          if ((result & 1) == 0)
          {
            uint64_t v13 = specialized static Entity.entityInfoType(_:)();
            if (v13)
            {
              uint64_t v12 = (*(uint64_t (**)(void))(v13 + 232))();
              uint64_t v14 = *(void *)(v12 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v14, 0);
              *(void *)(v12 + 16) = v7;
              MEMORY[0x22A68E750](v7, v12);
              uint64_t result = swift_release();
              goto LABEL_19;
            }
            uint64_t result = makeEntity(for:)(v7);
LABEL_15:
            uint64_t v12 = result;
LABEL_19:
            *a2 = v9;
            a2[1] = v12;
            return result;
          }
          goto LABEL_27;
        }
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t closure #23 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    float v4 = *(float *)result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t result = swift_dynamicCastClassUnconditional();
      goto LABEL_4;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      uint64_t v6 = specialized static Entity.entityInfoType(_:)();
      if (v6)
      {
        uint64_t v5 = (*(uint64_t (**)(void))(v6 + 232))();
        uint64_t v7 = *(void *)(v5 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v7, 0);
        *(void *)(v5 + 16) = v2;
        MEMORY[0x22A68E750](v2, v5);
        uint64_t result = swift_release();
        goto LABEL_8;
      }
      uint64_t result = makeEntity(for:)(v2);
LABEL_4:
      uint64_t v5 = result;
LABEL_8:
      *(double *)a2 = v4;
      *(void *)(a2 + 8) = v5;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #25 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = *(void *)a1;
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = RERigidBodyGetEntity();
  if (result)
  {
    uint64_t v6 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t result = swift_dynamicCastClassUnconditional();
      goto LABEL_5;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      uint64_t v8 = specialized static Entity.entityInfoType(_:)();
      if (v8)
      {
        uint64_t v7 = (*(uint64_t (**)(void))(v8 + 232))();
        uint64_t v9 = *(void *)(v7 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v9, 0);
        *(void *)(v7 + 16) = v6;
        MEMORY[0x22A68E750](v6, v7);
        uint64_t result = swift_release();
        goto LABEL_9;
      }
      uint64_t result = makeEntity(for:)(v6);
LABEL_5:
      uint64_t v7 = result;
LABEL_9:
      *(void *)a2 = v7;
      *(unsigned char *)(a2 + 8) = v5;
      return result;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t closure #26 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v9)(long long *__return_ptr, uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  long long v18[2];

  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v6 = result;
  swift_beginAccess();
  if (!*(void *)(v6 + 216))
  {
    uint64_t result = swift_release();
LABEL_8:
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  uint64_t v7 = *(void *)(v6 + 224);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v15 = v4;
  uint64_t v9 = *(void (**)(long long *__return_ptr, uint64_t *, uint64_t, uint64_t))(v7 + 32);
  swift_unknownObjectRetain();
  v9(&v16, &v15, ObjectType, v7);
  if (!v17)
  {
LABEL_17:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for SynchronizationPeerID?);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  outlined init with take of BindableDataInternal(&v16, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MutableBox<Bool>);
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = 0;
  if (!v3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v11 = v10;
  if (!(id)REEntityGetSwiftObject())
  {
    if ((REEntityIsBeingDestroyed() & 1) == 0)
    {
      uint64_t v13 = specialized static Entity.entityInfoType(_:)();
      if (v13)
      {
        uint64_t v12 = (*(uint64_t (**)(void))(v13 + 232))();
        uint64_t v14 = *(void *)(v12 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v14, 0);
        *(void *)(v12 + 16) = v3;
        MEMORY[0x22A68E750](v3, v12);
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        uint64_t v12 = makeEntity(for:)(v3);
        swift_release();
        swift_unknownObjectRelease();
      }
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for Entity();
  uint64_t v12 = swift_dynamicCastClassUnconditional();
LABEL_13:
  outlined init with take of BindableDataInternal(v18, (uint64_t)&v16);
  *(void *)a2 = v12;
  uint64_t result = outlined init with take of BindableDataInternal(&v16, a2 + 8);
  *(void *)(a2 + 48) = partial apply for closure #1 in closure #26 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:);
  *(void *)(a2 + 56) = v11;
  return result;
}

uint64_t closure #27 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v10)(void *__return_ptr, uint64_t *, uint64_t, uint64_t);
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void v17[5];

  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(unsigned __int8 *)(a1 + 16);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v7 = result;
  swift_beginAccess();
  if (!*(void *)(v7 + 216))
  {
    uint64_t result = swift_release();
LABEL_7:
    *(unsigned char *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  uint64_t v8 = *(void *)(v7 + 224);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = v4;
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t *, uint64_t, uint64_t))(v8 + 32);
  swift_unknownObjectRetain();
  v10(v17, &v16, ObjectType, v8);
  if (!v5)
  {
    static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log();
    uint64_t v11 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v12 = 0;
LABEL_9:

    if (v3) {
      goto LABEL_10;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v5 == 1)
  {
    static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log();
    uint64_t v11 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v12 = 1;
    goto LABEL_9;
  }
  uint64_t v12 = 1;
  if (!v3) {
    goto LABEL_16;
  }
LABEL_10:
  if (!(id)REEntityGetSwiftObject())
  {
    uint64_t result = REEntityIsBeingDestroyed();
    if (result)
    {
      __break(1u);
      return result;
    }
    uint64_t v14 = specialized static Entity.entityInfoType(_:)();
    if (v14)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(v14 + 232))(v14);
      uint64_t v15 = *(void *)(v13 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v15, 0);
      *(void *)(v13 + 16) = v3;
      MEMORY[0x22A68E750](v3, v13);
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v13 = makeEntity(for:)(v3);
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for Entity();
  uint64_t v13 = swift_dynamicCastClassUnconditional();
LABEL_18:
  *(void *)a2 = v13;
  uint64_t result = outlined init with take of SynchronizationPeerID?((uint64_t)v17, a2 + 8);
  *(unsigned char *)(a2 + 48) = v12;
  return result;
}

uint64_t closure #28 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  void *(*v9)(void *__return_ptr, uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void v14[5];

  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v6 = result;
  swift_beginAccess();
  if (!*(void *)(v6 + 216))
  {
    uint64_t result = swift_release();
LABEL_7:
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
    return result;
  }
  uint64_t v7 = *(void *)(v6 + 224);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = v4;
  uint64_t v9 = *(void *(**)(void *__return_ptr, uint64_t *, uint64_t, uint64_t))(v7 + 32);
  swift_unknownObjectRetain();
  uint64_t result = (uint64_t)v9(v14, &v13, ObjectType, v7);
  if (!v3) {
    goto LABEL_15;
  }
  if (!(id)REEntityGetSwiftObject())
  {
    uint64_t result = REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      uint64_t v11 = specialized static Entity.entityInfoType(_:)();
      if (v11)
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(v11 + 232))(v11);
        uint64_t v12 = *(void *)(v10 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v12, 0);
        *(void *)(v10 + 16) = v3;
        MEMORY[0x22A68E750](v3, v10);
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        uint64_t v10 = makeEntity(for:)(v3);
        swift_release();
        swift_unknownObjectRelease();
      }
      goto LABEL_12;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for Entity();
  uint64_t v10 = swift_dynamicCastClassUnconditional();
LABEL_12:
  *(void *)a2 = v10;
  return outlined init with take of SynchronizationPeerID?((uint64_t)v14, (uint64_t)a2 + 8);
}

void closure #29 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized static AudioPlaybackController.audioPlaybackControllerForToken(token:)(*a1);
  if (!v3)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    uint64_t v4 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
  }
  *a2 = v3;
}

uint64_t closure #30 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t result = specialized Scene.getPublicComponentType(_:)(*(void *)(a1 + 8));
  if (!result || (uint64_t v6 = result, v7 = v5, result = REEntityIsNonHiddenAndInHierarchy(), !result))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t result = swift_dynamicCastClassUnconditional();
    goto LABEL_5;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v9 = specialized static Entity.entityInfoType(_:)();
    if (v9)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(v9 + 232))();
      uint64_t v10 = *(void *)(v8 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v10, 0);
      *(void *)(v8 + 16) = v3;
      MEMORY[0x22A68E750](v3, v8);
      uint64_t result = swift_release();
      goto LABEL_10;
    }
    uint64_t result = makeEntity(for:)(v3);
LABEL_5:
    uint64_t v8 = result;
LABEL_10:
    *a2 = v8;
    a2[1] = v6;
    a2[2] = v7;
    return result;
  }
  __break(1u);
  return result;
}

unsigned __int8 *closure #35 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  unsigned int v2 = result[1];
  if (v2 > 1)
  {
    __break(1u);
  }
  else
  {
    int v3 = *result;
    if (!*result)
    {
LABEL_5:
      *a2 = v3 | (v2 != 0);
      return result;
    }
    if (v3 == 1)
    {
      LOWORD(v3) = 256;
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

__n128 closure #37 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = 0;
  return result;
}

unsigned char *closure #38 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(unsigned char *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = (2 * (result[1] != 1)) | ((*result != 1) << 9);
  return result;
}

__n128 closure #39 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2 = a1[1].n128_u64[0];
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v2;
  return result;
}

uint64_t Scene.Publisher.receive<A>(subscriber:)()
{
  return Publisher.subscribe<A>(_:)();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Scene.Publisher<A>()
{
  return Scene.Publisher.receive<A>(subscriber:)();
}

uint64_t Scene.CorePublisher.init(dispatcher:sourceObject:componentType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a2;
  a4[1] = a3;
  a4[2] = result;
  return result;
}

uint64_t Scene.CorePublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Scene.CorePublisher.Inner();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v15 - v12;
  v15[1] = *(void *)(v3 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a3, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v8, a3);
  type metadata accessor for REEventDispatcher();
  swift_retain();
  swift_getWitnessTable();
  swift_getWitnessTable();
  Publisher.subscribe<A>(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return swift_release();
}

uint64_t type metadata accessor for Scene.CorePublisher.Inner()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type SynchronizationEvents.OwnershipResponse.Response and conformance SynchronizationEvents.OwnershipResponse.Response()
{
  unint64_t result = lazy protocol witness table cache variable for type SynchronizationEvents.OwnershipResponse.Response and conformance SynchronizationEvents.OwnershipResponse.Response;
  if (!lazy protocol witness table cache variable for type SynchronizationEvents.OwnershipResponse.Response and conformance SynchronizationEvents.OwnershipResponse.Response)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SynchronizationEvents.OwnershipResponse.Response and conformance SynchronizationEvents.OwnershipResponse.Response);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoPlayerEvents.ContentTypeDidChange.ContentType and conformance VideoPlayerEvents.ContentTypeDidChange.ContentType()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoPlayerEvents.ContentTypeDidChange.ContentType and conformance VideoPlayerEvents.ContentTypeDidChange.ContentType;
  if (!lazy protocol witness table cache variable for type VideoPlayerEvents.ContentTypeDidChange.ContentType and conformance VideoPlayerEvents.ContentTypeDidChange.ContentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoPlayerEvents.ContentTypeDidChange.ContentType and conformance VideoPlayerEvents.ContentTypeDidChange.ContentType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VideoPlayerEvents.MediaTypeDidChange.MediaType and conformance VideoPlayerEvents.MediaTypeDidChange.MediaType()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoPlayerEvents.MediaTypeDidChange.MediaType and conformance VideoPlayerEvents.MediaTypeDidChange.MediaType;
  if (!lazy protocol witness table cache variable for type VideoPlayerEvents.MediaTypeDidChange.MediaType and conformance VideoPlayerEvents.MediaTypeDidChange.MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoPlayerEvents.MediaTypeDidChange.MediaType and conformance VideoPlayerEvents.MediaTypeDidChange.MediaType);
  }
  return result;
}

uint64_t Scene.CorePublisher.Inner.combineIdentifier.getter()
{
  return dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter();
}

uint64_t Scene.CorePublisher.Inner.receive(subscription:)()
{
  return dispatch thunk of Subscriber.receive(subscription:)();
}

uint64_t Scene.CorePublisher.Inner.receive(_:)()
{
  return dispatch thunk of Subscriber.receive(_:)();
}

uint64_t Scene.CorePublisher.Inner.receive(completion:)()
{
  return dispatch thunk of Subscriber.receive(completion:)();
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Scene.CorePublisher<A>.Inner<A1>()
{
  return Scene.CorePublisher.Inner.receive(completion:)();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Scene.CorePublisher<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Scene.CorePublisher.receive<A>(subscriber:)(a1, a4, a2);
}

ValueMetadata *type metadata accessor for PhysicsSimulationEvents()
{
  return &type metadata for PhysicsSimulationEvents;
}

ValueMetadata *type metadata accessor for PhysicsSimulationEvents.WillSimulate()
{
  return &type metadata for PhysicsSimulationEvents.WillSimulate;
}

void *assignWithCopy for PhysicsSimulationEvents.WillSimulate(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for PhysicsSimulationEvents.DidSimulate(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PhysicsSimulationEvents.DidSimulate()
{
  return &type metadata for PhysicsSimulationEvents.DidSimulate;
}

ValueMetadata *type metadata accessor for SceneEvents()
{
  return &type metadata for SceneEvents;
}

void *initializeBufferWithCopyOfBuffer for SceneEvents.Update(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for SceneEvents.Update(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for SceneEvents.Update(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for SceneEvents.Update()
{
  return &type metadata for SceneEvents.Update;
}

uint64_t initializeBufferWithCopyOfBuffer for SceneEvents.AnchoredStateChanged(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SceneEvents.AnchoredStateChanged(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = v3;
  return a1;
}

uint64_t assignWithTake for SceneEvents.AnchoredStateChanged(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for SceneEvents.AnchoredStateChanged()
{
  return &type metadata for SceneEvents.AnchoredStateChanged;
}

ValueMetadata *type metadata accessor for SceneEvents.Render()
{
  return &type metadata for SceneEvents.Render;
}

ValueMetadata *type metadata accessor for SceneEvents.DidAddEntity()
{
  return &type metadata for SceneEvents.DidAddEntity;
}

ValueMetadata *type metadata accessor for SceneEvents.DidActivateEntity()
{
  return &type metadata for SceneEvents.DidActivateEntity;
}

ValueMetadata *type metadata accessor for SceneEvents.WillDeactivateEntity()
{
  return &type metadata for SceneEvents.WillDeactivateEntity;
}

ValueMetadata *type metadata accessor for SceneEvents.WillRemoveEntity()
{
  return &type metadata for SceneEvents.WillRemoveEntity;
}

void *assignWithCopy for SceneEvents.DidReparentEntity(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SceneEvents.DidReparentEntity()
{
  return &type metadata for SceneEvents.DidReparentEntity;
}

ValueMetadata *type metadata accessor for AnimationEvents()
{
  return &type metadata for AnimationEvents;
}

ValueMetadata *type metadata accessor for AnimationEvents.PlaybackCompleted()
{
  return &type metadata for AnimationEvents.PlaybackCompleted;
}

ValueMetadata *type metadata accessor for AnimationEvents.PlaybackLooped()
{
  return &type metadata for AnimationEvents.PlaybackLooped;
}

ValueMetadata *type metadata accessor for AnimationEvents.PlaybackTerminated()
{
  return &type metadata for AnimationEvents.PlaybackTerminated;
}

ValueMetadata *type metadata accessor for AnimationEvents.PlaybackStarted()
{
  return &type metadata for AnimationEvents.PlaybackStarted;
}

ValueMetadata *type metadata accessor for AnimationEvents.SkeletalPoseUpdateComplete()
{
  return &type metadata for AnimationEvents.SkeletalPoseUpdateComplete;
}

ValueMetadata *type metadata accessor for AudioEvents()
{
  return &type metadata for AudioEvents;
}

ValueMetadata *type metadata accessor for AudioEvents.PlaybackBegan()
{
  return &type metadata for AudioEvents.PlaybackBegan;
}

ValueMetadata *type metadata accessor for AudioEvents.PlaybackCompleted()
{
  return &type metadata for AudioEvents.PlaybackCompleted;
}

__n128 __swift_memcpy68_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Contact(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 68)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Contact(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 68) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Contact()
{
  return &type metadata for Contact;
}

ValueMetadata *type metadata accessor for CollisionEvents()
{
  return &type metadata for CollisionEvents;
}

__n128 __swift_memcpy80_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CollisionEvents.Began()
{
  return &type metadata for CollisionEvents.Began;
}

uint64_t destroy for CollisionEvents.Began()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CollisionEvents.Began(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CollisionEvents.Began(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CollisionEvents.Began(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CollisionEvents.Began(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollisionEvents.Began(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CollisionEvents.Updated()
{
  return &type metadata for CollisionEvents.Updated;
}

ValueMetadata *type metadata accessor for CollisionEvents.Ended()
{
  return &type metadata for CollisionEvents.Ended;
}

ValueMetadata *type metadata accessor for SynchronizationEvents()
{
  return &type metadata for SynchronizationEvents;
}

uint64_t destroy for SynchronizationEvents.OwnershipRequest(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);

  return swift_release();
}

uint64_t initializeWithCopy for SynchronizationEvents.OwnershipRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_retain();
  return a1;
}

void *assignWithCopy for SynchronizationEvents.OwnershipRequest(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  uint64_t v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SynchronizationEvents.OwnershipRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SynchronizationEvents.OwnershipRequest()
{
  return &type metadata for SynchronizationEvents.OwnershipRequest;
}

uint64_t initializeWithCopy for SynchronizationEvents.OwnershipResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = a2 + 8;
  uint64_t v6 = *(void *)(a2 + 32);
  swift_retain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    long long v8 = *(_OWORD *)(v5 + 16);
    *uint64_t v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(void *)(a1 + 40) = *(void *)(v5 + 32);
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for SynchronizationEvents.OwnershipResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v4)
    {
      *(void *)(a1 + 32) = v4;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
LABEL_8:
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for SynchronizationEvents.OwnershipResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SynchronizationEvents.OwnershipResponse(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SynchronizationEvents.OwnershipResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SynchronizationEvents.OwnershipResponse()
{
  return &type metadata for SynchronizationEvents.OwnershipResponse;
}

ValueMetadata *type metadata accessor for SynchronizationEvents.OwnershipResponse.Response()
{
  return &type metadata for SynchronizationEvents.OwnershipResponse.Response;
}

uint64_t destroy for SynchronizationEvents.OwnershipResponse(uint64_t a1)
{
  uint64_t result = swift_release();
  if (*(void *)(a1 + 32))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  return result;
}

uint64_t initializeWithCopy for SynchronizationEvents.OwnershipChanged(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  long long v4 = (_OWORD *)(a1 + 8);
  long long v5 = a2 + 1;
  uint64_t v6 = a2[4];
  swift_retain();
  if (v6)
  {
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, void *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    long long v8 = *((_OWORD *)v5 + 1);
    *long long v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(void *)(a1 + 40) = v5[4];
  }
  return a1;
}

uint64_t assignWithCopy for SynchronizationEvents.OwnershipChanged(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v4)
    {
      *(void *)(a1 + 32) = v4;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t assignWithTake for SynchronizationEvents.OwnershipChanged(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SynchronizationEvents.OwnershipChanged(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SynchronizationEvents.OwnershipChanged(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SynchronizationEvents.OwnershipChanged()
{
  return &type metadata for SynchronizationEvents.OwnershipChanged;
}

ValueMetadata *type metadata accessor for ComponentEvents()
{
  return &type metadata for ComponentEvents;
}

ValueMetadata *type metadata accessor for ComponentEvents.DidAdd()
{
  return &type metadata for ComponentEvents.DidAdd;
}

ValueMetadata *type metadata accessor for ComponentEvents.DidActivate()
{
  return &type metadata for ComponentEvents.DidActivate;
}

ValueMetadata *type metadata accessor for ComponentEvents.WillDeactivate()
{
  return &type metadata for ComponentEvents.WillDeactivate;
}

uint64_t initializeBufferWithCopyOfBuffer for ComponentEvents.WillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithTake for ComponentEvents.WillRemove(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for ComponentEvents.WillRemove()
{
  return &type metadata for ComponentEvents.WillRemove;
}

uint64_t assignWithCopy for ComponentEvents.DidAdd(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for ComponentEvents.DidChange()
{
  return &type metadata for ComponentEvents.DidChange;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents()
{
  return &type metadata for VideoPlayerEvents;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ContentTypeDidChange()
{
  return &type metadata for VideoPlayerEvents.ContentTypeDidChange;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ContentTypeDidChange.ContentType()
{
  return &type metadata for VideoPlayerEvents.ContentTypeDidChange.ContentType;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ViewingModeDidChange()
{
  return &type metadata for VideoPlayerEvents.ViewingModeDidChange;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ImmersiveViewingModeDidChange()
{
  return &type metadata for VideoPlayerEvents.ImmersiveViewingModeDidChange;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ImmersiveViewingModeWillTransition()
{
  return &type metadata for VideoPlayerEvents.ImmersiveViewingModeWillTransition;
}

uint64_t getEnumTagSinglePayload for VideoPlayerEvents.ViewingModeDidChange(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
LABEL_17:
  if (*(unsigned __int8 *)a1 <= 2u) {
    int v6 = 2;
  }
  else {
    int v6 = *(unsigned __int8 *)a1;
  }
  int v7 = v6 - 3;
  if (*(unsigned __int8 *)a1 < 2u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoPlayerEvents.ViewingModeDidChange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280A220CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.ImmersiveViewingModeDidTransition()
{
  return &type metadata for VideoPlayerEvents.ImmersiveViewingModeDidTransition;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.VideoSizeDidChange()
{
  return &type metadata for VideoPlayerEvents.VideoSizeDidChange;
}

uint64_t getEnumTagSinglePayload for VideoPlayerEvents.ContentTypeDidChange(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoPlayerEvents.ContentTypeDidChange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280A23B4);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.MediaTypeDidChange()
{
  return &type metadata for VideoPlayerEvents.MediaTypeDidChange;
}

unsigned char *storeEnumTagSinglePayload for SynchronizationEvents.OwnershipResponse.Response(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280A24B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.MediaTypeDidChange.MediaType()
{
  return &type metadata for VideoPlayerEvents.MediaTypeDidChange.MediaType;
}

ValueMetadata *type metadata accessor for VideoPlayerEvents.VideoReceiverEndpointDidChanged()
{
  return &type metadata for VideoPlayerEvents.VideoReceiverEndpointDidChanged;
}

uint64_t type metadata accessor for Scene.Publisher()
{
  return __swift_instantiateGenericMetadata();
}

void *assignWithCopy for Scene.CorePublisher(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Scene.CorePublisher(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for Scene.CorePublisher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Scene.CorePublisher.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Scene.CorePublisher.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for Scene.CorePublisher.Inner(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
}

uint64_t initializeWithCopy for Scene.CorePublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for Scene.CorePublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for Scene.CorePublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for Scene.CorePublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for Scene.CorePublisher.Inner(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Scene.CorePublisher.Inner(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2280A2BE0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in Scene.CorePublisher<A>.Inner<A1>()
{
  return swift_getWitnessTable();
}

void *specialized Scene.copyContacts(from:swapContacts:sceneFromPhysics:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = REContactSetCount();
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0, MEMORY[0x263F8EE78]);
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    BOOL v9 = result;
    if (v7)
    {
      v60.columns[0] = (simd_float3)a1;
      v60.columns[0].i32[3] = 0;
      float32x4_t v10 = vmulq_f32(a1, a1);
      float v11 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
      v60.columns[2] = (simd_float3)a3;
      v60.columns[2].i32[3] = 0;
      v60.columns[1] = (simd_float3)a2;
      v60.columns[1].i32[3] = 0;
      simd_float3x3 v61 = __invert_f3(v60);
      uint64_t v12 = 0;
      int32x4_t v13 = vzip1q_s32((int32x4_t)v61.columns[0], (int32x4_t)v61.columns[1]);
      v13.i32[2] = v61.columns[2].i32[0];
      float32x4_t v50 = (float32x4_t)v13;
      int32x4_t v14 = vtrn2q_s32((int32x4_t)v61.columns[0], (int32x4_t)v61.columns[1]);
      v14.i32[2] = v61.columns[2].i32[1];
      v61.columns[0] = (simd_float3)vzip2q_s32((int32x4_t)v61.columns[0], (int32x4_t)v61.columns[1]);
      v61.columns[0].i32[2] = v61.columns[2].i32[2];
      float32x4_t v48 = (float32x4_t)v61.columns[0];
      float32x4_t v49 = (float32x4_t)v14;
      do
      {
        if (a6)
        {
          REContactSetGetPositionBWorld();
          long long v16 = v15;
          HIDWORD(v16) = v44;
          long long v59 = v16;
          REContactSetGetNormal();
          *(float32x2_t *)v18.f32 = vsub_f32(0, v17);
          v18.f32[2] = 0.0 - v19;
          v18.i32[3] = 0;
          float32x4_t v58 = v18;
          REContactSetGetImpulse();
          *(float32x2_t *)v21.f32 = vsub_f32(0, v20);
          v21.f32[2] = 0.0 - v22;
          v21.i32[3] = 0;
          float32x4_t v52 = v21;
          int v44 = HIDWORD(v59);
        }
        else
        {
          REContactSetGetPositionAWorld();
          long long v24 = v23;
          HIDWORD(v24) = v45;
          long long v59 = v24;
          REContactSetGetNormal();
          float32x4_t v26 = v25;
          v26.i32[3] = v46;
          float32x4_t v58 = v26;
          REContactSetGetImpulse();
          float32x4_t v28 = v27;
          v28.i32[3] = v47;
          float32x4_t v52 = v28;
          __int32 v46 = v58.i32[3];
          int v45 = HIDWORD(v59);
        }
        REContactSetGetPenetrationDepth();
        float v31 = v30;
        float32x4_t v32 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, v52.f32[0]), a2, *(float32x2_t *)v52.f32, 1), a3, v52, 2);
        float32x4_t v33 = vmulq_f32(v32, v32);
        float v34 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]);
        if (v34 > 0.00000011921) {
          *(float *)v29.i32 = v34;
        }
        else {
          *(float *)v29.i32 = 0.00000011921;
        }
        unint64_t v36 = v9[2];
        unint64_t v35 = v9[3];
        if (v36 >= v35 >> 1)
        {
          int32x2_t v53 = v29;
          float32x4_t v43 = v32;
          float32x4_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v9);
          float32x4_t v32 = v43;
          int32x2_t v29 = v53;
          BOOL v9 = v42;
        }
        float32x4_t v37 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a1, *(float *)&v59 + (float)(v31 * v58.f32[0])), a2, *((float *)&v59 + 1) + vmuls_lane_f32(v31, *(float32x2_t *)v58.f32, 1)), a3, *((float *)&v59 + 2) + vmuls_lane_f32(v31, v58, 2)), a4);
        float32x4_t v38 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 3);
        *(float32x2_t *)&long long v39 = vdiv_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.f32);
        *((void *)&v39 + 1) = vdivq_f32(v37, v38).u32[2];
        *(float32x2_t *)v37.f32 = vdiv_f32(*(float32x2_t *)v32.f32, (float32x2_t)vdup_lane_s32(v29, 0));
        v37.f32[2] = v32.f32[2] / *(float *)v29.i32;
        ++v12;
        v37.i32[3] = 0;
        float32x4_t v40 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, v58.f32[0]), v49, *(float32x2_t *)v58.f32, 1), v48, v58, 2);
        v40.i32[3] = v54;
        void v9[2] = v36 + 1;
        float32x4_t v41 = &v9[10 * v36];
        *((_OWORD *)v41 + 2) = v39;
        *((float32x4_t *)v41 + 3) = v40;
        *((_DWORD *)v41 + 16) = v29.i32[0];
        *((float32x4_t *)v41 + 5) = v37;
        *((float *)v41 + 24) = v11 * v31;
      }
      while (v7 != v12);
    }
    return v9;
  }
  return result;
}

uint64_t specialized Scene.getPublicComponentType(_:)(Swift::UInt a1)
{
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v16 + 16);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 24);
  if (*(void *)(v4 + 16))
  {
    uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v6)
    {
      uint64_t v7 = *(void *)(v4 + 56) + 80 * v5;
      uint64_t v8 = *(void *)(v7 + 16);
      int v9 = *(unsigned __int8 *)(v7 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      if (v9 == 2) {
        return v8;
      }
      return 0;
    }
  }
  if (one-time initialization token for handlesToCustomComponentTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v10 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v12 & 1) == 0))
  {
    swift_endAccess();
    swift_release();
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 16 * v11);
  swift_endAccess();
  swift_release();
  uint64_t v8 = 0;
  if (swift_conformsToProtocol2()) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (!v14) {
    return v13;
  }
  return v8;
}

uint64_t sub_2280A3170()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #33 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #30 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_2280A31C4()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #28 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return closure #28 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t partial apply for closure #26 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #26 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t partial apply for closure #21 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #20 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_2280A3228()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2280A3238()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t *partial apply for closure #17 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #16 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_2280A3264()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2280A3274()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #14 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #14 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_2280A328C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #13 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #10 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_2280A32B8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2280A32C8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2280A32D8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2280A32E8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #9 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t _s10RealityKit5SceneC0A10FoundationE9publisher3for2on13componentType10rootEntity8matchingAC9PublisherVy_xGxm_AA11EventSource_pSgAA9Component_pXpSgAA0K0CSgSSSgtAA0N0RzlFAA0C6EventsO6RenderVSgSo010REEngineDorN0VcfU6_TA_0@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type Scene.CorePublisher<REVideoPlayerVideoReceiverEndpointChangedEvent> and conformance Scene.CorePublisher<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #6 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #6 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t sub_2280A33A4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #5 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(void *)(v2 + 16), (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

uint64_t sub_2280A33D8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #4 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(void *)(v2 + 16), (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

uint64_t sub_2280A340C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #3 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(void *)(v2 + 16), &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

uint64_t sub_2280A3440()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(void *)(v2 + 16), (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

uint64_t sub_2280A3474()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(void *)(v2 + 16), &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

void partial apply for closure #1 in closure #26 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)()
{
  *(unsigned char *)(v0 + 16) = 1;
}

uint64_t outlined init with take of SynchronizationPeerID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2280A351C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t partial apply for closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t a1)
{
  return closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(void *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t objectdestroy_164Tm_0()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t a1)
{
  return closure #1 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(void *)(v1 + 32), *(void (**)(char *))(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 16));
}

uint64_t outlined init with copy of SynchronizationEvents.OwnershipRequest(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SynchronizationEvents.OwnershipRequest(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for MotionStateEvents()
{
  return &type metadata for MotionStateEvents;
}

uint64_t initializeBufferWithCopyOfBuffer for MotionStateEvents.DidChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MotionStateEvents.DidChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for MotionStateEvents.DidChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MotionStateEvents.DidChange(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MotionStateEvents.DidChange(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MotionStateEvents.DidChange()
{
  return &type metadata for MotionStateEvents.DidChange;
}

uint64_t static __REAssetBundle.__init(url:assetService:materialDefinition:with:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X3>, uint64_t *a4@<X8>)
{
  char v7 = *a3;
  memset(v17, 0, sizeof(v17));
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  __int16 v18 = 1;
  char v19 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  v12[0] = v7;
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  uint64_t ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a1, a2, ServiceLocatorForLegacyAPIWorkaround, (uint64_t)v12, a4);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v12);
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  return specialized Sequence.compactMap<A>(_:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  long long v15 = MEMORY[0x263F8EE78];
  if (a3 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      for (unint64_t i = 4; ; ++i)
      {
        char v7 = i - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = MEMORY[0x22A689930](i - 4, a3);
          uint64_t v9 = i - 3;
          if (__OFADD__(v7, 1)) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(a3 + 8 * i);
          swift_retain();
          uint64_t v9 = i - 3;
          if (__OFADD__(v7, 1))
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        long long v14 = v8;
        a1(&v13, &v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return swift_bridgeObjectRelease();
        }
        uint64_t v10 = swift_release();
        if (v13)
        {
          MEMORY[0x22A688E10](v10);
          if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v9 == v5)
        {
          swift_bridgeObjectRelease();
          return v15;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v8)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 == a4)
  {
    return MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = a3;
    if (a4 >= a3)
    {
      uint64_t v8 = (void *(*)(uint64_t *__return_ptr, uint64_t *))result;
      uint64_t v5 = (void *)MEMORY[0x263F8EE78];
      while (v7 < a4)
      {
        long long v13 = v7;
        uint64_t result = (uint64_t)v8(&v12, &v13);
        if (v4)
        {
          swift_bridgeObjectRelease();
          return (uint64_t)v5;
        }
        uint64_t v9 = v12;
        if (v12)
        {
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
            uint64_t v5 = (void *)result;
          }
          uint64_t v11 = v5[2];
          uint64_t v10 = v5[3];
          if (v11 >= v10 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
            uint64_t v5 = (void *)result;
          }
          void v5[2] = v11 + 1;
          v5[v11 + 4] = v9;
        }
        if (a4 == ++v7) {
          return (uint64_t)v5;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(void (*a1)(long long *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  uint64_t v7 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v19 = *(void *)(a3 + 8 * v6 + 32);
    a1(&v17, &v19);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    if ((void)v17)
    {
      long long v16 = v17;
      uint64_t v9 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      }
      unint64_t v11 = v7[2];
      unint64_t v10 = v7[3];
      long long v12 = v16;
      if (v11 >= v10 >> 1)
      {
        long long v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v7);
        long long v12 = v16;
        uint64_t v7 = v13;
      }
      v7[2] = v11 + 1;
      uint64_t v8 = &v7[3 * v11];
      *((_OWORD *)v8 + 2) = v12;
      void v8[6] = v9;
    }
    ++v6;
  }
  while (v4 != v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t __REAssetBundle.sceneAsset(for:)(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + 56);
  if ((v3 & 0xC000000000000001) != 0)
  {
    unint64_t v23 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v4 = ~v7;
    unint64_t v23 = v3 + 64;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(v3 + 64);
    unint64_t v6 = v3;
  }
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  int64_t v22 = (unint64_t)(v4 + 64) >> 6;
  if ((v6 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaDictionary.Iterator.next()())
  {
    type metadata accessor for __REAsset();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v12 = v24;
    swift_unknownObjectRelease();
    type metadata accessor for RESceneDescriptor();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v13 = v24;
    swift_unknownObjectRelease();
    uint64_t v14 = v11;
    uint64_t v15 = v5;
    if (v24)
    {
      do
      {
        int v21 = MEMORY[0x22A691EC0](*(void *)(v13 + 16), *(void *)(a1 + 16));
        swift_release();
        if (v21) {
          break;
        }
        uint64_t result = swift_release();
        uint64_t v11 = v14;
        unint64_t v5 = v15;
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_8;
        }
LABEL_11:
        if (v5)
        {
          uint64_t v15 = (v5 - 1) & v5;
          unint64_t v16 = __clz(__rbit64(v5)) | (v11 << 6);
          uint64_t v14 = v11;
        }
        else
        {
          int64_t v17 = v11 + 1;
          if (__OFADD__(v11, 1))
          {
            __break(1u);
            return result;
          }
          if (v17 >= v22) {
            goto LABEL_31;
          }
          unint64_t v18 = *(void *)(v23 + 8 * v17);
          uint64_t v14 = v11 + 1;
          if (!v18)
          {
            uint64_t v14 = v11 + 2;
            if (v11 + 2 >= v22) {
              goto LABEL_31;
            }
            unint64_t v18 = *(void *)(v23 + 8 * v14);
            if (!v18)
            {
              uint64_t v14 = v11 + 3;
              if (v11 + 3 >= v22) {
                goto LABEL_31;
              }
              unint64_t v18 = *(void *)(v23 + 8 * v14);
              if (!v18)
              {
                uint64_t v14 = v11 + 4;
                if (v11 + 4 >= v22) {
                  goto LABEL_31;
                }
                unint64_t v18 = *(void *)(v23 + 8 * v14);
                if (!v18)
                {
                  uint64_t v19 = v11 + 5;
                  while (v22 != v19)
                  {
                    unint64_t v18 = *(void *)(v23 + 8 * v19++);
                    if (v18)
                    {
                      uint64_t v14 = v19 - 1;
                      goto LABEL_26;
                    }
                  }
                  goto LABEL_31;
                }
              }
            }
          }
LABEL_26:
          uint64_t v15 = (v18 - 1) & v18;
          unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
        }
        uint64_t v20 = 8 * v16;
        uint64_t v12 = *(void *)(*(void *)(v6 + 48) + v20);
        uint64_t v13 = *(void *)(*(void *)(v6 + 56) + v20);
        swift_retain();
        swift_retain();
      }
      while (v12);
    }
  }
  else
  {
LABEL_31:
    uint64_t v12 = 0;
  }
  outlined consume of [String : AnimationResource].Iterator._Variant();
  return v12;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  void v16[3];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _OWORD v16[2] = *(void *)(a1 + 16);
  unint64_t v5 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  outlined init with copy of (Int, URL)(a1 + *(int *)(v5 + 24), (uint64_t)v4, &demangling cache variable for type metadata for UUID?);
  unint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  String.utf8CString.getter();
  String.utf8CString.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v8 = RESceneDescriptorCreateFromParams();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v9 = *(void *)(a1 + *(int *)(v5 + 28));
  if (v9 && (unint64_t v10 = *(void *)(v9 + 16)) != 0)
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v12 = v9 + 48;
    while (1)
    {
      uint64_t v13 = *(void *)(v12 - 16);
      if (v13 < (uint64_t)0xFFFFFFFF80000000) {
        break;
      }
      if (v13 > 0x7FFFFFFF) {
        goto LABEL_13;
      }
      v12 += 24;
      String.utf8CString.getter();
      RESceneDescriptorAddSceneCompatibilityVariant();
      uint64_t result = swift_release();
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
LABEL_11:
    type metadata accessor for RESceneDescriptor();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v8;
    uint64_t v15 = __REAssetBundle.sceneAsset(for:)(inited);
    swift_setDeallocating();
    RERelease();
    return v15;
  }
  return result;
}

uint64_t __REAssetBundle.init(bundle:entryName:serviceLocator:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v24 = a3;
  uint64_t v18 = a2;
  int64_t v17 = a6;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of __REAssetBundle.LoadOptions(a5, (uint64_t)v23);
  swift_beginAccess();
  outlined init with copy of __REAssetService(a4 + 120, (uint64_t)v20);
  uint64_t v13 = v21;
  uint64_t v14 = v22;
  __swift_project_boxed_opaque_existential_1(v20, v21);
  v19[0] = v23[0];
  __REAssetService.dispatchPredicate(for:)(v19, v13, v14, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t result = outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v23);
  if (v13)
  {
    outlined init with copy of __REAssetService(a4 + 120, (uint64_t)v20);
    swift_beginAccess();
    static __REAssetBundle.__init_REKit2(bundle:entryName:assetService:coreServiceLocator:_:)(a1, v18, v24, v20, *(void *)(a4 + 16), a5, v17);

    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of __REAssetBundle.LoadOptions(a5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t __REAssetBundle.mainSceneAsset.getter()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = MEMORY[0x22A689930](0, v1);
    goto LABEL_6;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t __REAssetBundle.__mainSceneAsset.getter()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = MEMORY[0x22A689930](0, v1);
    goto LABEL_6;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

double __REAssetBundle.LoadOptions.init(queueOptions:)@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *a1;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 81) = 0u;
  *(_WORD *)(a2 + 97) = 1;
  *(unsigned char *)(a2 + 99) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 104) = 0;
  *(unsigned char *)a2 = v2;
  return result;
}

uint64_t __REAssetBundle.init(url:serviceLocator:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v16 = a4;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of __REAssetBundle.LoadOptions(a3, (uint64_t)v21);
  swift_beginAccess();
  outlined init with copy of __REAssetService(a2 + 120, (uint64_t)v18);
  uint64_t v11 = v19;
  uint64_t v12 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  v17[0] = v21[0];
  __REAssetService.dispatchPredicate(for:)(v17, v11, v12, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t result = outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v21);
  if (v11)
  {
    outlined init with copy of __REAssetService(a2 + 120, (uint64_t)v18);
    swift_beginAccess();
    static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a1, v18, *(void *)(a2 + 16), a3, v16);
    swift_release();
    outlined destroy of __REAssetBundle.LoadOptions(a3);
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t static __REAssetBundle.__sdkBundleID.getter()
{
  return 0xD000000000000014;
}

uint64_t static __REAssetBundle.__sdkBundleVersionKey.getter()
{
  return 0x656C646E75424643;
}

uint64_t one-time initialization function for __sdkBundleVersion()
{
  uint64_t result = specialized static __REAssetBundle.frameworkVersion(key:)(0x656C646E75424643, 0xEF6E6F6973726556);
  static __REAssetBundle.__sdkBundleVersion = result;
  *(void *)algn_2681C2EC8 = v1;
  return result;
}

uint64_t static __REAssetBundle.__sdkBundleVersion.getter()
{
  if (one-time initialization token for __sdkBundleVersion != -1) {
    swift_once();
  }
  uint64_t v0 = static __REAssetBundle.__sdkBundleVersion;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static __REAssetBundle.__sdkBundleVersionInvalid.getter()
{
  return 12589;
}

uint64_t static __REAssetBundle.__platform.getter()
{
  return 5459817;
}

uint64_t static __REAssetBundle.__fileExtension.getter()
{
  return 0x7974696C616572;
}

uint64_t one-time initialization function for minimumWritingFormatVersion()
{
  uint64_t result = RERealityFileWriterGetDefaultVersion();
  static __REAssetBundle.minimumWritingFormatVersion = result;
  return result;
}

uint64_t one-time initialization function for maximumReadingFormatVersion()
{
  uint64_t result = RERealityFileWriterGetMaxVersion();
  static __REAssetBundle.maximumReadingFormatVersion = result;
  return result;
}

void one-time initialization function for defaultRealityFileWriteVersion()
{
  static __REAssetBundle.defaultRealityFileWriteVersion = 12;
}

uint64_t static __REAssetBundle.fileExtension.getter()
{
  return 0x7974696C616572;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.Header.VersionInfo.CodingKeys()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 != 1) {
    unint64_t v1 = 0x6C506E696769726FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.Header.VersionInfo.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __REAssetBundle.Header.VersionInfo.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.Header.VersionInfo.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.Header.VersionInfo.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __REAssetBundle.Header.VersionInfo.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.Header.VersionInfo.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1[2];
  v11[3] = v1[3];
  _OWORD v11[4] = v7;
  uint64_t v8 = v1[4];
  v11[1] = v1[5];
  _OWORD v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  uint64_t v9 = v11[5];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v9)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __REAssetBundle.Header.VersionInfo.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.Header.VersionInfo.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    char v27 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v12 = v11;
    uint64_t v24 = v9;
    char v26 = 1;
    swift_bridgeObjectRetain();
    uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = v14;
    uint64_t v22 = v13;
    char v25 = 2;
    swift_bridgeObjectRetain();
    uint64_t v23 = v15;
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v18 = v17;
    uint64_t v19 = v16;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v20 = v23;
    *a2 = v24;
    a2[1] = v12;
    a2[2] = v22;
    a2[3] = v20;
    a2[4] = v19;
    a2[5] = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.Header.VersionInfo@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return __REAssetBundle.Header.VersionInfo.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.Header.VersionInfo(void *a1)
{
  return __REAssetBundle.Header.VersionInfo.encode(to:)(a1);
}

uint64_t __REAssetBundle.Header.versionInfo.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v5 = v1[5];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v6;
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 __REAssetBundle.Header.versionInfo.setter(long long *a1)
{
  __n128 v5 = (__n128)a1[1];
  long long v6 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = v5;
  *(_OWORD *)uint64_t v1 = v6;
  *(__n128 *)(v1 + 16) = v5;
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  return result;
}

uint64_t (*__REAssetBundle.Header.versionInfo.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.Header.minVersion.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t __REAssetBundle.Header.minVersion.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t (*__REAssetBundle.Header.minVersion.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.Header.CodingKeys()
{
  if (*v0) {
    return 0x69737265566E696DLL;
  }
  else {
    return 0x496E6F6973726576;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.Header.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __REAssetBundle.Header.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.Header.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.Header.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __REAssetBundle.Header.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.Header.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *v1;
  long long v13 = v1[1];
  long long v14 = v7;
  uint64_t v9 = *((void *)v1 + 4);
  uint64_t v8 = *((void *)v1 + 5);
  v12[1] = *((void *)v1 + 6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v16 = v14;
  long long v17 = v13;
  uint64_t v18 = v9;
  uint64_t v19 = v8;
  char v20 = 0;
  lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo();
  uint64_t v10 = v15;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v10)
  {
    LOBYTE(v16) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __REAssetBundle.Header.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.Header.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for minimumWritingFormatVersion != -1) {
    swift_once();
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v25 = 0;
  lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v20;
  uint64_t v10 = v22;
  uint64_t v16 = v21;
  uint64_t v17 = v19;
  uint64_t v11 = v24;
  uint64_t v15 = v23;
  LOBYTE(v19) = 1;
  swift_bridgeObjectRetain();
  uint64_t v18 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = v18;
  *a2 = v17;
  a2[1] = v13;
  a2[2] = v16;
  a2[3] = v10;
  a2[4] = v15;
  a2[5] = v11;
  a2[6] = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.Header@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return __REAssetBundle.Header.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.Header(void *a1)
{
  return __REAssetBundle.Header.encode(to:)(a1);
}

uint64_t __REAssetBundle.sceneAssets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static __REAssetBundle.platform()()
{
  return 5459817;
}

RealityKit::__REAssetIdentifier_optional __swiftcall __REAssetBundle.mainSceneIdentifier()()
{
  *uint64_t v0 = 0;
  v0[1] = 0;
  return result;
}

uint64_t static __REAssetBundle.QueueOptions.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  char v3 = v2 == 2;
  int v4 = *a2;
  if (v4 != 2) {
    char v3 = 0;
  }
  if (v2 != 2 && v4 != 2) {
    char v3 = ((v2 & 1) == 0) ^ v4;
  }
  return v3 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __REAssetBundle.QueueOptions(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  char v3 = v2 == 2;
  int v4 = *a2;
  if (v4 != 2) {
    char v3 = 0;
  }
  if (v2 != 2 && v4 != 2) {
    char v3 = ((v2 & 1) == 0) ^ v4;
  }
  return v3 & 1;
}

uint64_t __REAssetBundle.ExportOptions.AssetRemapping.rawAssetPath.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __REAssetBundle.ExportOptions.AssetRemapping.replacementName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

RealityKit::__REAssetBundle::ExportOptions::AssetRemapping __swiftcall __REAssetBundle.ExportOptions.AssetRemapping.init(rawAssetPath:replacement:)(Swift::String rawAssetPath, Swift::String replacement)
{
  *int v2 = rawAssetPath;
  v2[1] = replacement;
  result.replacementName = replacement;
  result.rawAssetPath = rawAssetPath;
  return result;
}

void __REAssetBundle.ExportOptions.queueOptions.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *__REAssetBundle.ExportOptions.queueOptions.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.queueOptions.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.compressionLevel.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t __REAssetBundle.ExportOptions.compressionLevel.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.compressionLevel.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void *__REAssetBundle.ExportOptions.progress.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void __REAssetBundle.ExportOptions.progress.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

uint64_t (*__REAssetBundle.ExportOptions.progress.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.generateIdentifier.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t __REAssetBundle.ExportOptions.generateIdentifier.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.generateIdentifier.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.deduplicateAssets.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t __REAssetBundle.ExportOptions.deduplicateAssets.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 33) = result;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.deduplicateAssets.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __REAssetBundle.ExportOptions.__envelopeVersion.getter(unsigned char *a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 35);
  *a1 = *(unsigned char *)(v1 + 34);
  a1[1] = v2;
}

unsigned char *__REAssetBundle.ExportOptions.__envelopeVersion.setter(unsigned char *result)
{
  char v2 = result[1];
  *(unsigned char *)(v1 + 34) = *result;
  *(unsigned char *)(v1 + 35) = v2;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.__envelopeVersion.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.deploymentTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  unint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  char v5 = *(unsigned char *)(v1 + 68);
  int v6 = *(_DWORD *)(v1 + 64);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 28) = v5;
  *(_DWORD *)(a1 + 24) = v6;
  return outlined copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v2, v3);
}

__n128 __REAssetBundle.ExportOptions.deploymentTarget.setter(__n128 *a1)
{
  __n128 v7 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int32 v3 = a1[1].n128_u32[2];
  uint64_t v4 = v1 + 64;
  unsigned __int8 v5 = a1[1].n128_u8[12];
  outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(*(void *)(v4 - 24), *(void *)(v4 - 16));
  __n128 result = v7;
  *(__n128 *)(v4 - 24) = v7;
  *(void *)(v4 - 8) = v2;
  *(unsigned char *)(v4 + 4) = v5;
  *(_DWORD *)uint64_t v4 = v3;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.deploymentTarget.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.versionOverride.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t __REAssetBundle.ExportOptions.versionOverride.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.versionOverride.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.useAutoVersioning.getter()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t __REAssetBundle.ExportOptions.useAutoVersioning.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 81) = result;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.useAutoVersioning.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.restrictToSeed.getter()
{
  return *(unsigned __int8 *)(v0 + 82);
}

uint64_t __REAssetBundle.ExportOptions.restrictToSeed.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 82) = result;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.restrictToSeed.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.configurationSetNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.ExportOptions.configurationSetNames.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 88) = a1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.configurationSetNames.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.defaultConfigurationNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.ExportOptions.defaultConfigurationNames.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 96) = a1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.defaultConfigurationNames.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.sceneNamesToConfigurationSpecifications.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.ExportOptions.sceneNamesToConfigurationSpecifications.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 104) = a1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.sceneNamesToConfigurationSpecifications.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.remapSingleFile.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t __REAssetBundle.ExportOptions.remapSingleFile.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v2 + 112));
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.remapSingleFile.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t key path getter for __REAssetBundle.ExportOptions.remapMultipleFiles : __REAssetBundle.ExportOptions@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 136);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    int v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> (@owned [__REAssetBundle.ExportOptions.AssetRemapping]?);
  }
  else
  {
    int v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
}

uint64_t key path setter for __REAssetBundle.ExportOptions.remapMultipleFiles : __REAssetBundle.ExportOptions(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    int v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> (@out [__REAssetBundle.ExportOptions.AssetRemapping]?);
  }
  else
  {
    int v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 128);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v7);
  *(void *)(a2 + 128) = v6;
  *(void *)(a2 + 136) = v5;
  return result;
}

uint64_t __REAssetBundle.ExportOptions.remapMultipleFiles.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t __REAssetBundle.ExportOptions.remapMultipleFiles.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v2 + 128));
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.remapMultipleFiles.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.assetsRemapping.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.ExportOptions.assetsRemapping.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 144) = a1;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.assetsRemapping.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.ExportOptions.makeSnapshotOfDynamicTextures.getter()
{
  return *(unsigned __int8 *)(v0 + 152);
}

uint64_t __REAssetBundle.ExportOptions.makeSnapshotOfDynamicTextures.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 152) = result;
  return result;
}

uint64_t (*__REAssetBundle.ExportOptions.makeSnapshotOfDynamicTextures.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double __REAssetBundle.ExportOptions.init(queueOptions:)@<D0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = *a1;
  *(void *)(a2 + 8) = 1;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 16777217;
  *(_OWORD *)(a2 + 40) = xmmword_228333C40;
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 68) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 1;
  *(_WORD *)(a2 + 81) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(unsigned char *)(a2 + 152) = 1;
  return result;
}

uint64_t __REAssetBundle.ExportOptions.getVersioningDetails()()
{
  if (*(unsigned char *)(v0 + 80))
  {
    unint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(v0 + 40);
    unint64_t v4 = *(void *)(v0 + 56);
    switch(v1)
    {
      case 0uLL:
      case 1uLL:
      case 2uLL:
      case 3uLL:
      case 4uLL:
        unsigned __int32 v5 = *(_DWORD *)(v0 + 64);
        outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(v3, v1);
        outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(v3, v1);
        v6.n128_u64[0] = v4;
        v6.n128_u32[2] = v5;
        __n128 v9 = v6;
        uint64_t v7 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        uint64_t v2 = MEMORY[0x22A691570](v7 + 32, v9);
        swift_release();
        break;
      case 5uLL:
        break;
      default:
        __break(1u);
        JUMPOUT(0x2280A5D6CLL);
    }
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 72);
  }
  if (one-time initialization token for defaultRealityFileWriteVersion != -1) {
    swift_once();
  }
  if (v2 <= static __REAssetBundle.defaultRealityFileWriteVersion) {
    return static __REAssetBundle.defaultRealityFileWriteVersion;
  }
  else {
    return v2;
  }
}

void __REAssetBundle.LoadOptions.queueOptions.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *__REAssetBundle.LoadOptions.queueOptions.setter(unsigned char *result)
{
  *unint64_t v1 = *result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.queueOptions.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.materialDefinition.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

__n128 __REAssetBundle.LoadOptions.materialDefinition.setter(__n128 *a1)
{
  __n128 v4 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  __n128 result = v4;
  *(__n128 *)(v1 + 8) = v4;
  *(void *)(v1 + 24) = v2;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.materialDefinition.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.downsamplingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of (Int, URL)(v1 + 32, a1, &demangling cache variable for type metadata for __DownsamplingStrategy?);
}

uint64_t __REAssetBundle.LoadOptions.downsamplingStrategy.setter(uint64_t a1)
{
  return outlined assign with take of Material?(a1, v1 + 32, &demangling cache variable for type metadata for __DownsamplingStrategy?);
}

uint64_t (*__REAssetBundle.LoadOptions.downsamplingStrategy.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.performanceReport.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t __REAssetBundle.LoadOptions.performanceReport.setter(uint64_t result)
{
  *(void *)(v1 + 72) = result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.performanceReport.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.aliasName.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __REAssetBundle.LoadOptions.aliasName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.aliasName.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.loadDedupeFile.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t __REAssetBundle.LoadOptions.loadDedupeFile.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 96) = result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.loadDedupeFile.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.reapplyTextureCompression.getter()
{
  return *(unsigned __int8 *)(v0 + 97);
}

uint64_t __REAssetBundle.LoadOptions.reapplyTextureCompression.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 97) = result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.reapplyTextureCompression.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.waitForResourceSharingClients.getter()
{
  return *(unsigned __int8 *)(v0 + 98);
}

uint64_t __REAssetBundle.LoadOptions.waitForResourceSharingClients.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 98) = result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.waitForResourceSharingClients.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.loadOnResourceSharingClients.getter()
{
  return *(unsigned __int8 *)(v0 + 99);
}

uint64_t __REAssetBundle.LoadOptions.loadOnResourceSharingClients.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 99) = result;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.loadOnResourceSharingClients.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.LoadOptions.contentRequest.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 104);
  unint64_t v3 = *(void *)(v1 + 112);
  *a1 = v2;
  a1[1] = v3;
  return outlined copy of __REAssetBundle.LoadOptions.ContentRequest(v2, v3);
}

uint64_t __REAssetBundle.LoadOptions.contentRequest.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = outlined consume of __REAssetBundle.LoadOptions.ContentRequest(*(void *)(v1 + 104), *(void *)(v1 + 112));
  *(void *)(v1 + 104) = v2;
  *(void *)(v1 + 112) = v3;
  return result;
}

uint64_t (*__REAssetBundle.LoadOptions.contentRequest.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.__MaterialDefinitionOverride.init(materialDefinition:serviceLocator:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[1] = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  __n128 v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys()
{
  if (*v0) {
    return 0x656D614E656C6966;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant(void *a1)
{
  return __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.encode(to:)(a1, *v1, v1[1], v1[2]);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys()
{
  unint64_t result = 0x656D614E656C6966;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6D614E656E656373;
      break;
    case 2:
      unint64_t result = 0x656449656E656373;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __REAssetBundle.AssetMap.SceneDescriptor.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.AssetMap.SceneDescriptor.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v9 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
    char v13 = 2;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 28));
    v11[15] = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant]);
    lazy protocol witness table accessor for type [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant] and conformance <A> [A](&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant] and conformance <A> [A], &demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant], (void (*)(void))lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __REAssetBundle.AssetMap.SceneDescriptor.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.AssetMap.SceneDescriptor.CodingKeys>);
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  char v13 = (void *)((char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = (uint64_t)v13 + *(int *)(v11 + 32);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v31 = v14;
  v16(v14, 1, 1, v15);
  uint64_t v30 = *(int *)(v11 + 36);
  *(uint64_t *)((char *)v13 + v30) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v20 = v31;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined destroy of BodyTrackingComponent?(v20, &demangling cache variable for type metadata for UUID?);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = (uint64_t)v6;
    uint64_t v18 = v28;
    uint64_t v19 = v29;
    char v36 = 0;
    *char v13 = KeyedDecodingContainer.decode(_:forKey:)();
    v13[1] = v21;
    char v35 = 1;
    v13[2] = KeyedDecodingContainer.decode(_:forKey:)();
    v13[3] = v22;
    char v34 = 2;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    v26[1] = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of Material?(v17, v31, &demangling cache variable for type metadata for UUID?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant]);
    char v33 = 3;
    lazy protocol witness table accessor for type [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant] and conformance <A> [A](&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant] and conformance <A> [A], &demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant], (void (*)(void))lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v19);
    uint64_t v23 = v32;
    uint64_t v24 = v30;
    swift_bridgeObjectRelease();
    *(uint64_t *)((char *)v13 + v24) = v23;
    outlined init with copy of __REAssetBundle.AssetMap.SceneDescriptor((uint64_t)v13, v27);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of __REAssetBundle.AssetMap.SceneDescriptor((uint64_t)v13);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.AssetMap.SceneDescriptor@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __REAssetBundle.AssetMap.SceneDescriptor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.AssetMap.SceneDescriptor(void *a1)
{
  return __REAssetBundle.AssetMap.SceneDescriptor.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000014;
  }
  else {
    return 0x656D614E656C6966;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __REAssetBundle.AssetMap.AssetDescriptor.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.AssetMap.AssetDescriptor.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v10 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v12 = v8;
  char v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v12 = v10;
    char v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t __REAssetBundle.AssetMap.AssetDescriptor.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.AssetMap.AssetDescriptor.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    char v13 = 0;
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    char v13 = 1;
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v11 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v10;
    a2[1] = v11;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.AssetMap.AssetDescriptor@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return __REAssetBundle.AssetMap.AssetDescriptor.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.AssetMap.AssetDescriptor(void *a1)
{
  return __REAssetBundle.AssetMap.AssetDescriptor.encode(to:)(a1);
}

uint64_t __REAssetBundle.AssetMap.scenes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.AssetMap.scenes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*__REAssetBundle.AssetMap.scenes.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.AssetMap.assets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __REAssetBundle.AssetMap.assets.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*__REAssetBundle.AssetMap.assets.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __REAssetBundle.AssetMap.certifiedFreeOfChangeSceneActions.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t __REAssetBundle.AssetMap.certifiedFreeOfChangeSceneActions.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*__REAssetBundle.AssetMap.certifiedFreeOfChangeSceneActions.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetBundle.AssetMap.CodingKeys()
{
  unint64_t v1 = 0x737465737361;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000021;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x73656E656373;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetBundle.AssetMap.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __REAssetBundle.AssetMap.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetBundle.AssetMap.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetBundle.AssetMap.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __REAssetBundle.AssetMap.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetBundle.AssetMap.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v11 = v1[1];
  void v10[3] = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = v8;
  char v12 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor]);
  lazy protocol witness table accessor for type [__REAssetBundle.AssetMap.SceneDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.SceneDescriptor] and conformance <A> [A], &lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor and conformance __REAssetBundle.AssetMap.SceneDescriptor);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v13 = v11;
    char v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.AssetDescriptor]);
    lazy protocol witness table accessor for type [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant] and conformance <A> [A](&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.AssetDescriptor] and conformance <A> [A], &demangling cache variable for type metadata for [__REAssetBundle.AssetMap.AssetDescriptor], (void (*)(void))lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t __REAssetBundle.AssetMap.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.AssetMap.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor]);
    char v14 = 0;
    lazy protocol witness table accessor for type [__REAssetBundle.AssetMap.SceneDescriptor] and conformance <A> [A](&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.SceneDescriptor] and conformance <A> [A], &lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor and conformance __REAssetBundle.AssetMap.SceneDescriptor);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.AssetDescriptor]);
    char v14 = 1;
    lazy protocol witness table accessor for type [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant] and conformance <A> [A](&lazy protocol witness table cache variable for type [__REAssetBundle.AssetMap.AssetDescriptor] and conformance <A> [A], &demangling cache variable for type metadata for [__REAssetBundle.AssetMap.AssetDescriptor], (void (*)(void))lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v11 = v15;
    LOBYTE(v15) = 2;
    swift_bridgeObjectRetain();
    char v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v11;
    *(unsigned char *)(a2 + 16) = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetBundle.AssetMap@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __REAssetBundle.AssetMap.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetBundle.AssetMap(void *a1)
{
  return __REAssetBundle.AssetMap.encode(to:)(a1);
}

uint64_t static __REAssetBundle.__init(sceneAssets:assetService:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  Swift::Int v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v4 = swift_bridgeObjectRetain();
  return __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v4, (uint64_t)v6, v3, 0, a2);
}

uint64_t __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, Swift::Int a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = a2;
  uint64_t v8 = a5;
  if (a4)
  {
    uint64_t v9 = a4;
    goto LABEL_12;
  }
  if (one-time initialization token for __sdkBundleVersion != -1) {
    swift_once();
  }
  __REAssetBundle.ExportOptions.PlatformOS.init(rawValue:)(5459817, 0xE300000000000000, &v41);
  switch(v42)
  {
    case 5uLL:
      break;
    default:
      outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(v41, v42);
      break;
  }
  if (one-time initialization token for minimumWritingFormatVersion != -1) {
    swift_once();
  }
  if (static __REAssetBundle.minimumWritingFormatVersion < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_57;
  }
  if (static __REAssetBundle.minimumWritingFormatVersion > 0x7FFFFFFF)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    type metadata accessor for __REAsset();
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x2280A7E08);
  }
  String.utf8CString.getter();
  uint64_t v9 = RERealityFileHeaderCreateFromVersionInfo();
  swift_release();
  uint64_t v8 = a5;
  uint64_t v6 = a2;
LABEL_12:
  type metadata accessor for RERealityFileHeader();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  *uint64_t v8 = v12;
  v8[1] = a1;
  outlined init with copy of __REAssetService(v6, (uint64_t)(v8 + 2));
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v13 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v13 = *(void *)(a3 + 16);
    swift_bridgeObjectRetain();
  }
  uint64_t v39 = v6;
  float32x4_t v40 = v8;
  if (a1 >> 62) {
    goto LABEL_53;
  }
  uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v13 != v14 && v14)
  {
    while (1)
    {
      if (v14 < 1) {
        goto LABEL_58;
      }
      uint64_t v15 = 0;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v17 = MEMORY[0x22A689930](v15, a1);
          unint64_t v18 = a3 & 0xC000000000000001;
          if ((a3 & 0xC000000000000001) != 0) {
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v17 = *(void *)(a1 + 8 * v15 + 32);
          swift_retain();
          unint64_t v18 = a3 & 0xC000000000000001;
          if ((a3 & 0xC000000000000001) != 0)
          {
LABEL_25:
            swift_retain();
            if (!__CocoaDictionary.lookup(_:)())
            {
              swift_release();
              goto LABEL_34;
            }
            type metadata accessor for RESceneDescriptor();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            uint64_t v19 = v41;
            swift_unknownObjectRelease();
            swift_release();
            goto LABEL_31;
          }
        }
        if (!*(void *)(a3 + 16)) {
          goto LABEL_34;
        }
        uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
        if ((v21 & 1) == 0) {
          goto LABEL_34;
        }
        uint64_t v19 = *(void *)(*(void *)(a3 + 56) + 8 * v20);
        swift_retain();
LABEL_31:
        swift_release();
        if (v19)
        {
          swift_release();
          goto LABEL_22;
        }
LABEL_34:
        uint64_t v22 = RESceneDescriptorCreateFromParams();
        type metadata accessor for RESceneDescriptor();
        uint64_t v23 = swift_allocObject();
        *(void *)(v23 + 16) = v22;
        if (v18)
        {
          if (a3 < 0) {
            unint64_t v13 = a3;
          }
          else {
            unint64_t v13 = a3 & 0xFFFFFFFFFFFFFF8;
          }
          swift_retain();
          uint64_t v24 = __CocoaSet.count.getter();
          if (__OFADD__(v24, 1)) {
            goto LABEL_51;
          }
          a3 = specialized _NativeDictionary.init(_:capacity:)(v13, v24 + 1);
        }
        else
        {
          swift_retain();
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        Swift::Int v41 = a3;
        unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
        uint64_t v27 = *(void *)(a3 + 16);
        BOOL v28 = (v26 & 1) == 0;
        uint64_t v29 = v27 + v28;
        if (__OFADD__(v27, v28)) {
          break;
        }
        char v30 = v26;
        if (*(void *)(a3 + 24) >= v29)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
          uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
          if ((v30 & 1) != (v32 & 1)) {
            goto LABEL_59;
          }
          unint64_t v13 = v31;
        }
        a3 = v41;
        uint64_t v33 = 8 * v13;
        if (v30)
        {
          uint64_t v16 = *(void *)(v41 + 56);
          swift_release();
          *(void *)(v16 + v33) = v23;
        }
        else
        {
          *(void *)(v41 + 8 * (v13 >> 6) + 64) |= 1 << v13;
          *(void *)(*(void *)(a3 + 48) + 8 * v13) = v17;
          *(void *)(*(void *)(a3 + 56) + 8 * v13) = v23;
          uint64_t v34 = *(void *)(a3 + 16);
          BOOL v35 = __OFADD__(v34, 1);
          uint64_t v36 = v34 + 1;
          if (v35) {
            goto LABEL_52;
          }
          *(void *)(a3 + 16) = v36;
          swift_retain();
        }
        swift_release_n();
        swift_bridgeObjectRelease();
LABEL_22:
        if (v14 == ++v15) {
          goto LABEL_55;
        }
      }
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13 != v37)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14) {
          continue;
        }
      }
      break;
    }
  }
LABEL_55:
  __swift_destroy_boxed_opaque_existential_1(v39);
  uint64_t result = swift_bridgeObjectRelease();
  v40[7] = a3;
  return result;
}

uint64_t static __REAssetBundle.__init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v62 = a4;
  uint64_t v63 = a1;
  uint64_t v5 = &demangling cache variable for type metadata for UUID?;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  uint64_t v66 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor)?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (int64_t *)((char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (int64_t *)((char *)&v60 - v16);
  Swift::Int v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v19 = *(void *)(a3 + 64);
  uint64_t v64 = a3 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v74 = v21 & v19;
  int64_t v65 = (unint64_t)(v20 + 63) >> 6;
  int64_t v60 = v65 - 1;
  uint64_t v67 = a3;
  swift_bridgeObjectRetain();
  int64_t v72 = 0;
  uint64_t v73 = v8;
  uint64_t v70 = v11;
  uint64_t v71 = v9;
  uint64_t v68 = v17;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v74)
    {
      unint64_t v23 = __clz(__rbit64(v74));
      v74 &= v74 - 1;
      unint64_t v24 = v23 | (v72 << 6);
LABEL_8:
      uint64_t v25 = *(void *)(v67 + 56);
      *uint64_t v14 = *(void *)(*(void *)(v67 + 48) + 8 * v24);
      uint64_t v26 = v25 + *(void *)(v66 + 72) * v24;
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor));
      outlined init with copy of __REAssetBundle.AssetMap.SceneDescriptor(v26, (uint64_t)v14 + *(int *)(v27 + 48));
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v14, 0, 1, v27);
      swift_retain();
      uint64_t v8 = v73;
      goto LABEL_27;
    }
    int64_t v28 = v72 + 1;
    if (__OFADD__(v72, 1)) {
      goto LABEL_62;
    }
    if (v28 < v65)
    {
      unint64_t v29 = *(void *)(v64 + 8 * v28);
      if (v29) {
        goto LABEL_12;
      }
      int64_t v30 = v72 + 2;
      ++v72;
      if (v28 + 1 < v65)
      {
        unint64_t v29 = *(void *)(v64 + 8 * v30);
        if (v29) {
          goto LABEL_15;
        }
        int64_t v72 = v28 + 1;
        if (v28 + 2 < v65)
        {
          unint64_t v29 = *(void *)(v64 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2;
            goto LABEL_12;
          }
          int64_t v30 = v28 + 3;
          int64_t v72 = v28 + 2;
          if (v28 + 3 < v65) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor));
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v14, 1, 1, v31);
    unint64_t v74 = 0;
LABEL_27:
    outlined init with take of (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor)?((uint64_t)v14, (uint64_t)v17);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor));
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v17, 1, v32) == 1)
    {
      swift_release();
      outlined init with copy of __REAssetService(v61, (uint64_t)v76);
      unint64_t v58 = swift_bridgeObjectRetain();
      return __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v58, (uint64_t)v76, v18, 0, v62);
    }
    uint64_t v75 = *v17;
    outlined init with take of __REAssetBundle.AssetMap.SceneDescriptor((uint64_t)v17 + *(int *)(v32 + 48), (uint64_t)v11);
    outlined init with copy of (Int, URL)((uint64_t)&v11[*(int *)(v9 + 24)], (uint64_t)v8, v5);
    uint64_t v33 = type metadata accessor for UUID();
    uint64_t v34 = v5;
    uint64_t v35 = *(void *)(v33 - 8);
    int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v8, 1, v33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36 == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v8, v34);
    }
    else
    {
      UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v33);
    }
    uint64_t v5 = v34;
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v37 = RESceneDescriptorCreateFromParams();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v11 = v70;
    uint64_t v9 = v71;
    uint64_t v38 = *(void *)&v70[*(int *)(v71 + 28)];
    if (v38)
    {
      uint64_t v39 = *(void *)(v38 + 16);
      if (v39)
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = v38 + 48;
        while (1)
        {
          uint64_t v41 = *(void *)(v40 - 16);
          if (v41 < (uint64_t)0xFFFFFFFF80000000) {
            break;
          }
          if (v41 > 0x7FFFFFFF) {
            goto LABEL_58;
          }
          v40 += 24;
          String.utf8CString.getter();
          RESceneDescriptorAddSceneCompatibilityVariant();
          swift_release();
          if (!--v39)
          {
            swift_bridgeObjectRelease();
            goto LABEL_38;
          }
        }
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
    }
LABEL_38:
    type metadata accessor for RESceneDescriptor();
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v37;
    if ((v18 & 0xC000000000000001) != 0)
    {
      if (v18 < 0) {
        uint64_t v43 = v18;
      }
      else {
        uint64_t v43 = v18 & 0xFFFFFFFFFFFFFF8;
      }
      swift_retain();
      uint64_t v44 = __CocoaSet.count.getter();
      if (__OFADD__(v44, 1)) {
        goto LABEL_60;
      }
      Swift::Int v18 = specialized _NativeDictionary.init(_:capacity:)(v43, v44 + 1);
    }
    else
    {
      swift_retain();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v76[0] = v18;
    unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)();
    uint64_t v48 = *(void *)(v18 + 16);
    BOOL v49 = (v46 & 1) == 0;
    uint64_t v50 = v48 + v49;
    if (__OFADD__(v48, v49)) {
      goto LABEL_59;
    }
    char v51 = v46;
    if (*(void *)(v18 + 24) >= v50)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        Swift::Int v18 = v76[0];
        if (v46) {
          goto LABEL_4;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        Swift::Int v18 = v76[0];
        if (v51) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v50, isUniquelyReferenced_nonNull_native);
      uint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v51 & 1) != (v53 & 1)) {
        goto LABEL_64;
      }
      unint64_t v47 = v52;
      Swift::Int v18 = v76[0];
      if (v51)
      {
LABEL_4:
        uint64_t v22 = *(void *)(v18 + 56);
        swift_release();
        *(void *)(v22 + 8 * v47) = v42;
        goto LABEL_5;
      }
    }
    *(void *)(v18 + 8 * (v47 >> 6) + 64) |= 1 << v47;
    uint64_t v54 = 8 * v47;
    *(void *)(*(void *)(v18 + 48) + v54) = v75;
    *(void *)(*(void *)(v18 + 56) + v54) = v42;
    uint64_t v55 = *(void *)(v18 + 16);
    BOOL v56 = __OFADD__(v55, 1);
    uint64_t v57 = v55 + 1;
    if (v56) {
      goto LABEL_61;
    }
    *(void *)(v18 + 16) = v57;
    swift_retain();
LABEL_5:
    swift_release_n();
    swift_bridgeObjectRelease();
    outlined destroy of __REAssetBundle.AssetMap.SceneDescriptor((uint64_t)v11);
    uint64_t v8 = v73;
    uint64_t v17 = v68;
  }
  unint64_t v29 = *(void *)(v64 + 8 * v30);
  if (v29)
  {
LABEL_15:
    int64_t v28 = v30;
LABEL_12:
    unint64_t v74 = (v29 - 1) & v29;
    unint64_t v24 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v72 = v28;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v65)
    {
      int64_t v72 = v60;
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v64 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_12;
    }
  }
LABEL_63:
  __break(1u);
LABEL_64:
  type metadata accessor for __REAsset();
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t __REAssetBundle.init(url:assetService:with:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  char v7 = *a3;
  memset(v18, 0, sizeof(v18));
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  __int16 v19 = 1;
  char v20 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  v13[0] = v7;
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  uint64_t ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a1, a2, ServiceLocatorForLegacyAPIWorkaround, (uint64_t)v13, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v13);
}

void static __REAssetBundle.__init(url:assetService:_:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  uint64_t ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a1, a2, ServiceLocatorForLegacyAPIWorkaround, a3, a4);
}

uint64_t static __REAssetBundle.__init(url:serviceLocator:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = a2 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v10);
  swift_beginAccess();
  static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a1, v10, *(void *)(a2 + 16), a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t static __REAssetBundle.__init(bundle:entryName:assetService:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v13 = a4[3];
  uint64_t v12 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v13);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v13, v12);
  uint64_t ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  return static __REAssetBundle.__init_REKit2(bundle:entryName:assetService:coreServiceLocator:_:)(a1, a2, a3, a4, ServiceLocatorForLegacyAPIWorkaround, a5, a6);
}

uint64_t static __REAssetBundle.__init(bundle:entryName:serviceLocator:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = a4 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12, (uint64_t)v14);
  swift_beginAccess();
  static __REAssetBundle.__init_REKit2(bundle:entryName:assetService:coreServiceLocator:_:)(a1, a2, a3, v14, *(void *)(a4 + 16), a5, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t __REAssetBundle.init(url:assetService:downsamplingStrategy:with:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v38 = a1;
  v25[0] = a5;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (void *)((char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unsigned __int8 v12 = *a4;
  outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v35);
  uint64_t v13 = v36;
  uint64_t v14 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  v27[0] = v12;
  __REAssetService.dispatchPredicate(for:)(v27, v13, v14, v11);
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v13)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    memset(v29, 0, sizeof(v29));
    long long v28 = 0u;
    __int16 v30 = 1;
    char v31 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v32 = 0;
    v27[0] = v12;
    outlined assign with copy of __DownsamplingStrategy?(a3, (uint64_t)&v29[8]);
    uint64_t v16 = a2[3];
    uint64_t v17 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    uint64_t ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
    uint64_t v19 = v38;
    uint64_t v20 = v25[1];
    static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(v38, a2, ServiceLocatorForLegacyAPIWorkaround, (uint64_t)v27, (uint64_t *)v26);
    outlined destroy of BodyTrackingComponent?(a3, &demangling cache variable for type metadata for __DownsamplingStrategy?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    uint64_t v21 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v19, v21);
    if (!v20)
    {
      long long v22 = v26[1];
      uint64_t v23 = (_OWORD *)v25[0];
      *(_OWORD *)v25[0] = v26[0];
      v23[1] = v22;
      long long v24 = v26[3];
      v23[2] = v26[2];
      v23[3] = v24;
    }
    return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v27);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t __REAssetService.dispatchPredicate(for:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v5 = *a1;
  __REAssetService.asManager.getter(a2, a3);
  id v6 = (id)REAssetManagerGetEngineQueue();
  swift_release();
  *a4 = v6;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104);
  uint64_t v9 = (unsigned int *)MEMORY[0x263F8F0E0];
  if (v5 != 2) {
    uint64_t v9 = (unsigned int *)MEMORY[0x263F8F0D8];
  }
  uint64_t v10 = *v9;

  return v8(a4, v10, v7);
}

uint64_t static __REAssetBundle.load(url:assetService:materialDefinition:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  id v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x263F8F080], v13);
  uint64_t v27 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  outlined init with copy of __REAssetService(v25, (uint64_t)v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v10);
  unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = swift_allocObject();
  outlined init with take of BindableDataInternal(v36, v18 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v17, (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  uint64_t v19 = (void *)(v18 + ((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v20 = v29;
  *uint64_t v19 = v28;
  v19[1] = v20;
  aBlock[4] = partial apply for closure #1 in static __REAssetBundle.load(url:assetService:materialDefinition:completionHandler:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_22;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v22 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v23 = (void *)v27;
  MEMORY[0x22A689420](0, v9, v6, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
  return swift_release();
}

uint64_t closure #1 in static __REAssetBundle.load(url:assetService:materialDefinition:completionHandler:)(void *a1, uint64_t a2, void (*a3)(unsigned char *))
{
  memset(v17, 0, sizeof(v17));
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  __int16 v18 = 1;
  char v19 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  LOBYTE(v12) = 1;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  uint64_t ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  static __REAssetBundle.__init_REKit2(url:assetService:coreServiceLocator:_:)(a2, a1, ServiceLocatorForLegacyAPIWorkaround, (uint64_t)&v12, v11);
  outlined init with copy of __REAssetBundle((uint64_t)v11, (uint64_t)v10);
  v10[64] = 0;
  a3(v10);
  outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Result<__REAssetBundle, Error>);
  outlined destroy of __REAssetBundle((uint64_t)v11);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v12);
}

uint64_t static __REAssetBundle.load(url:serviceLocator:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v28 = a2;
  uint64_t v26 = a1;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  long long v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F8F080], v12);
  uint64_t v27 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v9);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v17 = (v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v18 + v16, (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v19 = v29;
  *(void *)(v18 + v17) = v28;
  uint64_t v20 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v30;
  *uint64_t v20 = v19;
  v20[1] = v21;
  aBlock[4] = partial apply for closure #1 in static __REAssetBundle.load(url:serviceLocator:completionHandler:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_15;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v23 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  long long v24 = (void *)v27;
  MEMORY[0x22A689420](0, v8, v5, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v33);
  return swift_release();
}

uint64_t closure #1 in static __REAssetBundle.load(url:serviceLocator:completionHandler:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  uint64_t v6 = type metadata accessor for URL();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  memset(v19, 0, sizeof(v19));
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  __int16 v20 = 1;
  char v21 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  v14[0] = 1;
  (*(void (**)(unsigned char *, uint64_t))(v9 + 16))(v8, a1);
  outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)v14, (uint64_t)v12);
  swift_retain();
  __REAssetBundle.init(url:serviceLocator:_:)((uint64_t)v8, a2, (uint64_t)v12, v13);
  outlined init with copy of __REAssetBundle((uint64_t)v13, (uint64_t)v12);
  v12[64] = 0;
  a3(v12);
  outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for Result<__REAssetBundle, Error>);
  outlined destroy of __REAssetBundle((uint64_t)v13);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v14);
}

uint64_t static __REAssetBundle.load(bundle:entryName:assetService:completionHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v26 = a4;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  long long v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x263F8F080], v13);
  long long v17 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  outlined init with copy of __REAssetService(v26, (uint64_t)v35);
  long long v18 = (void *)swift_allocObject();
  outlined init with take of BindableDataInternal(v35, (uint64_t)(v18 + 2));
  uint64_t v19 = v27;
  uint64_t v20 = v28;
  v18[7] = a1;
  v18[8] = v19;
  uint64_t v21 = v29;
  uint64_t v22 = v30;
  v18[9] = v20;
  void v18[10] = v21;
  v18[11] = v22;
  aBlock[4] = partial apply for closure #1 in static __REAssetBundle.load(bundle:entryName:assetService:completionHandler:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_21;
  uint64_t v23 = _Block_copy(aBlock);
  id v24 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v12, v9, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v31);
  return swift_release();
}

uint64_t closure #1 in static __REAssetBundle.load(bundle:entryName:assetService:completionHandler:)(void *a1, void *a2, uint64_t a3, void *a4, void (*a5)(unsigned char *))
{
  memset(v21, 0, sizeof(v21));
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  __int16 v22 = 1;
  char v23 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  LOBYTE(v16) = 1;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  uint64_t ServiceLocatorForLegacyAPIWorkaround = _REAssetManagerGetServiceLocatorForLegacyAPIWorkaround();
  static __REAssetBundle.__init_REKit2(bundle:entryName:assetService:coreServiceLocator:_:)(a2, a3, a4, a1, ServiceLocatorForLegacyAPIWorkaround, (uint64_t)&v16, v15);
  outlined init with copy of __REAssetBundle((uint64_t)v15, (uint64_t)v14);
  v14[64] = 0;
  a5(v14);
  outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for Result<__REAssetBundle, Error>);
  outlined destroy of __REAssetBundle((uint64_t)v15);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v16);
}

uint64_t static __REAssetBundle.load(bundle:entryName:serviceLocator:completionHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v27 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x263F8F080], v13);
  long long v17 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  long long v18 = (void *)swift_allocObject();
  uint64_t v19 = v27;
  uint64_t v20 = v28;
  void v18[2] = a1;
  void v18[3] = v19;
  uint64_t v22 = v29;
  uint64_t v21 = v30;
  _OWORD v18[4] = v20;
  v18[5] = v22;
  uint64_t v23 = v31;
  v18[6] = v21;
  v18[7] = v23;
  aBlock[4] = partial apply for closure #1 in static __REAssetBundle.load(bundle:entryName:serviceLocator:completionHandler:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_27;
  uint64_t v24 = _Block_copy(aBlock);
  id v25 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v12, v9, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v32);
  return swift_release();
}

uint64_t closure #1 in static __REAssetBundle.load(bundle:entryName:serviceLocator:completionHandler:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(unsigned char *))
{
  memset(v19, 0, sizeof(v19));
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  __int16 v20 = 1;
  char v21 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  LOBYTE(v14) = 1;
  outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)&v14, (uint64_t)v12);
  id v10 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  __REAssetBundle.init(bundle:entryName:serviceLocator:_:)(v10, a2, a3, a4, (uint64_t)v12, v13);
  outlined init with copy of __REAssetBundle((uint64_t)v13, (uint64_t)v12);
  v12[64] = 0;
  a5(v12);
  outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for Result<__REAssetBundle, Error>);
  outlined destroy of __REAssetBundle((uint64_t)v13);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v14);
}

unint64_t __REAssetBundle.sceneDescriptors.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v1 - 8);
  int v45 = (char *)v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (void *)((char *)v43 - v7);
  unint64_t v9 = *(void *)(v0 + 8);
  uint64_t v57 = v0;
  swift_bridgeObjectRetain();
  unint64_t object = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in __REAssetBundle.getSceneDescriptors(), (uint64_t)v56, v9);
  swift_bridgeObjectRelease();
  if (object >> 62) {
    goto LABEL_38;
  }
  uint64_t v11 = *(void *)((object & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v11)
  {
    unint64_t v12 = 0;
    unint64_t v49 = object & 0xC000000000000001;
    v43[1] = object + 32;
    uint64_t v44 = object & 0xFFFFFFFFFFFFFF8;
    unint64_t v13 = MEMORY[0x263F8EE78];
    unint64_t v47 = object;
    uint64_t v48 = v5;
    uint64_t v46 = v11;
    while (v49)
    {
      uint64_t v14 = MEMORY[0x22A689930](v12, object);
      BOOL v15 = __OFADD__(v12, 1);
      unint64_t v16 = v12 + 1;
      if (v15) {
        goto LABEL_35;
      }
LABEL_10:
      unint64_t v52 = v13;
      char v53 = (char *)v14;
      RERealityFileAssetDescriptorGetFilename();
      unint64_t object = String.init(cString:)();
      uint64_t v5 = v17;
      uint64_t v18 = v51;
      uint64_t v19 = (uint64_t)v8 + *(int *)(v51 + 24);
      uint64_t v20 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
      *uint64_t v8 = object;
      v8[1] = (unint64_t)v5;
      v8[2] = 0;
      v8[3] = 0xE000000000000000;
      uint64_t v21 = *(int *)(v18 + 28);
      *(unint64_t *)((char *)v8 + v21) = 0;
      if (RESceneDescriptorGetSceneName())
      {
        v8[2] = String.init(cString:)();
        v8[3] = v22;
      }
      RESceneDescriptorGetSceneIdentifier();
      uint64_t v23 = String.init(cString:)();
      uint64_t v25 = HIBYTE(v24) & 0xF;
      if ((v24 & 0x2000000000000000) == 0) {
        uint64_t v25 = v23 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v54 = v16;
      if (v25)
      {
        unint64_t object = (unint64_t)String.init(cString:)(*(Swift::String *)&v23)._object;
        uint64_t v5 = v45;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        outlined assign with take of Material?((uint64_t)v5, v19, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t SceneCompatibilityVariantCount = RESceneDescriptorGetSceneCompatibilityVariantCount();
      if (SceneCompatibilityVariantCount < 0) {
        goto LABEL_36;
      }
      uint64_t v27 = SceneCompatibilityVariantCount;
      if (SceneCompatibilityVariantCount)
      {
        uint64_t v28 = 0;
        uint64_t v55 = SceneCompatibilityVariantCount;
        do
        {
          if (RESceneDescriptorGetSceneCompatibilityVariantAtIndex())
          {
            int Version = RESceneCompatibilityVariantGetVersion();
            RESceneCompatibilityVariantGetFileName();
            uint64_t v30 = String.init(cString:)();
            uint64_t v32 = v31;
            uint64_t v33 = *(void **)((char *)v8 + v21);
            if (v33)
            {
              uint64_t v34 = v30;
              uint64_t v35 = v8;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
              }
              unint64_t v37 = v33[2];
              unint64_t v36 = v33[3];
              if (v37 >= v36 >> 1) {
                uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v33);
              }
              v33[2] = v37 + 1;
              uint64_t v38 = &v33[3 * v37];
              v38[4] = Version;
              v38[5] = v34;
              v38[6] = v32;
              uint64_t v8 = v35;
              *(unint64_t *)((char *)v35 + v21) = (unint64_t)v33;
              uint64_t v27 = v55;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          ++v28;
        }
        while (v27 != v28);
      }
      uint64_t v39 = (uint64_t)v48;
      outlined init with copy of __REAssetBundle.AssetMap.SceneDescriptor((uint64_t)v8, (uint64_t)v48);
      unint64_t v13 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, v13);
      }
      uint64_t v5 = v53;
      unint64_t v12 = v54;
      unint64_t v41 = *(void *)(v13 + 16);
      unint64_t v40 = *(void *)(v13 + 24);
      if (v41 >= v40 >> 1) {
        unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, v13);
      }
      *(void *)(v13 + 16) = v41 + 1;
      outlined init with take of __REAssetBundle.AssetMap.SceneDescriptor(v39, v13+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(void *)(v50 + 72) * v41);
      swift_release();
      outlined destroy of __REAssetBundle.AssetMap.SceneDescriptor((uint64_t)v8);
      unint64_t object = v47;
      if (v12 == v46) {
        goto LABEL_40;
      }
    }
    if (v12 >= *(void *)(v44 + 16)) {
      goto LABEL_37;
    }
    uint64_t v14 = swift_retain();
    BOOL v15 = __OFADD__(v12, 1);
    unint64_t v16 = v12 + 1;
    if (!v15) {
      goto LABEL_10;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  unint64_t v13 = MEMORY[0x263F8EE78];
LABEL_40:
  swift_bridgeObjectRelease();
  return v13;
}

Swift::String __swiftcall String.init(cString:)(Swift::String cString)
{
  if (((uint64_t)cString._object & 0x1000000000000000) == 0
    && (((uint64_t)cString._object & 0x2000000000000000) != 0
     || (cString._countAndFlagsBits & 0x1000000000000000) != 0))
  {
    uint64_t v1 = String.init(cString:)();
    uint64_t v3 = v2;
    swift_bridgeObjectRelease();
  }
  else
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v1 = v7;
    uint64_t v3 = v8;
  }
  uint64_t v4 = v1;
  uint64_t v5 = v3;
  result._unint64_t object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t closure #1 in __REAssetBundle.getSceneDescriptors()@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized Dictionary.subscript.getter(v4, v3);
  uint64_t result = swift_release();
  if (!v5)
  {
    static os_log_type_t.debug.getter();
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    uint64_t v7 = (void *)static OS_os_log.default.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_22830EC60;
    type metadata accessor for __REAsset();
    _print_unlocked<A, B>(_:_:)();
    *(void *)(v8 + 56) = MEMORY[0x263F8D310];
    *(void *)(v8 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 40) = 0xE000000000000000;
    os_log(_:dso:log:_:_:)();

    uint64_t result = swift_bridgeObjectRelease();
  }
  *a2 = v5;
  return result;
}

void static __REAssetBundle.temporaryURL.getter(char *a1@<X8>)
{
  v37[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = self;
  id v10 = objc_msgSend(v9, sel_defaultManager);
  v37[0] = 0;
  id v11 = objc_msgSend(v10, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 13, 1, 0, 1, v37);

  id v12 = v37[0];
  if (v11)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    id v13 = v12;

    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v14(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1)
    {
      v14(a1, v8, v2);
      goto LABEL_6;
    }
  }
  else
  {
    id v15 = v37[0];
    unint64_t v16 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  id v17 = objc_msgSend(v9, sel_defaultManager);
  id v18 = objc_msgSend(v17, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
LABEL_6:
  id v19 = objc_msgSend(self, sel_mainBundle);
  id v20 = objc_msgSend(v19, sel_bundleIdentifier);

  if (v20)
  {
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    v24._countAndFlagsBits = v21;
    v24._unint64_t object = v23;
    URL.appendPathComponent(_:)(v24);
    swift_bridgeObjectRelease();
    v25._unint64_t object = (void *)0x8000000228357F00;
    v25._countAndFlagsBits = 0xD00000000000001BLL;
    URL.appendPathComponent(_:)(v25);
    id v26 = objc_msgSend(v9, sel_defaultManager);
    URL._bridgeToObjectiveC()(v27);
    uint64_t v29 = v28;
    v37[0] = 0;
    unsigned __int8 v30 = objc_msgSend(v26, sel_removeItemAtURL_error_, v28, v37);

    id v31 = v37[0];
    if (v30)
    {
      id v32 = v31;
    }
    else
    {
      v36[0] = v37[0];
      id v34 = v37[0];
      uint64_t v35 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    v33._unint64_t object = (void *)0x8000000228357F00;
    v33._countAndFlagsBits = 0xD00000000000001BLL;
    URL.appendPathComponent(_:)(v33);
  }
}

uint64_t __REAssetBundle.write(to:)(uint64_t a1)
{
  char v20 = 0;
  char v19 = 1;
  char v18 = 1;
  LOBYTE(v2) = 2;
  *((void *)&v2 + 1) = 1;
  char v3 = 0;
  uint64_t v4 = 0;
  int v5 = 16777217;
  long long v6 = xmmword_228333C40;
  uint64_t v7 = 0;
  char v9 = 0;
  int v8 = 0;
  uint64_t v10 = 0;
  char v11 = 1;
  __int16 v12 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  char v17 = 1;
  return __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, &v2);
}

uint64_t __REAssetBundle.__write(to:fromEngineQueue:)(uint64_t a1, char a2)
{
  char v22 = 0;
  char v21 = 1;
  char v20 = 1;
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  LOBYTE(v4) = v2;
  *((void *)&v4 + 1) = 1;
  char v5 = 0;
  uint64_t v6 = 0;
  int v7 = 16777217;
  long long v8 = xmmword_228333C40;
  uint64_t v9 = 0;
  char v11 = 0;
  int v10 = 0;
  uint64_t v12 = 0;
  char v13 = 1;
  __int16 v14 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  char v19 = 1;
  return __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, &v4);
}

uint64_t __REAssetBundle.__write(to:with:)(uint64_t a1, long long *a2)
{
  long long v2 = a2[7];
  v7[6] = a2[6];
  v7[7] = v2;
  v8[0] = a2[8];
  *(_OWORD *)((char *)v8 + 9) = *(long long *)((char *)a2 + 137);
  long long v3 = a2[3];
  v7[2] = a2[2];
  v7[3] = v3;
  long long v4 = a2[5];
  v7[4] = a2[4];
  v7[5] = v4;
  long long v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  return __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, v7);
}

uint64_t __REAssetBundle.write(to:with:)(uint64_t a1, long long *a2)
{
  long long v2 = a2[7];
  v7[6] = a2[6];
  v7[7] = v2;
  v8[0] = a2[8];
  *(_OWORD *)((char *)v8 + 9) = *(long long *)((char *)a2 + 137);
  long long v3 = a2[3];
  v7[2] = a2[2];
  v7[3] = v3;
  long long v4 = a2[5];
  v7[4] = a2[4];
  v7[5] = v4;
  long long v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  return __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, v7);
}

uint64_t __REAssetBundle.__write(to:with:compressionLevel:progress:)(uint64_t a1, unsigned char *a2, uint64_t a3, char a4, void *a5)
{
  LOBYTE(v10) = *a2;
  *((void *)&v10 + 1) = a3;
  LOBYTE(v11) = a4 & 1;
  *((void *)&v11 + 1) = a5;
  *(_DWORD *)uint64_t v12 = 16777217;
  *(_OWORD *)&unsigned char v12[8] = xmmword_228333C40;
  uint64_t v13 = 0;
  BYTE4(v14) = 0;
  LODWORD(v14) = 0;
  uint64_t v15 = 0;
  v16[0] = 1;
  *(_WORD *)&v16[1] = 0;
  memset(&v16[8], 0, 64);
  v16[72] = 1;
  void v8[6] = *(_OWORD *)&v16[16];
  v8[7] = *(_OWORD *)&v16[32];
  v9[0] = *(_OWORD *)&v16[48];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)&v16[57];
  _OWORD v8[2] = *(_OWORD *)v12;
  v8[3] = 5uLL;
  _OWORD v8[4] = v14;
  uint64_t v8[5] = *(_OWORD *)v16;
  v8[0] = v10;
  v8[1] = v11;
  id v6 = a5;
  __REAssetBundle.writeWithCPlusPlus(to:with:)(a1, v8);
  return outlined release of __REAssetBundle.ExportOptions((uint64_t)&v10);
}

uint64_t __REAssetBundle.__write(to:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v26 = a1;
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  long long v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  MEMORY[0x270FA5388](v5);
  int v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x263F8F080], v11);
  uint64_t v27 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  outlined init with copy of __REAssetBundle(v25[1], (uint64_t)v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v8);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  long long v16 = (char *)swift_allocObject();
  long long v17 = v36[1];
  *((_OWORD *)v16 + 1) = v36[0];
  *((_OWORD *)v16 + 2) = v17;
  long long v18 = v36[3];
  *((_OWORD *)v16 + 3) = v36[2];
  *((_OWORD *)v16 + 4) = v18;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  char v19 = &v16[(v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v20 = v29;
  *(void *)char v19 = v28;
  *((void *)v19 + 1) = v20;
  aBlock[4] = partial apply for closure #1 in __REAssetBundle.__write(to:completionHandler:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_33;
  char v21 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v22 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v23 = (void *)v27;
  MEMORY[0x22A689420](0, v7, v4, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
  return swift_release();
}

uint64_t closure #1 in __REAssetBundle.__write(to:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  char v23 = 0;
  char v22 = 1;
  char v21 = 1;
  LOBYTE(v5) = 1;
  *((void *)&v5 + 1) = 1;
  char v6 = 0;
  uint64_t v7 = 0;
  int v8 = 16777217;
  long long v9 = xmmword_228333C40;
  uint64_t v10 = 0;
  char v12 = 0;
  int v11 = 0;
  uint64_t v13 = 0;
  char v14 = 1;
  __int16 v15 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  char v20 = 1;
  __REAssetBundle.writeWithCPlusPlus(to:with:)(a2, &v5);
  return a3(0);
}

unint64_t __RealityFileError.debugDescription.getter()
{
  uint64_t v1 = *v0;
  switch(*((unsigned char *)v0 + 16))
  {
    case 1:
      _StringGuts.grow(_:)(36);
      uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
      swift_bridgeObjectRelease();
      unint64_t v14 = v7;
      v8._countAndFlagsBits = 0xD00000000000001FLL;
      v8._unint64_t object = (void *)0x8000000228357F50;
      String.append(_:)(v8);
      type metadata accessor for RERealityFileMajorVersion(0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RERealityFileMajorVersion.Type);
      v9._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      unint64_t v10 = 46;
      unint64_t v11 = 0xE100000000000000;
      goto LABEL_7;
    case 2:
      unint64_t v14 = 0;
      _StringGuts.grow(_:)(36);
      v12._countAndFlagsBits = 39;
      v12._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      _print_unlocked<A, B>(_:_:)();
      unint64_t v10 = 0xD000000000000021;
      unint64_t v11 = 0x8000000228357F20;
LABEL_7:
      String.append(_:)(*(Swift::String *)&v10);
      return v14;
    case 3:
      swift_bridgeObjectRetain();
      return v1;
    case 4:
      unint64_t result = 0xD000000000000011;
      switch(v1)
      {
        case 2:
          unint64_t result = 0xD000000000000013;
          break;
        case 3:
          unint64_t result = 0xD000000000000023;
          break;
        case 4:
          unint64_t result = 0xD000000000000012;
          break;
        case 5:
          unint64_t result = 0xD000000000000019;
          break;
        default:
          return result;
      }
      return result;
    default:
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = 0xD000000000000013;
      v3._unint64_t object = (void *)0x8000000228358060;
      String.append(_:)(v3);
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      if (one-time initialization token for maximumReadingFormatVersion != -1) {
        swift_once();
      }
      v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._countAndFlagsBits = 10542;
      v5._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v5);
      unint64_t v14 = 0xD000000000000015;
      swift_bridgeObjectRetain();
      v6._countAndFlagsBits = 0xD00000000000001DLL;
      v6._unint64_t object = (void *)0x8000000228358080;
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v14;
  }
}

uint64_t LocalizedRealityFileError.errorDescription.getter()
{
  _StringGuts.grow(_:)(84);
  v0._unint64_t object = (void *)0x80000002283582B0;
  v0._countAndFlagsBits = 0xD000000000000051;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 46;
  v2._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance LocalizedRealityFileError()
{
  return LocalizedRealityFileError.errorDescription.getter();
}

unint64_t SerializationError.description.getter(uint64_t a1, void *a2, char a3)
{
  if (!a3)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000011;
    v8._countAndFlagsBits = a1;
    v8._unint64_t object = a2;
    String.append(_:)(v8);
    v9._countAndFlagsBits = 0xD000000000000014;
    v9._unint64_t object = (void *)0x80000002283581F0;
    String.append(_:)(v9);
    return v11;
  }
  if (a3 == 1)
  {
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 0;
    v5._unint64_t object = (void *)0xE000000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = a1;
    v6._unint64_t object = a2;
    String.append(_:)(v6);
    unint64_t v11 = 0xD000000000000068;
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = 8250;
    v7._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11;
  }
  return 0xD00000000000002FLL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SerializationError()
{
  return SerializationError.description.getter(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t __Archiving.Operation.__deallocating_deinit()
{
  MEMORY[0x22A695930](*(void *)(v0 + 16));

  return swift_deallocClassInstance();
}

void __Archiving.Operation.archive(to:)()
{
  URL._bridgeToObjectiveC()((NSURL *)*MEMORY[0x263EF8340]);
  Swift::String v1 = v0;
  char v2 = _REArchiveOperationArchiveToURL();

  if ((v2 & 1) == 0)
  {
    lazy protocol witness table accessor for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError();
    swift_allocError();
    *Swift::String v3 = 1;
    swift_willThrow();
  }
}

void __Archiving.Operation.unarchive(to:withReport:)(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = (NSURL *)*MEMORY[0x263EF8340];
  v14[1] = *MEMORY[0x263EF8340];
  v14[0] = 0;
  if (a2)
  {
    uint64_t v5 = *(void *)(v2 + 16);
    URL._bridgeToObjectiveC()(v3);
    Swift::String v7 = v6;
    char v8 = MEMORY[0x22A695990](v5, v6, a2, v14);
  }
  else
  {
    URL._bridgeToObjectiveC()(v3);
    Swift::String v7 = v9;
    char v8 = _REArchiveOperationUnarchiveToURL();
  }
  char v10 = v8;

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = v14[0];
    if (v14[0])
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      swift_allocError();
      *Swift::String v12 = v11;
    }
    else
    {
      lazy protocol witness table accessor for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError();
      swift_allocError();
      *uint64_t v13 = 0;
    }
    swift_willThrow();
  }
}

uint64_t static __Archiving.archivePackage(source:destination:envelopeVersion:compressionLevel:progress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v23[0] = a2;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = *(unsigned char *)(a3 + 1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a1, v9, v11);
  type metadata accessor for __Archiving.Operation();
  uint64_t inited = swift_initStackObject();
  URL._bridgeToObjectiveC()(v16);
  long long v18 = v17;
  long long v19 = (id *)_REArchiveOperationCreateWithURL();

  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  *(void *)(inited + 16) = v19;
  _REArchiveOperationSetArchiveCompressionLevel();
  _REArchiveOperationSetStreamCompression();
  if (v14)
  {
    REArchiveGetDefaultEnvelopeVersion();
    if ((_REArchiveOperationSetEnvelopeVersion() & 1) == 0)
    {
LABEL_3:
      lazy protocol witness table accessor for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError();
      swift_allocError();
      *char v20 = 1;
      swift_willThrow();
      return swift_release();
    }
  }
  else if ((_REArchiveOperationSetEnvelopeVersion() & 1) == 0)
  {
    goto LABEL_3;
  }
  if (a6) {
    objc_storeStrong(v19, a6);
  }
  uint64_t v21 = v23[5];
  __Archiving.Operation.archive(to:)();
  if (v21) {
    return swift_release();
  }
  swift_setDeallocating();
  return MEMORY[0x22A695930](v19);
}

uint64_t static __Archiving.unarchivePackage(source:destination:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  type metadata accessor for __Archiving.Operation();
  uint64_t inited = swift_initStackObject();
  URL._bridgeToObjectiveC()(v10);
  uint64_t v12 = v11;
  uint64_t v13 = _REArchiveOperationCreateWithURL();

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  *(void *)(inited + 16) = v13;
  _REArchiveOperationSetStreamCompression();
  __Archiving.Operation.unarchive(to:withReport:)(a2, 0);
  swift_setDeallocating();
  return MEMORY[0x22A695930](v13);
}

uint64_t static __Archiving.unarchivePackage(source:destination:withReport:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v10, a1, v6, v8);
  type metadata accessor for __Archiving.Operation();
  uint64_t inited = swift_initStackObject();
  URL._bridgeToObjectiveC()(v12);
  char v14 = v13;
  uint64_t v15 = _REArchiveOperationCreateWithURL();

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  *(void *)(inited + 16) = v15;
  _REArchiveOperationSetStreamCompression();
  __Archiving.Operation.unarchive(to:withReport:)(a2, a3);
  swift_setDeallocating();
  return MEMORY[0x22A695930](v15);
}

BOOL static __Archiving.ArchivingError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void __Archiving.ArchivingError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int __Archiving.ArchivingError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t __REAssetManager.waitForLoadRequest(_:with:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v7 = *a2;
  if (v7 == 2)
  {
    if (!REAssetLoadRequestGetState()) {
      REAssetLoadRequestWaitForCompletion();
    }
  }
  else if (v7)
  {
    *uint64_t v6 = (id)REAssetManagerGetEngineQueue();
    (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F8F0D8], v3);
    char v10 = _dispatchPreconditionTest(_:)();
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
    if ((v10 & 1) == 0)
    {
      __break(1u);
      return result;
    }
    if (!REAssetLoadRequestGetState()) {
      REAssetLoadRequestWaitForCompletionFromOtherQueue();
    }
  }
  else if (REAssetLoadRequestGetState() != 1)
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD00000000000001ALL;
    *(void *)(v8 + 8) = 0x8000000228358270;
    char v9 = 1;
LABEL_14:
    *(unsigned char *)(v8 + 16) = v9;
    return swift_willThrow();
  }
  uint64_t result = REAssetLoadRequestGetState();
  if (result == 1) {
    return result;
  }
  uint64_t RequestCopyError = REAssetLoadRequestCopyError();
  if (!RequestCopyError)
  {
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD00000000000001BLL;
    *(void *)(v8 + 8) = 0x8000000228358290;
    char v9 = 3;
    goto LABEL_14;
  }
  uint64_t v13 = RequestCopyError;
  type metadata accessor for CFErrorRef(0);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
  swift_allocError();
  *char v14 = v13;
  return swift_willThrow();
}

double __REAssetService.asManager.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 32))();
  type metadata accessor for __REAssetManager();
  uint64_t v3 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(unsigned char *)(v3 + 80) = 2;
  *(_WORD *)(v3 + 96) = 514;
  *(void *)(v3 + 88) = v2;
  return result;
}

void __REAssetService.performOnEngineQueue<A>(with:_:)(unsigned __int8 *a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v8 = v7;
  v41[1] = a5;
  v41[2] = a7;
  v41[3] = a3;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (void *)((char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v17);
  long long v19 = (char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v23 = MEMORY[0x270FA5388](v20);
  Swift::String v24 = (char *)v41 - v22;
  int v25 = *a1;
  if (v25 == 2)
  {
    uint64_t v26 = v21;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))((char *)v41 - v22, v8, a4, v23);
    __REAssetService.asManager.getter(a4, a6);
    id v27 = (id)REAssetManagerGetEngineQueue();
    swift_release();
    *uint64_t v15 = v27;
    (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F8F0E0], v26);
    char v28 = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v26);
    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v24, a4);
    if (v28)
    {
      v42(v29);
      return;
    }
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if ((v25 & 1) == 0)
  {
    id v30 = objc_msgSend(self, sel_callStackSymbols);
    uint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v43 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(void *)uint64_t v35 = v32;
    *(void *)(v35 + 8) = v34;
    *(unsigned char *)(v35 + 16) = 1;
    swift_willThrow();
    return;
  }
  unint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16);
  v41[0] = v21;
  v36(v19, v8, a4, v23);
  __REAssetService.asManager.getter(a4, a6);
  id v37 = (id)REAssetManagerGetEngineQueue();
  swift_release();
  *uint64_t v15 = v37;
  uint64_t v38 = v41[0];
  (*(void (**)(void *, void, void))(v13 + 104))(v15, *MEMORY[0x263F8F0D8], v41[0]);
  char v39 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v38);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a4);
  if ((v39 & 1) == 0) {
    goto LABEL_10;
  }
  __REAssetService.asManager.getter(a4, a6);
  id v40 = (id)REAssetManagerGetEngineQueue();
  swift_release();
  OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t implicit closure #1 in String.init(cString:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = String.init(cString:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v3 = specialized _NativeDictionary.init(_:capacity:)(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v10 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v10;

  return swift_bridgeObjectRelease();
}

Swift::Int specialized _NativeDictionary.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<__REAsset, RESceneDescriptor>);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v17 = v2;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      type metadata accessor for __REAsset();
      do
      {
        swift_dynamicCast();
        type metadata accessor for RESceneDescriptor();
        swift_dynamicCast();
        uint64_t v2 = v17;
        unint64_t v10 = *(void *)(v17 + 16);
        if (*(void *)(v17 + 24) <= v10)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v10 + 1, 1);
          uint64_t v2 = v17;
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*(void *)(v16 + 16));
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 64;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 64 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 64 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v11 = 0;
          unint64_t v12 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v12 && (v11 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v13 = v7 == v12;
            if (v7 == v12) {
              unint64_t v7 = 0;
            }
            v11 |= v13;
            uint64_t v14 = *(void *)(v4 + 8 * v7);
          }
          while (v14 == -1);
          unint64_t v8 = __clz(__rbit64(~v14)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        uint64_t v9 = 8 * v8;
        *(void *)(*(void *)(v2 + 48) + v9) = v16;
        *(void *)(*(void *)(v2 + 56) + v9) = v15;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaDictionary.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE80];
  }
  return v2;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance IKRig.JointCollection;
}

{
  uint64_t (*v6)();

  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance IKRig.JointCollection;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x22A689930](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return destroy for __RealityCoordinateSpaceContext;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x22A689930](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return destroy for __ImageBasedLightComponent;
  }
  __break(1u);
  return result;
}

uint64_t specialized static __REAssetBundle.AssetMap.SceneDescriptor.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = &v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v11 - 8);
  BOOL v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = &v35[-v15];
  MEMORY[0x270FA5388](v17);
  long long v19 = &v35[-v18];
  if (*a1 == *a2 && a1[1] == a2[1]
    || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v20 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3]
      || (v22 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v22 & 1) != 0))
    {
      char v39 = v13;
      id v37 = v7;
      uint64_t v23 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
      outlined init with copy of (Int, URL)((uint64_t)a1 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      uint64_t v38 = v23;
      outlined init with copy of (Int, URL)((uint64_t)a2 + *(int *)(v23 + 24), (uint64_t)v16, &demangling cache variable for type metadata for UUID?);
      uint64_t v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
      outlined init with copy of (Int, URL)((uint64_t)v19, (uint64_t)v10, &demangling cache variable for type metadata for UUID?);
      outlined init with copy of (Int, URL)((uint64_t)v16, v24, &demangling cache variable for type metadata for UUID?);
      uint64_t v25 = v5;
      uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v26((uint64_t)v10, 1, v4) == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
        outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
        if (v26(v24, 1, v4) == 1)
        {
          outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
          goto LABEL_16;
        }
      }
      else
      {
        outlined init with copy of (Int, URL)((uint64_t)v10, (uint64_t)v39, &demangling cache variable for type metadata for UUID?);
        if (v26(v24, 1, v4) != 1)
        {
          uint64_t v27 = v25;
          char v28 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v25 + 32);
          uint64_t v29 = v37;
          v28(v37, v24, v4);
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
          uint64_t v30 = (uint64_t)v39;
          int v36 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v31 = *(void (**)(unsigned char *, uint64_t))(v27 + 8);
          v31(v29, v4);
          outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
          outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
          v31((unsigned char *)v30, v4);
          outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
          if (v36)
          {
LABEL_16:
            uint64_t v32 = *(int *)(v38 + 28);
            uint64_t v33 = *(void **)((char *)a1 + v32);
            uint64_t v34 = *(void **)((char *)a2 + v32);
            if (v33)
            {
              if (v34 && (specialized static Array<A>.== infix(_:_:)(v33, v34) & 1) != 0) {
                return 1;
              }
            }
            else if (!v34)
            {
              return 1;
            }
          }
          return 0;
        }
        outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
        outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
        (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v39, v4);
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (UUID?, UUID?));
      return 0;
    }
  }
  return result;
}

uint64_t specialized __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

uint64_t specialized __REAssetBundle.Header.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x496E6F6973726576 && a2 == 0xEB000000006F666ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69737265566E696DLL && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized __REAssetBundle.Header.VersionInfo.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002283580D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C506E696769726FLL && a2 == 0xEE006D726F667461)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D614E656C6966 && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000228358110)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized __REAssetBundle.AssetMap.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73656E656373 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737465737361 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x8000000228358130)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E656C6966 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D614E656C6966 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D614E656E656373 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656449656E656373 && a2 == 0xEF7265696669746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000002283580F0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized static __REAssetBundle.frameworkVersion(key:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for realityFoundation != -1) {
    swift_once();
  }
  id v4 = objc_msgSend((id)static NSBundle.realityFoundation, sel_infoDictionary);
  if (!v4) {
    return 12589;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v6 + 16))
  {
    long long v13 = 0u;
    long long v14 = 0u;
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v8 & 1) == 0)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v14 + 1))
  {
LABEL_15:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 12589;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 12589;
  }
  uint64_t result = v11;
  uint64_t v10 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10)
  {
    swift_bridgeObjectRelease();
    return 12589;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo.CodingKeys and conformance __REAssetBundle.Header.VersionInfo.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.CodingKeys and conformance __REAssetBundle.Header.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.Header.VersionInfo and conformance __REAssetBundle.Header.VersionInfo);
  }
  return result;
}

uint64_t outlined copy of __REAssetBundle.ExportOptions.DeploymentTarget?(uint64_t a1, unint64_t a2)
{
  if (a2 != 5) {
    return outlined copy of __REAssetBundle.ExportOptions.PlatformOS(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of __REAssetBundle.ExportOptions.PlatformOS(uint64_t a1, unint64_t a2)
{
  if (a2 >= 5) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(uint64_t a1, unint64_t a2)
{
  if (a2 != 5) {
    return outlined consume of __REAssetBundle.ExportOptions.PlatformOS(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of __REAssetBundle.ExportOptions.PlatformOS(uint64_t a1, unint64_t a2)
{
  if (a2 >= 5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of __REAssetBundle.LoadOptions.ContentRequest(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor()
{
  uint64_t result = type metadata singleton initialization cache for __REAssetBundle.AssetMap.SceneDescriptor;
  if (!type metadata singleton initialization cache for __REAssetBundle.AssetMap.SceneDescriptor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant] and conformance <A> [A](unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of __REAssetBundle.AssetMap.SceneDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of __REAssetBundle.AssetMap.SceneDescriptor(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys and conformance __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.CodingKeys and conformance __REAssetBundle.AssetMap.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [__REAssetBundle.AssetMap.SceneDescriptor] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__REAssetBundle.AssetMap.SceneDescriptor]);
    lazy protocol witness table accessor for type UUID and conformance UUID(a2, (void (*)(uint64_t))type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.AssetDescriptor and conformance __REAssetBundle.AssetMap.AssetDescriptor);
  }
  return result;
}

uint64_t outlined init with take of (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: __REAsset, value: __REAssetBundle.AssetMap.SceneDescriptor)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of __REAssetBundle.AssetMap.SceneDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with copy of __DownsamplingStrategy?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __DownsamplingStrategy?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_2280AEB48()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in static __REAssetBundle.load(url:assetService:materialDefinition:completionHandler:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void (**)(unsigned char *))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in static __REAssetBundle.load(url:assetService:materialDefinition:completionHandler:)((void *)(v0 + 16), v0 + v2, v3);
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t sub_2280AECE0()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, v6 + 16, v5);
}

uint64_t partial apply for closure #1 in static __REAssetBundle.load(url:serviceLocator:completionHandler:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + v3);
  uint64_t v5 = *(void (**)(unsigned char *))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in static __REAssetBundle.load(url:serviceLocator:completionHandler:)(v0 + v2, v4, v5);
}

uint64_t sub_2280AEE3C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t partial apply for closure #1 in static __REAssetBundle.load(bundle:entryName:assetService:completionHandler:)()
{
  return closure #1 in static __REAssetBundle.load(bundle:entryName:assetService:completionHandler:)((void *)(v0 + 16), *(void **)(v0 + 56), *(void *)(v0 + 64), *(void **)(v0 + 72), *(void (**)(unsigned char *))(v0 + 80));
}

uint64_t sub_2280AEEA0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for closure #1 in static __REAssetBundle.load(bundle:entryName:serviceLocator:completionHandler:)()
{
  return closure #1 in static __REAssetBundle.load(bundle:entryName:serviceLocator:completionHandler:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void (**)(unsigned char *))(v0 + 48));
}

uint64_t outlined release of __REAssetBundle.ExportOptions(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 128);

  outlined consume of __REAssetBundle.ExportOptions.DeploymentTarget?(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2280AEFCC()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in __REAssetBundle.__write(to:completionHandler:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in __REAssetBundle.__write(to:completionHandler:)(v0 + 16, v0 + v2, v3);
}

uint64_t type metadata accessor for __Archiving.Operation()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError;
  if (!lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError;
  if (!lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __Archiving.ArchivingError and conformance __Archiving.ArchivingError);
  }
  return result;
}

uint64_t sub_2280AF234@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2) {
    uint64_t v3 = *(void *)(a1 + 120);
  }
  else {
    uint64_t v3 = 0;
  }
  *a2 = v2;
  a2[1] = v3;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v2);
}

uint64_t sub_2280AF24C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1) {
    uint64_t v4 = a1[1];
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a2 + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(*a1);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
  *(void *)(a2 + 112) = v3;
  *(void *)(a2 + 120) = v4;
  return result;
}

uint64_t destroy for __REAssetBundle(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __REAssetBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2 + 16;
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  uint64_t v7 = v6;
  char v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain();
  swift_bridgeObjectRetain();
  v8(a1 + 16, v5, v7);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for __REAssetBundle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for __REAssetBundle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle()
{
  return &type metadata for __REAssetBundle;
}

void *initializeWithCopy for __REAssetBundle.Header(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for __REAssetBundle.Header(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

void *assignWithTake for __REAssetBundle.Header(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.Header(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.Header(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.Header()
{
  return &type metadata for __REAssetBundle.Header;
}

uint64_t destroy for __REAssetBundle.Header()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for __REAssetBundle.Header.VersionInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for __REAssetBundle.Header.VersionInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for __REAssetBundle.Header.VersionInfo(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle.Header.VersionInfo()
{
  return &type metadata for __REAssetBundle.Header.VersionInfo;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.QueueOptions(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2280AF8ECLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = (v7 + 2147483646) & 0x7FFFFFFF;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for __REAssetBundle.QueueOptions(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x2280AF9D4);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.QueueOptions()
{
  return &type metadata for __REAssetBundle.QueueOptions;
}

uint64_t destroy for __REAssetBundle.ExportOptions(uint64_t a1)
{
  if (*(void *)(a1 + 48) >= 6uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 112)) {
    swift_release();
  }
  if (*(void *)(a1 + 128)) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __REAssetBundle.ExportOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  int v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  unsigned int v5 = (_OWORD *)(a1 + 40);
  uint64_t v6 = (_OWORD *)(a2 + 40);
  unint64_t v7 = *(void *)(a2 + 48);
  id v8 = v4;
  if (v7 == 5)
  {
    *unsigned int v5 = *v6;
    *(_OWORD *)((char *)v5 + 13) = *(_OWORD *)((char *)v6 + 13);
  }
  else
  {
    if (v7 >= 5)
    {
      *(void *)(a1 + 40) = *(void *)v6;
      *(void *)(a1 + 48) = v7;
      swift_bridgeObjectRetain();
    }
    else
    {
      *unsigned int v5 = *v6;
    }
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  }
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v9;
    *(void *)(a1 + 120) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  uint64_t v12 = *(void *)(a2 + 128);
  if (v12)
  {
    uint64_t v13 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v12;
    *(void *)(a1 + 136) = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  }
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __REAssetBundle.ExportOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  unsigned int v5 = *(void **)(a1 + 24);
  uint64_t v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v6;
  id v7 = v6;

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 34);
  id v8 = (long long *)(a1 + 40);
  uint64_t v9 = (long long *)(a2 + 40);
  unint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a2 + 48);
  if (v10 == 5)
  {
    if (v11 == 5)
    {
      long long v12 = *v9;
      *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
      *id v8 = v12;
      goto LABEL_19;
    }
    if (v11 >= 5)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
    }
    else
    {
      *id v8 = *v9;
    }
    uint64_t v14 = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(void *)(a1 + 56) = v14;
    goto LABEL_18;
  }
  if (v11 == 5)
  {
    outlined destroy of __REAssetBundle.ExportOptions.DeploymentTarget(a1 + 40);
    long long v13 = *(_OWORD *)(a2 + 53);
    *id v8 = *v9;
    *(_OWORD *)(a1 + 53) = v13;
    goto LABEL_19;
  }
  if (v10 >= 5)
  {
    if (v11 >= 5)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    outlined destroy of String(a1 + 40);
    goto LABEL_15;
  }
  if (v11 < 5)
  {
LABEL_15:
    *id v8 = *v9;
    goto LABEL_17;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
LABEL_17:
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
LABEL_18:
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
LABEL_19:
  uint64_t v15 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v15;
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v16)
    {
      uint64_t v17 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v16;
      *(void *)(a1 + 120) = v17;
      swift_retain();
      swift_release();
      goto LABEL_26;
    }
    swift_release();
  }
  else if (v16)
  {
    uint64_t v18 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v16;
    *(void *)(a1 + 120) = v18;
    swift_retain();
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_26:
  uint64_t v19 = *(void *)(a2 + 128);
  if (!*(void *)(a1 + 128))
  {
    if (v19)
    {
      uint64_t v21 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = v19;
      *(void *)(a1 + 136) = v21;
      swift_retain();
      goto LABEL_33;
    }
LABEL_32:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_33;
  }
  if (!v19)
  {
    swift_release();
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v19;
  *(void *)(a1 + 136) = v20;
  swift_retain();
  swift_release();
LABEL_33:
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t outlined destroy of String(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of __REAssetBundle.ExportOptions.DeploymentTarget(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy153_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for __REAssetBundle.ExportOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 34);
  long long v5 = (_OWORD *)(a1 + 40);
  uint64_t v6 = (_OWORD *)(a2 + 40);
  unint64_t v7 = *(void *)(a1 + 48);
  if (v7 == 5) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 48);
  if (v8 == 5)
  {
    outlined destroy of __REAssetBundle.ExportOptions.DeploymentTarget(a1 + 40);
LABEL_4:
    *long long v5 = *v6;
    *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
    goto LABEL_11;
  }
  if (v7 >= 5)
  {
    if (v8 >= 5)
    {
      *(void *)(a1 + 40) = *(void *)v6;
      *(void *)(a1 + 48) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    outlined destroy of String(a1 + 40);
  }
  *long long v5 = *v6;
LABEL_10:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
LABEL_11:
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v9;
      *(void *)(a1 + 120) = v10;
      swift_release();
      goto LABEL_18;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v9;
    *(void *)(a1 + 120) = v11;
    goto LABEL_18;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_18:
  uint64_t v12 = *(void *)(a2 + 128);
  if (!*(void *)(a1 + 128))
  {
    if (v12)
    {
      uint64_t v14 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = v12;
      *(void *)(a1 + 136) = v14;
      goto LABEL_25;
    }
LABEL_24:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    goto LABEL_25;
  }
  if (!v12)
  {
    swift_release();
    goto LABEL_24;
  }
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v12;
  *(void *)(a1 + 136) = v13;
  swift_release();
LABEL_25:
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.ExportOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 153)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.ExportOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 152) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 153) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 153) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.ExportOptions()
{
  return &type metadata for __REAssetBundle.ExportOptions;
}

void *initializeWithCopy for __REAssetBundle.ExportOptions.AssetRemapping(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for __REAssetBundle.ExportOptions.AssetRemapping(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for __REAssetBundle.ExportOptions.AssetRemapping(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle.ExportOptions.AssetRemapping()
{
  return &type metadata for __REAssetBundle.ExportOptions.AssetRemapping;
}

uint64_t destroy for __REAssetBundle.LoadOptions(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 112) >= 2uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t initializeWithCopy for __REAssetBundle.LoadOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v5 = a2 + 32;
  uint64_t v6 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v6;
    *(void *)(a1 + 64) = v7;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 32, v5, v6);
  }
  else
  {
    long long v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 48) = v8;
    *(void *)(a1 + 64) = *(void *)(v5 + 32);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v9 = (void *)(a2 + 104);
  unint64_t v10 = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  if (v10 >= 2)
  {
    *(void *)(a1 + 104) = *v9;
    *(void *)(a1 + 112) = v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v9;
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for __REAssetBundle.LoadOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  else if (v4)
  {
    *(void *)(a1 + 56) = v4;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 32, a2 + 32);
    goto LABEL_8;
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
LABEL_8:
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  unint64_t v7 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112) >= 2uLL)
  {
    if (v7 >= 2)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined destroy of String(a1 + 104);
    goto LABEL_13;
  }
  if (v7 < 2)
  {
LABEL_13:
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    goto LABEL_15;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
LABEL_15:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for __REAssetBundle.LoadOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  if (*(void *)(a1 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  long long v6 = (void *)(a2 + 104);
  if (*(void *)(a1 + 112) >= 2uLL)
  {
    unint64_t v7 = *(void *)(a2 + 112);
    if (v7 >= 2)
    {
      *(void *)(a1 + 104) = *v6;
      *(void *)(a1 + 112) = v7;
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of String(a1 + 104);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)v6;
LABEL_8:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.LoadOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.LoadOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.LoadOptions()
{
  return &type metadata for __REAssetBundle.LoadOptions;
}

uint64_t initializeBufferWithCopyOfBuffer for __REAssetBundle.LoadOptions.ContentRequest(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for __REAssetBundle.LoadOptions.ContentRequest(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for __REAssetBundle.LoadOptions.ContentRequest(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.LoadOptions.ContentRequest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.LoadOptions.ContentRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAssetBundle.LoadOptions.ContentRequest()
{
  return &type metadata for __REAssetBundle.LoadOptions.ContentRequest;
}

void *initializeBufferWithCopyOfBuffer for __REAssetBundle.__MaterialDefinitionOverride(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for __REAssetBundle.__MaterialDefinitionOverride(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for __REAssetBundle.__MaterialDefinitionOverride(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle.__MaterialDefinitionOverride()
{
  return &type metadata for __REAssetBundle.__MaterialDefinitionOverride;
}

uint64_t initializeBufferWithCopyOfBuffer for __REAssetBundle.AssetMap(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __REAssetBundle.AssetMap(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for __REAssetBundle.AssetMap(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle.AssetMap()
{
  return &type metadata for __REAssetBundle.AssetMap;
}

uint64_t *initializeBufferWithCopyOfBuffer for __REAssetBundle.AssetMap.SceneDescriptor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    __dst = (char *)a1 + v9;
    unint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for __REAssetBundle.AssetMap.SceneDescriptor(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for __REAssetBundle.AssetMap.SceneDescriptor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for __REAssetBundle.AssetMap.SceneDescriptor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for __REAssetBundle.AssetMap.SceneDescriptor(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

void *assignWithTake for __REAssetBundle.AssetMap.SceneDescriptor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAssetBundle.AssetMap.SceneDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2280B1568);
}

uint64_t sub_2280B1568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for __REAssetBundle.AssetMap.SceneDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2280B1630);
}

uint64_t sub_2280B1630(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for __REAssetBundle.AssetMap.SceneDescriptor()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *assignWithCopy for __REAssetBundle.AssetMap.AssetDescriptor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __REAssetBundle.AssetMap.AssetDescriptor()
{
  return &type metadata for __REAssetBundle.AssetMap.AssetDescriptor;
}

uint64_t initializeBufferWithCopyOfBuffer for __RealityFileError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for __RealityFileError(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of __RealityFileError);
}

uint64_t outlined copy of __RealityFileError(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3) {
    return swift_bridgeObjectRetain();
  }
  if (a3 == 2) {
    return outlined copy of __REAssetBundle.ExportOptions.PlatformOS(result, a2);
  }
  return result;
}

uint64_t destroy for __RealityFileError(uint64_t a1)
{
  return outlined consume of __RealityFileError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of __RealityFileError(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3) {
    return swift_bridgeObjectRelease();
  }
  if (a3 == 2) {
    return outlined consume of __REAssetBundle.ExportOptions.PlatformOS(result, a2);
  }
  return result;
}

uint64_t *assignWithCopy for __RealityFileError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for __RealityFileError(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of __RealityFileError, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of __RealityFileError);
}

uint64_t *assignWithTake for __RealityFileError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for __RealityFileError(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of __RealityFileError);
}

uint64_t getEnumTagSinglePayload for __RealityFileError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __RealityFileError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for __RealityFileError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t destructiveInjectEnumTag for __RealityFileError(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)__n128 result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for __RealityFileError()
{
  return &type metadata for __RealityFileError;
}

uint64_t getEnumTagSinglePayload for __AssetBundleEnvelopeVersion(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  switch(v4)
  {
    case 1:
      uint64_t v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        return v4;
      }
      goto LABEL_17;
    case 2:
      uint64_t v4 = a1[1];
      if (!a1[1]) {
        return v4;
      }
      goto LABEL_17;
    case 3:
      __break(1u);
      JUMPOUT(0x2280B1A08);
    case 4:
      uint64_t v4 = *(unsigned int *)(a1 + 1);
      if (v4) {
LABEL_17:
      }
        uint64_t v4 = (*a1 | (v4 << 16)) - 0xFFFF;
      break;
    default:
      return v4;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for __AssetBundleEnvelopeVersion(uint64_t result, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2)
  {
    unsigned int v7 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 1;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v7;
        return result;
      case 3:
        goto LABEL_21;
      case 4:
        *(_DWORD *)(result + 2) = v7;
        return result;
      default:
        return result;
    }
  }
  switch(v6)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_21:
      __break(1u);
      JUMPOUT(0x2280B1AD8);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for __AssetBundleEnvelopeVersion(unsigned __int8 *a1)
{
  if (a1[1]) {
    return (*a1 | (a1[1] << 8)) - 255;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for __AssetBundleEnvelopeVersion(unsigned char *result, int a2)
{
  if (a2)
  {
    *__n128 result = a2 - 1;
    result[1] = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for __AssetBundleEnvelopeVersion()
{
  return &type metadata for __AssetBundleEnvelopeVersion;
}

ValueMetadata *type metadata accessor for __Archiving()
{
  return &type metadata for __Archiving;
}

ValueMetadata *type metadata accessor for __Archiving.ArchivingError()
{
  return &type metadata for __Archiving.ArchivingError;
}

uint64_t initializeBufferWithCopyOfBuffer for SerializationError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for __RealityFileError(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of SerializationError);
}

uint64_t outlined copy of SerializationError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for SerializationError(uint64_t a1)
{
  return outlined consume of SerializationError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of SerializationError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for __RealityFileError(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for SerializationError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for __RealityFileError(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of SerializationError, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of SerializationError);
}

uint64_t *assignWithCopy for __RealityFileError(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for SerializationError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for __RealityFileError(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of SerializationError);
}

uint64_t *assignWithTake for __RealityFileError(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for SerializationError()
{
  return &type metadata for SerializationError;
}

void *type metadata accessor for __REAssetBundle.AssetMap.CodingKeys()
{
  return &unk_26DCA6120;
}

void *type metadata accessor for __REAssetBundle.AssetMap.AssetDescriptor.CodingKeys()
{
  return &unk_26DCA61B0;
}

ValueMetadata *type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant()
{
  return &type metadata for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant;
}

unsigned char *storeEnumTagSinglePayload for __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280B1E2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor.CodingKeys()
{
  return &unk_26DCA62C0;
}

void *type metadata accessor for __REAssetBundle.Header.CodingKeys()
{
  return &unk_26DCA6350;
}

unsigned char *storeEnumTagSinglePayload for __REAssetBundle.AssetMap.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280B1F40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __REAssetBundle.Header.VersionInfo.CodingKeys()
{
  return &unk_26DCA63E0;
}

unint64_t lazy protocol witness table accessor for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys and conformance __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys);
  }
  return result;
}

uint64_t sub_2280B24F4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> (@out [__REAssetBundle.ExportOptions.AssetRemapping]?)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed URL) -> (@owned [__REAssetBundle.ExportOptions.AssetRemapping]?)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SerializationError and conformance SerializationError()
{
  unint64_t result = lazy protocol witness table cache variable for type SerializationError and conformance SerializationError;
  if (!lazy protocol witness table cache variable for type SerializationError and conformance SerializationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SerializationError and conformance SerializationError);
  }
  return result;
}

uint64_t specialized static __REAssetBundle.getSceneNamesFromRealityFile(realityFile:)()
{
  uint64_t result = RERealityFileGetAssetDescriptorCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = result;
    if (!result) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v2 = 0;
    int v3 = (void *)MEMORY[0x263F8EE78];
    do
    {
      if (RERealityFileGetAssetDescriptorAtIndex() && RERealityFileAssetDescriptorAsSceneDescriptor())
      {
        if (RESceneDescriptorGetSceneName())
        {
          uint64_t v5 = String.init(cString:)();
          unint64_t v7 = v6;
        }
        else
        {
          uint64_t v5 = 0;
          unint64_t v7 = 0xE000000000000000;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v9 = v3[2];
        unint64_t v8 = v3[3];
        if (v9 >= v8 >> 1) {
          int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v3);
        }
        v3[2] = v9 + 1;
        unsigned int v4 = &v3[2 * v9];
        v4[4] = v5;
        v4[5] = v7;
      }
      ++v2;
    }
    while (v1 != v2);
    return (uint64_t)v3;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalizedRealityFileError()
{
  return &type metadata for LocalizedRealityFileError;
}

unsigned char *storeEnumTagSinglePayload for __Archiving.ArchivingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280B2820);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant.CodingKeys()
{
  return &unk_26DCA6550;
}

unint64_t lazy protocol witness table accessor for type LocalizedRealityFileError and conformance LocalizedRealityFileError()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalizedRealityFileError and conformance LocalizedRealityFileError;
  if (!lazy protocol witness table cache variable for type LocalizedRealityFileError and conformance LocalizedRealityFileError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalizedRealityFileError and conformance LocalizedRealityFileError);
  }
  return result;
}

uint64_t ModelComponent.init(mesh:materials:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t ModelComponent.mesh.getter()
{
  return swift_retain();
}

uint64_t ModelComponent.mesh.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*ModelComponent.mesh.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ModelComponent.materials.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ModelComponent.materials.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ModelComponent.materials.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ModelComponent.boundsMargin.getter()
{
  return *(float *)(v0 + 16);
}

void ModelComponent.boundsMargin.setter(float a1)
{
  *(float *)(v1 + 16) = a1;
}

float (*ModelComponent.boundsMargin.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 16);
  return PointLightComponent.attenuationFalloffExponent.modify;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance ModelComponent@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  return static ModelComponent.__fromCore(_:borrowStrongReference:)(&v3, 0, a2);
}

uint64_t static ModelComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  return static ModelComponent.__fromCore(_:borrowStrongReference:)(&v3, 0, a2);
}

uint64_t protocol witness for Component.__toCore(_:) in conformance ModelComponent(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)v1 + 4);
  long long v6 = *v1;
  int v7 = v3;
  uint64_t v5 = v2;
  return ModelComponent.__toCore(_:returnStrongReference:)(&v5, 0);
}

uint64_t ModelComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)v1 + 4);
  long long v6 = *v1;
  int v7 = v3;
  uint64_t v5 = v2;
  return ModelComponent.__toCore(_:returnStrongReference:)(&v5, 0);
}

void protocol witness for static Component.__coreComponentType.getter in conformance ModelComponent(_DWORD *a1@<X8>)
{
  *a1 = 7;
}

void static ModelComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 7;
}

uint64_t static ModelComponent.__fromCore(_:borrowStrongReference:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v108 = a2;
  long long v91 = a3;
  uint64_t v123 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t Mesh = REMeshComponentGetMesh();
  if (Mesh)
  {
    uint64_t v5 = Mesh;
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for MeshResource();
      uint64_t v92 = swift_dynamicCastClass();
      if (v92) {
        goto LABEL_7;
      }
      swift_unknownObjectRelease();
    }
    type metadata accessor for MeshResource();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    RERetain();
    uint64_t v92 = v6;
    REAssetSetSwiftObject();
  }
  else
  {
    type metadata accessor for MeshResource();
    uint64_t v92 = swift_allocObject();
    *(void *)(v92 + 16) = 0;
  }
LABEL_7:
  uint64_t MaterialCount = REMeshComponentGetMaterialCount();
  unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, MaterialCount & ~(MaterialCount >> 63), 0, MEMORY[0x263F8EE78]);
  uint64_t v114 = v8;
  REComponentGetEntity();
  REMaterialParameterBlockArrayComponentGetComponentType();
  uint64_t v9 = REEntityGetOrAddComponentByClass();
  REMaterialRenderStateArrayComponentGetComponentType();
  v111._rawValue = (void *)REEntityGetOrAddComponentByClass();
  uint64_t v109 = v9;
  if (REMaterialParameterBlockArrayComponentSize() != MaterialCount) {
    REMaterialParameterBlockArrayComponentResize();
  }
  if (REMaterialRenderStateArrayComponentSize() != MaterialCount) {
    REMaterialRenderStateArrayComponentResize();
  }
  REDirectMaterialParametersArrayComponentGetComponentType();
  uint64_t v95 = REEntityGetOrAddComponentByClass();
  if (!REEntityGetComponent())
  {
    uint64_t MaterialAsset = 0;
    uint64_t VideoAsset = 0;
    if ((MaterialCount & 0x8000000000000000) == 0) {
      goto LABEL_13;
    }
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
  }
  uint64_t VideoAsset = REVideoComponentGetVideoAsset();
  uint64_t MaterialAsset = REVideoComponentGetMaterialAsset();
  if (MaterialCount < 0) {
    goto LABEL_112;
  }
LABEL_13:
  if (!MaterialCount)
  {
LABEL_110:
    uint64_t v87 = v91;
    *long long v91 = v92;
    v87[1] = (uint64_t)v8;
    *((_DWORD *)v87 + 4) = 0;
    uint64_t result = REMeshComponentGetBoundsMargin();
    *((_DWORD *)v87 + 4) = v89;
    return result;
  }
  Swift::Int v10 = 0;
  if (VideoAsset) {
    BOOL v11 = MaterialAsset == 0;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  int v105 = v12;
  uint64_t v94 = MEMORY[0x263F8EE58] + 8;
  int64_t v93 = (void *)0x8000000228352C10;
  int v13 = &lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?;
  uint64_t v107 = v3;
  uint64_t v106 = MaterialCount;
  while (1)
  {
    if (MaterialCount == v10) {
      goto LABEL_113;
    }
    uint64_t MaterialAtIndex = REMeshComponentGetMaterialAtIndex();
    if (!MaterialAtIndex) {
      goto LABEL_23;
    }
    uint64_t v16 = MaterialAtIndex;
    if (!REMeshComponentGetMaterialParametersIDAtIndex())
    {
      uint64_t v21 = MaterialAsset;
      int v22 = v105;
      if (v16 != MaterialAsset) {
        int v22 = 0;
      }
      if (v22 == 1)
      {
        type metadata accessor for __VideoResource();
        *(void *)&long long v120 = VideoAsset;
        uint64_t v23 = static __VideoResource.__fromCore(_:)((uint64_t *)&v120);
        uint64_t v121 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OpaquePointer?);
        *(void *)&long long v120 = v21;
        outlined init with copy of Any((uint64_t)&v120, (uint64_t)&v115);
        swift_dynamicCast();
        uint64_t v24 = v113;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
        swift_retain();
        specialized static LoadableResource.loadEngineResource(assetPath:)(0xD00000000000001FLL, v93);
        uint64_t v25 = (void *)REMaterialParameterBlockValueCreate();
        type metadata accessor for VideoPlaybackController();
        swift_allocObject();
        uint64_t v26 = swift_retain();
        uint64_t v27 = VideoPlaybackController.init(fromCore:)(v26);
        uint64_t v28 = specialized static LoadableResource.fromCore(assetRef:)(v24);
        if (!v28) {
          goto LABEL_120;
        }
        uint64_t v29 = v28;
        swift_release();
        *(void *)&long long v120 = 0;
        int TriangleFillModeAtIndex = REMaterialRenderStateArrayComponentGetTriangleFillModeAtIndex();
        uint64_t v31 = v120;
        if (!TriangleFillModeAtIndex) {
          uint64_t v31 = 0;
        }
        uint64_t v99 = v31;
        LOBYTE(v113) = 1;
        char WritesDepthAtIndex = REMaterialRenderStateArrayComponentGetWritesDepthAtIndex();
        int v102 = v113;
        unsigned __int8 v112 = 1;
        int ReadsDepthAtIndex = REMaterialRenderStateArrayComponentGetReadsDepthAtIndex();
        int v100 = v112;
        uint64_t v115 = 2;
        int CullModeAtIndex = REMaterialRenderStateArrayComponentGetCullModeAtIndex();
        if (CullModeAtIndex) {
          uint64_t v34 = v115;
        }
        else {
          uint64_t v34 = 0;
        }
        if (v108)
        {
          id v35 = (id)REMaterialParameterBlockArrayComponentBorrowBlockValueAtIndex();
          if (!v35) {
            goto LABEL_120;
          }
        }
        else
        {
          id v35 = (id)REMaterialParameterBlockArrayComponentGetBlockValueAtIndex();
          if (!v35) {
            goto LABEL_120;
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v67 = v114;
        swift_retain();
        swift_bridgeObjectRetain();
        id v98 = v35;
        swift_retain();
        swift_retain();
        char v68 = WritesDepthAtIndex;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67[2] + 1, 1, v67);
        }
        uint64_t v104 = v27;
        unint64_t v70 = v67[2];
        unint64_t v69 = v67[3];
        uint64_t v103 = v34;
        unint64_t v97 = v70 + 1;
        if (v70 >= v69 >> 1) {
          uint64_t v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v70 + 1, 1, v67);
        }
        char v71 = v68 ^ 1 | v102;
        char v72 = ReadsDepthAtIndex ^ 1 | v100;
        char v73 = CullModeAtIndex ^ 1;
        uint64_t v121 = &type metadata for VideoMaterial;
        uint64_t v122 = &protocol witness table for VideoMaterial;
        uint64_t v74 = swift_allocObject();
        *(void *)&long long v120 = v74;
        *(void *)(v74 + 16) = v29;
        *(void *)(v74 + 24) = MEMORY[0x263F8EE78];
        *(unsigned char *)(v74 + 32) = 0;
        uint64_t v75 = v98;
        *(void *)(v74 + 40) = 0;
        *(void *)(v74 + 48) = v75;
        uint64_t v76 = v104;
        *(void *)(v74 + 56) = v23;
        *(void *)(v74 + 64) = v76;
        *(void *)(v74 + 72) = v99;
        *(unsigned char *)(v74 + 80) = v71 & 1;
        *(unsigned char *)(v74 + 81) = v72 & 1;
        *(void *)(v74 + 88) = v103;
        *(unsigned char *)(v74 + 96) = v73;
        v67[2] = v97;
        outlined init with take of BindableDataInternal(&v120, (uint64_t)&v67[5 * v70 + 4]);
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release_n();
        uint64_t v114 = v67;
      }
      else
      {
        uint64_t v61 = v95;
        if (v108)
        {
          id v62 = (id)REMaterialParameterBlockArrayComponentBorrowBlockValueAtIndex();
          if (!v62) {
            goto LABEL_120;
          }
        }
        else
        {
          id v62 = (id)REMaterialParameterBlockArrayComponentGetBlockValueAtIndex();
          if (!v62) {
            goto LABEL_120;
          }
        }
        if (MEMORY[0x22A68DBA0](v61, v10, 0))
        {
          id v63 = (id)REDirectMaterialParametersArrayComponentGetData();
          if (!v63) {
            id v63 = (id)REDirectParameterBufferCreate();
          }
          id v64 = v63;
          id v65 = 0;
          char v66 = 0;
        }
        else
        {
          id v64 = (id)REDirectMaterialParametersArrayComponentGetData();
          if (!v64) {
            id v64 = (id)REDirectParameterBufferCreate();
          }
          id v65 = (id)REDirectMaterialParametersArrayComponentGetData();
          if (!v65) {
            id v65 = (id)REDirectParameterBufferCreate();
          }
          char v66 = 1;
        }
        type metadata accessor for __MaterialResource();
        uint64_t v115 = MEMORY[0x263F8EE78];
        char v116 = 0;
        uint64_t v117 = 0;
        uint64_t v118 = (uint64_t)v62;
        static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v16, &v115, (uint64_t)v64, (uint64_t)v65, v66, (uint64_t *)&v120);
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v120, (uint64_t)v121);
        Material.syncMaterialRenderStateFromCore(coreComponent:index:)(v111, v10);
        outlined init with copy of __REAssetService((uint64_t)&v120, (uint64_t)&v115);
        uint64_t v77 = v114;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
          uint64_t v114 = v77;
        }
        unint64_t v79 = v77[2];
        unint64_t v78 = v77[3];
        if (v79 >= v78 >> 1) {
          uint64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v78 > 1), v79 + 1, 1, v77);
        }
        uint64_t v80 = v118;
        uint64_t v81 = v119;
        uint64_t v82 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v115, v118);
        __n128 v83 = MEMORY[0x270FA5388](v82);
        uint64_t v85 = (char *)&v90 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, __n128))(v86 + 16))(v85, v83);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v79, (uint64_t)v85, (uint64_t *)&v114, v80, v81);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
        outlined consume of CustomMaterial.CustomUniformsState?(v64, v65, v66);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
      }
      uint64_t MaterialCount = v106;
      int v13 = &lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?;
      goto LABEL_23;
    }
    type metadata accessor for __ServiceLocator();
    uint64_t Shared = REEngineGetShared();
    if (Shared)
    {
      uint64_t v18 = Shared;
      if (one-time initialization token for lock != -1) {
        swift_once();
      }
      os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      uint64_t v19 = v13[338];
      if (!v19 || *(void *)(v19 + 24) != v18)
      {
        type metadata accessor for __Engine();
        swift_allocObject();
        v13[338] = (uint64_t)__Engine.init(coreEngine:)(v18);
        swift_release();
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      uint64_t v20 = (void *)v13[338];
      if (v20) {
        goto LABEL_65;
      }
    }
    else
    {
      v13[338] = 0;
      swift_release();
      uint64_t v20 = (void *)v13[338];
      if (v20) {
        goto LABEL_65;
      }
    }
    uint64_t Default = REEngineConfigurationCreateDefault();
    type metadata accessor for EngineConfiguration();
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = Default;
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v38 = REEngineConfigurationClone();
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = v38;
      swift_release_n();
      uint64_t v37 = v39;
    }
    REEngineConfigurationSetClockMode();
    if (one-time initialization token for defaultServices != -1) {
      swift_once();
    }
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v40 = REEngineConfigurationClone();
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = v40;
      swift_release_n();
      uint64_t v37 = v41;
    }
    REEngineConfigurationSetServicesToCreate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v42 = REEngineConfigurationClone();
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = v42;
      swift_release_n();
      uint64_t v37 = v43;
    }
    REEngineConfigurationSetServicesToUpdate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v44 = REEngineConfigurationClone();
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = v44;
      swift_release_n();
      uint64_t v37 = v45;
    }
    REEngineConfigurationSetStartupOptions();
    if (one-time initialization token for defaultRenderFlags != -1) {
      swift_once();
    }
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v46 = REEngineConfigurationClone();
      uint64_t v47 = swift_allocObject();
      *(void *)(v47 + 16) = v46;
      swift_release_n();
      uint64_t v37 = v47;
    }
    REEngineConfigurationSetRenderFlags();
    uint64_t v48 = static __ServiceLocator.__sharedEngine.getter();
    swift_release();
    if (!v48)
    {
      *(void *)&long long v120 = v37;
      unint64_t v49 = specialized static __Engine.makeSharedEngine(_:)((uint64_t *)&v120);
      REEngineSetShared();
      static __ServiceLocator.sharedEngine = v49;
      swift_release();
      static __ServiceLocator.createdSharedEngine = 1;
    }
    swift_release();
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
    int v13 = &lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?;
    uint64_t v20 = static __ServiceLocator.sharedEngine;
    if (!static __ServiceLocator.sharedEngine) {
      goto LABEL_115;
    }
LABEL_65:
    swift_beginAccess();
    uint64_t v50 = v20[5];
    if (!v50) {
      goto LABEL_114;
    }
    swift_beginAccess();
    if (!MEMORY[0x22A692290](*(void *)(v50 + 16))) {
      goto LABEL_23;
    }
    int ParametersTypeForID = REMaterialParametersServiceGetParametersTypeForID();
    if (ParametersTypeForID == 2)
    {
      unint64_t v52 = (ValueMetadata *)type metadata accessor for PhysicallyBasedMaterialResource();
      uint64_t v53 = swift_allocObject();
      if (one-time initialization token for materialParametersService != -1) {
        swift_once();
      }
      uint64_t PbrParametersByID = REMaterialParametersServiceFindPbrParametersByID();
      if (!PbrParametersByID) {
        break;
      }
      *(void *)(v53 + 16) = PbrParametersByID;
      RERetain();
      uint64_t v55 = v114;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
      }
      unint64_t v57 = v55[2];
      unint64_t v56 = v55[3];
      unint64_t v58 = v57 + 1;
      if (v57 >= v56 >> 1) {
        uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v55);
      }
      int v14 = &protocol witness table for PhysicallyBasedMaterialResource;
      goto LABEL_22;
    }
    if (ParametersTypeForID != 1) {
      goto LABEL_120;
    }
    unint64_t v52 = (ValueMetadata *)type metadata accessor for UnlitMaterialResource();
    uint64_t v53 = swift_allocObject();
    if (one-time initialization token for materialParametersService != -1) {
      swift_once();
    }
    uint64_t UnlitParametersByID = REMaterialParametersServiceFindUnlitParametersByID();
    if (!UnlitParametersByID) {
      break;
    }
    *(void *)(v53 + 16) = UnlitParametersByID;
    RERetain();
    uint64_t v55 = v114;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
    }
    unint64_t v57 = v55[2];
    unint64_t v60 = v55[3];
    unint64_t v58 = v57 + 1;
    if (v57 >= v60 >> 1) {
      uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v57 + 1, 1, v55);
    }
    int v14 = &protocol witness table for UnlitMaterialResource;
LABEL_22:
    uint64_t v121 = v52;
    uint64_t v122 = v14;
    *(void *)&long long v120 = v53;
    v55[2] = v58;
    outlined init with take of BindableDataInternal(&v120, (uint64_t)&v55[5 * v57 + 4]);
    swift_release();
    uint64_t v114 = v55;
LABEL_23:
    if (MaterialCount == ++v10)
    {
      unint64_t v8 = v114;
      goto LABEL_110;
    }
  }
  swift_deallocPartialClassInstance();
LABEL_120:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ModelComponent.__toCore(_:returnStrongReference:)(uint64_t *a1, int a2)
{
  LODWORD(v127) = a2;
  uint64_t v123 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  uint64_t v124 = (char *)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1;
  uint64_t v8 = *(void *)v2;
  uint64_t v7 = *(void *)(v2 + 8);
  float v9 = *(float *)(v2 + 16);
  uint64_t Entity = REComponentGetEntity();
  id v11 = (id)REEntityGetSwiftObject();
  uint64_t v122 = Entity;
  uint64_t v120 = v4;
  uint64_t MaterialCount = v8;
  if (v11)
  {
    type metadata accessor for Entity();
    uint64_t v12 = swift_dynamicCastClassUnconditional();
LABEL_3:
    uint64_t v121 = v12;
    goto LABEL_7;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if (result)
  {
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
  uint64_t v14 = specialized static Entity.entityInfoType(_:)();
  if (!v14)
  {
    uint64_t v12 = makeEntity(for:)(Entity);
    goto LABEL_3;
  }
  uint64_t v15 = (*(uint64_t (**)(void))(v14 + 232))();
  uint64_t v16 = *(void *)(v15 + 16);
  swift_retain();
  MEMORY[0x22A68E750](v16, 0);
  *(void *)(v15 + 16) = Entity;
  MEMORY[0x22A68E750](Entity, v15);
  uint64_t v121 = v15;
  swift_release();
LABEL_7:
  unint64_t v17 = *(void *)(v7 + 16);
  uint64_t v18 = (void *)MEMORY[0x263F8EE78];
  uint64_t v125 = v6;
  uint64_t v134 = v7;
  unint64_t v135 = v17;
  if (!v17)
  {
    if (!*(void *)(MEMORY[0x263F8EE78] + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
LABEL_25:
    uint64_t v34 = v18[4];
    uint64_t v35 = v18[5];
    LODWORD(v136) = *((unsigned __int8 *)v18 + 48);
    uint64_t v37 = (long long *)v18[7];
    int v36 = (void *)v18[8];
    uint64_t v39 = v18[9];
    uint64_t v38 = v18[10];
    *(void *)&long long v133 = v18[11];
    LODWORD(v132) = *((unsigned __int8 *)v18 + 96);
    char v40 = *((unsigned char *)v18 + 97);
    uint64_t v131 = v18[13];
    char v41 = *((unsigned char *)v18 + 112);
    swift_bridgeObjectRetain();
    id v42 = v36;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v141 = &type metadata for VideoMaterial;
    uint64_t v142 = &protocol witness table for VideoMaterial;
    uint64_t v43 = swift_allocObject();
    uint64_t v139 = v43;
    *(void *)(v43 + 16) = v34;
    *(void *)(v43 + 24) = v35;
    *(unsigned char *)(v43 + 32) = v136;
    *(void *)(v43 + 40) = v37;
    *(void *)(v43 + 48) = v42;
    *(void *)(v43 + 56) = v39;
    *(void *)(v43 + 64) = v38;
    *(void *)(v43 + 72) = v133;
    *(unsigned char *)(v43 + 80) = v132;
    *(unsigned char *)(v43 + 81) = v40;
    *(void *)(v43 + 88) = v131;
    *(unsigned char *)(v43 + 96) = v41;
    *(void *)&v137[0] = v39;
    outlined init with copy of __REAssetService((uint64_t)&v139, (uint64_t)v137 + 8);
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of ModelComponent.__toCore(_:returnStrongReference:));
    uint64_t v45 = v44;
    uint64_t v136 = v34;
    swift_retain();
    *(void *)&long long v133 = v35;
    swift_bridgeObjectRetain();
    uint64_t v128 = v37;
    swift_bridgeObjectRetain();
    *(void *)&long long v130 = v42;
    swift_retain_n();
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
    *(void *)&v137[3] = v45;
    v138[0] = v137[0];
    v138[1] = v137[1];
    void v138[2] = v137[2];
    *(void *)&v138[3] = v45;
    uint64_t v46 = v121;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v138);
    outlined destroy of BodyTrackingComponent?((uint64_t)v138, &demangling cache variable for type metadata for VideoComponent?);
    swift_release();
    __VideoResource.addEntity(_:)(v46);
    uint64_t v131 = v38;
    uint64_t v47 = (uint64_t *)(v39 + 24);
    swift_beginAccess();
    uint64_t v132 = v39;
    unint64_t v48 = *(void *)(v39 + 24);
    *(void *)&v138[0] = MEMORY[0x263F8EE78];
    if (v48 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v49 = result;
      if (result) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v49 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v49)
      {
LABEL_27:
        if (v49 < 1)
        {
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        for (uint64_t i = 0; i != v49; ++i)
        {
          if ((v48 & 0xC000000000000001) != 0) {
            MEMORY[0x22A689930](i, v48);
          }
          else {
            swift_retain();
          }
          uint64_t Strong = swift_weakLoadStrong();
          swift_release();
          if (Strong)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v52 = *(void *)&v138[0];
LABEL_42:
        *uint64_t v47 = v52;
        swift_bridgeObjectRelease();
        uint64_t v53 = *v47;
        if ((unint64_t)*v47 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t result = _CocoaArrayWrapper.endIndex.getter();
          uint64_t v54 = result;
          if (result)
          {
LABEL_44:
            if (v54 >= 1)
            {
              for (uint64_t j = 0; j != v54; ++j)
              {
                if ((v53 & 0xC000000000000001) != 0) {
                  MEMORY[0x22A689930](j, v53);
                }
                else {
                  swift_retain();
                }
                if (swift_weakLoadStrong())
                {
                  REVideoComponentGetComponentType();
                  if (REEntityGetComponentByClass())
                  {
                    REVideoComponentSetDesiredViewingMode();
                    RENetworkMarkComponentDirty();
                  }
                  swift_release();
                }
                swift_release();
              }
              goto LABEL_56;
            }
            goto LABEL_148;
          }
        }
        else
        {
          uint64_t v54 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t result = swift_bridgeObjectRetain();
          if (v54) {
            goto LABEL_44;
          }
        }
LABEL_56:
        swift_bridgeObjectRelease();
        uint64_t v56 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v56, (uint64_t)v138);
        uint64_t v57 = *((void *)&v138[1] + 1);
        uint64_t v58 = *(void *)&v138[2];
        __swift_project_boxed_opaque_existential_1(v138, *((uint64_t *)&v138[1] + 1));
        (*(void (**)(uint64_t, uint64_t))(v58 + 32))(v57, v58);
        REAssetManagerPreloadVideoAssetOnce();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
        uint64_t v6 = v125;
        goto LABEL_57;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v52 = MEMORY[0x263F8EE78];
    goto LABEL_42;
  }
  uint64_t v19 = v7 + 32;
  swift_bridgeObjectRetain();
  LODWORD(v136) = 0;
  do
  {
    outlined init with copy of __REAssetService(v19, (uint64_t)v137);
    outlined init with copy of __REAssetService((uint64_t)v137, (uint64_t)&v139);
    if (v136)
    {
      LODWORD(v136) = 1;
    }
    else
    {
      uint64_t v21 = v18;
      int v22 = v141;
      uint64_t v23 = v142;
      __swift_project_boxed_opaque_existential_1(&v139, (uint64_t)v141);
      uint64_t v24 = v22;
      uint64_t v18 = v21;
      LODWORD(v136) = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v23[18])(v24, v23);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
    outlined init with copy of __REAssetService((uint64_t)v137, (uint64_t)v143);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
    if ((swift_dynamicCast() & 1) == 0) {
      memset(v138, 0, 81);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
    if (*(void *)&v138[0])
    {
      long long v133 = v138[0];
      char v25 = v138[1];
      uint64_t v26 = *((void *)&v138[1] + 1);
      long long v130 = v138[2];
      long long v27 = v138[3];
      __int16 v28 = v138[4];
      uint64_t v132 = *((void *)&v138[4] + 1);
      LODWORD(v131) = LOBYTE(v138[5]);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      }
      unint64_t v30 = v18[2];
      unint64_t v29 = v18[3];
      uint64_t v31 = v18;
      long long v32 = v133;
      if (v30 >= v29 >> 1)
      {
        uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v18);
        long long v32 = v133;
        uint64_t v31 = v33;
      }
      uint64_t v31[2] = v30 + 1;
      uint64_t v18 = v31;
      uint64_t v20 = &v31[11 * v30];
      *((_OWORD *)v20 + 2) = v32;
      *((unsigned char *)v20 + 48) = v25 & 1;
      v20[7] = v26;
      *((_OWORD *)v20 + 4) = v130;
      *((_OWORD *)v20 + 5) = v27;
      *((unsigned char *)v20 + 96) = v28 & 1;
      *((unsigned char *)v20 + 97) = HIBYTE(v28) & 1;
      v20[13] = v132;
      *((unsigned char *)v20 + 112) = v131 & 1;
      uint64_t v6 = v125;
    }
    v19 += 40;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  if (v18[2]) {
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  if ((v136 & 1) == 0)
  {
LABEL_38:
    memset(v138, 0, 56);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v138);
    outlined destroy of BodyTrackingComponent?((uint64_t)v138, &demangling cache variable for type metadata for VideoComponent?);
    swift_release();
  }
LABEL_57:
  uint64_t Mesh = REMeshComponentGetMesh();
  uint64_t v60 = *(void *)(MaterialCount + 16);
  if (!v60)
  {
    REMeshComponentSetMesh();
    BOOL v62 = Mesh == 0;
LABEL_75:
    uint64_t v64 = v134;
    goto LABEL_76;
  }
  REMeshComponentSetMesh();
  if (Mesh) {
    BOOL v61 = Mesh == v60;
  }
  else {
    BOOL v61 = 0;
  }
  BOOL v62 = v61;
  if (REMeshAssetGetTotalSkeletonCount() >= 1)
  {
    REMeshDeformationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESkeletalPoseComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RERigComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  REMeshDeformationComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  uint64_t v64 = v134;
  if (!ComponentByClass)
  {
    uint64_t result = REMeshAssetGetModelCount();
    if ((result & 0x8000000000000000) == 0)
    {
      uint64_t v65 = result;
      if (result)
      {
        if (REMeshAssetGetBlendShapeGroupCount() > 0)
        {
LABEL_73:
          REMeshDeformationComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
        }
        else
        {
          uint64_t v66 = 1;
          while (v65 != v66)
          {
            uint64_t v67 = v66 + 1;
            uint64_t BlendShapeGroupCount = REMeshAssetGetBlendShapeGroupCount();
            uint64_t v66 = v67;
            if (BlendShapeGroupCount > 0) {
              goto LABEL_73;
            }
          }
        }
      }
      goto LABEL_75;
    }
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
    return result;
  }
LABEL_76:
  REMeshComponentGetBoundsMargin();
  float v70 = v69;
  REMeshComponentSetBoundsMargin();
  int v71 = v70 != v9 || !v62;
  REMaterialParameterBlockArrayComponentGetComponentType();
  uint64_t v131 = REEntityGetOrAddComponentByClass();
  uint64_t v72 = REMaterialParameterBlockArrayComponentSize();
  uint64_t v73 = *(void *)(v64 + 16);
  if (v72 != v73) {
    REMaterialParameterBlockArrayComponentResize();
  }
  if (v73 < REMeshComponentGetMaterialCount())
  {
    REMeshComponentRemoveAllMaterials();
    int v71 = 1;
  }
  LODWORD(v132) = v71;
  uint64_t MaterialCount = REMeshComponentGetMaterialCount();
  REMaterialRenderStateArrayComponentGetComponentType();
  uint64_t v74 = REEntityGetComponentByClass();
  REMaterialRenderStateArrayComponentGetComponentType();
  *(void *)&long long v130 = REEntityGetOrAddComponentByClass();
  uint64_t v75 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  uint64_t result = outlined init with copy of __RenderService?(v75, (uint64_t)v137);
  if (!*((void *)&v137[1] + 1)) {
    goto LABEL_151;
  }
  LODWORD(v136) = v74 == 0;
  outlined init with take of BindableDataInternal(v137, (uint64_t)v138);
  uint64_t v76 = *((void *)&v138[1] + 1);
  uint64_t v77 = *(void *)&v138[2];
  __swift_project_boxed_opaque_existential_1(v138, *((uint64_t *)&v138[1] + 1));
  (*(void (**)(uint64_t, uint64_t))(v77 + 24))(v76, v77);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
  *(void *)&long long v133 = v134 + 32;
  uint64_t v126 = (void (**)(char *, uint64_t))v137 + 1;
  uint64_t v128 = (_OWORD *)((char *)v138 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v78 = 0;
  unint64_t v79 = v135;
  while (1)
  {
    if (v78 == v79)
    {
      unint64_t v78 = v79;
      memset(v137, 0, 48);
    }
    else
    {
      if (v78 >= *(void *)(v134 + 16))
      {
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
        goto LABEL_147;
      }
      outlined init with copy of __REAssetService(v133 + 40 * v78, (uint64_t)&v140);
      *(void *)&v137[0] = v78;
      outlined init with take of BindableDataInternal(&v140, (uint64_t)v126);
      ++v78;
    }
    outlined init with take of (offset: Int, element: Material)?((uint64_t)v137, (uint64_t)v138);
    if (!*(void *)&v138[2]) {
      break;
    }
    Swift::Int v81 = *(void *)&v138[0];
    outlined init with take of BindableDataInternal(v128, (uint64_t)v137);
    if (v81 >= MaterialCount)
    {
      uint64_t v89 = *((void *)&v137[1] + 1);
      uint64_t v90 = *(void *)&v137[2];
      __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
      uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 136))(v89, v90);
      uint64_t v92 = *((void *)&v137[1] + 1);
      uint64_t v93 = *(void *)&v137[2];
      __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v93);
      swift_beginAccess();
      swift_release();
      if (v91) {
        REMeshComponentAddMaterialWithParameters();
      }
      else {
        REMeshComponentAddMaterial();
      }
      LODWORD(v132) = 1;
    }
    else
    {
      uint64_t MaterialAtIndex = REMeshComponentGetMaterialAtIndex();
      uint64_t v83 = v6;
      uint64_t v84 = *((void *)&v137[1] + 1);
      uint64_t v85 = *(void *)&v137[2];
      __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
      uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 136))(v84, v85);
      uint64_t v88 = *((void *)&v137[1] + 1);
      uint64_t v87 = *(void *)&v137[2];
      __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v88, v87);
      if (v86)
      {
        swift_beginAccess();
        swift_release();
        REMeshComponentSetMaterialWithParametersAtIndex();
        LODWORD(v132) = 1;
        uint64_t v6 = v83;
        unint64_t v79 = v135;
      }
      else
      {
        swift_beginAccess();
        swift_release();
        REMeshComponentSetMaterialAtIndex();
        outlined init with copy of __REAssetService((uint64_t)v137, (uint64_t)&v139);
        uint64_t v6 = v83;
        if (v132)
        {
          int v94 = 1;
        }
        else
        {
          uint64_t v95 = v141;
          uint64_t v96 = v142;
          __swift_project_boxed_opaque_existential_1(&v139, (uint64_t)v141);
          uint64_t v97 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v96[1])(v95, v96);
          swift_beginAccess();
          uint64_t v98 = *(void *)(v97 + 16);
          swift_release();
          if (MaterialAtIndex) {
            BOOL v99 = MaterialAtIndex == v98;
          }
          else {
            BOOL v99 = 0;
          }
          int v94 = !v99;
        }
        LODWORD(v132) = v94;
        unint64_t v79 = v135;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
      }
    }
    __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
    BOOL v80 = Material.syncMaterialRenderStateToCore(_:index:)((Swift::OpaquePointer)v130, v81);
    LODWORD(v136) = v136 | v80;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v100 = 0;
  while (1)
  {
    if (v100 == v79)
    {
      unint64_t v100 = v79;
      memset(v137, 0, 48);
    }
    else
    {
      if (v100 >= *(void *)(v134 + 16)) {
        goto LABEL_145;
      }
      outlined init with copy of __REAssetService(v133 + 40 * v100, (uint64_t)&v140);
      *(void *)&v137[0] = v100;
      outlined init with take of BindableDataInternal(&v140, (uint64_t)v137 + 8);
      ++v100;
    }
    outlined init with take of (offset: Int, element: Material)?((uint64_t)v137, (uint64_t)v138);
    if (!*(void *)&v138[2]) {
      break;
    }
    outlined init with take of BindableDataInternal((_OWORD *)((char *)v138 + 8), (uint64_t)v137);
    uint64_t v102 = *((void *)&v137[1] + 1);
    uint64_t v103 = *(void *)&v137[2];
    if (v127)
    {
      __swift_project_boxed_opaque_existential_1(v137, *((uint64_t *)&v137[1] + 1));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v103 + 16))(&v139, v102, v103);
      uint64_t v104 = v141;
      REMaterialParameterBlockArrayComponentReturnBlockValueAtIndex();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v137, *((uint64_t *)&v137[1] + 1));
      uint64_t v101 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v103 + 32))(&v139, v102, v103);
      REMaterialParameterBlockArrayComponentSetBlockValueAtIndex();
      v101(&v139, 0);
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
    unint64_t v79 = v135;
  }
  swift_bridgeObjectRelease();
  REDirectMaterialParametersArrayComponentGetComponentType();
  uint64_t v105 = REEntityGetOrAddComponentByClass();
  uint64_t v128 = (_OWORD *)((char *)v138 + 8);
  uint64_t MaterialCount = v105;
  uint64_t v126 = (void (**)(char *, uint64_t))(v120 + 8);
  uint64_t v127 = (uint64_t)v137 + 8;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v106 = 0;
  uint64_t v107 = &type metadata for CustomMaterial;
  if (v79) {
    goto LABEL_134;
  }
LABEL_137:
  unint64_t v106 = v79;
  memset(v138, 0, 48);
  while (1)
  {
    outlined init with take of (offset: Int, element: Material)?((uint64_t)v138, (uint64_t)&v139);
    if (!v142) {
      break;
    }
    uint64_t v108 = v139;
    outlined init with take of BindableDataInternal(&v140, (uint64_t)v143);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
    if (swift_dynamicCast())
    {
      uint64_t v109 = v107;
      memcpy(v138, v137, 0x14AuLL);
      uint64_t v110 = (void *)*((void *)&v138[5] + 1);
      int v111 = LOBYTE(v138[6]);
      unsigned __int8 v112 = *(void **)&v138[5];
      swift_beginAccess();
      if (v111)
      {
        if (v111 == 1)
        {
          outlined copy of CustomMaterial.CustomUniformsState(v112, v110, 1);
          id v113 = v112;
          id v114 = v110;
          if (REMaterialAssetHasGeometryModifierCustomParamsName()) {
            REDirectMaterialParametersArrayComponentSetData();
          }
          else {
            MEMORY[0x22A68DB70](MaterialCount, 1, v108);
          }
          if (REMaterialAssetHasSurfaceShaderCustomParamsName()) {
            REDirectMaterialParametersArrayComponentSetData();
          }
          else {
            MEMORY[0x22A68DB70](MaterialCount, 2, v108);
          }

          outlined consume of CustomMaterial.CustomUniformsState(v112, v110, 1);
        }
        else
        {
          Logger.init()();
          char v116 = Logger.logObject.getter();
          os_log_type_t v117 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v116, v117))
          {
            uint64_t v118 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v118 = 0;
            _os_log_impl(&dword_227DD2000, v116, v117, "Custom Uniforms buffer was invalid! This should not happen.", v118, 2u);
            MEMORY[0x22A696500](v118, -1, -1);
          }

          (*v126)(v124, v123);
        }
      }
      else
      {
        id v115 = v112;
        REMaterialAssetHasGeometryModifierCustomParamsName();
        REMaterialAssetHasSurfaceShaderCustomParamsName();
        REDirectMaterialParametersArrayComponentSetData();
        outlined consume of CustomMaterial.CustomUniformsState(v112, v110, 0);
      }
      uint64_t v107 = v109;
      uint64_t result = outlined destroy of CustomMaterial((uint64_t)v138);
      unint64_t v79 = v135;
      if (v106 == v135) {
        goto LABEL_137;
      }
    }
    else
    {
      memset(v137, 0, 330);
      outlined destroy of BodyTrackingComponent?((uint64_t)v137, &demangling cache variable for type metadata for CustomMaterial?);
      uint64_t result = MEMORY[0x22A68DB70](MaterialCount, 3, v108);
      if (v106 == v79) {
        goto LABEL_137;
      }
    }
LABEL_134:
    if (v106 >= *(void *)(v134 + 16)) {
      goto LABEL_146;
    }
    uint64_t v119 = (long long *)v127;
    outlined init with copy of __REAssetService(v133 + 40 * v106, v127);
    *(void *)&v138[0] = v106;
    outlined init with take of BindableDataInternal(v119, (uint64_t)v128);
    ++v106;
  }
  swift_bridgeObjectRelease();
  if (v132) {
    RENetworkMarkComponentDirty();
  }
  if (v136) {
    RENetworkMarkComponentDirty();
  }
  RENetworkMarkComponentDirty();
  RENetworkMarkComponentDirty();
  return swift_release();
}

uint64_t ModelComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0[1];
  int v10 = *((_DWORD *)v0 + 4);
  uint64_t v17 = *v0;
  uint64_t v9 = v17;
  uint64_t v18 = v8;
  int v19 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22831E360;
  *(void *)(v11 + 32) = 1752393069;
  *(void *)(v11 + 40) = 0xE400000000000000;
  uint64_t v12 = type metadata accessor for MeshResource();
  *(void *)(v11 + 48) = v9;
  *(void *)(v11 + 72) = v12;
  *(void *)(v11 + 80) = 0x6C6169726574616DLL;
  *(void *)(v11 + 88) = 0xE900000000000073;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Material]);
  *(void *)(v11 + 96) = v8;
  *(void *)(v11 + 120) = v13;
  strcpy((char *)(v11 + 128), "boundsMargin");
  *(unsigned char *)(v11 + 141) = 0;
  *(_WORD *)(v11 + 142) = -5120;
  *(void *)(v11 + 168) = MEMORY[0x263F8D5C8];
  *(_DWORD *)(v11 + 144) = v10;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void outlined consume of CustomMaterial.CustomUniformsState?(void *a1, void *a2, char a3)
{
  if (a3 != -1) {
    outlined consume of CustomMaterial.CustomUniformsState(a1, a2, a3);
  }
}

uint64_t sub_2280B52A0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 97, 7);
}

uint64_t outlined init with take of (offset: Int, element: Material)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Material)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

float sub_2280B5368@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 16);
  *a2 = result;
  return result;
}

float sub_2280B5374(float *a1, uint64_t a2)
{
  float result = *a1;
  *(float *)(a2 + 16) = *a1;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ModelComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ModelComponent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for ModelComponent()
{
  return &type metadata for ModelComponent;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s6UInt32Vs5NeverOTg506_sSis6d12VIgyd_SiABs5e184OIegnrzr_TR0166_s10RealityKit12MeshResourceC0A10FoundationE8SkeletonV2id10jointNames15inverseBindPose09localRestL013parentIndicesAFSS_SaySSGSaySo13simd_float4x4aGSayAA9TransformVGSgu21I43GSgtKcfc0H13IndexToA11L_ys0V0VSiFTf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (unint64_t *)(a1 + 32);
    do
    {
      unint64_t v6 = *v4++;
      unint64_t v5 = v6;
      if ((v6 & 0x8000000000000000) != 0)
      {
        LODWORD(v5) = -1;
      }
      else if (HIDWORD(v5))
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(_DWORD *)(result + 4 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit9TransformVG_So5RESRTas5NeverOTg504_s10d142Kit12MeshResourceC0A10FoundationE8SkeletonV2id10jointNames15inverseBindPose09localRestL013parentIndicesAFSS_SaySSGSaySo13simd_float4x4aGSayAA9f4VGSgZ74SiGSgtKcfcSo5RESRTaAQcfu2_33_00c2e038d769be1530659e2383c6619cAqWTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v14;
    uint64_t v4 = (long long *)(a1 + 64);
    do
    {
      long long v5 = *(v4 - 2);
      long long v6 = *(v4 - 1);
      long long v7 = *v4;
      uint64_t v15 = result;
      unint64_t v9 = *(void *)(result + 16);
      unint64_t v8 = *(void *)(result + 24);
      if (v9 >= v8 >> 1)
      {
        long long v12 = *(v4 - 1);
        long long v13 = *(v4 - 2);
        long long v11 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        long long v7 = v11;
        long long v6 = v12;
        long long v5 = v13;
        uint64_t result = v15;
      }
      *(void *)(result + 16) = v9 + 1;
      uint64_t v10 = (_OWORD *)(result + 48 * v9);
      v10[2] = v5;
      void v10[3] = v6;
      _DWORD v10[4] = v7;
      v4 += 3;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_SSs5NeverOTg504_s10d5Kit12fg5C0A10h2E8i36V04makeF3Defs13OpaquePointerVyFSSAF5J53Vcfu_32ff38342fabfe801430b9473eed3cf0a7AKSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v4 += 18;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_s6UInt32Vs5NeverOTg504_s10d5Kit12fg5C0A10h2E8i2V5j3Vs6k11VIgnd_AhJs5l27OIegnrzr_TR04_s10a5Kit12cd5O84A10e2E8f46V04makeF3Defs13OpaquePointerVyF19parentIndexAsh11L_ys0N0VAF5G2VFTf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v8;
    uint64_t v4 = (unsigned char *)(a1 + 56);
    do
    {
      if (*v4)
      {
        LODWORD(v5) = -1;
      }
      else
      {
        unint64_t v5 = *((void *)v4 - 1);
        if ((v5 & 0x8000000000000000) != 0 || HIDWORD(v5))
        {
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
      }
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 16);
      unint64_t v6 = *(void *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v7 + 1;
      *(_DWORD *)(result + 4 * v7 + 32) = v5;
      v4 += 144;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_So13simd_float4x4as5NeverOTg504_s10d5Kit12fg5C0A10h2E8i52V04makeF3Defs13OpaquePointerVyFSo13simd_float4x4aAF5J54Vcfu0_33_0726f9e9ce90d24234b92dbbc5354476AmKTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v16;
    uint64_t v4 = (long long *)(a1 + 112);
    do
    {
      long long v5 = *(v4 - 3);
      long long v6 = *(v4 - 2);
      long long v7 = *(v4 - 1);
      long long v8 = *v4;
      uint64_t v17 = result;
      unint64_t v10 = *(void *)(result + 16);
      unint64_t v9 = *(void *)(result + 24);
      if (v10 >= v9 >> 1)
      {
        long long v14 = *(v4 - 2);
        long long v15 = *(v4 - 3);
        long long v12 = *v4;
        long long v13 = *(v4 - 1);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        long long v8 = v12;
        long long v7 = v13;
        long long v6 = v14;
        long long v5 = v15;
        uint64_t result = v17;
      }
      *(void *)(result + 16) = v10 + 1;
      uint64_t v11 = (_OWORD *)(result + (v10 << 6));
      void v11[2] = v5;
      v11[3] = v6;
      _OWORD v11[4] = v7;
      uint64_t v11[5] = v8;
      v4 += 9;
      --v2;
    }
    while (v2);
  }
  return result;
}

unsigned char *MeshResource._Proto_LevelOptions_v1.init(levelStrategy:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t specialized MeshBufferDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  outlined init with take of Transform?(a1, (uint64_t)&v23, &demangling cache variable for type metadata for MeshBuffer<MeshJointInfluence>?);
  uint64_t v8 = v23;
  if (v23)
  {
    long long v17 = v25;
    long long v18 = v24;
    long long v16 = v26;
    uint64_t v15 = v27;
    char v9 = v28;
    char v10 = v29;
    uint64_t v11 = v30;
    char v19 = v31;
    *((void *)&v21 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<MeshJointInfluence>);
    int v22 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    uint64_t v12 = swift_allocObject();
    *(void *)&long long v20 = v12;
    swift_bridgeObjectRetain_n();
    outlined retain of MeshBuffer<MeshJointInfluence>?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of MeshBuffer<SIMD3<Float>>?);
    if (one-time initialization token for triangleIndices != -1) {
      swift_once();
    }
    char v13 = 2;
    if (static MeshBuffers.Identifier.triangleIndices != a2 || unk_2681C1CD0 != a3)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        char v13 = 2;
      }
      else {
        char v13 = v19;
      }
    }
    *(void *)(v12 + 16) = a2;
    *(void *)(v12 + 24) = a3;
    *(unsigned char *)(v12 + 32) = a4 & 1;
    *(unsigned char *)(v12 + 33) = HIBYTE(a4) & 1;
    *(void *)(v12 + 40) = v11;
    *(unsigned char *)(v12 + 48) = v13;
    *(unsigned char *)(v12 + 49) = v9;
    *(unsigned char *)(v12 + 50) = v10;
    *(void *)(v12 + 56) = v8;
    *(_OWORD *)(v12 + 64) = v18;
    *(_OWORD *)(v12 + 80) = v17;
    *(_OWORD *)(v12 + 96) = v16;
    *(void *)(v12 + 112) = v15;
    *(unsigned char *)(v12 + 120) = v9;
    *(unsigned char *)(v12 + 121) = v10;
    *(void *)(v12 + 128) = v11;
    *(unsigned char *)(v12 + 136) = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v20, a2, a3, a4 & 0x101);
    outlined retain of MeshBuffer<MeshJointInfluence>?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of MeshBuffer<SIMD3<Float>>?);
    return swift_bridgeObjectRelease();
  }
  else
  {
    int v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    return specialized Dictionary.subscript.setter((uint64_t)&v20, a2, a3, a4 & 0x101);
  }
}

double MeshResource.Part.triangleIndices.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (*(void *)(v3 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6972547865646E69, 0xEE0073656C676E61, 0), (v5 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(void *)(v3 + 56) + 40 * v4, (uint64_t)v9);
    outlined init with take of BindableDataInternal(v9, (uint64_t)v10);
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(void, uint64_t, uint64_t))(v7 + 56))(MEMORY[0x263F8E8F8], v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    *(unsigned char *)(a1 + 80) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t MeshResource.Part.buffers.getter()
{
  return specialized _NativeDictionary.mapValues<A>(_:)(*v0);
}

uint64_t MeshResource.Part.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized MeshResource.Part.subscript.setter(a1, a2, a3);
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v5(a2, a3);
}

uint64_t MeshResource.Part.skeletonID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t MeshResource.Skeleton.init(id:jointNames:inverseBindPose:localRestPose:parentIndices:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10 = a4;
  uint64_t v11 = a3;
  unint64_t v12 = a2;
  uint64_t v54 = a1;
  *(void *)&long long v55 = a2;
  *((void *)&v55 + 1) = MEMORY[0x263F8EE78];
  int64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = *(void *)(a4 + 16);
  swift_bridgeObjectRetain();
  if (v15 != v16)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)logger);
    swift_bridgeObjectRetain();
    char v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v56 = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v12, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227DD2000, v31, v32, "Expected all joint arrays for skeleton '%s' to have the same count", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v34, -1, -1);
      MEMORY[0x22A696500](v33, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *char v41 = xmmword_2283349E0;
    swift_willThrow();
LABEL_25:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v48 = v7;
  uint64_t v49 = a1;
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0, MEMORY[0x263F8EE78]);
  *((void *)&v55 + 1) = result;
  unint64_t v18 = *(void *)(v11 + 16);
  if (!v18)
  {
LABEL_15:
    uint64_t v35 = MEMORY[0x263F8EE78];
    if (a6) {
      uint64_t v36 = a6;
    }
    else {
      uint64_t v36 = MEMORY[0x263F8EE78];
    }
    uint64_t v37 = v10;
    uint64_t v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s6UInt32Vs5NeverOTg506_sSis6d12VIgyd_SiABs5e184OIegnrzr_TR0166_s10RealityKit12MeshResourceC0A10FoundationE8SkeletonV2id10jointNames15inverseBindPose09localRestL013parentIndicesAFSS_SaySSGSaySo13simd_float4x4aGSayAA9TransformVGSgu21I43GSgtKcfc0H13IndexToA11L_ys0V0VSiFTf3nnnpf_nTf1cn_n(v36);
    swift_bridgeObjectRelease();
    if (a5) {
      uint64_t v39 = a5;
    }
    else {
      uint64_t v39 = v35;
    }
    uint64_t v40 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit9TransformVG_So5RESRTas5NeverOTg504_s10d142Kit12MeshResourceC0A10FoundationE8SkeletonV2id10jointNames15inverseBindPose09localRestL013parentIndicesAFSS_SaySSGSaySo13simd_float4x4aGSayAA9f4VGSgZ74SiGSgtKcfcSo5RESRTaAQcfu2_33_00c2e038d769be1530659e2383c6619cAqWTf3nnnpk_nTf1cn_n(v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    specialized static MeshResource.Skeleton.withValidatedSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:_:)(v49, v12, v11, v38, v37, v40, v11, (uint64_t)&v54);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    if (!v48)
    {
      *(void *)a7 = v54;
      *(_OWORD *)(a7 + 8) = v55;
      return result;
    }
    goto LABEL_25;
  }
  if (v18 <= *(void *)(v10 + 16))
  {
    char v19 = (void *)result;
    uint64_t v43 = a5;
    uint64_t v46 = a7;
    unint64_t v47 = v12;
    uint64_t v44 = v10;
    uint64_t v45 = v11;
    long long v20 = (uint64_t *)(v11 + 40);
    long long v21 = (long long *)(v10 + 80);
    do
    {
      uint64_t v22 = *(v20 - 1);
      uint64_t v23 = *v20;
      long long v52 = *(v21 - 2);
      long long v53 = *(v21 - 3);
      long long v50 = *v21;
      long long v51 = *(v21 - 1);
      uint64_t v24 = one-time initialization token for identity;
      swift_bridgeObjectRetain();
      if (v24 != -1) {
        swift_once();
      }
      long long v25 = static simd_quatf.identity;
      unint64_t v27 = v19[2];
      unint64_t v26 = v19[3];
      if (v27 >= v26 >> 1)
      {
        long long v42 = static simd_quatf.identity;
        char v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v19);
        long long v25 = v42;
        char v19 = v29;
      }
      _OWORD v19[2] = v27 + 1;
      char v28 = &v19[18 * v27];
      v28[4] = v22;
      v28[5] = v23;
      v28[6] = 0;
      *((unsigned char *)v28 + 56) = 1;
      *((_OWORD *)v28 + 4) = v53;
      *((_OWORD *)v28 + 5) = v52;
      *((_OWORD *)v28 + 6) = v51;
      *((_OWORD *)v28 + 7) = v50;
      *((_OWORD *)v28 + 8) = xmmword_22830EC80;
      *((_OWORD *)v28 + 9) = v25;
      v28[20] = 0;
      v28[21] = 0;
      v20 += 2;
      v21 += 4;
      --v18;
    }
    while (v18);
    *((void *)&v55 + 1) = v19;
    a7 = v46;
    unint64_t v12 = v47;
    uint64_t v10 = v44;
    uint64_t v11 = v45;
    a5 = v43;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t MeshResource.Part.jointInfluences.getter@<X0>(uint64_t a1@<X8>)
{
  void (*v24)(uint64_t *__return_ptr, void, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v27;
  char v28;
  long long v29;
  long long v30;
  char v31;
  uint64_t v32;
  long long v33;
  uint64_t v34;
  uint64_t v35;
  long long v36;
  long long v37;
  long long v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  long long v45;
  long long v46;
  long long v47;
  void v48[4];
  long long v49[2];
  uint64_t v50;
  long long v51;
  long long v52;
  long long v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 16))
  {
    uint64_t v4 = *((unsigned int *)v1 + 10);
    char v5 = *((unsigned char *)v1 + 44);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001FLL, 0x800000022834DB60, 0);
    if (v7)
    {
      outlined init with copy of __REAssetService(*(void *)(v3 + 56) + 40 * v6, (uint64_t)v49);
      outlined init with take of BindableDataInternal(v49, (uint64_t)&v35);
      long long v8 = v37;
      __swift_project_boxed_opaque_existential_1(&v35, v37);
      (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, void, void))(*((void *)&v8 + 1) + 56))(&v50, &type metadata for MeshJointInfluence, v8, *((void *)&v8 + 1));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = v50;
      if (v50)
      {
        uint64_t v11 = *((void *)&v51 + 1);
        uint64_t v10 = v51;
        uint64_t v13 = *((void *)&v52 + 1);
        uint64_t v12 = v52;
        uint64_t v15 = *((void *)&v53 + 1);
        uint64_t v14 = v53;
        uint64_t v16 = v54;
        uint64_t v17 = v56;
        char v18 = v57;
        char v19 = BYTE1(v55) & 1;
        if (*(void *)(v3 + 16))
        {
          char v28 = BYTE1(v55) & 1;
          char v29 = v51;
          uint64_t v30 = v52;
          char v31 = v57;
          os_log_type_t v32 = v56;
          uint64_t v33 = v53;
          uint64_t v34 = v54;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000023, 0x800000022834DB80, 0);
          if (v21)
          {
            outlined init with copy of __REAssetService(*(void *)(v3 + 56) + 40 * v20, (uint64_t)v49);
            outlined init with take of BindableDataInternal(v49, (uint64_t)&v35);
            unint64_t v27 = v4;
            uint64_t v23 = *((void *)&v37 + 1);
            uint64_t v22 = v37;
            __swift_project_boxed_opaque_existential_1(&v35, v37);
            uint64_t v24 = *(void (**)(uint64_t *__return_ptr, void, uint64_t, uint64_t))(v23 + 56);
            long long v25 = v23;
            uint64_t v4 = v27;
            v24(&v50, MEMORY[0x263F8E548], v22, v25);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v15 = *((void *)&v33 + 1);
            uint64_t v16 = v34;
            uint64_t v17 = v32;
            uint64_t v14 = v33;
            char v18 = v31;
            uint64_t v13 = *((void *)&v30 + 1);
            uint64_t v12 = v30;
            uint64_t v11 = *((void *)&v29 + 1);
            uint64_t v10 = v29;
            char v19 = v28;
            if (v50)
            {
              uint64_t v35 = v9;
              uint64_t v36 = v29;
              uint64_t v37 = v30;
              uint64_t v38 = v33;
              uint64_t v39 = v34;
              uint64_t v40 = BYTE8(v8);
              char v41 = v28;
              long long v42 = v32;
              uint64_t v43 = v31;
              uint64_t v44 = v50;
              uint64_t v45 = v51;
              uint64_t v46 = v52;
              unint64_t v47 = v53;
              v48[0] = v54;
              v48[1] = v55 & 0x1FF;
              v48[2] = v56;
              LOBYTE(v48[3]) = v57 | 0x80;
LABEL_15:
              destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(&v35, v10);
              return outlined init with take of Transform?((uint64_t)&v35, a1, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v15 = *((void *)&v33 + 1);
            uint64_t v16 = v34;
            uint64_t v17 = v32;
            uint64_t v14 = v33;
            char v18 = v31;
            uint64_t v13 = *((void *)&v30 + 1);
            uint64_t v12 = v30;
            uint64_t v11 = *((void *)&v29 + 1);
            uint64_t v10 = v29;
            char v19 = v28;
          }
        }
        if ((v5 & 1) == 0)
        {
          uint64_t v35 = v9;
          *(void *)&uint64_t v36 = v10;
          *((void *)&v36 + 1) = v11;
          *(void *)&uint64_t v37 = v12;
          *((void *)&v37 + 1) = v13;
          *(void *)&uint64_t v38 = v14;
          *((void *)&v38 + 1) = v15;
          uint64_t v39 = v16;
          uint64_t v40 = BYTE8(v8);
          char v41 = v19;
          long long v42 = v17;
          uint64_t v43 = v18;
          uint64_t v44 = v4;
          uint64_t v45 = 0u;
          uint64_t v46 = 0u;
          unint64_t v47 = 0u;
          memset(v48, 0, 25);
          goto LABEL_15;
        }
        outlined consume of MeshBuffer<SIMD3<Float>>?(v9);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  _s10RealityKit12MeshResourceC0A10FoundationE15JointInfluencesVSgWOi0_(&v35);
  return outlined init with take of Transform?((uint64_t)&v35, a1, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
}

uint64_t MeshResource.Part.skeletonID.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

double specialized MeshResource.Part.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  return specialized MeshResource.Part.subscript.getter(a1, a2, a3, (uint64_t)&type metadata for MeshJointInfluence, a4);
}

{
  return specialized MeshResource.Part.subscript.getter(a1, a2, a3, MEMORY[0x263F8E548], a4);
}

double specialized MeshResource.Part.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *v5;
  if (*(void *)(v7 + 16))
  {
    __int16 v11 = a3 & 0x101;
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, v11);
    if (v13)
    {
      outlined init with copy of __REAssetService(*(void *)(v7 + 56) + 40 * v12, (uint64_t)&v17);
      swift_bridgeObjectRelease();
      if (*((void *)&v18 + 1))
      {
        outlined init with take of BindableDataInternal(&v17, (uint64_t)v20);
        uint64_t v14 = v21;
        uint64_t v15 = v22;
        __swift_project_boxed_opaque_existential_1(v20, v21);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 56))(a4, v14, v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
        return result;
      }
    }
    else
    {
      uint64_t v19 = 0;
      long long v17 = 0u;
      long long v18 = 0u;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v17, &demangling cache variable for type metadata for MeshBufferErased?);
  *(unsigned char *)(a5 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  return result;
}

double MeshResource.Part.subscript.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return MeshBufferDictionary.subscript.getter(*v3, a1, a2, a3);
}

uint64_t MeshResource._Proto_ScreenAreaLevelStrategyData_v1.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t MeshResource._Proto_ViewDepthLevelStrategyData_v1.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 2139095040;
  return result;
}

unint64_t MeshResource.Part.init(id:materialIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a1;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = a2;
  *(_DWORD *)(a4 + 40) = 0;
  *(unsigned char *)(a4 + 44) = 1;
  *(void *)(a4 + 48) = a3;
  *(unsigned char *)(a4 + 56) = 0;
  return result;
}

uint64_t MeshModelCollection.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MeshModelCollection.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  char v5 = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_27:
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v3;
    a2[1] = v5;
    return result;
  }
  uint64_t v7 = (uint64_t *)(a1 + 72);
  while (1)
  {
    uint64_t v38 = v3;
    uint64_t v11 = *(v7 - 5);
    uint64_t v10 = *(v7 - 4);
    uint64_t v12 = *(v7 - 3);
    uint64_t v13 = *(v7 - 2);
    uint64_t v14 = *v7;
    uint64_t v41 = *(v7 - 1);
    uint64_t v15 = v5[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v16 = v11;
    swift_bridgeObjectRetain_n();
    uint64_t v40 = v14;
    swift_bridgeObjectRetain_n();
    uint64_t v39 = v11;
    if (v15)
    {
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      if (v18)
      {
        unint64_t v19 = *(void *)(v5[7] + 8 * v17);
        uint64_t v3 = v38;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if ((v19 & 0x8000000000000000) != 0) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v38);
          if ((v19 & 0x8000000000000000) != 0)
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        if (v19 >= v3[2]) {
          goto LABEL_30;
        }
        uint64_t v9 = &v3[6 * v19 + 9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(v9 - 5) = v39;
        *(v9 - 4) = v10;
        *(v9 - 3) = v12;
        *(v9 - 2) = v13;
        *(v9 - 1) = v41;
        goto LABEL_4;
      }
    }
    uint64_t v20 = v38[2];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v10);
    uint64_t v24 = v5[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    char v27 = v22;
    if (v5[3] >= v26)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v10);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_31;
      }
      unint64_t v23 = v28;
    }
    uint64_t v3 = v38;
    if (v27)
    {
      *(void *)(v5[7] + 8 * v23) = v20;
    }
    else
    {
      v5[(v23 >> 6) + 8] |= 1 << v23;
      uint64_t v30 = (uint64_t *)(v5[6] + 16 * v23);
      *uint64_t v30 = v39;
      v30[1] = v10;
      *(void *)(v5[7] + 8 * v23) = v20;
      uint64_t v31 = v5[2];
      BOOL v32 = __OFADD__(v31, 1);
      uint64_t v33 = v31 + 1;
      if (v32) {
        goto LABEL_29;
      }
      void v5[2] = v33;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
    }
    unint64_t v35 = v3[2];
    unint64_t v34 = v3[3];
    if (v35 >= v34 >> 1) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v3);
    }
    v3[2] = v35 + 1;
    long long v8 = &v3[6 * v35];
    _OWORD v8[4] = v39;
    uint64_t v8[5] = v10;
    void v8[6] = v12;
    v8[7] = v13;
    long long v8[8] = v41;
    uint64_t v9 = v8 + 9;
LABEL_4:
    v7 += 6;
    *uint64_t v9 = v40;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (!--v6) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized OrderedIdentifiableCollection.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v33, &demangling cache variable for type metadata for MeshResource.Model?);
  uint64_t v8 = v33[0];
  uint64_t v7 = v33[1];
  uint64_t v10 = v33[2];
  uint64_t v9 = v33[3];
  uint64_t v12 = v33[4];
  uint64_t v11 = v33[5];
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v34, &demangling cache variable for type metadata for MeshResource.Model?);
  if (v35)
  {
    uint64_t v30 = v8;
    uint64_t v13 = v3[1];
    uint64_t v14 = *(void *)(v13 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v14 || (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v16 & 1) == 0))
    {
      uint64_t v21 = *(void *)(*v4 + 16);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v32 = v4[1];
      v4[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, a2, a3, isUniquelyReferenced_nonNull_native);
      v4[1] = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v18 = (void *)*v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      }
      unint64_t v24 = v18[2];
      unint64_t v23 = v18[3];
      if (v24 >= v23 >> 1) {
        char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v18);
      }
      void v18[2] = v24 + 1;
      BOOL v25 = &v18[6 * v24];
      v25[4] = v30;
      v25[5] = v7;
      v25[6] = v10;
      v25[7] = v9;
      v25[8] = v12;
      v25[9] = v11;
      goto LABEL_14;
    }
    unint64_t v17 = *(void *)(*(void *)(v13 + 56) + 8 * v15);
    char v18 = (void *)*v4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      char v18 = (void *)result;
    }
    if ((v17 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v17 < v18[2])
    {
      uint64_t v20 = &v18[6 * v17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20[4] = v30;
      _OWORD v20[5] = v7;
      v20[6] = v10;
      v20[7] = v9;
      v20[8] = v12;
      v20[9] = v11;
LABEL_14:
      swift_bridgeObjectRelease();
      outlined release of MeshResource.Model?(a1);
      uint64_t result = (uint64_t)outlined release of MeshResource.Model?(a1);
      *uint64_t v4 = v18;
      return result;
    }
    __break(1u);
  }
  else
  {
    uint64_t v26 = v3[1];
    if (*(void *)(v26 + 16) && (unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v28 & 1) != 0))
    {
      unint64_t v29 = *(void *)(*(void *)(v26 + 56) + 8 * v27);
      specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      specialized Array.remove(at:)(v29, (uint64_t)&v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  void *v18;
  uint64_t result;
  void *v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void v35[7];
  char v36;
  void v37[9];

  uint64_t v4 = v3;
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v35, &demangling cache variable for type metadata for MeshResource.Part?);
  uint64_t v8 = v35[0];
  uint64_t v9 = v35[2];
  uint64_t v31 = v35[1];
  uint64_t v32 = v35[3];
  uint64_t v10 = v35[4];
  uint64_t v11 = v35[5];
  uint64_t v33 = v35[6];
  uint64_t v12 = v36;
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v37, &demangling cache variable for type metadata for MeshResource.Part?);
  if (v37[0])
  {
    uint64_t v30 = v12 & 1;
    uint64_t v13 = v3[1];
    uint64_t v14 = *(void *)(v13 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v14 || (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v16 & 1) == 0))
    {
      uint64_t v21 = *(void *)(*v4 + 16);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v34 = v4[1];
      v4[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, a2, a3, isUniquelyReferenced_nonNull_native);
      v4[1] = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v18 = (void *)*v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      }
      unint64_t v24 = v18[2];
      unint64_t v23 = v18[3];
      if (v24 >= v23 >> 1) {
        char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v18);
      }
      void v18[2] = v24 + 1;
      BOOL v25 = &v18[8 * v24];
      v25[4] = v8;
      v25[5] = v31;
      v25[6] = v9;
      v25[7] = v32;
      v25[8] = v10;
      *((_DWORD *)v25 + 18) = v11;
      *((unsigned char *)v25 + 76) = BYTE4(v11) & 1;
      v25[10] = v33;
      *((unsigned char *)v25 + 88) = v30;
      goto LABEL_13;
    }
    unint64_t v17 = *(void *)(*(void *)(v13 + 56) + 8 * v15);
    char v18 = (void *)*v4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if ((v17 & 0x8000000000000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      char v18 = (void *)result;
      if ((v17 & 0x8000000000000000) == 0)
      {
LABEL_6:
        if (v17 < v18[2])
        {
          uint64_t v20 = &v18[8 * v17];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v20[4] = v8;
          _OWORD v20[5] = v31;
          v20[6] = v9;
          v20[7] = v32;
          v20[8] = v10;
          *((_DWORD *)v20 + 18) = v11;
          *((unsigned char *)v20 + 76) = BYTE4(v11) & 1;
          v20[10] = v33;
          *((unsigned char *)v20 + 88) = v30;
LABEL_13:
          swift_bridgeObjectRelease();
          outlined release of MeshResource.Part?(a1);
          uint64_t result = (uint64_t)outlined release of MeshResource.Part?(a1);
          *uint64_t v4 = v18;
          return result;
        }
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v26 = v3[1];
  if (*(void *)(v26 + 16))
  {
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v28)
    {
      unint64_t v29 = *(void *)(*(void *)(v26 + 56) + 8 * v27);
      specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      specialized Array.remove(at:)(v29, (uint64_t)&v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  void *v18;
  uint64_t result;
  void *v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void v41[12];
  char v42;
  unsigned char v43[8];
  uint64_t v44;

  uint64_t v4 = v3;
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v41, &demangling cache variable for type metadata for MeshResource.Instance?);
  uint64_t v9 = v41[0];
  uint64_t v8 = v41[1];
  uint64_t v10 = v41[3];
  uint64_t v32 = v41[2];
  uint64_t v33 = v41[5];
  unint64_t v34 = v41[7];
  uint64_t v35 = v41[4];
  uint64_t v11 = v41[10];
  uint64_t v36 = v41[9];
  uint64_t v37 = v41[6];
  uint64_t v38 = v41[11];
  uint64_t v39 = v41[8];
  uint64_t v12 = v42;
  outlined init with take of Transform?((uint64_t)a1, (uint64_t)v43, &demangling cache variable for type metadata for MeshResource.Instance?);
  if (v44)
  {
    uint64_t v31 = v12 & 1;
    uint64_t v13 = v3[1];
    uint64_t v14 = *(void *)(v13 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v14 || (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v16 & 1) == 0))
    {
      uint64_t v21 = *(void *)(*v4 + 16);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v40 = v4[1];
      v4[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, a2, a3, isUniquelyReferenced_nonNull_native);
      v4[1] = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v18 = (void *)*v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      }
      unint64_t v24 = v18[2];
      unint64_t v23 = v18[3];
      if (v24 >= v23 >> 1) {
        char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v18);
      }
      void v18[2] = v24 + 1;
      BOOL v25 = &v18[14 * v24];
      v25[4] = v9;
      v25[5] = v8;
      v25[6] = v32;
      v25[7] = v10;
      v25[8] = v35;
      v25[9] = v33;
      v25[10] = v37;
      v25[11] = v34;
      v25[12] = v39;
      v25[13] = v36;
      v25[14] = v11;
      v25[15] = v38;
      *((unsigned char *)v25 + 128) = v31;
      goto LABEL_13;
    }
    unint64_t v17 = *(void *)(*(void *)(v13 + 56) + 8 * v15);
    char v18 = (void *)*v4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if ((v17 & 0x8000000000000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      char v18 = (void *)result;
      if ((v17 & 0x8000000000000000) == 0)
      {
LABEL_6:
        uint64_t v30 = v11;
        if (v17 < v18[2])
        {
          uint64_t v20 = &v18[14 * v17];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v20[4] = v9;
          _OWORD v20[5] = v8;
          v20[6] = v32;
          v20[7] = v10;
          v20[8] = v35;
          v20[9] = v33;
          v20[10] = v37;
          v20[11] = v34;
          v20[12] = v39;
          v20[13] = v36;
          v20[14] = v30;
          v20[15] = v38;
          *((unsigned char *)v20 + 128) = v31;
LABEL_13:
          swift_bridgeObjectRelease();
          outlined release of MeshResource.Instance?(a1);
          uint64_t result = (uint64_t)outlined release of MeshResource.Instance?(a1);
          *uint64_t v4 = v18;
          return result;
        }
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v26 = v3[1];
  if (*(void *)(v26 + 16))
  {
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v28)
    {
      unint64_t v29 = *(void *)(*(void *)(v26 + 56) + 8 * v27);
      specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      specialized Array.remove(at:)(v29, (uint64_t)&v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized OrderedIdentifiableCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  outlined init with copy of (Int, URL)(a1, (uint64_t)&v28, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
  if (*((void *)&v28 + 1))
  {
    v34[2] = v30;
    v34[3] = v31;
    v34[4] = v32;
    v34[5] = v33;
    v34[0] = v28;
    v34[1] = v29;
    uint64_t v8 = v3[1];
    if (!*(void *)(v8 + 16) || (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v10 & 1) == 0))
    {
      uint64_t v15 = *(void *)(*v4 + 16);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v28 = v4[1];
      v4[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, a2, a3, isUniquelyReferenced_nonNull_native);
      v4[1] = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)v34, (uint64_t)&v28);
      uint64_t v14 = (void *)*v4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      }
      unint64_t v18 = v14[2];
      unint64_t v17 = v14[3];
      if (v18 >= v17 >> 1) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v14);
      }
      void v14[2] = v18 + 1;
      unint64_t v19 = &v14[12 * v18];
      long long v20 = v29;
      _OWORD v19[2] = v28;
      uint64_t v19[3] = v20;
      long long v21 = v30;
      long long v22 = v31;
      long long v23 = v33;
      v19[6] = v32;
      v19[7] = v23;
      v19[4] = v21;
      uint64_t v19[5] = v22;
      goto LABEL_13;
    }
    unint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    uint64_t v12 = (void *)*v4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v4 = (uint64_t)v12;
    if (result)
    {
      if ((v11 & 0x8000000000000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
      uint64_t v12 = (void *)result;
      *uint64_t v4 = result;
      if ((v11 & 0x8000000000000000) == 0)
      {
LABEL_6:
        if (v11 < v12[2])
        {
          outlined assign with copy of MeshResource._Proto_Level_v1(v34, &v12[12 * v11 + 4]);
          uint64_t v14 = (void *)*v4;
LABEL_13:
          swift_bridgeObjectRelease();
          *uint64_t v4 = (uint64_t)v14;
LABEL_14:
          outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
          return outlined destroy of MeshResource._Proto_Level_v1((uint64_t)v34);
        }
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v28, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
  uint64_t v24 = v3[1];
  if (*(void *)(v24 + 16))
  {
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v26)
    {
      unint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
      specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      specialized Array.remove(at:)(v27, v34);
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
}

uint64_t specialized OrderedIdentifiableCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (a2)
  {
    uint64_t v12 = v5[1];
    uint64_t v13 = *(void *)(v12 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v13 || (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5), (v15 & 1) == 0))
    {
      uint64_t v20 = *(void *)(*v6 + 16);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v29 = v6[1];
      v6[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, a4, a5, isUniquelyReferenced_nonNull_native);
      v6[1] = v29;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v17 = (void *)*v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      }
      unint64_t v23 = v17[2];
      unint64_t v22 = v17[3];
      if (v23 >= v22 >> 1) {
        unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v17);
      }
      uint64_t v17[2] = v23 + 1;
      uint64_t v24 = &v17[3 * v23];
      v24[4] = a1;
      v24[5] = a2;
      v24[6] = a3;
      goto LABEL_13;
    }
    unint64_t v16 = *(void *)(*(void *)(v12 + 56) + 8 * v14);
    unint64_t v17 = (void *)*v6;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if ((v16 & 0x8000000000000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      unint64_t v17 = (void *)result;
      if ((v16 & 0x8000000000000000) == 0)
      {
LABEL_6:
        if (v16 < v17[2])
        {
          unint64_t v19 = &v17[3 * v16];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v19[4] = a1;
          uint64_t v19[5] = a2;
          v19[6] = a3;
LABEL_13:
          swift_bridgeObjectRelease();
          outlined consume of NotificationAction?(a1, a2);
          uint64_t result = outlined consume of NotificationAction?(a1, a2);
          *uint64_t v6 = v17;
          return result;
        }
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }
  uint64_t v25 = v5[1];
  if (*(void *)(v25 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5), (v27 & 1) != 0))
  {
    unint64_t v28 = *(void *)(*(void *)(v25 + 56) + 8 * v26);
    specialized Dictionary._Variant.removeValue(forKey:)(a4, a5);
    specialized Array.remove(at:)(v28, (uint64_t)&v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t MeshModelCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v6 = v3[1];
  if (!*(void *)(v6 + 16)) {
    goto LABEL_9;
  }
  uint64_t v8 = result;
  uint64_t v9 = *v4;
  swift_bridgeObjectRetain();
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v8, a2);
  if ((v10 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_9:
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  unint64_t v11 = *(void *)(*(void *)(v6 + 56) + 8 * result);
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 >= *(void *)(v9 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v12 = (void *)(v9 + 48 * v11);
  uint64_t v13 = v12[5];
  uint64_t v14 = v12[6];
  uint64_t v15 = v12[7];
  uint64_t v16 = v12[8];
  uint64_t v17 = v12[9];
  *(void *)a3 = v12[4];
  *(void *)(a3 + 8) = v13;
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = v15;
  *(void *)(a3 + 32) = v16;
  *(void *)(a3 + 40) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t MeshModelCollection.insert(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = v1[1];
  if (!*(void *)(v9 + 16)) {
    goto LABEL_7;
  }
  uint64_t v10 = *v2;
  swift_bridgeObjectRetain();
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    v15[0] = v4;
    v15[1] = v3;
    void v15[2] = v5;
    v15[3] = v6;
    v15[4] = v7;
    uint64_t v15[5] = v8;
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.subscript.setter(v15, v4, v3);
    return 1;
  }
  unint64_t v13 = *(void *)(*(void *)(v9 + 56) + 8 * result);
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v14 = *(void *)(v10 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    if (v13 < v14) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t MeshModelCollection.update(_:)@<X0>(long long *a1@<X0>, void *a2@<X8>)
{
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  void v5[2] = a1[2];
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(v5, *(uint64_t *)&v5[0], *((uint64_t *)&v5[0] + 1), a2);
  swift_bridgeObjectRelease();
  return outlined release of MeshResource.Model((uint64_t)v5);
}

uint64_t specialized OrderedIdentifiableCollection.updateValue(_:forKey:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  unint64_t v10 = v4[1];
  if (!*(void *)(v10 + 16)) {
    goto LABEL_9;
  }
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v12 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v38 = v5[1];
  v5[1] = 0x8000000000000000;
  unint64_t v15 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v13, a2, a3, isUniquelyReferenced_nonNull_native);
  LOBYTE(v13) = v16;
  v5[1] = v38;
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    uint64_t v17 = (void *)*v5;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if ((v15 & 0x8000000000000000) == 0) {
        goto LABEL_6;
      }
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
  }
  else
  {
LABEL_9:
    uint64_t v24 = *(void *)(*v5 + 16);
    swift_bridgeObjectRetain();
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v39 = v5[1];
    v5[1] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, a2, a3, v25);
    v5[1] = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v15 = *v5;
    outlined retain of MeshResource.Model((uint64_t)a1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1, (void *)v15);
    }
    unint64_t v27 = *(void *)(v15 + 16);
    unint64_t v26 = *(void *)(v15 + 24);
    uint64_t v17 = (void *)(v27 + 1);
    if (v27 >= v26 >> 1) {
      unint64_t v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, (void *)v15);
    }
    *(void *)(v15 + 16) = v17;
    unint64_t v28 = (_OWORD *)(v15 + 32 + 48 * v27);
    long long v29 = *a1;
    long long v30 = a1[2];
    v28[1] = a1[1];
    v28[2] = v30;
    *unint64_t v28 = v29;
    *uint64_t v5 = v15;
    uint64_t v31 = *(void *)(v15 + 16);
    if (v31)
    {
      uint64_t v32 = v15 + 32 + 48 * v31;
      unint64_t v23 = (void *)(v32 - 48);
      uint64_t v20 = v32 - 32;
      uint64_t v19 = v32 - 16;
      goto LABEL_15;
    }
    __break(1u);
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
  uint64_t v17 = (void *)result;
  if ((v15 & 0x8000000000000000) != 0) {
    goto LABEL_20;
  }
LABEL_6:
  if (v15 >= v17[2])
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v19 = (uint64_t)&v17[6 * v15 + 8];
  uint64_t v20 = (uint64_t)&v17[6 * v15 + 6];
  outlined retain of MeshResource.Model((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  long long v21 = *a1;
  long long v22 = a1[1];
  *(_OWORD *)uint64_t v19 = a1[2];
  *(_OWORD *)uint64_t v20 = v22;
  *(_OWORD *)(v19 - 32) = v21;
  *uint64_t v5 = (unint64_t)v17;
  if (v15 >= v17[2])
  {
LABEL_22:
    __break(1u);
    return result;
  }
  unint64_t v23 = &v17[6 * v15 + 4];
LABEL_15:
  uint64_t v34 = *(void *)v20;
  uint64_t v33 = *(void *)(v20 + 8);
  uint64_t v35 = v23[1];
  uint64_t v36 = *(void *)v19;
  uint64_t v37 = *(void *)(v19 + 8);
  *a4 = *v23;
  a4[1] = v35;
  a4[2] = v34;
  a4[3] = v33;
  a4[4] = v36;
  a4[5] = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t specialized OrderedIdentifiableCollection.updateValue(_:forKey:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v6 = (void *)a3;
  uint64_t v7 = a2;
  unint64_t v10 = v4[1];
  if (!*(void *)(v10 + 16)) {
    goto LABEL_9;
  }
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v12 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v41 = v5[1];
  v5[1] = 0x8000000000000000;
  unint64_t v15 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v13, v7, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  LOBYTE(v13) = v16;
  v5[1] = v41;
  swift_bridgeObjectRelease();
  if (v13) {
    goto LABEL_9;
  }
  uint64_t v6 = (void *)*v5;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_19;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
  }
  else
  {
    while (v15 < v6[2])
    {
      unint64_t v18 = &v6[8 * v15];
      uint64_t v20 = v18[4];
      uint64_t v19 = (uint64_t)(v18 + 4);
      uint64_t v7 = v20;
      outlined retain of MeshResource.Part((uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v21 = *a1;
      long long v22 = a1[1];
      long long v23 = a1[2];
      *(_OWORD *)(v19 + 41) = *(long long *)((char *)a1 + 41);
      *(_OWORD *)(v19 + 16) = v22;
      *(_OWORD *)(v19 + 32) = v23;
      *(_OWORD *)uint64_t v19 = v21;
      *uint64_t v5 = (unint64_t)v6;
      if (v15 < v6[2]) {
        goto LABEL_15;
      }
      __break(1u);
LABEL_9:
      uint64_t v24 = *(void *)(*v5 + 16);
      swift_bridgeObjectRetain();
      char v25 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v42 = v5[1];
      v5[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v7, (uint64_t)v6, v25);
      v5[1] = v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v15 = *v5;
      outlined retain of MeshResource.Part((uint64_t)a1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1, (void *)v15);
      }
      unint64_t v27 = *(void *)(v15 + 16);
      unint64_t v26 = *(void *)(v15 + 24);
      uint64_t v6 = (void *)(v27 + 1);
      if (v27 >= v26 >> 1) {
        unint64_t v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, (void *)v15);
      }
      *(void *)(v15 + 16) = v6;
      unint64_t v28 = (_OWORD *)(v15 + 32 + (v27 << 6));
      long long v29 = *a1;
      long long v30 = a1[1];
      long long v31 = a1[2];
      *(_OWORD *)((char *)v28 + 41) = *(long long *)((char *)a1 + 41);
      v28[1] = v30;
      v28[2] = v31;
      *unint64_t v28 = v29;
      *uint64_t v5 = v15;
      uint64_t v32 = *(void *)(v15 + 16);
      if (v32)
      {
        uint64_t v19 = v15 + 32 + (v32 << 6) - 64;
LABEL_15:
        uint64_t v33 = *(void *)(v19 + 48);
        char v34 = *(unsigned char *)(v19 + 44);
        int v35 = *(_DWORD *)(v19 + 40);
        uint64_t v37 = *(void *)(v19 + 24);
        uint64_t v36 = *(void *)(v19 + 32);
        uint64_t v38 = *(void *)(v19 + 8);
        uint64_t v39 = *(void *)(v19 + 16);
        char v40 = *(unsigned char *)(v19 + 56);
        *(void *)a4 = *(void *)v19;
        *(void *)(a4 + 8) = v38;
        *(void *)(a4 + 16) = v39;
        *(void *)(a4 + 24) = v37;
        *(void *)(a4 + 32) = v36;
        *(_DWORD *)(a4 + 40) = v35;
        *(unsigned char *)(a4 + 44) = v34;
        *(void *)(a4 + 48) = v33;
        *(unsigned char *)(a4 + 56) = v40;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return swift_bridgeObjectRetain();
      }
      __break(1u);
LABEL_19:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      uint64_t v6 = (void *)result;
      if ((v15 & 0x8000000000000000) != 0) {
        goto LABEL_20;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedIdentifiableCollection.updateValue(_:forKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  unint64_t v10 = v4[1];
  if (!*(void *)(v10 + 16)) {
    goto LABEL_11;
  }
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v12 & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v29[0] = v5[1];
  v5[1] = 0x8000000000000000;
  unint64_t v15 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v13, a2, a3, isUniquelyReferenced_nonNull_native);
  LOBYTE(v13) = v16;
  v5[1] = *(void *)&v29[0];
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    uint64_t v17 = *v5;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v5 = v17;
    if (result)
    {
      if ((v15 & 0x8000000000000000) == 0) {
        goto LABEL_6;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
  }
  else
  {
LABEL_11:
    uint64_t v20 = *(void *)(*v5 + 16);
    swift_bridgeObjectRetain();
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v29[0] = v5[1];
    v5[1] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, a2, a3, v21);
    v5[1] = *(void *)&v29[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)a1, (uint64_t)v29);
    unint64_t v15 = *v5;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1, (void *)v15);
    }
    uint64_t v17 = *(void *)(v15 + 16);
    unint64_t v22 = *(void *)(v15 + 24);
    a1 = (void *)(v17 + 1);
    if (v17 >= v22 >> 1) {
      unint64_t v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v17 + 1, 1, (void *)v15);
    }
    *(void *)(v15 + 16) = a1;
    long long v23 = (_OWORD *)(v15 + 32 + 96 * v17);
    long long v24 = v29[1];
    *long long v23 = v29[0];
    v23[1] = v24;
    long long v25 = v29[2];
    long long v26 = v29[3];
    long long v27 = v29[5];
    v23[4] = v29[4];
    v23[5] = v27;
    v23[2] = v25;
    v23[3] = v26;
    *uint64_t v5 = v15;
    uint64_t v28 = *(void *)(v15 + 16);
    if (v28) {
      return outlined init with copy of MeshResource._Proto_Level_v1(v15 + 32 + 96 * v28 - 96, a4);
    }
    __break(1u);
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v17);
  uint64_t v17 = result;
  *uint64_t v5 = result;
  if ((v15 & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
LABEL_6:
  if (v15 >= *(void *)(v17 + 16))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t result = (uint64_t)outlined assign with copy of MeshResource._Proto_Level_v1(a1, (void *)(v17 + 96 * v15 + 32));
  if (v15 >= *(void *)(*v5 + 16))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v19 = *v5 + 96 * v15 + 32;

  return outlined init with copy of MeshResource._Proto_Level_v1(v19, a4);
}

uint64_t specialized OrderedIdentifiableCollection.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  unint64_t v10 = v4[1];
  if (!*(void *)(v10 + 16)) {
    goto LABEL_9;
  }
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v12 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v46 = v5[1];
  v5[1] = 0x8000000000000000;
  unint64_t v15 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v13, a2, a3, isUniquelyReferenced_nonNull_native);
  LOBYTE(v13) = v16;
  v5[1] = v46;
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    uint64_t v17 = (void *)*v5;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if ((v15 & 0x8000000000000000) == 0) {
        goto LABEL_6;
      }
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
  }
  else
  {
LABEL_9:
    uint64_t v26 = *(void *)(*v5 + 16);
    swift_bridgeObjectRetain();
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v47 = v5[1];
    v5[1] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, a2, a3, v27);
    v5[1] = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v15 = *v5;
    outlined retain of IKRig.Constraint(a1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1, (void *)v15);
    }
    unint64_t v29 = *(void *)(v15 + 16);
    unint64_t v28 = *(void *)(v15 + 24);
    uint64_t v17 = (void *)(v29 + 1);
    if (v29 >= v28 >> 1) {
      unint64_t v15 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, (void *)v15);
    }
    *(void *)(v15 + 16) = v17;
    uint64_t v30 = v15 + 32 + 112 * v29;
    long long v31 = *(_OWORD *)a1;
    long long v32 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v30 + 16) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v30 + 32) = v32;
    *(_OWORD *)uint64_t v30 = v31;
    long long v33 = *(_OWORD *)(a1 + 48);
    long long v34 = *(_OWORD *)(a1 + 64);
    long long v35 = *(_OWORD *)(a1 + 80);
    *(unsigned char *)(v30 + 96) = *(unsigned char *)(a1 + 96);
    *(_OWORD *)(v30 + 64) = v34;
    *(_OWORD *)(v30 + 80) = v35;
    *(_OWORD *)(v30 + 48) = v33;
    *uint64_t v5 = v15;
    uint64_t v36 = *(void *)(v15 + 16);
    if (v36)
    {
      uint64_t v25 = v15 + 32 + 112 * v36 - 112;
      goto LABEL_15;
    }
    __break(1u);
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
  uint64_t v17 = (void *)result;
  if ((v15 & 0x8000000000000000) != 0) {
    goto LABEL_20;
  }
LABEL_6:
  if (v15 >= v17[2])
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v19 = &v17[14 * v15];
  outlined retain of IKRig.Constraint(a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  long long v20 = *(_OWORD *)a1;
  long long v21 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v19 + 3) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v19 + 4) = v21;
  *((_OWORD *)v19 + 2) = v20;
  long long v22 = *(_OWORD *)(a1 + 48);
  long long v23 = *(_OWORD *)(a1 + 64);
  long long v24 = *(_OWORD *)(a1 + 80);
  *((unsigned char *)v19 + 128) = *(unsigned char *)(a1 + 96);
  *((_OWORD *)v19 + 6) = v23;
  *((_OWORD *)v19 + 7) = v24;
  *((_OWORD *)v19 + 5) = v22;
  *uint64_t v5 = (unint64_t)v17;
  if (v15 >= v17[2])
  {
LABEL_22:
    __break(1u);
    return result;
  }
  uint64_t v25 = (uint64_t)(v19 + 4);
LABEL_15:
  long long v38 = *(_OWORD *)(v25 + 64);
  long long v37 = *(_OWORD *)(v25 + 80);
  long long v40 = *(_OWORD *)(v25 + 32);
  long long v39 = *(_OWORD *)(v25 + 48);
  uint64_t v41 = *(void *)(v25 + 16);
  uint64_t v42 = *(void *)(v25 + 24);
  uint64_t v44 = *(void *)v25;
  uint64_t v43 = *(void *)(v25 + 8);
  char v45 = *(unsigned char *)(v25 + 96);
  *(void *)a4 = v44;
  *(void *)(a4 + 8) = v43;
  *(void *)(a4 + 16) = v41;
  *(void *)(a4 + 24) = v42;
  *(_OWORD *)(a4 + 32) = v40;
  *(_OWORD *)(a4 + 48) = v39;
  *(_OWORD *)(a4 + 64) = v38;
  *(_OWORD *)(a4 + 80) = v37;
  *(unsigned char *)(a4 + 96) = v45;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t specialized OrderedIdentifiableCollection.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v8 = (void *)a5;
  uint64_t v9 = (void *)a4;
  unint64_t v14 = v6[1];
  if (!*(void *)(v14 + 16)) {
    goto LABEL_9;
  }
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
  if ((v16 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v33 = v7[1];
  v7[1] = 0x8000000000000000;
  unint64_t v19 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v17, (uint64_t)v9, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  LOBYTE(v17) = v20;
  v7[1] = v33;
  swift_bridgeObjectRelease();
  if (v17) {
    goto LABEL_9;
  }
  uint64_t v8 = (void *)*v7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_19;
  }
  if ((v19 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
  }
  else
  {
    while (v19 < v8[2])
    {
      uint64_t v9 = &v8[3 * v19];
      long long v22 = v9 + 6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _OWORD v9[4] = a1;
      long long v23 = v9 + 4;
      v9[5] = a2;
      v9[6] = a3;
      *uint64_t v7 = (unint64_t)v8;
      if (v19 < v8[2]) {
        goto LABEL_15;
      }
      __break(1u);
LABEL_9:
      uint64_t v24 = *(void *)(*v7 + 16);
      swift_bridgeObjectRetain();
      char v25 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v34 = v7[1];
      v7[1] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, (uint64_t)v9, (uint64_t)v8, v25);
      v7[1] = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v19 = *v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, (void *)v19);
      }
      unint64_t v27 = *(void *)(v19 + 16);
      unint64_t v26 = *(void *)(v19 + 24);
      uint64_t v8 = (void *)(v27 + 1);
      if (v27 >= v26 >> 1) {
        unint64_t v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, (void *)v19);
      }
      *(void *)(v19 + 16) = v8;
      unint64_t v28 = (void *)(v19 + 32 + 24 * v27);
      *unint64_t v28 = a1;
      v28[1] = a2;
      v28[2] = a3;
      *uint64_t v7 = v19;
      uint64_t v29 = *(void *)(v19 + 16);
      if (v29)
      {
        uint64_t v30 = v19 + 32 + 24 * v29;
        long long v23 = (void *)(v30 - 24);
        long long v22 = (uint64_t *)(v30 - 8);
LABEL_15:
        uint64_t v31 = v23[1];
        uint64_t v32 = *v22;
        *a6 = *v23;
        a6[1] = v31;
        a6[2] = v32;
        swift_bridgeObjectRetain();
        return swift_bridgeObjectRetain();
      }
      __break(1u);
LABEL_19:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      uint64_t v8 = (void *)result;
      if ((v19 & 0x8000000000000000) != 0) {
        goto LABEL_20;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t MeshModelCollection.remove(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
  {
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v4[1];
  uint64_t v20 = v12;
  v4[1] = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v12 = v20;
  }
  swift_bridgeObjectRelease();
  unint64_t v13 = *(void *)(*(void *)(v12 + 56) + 8 * v8);
  specialized _NativeDictionary._delete(at:)(v8, v12);
  v4[1] = v12;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v13 >= *(void *)(*v4 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  unint64_t v14 = (void *)(*v4 + 48 * v13);
  uint64_t v15 = v14[5];
  uint64_t v16 = v14[6];
  uint64_t v17 = v14[7];
  uint64_t v18 = v14[8];
  uint64_t v19 = v14[9];
  *(void *)a3 = v14[4];
  *(void *)(a3 + 8) = v15;
  *(void *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v17;
  *(void *)(a3 + 32) = v18;
  *(void *)(a3 + 40) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.remove(at:)(v13, (uint64_t)&v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t MeshModelCollection.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (void *)(*v1 + 48 * v2);
    uint64_t v5 = v4[5];
    uint64_t v6 = v4[6];
    uint64_t v7 = v4[7];
    uint64_t v8 = v4[8];
    uint64_t v9 = v4[9];
    *(void *)a1 = v4[4];
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance MeshModelCollection.Iterator@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (void *)(*v1 + 48 * v2);
    uint64_t v5 = v4[5];
    uint64_t v6 = v4[6];
    uint64_t v7 = v4[7];
    uint64_t v8 = v4[8];
    uint64_t v9 = v4[9];
    *(void *)a1 = v4[4];
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v9;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MeshModelCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance MeshModelCollection(a1, a2, (uint64_t (*)(void, void))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MeshModelCollection(void *a1, void *a2, unint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t MeshModelCollection.startIndex.getter()
{
  return 0;
}

unint64_t MeshModelCollection.subscript.getter@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(*(void *)v2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  unint64_t v3 = (void *)(*(void *)v2 + 48 * result);
  uint64_t v4 = v3[5];
  uint64_t v5 = v3[6];
  uint64_t v6 = v3[7];
  uint64_t v7 = v3[8];
  uint64_t v8 = v3[9];
  *a2 = v3[4];
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
  a2[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MeshModelCollection(void (***a1)(void **a1), unint64_t *a2))()
{
  uint64_t v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = MeshModelCollection.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance IKRig.JointCollection;
}

void (*MeshModelCollection.subscript.read(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x30uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = (void *)(*(void *)v2 + 48 * a2);
    uint64_t v8 = v7[5];
    uint64_t v9 = v7[6];
    uint64_t v10 = v7[7];
    uint64_t v11 = v7[8];
    uint64_t v12 = v7[9];
    *(void *)uint64_t v6 = v7[4];
    *((void *)v6 + 1) = v8;
    *((void *)v6 + 2) = v9;
    *((void *)v6 + 3) = v10;
    *((void *)v6 + 4) = v11;
    *((void *)v6 + 5) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return MeshModelCollection.subscript.read;
  }
  __break(1u);
  return result;
}

void MeshModelCollection.subscript.read(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance MeshModelCollection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance MeshModelCollection(a1, a2, a3, (uint64_t (*)(void, uint64_t, void))specialized Collection.index(_:offsetBy:limitedBy:), a4);
}

double MeshModelCollection.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  MeshModelCollection.init(_:)(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MeshModelCollection@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  MeshModelCollection.init(_:)(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t MeshModelCollection.customMirror.getter@<X0>(unint64_t *a1@<X8>)
{
  return MeshModelCollection.customMirror.getter(&demangling cache variable for type metadata for [MeshResource.Model], &lazy protocol witness table cache variable for type [MeshResource.Model] and conformance [A], (unint64_t *)&type metadata for MeshModelCollection, a1);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection(a1, &demangling cache variable for type metadata for [MeshResource.Model], &lazy protocol witness table cache variable for type [MeshResource.Model] and conformance [A], a2);
}

uint64_t MeshPartCollection.count.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

BOOL MeshPartCollection.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

uint64_t MeshPartCollection.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MeshPartCollection.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_27:
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v3;
    a2[1] = v5;
    return result;
  }
  uint64_t v7 = a1 + 48;
  while (1)
  {
    uint64_t v11 = *(void *)(v7 - 16);
    uint64_t v10 = *(void *)(v7 - 8);
    uint64_t v12 = *(void *)v7;
    uint64_t v46 = *(void *)(v7 + 8);
    uint64_t v13 = *(void *)(v7 + 16);
    int v47 = *(_DWORD *)(v7 + 24);
    char v48 = *(unsigned char *)(v7 + 28);
    uint64_t v14 = *(void *)(v7 + 32);
    char v44 = *(unsigned char *)(v7 + 40);
    uint64_t v15 = v5[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v45 = v14;
    uint64_t v49 = v10;
    if (!v15) {
      break;
    }
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v12);
    if ((v17 & 1) == 0) {
      break;
    }
    unint64_t v18 = *(void *)(v5[7] + 8 * v16);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v18 & 0x8000000000000000) != 0) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      if ((v18 & 0x8000000000000000) != 0)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    if (v18 >= v3[2]) {
      goto LABEL_30;
    }
    uint64_t v9 = (uint64_t)&v3[8 * v18 + 4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v19 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v9 = v11;
LABEL_4:
    *(void *)(v9 + 8) = v49;
    *(void *)(v9 + 16) = v12;
    *(void *)(v9 + 24) = v46;
    *(void *)(v9 + 32) = v13;
    *(_DWORD *)(v9 + 40) = v47;
    v7 += 64;
    *(unsigned char *)(v9 + 44) = v19;
    *(void *)(v9 + 48) = v45;
    *(unsigned char *)(v9 + 56) = v44;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (!--v6) {
      goto LABEL_27;
    }
  }
  uint64_t v42 = v3;
  uint64_t v43 = v6;
  uint64_t v20 = v11;
  uint64_t v21 = v3[2];
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v12);
  uint64_t v25 = v5[2];
  BOOL v26 = (v23 & 1) == 0;
  uint64_t v27 = v25 + v26;
  if (!__OFADD__(v25, v26))
  {
    char v28 = v23;
    if (v5[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      uint64_t v29 = v10;
      if ((v28 & 1) == 0)
      {
LABEL_15:
        v5[(v24 >> 6) + 8] |= 1 << v24;
        uint64_t v32 = (uint64_t *)(v5[6] + 16 * v24);
        *uint64_t v32 = v29;
        v32[1] = v12;
        *(void *)(v5[7] + 8 * v24) = v21;
        uint64_t v33 = v5[2];
        BOOL v34 = __OFADD__(v33, 1);
        uint64_t v35 = v33 + 1;
        if (v34) {
          goto LABEL_29;
        }
        void v5[2] = v35;
        swift_bridgeObjectRetain();
        goto LABEL_21;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
      uint64_t v29 = v10;
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v12);
      if ((v28 & 1) != (v31 & 1)) {
        goto LABEL_31;
      }
      unint64_t v24 = v30;
      if ((v28 & 1) == 0) {
        goto LABEL_15;
      }
    }
    *(void *)(v5[7] + 8 * v24) = v21;
LABEL_21:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v36 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v3 = v42;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
    }
    uint64_t v6 = v43;
    char v19 = v48;
    unint64_t v38 = v3[2];
    unint64_t v37 = v3[3];
    unint64_t v39 = v38 + 1;
    if (v38 >= v37 >> 1) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v3);
    }
    uint64_t v8 = &v3[8 * v38];
    _OWORD v8[4] = v36;
    uint64_t v9 = (uint64_t)(v8 + 4);
    v3[2] = v39;
    goto LABEL_4;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MeshPartCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = v3;
  uint64_t v6 = v3[1];
  if (!*(void *)(v6 + 16)) {
    goto LABEL_9;
  }
  uint64_t v8 = result;
  uint64_t v9 = *v4;
  swift_bridgeObjectRetain();
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v8, a2);
  if ((v10 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_9:
    *(_OWORD *)(a3 + 41) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  unint64_t v11 = *(void *)(*(void *)(v6 + 56) + 8 * result);
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 >= *(void *)(v9 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v12 = v9 + (v11 << 6);
  uint64_t v14 = *(void *)(v12 + 32);
  uint64_t v13 = *(void *)(v12 + 40);
  uint64_t v16 = *(void *)(v12 + 48);
  uint64_t v15 = *(void *)(v12 + 56);
  uint64_t v17 = *(void *)(v12 + 64);
  int v18 = *(_DWORD *)(v12 + 72);
  char v19 = *(unsigned char *)(v12 + 76);
  uint64_t v20 = *(void *)(v12 + 80);
  LOBYTE(v12) = *(unsigned char *)(v12 + 88);
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v13;
  *(void *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v15;
  *(void *)(a3 + 32) = v17;
  *(_DWORD *)(a3 + 40) = v18;
  *(unsigned char *)(a3 + 44) = v19;
  *(void *)(a3 + 48) = v20;
  *(unsigned char *)(a3 + 56) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t MeshPartCollection.insert(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(unsigned int *)(a1 + 40);
  int v9 = *(unsigned __int8 *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 48);
  char v11 = *(unsigned char *)(a1 + 56);
  uint64_t v12 = v1[1];
  if (!*(void *)(v12 + 16))
  {
LABEL_7:
    uint64_t v17 = 0x100000000;
    if (!v9) {
      uint64_t v17 = 0;
    }
    v20[0] = v4;
    v20[1] = v3;
    _OWORD v20[2] = v5;
    void v20[3] = v6;
    v20[4] = v7;
    _OWORD v20[5] = v17 | v8;
    v20[6] = v10;
    char v21 = v11;
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.subscript.setter(v20, v3, v5);
    return 1;
  }
  uint64_t v18 = *v2;
  uint64_t v19 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v19;
    goto LABEL_7;
  }
  unint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * result);
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v16 = *(void *)(v18 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease();
    if (v15 < v16) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t MeshPartCollection.update(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  v7[0] = a1[2];
  *(_OWORD *)((char *)v7 + 9) = *(long long *)((char *)a1 + 41);
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(v6, *((uint64_t *)&v6[0] + 1), v4, a2);
  swift_bridgeObjectRelease();
  return outlined release of MeshResource.Part((uint64_t)v6);
}

uint64_t MeshPartCollection.remove(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
  {
    *(_OWORD *)(a3 + 41) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v4[1];
  uint64_t v23 = v12;
  v4[1] = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v12 = v23;
  }
  swift_bridgeObjectRelease();
  unint64_t v13 = *(void *)(*(void *)(v12 + 56) + 8 * v8);
  specialized _NativeDictionary._delete(at:)(v8, v12);
  v4[1] = v12;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v13 >= *(void *)(*v4 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  unint64_t v14 = *v4 + (v13 << 6);
  uint64_t v16 = *(void *)(v14 + 32);
  uint64_t v15 = *(void *)(v14 + 40);
  uint64_t v18 = *(void *)(v14 + 48);
  uint64_t v17 = *(void *)(v14 + 56);
  uint64_t v19 = *(void *)(v14 + 64);
  int v20 = *(_DWORD *)(v14 + 72);
  char v21 = *(unsigned char *)(v14 + 76);
  uint64_t v22 = *(void *)(v14 + 80);
  LOBYTE(v14) = *(unsigned char *)(v14 + 88);
  *(void *)a3 = v16;
  *(void *)(a3 + 8) = v15;
  *(void *)(a3 + 16) = v18;
  *(void *)(a3 + 24) = v17;
  *(void *)(a3 + 32) = v19;
  *(_DWORD *)(a3 + 40) = v20;
  *(unsigned char *)(a3 + 44) = v21;
  *(void *)(a3 + 48) = v22;
  *(unsigned char *)(a3 + 56) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.remove(at:)(v13, (uint64_t)&v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t MeshPartCollection.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)(a1 + 41) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *v1 + (v2 << 6);
    uint64_t v6 = *(void *)(v4 + 32);
    uint64_t v5 = *(void *)(v4 + 40);
    uint64_t v8 = *(void *)(v4 + 48);
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v9 = *(void *)(v4 + 64);
    int v10 = *(_DWORD *)(v4 + 72);
    char v11 = *(unsigned char *)(v4 + 76);
    uint64_t v12 = *(void *)(v4 + 80);
    LOBYTE(v4) = *(unsigned char *)(v4 + 88);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v9;
    *(_DWORD *)(a1 + 40) = v10;
    *(unsigned char *)(a1 + 44) = v11;
    *(void *)(a1 + 48) = v12;
    *(unsigned char *)(a1 + 56) = v4;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance MeshPartCollection.Iterator@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)(a1 + 41) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *v1 + (v2 << 6);
    uint64_t v6 = *(void *)(v4 + 32);
    uint64_t v5 = *(void *)(v4 + 40);
    uint64_t v8 = *(void *)(v4 + 48);
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v9 = *(void *)(v4 + 64);
    int v10 = *(_DWORD *)(v4 + 72);
    char v11 = *(unsigned char *)(v4 + 76);
    uint64_t v12 = *(void *)(v4 + 80);
    LOBYTE(v4) = *(unsigned char *)(v4 + 88);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v9;
    *(_DWORD *)(a1 + 40) = v10;
    *(unsigned char *)(a1 + 44) = v11;
    *(void *)(a1 + 48) = v12;
    *(unsigned char *)(a1 + 56) = v4;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t MeshPartCollection.makeIterator()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = 0;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MeshPartCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance MeshModelCollection(a1, a2, (uint64_t (*)(void, void))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MeshPartCollection(void *a1, uint64_t a2, unint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t MeshPartCollection.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall MeshPartCollection.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

unint64_t MeshPartCollection.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(*(void *)v2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  unint64_t v3 = *(void *)v2 + (result << 6);
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v7 = *(void *)(v3 + 48);
  uint64_t v6 = *(void *)(v3 + 56);
  uint64_t v8 = *(void *)(v3 + 64);
  int v9 = *(_DWORD *)(v3 + 72);
  char v10 = *(unsigned char *)(v3 + 76);
  uint64_t v11 = *(void *)(v3 + 80);
  LOBYTE(v3) = *(unsigned char *)(v3 + 88);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = v9;
  *(unsigned char *)(a2 + 44) = v10;
  *(void *)(a2 + 48) = v11;
  *(unsigned char *)(a2 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MeshPartCollection(void (***a1)(void **a1), unint64_t *a2))()
{
  uint64_t v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = MeshPartCollection.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance IKRig.JointCollection;
}

void (*MeshPartCollection.subscript.read(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  Swift::Int result = (void (*)(void **))malloc(0x39uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v2 + (a2 << 6);
    uint64_t v9 = *(void *)(v7 + 32);
    uint64_t v8 = *(void *)(v7 + 40);
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v10 = *(void *)(v7 + 56);
    uint64_t v12 = *(void *)(v7 + 64);
    int v13 = *(_DWORD *)(v7 + 72);
    char v14 = *(unsigned char *)(v7 + 76);
    uint64_t v15 = *(void *)(v7 + 80);
    LOBYTE(v7) = *(unsigned char *)(v7 + 88);
    *(void *)uint64_t v6 = v9;
    *((void *)v6 + 1) = v8;
    *((void *)v6 + 2) = v11;
    *((void *)v6 + 3) = v10;
    *((void *)v6 + 4) = v12;
    *((_DWORD *)v6 + 10) = v13;
    *((unsigned char *)v6 + 44) = v14;
    *((void *)v6 + 6) = v15;
    *((unsigned char *)v6 + 56) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return MeshPartCollection.subscript.read;
  }
  __break(1u);
  return result;
}

void MeshPartCollection.subscript.read(void **a1)
{
  BOOL v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

double MeshPartCollection.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  MeshPartCollection.init(_:)(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MeshPartCollection@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  MeshPartCollection.init(_:)(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t MeshPartCollection.customMirror.getter@<X0>(unint64_t *a1@<X8>)
{
  return MeshModelCollection.customMirror.getter(&demangling cache variable for type metadata for [MeshResource.Part], &lazy protocol witness table cache variable for type [MeshResource.Part] and conformance [A], (unint64_t *)&type metadata for MeshPartCollection, a1);
}

uint64_t MeshModelCollection.customMirror.getter@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X2>, unint64_t *a4@<X8>)
{
  v19[1] = a4;
  _OWORD v19[2] = a3;
  v19[0] = a2;
  uint64_t v6 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = *v4;
  int v13 = v4[1];
  v19[4] = v14;
  uint64_t v19[5] = v13;
  uint64_t v19[3] = v14;
  uint64_t v15 = *MEMORY[0x263F8E7E8];
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v12, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8E830], v6);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(a1);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(v19[0], a1);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshPartCollection@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection(a1, &demangling cache variable for type metadata for [MeshResource.Part], &lazy protocol witness table cache variable for type [MeshResource.Part] and conformance [A], a2);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X2>, unint64_t *a3@<X3>, unint64_t *a4@<X8>)
{
  v19[0] = a3;
  v19[1] = a4;
  _OWORD v19[2] = a1;
  uint64_t v6 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = *v4;
  int v13 = v4[1];
  v19[4] = v14;
  uint64_t v19[5] = v13;
  uint64_t v19[3] = v14;
  uint64_t v15 = *MEMORY[0x263F8E7E8];
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v12, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8E830], v6);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(a2);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(v19[0], a2);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t _Proto_MeshLevelCollection_v1.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _Proto_MeshLevelCollection_v1.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v14 = v4;
  uint64_t v15 = v5;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = a1 + 32;
    do
    {
      outlined init with copy of MeshResource._Proto_Level_v1(v7, (uint64_t)v13);
      long long v8 = v13[0];
      void v12[2] = v13[2];
      v12[3] = v13[3];
      v12[4] = v13[4];
      uint64_t v12[5] = v13[5];
      v12[0] = v13[0];
      v12[1] = v13[1];
      swift_bridgeObjectRetain();
      specialized OrderedIdentifiableCollection.subscript.setter((uint64_t)v12, v8, *((uint64_t *)&v8 + 1));
      v7 += 96;
      --v6;
    }
    while (v6);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v10 = v14;
    uint64_t v11 = v15;
  }
  else
  {
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    uint64_t result = swift_bridgeObjectRelease();
  }
  *a2 = v10;
  a2[1] = v11;
  return result;
}

unint64_t _Proto_MeshLevelCollection_v1.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v8 = *v3;
  uint64_t v7 = v3[1];
  uint64_t v9 = *(void *)(v7 + 16);
  swift_bridgeObjectRetain();
  if (!v9 || (unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v11 & 1) == 0))
  {
    a3[4] = 0u;
    a3[5] = 0u;
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
    goto LABEL_7;
  }
  unint64_t v12 = *(void *)(*(void *)(v7 + 56) + 8 * result);
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 >= *(void *)(v8 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  outlined init with copy of MeshResource._Proto_Level_v1(v8 + 96 * v12 + 32, (uint64_t)a3);
LABEL_7:

  return swift_bridgeObjectRelease();
}

unint64_t _Proto_MeshLevelCollection_v1.insert(_:)(uint64_t *a1)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v6 = *v1;
  uint64_t v5 = v1[1];
  uint64_t v7 = *(void *)(v5 + 16);
  swift_bridgeObjectRetain();
  if (v7)
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
    if (v9)
    {
      unint64_t v10 = *(void *)(*(void *)(v5 + 56) + 8 * result);
      if ((v10 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v10 < *(void *)(v6 + 16))
      {
        outlined init with copy of MeshResource._Proto_Level_v1(v6 + 96 * v10 + 32, (uint64_t)v13);
        swift_bridgeObjectRelease();
        if (*((void *)&v13[0] + 1))
        {
          outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
          outlined destroy of MeshResource._Proto_Level_v1((uint64_t)a1);
          return 0;
        }
        goto LABEL_8;
      }
      __break(1u);
      return result;
    }
  }
  memset(v13, 0, sizeof(v13));
  swift_bridgeObjectRelease();
LABEL_8:
  outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for MeshResource._Proto_Level_v1?);
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)a1, (uint64_t)v13);
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.subscript.setter((uint64_t)v13, v11, v12);
  outlined destroy of MeshResource._Proto_Level_v1((uint64_t)a1);
  return 1;
}

uint64_t _Proto_MeshLevelCollection_v1.update(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(a1, v4, v5, a2);
  outlined destroy of MeshResource._Proto_Level_v1((uint64_t)a1);

  return swift_bridgeObjectRelease();
}

uint64_t _Proto_MeshLevelCollection_v1.remove(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = v4[1];
    *(void *)&v14[0] = v12;
    v4[1] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v12 = *(void *)&v14[0];
    }
    swift_bridgeObjectRelease();
    unint64_t v13 = *(void *)(*(void *)(v12 + 56) + 8 * v8);
    specialized _NativeDictionary._delete(at:)(v8, v12);
    v4[1] = v12;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v13 < *(void *)(*v4 + 16))
    {
      outlined init with copy of MeshResource._Proto_Level_v1(*v4 + 96 * v13 + 32, (uint64_t)a3);
      specialized Array.remove(at:)(v13, v14);
      return outlined destroy of MeshResource._Proto_Level_v1((uint64_t)v14);
    }
    __break(1u);
  }
  else
  {
    a3[4] = 0u;
    a3[5] = 0u;
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t _Proto_MeshLevelCollection_v1.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = outlined init with copy of MeshResource._Proto_Level_v1(*v1 + 96 * v2 + 32, (uint64_t)a1);
    v1[1] = v2 + 1;
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _Proto_MeshLevelCollection_v1.Iterator@<X0>(_OWORD *a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = outlined init with copy of MeshResource._Proto_Level_v1(*v1 + 96 * v2 + 32, (uint64_t)a1);
    v1[1] = v2 + 1;
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _Proto_MeshLevelCollection_v1(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance MeshModelCollection(a1, a2, (uint64_t (*)(void, void))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _Proto_MeshLevelCollection_v1(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t _Proto_MeshLevelCollection_v1.startIndex.getter()
{
  return 0;
}

unint64_t _Proto_MeshLevelCollection_v1.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > result)
  {
    return outlined init with copy of MeshResource._Proto_Level_v1(*(void *)v2 + 96 * result + 32, a2);
  }
  __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance _Proto_MeshLevelCollection_v1(void (**a1)(uint64_t *a1), unint64_t *a2))(uint64_t *a1)
{
  uint64_t result = (void (*)(uint64_t *))malloc(0x60uLL);
  *a1 = result;
  unint64_t v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v6 < *(void *)(*(void *)v2 + 16))
  {
    outlined init with copy of MeshResource._Proto_Level_v1(*(void *)v2 + 96 * v6 + 32, (uint64_t)result);
    return protocol witness for Collection.subscript.read in conformance _Proto_MeshLevelCollection_v1;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance _Proto_MeshLevelCollection_v1(uint64_t *a1)
{
  BOOL v1 = (void *)*a1;
  outlined destroy of MeshResource._Proto_Level_v1(*a1);

  free(v1);
}

double _Proto_MeshLevelCollection_v1.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _Proto_MeshLevelCollection_v1.init(_:)(a1, (uint64_t *)&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance _Proto_MeshLevelCollection_v1@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _Proto_MeshLevelCollection_v1.init(_:)(a1, (uint64_t *)&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t _Proto_MeshLevelCollection_v1.customMirror.getter@<X0>(unint64_t *a1@<X8>)
{
  return MeshModelCollection.customMirror.getter(&demangling cache variable for type metadata for [MeshResource._Proto_Level_v1], &lazy protocol witness table cache variable for type [MeshResource._Proto_Level_v1] and conformance [A], (unint64_t *)&type metadata for _Proto_MeshLevelCollection_v1, a1);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance _Proto_MeshLevelCollection_v1@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection(a1, &demangling cache variable for type metadata for [MeshResource._Proto_Level_v1], &lazy protocol witness table cache variable for type [MeshResource._Proto_Level_v1] and conformance [A], a2);
}

uint64_t MeshInstanceCollection.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MeshInstanceCollection.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_27:
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v3;
    a2[1] = v5;
    return result;
  }
  uint64_t v7 = (long long *)(a1 + 64);
  while (1)
  {
    uint64_t v11 = *((void *)v7 - 4);
    uint64_t v10 = *((void *)v7 - 3);
    uint64_t v13 = *((void *)v7 - 2);
    uint64_t v12 = *((void *)v7 - 1);
    long long v46 = *v7;
    long long v47 = v7[1];
    long long v43 = v7[3];
    long long v44 = v7[2];
    char v14 = *((unsigned char *)v7 + 64);
    uint64_t v15 = v5[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v45 = v13;
    if (v15)
    {
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      if (v17)
      {
        unint64_t v18 = *(void *)(v5[7] + 8 * v16);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if ((v18 & 0x8000000000000000) != 0) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          if ((v18 & 0x8000000000000000) != 0)
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        if (v18 >= v3[2]) {
          goto LABEL_30;
        }
        uint64_t v19 = &v3[14 * v18];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v19[4] = v11;
        char v9 = v19 + 4;
        uint64_t v19[5] = v10;
        v19[6] = v13;
        v19[7] = v12;
        goto LABEL_4;
      }
    }
    uint64_t v20 = v6;
    uint64_t v21 = v12;
    char v22 = v14;
    uint64_t v42 = v3;
    uint64_t v23 = v3[2];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v48 = v11;
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    uint64_t v27 = v5[2];
    BOOL v28 = (v25 & 1) == 0;
    uint64_t v29 = v27 + v28;
    if (__OFADD__(v27, v28)) {
      break;
    }
    char v30 = v25;
    if (v5[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v10);
      if ((v30 & 1) != (v32 & 1)) {
        goto LABEL_31;
      }
      unint64_t v26 = v31;
    }
    char v14 = v22;
    uint64_t v33 = v21;
    if (v30)
    {
      *(void *)(v5[7] + 8 * v26) = v23;
      uint64_t v6 = v20;
    }
    else
    {
      v5[(v26 >> 6) + 8] |= 1 << v26;
      BOOL v34 = (uint64_t *)(v5[6] + 16 * v26);
      *BOOL v34 = v48;
      v34[1] = v10;
      *(void *)(v5[7] + 8 * v26) = v23;
      uint64_t v35 = v5[2];
      BOOL v36 = __OFADD__(v35, 1);
      uint64_t v37 = v35 + 1;
      if (v36) {
        goto LABEL_29;
      }
      uint64_t v6 = v20;
      void v5[2] = v37;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v3 = v42;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
    }
    unint64_t v39 = v3[2];
    unint64_t v38 = v3[3];
    if (v39 >= v38 >> 1) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v3);
    }
    unint64_t v8 = &v3[14 * v39];
    _OWORD v8[4] = v48;
    uint64_t v8[5] = v10;
    char v9 = v8 + 4;
    v3[2] = v39 + 1;
    long long v9[2] = v45;
    v9[3] = v33;
LABEL_4:
    *((_OWORD *)v9 + 2) = v46;
    *((_OWORD *)v9 + 3) = v47;
    v7 += 7;
    *((_OWORD *)v9 + 4) = v44;
    *((_OWORD *)v9 + 5) = v43;
    *((unsigned char *)v9 + 96) = v14;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (!--v6) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MeshInstanceCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = v3;
  uint64_t v6 = v3[1];
  if (!*(void *)(v6 + 16)) {
    goto LABEL_9;
  }
  uint64_t v8 = result;
  uint64_t v9 = *v4;
  swift_bridgeObjectRetain();
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v8, a2);
  if ((v10 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_9:
    *(unsigned char *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  unint64_t v11 = *(void *)(*(void *)(v6 + 56) + 8 * result);
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 >= *(void *)(v9 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v12 = v9 + 112 * v11;
  uint64_t v14 = *(void *)(v12 + 32);
  uint64_t v13 = *(void *)(v12 + 40);
  uint64_t v15 = *(void *)(v12 + 48);
  uint64_t v16 = *(void *)(v12 + 56);
  long long v17 = *(_OWORD *)(v12 + 64);
  long long v18 = *(_OWORD *)(v12 + 80);
  long long v19 = *(_OWORD *)(v12 + 96);
  long long v20 = *(_OWORD *)(v12 + 112);
  LOBYTE(v12) = *(unsigned char *)(v12 + 128);
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v13;
  *(void *)(a3 + 16) = v15;
  *(void *)(a3 + 24) = v16;
  *(_OWORD *)(a3 + 32) = v17;
  *(_OWORD *)(a3 + 48) = v18;
  *(_OWORD *)(a3 + 64) = v19;
  *(_OWORD *)(a3 + 80) = v20;
  *(unsigned char *)(a3 + 96) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t MeshInstanceCollection.insert(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  char v15 = *(unsigned char *)(a1 + 96);
  uint64_t v16 = v1[1];
  if (!*(void *)(v16 + 16)) {
    goto LABEL_7;
  }
  char v22 = *(unsigned char *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 88);
  uint64_t v24 = *(void *)(a1 + 72);
  uint64_t v25 = *(void *)(a1 + 56);
  uint64_t v26 = *(void *)(a1 + 40);
  uint64_t v21 = *v2;
  swift_bridgeObjectRetain();
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = v25;
    uint64_t v7 = v26;
    uint64_t v13 = v23;
    uint64_t v11 = v24;
    char v15 = v22;
LABEL_7:
    v27[0] = v4;
    v27[1] = v3;
    v27[2] = v6;
    v27[3] = v5;
    v27[4] = v8;
    v27[5] = v7;
    v27[6] = v10;
    v27[7] = v9;
    unsigned __int8 v27[8] = v12;
    v27[9] = v11;
    void v27[10] = v14;
    v27[11] = v13;
    char v28 = v15;
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.subscript.setter(v27, v4, v3);
    return 1;
  }
  unint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * result);
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v20 = *(void *)(v21 + 16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    if (v19 < v20) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t MeshInstanceCollection.update(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 80);
  v7[4] = *(_OWORD *)(a1 + 64);
  v7[5] = v3;
  char v8 = *(unsigned char *)(a1 + 96);
  long long v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v5;
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.updateValue(_:forKey:)((uint64_t)v7, *(uint64_t *)&v7[0], *((uint64_t *)&v7[0] + 1), a2);
  swift_bridgeObjectRelease();
  return outlined release of IKRig.Constraint((uint64_t)v7);
}

uint64_t MeshInstanceCollection.remove(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
  {
    *(unsigned char *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v4[1];
  uint64_t v23 = v12;
  v4[1] = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v12 = v23;
  }
  swift_bridgeObjectRelease();
  unint64_t v13 = *(void *)(*(void *)(v12 + 56) + 8 * v8);
  specialized _NativeDictionary._delete(at:)(v8, v12);
  v4[1] = v12;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v13 >= *(void *)(*v4 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v14 = *v4 + 112 * v13;
  uint64_t v16 = *(void *)(v14 + 32);
  uint64_t v15 = *(void *)(v14 + 40);
  uint64_t v17 = *(void *)(v14 + 48);
  uint64_t v18 = *(void *)(v14 + 56);
  long long v19 = *(_OWORD *)(v14 + 64);
  long long v20 = *(_OWORD *)(v14 + 80);
  long long v21 = *(_OWORD *)(v14 + 96);
  long long v22 = *(_OWORD *)(v14 + 112);
  LOBYTE(v14) = *(unsigned char *)(v14 + 128);
  *(void *)a3 = v16;
  *(void *)(a3 + 8) = v15;
  *(void *)(a3 + 16) = v17;
  *(void *)(a3 + 24) = v18;
  *(_OWORD *)(a3 + 32) = v19;
  *(_OWORD *)(a3 + 48) = v20;
  *(_OWORD *)(a3 + 64) = v21;
  *(_OWORD *)(a3 + 80) = v22;
  *(unsigned char *)(a3 + 96) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.remove(at:)(v13, (uint64_t)&v23);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t MeshInstanceCollection.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(unsigned char *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *v1 + 112 * v2;
    uint64_t v6 = *(void *)(v4 + 32);
    uint64_t v5 = *(void *)(v4 + 40);
    uint64_t v7 = *(void *)(v4 + 48);
    uint64_t v8 = *(void *)(v4 + 56);
    long long v9 = *(_OWORD *)(v4 + 64);
    long long v10 = *(_OWORD *)(v4 + 80);
    long long v11 = *(_OWORD *)(v4 + 96);
    long long v12 = *(_OWORD *)(v4 + 112);
    LOBYTE(v4) = *(unsigned char *)(v4 + 128);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 80) = v12;
    *(unsigned char *)(a1 + 96) = v4;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance MeshInstanceCollection.Iterator@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(unsigned char *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *v1 + 112 * v2;
    uint64_t v6 = *(void *)(v4 + 32);
    uint64_t v5 = *(void *)(v4 + 40);
    uint64_t v7 = *(void *)(v4 + 48);
    uint64_t v8 = *(void *)(v4 + 56);
    long long v9 = *(_OWORD *)(v4 + 64);
    long long v10 = *(_OWORD *)(v4 + 80);
    long long v11 = *(_OWORD *)(v4 + 96);
    long long v12 = *(_OWORD *)(v4 + 112);
    LOBYTE(v4) = *(unsigned char *)(v4 + 128);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 80) = v12;
    *(unsigned char *)(a1 + 96) = v4;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MeshInstanceCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance MeshModelCollection(a1, a2, (uint64_t (*)(void, void))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MeshInstanceCollection(void *a1, uint64_t a2, unint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t MeshInstanceCollection.startIndex.getter()
{
  return 0;
}

unint64_t MeshInstanceCollection.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(*(void *)v2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v3 = *(void *)v2 + 112 * result;
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v6 = *(void *)(v3 + 48);
  uint64_t v7 = *(void *)(v3 + 56);
  long long v8 = *(_OWORD *)(v3 + 64);
  long long v9 = *(_OWORD *)(v3 + 80);
  long long v10 = *(_OWORD *)(v3 + 96);
  long long v11 = *(_OWORD *)(v3 + 112);
  LOBYTE(v3) = *(unsigned char *)(v3 + 128);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)(a2 + 48) = v9;
  *(_OWORD *)(a2 + 64) = v10;
  *(_OWORD *)(a2 + 80) = v11;
  *(unsigned char *)(a2 + 96) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MeshInstanceCollection(void (***a1)(void **a1), unint64_t *a2))()
{
  uint64_t v4 = (void (**)(void **))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = MeshInstanceCollection.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance IKRig.JointCollection;
}

void (*MeshInstanceCollection.subscript.read(void (**a1)(void **a1), unint64_t a2))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x61uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)v2 + 112 * a2;
    uint64_t v9 = *(void *)(v7 + 32);
    uint64_t v8 = *(void *)(v7 + 40);
    uint64_t v10 = *(void *)(v7 + 48);
    uint64_t v11 = *(void *)(v7 + 56);
    long long v12 = *(_OWORD *)(v7 + 64);
    long long v13 = *(_OWORD *)(v7 + 80);
    long long v14 = *(_OWORD *)(v7 + 96);
    long long v15 = *(_OWORD *)(v7 + 112);
    LOBYTE(v7) = *(unsigned char *)(v7 + 128);
    *(void *)uint64_t v6 = v9;
    *((void *)v6 + 1) = v8;
    *((void *)v6 + 2) = v10;
    *((void *)v6 + 3) = v11;
    *((_OWORD *)v6 + 2) = v12;
    *((_OWORD *)v6 + 3) = v13;
    *((_OWORD *)v6 + 4) = v14;
    *((_OWORD *)v6 + 5) = v15;
    *((unsigned char *)v6 + 96) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return MeshInstanceCollection.subscript.read;
  }
  __break(1u);
  return result;
}

void MeshInstanceCollection.subscript.read(void **a1)
{
  BOOL v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

double MeshInstanceCollection.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  MeshInstanceCollection.init(_:)(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MeshInstanceCollection@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  MeshInstanceCollection.init(_:)(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t MeshInstanceCollection.customMirror.getter@<X0>(unint64_t *a1@<X8>)
{
  return MeshModelCollection.customMirror.getter(&demangling cache variable for type metadata for [MeshResource.Instance], &lazy protocol witness table cache variable for type [MeshResource.Instance] and conformance [A], (unint64_t *)&type metadata for MeshInstanceCollection, a1);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshInstanceCollection@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection(a1, &demangling cache variable for type metadata for [MeshResource.Instance], &lazy protocol witness table cache variable for type [MeshResource.Instance] and conformance [A], a2);
}

uint64_t MeshSkeletonCollection.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MeshSkeletonCollection.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_28:
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v3;
    a2[1] = v5;
    return result;
  }
  uint64_t v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v11 = *(v7 - 2);
    uint64_t v10 = *(v7 - 1);
    uint64_t v12 = *v7;
    uint64_t v13 = v5[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    if (v13)
    {
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      if (v15)
      {
        unint64_t v16 = *(void *)(v5[7] + 8 * v14);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          if ((v16 & 0x8000000000000000) != 0)
          {
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
        }
        if (v16 >= v3[2]) {
          goto LABEL_31;
        }
        uint64_t v9 = &v3[3 * v16 + 6];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(v9 - 2) = v11;
        *(v9 - 1) = v10;
        goto LABEL_4;
      }
    }
    uint64_t v41 = v6;
    uint64_t v17 = v12;
    uint64_t v18 = v3;
    uint64_t v19 = v3[2];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = v11;
    char v22 = isUniquelyReferenced_nonNull_native;
    uint64_t v23 = v21;
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v10);
    uint64_t v26 = v5[2];
    BOOL v27 = (v24 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      break;
    }
    char v29 = v24;
    if (v5[3] >= v28)
    {
      if ((v22 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      uint64_t v30 = v23;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, v22);
      uint64_t v30 = v23;
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v10);
      if ((v29 & 1) != (v32 & 1)) {
        goto LABEL_32;
      }
      unint64_t v25 = v31;
    }
    uint64_t v3 = v18;
    uint64_t v12 = v17;
    if (v29)
    {
      *(void *)(v5[7] + 8 * v25) = v19;
      uint64_t v6 = v41;
    }
    else
    {
      v5[(v25 >> 6) + 8] |= 1 << v25;
      uint64_t v33 = (uint64_t *)(v5[6] + 16 * v25);
      *uint64_t v33 = v30;
      v33[1] = v10;
      *(void *)(v5[7] + 8 * v25) = v19;
      uint64_t v34 = v5[2];
      BOOL v35 = __OFADD__(v34, 1);
      uint64_t v36 = v34 + 1;
      uint64_t v6 = v41;
      if (v35) {
        goto LABEL_30;
      }
      void v5[2] = v36;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    }
    unint64_t v38 = v3[2];
    unint64_t v37 = v3[3];
    if (v38 >= v37 >> 1) {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v3);
    }
    v3[2] = v38 + 1;
    uint64_t v8 = &v3[3 * v38];
    _OWORD v8[4] = v30;
    uint64_t v8[5] = v10;
    uint64_t v9 = v8 + 6;
LABEL_4:
    *uint64_t v9 = v12;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v7 += 3;
    if (!--v6) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MeshSkeletonCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v4 = v3;
  uint64_t v6 = v3[1];
  if (!*(void *)(v6 + 16)) {
    goto LABEL_9;
  }
  uint64_t v8 = result;
  uint64_t v9 = *v4;
  swift_bridgeObjectRetain();
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v8, a2);
  if ((v10 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  unint64_t v11 = *(void *)(*(void *)(v6 + 56) + 8 * result);
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 >= *(void *)(v9 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v12 = (void *)(v9 + 24 * v11);
  uint64_t v13 = v12[5];
  uint64_t v14 = v12[6];
  *a3 = v12[4];
  a3[1] = v13;
  a3[2] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t MeshSkeletonCollection.insert(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = v1[1];
  if (!*(void *)(v6 + 16)) {
    goto LABEL_7;
  }
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain();
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.subscript.setter(v4, v3, v5, v4, v3);
    return 1;
  }
  unint64_t v10 = *(void *)(*(void *)(v6 + 56) + 8 * result);
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v11 = *(void *)(v7 + 16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    if (v10 < v11) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t MeshSkeletonCollection.update(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  swift_bridgeObjectRetain();
  specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(v3, v4, v5, v3, v4, a2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t MeshSkeletonCollection.remove(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v4[1];
  uint64_t v17 = v12;
  v4[1] = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v12 = v17;
  }
  swift_bridgeObjectRelease();
  unint64_t v13 = *(void *)(*(void *)(v12 + 56) + 8 * v8);
  specialized _NativeDictionary._delete(at:)(v8, v12);
  v4[1] = v12;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v13 >= *(void *)(*v4 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v14 = (void *)(*v4 + 24 * v13);
  uint64_t v15 = v14[5];
  uint64_t v16 = v14[6];
  *a3 = v14[4];
  a3[1] = v15;
  a3[2] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.remove(at:)(v13, (uint64_t)&v17);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t MeshModelCollection.removeAll()()
{
  swift_bridgeObjectRelease();
  *uint64_t v0 = MEMORY[0x263F8EE78];
  uint64_t result = swift_bridgeObjectRelease();
  v0[1] = MEMORY[0x263F8EE80];
  return result;
}

uint64_t MeshSkeletonCollection.Iterator.next()@<X0>(void *a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (void *)(*v1 + 24 * v2);
    uint64_t v5 = v4[5];
    uint64_t v6 = v4[6];
    *a1 = v4[4];
    a1[1] = v5;
    a1[2] = v6;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance MeshSkeletonCollection.Iterator@<X0>(void *a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (void *)(*v1 + 24 * v2);
    uint64_t v5 = v4[5];
    uint64_t v6 = v4[6];
    *a1 = v4[4];
    a1[1] = v5;
    a1[2] = v6;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MeshSkeletonCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance MeshModelCollection(a1, a2, (uint64_t (*)(void, void))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance MeshModelCollection(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  uint64_t v4 = a3(*v3, v3[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance MeshSkeletonCollection(void *a1, void *a2, unint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t MeshSkeletonCollection.startIndex.getter()
{
  return 0;
}

unint64_t MeshSkeletonCollection.subscript.getter@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(*(void *)v2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  unint64_t v3 = (void *)(*(void *)v2 + 24 * result);
  uint64_t v4 = v3[5];
  uint64_t v5 = v3[6];
  *a2 = v3[4];
  a2[1] = v4;
  a2[2] = v5;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance MeshSkeletonCollection(uint64_t (**a1)(), unint64_t *a2))()
{
  uint64_t v4 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v4;
  *((void *)v4 + 4) = MeshSkeletonCollection.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance IKRig.JointCollection;
}

uint64_t (*MeshSkeletonCollection.subscript.read(uint64_t (*result)(), unint64_t a2))()
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)(*(void *)v2 + 24 * a2);
    uint64_t v5 = v4[5];
    uint64_t v6 = v4[6];
    *(void *)unint64_t v3 = v4[4];
    *((void *)v3 + 1) = v5;
    *((void *)v3 + 2) = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return MeshSkeletonCollection.subscript.read;
  }
  __break(1u);
  return result;
}

uint64_t MeshSkeletonCollection.subscript.read()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance MeshModelCollection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(void, uint64_t, void)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result = a4(*a1, a2, *a3);
  *(void *)a5 = result;
  *(unsigned char *)(a5 + 8) = v7 & 1;
  return result;
}

double MeshSkeletonCollection.init(arrayLiteral:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  MeshSkeletonCollection.init(_:)(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MeshSkeletonCollection@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  MeshSkeletonCollection.init(_:)(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t MeshSkeletonCollection.customMirror.getter@<X0>(unint64_t *a1@<X8>)
{
  return MeshModelCollection.customMirror.getter(&demangling cache variable for type metadata for [MeshResource.Skeleton], &lazy protocol witness table cache variable for type [MeshResource.Skeleton] and conformance [A], (unint64_t *)&type metadata for MeshSkeletonCollection, a1);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshSkeletonCollection@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance MeshModelCollection(a1, &demangling cache variable for type metadata for [MeshResource.Skeleton], &lazy protocol witness table cache variable for type [MeshResource.Skeleton] and conformance [A], a2);
}

uint64_t MeshResource.Part.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Part.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*MeshResource.Part.id.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Part.materialIndex.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t MeshResource.Part.materialIndex.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  *(unsigned char *)(v1 + 56) = 0;
  return result;
}

uint64_t (*MeshResource.Part.materialIndex.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return MeshResource.Part.materialIndex.modify;
}

uint64_t MeshResource.Part.materialIndex.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    *(unsigned char *)(*(void *)result + 56) = 0;
  }
  return result;
}

double key path getter for MeshResource.Part.triangleIndices : MeshResource.Part@<D0>(uint64_t a1@<X8>)
{
  MeshResource.Part.triangleIndices.getter((uint64_t)v6);
  char v2 = v8;
  long long v3 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = v6[3];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(_OWORD *)(a1 + 48) = v4;
  double result = *(double *)&v7;
  *(_OWORD *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 80) = v2;
  return result;
}

uint64_t key path setter for MeshResource.Part.triangleIndices : MeshResource.Part(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  char v10 = *(unsigned char *)(a1 + 80);
  v12[0] = *(void *)a1;
  v12[1] = v1;
  void v12[2] = v2;
  v12[3] = v3;
  v12[4] = v4;
  uint64_t v12[5] = v5;
  _OWORD v12[6] = v6;
  v12[7] = v7;
  unsigned char v12[8] = v8;
  v12[9] = v9;
  char v13 = v10;
  outlined copy of MeshBuffer<SIMD3<Float>>?(v12[0]);
  return MeshResource.Part.triangleIndices.setter((uint64_t)v12);
}

uint64_t MeshResource.Part.triangleIndices.setter(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v1 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v15 = *(void *)a1;
    uint64_t v2 = *(void *)(a1 + 24);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 48);
    char v6 = *(unsigned char *)(a1 + 80);
    *((void *)&v17 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<UInt32>);
    uint64_t v18 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    uint64_t v7 = swift_allocObject();
    *(void *)&long long v16 = v7;
    uint64_t v8 = one-time initialization token for triangleIndices;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v8 != -1) {
      swift_once();
    }
    char v9 = 2;
    if (static MeshBuffers.Identifier.triangleIndices != 0x6972547865646E69 || unk_2681C1CD0 != 0xEE0073656C676E61)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        char v9 = 2;
      }
      else {
        char v9 = v6;
      }
    }
    strcpy((char *)(v7 + 16), "indexTriangles");
    *(unsigned char *)(v7 + 31) = -18;
    *(_WORD *)(v7 + 32) = 0;
    *(void *)(v7 + 40) = v11;
    *(unsigned char *)(v7 + 48) = v9;
    *(unsigned char *)(v7 + 49) = v4;
    *(unsigned char *)(v7 + 50) = BYTE1(v4) & 1;
    *(void *)(v7 + 56) = v15;
    *(void *)(v7 + 64) = v1;
    *(void *)(v7 + 72) = v14;
    *(void *)(v7 + 80) = v2;
    *(void *)(v7 + 88) = v13;
    *(void *)(v7 + 96) = v3;
    *(void *)(v7 + 104) = v12;
    *(void *)(v7 + 112) = v5;
    *(unsigned char *)(v7 + 120) = v4;
    *(unsigned char *)(v7 + 121) = BYTE1(v4) & 1;
    *(void *)(v7 + 128) = v11;
    *(unsigned char *)(v7 + 136) = v6;
    specialized Dictionary.subscript.setter((uint64_t)&v16, 0x6972547865646E69, 0xEE0073656C676E61, 0);
    return outlined consume of MeshBuffer<SIMD3<Float>>?(v15);
  }
  else
  {
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    return specialized Dictionary.subscript.setter((uint64_t)&v16, 0x6972547865646E69, 0xEE0073656C676E61, 0);
  }
}

void (*MeshResource.Part.triangleIndices.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0xB0uLL);
  *a1 = v3;
  *((void *)v3 + 21) = v1;
  uint64_t v4 = *v1;
  if (*(void *)(v4 + 16)
    && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(0x6972547865646E69, 0xEE0073656C676E61, 0), (v6 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(void *)(v4 + 56) + 40 * v5, (uint64_t)v3 + 128);
    outlined init with take of BindableDataInternal((long long *)v3 + 8, (uint64_t)v3 + 88);
    uint64_t v7 = *((void *)v3 + 14);
    uint64_t v8 = *((void *)v3 + 15);
    __swift_project_boxed_opaque_existential_1((void *)v3 + 11, v7);
    (*(void (**)(void, uint64_t, uint64_t))(v8 + 56))(MEMORY[0x263F8E8F8], v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3 + 88);
  }
  else
  {
    *((unsigned char *)v3 + 80) = 0;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)uint64_t v3 = 0u;
  }
  return MeshResource.Part.triangleIndices.modify;
}

void MeshResource.Part.triangleIndices.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = v3[6];
  uint64_t v11 = v3[7];
  uint64_t v12 = v3[8];
  uint64_t v13 = v3[9];
  char v14 = *((unsigned char *)v3 + 80);
  v15[0] = v4;
  v15[1] = v5;
  void v15[2] = v6;
  v15[3] = v7;
  v15[4] = v8;
  uint64_t v15[5] = v9;
  uint64_t v15[6] = v10;
  v15[7] = v11;
  uint64_t v15[8] = v12;
  v15[9] = v13;
  char v16 = v14;
  if (a2)
  {
    outlined copy of MeshBuffer<SIMD3<Float>>?(v4);
    MeshResource.Part.triangleIndices.setter((uint64_t)v15);
    outlined consume of MeshBuffer<SIMD3<Float>>?(*v3);
  }
  else
  {
    MeshResource.Part.triangleIndices.setter((uint64_t)v15);
  }

  free(v3);
}

double key path getter for MeshResource.Part.subscript<A>(_:) : <A>MeshResource.PartA@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  MeshResource.Part.subscript.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8), (uint64_t)v8);
  char v4 = v10;
  long long v5 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v5;
  long long v6 = v8[3];
  *(_OWORD *)(a3 + 32) = v8[2];
  *(_OWORD *)(a3 + 48) = v6;
  double result = *(double *)&v9;
  *(_OWORD *)(a3 + 64) = v9;
  *(unsigned char *)(a3 + 80) = v4;
  return result;
}

uint64_t key path setter for MeshResource.Part.subscript<A>(_:) : <A>MeshResource.PartA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  char v15 = *(unsigned char *)(a1 + 80);
  v17[0] = *(void *)a1;
  v17[1] = v6;
  uint64_t v17[2] = v7;
  v17[3] = v8;
  _OWORD v17[4] = v9;
  v17[5] = v10;
  v17[6] = v11;
  v17[7] = v12;
  void v17[8] = v13;
  v17[9] = v14;
  char v18 = v15;
  outlined copy of MeshBuffer<SIMD3<Float>>?(v17[0]);
  return specialized MeshResource.Part.subscript.setter((uint64_t)v17, a3, v5);
}

void (*MeshResource.Part.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v8 = malloc(0x80uLL);
  *a1 = v8;
  v8[12] = a4;
  v8[13] = v4;
  v8[11] = a3;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = v9;
  v8[14] = v9;
  v8[15] = malloc(*(void *)(v9 + 64));
  (*(void (**)(void))(v10 + 16))();
  MeshBufferDictionary.subscript.getter(*v4, a3, a4, (uint64_t)v8);
  return MeshResource.Part.subscript.modify;
}

void MeshResource.Part.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = v3[6];
  uint64_t v11 = v3[7];
  uint64_t v12 = v3[8];
  uint64_t v13 = v3[9];
  char v14 = *((unsigned char *)v3 + 80);
  uint64_t v16 = v3[14];
  char v15 = (void *)v3[15];
  uint64_t v17 = v3[11];
  v18[0] = v4;
  v18[1] = v5;
  void v18[2] = v6;
  void v18[3] = v7;
  _OWORD v18[4] = v8;
  v18[5] = v9;
  v18[6] = v10;
  v18[7] = v11;
  v18[8] = v12;
  v18[9] = v13;
  char v19 = v14;
  if (a2)
  {
    outlined copy of MeshBuffer<SIMD3<Float>>?(v4);
    specialized MeshResource.Part.subscript.setter((uint64_t)v18, (uint64_t)v15, v17);
    (*(void (**)(void *, uint64_t))(v16 + 8))(v15, v17);
    outlined consume of MeshBuffer<SIMD3<Float>>?(*v3);
  }
  else
  {
    specialized MeshResource.Part.subscript.setter((uint64_t)v18, (uint64_t)v15, v17);
    (*(void (**)(void *, uint64_t))(v16 + 8))(v15, v17);
  }
  free(v15);

  free(v3);
}

uint64_t protocol witness for MeshBufferContainer.buffers.getter in conformance MeshResource.Part()
{
  return specialized _NativeDictionary.mapValues<A>(_:)(*v0);
}

uint64_t protocol witness for MeshBufferContainer.subscript.setter in conformance MeshResource.Part(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized MeshResource.Part.subscript.setter(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v5(a2, a3);
}

void (*protocol witness for MeshBufferContainer.subscript.modify in conformance MeshResource.Part(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  _OWORD v8[4] = MeshResource.Part.subscript.modify(v8, a2, a3, a4);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for Identifiable.id.getter in conformance MeshResource.Part@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = *(void *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MeshResource.Model.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Model.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshResource.Model.id.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*MeshResource.Model.parts.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*MeshResource.Model.levels.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.Model.init(id:parts:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  MeshPartCollection.init(_:)(a3, &v9);
  __n128 v8 = v9;
  _Proto_MeshLevelCollection_v1.init(_:)(MEMORY[0x263F8EE78], (uint64_t *)&v9);
  __n128 result = v9;
  a4->n128_u64[0] = a1;
  a4->n128_u64[1] = a2;
  a4[1] = v8;
  a4[2] = result;
  return result;
}

uint64_t MeshResource.Model.init(id:descriptors:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for MeshResource();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = MeshResource.init(from:)(v7);
  swift_bridgeObjectRelease();
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = a1;
  MeshResource.Contents.init(_:)(*(void *)(v8 + 16), (uint64_t *)&v16);
  uint64_t v10 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (v10[2])
  {
    uint64_t v11 = v10[6];
    uint64_t v12 = v10[7];
    uint64_t v13 = v10[8];
    uint64_t v15 = v10[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v17;
    a3[1] = a2;
    a3[2] = v11;
    a3[3] = v12;
    a3[4] = v13;
    a3[5] = v15;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *char v14 = xmmword_2283349E0;
    swift_willThrow();
    return swift_release();
  }
  return result;
}

uint64_t static MeshResource.generate(from:)()
{
  type metadata accessor for MeshResource();
  uint64_t v0 = swift_bridgeObjectRetain();
  return MeshResource.init(from:)(v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 128) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](static MeshResource.generate(from:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Mutable;
  uint64_t v5;
  void *v6;
  long long v8;
  long long v9;
  long long v10;
  uint64_t (__cdecl *v11)();
  _OWORD v12[4];
  uint64_t v13;
  uint64_t v14;

  uint64_t v13 = v0;
  swift_release();
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  Mutable = REAssetServiceMeshAssetCreateMutable();
  if ((id)REAssetGetSwiftObject())
  {
    type metadata accessor for MeshResource();
    uint64_t v5 = swift_dynamicCastClass();
    if (v5) {
      goto LABEL_5;
    }
    swift_unknownObjectRelease();
  }
  type metadata accessor for MeshResource();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = Mutable;
  RERetain();
  REAssetSetSwiftObject();
LABEL_5:
  *(void *)(v0 + 136) = v5;
  __n128 v9 = *(_OWORD *)(v0 + 96);
  uint64_t v10 = *(_OWORD *)(v0 + 80);
  uint64_t v8 = *(_OWORD *)(v0 + 112);
  RERelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v12[0] = v10;
  v12[1] = v9;
  void v12[2] = v8;
  MeshResource.replace(with:)((uint64_t)v12);
  uint64_t v11 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                              + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v6;
  *uint64_t v6 = v0;
  v6[1] = static MeshResource.generate(from:);
  return v11();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[19] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](static MeshResource.generate(from:), 0, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v4 = v2[17];
    return v3(v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void v35[2];
  __int16 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;

  long long v51 = v0;
  uint64_t v1 = v0[13];
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v34 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v34;
    uint64_t v4 = v1 + 64;
    while (1)
    {
      uint64_t v28 = v3;
      char v29 = v2;
      uint64_t v5 = *(void *)(v4 - 24);
      uint64_t v7 = *(void *)(v4 - 16);
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v8 = *(unsigned char *)v4;
      __n128 v9 = *(void *)(v4 + 8);
      uint64_t v10 = *(unsigned char *)(v4 + 24);
      uint64_t v11 = *(void *)(v4 + 32);
      uint64_t v12 = *(void *)(v4 + 40);
      uint64_t v13 = *(void *)(v4 + 56);
      unint64_t v31 = *(void *)(v4 + 16);
      char v32 = *(void *)(v4 + 48);
      char v14 = *(void *)(v4 + 64);
      unint64_t v38 = *(void *)(v4 - 32);
      unint64_t v39 = v5;
      long long v40 = v7;
      uint64_t v41 = v6;
      uint64_t v42 = v8;
      long long v43 = v9;
      long long v44 = v31;
      uint64_t v45 = v10;
      long long v46 = v11;
      long long v47 = v12;
      uint64_t v48 = v32;
      uint64_t v49 = v13;
      long long v50 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v33 = v6;
      uint64_t v15 = v6;
      uint64_t v16 = v8;
      outlined copy of MeshDescriptor.Materials(v15, v8);
      outlined copy of MeshDescriptor.Primitives?(v9, v31, v10);
      outlined copy of MeshDescriptor.Skinning?(v11, v12);
      MeshDescriptor.makeGeomMesh()((uint64_t)v35);
      uint64_t v17 = v35[0];
      if (v37) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MeshDescriptor.Materials(v33, v8);
      outlined consume of MeshDescriptor.Primitives?(v9, v31, v10);
      outlined consume of StateMachineGraph?(v11, v12);
      uint64_t v3 = v28;
      char v19 = *(void *)(v28 + 16);
      char v18 = *(void *)(v28 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v3 = v28;
      }
      v4 += 104;
      *(void *)(v3 + 16) = v19 + 1;
      *(void *)(v3 + 8 * v19 + 32) = v17;
      uint64_t v2 = v29 - 1;
      if (v29 == 1)
      {
        uint64_t v0 = (void *)v27;
        goto LABEL_11;
      }
    }
    long long v20 = v35[1];
    uint64_t v21 = v36;
    uint64_t v30 = v36;
    *(void *)(v27 + 80) = v35[0];
    *(void *)(v27 + 88) = v20;
    *(_WORD *)(v27 + 96) = v21;
    lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
    swift_willThrowTypedImpl();
    swift_allocError();
    *(void *)char v22 = v17;
    *(void *)(v22 + 8) = v20;
    *(_WORD *)(v22 + 16) = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(v33, v16);
    outlined consume of MeshDescriptor.Primitives?(v9, v31, v10);
    outlined consume of StateMachineGraph?(v11, v12);
    swift_release();
    uint64_t v23 = *(uint64_t (**)(void))(v27 + 8);
    return v23();
  }
  else
  {
LABEL_11:
    v0[14] = v3;
    v0[15] = REMeshCompileOptionsCreate();
    type metadata accessor for MainActor();
    v0[16] = static MainActor.shared.getter();
    uint64_t v26 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x270FA2498](static MeshResource.generate(from:), v26, v25);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  _OWORD *v7;
  uint64_t v9;

  swift_release();
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  uint64_t v4 = REAssetManagerMeshAssetCreateFromModelsWithOptionsNullable();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if (v4)
  {
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for MeshResource();
      uint64_t v5 = swift_dynamicCastClass();
      if (v5)
      {
LABEL_6:
        v0[17] = v5;
        RERelease();
        uint64_t v6 = static MeshResource.generate(from:);
        goto LABEL_8;
      }
      swift_unknownObjectRelease();
    }
    type metadata accessor for MeshResource();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    RERetain();
    REAssetSetSwiftObject();
    goto LABEL_6;
  }
  lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
  v0[18] = swift_allocError();
  *uint64_t v7 = xmmword_228323FE0;
  swift_willThrow();
  uint64_t v6 = static MeshResource.generate(from:);
LABEL_8:
  return MEMORY[0x270FA2498](v6, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t i;
  void *v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(*(void *)(v0 + 112) + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v1; ++i)
      RERelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t (*)(void))((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                         + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v3;
  *uint64_t v3 = v0;
  v3[1] = static MeshResource.generate(from:);
  return v5();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  RERelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = static MeshResource.generate(from:);
  }
  else {
    uint64_t v2 = static MeshResource.generate(from:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  RERelease();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 136);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  RERelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 48);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  type metadata accessor for MeshResource();
  swift_retain();
  return MeshResource.init(from:)();
}

uint64_t MeshResource.contents.getter@<X0>(uint64_t *a1@<X8>)
{
  return MeshResource.Contents.init(_:)(*(void *)(v1 + 16), a1);
}

uint64_t protocol witness for Identifiable.id.getter in conformance MeshResource.Model@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MeshResource.Instance.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Instance.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshResource.Instance.id.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Instance.model.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Instance.model.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MeshResource.Instance.model.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.Instance.transform.getter()
{
  return v0[2];
}

void MeshResource.Instance.transform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
}

uint64_t (*MeshResource.Instance.transform.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MeshResource.Instance.levelOptions.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 96);
}

unsigned char *MeshResource.Instance.levelOptions.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 96) = *result;
  return result;
}

uint64_t (*MeshResource.Instance.levelOptions.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Instance.init(id:model:at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  outlined init with take of Transform?(a5, (uint64_t)v25, &demangling cache variable for type metadata for simd_float4x4?);
  uint64_t v9 = v25[0];
  uint64_t v8 = v25[1];
  uint64_t v11 = v25[2];
  uint64_t v10 = v25[3];
  uint64_t v12 = v25[4];
  uint64_t v13 = v25[5];
  uint64_t v14 = v25[6];
  uint64_t v20 = v25[7];
  uint64_t result = outlined init with take of Transform?(a5, (uint64_t)v26, &demangling cache variable for type metadata for simd_float4x4?);
  if (v26[64])
  {
    long long v16 = *(_OWORD *)&zmmword_22830EC90[48];
    long long v17 = *(_OWORD *)&zmmword_22830EC90[32];
    long long v18 = *(_OWORD *)&zmmword_22830EC90[16];
    long long v19 = *(_OWORD *)zmmword_22830EC90;
  }
  else
  {
    *(void *)&long long v19 = v9;
    *((void *)&v19 + 1) = v8;
    *(void *)&long long v18 = v11;
    *((void *)&v18 + 1) = v10;
    *(void *)&long long v17 = v12;
    *((void *)&v17 + 1) = v13;
    *(void *)&long long v16 = v14;
    *((void *)&v16 + 1) = v20;
  }
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(_OWORD *)(a6 + 32) = v19;
  *(_OWORD *)(a6 + 48) = v18;
  *(_OWORD *)(a6 + 64) = v17;
  *(_OWORD *)(a6 + 80) = v16;
  *(unsigned char *)(a6 + 96) = 1;
  return result;
}

uint64_t MeshResource.Contents.models.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 MeshResource.Contents.models.setter(__n128 *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*MeshResource.Contents.models.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Model.parts.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 MeshResource.Model.parts.setter(__n128 *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*MeshResource.Contents.instances.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Contents.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  *a1 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  a1[1] = v3;
  a1[2] = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(v2);
  a1[3] = v4;
  uint64_t result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(v2);
  a1[4] = result;
  a1[5] = v6;
  return result;
}

uint64_t MeshResource.Contents.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v4 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v6 = v5;
  uint64_t v122 = v4;
  uint64_t v123 = v5;
  uint64_t v7 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(v3);
  uint64_t v9 = v8;
  uint64_t v124 = (void *)v7;
  uint64_t v125 = v8;
  uint64_t result = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(v3);
  uint64_t v126 = result;
  uint64_t v127 = v11;
  if (!a1)
  {
    uint64_t v96 = result;
    uint64_t v97 = v11;
    goto LABEL_77;
  }
  uint64_t v12 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t ModelCount = REMeshAssetGetModelCount();
  if (ModelCount < 0) {
    goto LABEL_87;
  }
  if (ModelCount)
  {
    uint64_t v14 = 0;
    uint64_t v114 = ModelCount;
    while (1)
    {
      REMeshAssetGetModelName();
      uint64_t v16 = String.init(cString:)();
      uint64_t v18 = v17;
      long long v19 = specialized static MeshResource.Part.unpack(coreAsset:modelIndex:)(a1, v14);
      swift_bridgeObjectRetain();
      MeshPartCollection.init(_:)((uint64_t)v19, &v119);
      uint64_t v21 = (uint64_t)v119;
      uint64_t v20 = v120;
      uint64_t v22 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v24 = v23;
      uint64_t v25 = v123;
      if (!*(void *)(v123 + 16)) {
        goto LABEL_14;
      }
      char v116 = v12;
      uint64_t v26 = a1;
      uint64_t v27 = v122;
      swift_bridgeObjectRetain();
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v18);
      if ((v29 & 1) == 0) {
        break;
      }
      unint64_t v30 = *(void *)(*(void *)(v25 + 56) + 8 * v28);
      if ((v30 & 0x8000000000000000) != 0) {
        goto LABEL_80;
      }
      unint64_t v31 = *(void *)(v27 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      BOOL v32 = v30 >= v31;
      a1 = v26;
      uint64_t v12 = v116;
      if (v32) {
        goto LABEL_81;
      }
LABEL_15:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v119 = v12;
      unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      uint64_t v36 = v12[2];
      BOOL v37 = (v34 & 1) == 0;
      uint64_t v38 = v36 + v37;
      if (__OFADD__(v36, v37))
      {
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_92:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      char v39 = v34;
      if (v12[3] >= v38)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v12 = v119;
          if (v34) {
            goto LABEL_5;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v12 = v119;
          if (v39) {
            goto LABEL_5;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
        unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
        if ((v39 & 1) != (v41 & 1)) {
          goto LABEL_91;
        }
        unint64_t v35 = v40;
        uint64_t v12 = v119;
        if (v39)
        {
LABEL_5:
          uint64_t v15 = (uint64_t *)(v12[7] + 16 * v35);
          swift_bridgeObjectRelease();
          *uint64_t v15 = v16;
          v15[1] = v18;
          goto LABEL_6;
        }
      }
      v12[(v35 >> 6) + 8] |= 1 << v35;
      *(void *)(v12[6] + 8 * v35) = v14;
      uint64_t v42 = (uint64_t *)(v12[7] + 16 * v35);
      *uint64_t v42 = v16;
      v42[1] = v18;
      uint64_t v43 = v12[2];
      BOOL v44 = __OFADD__(v43, 1);
      uint64_t v45 = v43 + 1;
      if (v44) {
        goto LABEL_79;
      }
      void v12[2] = v45;
LABEL_6:
      ++v14;
      swift_bridgeObjectRelease();
      if (v114 == v14) {
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease();
    a1 = v26;
    uint64_t v12 = v116;
LABEL_14:
    v128[0] = v16;
    v128[1] = v18;
    v128[2] = v21;
    v128[3] = v20;
    v128[4] = v22;
    v128[5] = v24;
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.subscript.setter(v128, v16, v18);
    goto LABEL_15;
  }
LABEL_26:
  uint64_t InstanceCount = REMeshAssetGetInstanceCount();
  if (InstanceCount < 0) {
    goto LABEL_88;
  }
  uint64_t v47 = InstanceCount;
  if (!InstanceCount) {
    goto LABEL_64;
  }
  uint64_t v48 = 0;
  uint64_t v108 = InstanceCount;
  while (1)
  {
    REMeshAssetGetInstanceName();
    uint64_t v49 = String.init(cString:)();
    uint64_t v51 = v50;
    REMeshAssetGetInstanceTransform();
    long long v111 = v52;
    long long v112 = v53;
    long long v113 = v54;
    long long v115 = v55;
    unsigned int InstanceModelIndex = REMeshAssetGetInstanceModelIndex();
    if (!v12[2] || (unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(InstanceModelIndex), (v58 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    long long v59 = (uint64_t *)(v12[7] + 16 * v57);
    uint64_t v60 = v59[1];
    uint64_t v110 = *v59;
    BOOL v62 = v124;
    BOOL v61 = v125;
    uint64_t v63 = v125[2];
    swift_bridgeObjectRetain();
    if (!v63) {
      goto LABEL_44;
    }
    swift_bridgeObjectRetain();
    unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v51);
    if ((v65 & 1) == 0) {
      break;
    }
    unint64_t v66 = *(void *)(v61[7] + 8 * v64);
    if ((v66 & 0x8000000000000000) != 0) {
      goto LABEL_84;
    }
    unint64_t v67 = v62[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v66 >= v67) {
      goto LABEL_85;
    }
LABEL_30:
    if (v47 == ++v48) {
      goto LABEL_64;
    }
  }
  swift_bridgeObjectRelease();
  if (!v61[2])
  {
LABEL_44:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    goto LABEL_45;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v51);
  if ((v69 & 1) == 0)
  {
LABEL_45:
    uint64_t v109 = v60;
    uint64_t v73 = v62;
    uint64_t v118 = v62[2];
    swift_bridgeObjectRetain();
    char v74 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v75 = v49;
    char v76 = v74;
    uint64_t v119 = v61;
    uint64_t v77 = v75;
    unint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v51);
    uint64_t v80 = v61[2];
    BOOL v81 = (v78 & 1) == 0;
    uint64_t v82 = v80 + v81;
    if (__OFADD__(v80, v81)) {
      goto LABEL_83;
    }
    char v83 = v78;
    if (v61[3] >= v82)
    {
      if ((v76 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      uint64_t v84 = v77;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v82, v76);
      uint64_t v84 = v77;
      unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v51);
      if ((v83 & 1) != (v86 & 1)) {
        goto LABEL_92;
      }
      unint64_t v79 = v85;
    }
    BOOL v62 = v73;
    uint64_t v87 = v119;
    if (v83)
    {
      *(void *)(v119[7] + 8 * v79) = v118;
    }
    else
    {
      v119[(v79 >> 6) + 8] |= 1 << v79;
      uint64_t v88 = (uint64_t *)(v87[6] + 16 * v79);
      *uint64_t v88 = v84;
      v88[1] = v51;
      *(void *)(v87[7] + 8 * v79) = v118;
      uint64_t v89 = v87[2];
      BOOL v44 = __OFADD__(v89, 1);
      uint64_t v90 = v89 + 1;
      if (v44) {
        goto LABEL_86;
      }
      v87[2] = v90;
      swift_bridgeObjectRetain();
    }
    uint64_t v125 = v87;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v47 = v108;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      BOOL v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
    }
    unint64_t v92 = v62[2];
    unint64_t v91 = v62[3];
    if (v92 >= v91 >> 1) {
      BOOL v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v91 > 1), v92 + 1, 1, v62);
    }
    v62[2] = v92 + 1;
    uint64_t v93 = &v62[14 * v92];
    v93[4] = v84;
    v93[5] = v51;
    v93[6] = v110;
    v93[7] = v109;
    *((_OWORD *)v93 + 4) = v111;
    *((_OWORD *)v93 + 5) = v112;
    *((_OWORD *)v93 + 6) = v113;
    *((_OWORD *)v93 + 7) = v115;
    *((unsigned char *)v93 + 128) = 1;
    goto LABEL_61;
  }
  unint64_t v70 = *(void *)(v61[7] + 8 * v68);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v70 & 0x8000000000000000) != 0) {
      goto LABEL_63;
    }
LABEL_42:
    if (v70 >= v62[2]) {
      goto LABEL_90;
    }
    os_log_type_t v117 = v12;
    uint64_t v71 = a1;
    uint64_t v72 = &v62[14 * v70];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v72[4] = v49;
    v72[5] = v51;
    v72[6] = v110;
    v72[7] = v60;
    *((_OWORD *)v72 + 4) = v111;
    *((_OWORD *)v72 + 5) = v112;
    *((_OWORD *)v72 + 6) = v113;
    *((_OWORD *)v72 + 7) = v115;
    *((unsigned char *)v72 + 128) = 1;
    a1 = v71;
    uint64_t v12 = v117;
LABEL_61:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v124 = v62;
    goto LABEL_30;
  }
  BOOL v62 = specialized _ArrayBuffer._consumeAndCreateNew()(v62);
  if ((v70 & 0x8000000000000000) == 0) {
    goto LABEL_42;
  }
LABEL_63:
  __break(1u);
LABEL_64:
  uint64_t TotalSkeletonCount = REMeshAssetGetTotalSkeletonCount();
  if (TotalSkeletonCount < 0) {
    goto LABEL_89;
  }
  uint64_t v95 = TotalSkeletonCount;
  uint64_t v96 = v126;
  uint64_t v97 = v127;
  if (!TotalSkeletonCount) {
    goto LABEL_75;
  }
  uint64_t v98 = 0;
  while (2)
  {
    static MeshResource.Skeleton.unpack(coreAsset:skeletonIndex:)((uint64_t)&v119);
    uint64_t v99 = (uint64_t)v119;
    uint64_t v100 = v120;
    uint64_t v101 = v121;
    uint64_t v119 = (void *)v96;
    uint64_t v120 = v97;
    uint64_t v102 = *(void *)(v97 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v102) {
      goto LABEL_68;
    }
    swift_bridgeObjectRetain();
    unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(v99, v100);
    if ((v104 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_68:
      swift_bridgeObjectRetain();
      specialized OrderedIdentifiableCollection.subscript.setter(v99, v100, v101, v99, v100);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v96 = (uint64_t)v119;
      uint64_t v97 = v120;
LABEL_69:
      if (v95 == ++v98) {
        goto LABEL_75;
      }
      continue;
    }
    break;
  }
  unint64_t v105 = *(void *)(*(void *)(v97 + 56) + 8 * v103);
  if ((v105 & 0x8000000000000000) != 0) {
    goto LABEL_82;
  }
  unint64_t v106 = *(void *)(v96 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v105 < v106) {
    goto LABEL_69;
  }
  __break(1u);
LABEL_75:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v4 = v122;
  uint64_t v6 = v123;
  uint64_t v7 = (uint64_t)v124;
  uint64_t v9 = v125;
LABEL_77:
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = (uint64_t)v9;
  a2[4] = v96;
  a2[5] = v97;
  return result;
}

uint64_t MeshResource.Model.levels.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  *a1 = *(void *)(v1 + 32);
  a1[1] = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 MeshResource.Model.levels.setter(__n128 *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

Swift::tuple_OpaquePointer_OpaquePointer __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MeshResource.Contents.makeDefinitions()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t v39 = *v0;
  uint64_t v38 = v0[2];
  if (v2)
  {
    uint64_t v42 = (void *)MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = v1 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MeshResource.Model.combine()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v40) {
        break;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 48;
      if (!--v2)
      {
        BOOL v37 = v42;
        swift_bridgeObjectRelease();
        uint64_t v1 = v39;
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    uint64_t v33 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v34 = (void *)swift_release();
LABEL_38:
    unint64_t v35 = v33;
    goto LABEL_44;
  }
  BOOL v37 = (void *)MEMORY[0x263F8EE78];
LABEL_7:
  uint64_t v4 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRetain();
  unint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    unint64_t v41 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    uint64_t v23 = *(void *)(v38 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23)
    {
      uint64_t v24 = 0;
      do
      {
        if (v4[2])
        {
          uint64_t v26 = *(void *)(v38 + v24 + 48);
          uint64_t v25 = *(void *)(v38 + v24 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
          if (v28)
          {
            char v29 = v4;
            unint64_t v30 = *(void *)(v4[7] + 8 * v27);
            swift_bridgeObjectRelease();
            if ((v30 & 0x8000000000000000) != 0 || HIDWORD(v30)) {
              goto LABEL_43;
            }
            String.utf8CString.getter();
            uint64_t v31 = REMeshInstanceDefinitionCreate();
            swift_release();
            type metadata accessor for MeshInstanceDefinition();
            *(void *)(swift_allocObject() + 16) = v31;
            swift_bridgeObjectRelease();
            uint64_t v32 = swift_bridgeObjectRelease();
            MEMORY[0x22A688E10](v32);
            if (*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            uint64_t v4 = v29;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
          }
        }
        v24 += 112;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
      uint64_t v33 = (void *)v41;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v33 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v34 = v37;
    goto LABEL_38;
  }
  unint64_t v6 = 0;
  uint64_t v7 = v1 + 72;
  while (v6 < v5)
  {
    uint64_t v8 = *(void *)(v7 - 40);
    uint64_t v9 = *(void *)(v7 - 32);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
    uint64_t v13 = v4[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14)) {
      goto LABEL_40;
    }
    char v16 = v11;
    if (v4[3] >= v15)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v11) {
          goto LABEL_9;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v16) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
      if ((v16 & 1) != (v18 & 1)) {
        goto LABEL_42;
      }
      unint64_t v12 = v17;
      if (v16)
      {
LABEL_9:
        *(void *)(v4[7] + 8 * v12) = v6;
        goto LABEL_10;
      }
    }
    v4[(v12 >> 6) + 8] |= 1 << v12;
    long long v19 = (uint64_t *)(v4[6] + 16 * v12);
    *long long v19 = v8;
    v19[1] = v9;
    *(void *)(v4[7] + 8 * v12) = v6;
    uint64_t v20 = v4[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_41;
    }
    uint64_t v4[2] = v22;
    swift_bridgeObjectRetain();
LABEL_10:
    ++v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    unint64_t v5 = *(void *)(v39 + 16);
    v7 += 48;
    if (v6 == v5) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_43:
  char v34 = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_44:
  result._1._rawValue = v35;
  result._0._rawValue = v34;
  return result;
}

uint64_t MeshResource.replace(with:)(uint64_t a1)
{
  if (!*(void *)(v1 + 16))
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *BOOL v14 = 0;
    v14[1] = 0;
    return swift_willThrow();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (!REAssetHandleConvertToMutable())
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *uint64_t v15 = xmmword_2283349F0;
    return swift_willThrow();
  }
  Swift::tuple_OpaquePointer_OpaquePointer v4 = MeshResource.Contents.makeDefinitions()();
  uint64_t result = (uint64_t)v4._0._rawValue;
  if (v5) {
    return result;
  }
  if ((unint64_t)v4._0._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)(((uint64_t)v4._0._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v7 = MEMORY[0x263F8EE78];
  uint64_t v32 = v2;
  if (v6)
  {
    uint64_t v33 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
    {
      __break(1u);
      goto LABEL_48;
    }
    uint64_t v8 = 0;
    uint64_t v7 = v33;
    unint64_t rawValue = (unint64_t)v4._1._rawValue;
    do
    {
      if (((unint64_t)v4._0._rawValue & 0xC000000000000001) != 0) {
        uint64_t v10 = MEMORY[0x22A689930](v8, v4._0._rawValue);
      }
      else {
        uint64_t v10 = swift_retain();
      }
      uint64_t v11 = *(void *)(v10 + 16);
      swift_release();
      unint64_t v13 = *(void *)(v33 + 16);
      unint64_t v12 = *(void *)(v33 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        unint64_t rawValue = (unint64_t)v4._1._rawValue;
      }
      ++v8;
      *(void *)(v33 + 16) = v13 + 1;
      *(void *)(v33 + 8 * v13 + 32) = v11;
    }
    while (v6 != v8);
    uint64_t v2 = v32;
  }
  else
  {
    unint64_t rawValue = (unint64_t)v4._1._rawValue;
  }
  if (rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v17 = MEMORY[0x263F8EE78];
  if (!v16) {
    goto LABEL_33;
  }
  uint64_t v34 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16 & ~(v16 >> 63), 0);
  if (v16 < 0)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v18 = 0;
  uint64_t v17 = v34;
  long long v19 = v4._1._rawValue;
  do
  {
    if (((unint64_t)v4._1._rawValue & 0xC000000000000001) != 0) {
      uint64_t v20 = MEMORY[0x22A689930](v18, v19);
    }
    else {
      uint64_t v20 = swift_retain();
    }
    uint64_t v21 = *(void *)(v20 + 16);
    swift_release();
    unint64_t v23 = *(void *)(v34 + 16);
    unint64_t v22 = *(void *)(v34 + 24);
    if (v23 >= v22 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      long long v19 = v4._1._rawValue;
    }
    ++v18;
    *(void *)(v34 + 16) = v23 + 1;
    *(void *)(v34 + 8 * v23 + 32) = v21;
  }
  while (v16 != v18);
  uint64_t v2 = v32;
LABEL_33:
  int64_t v24 = *(void *)(v2 + 16);
  uint64_t v25 = MEMORY[0x263F8EE78];
  if (v24)
  {
    uint64_t v35 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
    uint64_t v25 = v35;
    uint64_t v26 = v2 + 40;
    do
    {
      v27._unint64_t rawValue = MeshResource.Skeleton.makeSkeletonDef()()._rawValue;
      unint64_t v29 = *(void *)(v35 + 16);
      unint64_t v28 = *(void *)(v35 + 24);
      if (v29 >= v28 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      }
      v26 += 24;
      *(void *)(v35 + 16) = v29 + 1;
      *(Swift::OpaquePointer *)(v35 + 8 * v29 + 32) = v27;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (HIDWORD(*(void *)(v7 + 16)) || HIDWORD(*(void *)(v17 + 16)) || HIDWORD(*(void *)(v25 + 16))) {
    goto LABEL_49;
  }
  uint64_t v30 = v25 + 32;
  REMeshAssetReplaceAllWithSkinnedModels();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  for (uint64_t i = *(void *)(v25 + 16); i; --i)
  {
    v30 += 8;
    RERelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::OpaquePointer __swiftcall MeshResource.Skeleton.makeSkeletonDef()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_SSs5NeverOTg504_s10d5Kit12fg5C0A10h2E8i36V04makeF3Defs13OpaquePointerVyFSSAF5J53Vcfu_32ff38342fabfe801430b9473eed3cf0a7AKSSTf3nnnpk_nTf1cn_n(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_s6UInt32Vs5NeverOTg504_s10d5Kit12fg5C0A10h2E8i2V5j3Vs6k11VIgnd_AhJs5l27OIegnrzr_TR04_s10a5Kit12cd5O84A10e2E8f46V04makeF3Defs13OpaquePointerVyF19parentIndexAsh11L_ys0N0VAF5G2VFTf3nnnpf_nTf1cn_n(v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_So13simd_float4x4as5NeverOTg504_s10d5Kit12fg5C0A10h2E8i52V04makeF3Defs13OpaquePointerVyFSo13simd_float4x4aAF5J54Vcfu0_33_0726f9e9ce90d24234b92dbbc5354476AmKTf3nnnpk_nTf1cn_n(v8);
  swift_bridgeObjectRelease();
  int64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v27 = v2;
    uint64_t v28 = MEMORY[0x263F8EE78];
    uint64_t v12 = v1;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v11 = v28;
    unint64_t v13 = *(void *)(v28 + 16);
    uint64_t v14 = 48 * v13;
    uint64_t v15 = (long long *)(v3 + 160);
    do
    {
      long long v16 = *(v15 - 2);
      long long v17 = *(v15 - 1);
      long long v18 = *v15;
      unint64_t v19 = *(void *)(v28 + 24);
      unint64_t v20 = v13 + 1;
      if (v13 >= v19 >> 1)
      {
        long long v25 = *(v15 - 1);
        long long v26 = *(v15 - 2);
        long long v24 = *v15;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v13 + 1, 1);
        long long v18 = v24;
        long long v17 = v25;
        long long v16 = v26;
      }
      *(void *)(v28 + 16) = v20;
      uint64_t v21 = (_OWORD *)(v28 + v14);
      v21[2] = v16;
      v21[3] = v17;
      v21[4] = v18;
      v14 += 48;
      v15 += 9;
      unint64_t v13 = v20;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    uint64_t v1 = v12;
    uint64_t v2 = v27;
  }
  uint64_t v22 = specialized static MeshResource.Skeleton.makeSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:)(v1, v2, v5, v7, v9, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (Swift::OpaquePointer)v22;
}

uint64_t MeshResource.replace(with:)(_OWORD *a1)
{
  *(void *)(v2 + 16) = v1;
  long long v3 = a1[1];
  *(_OWORD *)(v2 + 24) = *a1;
  *(_OWORD *)(v2 + 40) = v3;
  *(_OWORD *)(v2 + 56) = a1[2];
  return MEMORY[0x270FA2498](MeshResource.replace(with:), 0, 0);
}

uint64_t MeshResource.replace(with:)()
{
  Swift::tuple_OpaquePointer_OpaquePointer v1 = MeshResource.Contents.makeDefinitions()();
  *(Swift::tuple_OpaquePointer_OpaquePointer *)(v0 + 72) = v1;
  if (!v2)
  {
    if ((unint64_t)v1._0._rawValue >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = *(void *)(((uint64_t)v1._0._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v6 = MEMORY[0x263F8EE78];
    if (v5)
    {
      uint64_t v25 = MEMORY[0x263F8EE78];
      uint64_t v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
      if (v5 < 0)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v10 = 0;
      uint64_t v6 = v25;
      do
      {
        if (((unint64_t)v1._0._rawValue & 0xC000000000000001) != 0) {
          uint64_t v11 = MEMORY[0x22A689930](v10, v1._0._rawValue);
        }
        else {
          uint64_t v11 = swift_retain();
        }
        uint64_t v12 = *(void *)(v11 + 16);
        swift_release();
        unint64_t v14 = *(void *)(v25 + 16);
        unint64_t v13 = *(void *)(v25 + 24);
        if (v14 >= v13 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        }
        ++v10;
        *(void *)(v25 + 16) = v14 + 1;
        *(void *)(v25 + 8 * v14 + 32) = v12;
      }
      while (v5 != v10);
    }
    if ((unint64_t)v1._1._rawValue >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = *(void *)(((uint64_t)v1._1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v16 = MEMORY[0x263F8EE78];
    if (!v15)
    {
LABEL_27:
      if (HIDWORD(*(void *)(v6 + 16)) || HIDWORD(*(void *)(v16 + 16))) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
      *(void *)(v0 + 88) = REMeshResourceDefinitionCreate();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for MainActor();
      *(void *)(v0 + 96) = static MainActor.shared.getter();
      uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v24 = v23;
      uint64_t v7 = (uint64_t)MeshResource.replace(with:);
      uint64_t v8 = v22;
      uint64_t v9 = v24;
      return MEMORY[0x270FA2498](v7, v8, v9);
    }
    uint64_t v26 = MEMORY[0x263F8EE78];
    uint64_t v7 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 & ~(v15 >> 63), 0);
    if ((v15 & 0x8000000000000000) == 0)
    {
      uint64_t v17 = 0;
      uint64_t v16 = v26;
      do
      {
        if (((unint64_t)v1._1._rawValue & 0xC000000000000001) != 0) {
          uint64_t v18 = MEMORY[0x22A689930](v17, v1._1._rawValue);
        }
        else {
          uint64_t v18 = swift_retain();
        }
        uint64_t v19 = *(void *)(v18 + 16);
        swift_release();
        unint64_t v21 = *(void *)(v26 + 16);
        unint64_t v20 = *(void *)(v26 + 24);
        if (v21 >= v20 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        }
        ++v17;
        *(void *)(v26 + 16) = v21 + 1;
        *(void *)(v26 + 8 * v21 + 32) = v19;
      }
      while (v15 != v17);
      goto LABEL_27;
    }
LABEL_36:
    __break(1u);
    return MEMORY[0x270FA2498](v7, v8, v9);
  }
  long long v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v3;
  void *v4;
  _OWORD *v5;
  uint64_t v7;

  Swift::tuple_OpaquePointer_OpaquePointer v1 = *(void *)(v0 + 16);
  swift_release();
  if (*(void *)(v1 + 16))
  {
    if (REAssetHandleConvertToMutable())
    {
      REMeshAssetReplaceAllWithResource();
      uint64_t v2 = MeshResource.replace(with:);
      goto LABEL_7;
    }
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    long long v3 = swift_allocError();
    *uint64_t v5 = xmmword_2283349F0;
  }
  else
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    long long v3 = swift_allocError();
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
  *(void *)(v0 + 104) = v3;
  swift_willThrow();
  uint64_t v2 = MeshResource.replace(with:);
LABEL_7:
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  RERelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::tuple_OpaquePointer_OpaquePointer v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  RERelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Swift::tuple_OpaquePointer_OpaquePointer v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void v6[3];
  uint64_t v7;
  uint64_t v8;

  Swift::tuple_OpaquePointer_OpaquePointer v1 = v0;
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v6);
  long long v3 = v7;
  uint64_t v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (*(void *)(v1 + 16)) {
    return REMeshAssetReplaceAllWithDirectMesh();
  }
  __break(1u);
  return result;
}

uint64_t MeshResource.replaceAsync(with:)(long long *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v7 = a1[1];
  long long v24 = *a1;
  long long v25 = v7;
  long long v26 = a1[2];
  uint64_t v8 = specialized static __ServiceLocator.shared.getter();
  uint64_t v9 = *(void **)(*(void *)(v8 + 168) + 16);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v8 + 24);
  swift_unownedRetainStrong();
  uint64_t v11 = *(void **)(v10 + 32);
  swift_retain();
  id v12 = v9;
  id v13 = v11;
  swift_release();
  *uint64_t v6 = v13;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F8F0E0], v3);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v13)
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v12;
    long long v17 = v25;
    *(_OWORD *)(v16 + 24) = v24;
    *(_OWORD *)(v16 + 40) = v17;
    *(_OWORD *)(v16 + 56) = v26;
    *(void *)(v16 + 72) = v1;
    *(void *)(v16 + 80) = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<MeshResource>);
    uint64_t v18 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<MeshResource, Error>?>);
    uint64_t v19 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v20 = swift_allocObject();
    *(_DWORD *)(v20 + 16) = 0;
    *(void *)(v19 + 16) = v20;
    *(void *)(v19 + 24) = 0;
    *(unsigned char *)(v19 + 32) = -1;
    *(void *)(v18 + 16) = v19;
    unint64_t v21 = (void *)swift_allocObject();
    v21[2] = partial apply for closure #1 in MeshResource.replaceAsync(with:);
    v21[3] = v16;
    v21[4] = v19;
    v21[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<MeshResource, Error>);
    swift_allocObject();
    outlined retain of MeshResource.Contents((uint64_t)&v24);
    swift_retain();
    swift_retain();
    uint64_t v22 = Future.init(_:)();
    swift_release();
    *(void *)(v18 + 24) = v22;
    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in MeshResource.replaceAsync(with:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, uint64_t a5, void *a6)
{
  uint64_t v25 = a3;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  id v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  uint64_t v18 = swift_allocObject();
  long long v19 = a4[1];
  *(_OWORD *)(v18 + 16) = *a4;
  *(_OWORD *)(v18 + 32) = v19;
  *(_OWORD *)(v18 + 48) = a4[2];
  *(void *)(v18 + 64) = a5;
  *(void *)(v18 + 72) = a6;
  *(void *)(v18 + 80) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(void *)(v18 + 88) = v17;
  aBlock[4] = partial apply for closure #1 in closure #1 in MeshResource.replaceAsync(with:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_106;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  outlined retain of MeshResource.Contents((uint64_t)a4);
  swift_retain();
  id v21 = a6;
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = MEMORY[0x263F8EE78];
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v16, v13, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v23);
  return swift_release();
}

uint64_t closure #1 in closure #1 in MeshResource.replaceAsync(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v48 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v47 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v46 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v45 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  Swift::tuple_OpaquePointer_OpaquePointer v13 = MeshResource.Contents.makeDefinitions()();
  if (v12)
  {
    uint64_t v14 = 0;
    *(void *)(v11 + 16) = v12;
    *(unsigned char *)(v11 + 24) = 1;
    uint64_t v15 = v11;
LABEL_30:
    uint64_t v30 = MEMORY[0x263F8EE78];
    uint64_t v31 = (void *)swift_allocObject();
    uint64_t v31[2] = v14;
    uint64_t v31[3] = a2;
    uint64_t v32 = v43;
    uint64_t v33 = v44;
    v31[4] = v15;
    v31[5] = v32;
    v31[6] = v33;
    aBlock[4] = partial apply for specialized closure #3 in closure #1 in closure #1 in MeshResource.replaceAsync(with:);
    aBlock[5] = v31;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_115;
    uint64_t v34 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v35 = v45;
    static DispatchQoS.unspecified.getter();
    uint64_t v49 = v30;
    _sSo10CFErrorRefaABs5Error10FoundationWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v36 = v47;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v35, v36, v34);
    _Block_release(v34);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v36, v6);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v9);
    swift_release();
    return swift_release();
  }
  uint64_t v38 = a2;
  uint64_t v39 = v11;
  if ((unint64_t)v13._0._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)(((uint64_t)v13._0._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v17 = MEMORY[0x263F8EE78];
  uint64_t v41 = v7;
  uint64_t v42 = v6;
  uint64_t v40 = v9;
  if (v16)
  {
    aBlock[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16 & ~(v16 >> 63), 0);
    if (v16 < 0)
    {
      __break(1u);
      goto LABEL_34;
    }
    uint64_t v18 = 0;
    uint64_t v17 = aBlock[0];
    do
    {
      if (((unint64_t)v13._0._rawValue & 0xC000000000000001) != 0) {
        uint64_t v19 = MEMORY[0x22A689930](v18, v13._0._rawValue);
      }
      else {
        uint64_t v19 = swift_retain();
      }
      uint64_t v20 = *(void *)(v19 + 16);
      swift_release();
      aBlock[0] = v17;
      unint64_t v22 = *(void *)(v17 + 16);
      unint64_t v21 = *(void *)(v17 + 24);
      if (v22 >= v21 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        uint64_t v17 = aBlock[0];
      }
      ++v18;
      *(void *)(v17 + 16) = v22 + 1;
      *(void *)(v17 + 8 * v22 + 32) = v20;
    }
    while (v16 != v18);
    uint64_t v7 = v41;
    uint64_t v6 = v42;
    uint64_t v9 = v40;
  }
  if ((unint64_t)v13._1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)(((uint64_t)v13._1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v24 = MEMORY[0x263F8EE78];
  if (!v23) {
    goto LABEL_27;
  }
  aBlock[0] = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23 & ~(v23 >> 63), 0);
  if (v23 < 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v25 = 0;
  uint64_t v24 = aBlock[0];
  do
  {
    if (((unint64_t)v13._1._rawValue & 0xC000000000000001) != 0) {
      uint64_t v26 = MEMORY[0x22A689930](v25, v13._1._rawValue);
    }
    else {
      uint64_t v26 = swift_retain();
    }
    uint64_t v27 = *(void *)(v26 + 16);
    swift_release();
    aBlock[0] = v24;
    unint64_t v29 = *(void *)(v24 + 16);
    unint64_t v28 = *(void *)(v24 + 24);
    if (v29 >= v28 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      uint64_t v24 = aBlock[0];
    }
    ++v25;
    *(void *)(v24 + 16) = v29 + 1;
    *(void *)(v24 + 8 * v29 + 32) = v27;
  }
  while (v23 != v25);
  uint64_t v7 = v41;
  uint64_t v6 = v42;
  uint64_t v9 = v40;
LABEL_27:
  if (!HIDWORD(*(void *)(v17 + 16)) && !HIDWORD(*(void *)(v24 + 16)))
  {
    uint64_t v14 = REMeshResourceDefinitionCreate();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a2 = v38;
    uint64_t v15 = v39;
    *(void *)(v39 + 16) = v38;
    *(unsigned char *)(v15 + 24) = 0;
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
LABEL_35:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized closure #3 in closure #1 in closure #1 in MeshResource.replaceAsync(with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  if (a1)
  {
    if (*(void *)(a2 + 16))
    {
      if (REAssetHandleConvertToMutable())
      {
        REMeshAssetReplaceAllWithResource();
LABEL_8:
        RERelease();
        goto LABEL_9;
      }
      lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
      uint64_t v6 = swift_allocError();
      *uint64_t v8 = xmmword_2283349F0;
    }
    else
    {
      lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
      uint64_t v6 = swift_allocError();
      *uint64_t v7 = 0;
      v7[1] = 0;
    }
    swift_willThrow();
    swift_beginAccess();
    uint64_t v9 = *(void **)(a3 + 16);
    char v10 = *(unsigned char *)(a3 + 24);
    *(void *)(a3 + 16) = v6;
    *(unsigned char *)(a3 + 24) = 1;
    outlined consume of Result<MeshResource, Error>(v9, v10);
    goto LABEL_8;
  }
LABEL_9:
  swift_beginAccess();
  uint64_t v11 = *(void **)(a3 + 16);
  uint64_t v12 = *(unsigned __int8 *)(a3 + 24);
  outlined copy of Result<ModelEntity, Error>(v11, v12);
  a4(v11, v12);
  outlined consume of Result<MeshResource, Error>(v11, v12);
}

uint64_t static MeshResource.generate(from:)(long long *a1)
{
  long long v10 = a1[1];
  long long v11 = *a1;
  long long v9 = a1[2];
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)&v12);
  uint64_t v3 = *((void *)&v13 + 1);
  uint64_t v4 = v14;
  __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  uint64_t Mutable = REAssetServiceMeshAssetCreateMutable();
  if ((id)REAssetGetSwiftObject())
  {
    type metadata accessor for MeshResource();
    uint64_t v6 = swift_dynamicCastClass();
    if (v6) {
      goto LABEL_5;
    }
    swift_unknownObjectRelease();
  }
  type metadata accessor for MeshResource();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = Mutable;
  RERetain();
  REAssetSetSwiftObject();
LABEL_5:
  RERelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  long long v12 = v11;
  long long v13 = v10;
  long long v14 = v9;
  MeshResource.replace(with:)((uint64_t)&v12);
  if (v1)
  {
    swift_release();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 56) = type metadata accessor for MeshResource();
    *(void *)(inited + 64) = &protocol witness table for MeshResource;
    *(void *)(inited + 32) = v6;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v6;
}

uint64_t MeshResource.init(from:)(uint64_t a1)
{
  *(void *)(v2 + 792) = v1;
  *(void *)(v2 + 840) = *(void *)a1;
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 888) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 904) = v3;
  *(void *)(v2 + 920) = *(void *)(a1 + 40);
  return MEMORY[0x270FA2498](MeshResource.init(from:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t result;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v33 = v1;
    unint64_t v57 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = v57;
    uint64_t v6 = a1 + 64;
    while (1)
    {
      uint64_t v34 = v4;
      uint64_t v35 = v5;
      uint64_t v7 = *(void *)(v6 - 24);
      uint64_t v8 = *(void *)(v6 - 16);
      long long v9 = *(void *)(v6 - 8);
      long long v10 = *(unsigned char *)v6;
      long long v11 = *(void *)(v6 + 8);
      long long v12 = *(unsigned char *)(v6 + 24);
      long long v13 = *(void *)(v6 + 32);
      long long v14 = *(void *)(v6 + 40);
      uint64_t v15 = *(void *)(v6 + 56);
      uint64_t v38 = *(void *)(v6 + 16);
      uint64_t v39 = *(void *)(v6 + 48);
      uint64_t v16 = *(void *)(v6 + 64);
      uint64_t v44 = *(void *)(v6 - 32);
      uint64_t v45 = v7;
      uint64_t v46 = v8;
      uint64_t v47 = v9;
      LOBYTE(v48) = v10;
      uint64_t v49 = v11;
      uint64_t v50 = v38;
      uint64_t v51 = v12;
      long long v52 = v13;
      long long v53 = v14;
      long long v54 = v39;
      long long v55 = v15;
      uint64_t v56 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v36 = v10;
      outlined copy of MeshDescriptor.Materials(v9, v10);
      BOOL v37 = v11;
      uint64_t v17 = v11;
      uint64_t i = v38;
      outlined copy of MeshDescriptor.Primitives?(v17, v38, v12);
      outlined copy of MeshDescriptor.Skinning?(v13, v14);
      MeshDescriptor.makeGeomMesh()((uint64_t)&v40);
      uint64_t v19 = v40;
      if (v43) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MeshDescriptor.Materials(v9, v36);
      outlined consume of MeshDescriptor.Primitives?(v37, v38, v12);
      outlined consume of StateMachineGraph?(v13, v14);
      uint64_t v5 = v35;
      unint64_t v57 = v35;
      unint64_t v21 = *(void *)(v35 + 16);
      uint64_t v20 = *(void *)(v35 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v5 = v57;
      }
      v6 += 104;
      *(void *)(v5 + 16) = v21 + 1;
      *(void *)(v5 + 8 * v21 + 32) = v19;
      uint64_t v4 = v34 - 1;
      if (v34 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v33;
        goto LABEL_10;
      }
    }
    unint64_t v22 = v41;
    uint64_t v23 = v42;
    uint64_t v44 = v40;
    uint64_t v45 = v41;
    LOWORD(v46) = v42;
    lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
    swift_willThrowTypedImpl();
    swift_allocError();
    *(void *)uint64_t v24 = v19;
    *(void *)(v24 + 8) = v22;
    *(_WORD *)(v24 + 16) = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(v9, v36);
    outlined consume of MeshDescriptor.Primitives?(v37, v38, v12);
    outlined consume of StateMachineGraph?(v13, v14);
    swift_bridgeObjectRelease();
    swift_release();
    return i;
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = MEMORY[0x263F8EE78];
LABEL_10:
  REMeshCompileOptionsCreate();
  uint64_t v25 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v25, (uint64_t)&v44);
  uint64_t v26 = v47;
  uint64_t i = v48;
  __swift_project_boxed_opaque_existential_1(&v44, v47);
  (*(void (**)(uint64_t, uint64_t))(i + 32))(v26, i);
  uint64_t v27 = REAssetManagerMeshAssetCreateFromModelsWithOptionsNullable();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
  unint64_t v28 = *(void *)(v5 + 16);
  if (v28)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v28; ++i)
      RERelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (!v27)
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *uint64_t v32 = xmmword_228323FE0;
    swift_willThrow();
    RERelease();
    return i;
  }
  unint64_t v29 = (id)REAssetGetSwiftObject();
  uint64_t result = swift_unknownObjectRelease();
  if (!v29)
  {
    uint64_t i = (*(uint64_t (**)(uint64_t))(v2 + 120))(v27);
    uint64_t v44 = i;
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    if (v31)
    {
      swift_release();
      RERelease();
      RERelease();
      swift_release();
    }
    else
    {
      RERelease();
      swift_release();
      RERelease();
    }
    return i;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = v1;
  return MEMORY[0x270FA2498](MeshResource.init(from:), 0, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[11] = a1;
  v2[12] = v1;
  type metadata accessor for MainActor();
  v2[13] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[14] = v4;
  v2[15] = v3;
  return MEMORY[0x270FA2498](MeshResource.init(from:), v4, v3);
}

uint64_t MeshResource.init(from:)()
{
  swift_asyncLet_begin();
  return MEMORY[0x270FA23E0](v0 + 16, v0 + 744, MeshResource.init(from:), v0 + 704);
}

{
  return MEMORY[0x270FA2498](MeshResource.init(from:), 0, 0);
}

{
  void *v0;
  uint64_t v2;

  v0[116] = (*(uint64_t (**)(void))(v0[99] + 120))(v0[93]);
  swift_retain();
  return MEMORY[0x270FA23E0](v0 + 2, v0 + 93, MeshResource.init(from:), v0 + 94);
}

{
  return MEMORY[0x270FA2498](MeshResource.init(from:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  RERelease();
  type metadata accessor for MainActor();
  *(void *)(v0 + 936) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](MeshResource.init(from:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  long long v7;
  long long v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  long long v13 = v0;
  uint64_t v1 = *(void *)(v0 + 920);
  uint64_t v2 = *(void *)(v0 + 840);
  uint64_t v7 = *(_OWORD *)(v0 + 904);
  uint64_t v8 = *(_OWORD *)(v0 + 888);
  swift_release();
  long long v9 = v2;
  long long v10 = v8;
  long long v11 = v7;
  long long v12 = v1;
  MeshResource.replace(with:)((uint64_t)&v9);
  *(void *)(v0 + 944) = 0;
  long long v3 = *(void *)(v0 + 928);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 696) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 952) = v4;
  *uint64_t v4 = v0;
  v4[1] = MeshResource.init(from:);
  uint64_t v5 = *(void *)(v0 + 792);
  return RequestLoadable.awaitForResourceSharing()(v5, (uint64_t)&protocol witness table for MeshResource);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 960) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](MeshResource.init(from:), 0, 0);
  }
  else
  {
    return MEMORY[0x270FA23D8](v2 + 16, v2 + 744, MeshResource.init(from:), v2 + 800);
  }
}

{
  return MEMORY[0x270FA2498](MeshResource.init(from:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  return MEMORY[0x270FA2498](MeshResource.init(from:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 928);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  return MEMORY[0x270FA23D8](v0 + 16, v0 + 744, MeshResource.init(from:), v0 + 848);
}

{
  return MEMORY[0x270FA2498](MeshResource.init(from:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void v35[2];
  __int16 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;

  uint64_t v51 = v0;
  uint64_t v1 = v0[14];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v34 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    long long v3 = v34;
    uint64_t v4 = v1 + 64;
    while (1)
    {
      unint64_t v28 = v3;
      uint64_t v30 = v2;
      uint64_t v5 = *(void *)(v4 - 24);
      uint64_t v6 = *(void *)(v4 - 16);
      uint64_t v7 = *(void *)(v4 - 8);
      uint64_t v8 = *(unsigned char *)v4;
      long long v9 = *(void *)(v4 + 8);
      long long v10 = *(unsigned char *)(v4 + 24);
      long long v11 = *(void *)(v4 + 32);
      long long v12 = *(void *)(v4 + 40);
      long long v13 = *(void *)(v4 + 56);
      uint64_t v31 = *(void *)(v4 + 16);
      uint64_t v32 = *(void *)(v4 + 48);
      long long v14 = *(void *)(v4 + 64);
      uint64_t v38 = *(void *)(v4 - 32);
      uint64_t v39 = v5;
      uint64_t v40 = v6;
      uint64_t v41 = v7;
      uint64_t v42 = v8;
      uint64_t v43 = v9;
      uint64_t v44 = v31;
      uint64_t v45 = v10;
      uint64_t v46 = v11;
      uint64_t v47 = v12;
      uint64_t v48 = v32;
      uint64_t v49 = v13;
      uint64_t v50 = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v33 = v7;
      uint64_t v15 = v7;
      uint64_t v16 = v8;
      outlined copy of MeshDescriptor.Materials(v15, v8);
      outlined copy of MeshDescriptor.Primitives?(v9, v31, v10);
      outlined copy of MeshDescriptor.Skinning?(v11, v12);
      MeshDescriptor.makeGeomMesh()((uint64_t)v35);
      uint64_t v17 = v35[0];
      if (v37) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MeshDescriptor.Materials(v33, v8);
      outlined consume of MeshDescriptor.Primitives?(v9, v31, v10);
      outlined consume of StateMachineGraph?(v11, v12);
      long long v3 = v28;
      uint64_t v19 = *(void *)(v28 + 16);
      uint64_t v18 = *(void *)(v28 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        long long v3 = v28;
      }
      v4 += 104;
      *(void *)(v3 + 16) = v19 + 1;
      *(void *)(v3 + 8 * v19 + 32) = v17;
      uint64_t v2 = v30 - 1;
      if (v30 == 1)
      {
        uint64_t v0 = (void *)v27;
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    uint64_t v20 = v35[1];
    unint64_t v21 = v36;
    unint64_t v29 = v36;
    *(void *)(v27 + 80) = v35[0];
    *(void *)(v27 + 88) = v20;
    *(_WORD *)(v27 + 96) = v21;
    lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
    swift_willThrowTypedImpl();
    swift_allocError();
    *(void *)unint64_t v22 = v17;
    *(void *)(v22 + 8) = v20;
    *(_WORD *)(v22 + 16) = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(v33, v16);
    outlined consume of MeshDescriptor.Primitives?(v9, v31, v10);
    outlined consume of StateMachineGraph?(v11, v12);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v23 = *(uint64_t (**)(void))(v27 + 8);
    return v23();
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v3 = MEMORY[0x263F8EE78];
LABEL_12:
    v0[16] = v3;
    v0[17] = REMeshCompileOptionsCreate();
    type metadata accessor for MainActor();
    v0[18] = static MainActor.shared.getter();
    uint64_t v26 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x270FA2498](MeshResource.init(from:), v26, v25);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  uint64_t v2 = v0[5];
  long long v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  v0[19] = REAssetManagerMeshAssetCreateFromModelsWithOptionsNullable();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  return MEMORY[0x270FA2498](MeshResource.init(from:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t (*v13)(void);
  uint64_t v14;

  if (v0[19])
  {
    uint64_t v1 = (*(uint64_t (**)(void))(v0[15] + 120))();
    v0[20] = v1;
    v0[13] = v1;
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[21] = v2;
    *uint64_t v2 = v0;
    v2[1] = MeshResource.init(from:);
    long long v3 = v0[15];
    return RequestLoadable.awaitForResourceSharing()(v3, (uint64_t)&protocol witness table for MeshResource);
  }
  else
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)logger);
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_227DD2000, v6, v7, "Could not create MeshResources with descriptors.", v8, 2u);
      MEMORY[0x22A696500](v8, -1, -1);
    }
    long long v9 = v0[16];

    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    swift_allocError();
    *long long v10 = xmmword_228323FE0;
    swift_willThrow();
    RERelease();
    long long v11 = *(void *)(v9 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v11; ++i)
        RERelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    long long v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = MeshResource.init(from:);
  }
  else {
    uint64_t v2 = MeshResource.init(from:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[16];
  RERelease();
  RERelease();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
      RERelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v5 = v0[20];
  return v4(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  RERelease();
  RERelease();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
      RERelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t MeshAssetWithDirectMesh;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[12];
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)(v0 + 2));
  long long v3 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  MeshAssetWithDirectuint64_t Mesh = REAssetManagerCreateMeshAssetWithDirectMesh();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v1 + 120))(MeshAssetWithDirectMesh);
  v0[16] = v6;
  swift_retain();
  RERelease();
  v0[10] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[17] = v7;
  *uint64_t v7 = v0;
  v7[1] = MeshResource.init(from:);
  uint64_t v8 = v0[12];
  return RequestLoadable.awaitForResourceSharing()(v8, (uint64_t)&protocol witness table for MeshResource);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  long long v3 = *(void *)(v2 + 112);
  uint64_t v4 = *(void *)(v2 + 120);
  if (v0) {
    uint64_t v5 = MeshResource.init(from:);
  }
  else {
    uint64_t v5 = MeshResource.init(from:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 128);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release_n();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t MeshAssetWithDirectMesh;
  uint64_t v6;
  uint64_t v7;
  void v9[3];
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = v0;
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v9);
  long long v3 = v10;
  uint64_t v4 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  MeshAssetWithDirectuint64_t Mesh = REAssetManagerCreateMeshAssetWithDirectMesh();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v1 + 120))(MeshAssetWithDirectMesh);
  swift_retain();
  RERelease();
  v9[0] = v6;
  RequestLoadable.enforceResourceSharingBeforeECSCommits()();
  swift_release();
  if (v7) {
    swift_release();
  }
  swift_release();
  return v6;
}

uint64_t implicit closure #1 in MeshResource.init(from:)(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  return MEMORY[0x270FA2498](implicit closure #1 in MeshResource.init(from:), 0, 0);
}

uint64_t implicit closure #1 in MeshResource.init(from:)()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 88) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](implicit closure #1 in MeshResource.init(from:), v2, v1);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Mutable;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = (uint64_t *)v0[10];
  swift_release();
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)(v0 + 2));
  long long v3 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  uint64_t Mutable = REAssetServiceMeshAssetCreateMutable();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  *uint64_t v1 = Mutable;
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t static MeshResource.generate(from:)(_OWORD *a1)
{
  long long v2 = a1[1];
  v1[5] = *a1;
  v1[6] = v2;
  v1[7] = a1[2];
  return MEMORY[0x270FA2498](static MeshResource.generate(from:), 0, 0);
}

uint64_t static MeshResource.generateAsync(from:)(long long *a1)
{
  long long v8 = a1[1];
  long long v9 = *a1;
  long long v7 = a1[2];
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)&v10);
  uint64_t v2 = *((void *)&v11 + 1);
  uint64_t v3 = v12;
  __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  uint64_t Mutable = REAssetServiceMeshAssetCreateMutable();
  if (!(id)REAssetGetSwiftObject()) {
    goto LABEL_4;
  }
  type metadata accessor for MeshResource();
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for MeshResource();
    *(void *)(swift_allocObject() + 16) = Mutable;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  long long v10 = v9;
  long long v11 = v8;
  long long v12 = v7;
  uint64_t v5 = MeshResource.replaceAsync(with:)(&v10);
  swift_release();
  return v5;
}

uint64_t static MeshResource.generate(from:)(uint64_t a1)
{
  *(void *)(v1 + 104) = a1;
  return MEMORY[0x270FA2498](static MeshResource.generate(from:), 0, 0);
}

{
  void *v1;
  void *v3;
  uint64_t v5;

  v1[2] = type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  type metadata accessor for MeshResource();
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[4] = v3;
  *uint64_t v3 = v1;
  v3[1] = static MeshResource.generate(from:);
  return MeshResource.init(from:)(a1);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v11;

  uint64_t v4 = *v2;
  *(void *)(*v2 + 40) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    long long v7 = v6;
    long long v8 = static MeshResource.generate(from:);
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
    long long v7 = v9;
    long long v8 = static MeshResource.generate(from:);
  }
  return MEMORY[0x270FA2498](v8, v5, v7);
}

uint64_t static MeshResource.generateAsync(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = specialized static __ServiceLocator.shared.getter();
  long long v7 = *(void **)(*(void *)(v6 + 168) + 16);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 24);
  swift_unownedRetainStrong();
  long long v9 = *(void **)(v8 + 32);
  swift_retain();
  id v10 = v7;
  id v11 = v9;
  swift_release();
  *uint64_t v5 = v11;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v11)
  {
    long long v14 = (void *)swift_allocObject();
    void v14[2] = v10;
    v14[3] = a1;
    v14[4] = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<MeshResource>);
    uint64_t v15 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<MeshResource, Error>?>);
    uint64_t v16 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v17 = swift_allocObject();
    *(_DWORD *)(v17 + 16) = 0;
    *(void *)(v16 + 16) = v17;
    *(void *)(v16 + 24) = 0;
    *(unsigned char *)(v16 + 32) = -1;
    *(void *)(v15 + 16) = v16;
    uint64_t v18 = (void *)swift_allocObject();
    void v18[2] = partial apply for closure #1 in static MeshResource.generateAsync(from:);
    void v18[3] = v14;
    _OWORD v18[4] = v16;
    v18[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<MeshResource, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v19 = Future.init(_:)();
    swift_release();
    *(void *)(v15 + 24) = v19;
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static MeshResource.generateAsync(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v23 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v17[2] = a4;
  v17[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  _OWORD v17[4] = v16;
  v17[5] = a5;
  aBlock[4] = partial apply for closure #1 in closure #1 in static MeshResource.generateAsync(from:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_23;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  id v19 = a5;
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = MEMORY[0x263F8EE78];
  _sSo10CFErrorRefaABs5Error10FoundationWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v15, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v22);
  return swift_release();
}

uint64_t closure #1 in closure #1 in static MeshResource.generateAsync(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = MEMORY[0x263F8EE78];
  if (v17)
  {
    char v58 = v16;
    uint64_t v65 = a2;
    uint64_t v59 = v14;
    uint64_t v60 = v11;
    uint64_t v61 = v13;
    uint64_t v62 = a4;
    uint64_t v63 = v9;
    uint64_t v64 = v8;
    uint64_t v66 = a3;
    uint64_t v78 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    uint64_t v18 = v78;
    uint64_t v19 = a1 + 64;
    while (1)
    {
      int64_t v67 = v17;
      uint64_t v68 = v18;
      uint64_t v21 = *(void *)(v19 - 32);
      uint64_t v20 = *(void *)(v19 - 24);
      uint64_t v23 = *(void **)(v19 - 16);
      uint64_t v22 = *(void *)(v19 - 8);
      char v24 = *(unsigned char *)v19;
      uint64_t v25 = *(void *)(v19 + 8);
      uint64_t v70 = *(void *)(v19 + 16);
      int v69 = *(unsigned __int8 *)(v19 + 24);
      uint64_t v26 = *(void *)(v19 + 32);
      uint64_t v27 = *(void *)(v19 + 40);
      uint64_t v28 = *(void *)(v19 + 48);
      uint64_t v29 = *(void *)(v19 + 56);
      uint64_t v30 = *(void *)(v19 + 64);
      uint64_t aBlock = v21;
      uint64_t v86 = v20;
      uint64_t v87 = v23;
      uint64_t v88 = (void *)v22;
      LOBYTE(v89) = v24;
      uint64_t v90 = (void *)v25;
      uint64_t v91 = v70;
      char v92 = v69;
      uint64_t v93 = v26;
      uint64_t v94 = v27;
      uint64_t v95 = v28;
      uint64_t v96 = v29;
      uint64_t v97 = v30;
      uint64_t v72 = v20;
      swift_bridgeObjectRetain();
      uint64_t v71 = v23;
      swift_bridgeObjectRetain();
      uint64_t v73 = v22;
      uint64_t v31 = v22;
      char v32 = v24;
      outlined copy of MeshDescriptor.Materials(v31, v24);
      uint64_t v74 = v25;
      uint64_t v33 = v25;
      uint64_t v34 = v70;
      unsigned __int8 v35 = v69;
      outlined copy of MeshDescriptor.Primitives?(v33, v70, v69);
      uint64_t v77 = v26;
      uint64_t v75 = v27;
      uint64_t v76 = v28;
      outlined copy of MeshDescriptor.Skinning?(v26, v27);
      MeshDescriptor.makeGeomMesh()((uint64_t)&v79);
      uint64_t v36 = v79;
      if (v82) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of MeshDescriptor.Materials(v73, v32);
      outlined consume of MeshDescriptor.Primitives?(v74, v34, v35);
      outlined consume of StateMachineGraph?(v77, v75);
      uint64_t v18 = v68;
      uint64_t v78 = v68;
      unint64_t v38 = *(void *)(v68 + 16);
      unint64_t v37 = *(void *)(v68 + 24);
      if (v38 >= v37 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        uint64_t v18 = v78;
      }
      *(void *)(v18 + 16) = v38 + 1;
      *(void *)(v18 + 8 * v38 + 32) = v36;
      v19 += 104;
      int64_t v17 = v67 - 1;
      if (v67 == 1)
      {
        a3 = v66;
        a2 = v65;
        goto LABEL_9;
      }
    }
    uint64_t v39 = v80;
    __int16 v40 = v81;
    uint64_t aBlock = v79;
    uint64_t v86 = v80;
    LOWORD(v87) = v81;
    lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
    swift_willThrowTypedImpl();
    uint64_t v41 = (void *)swift_allocError();
    *(void *)uint64_t v42 = v36;
    *(void *)(v42 + 8) = v39;
    *(_WORD *)(v42 + 16) = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(v73, v32);
    outlined consume of MeshDescriptor.Primitives?(v74, v34, v35);
    outlined consume of StateMachineGraph?(v77, v75);
    swift_release();
    uint64_t v43 = (void *)swift_allocObject();
    uint64_t v44 = v66;
    void v43[2] = v65;
    v43[3] = v44;
    v43[4] = v41;
    uint64_t v89 = partial apply for closure #2 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:);
    uint64_t v90 = v43;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v86 = 1107296256;
    uint64_t v87 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v88 = &block_descriptor_90_0;
    uint64_t v45 = _Block_copy(&aBlock);
    swift_retain();
    id v46 = v41;
    uint64_t v47 = v58;
    static DispatchQoS.unspecified.getter();
    uint64_t v79 = MEMORY[0x263F8EE78];
    _sSo10CFErrorRefaABs5Error10FoundationWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v48 = v60;
    uint64_t v49 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v47, v48, v45);
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v61);
    return swift_release();
  }
  else
  {
LABEL_9:
    REMeshCompileOptionsCreate();
    uint64_t v51 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v51, (uint64_t)&v79);
    uint64_t v52 = v83;
    uint64_t v53 = v84;
    __swift_project_boxed_opaque_existential_1(&v79, v83);
    (*(void (**)(uint64_t, uint64_t))(v53 + 32))(v52, v53);
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = a2;
    *(void *)(v54 + 24) = a3;
    uint64_t v89 = partial apply for closure #2 in closure #1 in closure #1 in static MeshResource.generateAsync(from:);
    uint64_t v90 = (void *)v54;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v86 = 1107296256;
    uint64_t v87 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
    uint64_t v88 = &block_descriptor_96;
    long long v55 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    REAssetManagerMeshAssetCreateFromModelsWithOptionsAsyncWithError();
    _Block_release(v55);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
    uint64_t v56 = *(void *)(v18 + 16);
    if (v56)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v56; ++i)
        RERelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return RERelease();
  }
}

void closure #2 in closure #1 in closure #1 in static MeshResource.generateAsync(from:)(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t))
{
  if (a1)
  {
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for MeshResource();
      uint64_t v5 = swift_dynamicCastClass();
      if (v5)
      {
LABEL_6:
        a3(v5, 0);
        swift_release();
        return;
      }
      swift_unknownObjectRelease();
    }
    type metadata accessor for MeshResource();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    RERetain();
    REAssetSetSwiftObject();
    goto LABEL_6;
  }
  if (a2)
  {
    type metadata accessor for CFErrorRef(0);
    _sSo10CFErrorRefaABs5Error10FoundationWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
    long long v7 = (void *)swift_allocError();
    *uint64_t v8 = a2;
  }
  else
  {
    lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
    long long v7 = (void *)swift_allocError();
    *uint64_t v9 = xmmword_228323FE0;
  }
  id v10 = a2;
  a3((uint64_t)v7, 1);
}

uint64_t MeshResource.Skeleton.Joint.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Skeleton.Joint.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshResource.Skeleton.Joint.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Skeleton.Joint.parentIndex.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t MeshResource.Skeleton.Joint.parentIndex.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*MeshResource.Skeleton.Joint.parentIndex.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.Skeleton.Joint.inverseBindPoseMatrix.getter()
{
  return v0[2];
}

void MeshResource.Skeleton.Joint.inverseBindPoseMatrix.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
}

uint64_t (*MeshResource.Skeleton.Joint.inverseBindPoseMatrix.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.Skeleton.Joint.restPoseTransform.getter()
{
  return v0[6];
}

void MeshResource.Skeleton.Joint.restPoseTransform.setter(__n128 a1, __n128 a2, __n128 a3)
{
  v3[6] = a1;
  v3[7] = a2;
  v3[8] = a3;
}

uint64_t (*MeshResource.Skeleton.Joint.restPoseTransform.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t MeshResource.Skeleton.Joint.init(name:parentIndex:inverseBindPoseMatrix:restPoseTransform:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, __n128 *a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>, __n128 a8@<Q2>, __n128 a9@<Q3>, __n128 a10@<Q4>, __n128 a11@<Q5>, __n128 a12@<Q6>)
{
  a5->n128_u64[0] = result;
  a5->n128_u64[1] = a2;
  a5[1].n128_u64[0] = a3;
  a5[1].n128_u8[8] = a4 & 1;
  a5[2] = a6;
  a5[3] = a7;
  a5[4] = a8;
  a5[5] = a9;
  a5[6] = a10;
  a5[7] = a11;
  a5[8] = a12;
  return result;
}

uint64_t MeshResource.Skeleton.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource.Skeleton.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshResource.Skeleton.id.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Skeleton.joints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshResource.Skeleton.joints.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MeshResource.Skeleton.joints.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.Skeleton.init(id:joints:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

__n128 MeshResource.Skeleton.init(id:jointNames:inverseBindPoseMatrices:restPoseTransforms:parentIndices:)@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  uint64_t v12 = a7;
  if (a6)
  {
    int64_t v14 = *(void *)(a6 + 16);
    if (v14)
    {
      uint64_t v24 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      uint64_t v15 = v24;
      unint64_t v16 = *(void *)(v24 + 16);
      int64_t v17 = (unsigned char *)(a6 + 40);
      do
      {
        if (*v17) {
          uint64_t v18 = -1;
        }
        else {
          uint64_t v18 = *((void *)v17 - 1);
        }
        uint64_t v24 = v15;
        unint64_t v19 = *(void *)(v15 + 24);
        if (v16 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v16 + 1, 1);
          uint64_t v15 = v24;
        }
        *(void *)(v15 + 16) = v16 + 1;
        *(void *)(v15 + 8 * v16 + 32) = v18;
        v17 += 16;
        ++v16;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      uint64_t v7 = a5;
      uint64_t v12 = a7;
      uint64_t v8 = a4;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = MEMORY[0x263F8EE78];
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  MeshResource.Skeleton.init(id:jointNames:inverseBindPose:localRestPose:parentIndices:)(a1, a2, a3, v8, v7, v15, (uint64_t)&v24);
  __n128 result = v25;
  *(void *)uint64_t v12 = v24;
  *(__n128 *)(v12 + 8) = result;
  return result;
}

uint64_t closure #1 in MeshResource.Skeleton.init(id:jointNames:inverseBindPose:localRestPose:parentIndices:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v5 + 16) = v4;
    uint64_t v6 = (unint64_t *)(v5 + 16);
    if (HIDWORD(v4))
    {
LABEL_29:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v7 = v5;
    uint64_t v8 = v5 + 32;
    RESkeletonDefinitionGetParentIndices();
    *(void *)(v7 + 16) = v4;
    type metadata accessor for RESRT(0);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = v4;
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    uint64_t v8 = MEMORY[0x263F8EE78] + 32;
    RESkeletonDefinitionGetParentIndices();
    *(void *)(v9 + 16) = 0;
    uint64_t v6 = (unint64_t *)(v9 + 16);
  }
  RESkeletonDefinitionGetLocalRestPoses();
  *(void *)(v9 + 16) = v4;
  id v10 = *(void **)(a3 + 16);
  unint64_t v11 = v10[2];
  if (v11)
  {
    if (v11 <= v4 && v11 <= *v6)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      uint64_t v15 = (long long *)(v9 + 64);
      while (1)
      {
        unsigned int v16 = *(_DWORD *)(v8 + 4 * v14);
        if (v16 == -1) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = v16;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a3 + 16) = v10;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          id v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
        }
        if (v14 >= v10[2]) {
          break;
        }
        unint64_t v19 = &v10[v13];
        v19[6] = v17;
        *((unsigned char *)v19 + 56) = v16 == -1;
        *(void *)(a3 + 16) = v10;
        long long v24 = *(v15 - 1);
        long long v25 = *(v15 - 2);
        long long v23 = *v15;
        if (one-time initialization token for identity != -1)
        {
          swift_once();
          id v10 = *(void **)(a3 + 16);
        }
        char v20 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a3 + 16) = v10;
        if ((v20 & 1) == 0) {
          id v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
        }
        if (v14 >= v10[2]) {
          goto LABEL_27;
        }
        ++v14;
        uint64_t v21 = &v10[v13];
        v21[8] = v25;
        v21[9] = v24;
        v21[10] = v23;
        *(void *)(a3 + 16) = v10;
        v13 += 18;
        v15 += 3;
        if (v11 == v14) {
          goto LABEL_23;
        }
      }
      __break(1u);
LABEL_27:
      __break(1u);
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_23:
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t (*MeshResource.Part.skeletonID.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  *a1 = *(void *)(v1 + 24);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return MeshResource.Part.skeletonID.modify;
}

uint64_t MeshResource.Part.skeletonID.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 24) = v4;
    *(void *)(v3 + 32) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 24) = v4;
    *(void *)(v3 + 32) = v2;
  }
  return result;
}

uint64_t key path getter for MeshResource.Part.jointInfluences : MeshResource.Part@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 2);
  int v4 = *((_DWORD *)a1 + 10);
  char v5 = *((unsigned char *)a1 + 44);
  uint64_t v6 = *((void *)a1 + 6);
  char v7 = *((unsigned char *)a1 + 56);
  long long v10 = *a1;
  uint64_t v11 = v3;
  long long v12 = *(long long *)((char *)a1 + 24);
  int v13 = v4;
  char v14 = v5;
  uint64_t v15 = v6;
  char v16 = v7;
  MeshResource.Part.jointInfluences.getter((uint64_t)v9);
  outlined init with take of Transform?((uint64_t)v9, (uint64_t)&v10, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  return outlined init with take of Transform?((uint64_t)&v10, a2, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
}

uint64_t key path setter for MeshResource.Part.jointInfluences : MeshResource.Part(uint64_t a1)
{
  outlined init with take of Transform?(a1, (uint64_t)v3, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  outlined init with take of Transform?((uint64_t)v3, (uint64_t)v2, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  outlined release of MeshResource.JointInfluences?((uint64_t)v3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of MeshResource.JointInfluences?);
  return MeshResource.Part.jointInfluences.setter((uint64_t)v2);
}

uint64_t MeshResource.Part.jointInfluences.setter(uint64_t a1)
{
  outlined init with take of Transform?(a1, (uint64_t)v58, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  outlined init with take of Transform?((uint64_t)v58, (uint64_t)&v59, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  if (getEnumTag for RealityRenderer.CameraSettings.ColorBackground.Value(&v59) == 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    char v6 = 0;
    long long v7 = 0uLL;
    long long v8 = 0uLL;
    long long v9 = 0uLL;
  }
  else
  {
    long long v33 = v61;
    long long v30 = v60;
    long long v31 = v62;
    uint64_t v2 = v59;
    uint64_t v3 = v63;
    uint64_t v5 = v66;
    char v6 = v67;
    uint64_t v10 = 256;
    if (!v65) {
      uint64_t v10 = 0;
    }
    uint64_t v4 = v10 | v64;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    long long v9 = v31;
    long long v8 = v33;
    long long v7 = v30;
  }
  long long v51 = v7;
  long long v52 = v8;
  long long v53 = v9;
  uint64_t v50 = v2;
  uint64_t v54 = v3;
  uint64_t v55 = v4;
  uint64_t v56 = v5;
  char v57 = v6;
  specialized MeshBufferDictionary.subscript.setter((uint64_t)&v50, 0xD00000000000001FLL, 0x800000022834DB60, 0);
  outlined init with take of Transform?((uint64_t)v58, (uint64_t)v38, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
  if (getEnumTag for RealityRenderer.CameraSettings.ColorBackground.Value(v38) == 1)
  {
    unint64_t v37 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t result = specialized Dictionary.subscript.setter((uint64_t)&v35, 0xD000000000000023, 0x800000022834DB80, 0);
  }
  else
  {
    uint64_t v12 = v39;
    uint64_t v13 = v40;
    uint64_t v14 = v41;
    uint64_t v15 = v43;
    uint64_t v16 = v44;
    uint64_t v17 = v45;
    uint64_t v19 = v47;
    uint64_t v18 = v48;
    int v20 = v49;
    uint64_t v32 = v42;
    uint64_t v34 = v46;
    outlined copy of MeshResource.JointInfluences.InfluenceRate(v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49);
    outlined release of MeshResource.JointInfluences?((uint64_t)v58, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of MeshResource.JointInfluences?);
    if ((v20 & 0x80000000) == 0)
    {
      unint64_t v37 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      uint64_t result = specialized Dictionary.subscript.setter((uint64_t)&v35, 0xD000000000000023, 0x800000022834DB80, 0);
      *(_DWORD *)(v1 + 40) = v12;
      *(unsigned char *)(v1 + 44) = 0;
      return result;
    }
    char v29 = v20 & 0x7F;
    *((void *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int32>);
    unint64_t v37 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    uint64_t v21 = swift_allocObject();
    uint64_t v22 = v14;
    uint64_t v23 = v21;
    *(void *)&long long v35 = v21;
    char v27 = v20;
    char v26 = v20;
    uint64_t v28 = v13;
    uint64_t v24 = v22;
    outlined copy of MeshResource.JointInfluences.InfluenceRate(v12, v13, v22, v32, v15, v16, v17, v34, v19, v18, v26);
    if (one-time initialization token for triangleIndices != -1) {
      swift_once();
    }
    char v25 = 2;
    if (static MeshBuffers.Identifier.triangleIndices != 0xD000000000000023 || unk_2681C1CD0 != 0x800000022834DB80)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        char v25 = 2;
      }
      else {
        char v25 = v29;
      }
    }
    *(void *)(v23 + 16) = 0xD000000000000023;
    *(void *)(v23 + 24) = 0x800000022834DB80;
    *(_WORD *)(v23 + 32) = 0;
    *(void *)(v23 + 40) = v18;
    *(unsigned char *)(v23 + 48) = v25;
    *(unsigned char *)(v23 + 49) = v19;
    *(unsigned char *)(v23 + 50) = BYTE1(v19) & 1;
    *(void *)(v23 + 56) = v12;
    *(void *)(v23 + 64) = v28;
    *(void *)(v23 + 72) = v24;
    *(void *)(v23 + 80) = v32;
    *(void *)(v23 + 88) = v15;
    *(void *)(v23 + 96) = v16;
    *(void *)(v23 + 104) = v17;
    *(void *)(v23 + 112) = v34;
    *(unsigned char *)(v23 + 120) = v19;
    *(unsigned char *)(v23 + 121) = BYTE1(v19) & 1;
    *(void *)(v23 + 128) = v18;
    *(unsigned char *)(v23 + 136) = v29;
    specialized Dictionary.subscript.setter((uint64_t)&v35, 0xD000000000000023, 0x800000022834DB80, 0);
    uint64_t result = outlined consume of MeshResource.JointInfluences.InfluenceRate(v12, v28, v24, v32, v15, v16, v17, v34, v19, v18, v27);
  }
  *(_DWORD *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 44) = 1;
  return result;
}

void (*MeshResource.Part.jointInfluences.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x2C8uLL);
  *a1 = v3;
  v3[88] = v1;
  MeshResource.Part.jointInfluences.getter((uint64_t)v3);
  return MeshResource.Part.jointInfluences.modify;
}

void MeshResource.Part.jointInfluences.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *a1 + 176;
  uint64_t v4 = *a1 + 352;
  if (a2)
  {
    outlined init with take of Transform?(*a1, v4, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
    outlined init with take of Transform?(v4, (uint64_t)v2 + 528, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
    outlined release of MeshResource.JointInfluences?(v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of MeshResource.JointInfluences?);
    MeshResource.Part.jointInfluences.setter((uint64_t)v2 + 528);
    outlined init with take of Transform?((uint64_t)v2, v3, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
    outlined release of MeshResource.JointInfluences?(v3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of MeshResource.JointInfluences?);
  }
  else
  {
    outlined init with take of Transform?(*a1, v3, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
    outlined init with take of Transform?(v3, v4, &demangling cache variable for type metadata for MeshResource.JointInfluences?);
    MeshResource.Part.jointInfluences.setter(v4);
  }

  free(v2);
}

uint64_t MeshResource.JointInfluences.influences.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  char v3 = *(unsigned char *)(v1 + 64);
  char v4 = *(unsigned char *)(v1 + 65);
  uint64_t v5 = *(void *)(v1 + 72);
  char v6 = *(unsigned char *)(v1 + 80);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
  *(void *)(a1 + 56) = v2;
  *(unsigned char *)(a1 + 64) = v3;
  *(unsigned char *)(a1 + 65) = v4;
  *(void *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t MeshResource.JointInfluences.init(influences:influencesPerVertex:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 == (int)a2 && (a2 - 256) >= 0xFFFFFF01)
  {
    char v3 = *(unsigned char *)(result + 80);
    uint64_t v4 = *(void *)(result + 72);
    char v5 = *(unsigned char *)(result + 65);
    char v6 = *(unsigned char *)(result + 64);
    long long v7 = *(_OWORD *)(result + 16);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v7;
    long long v8 = *(_OWORD *)(result + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
    *(_OWORD *)(a3 + 48) = v8;
    *(unsigned char *)(a3 + 64) = v6;
    *(unsigned char *)(a3 + 65) = v5;
    *(void *)(a3 + 72) = v4;
    *(unsigned char *)(a3 + 80) = v3;
    *(void *)(a3 + 88) = a2;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 153) = 0u;
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 MeshResource.JointInfluences.init(influences:influencesPerVertex:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *(unsigned char *)(a1 + 64);
  char v6 = *(unsigned char *)(a1 + 65);
  uint64_t v7 = *(void *)(a1 + 72);
  char v8 = *(unsigned char *)(a1 + 80);
  uint64_t v9 = specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(*(void *)(a2 + 16), a2, *(void *)(a2 + 16));
  swift_bridgeObjectRelease();
  specialized MeshBuffer.init<A>(_:)(v9, (uint64_t)v20);
  uint64_t v10 = v23;
  char v11 = v24;
  uint64_t v12 = 256;
  if (!v22) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v12 | v21;
  __n128 result = (__n128)v20[0];
  long long v15 = v20[1];
  long long v16 = v20[2];
  long long v17 = v20[3];
  long long v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v18;
  long long v19 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 48) = v19;
  *(unsigned char *)(a3 + 64) = v5;
  *(unsigned char *)(a3 + 65) = v6;
  *(void *)(a3 + 72) = v7;
  *(unsigned char *)(a3 + 80) = v8;
  *(__n128 *)(a3 + 88) = result;
  *(_OWORD *)(a3 + 104) = v15;
  *(_OWORD *)(a3 + 120) = v16;
  *(_OWORD *)(a3 + 136) = v17;
  *(void *)(a3 + 152) = v13;
  *(void *)(a3 + 160) = v10;
  *(unsigned char *)(a3 + 168) = v11 | 0x80;
  return result;
}

uint64_t key path setter for MeshResource.Contents.skeletons : MeshResource.Contents(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = v4;
  return result;
}

uint64_t (*MeshResource.Contents.skeletons.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return MeshResource.Contents.skeletons.modify;
}

uint64_t MeshResource.Contents.skeletons.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v2;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v2;
  }
  return result;
}

uint64_t static MeshResource.generate(from:skeletons:)(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2)
  {
    uint64_t v22 = a2;
LABEL_10:
    int64_t v23 = *(void *)(v22 + 16);
    char v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0, MEMORY[0x263F8EE78]);
    if (v23)
    {
      uint64_t v47 = v3;
      swift_bridgeObjectRetain();
      char v25 = (uint64_t *)(v22 + 56);
      do
      {
        uint64_t v26 = *(v25 - 2);
        uint64_t v27 = *(v25 - 1);
        uint64_t v28 = *v25;
        uint64_t v52 = *(v25 - 3);
        uint64_t v53 = v26;
        uint64_t v54 = v27;
        uint64_t v55 = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MeshSkeleton.makeSkeletonDef()();
        uint64_t GeomSkeletonV2 = RESkeletonDefinitionCreateGeomSkeletonV2();
        RERelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (GeomSkeletonV2)
        {
          unint64_t v31 = v24[2];
          unint64_t v30 = v24[3];
          if (v31 >= v30 >> 1) {
            char v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v24);
          }
          void v24[2] = v31 + 1;
          v24[v31 + 4] = GeomSkeletonV2;
        }
        v25 += 4;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
      uint64_t v3 = v47;
    }
    REMeshCompileOptionsCreate();
    uint64_t v32 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v32, (uint64_t)&v52);
    uint64_t v33 = v55;
    uint64_t v34 = v56;
    __swift_project_boxed_opaque_existential_1(&v52, v55);
    (*(void (**)(uint64_t, uint64_t))(v34 + 32))(v33, v34);
    uint64_t v35 = REAssetManagerMeshAssetCreateFromModelsAndSkeletonsWithOptionsNullable();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
    uint64_t v36 = *(void *)(v3 + 16);
    if (v36)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v36; ++i)
        RERelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = v24[2];
    if (v20)
    {
      swift_bridgeObjectRetain();
      for (uint64_t j = 0; j != v20; ++j)
        RERelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (!v35)
    {
      lazy protocol witness table accessor for type MeshResourceError and conformance MeshResourceError();
      swift_allocError();
      *uint64_t v39 = xmmword_228323FE0;
      swift_willThrow();
      RERelease();
      return v20;
    }
    REAssetHandleLoadNow();
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for MeshResource();
      uint64_t v20 = swift_dynamicCastClass();
      if (v20)
      {
LABEL_31:
        RERelease();
        RERelease();
        return v20;
      }
      swift_unknownObjectRelease();
    }
    type metadata accessor for MeshResource();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v35;
    RERetain();
    REAssetSetSwiftObject();
    goto LABEL_31;
  }
  uint64_t v65 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  uint64_t v3 = v65;
  uint64_t v5 = a1 + 64;
  while (1)
  {
    uint64_t v46 = v3;
    uint64_t v6 = *(void *)(v5 - 24);
    uint64_t v7 = *(void *)(v5 - 16);
    uint64_t v8 = *(void *)(v5 - 8);
    char v9 = *(unsigned char *)v5;
    uint64_t v10 = *(void *)(v5 + 8);
    int64_t v42 = v2;
    uint64_t v43 = *(void *)(v5 + 16);
    unsigned __int8 v11 = *(unsigned char *)(v5 + 24);
    uint64_t v12 = *(void *)(v5 + 32);
    uint64_t v13 = *(void *)(v5 + 40);
    uint64_t v14 = *(void *)(v5 + 56);
    uint64_t v44 = *(void *)(v5 + 48);
    uint64_t v15 = *(void *)(v5 + 64);
    uint64_t v52 = *(void *)(v5 - 32);
    uint64_t v53 = v6;
    uint64_t v54 = v7;
    uint64_t v55 = v8;
    LOBYTE(v56) = v9;
    uint64_t v57 = v10;
    uint64_t v58 = v43;
    unsigned __int8 v59 = v11;
    uint64_t v60 = v12;
    uint64_t v61 = v13;
    uint64_t v62 = v44;
    uint64_t v63 = v14;
    uint64_t v64 = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v45 = v9;
    outlined copy of MeshDescriptor.Materials(v8, v9);
    outlined copy of MeshDescriptor.Primitives?(v10, v43, v11);
    outlined copy of MeshDescriptor.Skinning?(v12, v13);
    MeshDescriptor.makeGeomMesh()((uint64_t)&v48);
    uint64_t v16 = v48;
    if (v51) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(v8, v45);
    outlined consume of MeshDescriptor.Primitives?(v10, v43, v11);
    outlined consume of StateMachineGraph?(v12, v13);
    uint64_t v3 = v46;
    uint64_t v65 = v46;
    unint64_t v18 = *(void *)(v46 + 16);
    unint64_t v17 = *(void *)(v46 + 24);
    if (v18 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      uint64_t v3 = v65;
    }
    *(void *)(v3 + 16) = v18 + 1;
    *(void *)(v3 + 8 * v18 + 32) = v16;
    v5 += 104;
    int64_t v2 = v42 - 1;
    if (v42 == 1)
    {
      uint64_t v22 = a2;
      goto LABEL_10;
    }
  }
  uint64_t v19 = v49;
  uint64_t v20 = v50;
  uint64_t v52 = v48;
  uint64_t v53 = v49;
  LOWORD(v54) = v50;
  lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
  swift_willThrowTypedImpl();
  swift_allocError();
  *(void *)uint64_t v21 = v16;
  *(void *)(v21 + 8) = v19;
  *(_WORD *)(v21 + 16) = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of MeshDescriptor.Materials(v8, v45);
  outlined consume of MeshDescriptor.Primitives?(v10, v43, v11);
  outlined consume of StateMachineGraph?(v12, v13);
  swift_release();
  return v20;
}

BOOL static MeshResource._Proto_LevelStrategy_v1.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void MeshResource._Proto_LevelStrategy_v1.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int MeshResource._Proto_LevelStrategy_v1.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t MeshResource._Proto_SerialLevelAssemblyData_v1.meshPartEnd.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t MeshResource._Proto_SerialLevelAssemblyData_v1.__allocating_init(meshPartEnd:)(int a1)
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = a1;
  return result;
}

uint64_t MeshResource._Proto_SerialLevelAssemblyData_v1.init(meshPartEnd:)(int a1)
{
  *(_DWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t MeshResource._Proto_SerialLevelAssemblyData_v1.deinit()
{
  return v0;
}

uint64_t MeshResource._Proto_SerialLevelAssemblyData_v1.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t MeshResource._Proto_ScreenAreaLevelStrategyData_v1.init()()
{
  uint64_t result = v0;
  *(_DWORD *)(v0 + 16) = 0;
  return result;
}

uint64_t MeshResource._Proto_ScreenAreaLevelStrategyData_v1.deinit()
{
  return v0;
}

uint64_t protocol witness for MeshResource._Proto_LevelStrategyData_v1.init() in conformance MeshResource._Proto_ScreenAreaLevelStrategyData_v1@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for MeshResource._Proto_LevelStrategyData_v1.init() in conformance MeshResource._Proto_ScreenAreaLevelStrategyData_v1((void (*)(void))type metadata accessor for MeshResource._Proto_ScreenAreaLevelStrategyData_v1, a1, 0.0);
}

float MeshResource._Proto_ViewDepthLevelStrategyData_v1.maxViewDepth.getter()
{
  return *(float *)(v0 + 16);
}

uint64_t MeshResource._Proto_ViewDepthLevelStrategyData_v1.init()()
{
  uint64_t result = v0;
  *(_DWORD *)(v0 + 16) = 2139095040;
  return result;
}

uint64_t MeshResource._Proto_ViewDepthLevelStrategyData_v1.__allocating_init(maxViewDepth:)(float a1)
{
  uint64_t result = swift_allocObject();
  *(float *)(result + 16) = a1;
  return result;
}

uint64_t MeshResource._Proto_ViewDepthLevelStrategyData_v1.init(maxViewDepth:)(float a1)
{
  uint64_t result = v1;
  *(float *)(v1 + 16) = a1;
  return result;
}

uint64_t MeshResource._Proto_ViewDepthLevelStrategyData_v1.deinit()
{
  return v0;
}

uint64_t protocol witness for MeshResource._Proto_LevelStrategyData_v1.init() in conformance MeshResource._Proto_ViewDepthLevelStrategyData_v1@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for MeshResource._Proto_LevelStrategyData_v1.init() in conformance MeshResource._Proto_ScreenAreaLevelStrategyData_v1((void (*)(void))type metadata accessor for MeshResource._Proto_ViewDepthLevelStrategyData_v1, a1, INFINITY);
}

uint64_t protocol witness for MeshResource._Proto_LevelStrategyData_v1.init() in conformance MeshResource._Proto_ScreenAreaLevelStrategyData_v1@<X0>(void (*a1)(void)@<X2>, uint64_t *a2@<X8>, float a3@<S0>)
{
  a1();
  uint64_t result = swift_allocObject();
  *(float *)(result + 16) = a3;
  *a2 = result;
  return result;
}

uint64_t MeshResource._Proto_Level_v1.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MeshResource._Proto_Level_v1.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *int64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MeshResource._Proto_Level_v1.id.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource._Proto_Level_v1.levelAssemblyData.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of __REAssetService(v1 + 16, a1);
}

uint64_t MeshResource._Proto_Level_v1.levelAssemblyData.setter(long long *a1)
{
  uint64_t v3 = v1 + 16;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return outlined init with take of BindableDataInternal(a1, v3);
}

uint64_t (*MeshResource._Proto_Level_v1.levelAssemblyData.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource._Proto_Level_v1.levelStrategyData.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of __REAssetService(v1 + 56, a1);
}

uint64_t MeshResource._Proto_Level_v1.levelStrategyData.setter(long long *a1)
{
  uint64_t v3 = v1 + 56;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return outlined init with take of BindableDataInternal(a1, v3);
}

uint64_t (*MeshResource._Proto_Level_v1.levelStrategyData.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource._Proto_Level_v1.init(id:levelAssemblyData:levelStrategyData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  outlined init with take of BindableDataInternal(a3, (uint64_t)(a5 + 2));

  return outlined init with take of BindableDataInternal(a4, (uint64_t)(a5 + 7));
}

void MeshResource._Proto_LevelOptions_v1.levelStrategy.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *MeshResource._Proto_LevelOptions_v1.levelStrategy.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*MeshResource._Proto_LevelOptions_v1.levelStrategy.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.Model.init(id:parts:levels:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  MeshPartCollection.init(_:)(a3, &v11);
  __n128 v10 = v11;
  _Proto_MeshLevelCollection_v1.init(_:)(a4, (uint64_t *)&v11);
  __n128 result = v11;
  a5->n128_u64[0] = a1;
  a5->n128_u64[1] = a2;
  a5[1] = v10;
  a5[2] = result;
  return result;
}

unint64_t MeshResource.Instance.init(id:model:transform:levelOptions:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unsigned __int8 *a5@<X4>, __n128 *a6@<X8>, __n128 a7@<Q0>, __n128 a8@<Q1>, __n128 a9@<Q2>, __n128 a10@<Q3>)
{
  unsigned __int8 v10 = *a5;
  a6->n128_u64[0] = result;
  a6->n128_u64[1] = a2;
  a6[1].n128_u64[0] = a3;
  a6[1].n128_u64[1] = a4;
  a6[2] = a7;
  a6[3] = a8;
  a6[4] = a9;
  a6[5] = a10;
  a6[6].n128_u8[0] = v10;
  return result;
}

uint64_t MeshResource.Part.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v23 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v11 = v1[4];
  LODWORD(v6) = *((_DWORD *)v1 + 10);
  char v12 = *((unsigned char *)v1 + 44);
  uint64_t v13 = v1[6];
  char v14 = *((unsigned char *)v1 + 56);
  uint64_t v26 = *v1;
  uint64_t v27 = v8;
  uint64_t v28 = v10;
  uint64_t v29 = v9;
  uint64_t v30 = v11;
  int v31 = v6;
  char v32 = v12;
  uint64_t v33 = v13;
  char v34 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_228324960;
  *(void *)(v15 + 32) = 25705;
  *(void *)(v15 + 40) = 0xE200000000000000;
  uint64_t v16 = MEMORY[0x263F8D310];
  *(void *)(v15 + 48) = v8;
  *(void *)(v15 + 56) = v10;
  *(void *)(v15 + 72) = v16;
  strcpy((char *)(v15 + 80), "materialIndex");
  uint64_t v17 = MEMORY[0x263F8D6C8];
  *(_WORD *)(v15 + 94) = -4864;
  *(void *)(v15 + 96) = v13;
  *(void *)(v15 + 120) = v17;
  *(void *)(v15 + 128) = 0x6E6F74656C656B73;
  *(void *)(v15 + 136) = 0xEA00000000004449;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v15 + 144) = v9;
  *(void *)(v15 + 152) = v11;
  *(void *)(v15 + 168) = v18;
  *(void *)(v15 + 176) = 0x73726566667562;
  *(void *)(v15 + 184) = 0xE700000000000000;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = specialized _NativeDictionary.mapValues<A>(_:)(v19);
  *(void *)(v15 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MeshBuffers.Identifier : AnyMeshBuffer].Values);
  *(void *)(v15 + 192) = v20;
  uint64_t v21 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 1, 1, v21);
  (*(void (**)(char *, void, uint64_t))(v23 + 104))(v4, *MEMORY[0x263F8E830], v24);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static MeshResource.Skeleton.Joint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  float32x4_t v4 = *(float32x4_t *)(a1 + 32);
  float32x4_t v5 = *(float32x4_t *)(a1 + 48);
  float32x4_t v7 = *(float32x4_t *)(a1 + 64);
  float32x4_t v6 = *(float32x4_t *)(a1 + 80);
  __n128 v8 = *(__n128 *)(a1 + 96);
  __n128 v9 = *(__n128 *)(a1 + 112);
  __n128 v10 = *(__n128 *)(a1 + 128);
  uint64_t v11 = *(void *)(a2 + 16);
  int v12 = *(unsigned __int8 *)(a2 + 24);
  float32x4_t v13 = *(float32x4_t *)(a2 + 32);
  float32x4_t v14 = *(float32x4_t *)(a2 + 48);
  float32x4_t v15 = *(float32x4_t *)(a2 + 64);
  float32x4_t v16 = *(float32x4_t *)(a2 + 80);
  __n128 v17 = *(__n128 *)(a2 + 96);
  __n128 v18 = *(__n128 *)(a2 + 112);
  __n128 v19 = *(__n128 *)(a2 + 128);
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    __n128 v35 = *(__n128 *)(a1 + 112);
    __n128 v36 = *(__n128 *)(a1 + 96);
    float32x4_t v33 = *(float32x4_t *)(a1 + 64);
    __n128 v34 = *(__n128 *)(a1 + 128);
    float32x4_t v32 = *(float32x4_t *)(a1 + 80);
    __n128 v30 = *(__n128 *)(a2 + 112);
    __n128 v31 = *(__n128 *)(a2 + 96);
    float32x4_t v28 = *(float32x4_t *)(a1 + 32);
    __n128 v29 = *(__n128 *)(a2 + 128);
    float32x4_t v26 = *(float32x4_t *)(a2 + 64);
    float32x4_t v27 = *(float32x4_t *)(a1 + 48);
    float32x4_t v24 = *(float32x4_t *)(a2 + 32);
    float32x4_t v25 = *(float32x4_t *)(a2 + 80);
    float32x4_t v23 = *(float32x4_t *)(a2 + 48);
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    float32x4_t v14 = v23;
    float32x4_t v13 = v24;
    float32x4_t v16 = v25;
    float32x4_t v15 = v26;
    float32x4_t v5 = v27;
    float32x4_t v4 = v28;
    __n128 v19 = v29;
    __n128 v18 = v30;
    __n128 v17 = v31;
    float32x4_t v6 = v32;
    float32x4_t v7 = v33;
    __n128 v10 = v34;
    __n128 v9 = v35;
    __n128 v8 = v36;
    if ((v20 & 1) == 0) {
      return 0;
    }
  }
  if (v3)
  {
    if (!v12) {
      return 0;
    }
  }
  else
  {
    if (v2 == v11) {
      char v21 = v12;
    }
    else {
      char v21 = 1;
    }
    if (v21) {
      return 0;
    }
  }
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v5, v14), (int8x16_t)vceqq_f32(v4, v13)), vandq_s8((int8x16_t)vceqq_f32(v7, v15), (int8x16_t)vceqq_f32(v6, v16)))) & 0x80000000) == 0)return 0; {

  }
  return specialized static Transform.== infix(_:_:)(v8, v9, v10, v17, v18, v19);
}

uint64_t specialized MeshResource.Part.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x270FA5388](a1);
  float32x4_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *v6;
  long long v16 = v6[1];
  long long v17 = v7;
  long long v8 = v6[2];
  long long v14 = v6[3];
  long long v15 = v8;
  uint64_t v9 = *((void *)v6 + 8);
  uint64_t v10 = *((void *)v6 + 9);
  char v11 = *((unsigned char *)v6 + 80);
  (*(void (**)(char *))(v12 + 16))(v5);
  v18[0] = v17;
  v18[1] = v16;
  void v18[2] = v15;
  void v18[3] = v14;
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  char v21 = v11;
  return MeshBufferDictionary.subscript.setter((uint64_t)v18, (uint64_t)v5, a3);
}

double _s10RealityKit12MeshResourceC0A10FoundationE15JointInfluencesVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 153) = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t specialized static MeshResource.Skeleton.makeSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = RESkeletonDefinitionCreate();
  String.utf8CString.getter();
  RESkeletonDefinitionSetName();
  swift_release();
  unint64_t v11 = *(void *)(a3 + 16);
  if (HIDWORD(v11)) {
    goto LABEL_10;
  }
  RESkeletonDefinitionSetJointCount();
  if (v11)
  {
    String.utf8CString.getter();
    RESkeletonDefinitionSetJointName();
    swift_release();
    if (v11 != 1)
    {
      uint64_t v12 = a3 + 56;
      for (uint64_t i = 1; i != v11; ++i)
      {
        String.utf8CString.getter();
        RESkeletonDefinitionSetJointName();
        swift_release();
        v12 += 16;
      }
    }
  }
  if (HIDWORD(*(void *)(a4 + 16))
    || (RESkeletonDefinitionSetParentIndices(), HIDWORD(*(void *)(a5 + 16)))
    || (RESkeletonDefinitionSetInverseBindPoses(), HIDWORD(*(void *)(a6 + 16))))
  {
LABEL_10:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    RESkeletonDefinitionSetLocalRestPoses();
    return v10;
  }
  return result;
}

uint64_t specialized static MeshResource.Skeleton.withValidatedSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = specialized static MeshResource.Skeleton.makeSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:)(a1, a2, a3, a4, a5, a6);
  uint64_t result = RESkeletonDefinitionValidate();
  if (result)
  {
    closure #1 in MeshResource.Skeleton.init(id:jointNames:inverseBindPose:localRestPose:parentIndices:)(v10, a7, a8);
    return RERelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  char v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (uint64_t)v2;
  }
  for (uint64_t i = (uint64_t *)(a1 + 48); ; i += 8)
  {
    uint64_t v32 = v4;
    float32x4_t v33 = v2;
    uint64_t v7 = *(i - 2);
    uint64_t v6 = *(i - 1);
    uint64_t v8 = i[1];
    uint64_t v30 = *i;
    uint64_t v9 = i[2];
    uint64_t v10 = i[3];
    uint64_t v12 = i[4];
    uint64_t v11 = i[5];
    uint64_t v34 = v2[2];
    swift_bridgeObjectRetain_n();
    uint64_t v31 = v8;
    swift_bridgeObjectRetain_n();
    uint64_t v35 = v9;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    uint64_t v16 = v3[2];
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      break;
    }
    char v19 = v14;
    if (v3[3] >= v18)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v19 & 1) != (v21 & 1)) {
        goto LABEL_21;
      }
      unint64_t v15 = v20;
    }
    if (v19)
    {
      *(void *)(v3[7] + 8 * v15) = v34;
    }
    else
    {
      v3[(v15 >> 6) + 8] |= 1 << v15;
      uint64_t v22 = (uint64_t *)(v3[6] + 16 * v15);
      *uint64_t v22 = v7;
      v22[1] = v6;
      *(void *)(v3[7] + 8 * v15) = v34;
      uint64_t v23 = v3[2];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_20;
      }
      v3[2] = v25;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v2 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
    }
    unint64_t v27 = v2[2];
    unint64_t v26 = v2[3];
    if (v27 >= v26 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v2);
    }
    v2[2] = v27 + 1;
    float32x4_t v28 = &v2[6 * v27];
    v28[4] = v30;
    v28[5] = v31;
    v28[6] = v35;
    v28[7] = v10;
    v28[8] = v12;
    v28[9] = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v4 = v32 - 1;
    if (v32 == 1) {
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t result;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  char v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (uint64_t)v2;
  }
  for (uint64_t i = (uint64_t *)(a1 + 56); ; i += 10)
  {
    __n128 v36 = v4;
    unint64_t v37 = v2;
    uint64_t v7 = *(i - 3);
    uint64_t v6 = *(i - 2);
    uint64_t v8 = *(i - 1);
    uint64_t v9 = i[1];
    uint64_t v34 = i[2];
    uint64_t v35 = *i;
    uint64_t v10 = i[3];
    uint64_t v32 = *((unsigned char *)i + 36);
    float32x4_t v33 = *((_DWORD *)i + 8);
    uint64_t v31 = i[5];
    uint64_t v30 = *((unsigned char *)i + 48);
    uint64_t v11 = v2[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    __n128 v29 = v8;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    unint64_t v15 = v3[2];
    uint64_t v16 = (v13 & 1) == 0;
    BOOL v17 = v15 + v16;
    if (__OFADD__(v15, v16)) {
      break;
    }
    uint64_t v18 = v13;
    if (v3[3] >= v17)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v13) {
          goto LABEL_10;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v18) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, isUniquelyReferenced_nonNull_native);
      char v19 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v18 & 1) != (v20 & 1)) {
        goto LABEL_22;
      }
      char v14 = v19;
      if (v18)
      {
LABEL_10:
        *(void *)(v3[7] + 8 * v14) = v11;
        goto LABEL_14;
      }
    }
    v3[(v14 >> 6) + 8] |= 1 << v14;
    char v21 = (uint64_t *)(v3[6] + 16 * v14);
    *char v21 = v7;
    v21[1] = v6;
    *(void *)(v3[7] + 8 * v14) = v11;
    uint64_t v22 = v3[2];
    uint64_t v23 = __OFADD__(v22, 1);
    BOOL v24 = v22 + 1;
    if (v23) {
      goto LABEL_21;
    }
    v3[2] = v24;
    swift_bridgeObjectRetain();
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v2 = v37;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
    }
    unint64_t v26 = v2[2];
    uint64_t v25 = v2[3];
    if (v26 >= v25 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v2);
    }
    v2[2] = v26 + 1;
    unint64_t v27 = &v2[8 * v26];
    v27[4] = v29;
    v27[5] = v35;
    v27[6] = v9;
    v27[7] = v34;
    unsigned __int8 v27[8] = v10;
    *((_DWORD *)v27 + 18) = v33;
    *((unsigned char *)v27 + 76) = v32;
    void v27[10] = v31;
    *((unsigned char *)v27 + 88) = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v4 = v36 - 1;
    if (v36 == 1) {
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[6];
  void v34[2];
  _OWORD v35[6];
  uint64_t v36;
  uint64_t v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;

  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  char v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (uint64_t)v2;
  }
  float32x4_t v5 = a1 + 32;
  while (1)
  {
    uint64_t v31 = v5;
    uint64_t v32 = v4;
    outlined init with copy of (Int, URL)(v5, (uint64_t)&v36, &demangling cache variable for type metadata for (String, MeshResource._Proto_Level_v1));
    uint64_t v6 = v37;
    v34[0] = v36;
    uint64_t v7 = v36;
    v34[1] = v37;
    v35[2] = v40;
    long long v35[3] = v41;
    unsigned char v35[4] = v42;
    v35[5] = v43;
    v35[0] = v38;
    v35[1] = v39;
    outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)v35, (uint64_t)v33);
    uint64_t v8 = v2;
    uint64_t v9 = v2[2];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    float32x4_t v13 = v3[2];
    char v14 = (v11 & 1) == 0;
    unint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14)) {
      break;
    }
    uint64_t v16 = v11;
    if (v3[3] >= v15)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v11) {
          goto LABEL_10;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v16) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      BOOL v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v16 & 1) != (v18 & 1)) {
        goto LABEL_22;
      }
      uint64_t v12 = v17;
      if (v16)
      {
LABEL_10:
        *(void *)(v3[7] + 8 * v12) = v9;
        goto LABEL_14;
      }
    }
    v3[(v12 >> 6) + 8] |= 1 << v12;
    char v19 = (uint64_t *)(v3[6] + 16 * v12);
    *char v19 = v7;
    v19[1] = v6;
    *(void *)(v3[7] + 8 * v12) = v9;
    unint64_t v20 = v3[2];
    char v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_21;
    }
    v3[2] = v22;
    swift_bridgeObjectRetain();
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MeshResource._Proto_Level_v1((uint64_t)v33);
    outlined init with copy of MeshResource._Proto_Level_v1((uint64_t)v35, (uint64_t)v33);
    swift_bridgeObjectRetain();
    uint64_t v2 = v8;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    }
    BOOL v24 = v2[2];
    uint64_t v23 = v2[3];
    if (v24 >= v23 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v2);
    }
    v2[2] = v24 + 1;
    uint64_t v25 = &v2[12 * v24];
    unint64_t v26 = v33[1];
    uint64_t v25[2] = v33[0];
    v25[3] = v26;
    unint64_t v27 = v33[2];
    float32x4_t v28 = v33[3];
    __n128 v29 = v33[5];
    v25[6] = v33[4];
    v25[7] = v29;
    v25[4] = v27;
    v25[5] = v28;
    outlined destroy of BodyTrackingComponent?((uint64_t)v34, &demangling cache variable for type metadata for (String, MeshResource._Proto_Level_v1));
    swift_bridgeObjectRelease();
    float32x4_t v5 = v31 + 112;
    uint64_t v4 = v32 - 1;
    if (v32 == 1) {
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  unsigned char *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t result;
  char v28;
  uint64_t v29;
  uint64_t v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t v35;
  void *v36;

  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  char v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (uint64_t)v2;
  }
  for (uint64_t i = (unsigned char *)(a1 + 144); ; i += 128)
  {
    uint64_t v35 = v4;
    uint64_t v7 = *((void *)i - 14);
    uint64_t v6 = *((void *)i - 13);
    uint64_t v8 = *((void *)i - 11);
    uint64_t v9 = *((void *)i - 9);
    __n128 v29 = *((void *)i - 10);
    uint64_t v30 = *((void *)i - 12);
    float32x4_t v33 = *((_OWORD *)i - 3);
    uint64_t v34 = *((_OWORD *)i - 4);
    uint64_t v31 = *((_OWORD *)i - 1);
    uint64_t v32 = *((_OWORD *)i - 2);
    float32x4_t v28 = *i;
    __n128 v36 = v2;
    uint64_t v10 = v2[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    float32x4_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    char v14 = v3[2];
    unint64_t v15 = (v12 & 1) == 0;
    uint64_t v16 = v14 + v15;
    if (__OFADD__(v14, v15)) {
      break;
    }
    BOOL v17 = v12;
    if (v3[3] >= v16)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v12) {
          goto LABEL_10;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v17) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
      uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v17 & 1) != (v19 & 1)) {
        goto LABEL_22;
      }
      float32x4_t v13 = v18;
      if (v17)
      {
LABEL_10:
        *(void *)(v3[7] + 8 * v13) = v10;
        goto LABEL_14;
      }
    }
    v3[(v13 >> 6) + 8] |= 1 << v13;
    unint64_t v20 = (uint64_t *)(v3[6] + 16 * v13);
    *unint64_t v20 = v7;
    v20[1] = v6;
    *(void *)(v3[7] + 8 * v13) = v10;
    char v21 = v3[2];
    uint64_t v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_21;
    }
    v3[2] = v23;
    swift_bridgeObjectRetain();
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v2 = v36;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
    }
    uint64_t v25 = v2[2];
    BOOL v24 = v2[3];
    if (v25 >= v24 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v2);
    }
    v2[2] = v25 + 1;
    unint64_t v26 = &v2[14 * v25];
    _OWORD v26[4] = v30;
    void v26[5] = v8;
    v26[6] = v29;
    v26[7] = v9;
    *((_OWORD *)v26 + 4) = v34;
    *((_OWORD *)v26 + 5) = v33;
    *((_OWORD *)v26 + 6) = v32;
    *((_OWORD *)v26 + 7) = v31;
    *((unsigned char *)v26 + 128) = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v4 = v35 - 1;
    if (v35 == 1) {
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  long long v29;

  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  char v3 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (uint64_t)v2;
  }
  float32x4_t v5 = (_OWORD *)(a1 + 56);
  while (1)
  {
    unint64_t v27 = v4;
    float32x4_t v28 = v2;
    uint64_t v7 = *((void *)v5 - 3);
    uint64_t v6 = *((void *)v5 - 2);
    unint64_t v26 = *((void *)v5 - 1);
    __n128 v29 = *v5;
    uint64_t v8 = v2[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    uint64_t v12 = v3[2];
    float32x4_t v13 = (v10 & 1) == 0;
    char v14 = v12 + v13;
    if (__OFADD__(v12, v13)) {
      break;
    }
    unint64_t v15 = v10;
    if (v3[3] >= v14)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v10) {
          goto LABEL_10;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v15) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_22;
      }
      uint64_t v11 = v16;
      if (v15)
      {
LABEL_10:
        *(void *)(v3[7] + 8 * v11) = v8;
        goto LABEL_14;
      }
    }
    v3[(v11 >> 6) + 8] |= 1 << v11;
    uint64_t v18 = (uint64_t *)(v3[6] + 16 * v11);
    *uint64_t v18 = v7;
    v18[1] = v6;
    *(void *)(v3[7] + 8 * v11) = v8;
    char v19 = v3[2];
    unint64_t v20 = __OFADD__(v19, 1);
    char v21 = v19 + 1;
    if (v20) {
      goto LABEL_21;
    }
    v3[2] = v21;
    swift_bridgeObjectRetain();
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v2 = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    }
    uint64_t v23 = v2[2];
    uint64_t v22 = v2[3];
    if (v23 >= v22 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v2);
    }
    float32x4_t v5 = (_OWORD *)((char *)v5 + 40);
    v2[2] = v23 + 1;
    BOOL v24 = &v2[3 * v23];
    v24[4] = v26;
    *(_OWORD *)(v24 + 5) = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v4 = v27 - 1;
    if (v27 == 1) {
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined release of MeshResource.Model(uint64_t a1)
{
  return a1;
}

uint64_t sub_2280C63CC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t partial apply for closure #1 in MeshResource.replaceAsync(with:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in MeshResource.replaceAsync(with:)(a1, a2, *(void *)(v2 + 16), (_OWORD *)(v2 + 24), *(void *)(v2 + 72), *(void **)(v2 + 80));
}

uint64_t outlined retain of MeshResource.Contents(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError()
{
  unint64_t result = lazy protocol witness table cache variable for type GeomMeshError and conformance GeomMeshError;
  if (!lazy protocol witness table cache variable for type GeomMeshError and conformance GeomMeshError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeomMeshError and conformance GeomMeshError);
  }
  return result;
}

uint64_t sub_2280C6528()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in static MeshResource.generateAsync(from:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static MeshResource.generateAsync(from:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t outlined copy of MeshResource.JointInfluences.InfluenceRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11 < 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined release of MeshResource.JointInfluences?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 168);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    v4);
  return a1;
}

uint64_t outlined copy of MeshResource.JointInfluences?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return outlined copy of MeshResource.JointInfluences.InfluenceRate(a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
  }
  return result;
}

uint64_t specialized Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0) {
    goto LABEL_16;
  }
  if (a1)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
    uint64_t v7 = *(void *)(a2 + 16);
    if (!v7)
    {
LABEL_11:
      if (a1 >= a3)
      {
        *(void *)(result + 16) = a3;
        return result;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t result = MEMORY[0x263F8EE78];
    uint64_t v7 = *(void *)(a2 + 16);
    if (!v7) {
      goto LABEL_11;
    }
  }
  int v8 = 0;
  uint64_t v9 = (_DWORD *)(result + 32);
  uint64_t v10 = (uint64_t *)(a2 + 32);
  while (1)
  {
    uint64_t v12 = *v10++;
    int v11 = v12;
    if (v12 != (int)v12 || v11 < 0) {
      break;
    }
    BOOL v13 = __OFADD__(v8, v11);
    v8 += v11;
    if (v13) {
      goto LABEL_14;
    }
    *v9++ = v8;
    if (!--v7) {
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshModelCollection.Iterator and conformance MeshModelCollection.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshModelCollection.Iterator and conformance MeshModelCollection.Iterator;
  if (!lazy protocol witness table cache variable for type MeshModelCollection.Iterator and conformance MeshModelCollection.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshModelCollection.Iterator and conformance MeshModelCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshModelCollection and conformance MeshModelCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshModelCollection and conformance MeshModelCollection;
  if (!lazy protocol witness table cache variable for type MeshModelCollection and conformance MeshModelCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshModelCollection and conformance MeshModelCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MeshModelCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<MeshModelCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<MeshModelCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MeshModelCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<MeshModelCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MeshModelCollection>);
}

unint64_t lazy protocol witness table accessor for type MeshPartCollection.Iterator and conformance MeshPartCollection.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshPartCollection.Iterator and conformance MeshPartCollection.Iterator;
  if (!lazy protocol witness table cache variable for type MeshPartCollection.Iterator and conformance MeshPartCollection.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshPartCollection.Iterator and conformance MeshPartCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshPartCollection and conformance MeshPartCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshPartCollection and conformance MeshPartCollection;
  if (!lazy protocol witness table cache variable for type MeshPartCollection and conformance MeshPartCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshPartCollection and conformance MeshPartCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MeshPartCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<MeshPartCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<MeshPartCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MeshPartCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<MeshPartCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MeshPartCollection>);
}

unint64_t lazy protocol witness table accessor for type _Proto_MeshLevelCollection_v1.Iterator and conformance _Proto_MeshLevelCollection_v1.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1.Iterator and conformance _Proto_MeshLevelCollection_v1.Iterator;
  if (!lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1.Iterator and conformance _Proto_MeshLevelCollection_v1.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1.Iterator and conformance _Proto_MeshLevelCollection_v1.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _Proto_MeshLevelCollection_v1 and conformance _Proto_MeshLevelCollection_v1()
{
  unint64_t result = lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1 and conformance _Proto_MeshLevelCollection_v1;
  if (!lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1 and conformance _Proto_MeshLevelCollection_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_MeshLevelCollection_v1 and conformance _Proto_MeshLevelCollection_v1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _Proto_MeshLevelCollection_v1()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<_Proto_MeshLevelCollection_v1> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<_Proto_MeshLevelCollection_v1>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _Proto_MeshLevelCollection_v1()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<_Proto_MeshLevelCollection_v1> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<_Proto_MeshLevelCollection_v1>);
}

unint64_t lazy protocol witness table accessor for type MeshInstanceCollection.Iterator and conformance MeshInstanceCollection.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshInstanceCollection.Iterator and conformance MeshInstanceCollection.Iterator;
  if (!lazy protocol witness table cache variable for type MeshInstanceCollection.Iterator and conformance MeshInstanceCollection.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshInstanceCollection.Iterator and conformance MeshInstanceCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshInstanceCollection and conformance MeshInstanceCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshInstanceCollection and conformance MeshInstanceCollection;
  if (!lazy protocol witness table cache variable for type MeshInstanceCollection and conformance MeshInstanceCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshInstanceCollection and conformance MeshInstanceCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MeshInstanceCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<MeshInstanceCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<MeshInstanceCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MeshInstanceCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<MeshInstanceCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MeshInstanceCollection>);
}

unint64_t lazy protocol witness table accessor for type MeshSkeletonCollection.Iterator and conformance MeshSkeletonCollection.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshSkeletonCollection.Iterator and conformance MeshSkeletonCollection.Iterator;
  if (!lazy protocol witness table cache variable for type MeshSkeletonCollection.Iterator and conformance MeshSkeletonCollection.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshSkeletonCollection.Iterator and conformance MeshSkeletonCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MeshSkeletonCollection and conformance MeshSkeletonCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshSkeletonCollection and conformance MeshSkeletonCollection;
  if (!lazy protocol witness table cache variable for type MeshSkeletonCollection and conformance MeshSkeletonCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshSkeletonCollection and conformance MeshSkeletonCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in MeshSkeletonCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<MeshSkeletonCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<MeshSkeletonCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in MeshSkeletonCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<MeshSkeletonCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<MeshSkeletonCollection>);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in MeshResource.Part()
{
  return MEMORY[0x263F8D320];
}

unint64_t lazy protocol witness table accessor for type MeshResource._Proto_LevelStrategy_v1 and conformance MeshResource._Proto_LevelStrategy_v1()
{
  unint64_t result = lazy protocol witness table cache variable for type MeshResource._Proto_LevelStrategy_v1 and conformance MeshResource._Proto_LevelStrategy_v1;
  if (!lazy protocol witness table cache variable for type MeshResource._Proto_LevelStrategy_v1 and conformance MeshResource._Proto_LevelStrategy_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshResource._Proto_LevelStrategy_v1 and conformance MeshResource._Proto_LevelStrategy_v1);
  }
  return result;
}

uint64_t sub_2280C6E8C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 48);
  return result;
}

void *sub_2280C6E98(void *result, uint64_t a2)
{
  *(void *)(a2 + 48) = *result;
  *(unsigned char *)(a2 + 56) = 0;
  return result;
}

uint64_t sub_2280C6EB8()
{
  return 16;
}

__n128 sub_2280C6EC4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2280C6ED0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2280C6EDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v3;
  return result;
}

uint64_t sub_2280C6F28@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *a2 = *(void *)(a1 + 32);
  a2[1] = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for MeshModelCollection()
{
  return &type metadata for MeshModelCollection;
}

ValueMetadata *type metadata accessor for MeshModelCollection.Iterator()
{
  return &type metadata for MeshModelCollection.Iterator;
}

ValueMetadata *type metadata accessor for MeshPartCollection()
{
  return &type metadata for MeshPartCollection;
}

ValueMetadata *type metadata accessor for MeshPartCollection.Iterator()
{
  return &type metadata for MeshPartCollection.Iterator;
}

ValueMetadata *type metadata accessor for _Proto_MeshLevelCollection_v1()
{
  return &type metadata for _Proto_MeshLevelCollection_v1;
}

ValueMetadata *type metadata accessor for _Proto_MeshLevelCollection_v1.Iterator()
{
  return &type metadata for _Proto_MeshLevelCollection_v1.Iterator;
}

ValueMetadata *type metadata accessor for MeshInstanceCollection()
{
  return &type metadata for MeshInstanceCollection;
}

ValueMetadata *type metadata accessor for MeshInstanceCollection.Iterator()
{
  return &type metadata for MeshInstanceCollection.Iterator;
}

ValueMetadata *type metadata accessor for MeshSkeletonCollection()
{
  return &type metadata for MeshSkeletonCollection;
}

ValueMetadata *type metadata accessor for MeshSkeletonCollection.Iterator()
{
  return &type metadata for MeshSkeletonCollection.Iterator;
}

uint64_t destroy for MeshResource.Part()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MeshResource.Part(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshResource.Part(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for MeshResource.Part(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for MeshResource.Part()
{
  return &type metadata for MeshResource.Part;
}

uint64_t destroy for MeshResource.Model()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MeshResource.Model(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MeshResource.Model(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MeshResource.Model(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MeshResource.Model()
{
  return &type metadata for MeshResource.Model;
}

uint64_t initializeWithCopy for MeshResource.Instance(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshResource.Instance(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for MeshResource.Instance(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource.Instance(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 97)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshResource.Instance(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.Instance()
{
  return &type metadata for MeshResource.Instance;
}

uint64_t destroy for MeshResource.Contents()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MeshResource.Contents(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MeshResource.Contents(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MeshResource.Contents(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MeshResource.Contents()
{
  return &type metadata for MeshResource.Contents;
}

ValueMetadata *type metadata accessor for MeshResource.Skeleton()
{
  return &type metadata for MeshResource.Skeleton;
}

uint64_t initializeWithCopy for MeshResource.Skeleton.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 96) = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshResource.Skeleton.Joint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy144_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for MeshResource.Skeleton.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource.Skeleton.Joint(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshResource.Skeleton.Joint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.Skeleton.Joint()
{
  return &type metadata for MeshResource.Skeleton.Joint;
}

uint64_t destroy for MeshResource.JointInfluences(uint64_t a1)
{
  return outlined consume of MeshResource.JointInfluences.InfluenceRate(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(unsigned char *)(a1 + 168));
}

uint64_t initializeWithCopy for MeshResource.JointInfluences(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v3;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 104);
  uint64_t v5 = *(void *)(a2 + 112);
  uint64_t v6 = *(void *)(a2 + 120);
  uint64_t v7 = *(void *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 136);
  uint64_t v9 = *(void *)(a2 + 152);
  uint64_t v13 = *(void *)(a2 + 144);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v10 = *(void *)(a2 + 160);
  char v11 = *(unsigned char *)(a2 + 168);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of MeshResource.JointInfluences.InfluenceRate(v15, v14, v4, v5, v6, v7, v8, v13, v9, v10, v11);
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = v5;
  *(void *)(a1 + 120) = v6;
  *(void *)(a1 + 128) = v7;
  *(void *)(a1 + 136) = v8;
  *(void *)(a1 + 144) = v13;
  *(void *)(a1 + 152) = v9;
  *(void *)(a1 + 160) = v10;
  *(unsigned char *)(a1 + 168) = v11;
  return a1;
}

uint64_t assignWithCopy for MeshResource.JointInfluences(uint64_t a1, void *a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = v2[3];
  *(void *)(a1 + 16) = v2[2];
  *(void *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = v2[5];
  *(void *)(a1 + 32) = v2[4];
  *(void *)(a1 + 40) = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = v2[7];
  *(void *)(a1 + 48) = v2[6];
  *(void *)(a1 + 56) = v7;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *((unsigned char *)v2 + 64);
  *(unsigned char *)(a1 + 65) = *((unsigned char *)v2 + 65);
  *(void *)(a1 + 72) = v2[9];
  *(unsigned char *)(a1 + 80) = *((unsigned char *)v2 + 80);
  uint64_t v8 = v2[11];
  uint64_t v9 = v2[12];
  uint64_t v10 = v2[13];
  uint64_t v11 = v2[14];
  uint64_t v12 = v2[15];
  uint64_t v13 = v2[16];
  uint64_t v14 = v2[17];
  uint64_t v15 = v2[18];
  uint64_t v28 = v2[19];
  uint64_t v29 = v2[20];
  LOBYTE(v2) = *((unsigned char *)v2 + 168);
  outlined copy of MeshResource.JointInfluences.InfluenceRate(v8, v9, v10, v11, v12, v13, v14, v15, v28, v29, (char)v2);
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 96);
  uint64_t v18 = *(void *)(a1 + 104);
  uint64_t v19 = *(void *)(a1 + 112);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = *(void *)(a1 + 128);
  uint64_t v22 = *(void *)(a1 + 136);
  uint64_t v23 = *(void *)(a1 + 144);
  uint64_t v24 = *(void *)(a1 + 152);
  uint64_t v25 = *(void *)(a1 + 160);
  char v26 = *(unsigned char *)(a1 + 168);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v10;
  *(void *)(a1 + 112) = v11;
  *(void *)(a1 + 120) = v12;
  *(void *)(a1 + 128) = v13;
  *(void *)(a1 + 136) = v14;
  *(void *)(a1 + 144) = v15;
  *(void *)(a1 + 152) = v28;
  *(void *)(a1 + 160) = v29;
  *(unsigned char *)(a1 + 168) = (_BYTE)v2;
  outlined consume of MeshResource.JointInfluences.InfluenceRate(v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26);
  return a1;
}

__n128 __swift_memcpy169_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(_OWORD *)(a1 + 153) = *(long long *)((char *)a2 + 153);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for MeshResource.JointInfluences(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  char v4 = *(unsigned char *)(a2 + 168);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  uint64_t v10 = *(void *)(a1 + 128);
  uint64_t v11 = *(void *)(a1 + 136);
  uint64_t v12 = *(void *)(a1 + 144);
  uint64_t v13 = *(void *)(a1 + 152);
  uint64_t v14 = *(void *)(a1 + 160);
  char v15 = *(unsigned char *)(a1 + 168);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = v4;
  outlined consume of MeshResource.JointInfluences.InfluenceRate(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource.JointInfluences(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 169)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshResource.JointInfluences(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 168) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 169) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 169) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.JointInfluences()
{
  return &type metadata for MeshResource.JointInfluences;
}

ValueMetadata *type metadata accessor for MeshResource._Proto_LevelStrategy_v1()
{
  return &type metadata for MeshResource._Proto_LevelStrategy_v1;
}

uint64_t type metadata accessor for MeshResource._Proto_SerialLevelAssemblyData_v1()
{
  return self;
}

uint64_t method lookup function for MeshResource._Proto_SerialLevelAssemblyData_v1(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MeshResource._Proto_SerialLevelAssemblyData_v1);
}

uint64_t dispatch thunk of MeshResource._Proto_SerialLevelAssemblyData_v1.__allocating_init(meshPartEnd:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of MeshResource._Proto_LevelStrategyData_v1.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for MeshResource._Proto_ScreenAreaLevelStrategyData_v1()
{
  return self;
}

uint64_t method lookup function for MeshResource._Proto_ScreenAreaLevelStrategyData_v1(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MeshResource._Proto_ScreenAreaLevelStrategyData_v1);
}

uint64_t dispatch thunk of MeshResource._Proto_ScreenAreaLevelStrategyData_v1.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of MeshResource._Proto_ScreenAreaLevelStrategyData_v1.__allocating_init(minScreenArea:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for MeshResource._Proto_ViewDepthLevelStrategyData_v1()
{
  return self;
}

uint64_t method lookup function for MeshResource._Proto_ViewDepthLevelStrategyData_v1(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MeshResource._Proto_ViewDepthLevelStrategyData_v1);
}

uint64_t dispatch thunk of MeshResource._Proto_ViewDepthLevelStrategyData_v1.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of MeshResource._Proto_ViewDepthLevelStrategyData_v1.__allocating_init(maxViewDepth:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t destroy for MeshResource._Proto_Level_v1(uint64_t a1)
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 56);
}

uint64_t initializeWithCopy for MeshResource._Proto_Level_v1(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2 + 16;
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 16, v5, v7);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 56, a2 + 56);
  return a1;
}

void *assignWithCopy for MeshResource._Proto_Level_v1(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  __swift_assign_boxed_opaque_existential_1(a1 + 7, a2 + 7);
  return a1;
}

uint64_t assignWithTake for MeshResource._Proto_Level_v1(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource._Proto_Level_v1(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshResource._Proto_Level_v1(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource._Proto_Level_v1()
{
  return &type metadata for MeshResource._Proto_Level_v1;
}

unsigned char *storeEnumTagSinglePayload for MeshResource._Proto_LevelStrategy_v1(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280C8404);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource._Proto_LevelOptions_v1()
{
  return &type metadata for MeshResource._Proto_LevelOptions_v1;
}

uint64_t destroy for MeshResource.JointInfluences.InfluenceRate(uint64_t a1)
{
  return outlined consume of MeshResource.JointInfluences.InfluenceRate(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
}

uint64_t initializeWithCopy for MeshResource.JointInfluences.InfluenceRate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  char v14 = *(unsigned char *)(a2 + 80);
  outlined copy of MeshResource.JointInfluences.InfluenceRate(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for MeshResource.JointInfluences.InfluenceRate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  char v25 = *(unsigned char *)(a2 + 80);
  outlined copy of MeshResource.JointInfluences.InfluenceRate(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(unsigned char *)(a1 + 80) = v25;
  outlined consume of MeshResource.JointInfluences.InfluenceRate(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

uint64_t assignWithTake for MeshResource.JointInfluences.InfluenceRate(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 80);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(unsigned char *)(a1 + 80);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = v3;
  outlined consume of MeshResource.JointInfluences.InfluenceRate(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource.JointInfluences.InfluenceRate(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 64) >> 5) & 0xFFFFFFF0 | (*(void *)(a1 + 64) >> 4);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for MeshResource.JointInfluences.InfluenceRate(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 72) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 80) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 64) = (32 * -a2) & 0x1FFFFFFE00 | (16 * (-a2 & 0xFLL));
      *(void *)(a1 + 72) = 0;
      *(unsigned char *)(a1 + 80) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for MeshResource.JointInfluences.InfluenceRate(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80) >> 7;
}

uint64_t destructiveProjectEnumData for MeshResource.JointInfluences.InfluenceRate(uint64_t result)
{
  *(unsigned char *)(result + 80) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for MeshResource.JointInfluences.InfluenceRate(uint64_t result, char a2)
{
  char v2 = *(unsigned char *)(result + 80) & 3 | (a2 << 7);
  *(void *)(result + 64) &= 0x10FuLL;
  *(unsigned char *)(result + 80) = v2;
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.JointInfluences.InfluenceRate()
{
  return &type metadata for MeshResource.JointInfluences.InfluenceRate;
}

uint64_t getEnumTagSinglePayload for MeshResourceError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MeshResourceError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)double result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)double result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResourceError()
{
  return &type metadata for MeshResourceError;
}

uint64_t outlined retain of MeshBuffer<MeshJointInfluence>?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 80);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), v4);
  return a1;
}

uint64_t sub_2280C88C4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2280C88FC()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in static MeshResource.generateAsync(from:)()
{
  return closure #1 in closure #1 in static MeshResource.generateAsync(from:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t _sSo10CFErrorRefaABs5Error10FoundationWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2280C89B0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #2 in closure #1 in closure #1 in static MeshResource.generateAsync(from:)(uint64_t a1, void *a2)
{
  closure #2 in closure #1 in closure #1 in static MeshResource.generateAsync(from:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_2280C89F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t partial apply for closure #1 in closure #1 in MeshResource.replaceAsync(with:)()
{
  return closure #1 in closure #1 in MeshResource.replaceAsync(with:)((uint64_t)(v0 + 2), v0[8], v0[9], v0[10], v0[11]);
}

uint64_t sub_2280C8A80()
{
  outlined consume of Result<MeshResource, Error>(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));

  return MEMORY[0x270FA0238](v0, 25, 7);
}

void outlined consume of Result<MeshResource, Error>(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_release();
  }
}

uint64_t sub_2280C8AC8()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for specialized closure #3 in closure #1 in closure #1 in MeshResource.replaceAsync(with:)()
{
  specialized closure #3 in closure #1 in closure #1 in MeshResource.replaceAsync(with:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void *, uint64_t))(v0 + 40));
}

uint64_t *outlined release of MeshResource.Instance?(uint64_t *a1)
{
  return a1;
}

void *outlined assign with copy of MeshResource._Proto_Level_v1(void *a1, void *a2)
{
  return a2;
}

uint64_t *outlined release of MeshResource.Part?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of MeshResource.Part?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of MeshResource.Model(uint64_t a1)
{
  return a1;
}

uint64_t *outlined release of MeshResource.Model?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of MeshResource.Model?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL static MaterialParameterTypes.FaceCulling.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void MaterialParameterTypes.FaceCulling.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int MaterialParameterTypes.FaceCulling.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double MaterialParameterTypes.TextureCoordinateTransform.offset.getter()
{
  return *(double *)v0;
}

void MaterialParameterTypes.TextureCoordinateTransform.offset.setter(double a1)
{
  *Swift::UInt v1 = a1;
}

uint64_t (*MaterialParameterTypes.TextureCoordinateTransform.offset.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double MaterialParameterTypes.TextureCoordinateTransform.scale.getter()
{
  return *(double *)(v0 + 8);
}

void MaterialParameterTypes.TextureCoordinateTransform.scale.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*MaterialParameterTypes.TextureCoordinateTransform.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float MaterialParameterTypes.TextureCoordinateTransform.rotation.getter()
{
  return *(float *)(v0 + 16);
}

void MaterialParameterTypes.TextureCoordinateTransform.rotation.setter(float a1)
{
  *(float *)(v1 + 16) = a1;
}

uint64_t (*MaterialParameterTypes.TextureCoordinateTransform.rotation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MaterialParameterTypes.TextureCoordinateTransform.init(offset:scale:rotation:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, float a4@<S2>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(float *)(a1 + 16) = a4;
}

BOOL static MaterialParameterTypes.TriangleFillMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void MaterialParameterTypes.TriangleFillMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

unint64_t lazy protocol witness table accessor for type MaterialParameterTypes.FaceCulling and conformance MaterialParameterTypes.FaceCulling()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialParameterTypes.FaceCulling and conformance MaterialParameterTypes.FaceCulling;
  if (!lazy protocol witness table cache variable for type MaterialParameterTypes.FaceCulling and conformance MaterialParameterTypes.FaceCulling)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialParameterTypes.FaceCulling and conformance MaterialParameterTypes.FaceCulling);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialParameterTypes.TriangleFillMode and conformance MaterialParameterTypes.TriangleFillMode()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialParameterTypes.TriangleFillMode and conformance MaterialParameterTypes.TriangleFillMode;
  if (!lazy protocol witness table cache variable for type MaterialParameterTypes.TriangleFillMode and conformance MaterialParameterTypes.TriangleFillMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialParameterTypes.TriangleFillMode and conformance MaterialParameterTypes.TriangleFillMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialParameterTypes.BlendMode and conformance MaterialParameterTypes.BlendMode()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialParameterTypes.BlendMode and conformance MaterialParameterTypes.BlendMode;
  if (!lazy protocol witness table cache variable for type MaterialParameterTypes.BlendMode and conformance MaterialParameterTypes.BlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialParameterTypes.BlendMode and conformance MaterialParameterTypes.BlendMode);
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameterTypes()
{
  return &type metadata for MaterialParameterTypes;
}

unsigned char *storeEnumTagSinglePayload for MaterialParameterTypes.FaceCulling(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280C9130);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameterTypes.FaceCulling()
{
  return &type metadata for MaterialParameterTypes.FaceCulling;
}

uint64_t getEnumTagSinglePayload for MaterialParameterTypes.TextureCoordinateTransform(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MaterialParameterTypes.TextureCoordinateTransform(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameterTypes.TextureCoordinateTransform()
{
  return &type metadata for MaterialParameterTypes.TextureCoordinateTransform;
}

ValueMetadata *type metadata accessor for MaterialParameterTypes.TriangleFillMode()
{
  return &type metadata for MaterialParameterTypes.TriangleFillMode;
}

unsigned char *storeEnumTagSinglePayload for MaterialParameterTypes.TriangleFillMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280C92A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameterTypes.BlendMode()
{
  return &type metadata for MaterialParameterTypes.BlendMode;
}

uint64_t specialized Entity.ChildCollection.filter(recursive:_:)(char a1)
{
  uint64_t v27 = MEMORY[0x263F8EE78];
  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
    swift_release();
    return MEMORY[0x263F8EE78];
  }
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v2 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_46;
    }
    uint64_t v4 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v5 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result) {
        goto LABEL_45;
      }
      specialized static SceneManager.customComponentType(_:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        uint64_t Object = RECustomComponentGetObject();
        if (Object)
        {
          uint64_t v7 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8)) {
            BOOL v8 = 1;
          }
          else {
            BOOL v8 = v7 == 0;
          }
          if (v8)
          {
            uint64_t result = swift_retain();
          }
          else
          {
            int v9 = *v7;
            uint64_t v10 = String.init(utf8String:)();
            if (v11) {
              Swift::Int v12 = v10;
            }
            else {
              Swift::Int v12 = 0;
            }
            if (v11) {
              unint64_t v13 = v11;
            }
            else {
              unint64_t v13 = 0xE000000000000000;
            }
            uint64_t v7 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v9 == 42, v12, v13);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            uint64_t result = swift_allocObject();
            *(void *)(result + 16) = v7;
          }
          if (!v7) {
            goto LABEL_47;
          }
          swift_retain();
          uint64_t v14 = String.init(utf8String:)();
          unint64_t v16 = v15;
          swift_release();
          uint64_t v17 = v16 ? v14 : 0;
          unint64_t v18 = v16 ? v16 : 0xE000000000000000;
          uint64_t v19 = (NSString *)MEMORY[0x22A688A50](v17, v18);
          swift_bridgeObjectRelease();
          Class v20 = NSClassFromString(v19);

          swift_release();
          if (v20)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            uint64_t v21 = swift_dynamicCastMetatype();
            if (v21)
            {
              uint64_t v22 = (*(uint64_t (**)(void))(v21 + 232))();
              uint64_t v23 = *(void *)(v22 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v23, 0);
              *(void *)(v22 + 16) = v4;
              MEMORY[0x22A68E750](v4, v22);
              swift_release();
              goto LABEL_36;
            }
          }
        }
      }
      uint64_t v5 = makeEntity(for:)(v4);
    }
    uint64_t v22 = v5;
LABEL_36:
    uint64_t result = REEntityGetChildCount();
    if (v2 >= result) {
      goto LABEL_44;
    }
    uint64_t v24 = swift_retain();
    MEMORY[0x22A688E10](v24);
    if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if (a1)
    {
      uint64_t v26 = v22;
      unint64_t v25 = specialized Entity.ChildCollection.filter(recursive:_:)(1, &v26);
      specialized Array.append<A>(contentsOf:)(v25);
    }
    ++v2;
    swift_release();
    if (v2 >= REEntityGetChildCount())
    {
      swift_release();
      return v27;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t Entity.ChildCollection.startIndex.getter()
{
  return 0;
}

uint64_t Entity.ChildCollection.endIndex.getter()
{
  return REEntityGetChildCount();
}

uint64_t Entity.ChildCollection.subscript.getter(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v1 = result;
  uint64_t result = REEntityGetChildCount();
  if (result <= v1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t result = REEntityGetChild();
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if (result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v3 = specialized static Entity.entityInfoType(_:)();
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(v3 + 232))();
    uint64_t v5 = *(void *)(v4 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v5, 0);
    *(void *)(v4 + 16) = v2;
    MEMORY[0x22A68E750](v2, v4);
    swift_release();
    return v4;
  }
  else
  {
    return makeEntity(for:)(v2);
  }
}

Swift::Int __swiftcall Entity.ChildCollection.index(after:)(Swift::Int after)
{
  if (after < 0)
  {
    __break(1u);
  }
  else
  {
    Swift::Int v1 = after;
    after = REEntityGetChildCount();
    if (after > v1) {
      return v1 + 1;
    }
  }
  __break(1u);
  return after;
}

uint64_t specialized Entity.ChildCollection.insert<A>(contentsOf:beforeIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  uint64_t Parent = REEntityGetParent();
  if (Parent)
  {
    uint64_t ChildCount = Parent;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      for (uint64_t i = swift_dynamicCastClassUnconditional(); ; uint64_t i = makeEntity(for:)(ChildCount))
      {
        uint64_t v9 = *(void *)(i + 16);
        uint64_t v10 = *(void *)(a3 + 16);
        swift_release();
        if (v9 != v10) {
          break;
        }
LABEL_18:
        uint64_t v23 = swift_retain();
        uint64_t ChildCount = specialized Collection<>.firstIndex(of:)(v23);
        char v25 = v24;
        uint64_t result = swift_release();
        if ((v25 & 1) == 0) {
          goto LABEL_26;
        }
        __break(1u);
LABEL_20:
        ;
      }
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      uint64_t v19 = specialized static Entity.entityInfoType(_:)();
      if (!v19) {
        goto LABEL_20;
      }
      uint64_t v20 = (*(uint64_t (**)(void))(v19 + 232))();
      MEMORY[0x22A68E750](*(void *)(v20 + 16), 0);
      *(void *)(v20 + 16) = ChildCount;
      MEMORY[0x22A68E750](ChildCount, v20);
      uint64_t v21 = *(void *)(v20 + 16);
      uint64_t v22 = *(void *)(a3 + 16);
      swift_release();
      if (v21 == v22) {
        goto LABEL_18;
      }
    }
  }
  uint64_t ChildCount = REEntityGetChildCount();
  swift_retain();
  REEntitySetParent();
  if (swift_conformsToProtocol2()) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11)
  {
    swift_beginAccess();
    Swift::Int v12 = static RealityFusionSession.sharedSession;
    if (static RealityFusionSession.sharedSession)
    {
      swift_beginAccess();
      if (v12[2])
      {
        swift_retain();
        id v13 = (id)RFServiceManagerGetAnchorManagementService();
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t SceneNullable = REEntityGetSceneNullable();
          if (SceneNullable)
          {
            uint64_t v16 = SceneNullable;
            id v17 = (id)RESceneGetSwiftObject();
            type metadata accessor for Scene();
            if (v17)
            {
              swift_dynamicCastClassUnconditional();
            }
            else
            {
              swift_allocObject();
              Scene.init(coreScene:)(v16);
            }
            swift_release();
            RFAnchorManagementUpdateAnchoringInScene();
          }
        }
        swift_release();
      }
    }
  }
  type metadata accessor for Entity();
  static Entity.updateInteractions(root:)(a1);
  Entity.updateSceneGravityIfNeeded()();
  uint64_t result = swift_release();
LABEL_26:
  if (ChildCount < 0)
  {
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t result = REEntityGetChildCount();
  if (a2 < 0 || ChildCount >= result) {
    goto LABEL_44;
  }
  uint64_t result = REEntityGetChildCount();
  if (result < a2)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (ChildCount == a2 || ChildCount + 1 == a2) {
    return swift_release();
  }
  uint64_t result = REEntityGetChildCount();
  if (ChildCount >= result) {
    goto LABEL_46;
  }
  uint64_t result = REEntityGetChild();
  if (result)
  {
    uint64_t v26 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
LABEL_40:
      REEntityInsertChild();
      swift_release();
      return swift_release();
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if ((result & 1) == 0)
    {
      uint64_t v27 = specialized static Entity.entityInfoType(_:)();
      if (v27)
      {
        uint64_t v28 = (*(uint64_t (**)(void))(v27 + 232))();
        uint64_t v29 = *(void *)(v28 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v29, 0);
        *(void *)(v28 + 16) = v26;
        MEMORY[0x22A68E750](v26, v28);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v26);
      }
      goto LABEL_40;
    }
    goto LABEL_48;
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t Entity.ChildCollection.insert<A>(contentsOf:beforeIndex:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  id v13 = (char *)&v39 - v12;
  uint64_t v14 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v9, a1, a3, v11);
  int64_t v42 = v13;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v43 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v40 = a2;
  uint64_t v41 = AssociatedConformanceWitness;
  unint64_t v16 = a2;
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v18 = v44;
    if (!v44) {
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v42, v43);
    }
    swift_getAssociatedTypeWitness();
    uint64_t v19 = HasHierarchy.parent.getter();
    if (v19 && (uint64_t v20 = *(void *)(v19 + 16), v21 = *(void *)(v14 + 16), swift_release(), v20 == v21))
    {
      uint64_t v30 = swift_retain();
      uint64_t ChildCount = specialized Collection<>.firstIndex(of:)(v30);
      char v32 = v31;
      uint64_t result = swift_release();
      if (v32) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t ChildCount = REEntityGetChildCount();
      swift_retain();
      REEntitySetParent();
      if (swift_conformsToProtocol2()) {
        uint64_t v23 = v18;
      }
      else {
        uint64_t v23 = 0;
      }
      if (v23)
      {
        swift_beginAccess();
        char v24 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession)
        {
          swift_beginAccess();
          if (v24[2])
          {
            swift_retain();
            id v25 = (id)RFServiceManagerGetAnchorManagementService();
            if (v25)
            {
              uint64_t v26 = v25;
              uint64_t SceneNullable = REEntityGetSceneNullable();
              if (SceneNullable)
              {
                uint64_t v28 = SceneNullable;
                id v29 = (id)RESceneGetSwiftObject();
                type metadata accessor for Scene();
                if (v29)
                {
                  swift_dynamicCastClassUnconditional();
                }
                else
                {
                  uint64_t v33 = swift_allocObject();
                  *(_OWORD *)(v33 + 24) = 0u;
                  *(_OWORD *)(v33 + 40) = 0u;
                  *(void *)(v33 + 56) = 0;
                  swift_unknownObjectWeakInit();
                  *(void *)(v33 + 104) = 0;
                  *(_OWORD *)(v33 + 88) = 0u;
                  *(_OWORD *)(v33 + 72) = 0u;
                  swift_weakInit();
                  *(_OWORD *)(v33 + 216) = 0u;
                  *(_OWORD *)(v33 + 200) = 0u;
                  *(_OWORD *)(v33 + 184) = 0u;
                  *(_OWORD *)(v33 + 168) = 0u;
                  *(_OWORD *)(v33 + 152) = 0u;
                  *(_OWORD *)(v33 + 136) = 0u;
                  *(_OWORD *)(v33 + 120) = 0u;
                  RERetain();
                  *(void *)(v33 + 16) = v28;
                  RESceneSetSwiftObject();
                }
                swift_release();
                RFAnchorManagementUpdateAnchoringInScene();
              }
            }
            swift_release();
          }
        }
      }
      type metadata accessor for Entity();
      static Entity.updateInteractions(root:)(v18);
      Entity.updateSceneGravityIfNeeded()();
      uint64_t result = swift_release();
    }
    if (ChildCount < 0) {
      break;
    }
    uint64_t result = REEntityGetChildCount();
    if ((a2 & 0x8000000000000000) != 0 || ChildCount >= result) {
      goto LABEL_44;
    }
    uint64_t result = REEntityGetChildCount();
    if (result < (uint64_t)v16) {
      goto LABEL_45;
    }
    if (v16 == ChildCount || v16 == ChildCount + 1)
    {
      uint64_t result = swift_release();
      if (ChildCount >= v16) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t result = REEntityGetChildCount();
      if (ChildCount >= result) {
        goto LABEL_46;
      }
      uint64_t result = REEntityGetChild();
      if (!result) {
        goto LABEL_50;
      }
      uint64_t v34 = result;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        uint64_t result = REEntityIsBeingDestroyed();
        if (result) {
          goto LABEL_47;
        }
        uint64_t v35 = specialized static Entity.entityInfoType(_:)();
        if (v35)
        {
          uint64_t v36 = (*(uint64_t (**)(void))(v35 + 232))();
          uint64_t v37 = *(void *)(v36 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v37, 0);
          *(void *)(v36 + 16) = v34;
          MEMORY[0x22A68E750](v34, v36);
          swift_release();
        }
        else
        {
          makeEntity(for:)(v34);
        }
      }
      REEntityInsertChild();
      swift_release();
      uint64_t result = swift_release();
      a2 = v40;
      if (ChildCount >= v16)
      {
LABEL_38:
        if (__OFADD__(v16++, 1)) {
          goto LABEL_48;
        }
      }
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t Entity.ChildCollection.append<A>(contentsOf:)()
{
  return Sequence.forEach(_:)();
}

uint64_t Entity.ChildCollection.remove(_:)(uint64_t a1)
{
  return Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(a1, 0);
}

Swift::Void __swiftcall Entity.ChildCollection.remove(at:)(Swift::Int at)
{
  uint64_t v1 = Entity.ChildCollection.subscript.getter(at);
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v1, 0);

  swift_release();
}

Swift::Void __swiftcall Entity.ChildCollection.removeAll()()
{
}

uint64_t Entity.ChildCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2)
{
  return Entity.ChildCollection.replaceAll<A>(_:preservingWorldTransforms:)(a1, 0, a2);
}

uint64_t protocol witness for EntityCollection.append(_:) in conformance RealityRenderer.EntityCollection()
{
  uint64_t v0 = swift_retain();
  Entity.ChildCollection.doAppend(_:preservingWorldTransform:)(v0, 0);

  return swift_release();
}

uint64_t EntityCollection.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<Entity>);
  uint64_t v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type CollectionOfOne<Entity> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<Entity>);
  return v5(&v9, v6, v7, a2, a3);
}

uint64_t protocol witness for EntityCollection.insert(_:beforeIndex:) in conformance RealityRenderer.EntityCollection(uint64_t a1, uint64_t a2)
{
  return specialized Entity.ChildCollection.insert<A>(contentsOf:beforeIndex:)(a1, a2, *v2);
}

uint64_t EntityCollection.insert(_:beforeIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a1;
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<Entity>);
  uint64_t v9 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type CollectionOfOne<Entity> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<Entity>);
  return v7(&v11, a2, v8, v9, a3, a4);
}

uint64_t protocol witness for EntityCollection.removeAll(where:) in conformance RealityRenderer.EntityCollection(uint64_t (*a1)(uint64_t))
{
  return specialized EntityCollection.removeAll(where:)(a1);
}

uint64_t specialized EntityCollection.removeAll(where:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t result = REEntityGetChildCount();
  if (result < 0) {
    goto LABEL_70;
  }
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v46 = result;
    do
    {
      if (v6 < v7)
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        return result;
      }
      --v7;
      uint64_t result = REEntityGetChildCount();
      if (v7 >= result) {
        goto LABEL_65;
      }
      uint64_t result = REEntityGetChild();
      if (!result) {
        goto LABEL_71;
      }
      uint64_t v8 = result;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        uint64_t v9 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        uint64_t result = REEntityIsBeingDestroyed();
        if (result) {
          goto LABEL_67;
        }
        if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
          swift_once();
        }
        swift_beginAccess();
        if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
          || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
              (v10 & 1) == 0))
        {
          swift_endAccess();
          uint64_t v11 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
          swift_beginAccess();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v48 = static SceneManager.customComponentTypeObjectIdToHandles;
          static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
          static SceneManager.customComponentTypeObjectIdToHandles = v48;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        if (REEntityGetCustomComponent())
        {
          uint64_t Object = RECustomComponentGetObject();
          if (Object)
          {
            uint64_t v14 = *(unsigned __int8 **)Object;
            if (*(void *)(Object + 8) || !v14)
            {
              uint64_t result = swift_retain();
            }
            else
            {
              int v15 = *v14;
              uint64_t v16 = String.init(utf8String:)();
              if (v17) {
                Swift::Int v18 = v16;
              }
              else {
                Swift::Int v18 = 0;
              }
              if (v17) {
                unint64_t v19 = v17;
              }
              else {
                unint64_t v19 = 0xE000000000000000;
              }
              uint64_t v14 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v15 == 42, v18, v19);
              swift_bridgeObjectRelease();
              type metadata accessor for IntrospectionDataCleanupHelper();
              uint64_t result = swift_allocObject();
              *(void *)(result + 16) = v14;
            }
            if (!v14) {
              goto LABEL_73;
            }
            swift_retain();
            uint64_t v20 = String.init(utf8String:)();
            unint64_t v22 = v21;
            swift_release();
            uint64_t v23 = v22 ? v20 : 0;
            unint64_t v24 = v22 ? v22 : 0xE000000000000000;
            id v25 = (NSString *)MEMORY[0x22A688A50](v23, v24);
            swift_bridgeObjectRelease();
            Class v26 = NSClassFromString(v25);

            swift_release();
            uint64_t v6 = v46;
            if (v26)
            {
              swift_getObjCClassMetadata();
              type metadata accessor for Entity();
              uint64_t v27 = swift_dynamicCastMetatype();
              if (v27)
              {
                uint64_t v28 = (*(uint64_t (**)(void))(v27 + 232))();
                uint64_t v29 = *(void *)(v28 + 16);
                swift_retain();
                MEMORY[0x22A68E750](v29, 0);
                *(void *)(v28 + 16) = v8;
                MEMORY[0x22A68E750](v8, v28);
                swift_release();
                goto LABEL_42;
              }
            }
          }
        }
        uint64_t v9 = makeEntity(for:)(v8);
      }
      uint64_t v28 = v9;
LABEL_42:
      char v30 = a1(v28);
      uint64_t result = swift_release();
      if (v3) {
        return result;
      }
      if (v30)
      {
        uint64_t v31 = *v4;
        swift_retain();
        uint64_t result = REEntityGetChildCount();
        if (v7 >= result) {
          goto LABEL_66;
        }
        uint64_t result = REEntityGetChild();
        if (!result) {
          goto LABEL_72;
        }
        uint64_t v32 = result;
        type metadata accessor for Entity();
        if ((id)REEntityGetSwiftObject())
        {
          uint64_t v33 = swift_dynamicCastClassUnconditional();
          goto LABEL_48;
        }
        uint64_t result = REEntityIsBeingDestroyed();
        if (result) {
          goto LABEL_68;
        }
        uint64_t v35 = specialized static Entity.entityInfoType(_:)();
        if (v35)
        {
          uint64_t v34 = (*(uint64_t (**)(void))(v35 + 232))();
          uint64_t v36 = *(void *)(v34 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v36, 0);
          *(void *)(v34 + 16) = v32;
          MEMORY[0x22A68E750](v32, v34);
          swift_release();
        }
        else
        {
          uint64_t v33 = makeEntity(for:)(v32);
LABEL_48:
          uint64_t v34 = v33;
        }
        uint64_t Parent = REEntityGetParent();
        if (Parent)
        {
          uint64_t v38 = Parent;
          if ((id)REEntityGetSwiftObject())
          {
            uint64_t v39 = swift_dynamicCastClassUnconditional();
            goto LABEL_55;
          }
          uint64_t result = REEntityIsBeingDestroyed();
          if (result) {
            goto LABEL_69;
          }
          uint64_t v42 = specialized static Entity.entityInfoType(_:)();
          if (v42)
          {
            uint64_t v43 = (*(uint64_t (**)(void))(v42 + 232))();
            MEMORY[0x22A68E750](*(void *)(v43 + 16), 0);
            *(void *)(v43 + 16) = v38;
            MEMORY[0x22A68E750](v38, v43);
            uint64_t v44 = *(void *)(v43 + 16);
            uint64_t v45 = *(void *)(v31 + 16);
            swift_release();
            if (v44 == v45) {
              goto LABEL_4;
            }
          }
          else
          {
            uint64_t v39 = makeEntity(for:)(v38);
LABEL_55:
            uint64_t v40 = *(void *)(v39 + 16);
            uint64_t v41 = *(void *)(v31 + 16);
            swift_release();
            if (v40 == v41)
            {
LABEL_4:
              REEntitySetParent();
              static Entity.updateInteractions(root:)(v34);
            }
          }
        }
        swift_release();
        uint64_t result = swift_release();
        uint64_t v6 = v46;
      }
    }
    while (v7);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t Object;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSString *v25;
  Class v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Parent;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v48;

  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t result = REEntityGetChildCount();
  if (result < 0) {
    goto LABEL_70;
  }
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v46 = v1;
    do
    {
      if (v6 < v7)
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        return result;
      }
      --v7;
      uint64_t result = REEntityGetChildCount();
      if (v7 >= result) {
        goto LABEL_65;
      }
      uint64_t result = REEntityGetChild();
      if (!result) {
        goto LABEL_71;
      }
      uint64_t v8 = result;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        uint64_t v9 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        uint64_t result = REEntityIsBeingDestroyed();
        if (result) {
          goto LABEL_67;
        }
        if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
          swift_once();
        }
        swift_beginAccess();
        if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
          || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
              (v10 & 1) == 0))
        {
          swift_endAccess();
          uint64_t v11 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
          swift_beginAccess();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v48 = static SceneManager.customComponentTypeObjectIdToHandles;
          static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
          static SceneManager.customComponentTypeObjectIdToHandles = v48;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        if (REEntityGetCustomComponent())
        {
          uint64_t Object = RECustomComponentGetObject();
          if (Object)
          {
            uint64_t v14 = *(unsigned __int8 **)Object;
            if (*(void *)(Object + 8) || !v14)
            {
              uint64_t result = swift_retain();
            }
            else
            {
              int v15 = *v14;
              uint64_t v16 = String.init(utf8String:)();
              if (v17) {
                Swift::Int v18 = v16;
              }
              else {
                Swift::Int v18 = 0;
              }
              if (v17) {
                unint64_t v19 = v17;
              }
              else {
                unint64_t v19 = 0xE000000000000000;
              }
              uint64_t v14 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v15 == 42, v18, v19);
              swift_bridgeObjectRelease();
              type metadata accessor for IntrospectionDataCleanupHelper();
              uint64_t result = swift_allocObject();
              *(void *)(result + 16) = v14;
            }
            if (!v14) {
              goto LABEL_73;
            }
            swift_retain();
            uint64_t v20 = String.init(utf8String:)();
            unint64_t v22 = v21;
            swift_release();
            uint64_t v23 = v22 ? v20 : 0;
            unint64_t v24 = v22 ? v22 : 0xE000000000000000;
            id v25 = (NSString *)MEMORY[0x22A688A50](v23, v24);
            swift_bridgeObjectRelease();
            Class v26 = NSClassFromString(v25);

            swift_release();
            uint64_t v4 = v46;
            if (v26)
            {
              swift_getObjCClassMetadata();
              type metadata accessor for Entity();
              uint64_t v27 = swift_dynamicCastMetatype();
              if (v27)
              {
                uint64_t v28 = (*(uint64_t (**)(void))(v27 + 232))();
                uint64_t v29 = *(void *)(v28 + 16);
                swift_retain();
                MEMORY[0x22A68E750](v29, 0);
                *(void *)(v28 + 16) = v8;
                MEMORY[0x22A68E750](v8, v28);
                swift_release();
                goto LABEL_42;
              }
            }
          }
        }
        uint64_t v9 = makeEntity(for:)(v8);
      }
      uint64_t v28 = v9;
LABEL_42:
      char v30 = a1(v28);
      uint64_t result = swift_release();
      if (v3) {
        return result;
      }
      if (v30)
      {
        uint64_t v31 = *v4;
        uint64_t result = REEntityGetChildCount();
        if (v7 >= result) {
          goto LABEL_66;
        }
        uint64_t result = REEntityGetChild();
        if (!result) {
          goto LABEL_72;
        }
        uint64_t v32 = result;
        type metadata accessor for Entity();
        if ((id)REEntityGetSwiftObject())
        {
          uint64_t v33 = swift_dynamicCastClassUnconditional();
          goto LABEL_48;
        }
        uint64_t result = REEntityIsBeingDestroyed();
        if (result) {
          goto LABEL_68;
        }
        uint64_t v35 = specialized static Entity.entityInfoType(_:)();
        if (v35)
        {
          uint64_t v34 = (*(uint64_t (**)(void))(v35 + 232))();
          uint64_t v36 = *(void *)(v34 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v36, 0);
          *(void *)(v34 + 16) = v32;
          MEMORY[0x22A68E750](v32, v34);
          swift_release();
        }
        else
        {
          uint64_t v33 = makeEntity(for:)(v32);
LABEL_48:
          uint64_t v34 = v33;
        }
        uint64_t Parent = REEntityGetParent();
        if (Parent)
        {
          uint64_t v38 = Parent;
          if ((id)REEntityGetSwiftObject())
          {
            uint64_t v39 = swift_dynamicCastClassUnconditional();
            goto LABEL_55;
          }
          uint64_t result = REEntityIsBeingDestroyed();
          if (result) {
            goto LABEL_69;
          }
          uint64_t v42 = specialized static Entity.entityInfoType(_:)();
          if (v42)
          {
            uint64_t v43 = (*(uint64_t (**)(void))(v42 + 232))();
            MEMORY[0x22A68E750](*(void *)(v43 + 16), 0);
            *(void *)(v43 + 16) = v38;
            MEMORY[0x22A68E750](v38, v43);
            uint64_t v44 = *(void *)(v43 + 16);
            uint64_t v45 = *(void *)(v31 + 16);
            swift_release();
            if (v44 == v45) {
              goto LABEL_4;
            }
          }
          else
          {
            uint64_t v39 = makeEntity(for:)(v38);
LABEL_55:
            uint64_t v40 = *(void *)(v39 + 16);
            uint64_t v41 = *(void *)(v31 + 16);
            swift_release();
            if (v40 == v41)
            {
LABEL_4:
              REEntitySetParent();
              static Entity.updateInteractions(root:)(v34);
            }
          }
        }
        uint64_t result = swift_release();
        uint64_t v4 = v46;
      }
    }
    while (v7);
  }
  return result;
}