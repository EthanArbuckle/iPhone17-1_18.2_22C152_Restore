uint64_t EntityCollection.removeAll(where:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(void *, void);
  uint64_t *v12;
  uint64_t v13;
  char v14;
  void v16[4];
  uint64_t v17;

  v5 = v4;
  dispatch thunk of Collection.startIndex.getter();
  v8 = v16[0];
  result = dispatch thunk of Collection.endIndex.getter();
  v10 = v17;
  if (v17 < v16[0])
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (v17 != v16[0])
  {
    while (v8 < v10)
    {
      v17 = --v10;
      v11 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      v13 = *v12;
      swift_retain();
      v11(v16, 0);
      v14 = a1(v13);
      result = swift_release();
      if (!v5)
      {
        if (v14) {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 56))(v10, a3, a4);
        }
        if (v8 != v10) {
          continue;
        }
      }
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

{
  return EntityCollection.removeAll(where:)(a1, a2, a3, a4);
}

void Entity.ChildCollection.makeIterator()(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t Entity.ChildCollection.IndexingIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = a1;
  uint64_t v29 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v28 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  v27 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = MEMORY[0x270FA5388](v11);
  v14 = (char *)&v26 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v26 - v13, v3 + *(int *)(v4 + 36), AssociatedTypeWitness, v12);
  dispatch thunk of Collection.endIndex.getter();
  swift_getAssociatedConformanceWitness();
  LOBYTE(v4) = dispatch thunk of static Comparable.>= infix(_:_:)();
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, AssociatedTypeWitness);
  v15(v14, AssociatedTypeWitness);
  if (v4)
  {
    uint64_t v16 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v29, 1, 1, v16);
  }
  else
  {
    v18 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v20 = v19;
    uint64_t v21 = swift_getAssociatedTypeWitness();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = v29;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v29, v20, v21);
    v18(v30, 0);
    v25 = v27;
    uint64_t v24 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v3, v5);
    dispatch thunk of Collection.formIndex(after:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v23, 0, 1, v21);
  }
}

uint64_t Entity.ChildCollection.IndexingIterator.init(_elements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v11 + 16))(a3, a1, a2, v8);
  dispatch thunk of Collection.startIndex.getter();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a2);
  uint64_t v12 = type metadata accessor for Entity.ChildCollection.IndexingIterator();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3 + *(int *)(v12 + 36), v10, AssociatedTypeWitness);
}

void Entity.ChildCollection.doAppend(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  if (a2)
  {
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    float32x4_t v15 = (float32x4_t)static simd_quatf.identity;
    specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v4);
    specialized simd_float4x4.init(translation:rotation:scale:)(0.0, v15, 1.0);
    REMakeSRTFromMatrix();
    v16[0] = v5;
    v16[1] = v6;
    v16[2] = v7;
    char v17 = 0;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v16);
    swift_release();
  }
  REEntitySetParent();
  if (swift_conformsToProtocol2()) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    swift_beginAccess();
    uint64_t v9 = static RealityFusionSession.sharedSession;
    if (static RealityFusionSession.sharedSession)
    {
      swift_beginAccess();
      if (v9[2])
      {
        swift_retain();
        id v10 = (id)RFServiceManagerGetAnchorManagementService();
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t SceneNullable = REEntityGetSceneNullable();
          if (SceneNullable)
          {
            uint64_t v13 = SceneNullable;
            id v14 = (id)RESceneGetSwiftObject();
            type metadata accessor for Scene();
            if (v14)
            {
              swift_dynamicCastClassUnconditional();
            }
            else
            {
              swift_allocObject();
              Scene.init(coreScene:)(v13);
            }
            swift_release();
            RFAnchorManagementUpdateAnchoringInScene();
          }
        }
        swift_release();
      }
    }
  }
  type metadata accessor for Entity();
  static Entity.updateInteractions(root:)(a1);
  Entity.updateSceneGravityIfNeeded()();
}

uint64_t Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v5 = *v2;
  uint64_t result = REEntityGetParent();
  if (result)
  {
    uint64_t v7 = result;
    type metadata accessor for Entity();
    if ((id)REEntityGetSwiftObject())
    {
      uint64_t v8 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if (REEntityIsBeingDestroyed())
      {
        __break(1u);
        goto LABEL_21;
      }
      uint64_t v11 = specialized static Entity.entityInfoType(_:)();
      if (v11)
      {
        uint64_t v12 = (*(uint64_t (**)(void))(v11 + 232))();
        MEMORY[0x22A68E750](*(void *)(v12 + 16), 0);
        *(void *)(v12 + 16) = v7;
        MEMORY[0x22A68E750](v7, v12);
        uint64_t v13 = *(void *)(v12 + 16);
        uint64_t v14 = *(void *)(v5 + 16);
        uint64_t result = swift_release();
        if (v13 != v14) {
          return result;
        }
LABEL_9:
        if ((a2 & 1) == 0)
        {
          REEntitySetParent();
          return static Entity.updateInteractions(root:)(a1);
        }
        *(double *)v15.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, 0);
        float32x4_t v36 = v15;
        float32x4_t v37 = v16;
        float32x4_t v38 = v18;
        float32x4_t v40 = v17;
        REEntitySetParent();
        swift_retain();
        RETransformComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          RETransformComponentGetParentWorldMatrix4x4F();
          simd_float4 v33 = v20;
          simd_float4 v35 = v19;
          simd_float4 v29 = v22;
          simd_float4 v31 = v21;
          swift_release();
          v23.columns[1] = v33;
          v23.columns[0] = v35;
          v23.columns[3] = v29;
          v23.columns[2] = v31;
        }
        else
        {
          swift_release();
          simd_float4x4 v23 = *(simd_float4x4 *)zmmword_22830EC90;
        }
        simd_float4x4 v49 = __invert_f4(v23);
        float32x4_t v24 = vmulq_f32((float32x4_t)v49.columns[0], (float32x4_t)0);
        float32x4_t v34 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)v49.columns[0], (float32x4_t)0, (float32x4_t)v49.columns[1]), (float32x4_t)0, (float32x4_t)v49.columns[2]), (float32x4_t)0, (float32x4_t)v49.columns[3]);
        float32x4_t v32 = vmlaq_f32(vmlaq_f32(vaddq_f32((float32x4_t)v49.columns[1], v24), (float32x4_t)0, (float32x4_t)v49.columns[2]), (float32x4_t)0, (float32x4_t)v49.columns[3]);
        float32x4_t v25 = vmlaq_f32(v24, (float32x4_t)0, (float32x4_t)v49.columns[1]);
        float32x4_t v28 = vmlaq_f32(vaddq_f32((float32x4_t)v49.columns[2], v25), (float32x4_t)0, (float32x4_t)v49.columns[3]);
        float32x4_t v30 = vaddq_f32((float32x4_t)v49.columns[3], vmlaq_f32(v25, (float32x4_t)0, (float32x4_t)v49.columns[2]));
        swift_retain();
        specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v41);
        swift_release();
        outlined init with take of Transform?((uint64_t)v41, (uint64_t)v42);
        if (v42[48] != 1 || one-time initialization token for identity == -1)
        {
LABEL_17:
          float32x4_t v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v38.f32[0]), v32, *(float32x2_t *)v38.f32, 1), v28, v38, 2), v30, v38, 3);
          v26.i32[3] = 0;
          float32x4_t v39 = v26;
          long long v43 = 0u;
          REDecomposeMatrix();
          *(__n64 *)&long long v27 = simd_float4x4.scale.getter(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v36.f32[0]), v32, *(float32x2_t *)v36.f32, 1), v28, v36, 2), v30, v36, 3), (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v37.f32[0]), v32, *(float32x2_t *)v37.f32, 1), v28, v37, 2),
                                          v30,
                                          v37,
                                          3),
                             (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v40.f32[0]), v32, *(float32x2_t *)v40.f32, 1), v28, v40, 2), v30, v40, 3));
          long long v43 = v27;
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          float32x4_t v46 = v39;
          char v47 = 0;
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v43);
          swift_release();
          return static Entity.updateInteractions(root:)(a1);
        }
LABEL_21:
        swift_once();
        goto LABEL_17;
      }
      uint64_t v8 = makeEntity(for:)(v7);
    }
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t v10 = *(void *)(v5 + 16);
    uint64_t result = swift_release();
    if (v9 != v10) {
      return result;
    }
    goto LABEL_9;
  }
  return result;
}

uint64_t Entity.ChildCollection.doSetEntityAt(_:to:preservingWorldTransform:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v7 = *v3;
  *(void *)&long long v47 = *v3;
  if (*(void *)(Entity.ChildCollection.subscript.getter(a1) + 16) != *(void *)(a2 + 16))
  {
    uint64_t v8 = specialized HasHierarchy.parent.getter();
    if (!v8 || (uint64_t v9 = *(void *)(v8 + 16), v10 = *(void *)(v7 + 16), swift_release(), v9 != v10))
    {
      int v11 = 1;
      if (a3)
      {
LABEL_5:
        *(double *)v12.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a2, 0);
        float32x4_t v40 = v12;
        float32x4_t v41 = v13;
        float32x4_t v42 = v15;
        float32x4_t v44 = v14;
        goto LABEL_23;
      }
LABEL_22:
      float32x4_t v42 = *(float32x4_t *)&zmmword_22830EC90[48];
      float32x4_t v44 = *(float32x4_t *)&zmmword_22830EC90[32];
      float32x4_t v41 = *(float32x4_t *)&zmmword_22830EC90[16];
      float32x4_t v40 = *(float32x4_t *)zmmword_22830EC90;
LABEL_23:
      REEntitySetParent();
      REEntityInsertChild();
      if ((a3 & 1) == 0)
      {
LABEL_30:
        if (v11)
        {
          type metadata accessor for Entity();
          static Entity.updateInteractions(root:)(a2);
        }
        return swift_release();
      }
      swift_retain();
      RETransformComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RETransformComponentGetParentWorldMatrix4x4F();
        simd_float4 v37 = v24;
        simd_float4 v39 = v23;
        simd_float4 v33 = v26;
        simd_float4 v35 = v25;
        swift_release();
        v27.columns[1] = v37;
        v27.columns[0] = v39;
        v27.columns[3] = v33;
        v27.columns[2] = v35;
      }
      else
      {
        swift_release();
        simd_float4x4 v27 = *(simd_float4x4 *)zmmword_22830EC90;
      }
      simd_float4x4 v54 = __invert_f4(v27);
      float32x4_t v28 = vmulq_f32((float32x4_t)v54.columns[0], (float32x4_t)0);
      float32x4_t v38 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)v54.columns[0], (float32x4_t)0, (float32x4_t)v54.columns[1]), (float32x4_t)0, (float32x4_t)v54.columns[2]), (float32x4_t)0, (float32x4_t)v54.columns[3]);
      float32x4_t v36 = vmlaq_f32(vmlaq_f32(vaddq_f32((float32x4_t)v54.columns[1], v28), (float32x4_t)0, (float32x4_t)v54.columns[2]), (float32x4_t)0, (float32x4_t)v54.columns[3]);
      float32x4_t v29 = vmlaq_f32(v28, (float32x4_t)0, (float32x4_t)v54.columns[1]);
      float32x4_t v32 = vmlaq_f32(vaddq_f32((float32x4_t)v54.columns[2], v29), (float32x4_t)0, (float32x4_t)v54.columns[3]);
      float32x4_t v34 = vaddq_f32((float32x4_t)v54.columns[3], vmlaq_f32(v29, (float32x4_t)0, (float32x4_t)v54.columns[2]));
      swift_retain();
      specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v45);
      swift_release();
      outlined init with take of Transform?((uint64_t)v45, (uint64_t)v46);
      if (v46[48] != 1 || one-time initialization token for identity == -1)
      {
LABEL_29:
        float32x4_t v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v42.f32[0]), v36, *(float32x2_t *)v42.f32, 1), v32, v42, 2), v34, v42, 3);
        v30.i32[3] = 0;
        float32x4_t v43 = v30;
        long long v47 = 0u;
        REDecomposeMatrix();
        *(__n64 *)&long long v31 = simd_float4x4.scale.getter(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v40.f32[0]), v36, *(float32x2_t *)v40.f32, 1), v32, v40, 2), v34, v40, 3), (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v41.f32[0]), v36, *(float32x2_t *)v41.f32, 1), v32, v41, 2), v34, v41, 3), (int8x16_t)vmlaq_laneq_f32(
                                        vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, v44.f32[0]), v36, *(float32x2_t *)v44.f32, 1), v32, v44, 2), v34, v44, 3));
        long long v47 = v31;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        float32x4_t v50 = v43;
        char v51 = 0;
        swift_retain();
        specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v47);
        swift_release();
        goto LABEL_30;
      }
LABEL_34:
      swift_once();
      goto LABEL_29;
    }
    int v11 = specialized Collection<>.firstIndex(of:)(a2);
    char v18 = v17;
    uint64_t result = RELinkedOnOrAfterFall2024OSVersions();
    if (result)
    {
      swift_retain();
      uint64_t ChildCount = REEntityGetChildCount();
      if (ChildCount < 0) {
        __break(1u);
      }
      uint64_t v20 = ChildCount;
      if (ChildCount)
      {
        uint64_t v21 = 0;
        uint64_t v22 = ChildCount - 1;
        while (v21 < REEntityGetChildCount())
        {
          if (v20 == ++v21) {
            goto LABEL_19;
          }
        }
        __break(1u);
        goto LABEL_34;
      }
      uint64_t v22 = -1;
LABEL_19:
      uint64_t result = swift_release();
      if (v22 != a1 || (v18 & 1) == 0)
      {
LABEL_21:
        int v11 = 0;
        if (a3) {
          goto LABEL_5;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if ((v18 & 1) == 0) {
        goto LABEL_21;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }

  return swift_release();
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1)
{
  if (!REEntityGetChildCount()) {
    return 0;
  }
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v2 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_43;
    }
    uint64_t v4 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v5 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result) {
        goto LABEL_42;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        uint64_t Object = RECustomComponentGetObject();
        if (Object)
        {
          uint64_t v7 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8)) {
            BOOL v8 = 1;
          }
          else {
            BOOL v8 = v7 == 0;
          }
          if (v8)
          {
            uint64_t result = swift_retain();
          }
          else
          {
            int v9 = *v7;
            uint64_t v10 = String.init(utf8String:)();
            if (v11) {
              Swift::Int v12 = v10;
            }
            else {
              Swift::Int v12 = 0;
            }
            if (v11) {
              unint64_t v13 = v11;
            }
            else {
              unint64_t v13 = 0xE000000000000000;
            }
            uint64_t v7 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v9 == 42, v12, v13);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            uint64_t result = swift_allocObject();
            *(void *)(result + 16) = v7;
          }
          if (!v7) {
            goto LABEL_44;
          }
          swift_retain();
          uint64_t v14 = String.init(utf8String:)();
          unint64_t v16 = v15;
          swift_release();
          uint64_t v17 = v16 ? v14 : 0;
          unint64_t v18 = v16 ? v16 : 0xE000000000000000;
          simd_float4 v19 = (NSString *)MEMORY[0x22A688A50](v17, v18);
          swift_bridgeObjectRelease();
          Class v20 = NSClassFromString(v19);

          swift_release();
          if (v20)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            uint64_t v21 = swift_dynamicCastMetatype();
            if (v21)
            {
              uint64_t v22 = (*(uint64_t (**)(void))(v21 + 232))();
              MEMORY[0x22A68E750](*(void *)(v22 + 16), 0);
              *(void *)(v22 + 16) = v4;
              MEMORY[0x22A68E750](v4, v22);
              uint64_t v23 = *(void *)(v22 + 16);
              uint64_t v24 = *(void *)(a1 + 16);
              swift_release();
              if (v23 == v24) {
                return v2;
              }
              goto LABEL_36;
            }
          }
        }
      }
      uint64_t v5 = makeEntity(for:)(v4);
    }
    uint64_t v25 = *(void *)(v5 + 16);
    uint64_t v26 = *(void *)(a1 + 16);
    swift_release();
    if (v25 == v26) {
      return v2;
    }
LABEL_36:
    uint64_t result = REEntityGetChildCount();
    if (v2 >= result) {
      goto LABEL_41;
    }
    if (++v2 == REEntityGetChildCount()) {
      return 0;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

uint64_t *key path setter for Entity.ChildCollection.subscript(_:) : Entity.ChildCollection(uint64_t *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = *result;
  swift_retain();
  uint64_t result = (uint64_t *)REEntityGetChildCount();
  if (v3 >= (uint64_t)result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  swift_retain();
  Entity.ChildCollection.doSetEntityAt(_:to:preservingWorldTransform:)(v3, v4, 0);
  swift_release();

  return (uint64_t *)swift_release();
}

uint64_t Entity.ChildCollection.subscript.setter(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = result;
  uint64_t result = REEntityGetChildCount();
  if (result <= a2)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  swift_retain();
  Entity.ChildCollection.doSetEntityAt(_:to:preservingWorldTransform:)(a2, v3, 0);
  swift_release();

  return swift_release();
}

uint64_t *(*Entity.ChildCollection.subscript.modify(uint64_t *a1, uint64_t a2))(uint64_t *result, char a2)
{
  a1[1] = a2;
  a1[2] = v2;
  *a1 = Entity.ChildCollection.subscript.getter(a2);
  return Entity.ChildCollection.subscript.modify;
}

uint64_t *Entity.ChildCollection.subscript.modify(uint64_t *result, char a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if ((a2 & 1) == 0)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      uint64_t result = (uint64_t *)REEntityGetChildCount();
      if ((uint64_t)result > v3)
      {
        swift_retain();
        Entity.ChildCollection.doSetEntityAt(_:to:preservingWorldTransform:)(v3, v2, 0);
        swift_release();
        goto LABEL_8;
      }
LABEL_14:
      __break(1u);
      return result;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  swift_retain();
  uint64_t result = (uint64_t *)REEntityGetChildCount();
  if ((uint64_t)result <= v3)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  swift_retain();
  Entity.ChildCollection.doSetEntityAt(_:to:preservingWorldTransform:)(v3, v2, 0);
  swift_release();
  swift_release();
LABEL_8:

  return (uint64_t *)swift_release();
}

void Entity.ChildCollection.append(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall Entity.ChildCollection.append(contentsOf:preservingWorldTransforms:)(Swift::OpaquePointer contentsOf, Swift::Bool preservingWorldTransforms)
{
  BOOL v3 = preservingWorldTransforms;
  unint64_t rawValue = (unint64_t)contentsOf._rawValue;
  uint64_t v5 = *v2;
  if ((unint64_t)contentsOf._rawValue >> 62)
  {
LABEL_50:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(((unint64_t)contentsOf._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = type metadata accessor for Entity();
      uint64_t v8 = 0;
      unint64_t v9 = rawValue & 0xC000000000000001;
      float32x4_t v46 = (char *)(rawValue + 32);
      uint64_t v45 = v6;
      while (1)
      {
        if (v9)
        {
          uint64_t v10 = MEMORY[0x22A689930](v8, rawValue);
          BOOL v11 = __OFADD__(v8++, 1);
          if (v11) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v10 = *(void *)&v46[8 * v8];
          swift_retain();
          BOOL v11 = __OFADD__(v8++, 1);
          if (v11)
          {
LABEL_49:
            __break(1u);
            goto LABEL_50;
          }
        }
        if (v3)
        {
          if (one-time initialization token for identity != -1) {
            swift_once();
          }
          simd_quatf v47 = (simd_quatf)static simd_quatf.identity;
          specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v10, v5);
          *(double *)&long long v12 = simd_matrix4x4((float32x4_t)v47);
          v53[1] = v12;
          v53[2] = v13;
          v53[3] = v14;
          v53[4] = v15;
          simd_float4x4.scale(_:)((float32x4_t)xmmword_22830EC80);
          REMakeSRTFromMatrix();
          long long v17 = v16;
          HIDWORD(v17) = v49;
          HIDWORD(v18) = v50;
          v54[0] = v17;
          v54[1] = v19;
          v54[2] = v18;
          char v55 = 0;
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v54);
          swift_release();
        }
        REEntitySetParent();
        if (swift_conformsToProtocol2()) {
          uint64_t v20 = v10;
        }
        else {
          uint64_t v20 = 0;
        }
        if (v20)
        {
          swift_beginAccess();
          uint64_t v21 = static RealityFusionSession.sharedSession;
          if (static RealityFusionSession.sharedSession)
          {
            swift_beginAccess();
            if (v21[2])
            {
              swift_retain();
              id v22 = (id)RFServiceManagerGetAnchorManagementService();
              if (v22)
              {
                uint64_t v23 = v22;
                uint64_t SceneNullable = REEntityGetSceneNullable();
                if (SceneNullable)
                {
                  uint64_t v25 = SceneNullable;
                  uint64_t v26 = v7;
                  unint64_t v27 = v9;
                  BOOL v28 = v3;
                  unint64_t v29 = rawValue;
                  id v30 = (id)RESceneGetSwiftObject();
                  type metadata accessor for Scene();
                  if (v30)
                  {
                    swift_dynamicCastClassUnconditional();
                  }
                  else
                  {
                    uint64_t v31 = swift_allocObject();
                    *(_OWORD *)(v31 + 24) = 0u;
                    *(_OWORD *)(v31 + 40) = 0u;
                    *(void *)(v31 + 56) = 0;
                    swift_unknownObjectWeakInit();
                    *(void *)(v31 + 104) = 0;
                    *(_OWORD *)(v31 + 88) = 0u;
                    *(_OWORD *)(v31 + 72) = 0u;
                    swift_weakInit();
                    *(_OWORD *)(v31 + 216) = 0u;
                    *(_OWORD *)(v31 + 200) = 0u;
                    *(_OWORD *)(v31 + 184) = 0u;
                    *(_OWORD *)(v31 + 168) = 0u;
                    *(_OWORD *)(v31 + 152) = 0u;
                    *(_OWORD *)(v31 + 136) = 0u;
                    *(_OWORD *)(v31 + 120) = 0u;
                    RERetain();
                    *(void *)(v31 + 16) = v25;
                    RESceneSetSwiftObject();
                  }
                  swift_release();
                  RFAnchorManagementUpdateAnchoringInScene();
                  unint64_t rawValue = v29;
                  BOOL v3 = v28;
                  unint64_t v9 = v27;
                  uint64_t v7 = v26;
                  uint64_t v6 = v45;
                }
              }
              swift_release();
            }
          }
        }
        static Entity.updateInteractions(root:)(v10);
        uint64_t v32 = REEntityGetSceneNullable();
        if (v32)
        {
          uint64_t v33 = v32;
          id v34 = (id)RESceneGetSwiftObject();
          type metadata accessor for Scene();
          if (v34)
          {
            swift_dynamicCastClassUnconditional();
          }
          else
          {
            uint64_t v35 = swift_allocObject();
            *(_OWORD *)(v35 + 24) = 0u;
            *(_OWORD *)(v35 + 40) = 0u;
            *(void *)(v35 + 56) = 0;
            swift_unknownObjectWeakInit();
            *(void *)(v35 + 104) = 0;
            *(_OWORD *)(v35 + 88) = 0u;
            *(_OWORD *)(v35 + 72) = 0u;
            swift_weakInit();
            *(_OWORD *)(v35 + 216) = 0u;
            *(_OWORD *)(v35 + 200) = 0u;
            *(_OWORD *)(v35 + 184) = 0u;
            *(_OWORD *)(v35 + 168) = 0u;
            *(_OWORD *)(v35 + 152) = 0u;
            *(_OWORD *)(v35 + 136) = 0u;
            *(_OWORD *)(v35 + 120) = 0u;
            RERetain();
            *(void *)(v35 + 16) = v33;
            RESceneSetSwiftObject();
          }
          swift_beginAccess();
          if (static __RKScenePhysics.registration)
          {
            RESceneGetComponentsOfCustomType();
            if (v36)
            {
              uint64_t Object = (long long *)RECustomComponentGetObject();
              if (Object)
              {
                long long v48 = *Object;
                if (RESceneGetECSManagerNullable())
                {
                  uint64_t ServiceLocator = REECSManagerGetServiceLocator();
                  if (MEMORY[0x22A6922C0](ServiceLocator))
                  {
                    REPhysicsSimulationServiceGetDefaultGravity();
                    long long v41 = v39;
                    uint64_t v40 = 0;
                    HIDWORD(v41) = v51;
                    BOOL v42 = 1;
                    while (1)
                    {
                      while (!v42)
                      {
                        if (v40 == 2) {
                          goto LABEL_4;
                        }
                        BOOL v42 = 0;
                        ++v40;
                      }
                      long long v52 = v41;
                      float v43 = *(float *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (v40 & 3)));
                      v53[0] = v48;
                      float v44 = *(float *)((unint64_t)v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (v40 & 3)));
                      BOOL v42 = v43 == v44;
                      if (v40 == 2) {
                        break;
                      }
                      ++v40;
                    }
                    if (v43 != v44) {
LABEL_4:
                    }
                      REPhysicsSimulationServiceSetDefaultGravity();
                  }
                }
              }
            }
          }
          swift_release();
        }
        swift_release();
        if (v8 == v6) {
          goto LABEL_53;
        }
      }
    }
  }

LABEL_53:
  swift_bridgeObjectRelease();
}

uint64_t Entity.ChildCollection.append<A>(contentsOf:preservingWorldTransforms:)()
{
  return Sequence.forEach(_:)();
}

void closure #1 in Entity.ChildCollection.append<A>(contentsOf:preservingWorldTransforms:)(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4 = *a1;
  if (a3)
  {
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    float32x4_t v15 = (float32x4_t)static simd_quatf.identity;
    specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v4, a2);
    specialized simd_float4x4.init(translation:rotation:scale:)(0.0, v15, 1.0);
    REMakeSRTFromMatrix();
    v16[0] = v5;
    v16[1] = v6;
    v16[2] = v7;
    char v17 = 0;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v16);
    swift_release();
  }
  REEntitySetParent();
  if (swift_conformsToProtocol2()) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    swift_beginAccess();
    unint64_t v9 = static RealityFusionSession.sharedSession;
    if (static RealityFusionSession.sharedSession)
    {
      swift_beginAccess();
      if (v9[2])
      {
        swift_retain();
        id v10 = (id)RFServiceManagerGetAnchorManagementService();
        if (v10)
        {
          BOOL v11 = v10;
          uint64_t SceneNullable = REEntityGetSceneNullable();
          if (SceneNullable)
          {
            uint64_t v13 = SceneNullable;
            id v14 = (id)RESceneGetSwiftObject();
            type metadata accessor for Scene();
            if (v14)
            {
              swift_dynamicCastClassUnconditional();
            }
            else
            {
              swift_allocObject();
              Scene.init(coreScene:)(v13);
            }
            swift_release();
            RFAnchorManagementUpdateAnchoringInScene();
          }
        }
        swift_release();
      }
    }
  }
  type metadata accessor for Entity();
  static Entity.updateInteractions(root:)(v4);
  Entity.updateSceneGravityIfNeeded()();
}

uint64_t Entity.ChildCollection.append(contentsOf:preservingWorldTransforms:)(uint64_t *a1, char a2)
{
  uint64_t v4 = *v2;
  uint64_t v6 = *a1;
  swift_retain();
  specialized Entity.ChildCollection.forEach(recursive:using:)(0, (uint64_t)&v6, v4, a2);

  return swift_release();
}

uint64_t Entity.ChildCollection.remove(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  return Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(a1, a2);
}

Swift::Void __swiftcall Entity.ChildCollection.remove(at:preservingWorldTransform:)(Swift::Int at, Swift::Bool preservingWorldTransform)
{
  uint64_t v3 = Entity.ChildCollection.subscript.getter(at);
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v3, preservingWorldTransform);

  swift_release();
}

Swift::Void __swiftcall Entity.ChildCollection.removeAll(keepCapacity:preservingWorldTransforms:)(Swift::Bool keepCapacity, Swift::Bool preservingWorldTransforms)
{
  swift_retain();
  uint64_t ChildCount = REEntityGetChildCount();
  if (ChildCount < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return;
  }
  uint64_t v4 = ChildCount;
  if (!ChildCount) {
    goto LABEL_18;
  }
  Swift::Bool v5 = preservingWorldTransforms;
  while (2)
  {
    uint64_t v6 = 0;
    do
    {
      if (v6 >= REEntityGetChildCount())
      {
        __break(1u);
        goto LABEL_22;
      }
      ++v6;
    }
    while (v4 != v6);
    swift_release();
    swift_retain();
    if (REEntityGetChildCount() < 1)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    uint64_t Child = REEntityGetChild();
    if (!Child) {
      goto LABEL_26;
    }
    uint64_t v8 = Child;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release();
      type metadata accessor for Entity();
      uint64_t v9 = swift_dynamicCastClassUnconditional();
      goto LABEL_16;
    }
    if (REEntityIsBeingDestroyed())
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v10 = specialized static Entity.entityInfoType(_:)();
    if (v10)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(v10 + 232))();
      uint64_t v11 = *(void *)(v9 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v11, 0);
      *(void *)(v9 + 16) = v8;
      MEMORY[0x22A68E750](v8, v9);
      swift_release();
    }
    else
    {
      uint64_t v9 = makeEntity(for:)(v8);
    }
    swift_release();
LABEL_16:
    Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v9, v5);
    swift_release();
    swift_retain();
    uint64_t v12 = REEntityGetChildCount();
    if (v12 < 0)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v4 = v12;
    if (v12) {
      continue;
    }
    break;
  }
LABEL_18:

  swift_release();
}

Swift::Void __swiftcall Entity.ChildCollection.removeAll(preservingWorldTransforms:)(Swift::Bool preservingWorldTransforms)
{
  swift_retain();
  uint64_t ChildCount = REEntityGetChildCount();
  if (ChildCount < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return;
  }
  uint64_t v3 = ChildCount;
  if (!ChildCount) {
    goto LABEL_18;
  }
  Swift::Bool v4 = preservingWorldTransforms;
  while (2)
  {
    uint64_t v5 = 0;
    do
    {
      if (v5 >= REEntityGetChildCount())
      {
        __break(1u);
        goto LABEL_22;
      }
      ++v5;
    }
    while (v3 != v5);
    swift_release();
    swift_retain();
    if (REEntityGetChildCount() < 1)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    uint64_t Child = REEntityGetChild();
    if (!Child) {
      goto LABEL_26;
    }
    uint64_t v7 = Child;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release();
      type metadata accessor for Entity();
      uint64_t v8 = swift_dynamicCastClassUnconditional();
      goto LABEL_16;
    }
    if (REEntityIsBeingDestroyed())
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v9 = specialized static Entity.entityInfoType(_:)();
    if (v9)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(v9 + 232))();
      uint64_t v10 = *(void *)(v8 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v10, 0);
      *(void *)(v8 + 16) = v7;
      MEMORY[0x22A68E750](v7, v8);
      swift_release();
    }
    else
    {
      uint64_t v8 = makeEntity(for:)(v7);
    }
    swift_release();
LABEL_16:
    Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v8, v4);
    swift_release();
    swift_retain();
    uint64_t v11 = REEntityGetChildCount();
    if (v11 < 0)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v3 = v11;
    if (v11) {
      continue;
    }
    break;
  }
LABEL_18:

  swift_release();
}

Swift::Void __swiftcall Entity.ChildCollection.replaceAll(_:preservingWorldTransforms:)(Swift::OpaquePointer _, Swift::Bool preservingWorldTransforms)
{
  uint64_t v5 = *v2;
  swift_retain();
  uint64_t ChildCount = REEntityGetChildCount();
  if (ChildCount < 0)
  {
    __break(1u);
LABEL_3:
    swift_release();
    type metadata accessor for Entity();
    uint64_t v7 = swift_dynamicCastClassUnconditional();
    goto LABEL_4;
  }
  while (2)
  {
    uint64_t v8 = ChildCount;
    if (ChildCount)
    {
      uint64_t v9 = 0;
      do
      {
        if (v9 >= REEntityGetChildCount())
        {
          __break(1u);
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        ++v9;
      }
      while (v8 != v9);
      swift_release();
      *(void *)&long long v61 = v5;
      swift_retain();
      if (REEntityGetChildCount() < 1) {
        goto LABEL_65;
      }
      uint64_t Child = REEntityGetChild();
      if (!Child) {
        goto LABEL_73;
      }
      uint64_t v11 = Child;
      if ((id)REEntityGetSwiftObject()) {
        goto LABEL_3;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        uint64_t v12 = specialized static Entity.entityInfoType(_:)();
        if (v12)
        {
          uint64_t v7 = (*(uint64_t (**)(void))(v12 + 232))();
          uint64_t v13 = *(void *)(v7 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v13, 0);
          *(void *)(v7 + 16) = v11;
          MEMORY[0x22A68E750](v11, v7);
          swift_release();
        }
        else
        {
          uint64_t v7 = makeEntity(for:)(v11);
        }
        swift_release();
LABEL_4:
        Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v7, preservingWorldTransforms);
        swift_release();
        swift_retain();
        uint64_t ChildCount = REEntityGetChildCount();
        if ((ChildCount & 0x8000000000000000) == 0) {
          continue;
        }
LABEL_66:
        __break(1u);
      }
      __break(1u);
      goto LABEL_68;
    }
    break;
  }
  swift_release();
  if ((unint64_t)_._rawValue >> 62)
  {
LABEL_68:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    if (!v14) {
      goto LABEL_69;
    }
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v14)
  {
LABEL_19:
    uint64_t v15 = type metadata accessor for Entity();
    if (v14 >= 1)
    {
      uint64_t v16 = v15;
      uint64_t v17 = 0;
      unint64_t v18 = (unint64_t)_._rawValue & 0xC000000000000001;
      v53 = (char *)_._rawValue + 32;
      uint64_t v52 = v14;
      while (1)
      {
        if (v18)
        {
          uint64_t v19 = MEMORY[0x22A689930](v17, _._rawValue);
          if (preservingWorldTransforms) {
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v19 = *(void *)&v53[8 * v17];
          swift_retain();
          if (preservingWorldTransforms)
          {
LABEL_28:
            if (one-time initialization token for identity != -1) {
              swift_once();
            }
            simd_quatf v54 = (simd_quatf)static simd_quatf.identity;
            specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v19, v5);
            *(double *)&long long v20 = simd_matrix4x4((float32x4_t)v54);
            long long v61 = v20;
            long long v62 = v21;
            long long v63 = v22;
            long long v64 = v23;
            simd_float4x4.scale(_:)((float32x4_t)xmmword_22830EC80);
            REMakeSRTFromMatrix();
            long long v25 = v24;
            HIDWORD(v25) = v56;
            HIDWORD(v26) = v57;
            v65[0] = v25;
            v65[1] = v27;
            v65[2] = v26;
            char v66 = 0;
            swift_retain();
            specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v65);
            swift_release();
          }
        }
        REEntitySetParent();
        if (swift_conformsToProtocol2()) {
          uint64_t v28 = v19;
        }
        else {
          uint64_t v28 = 0;
        }
        if (v28)
        {
          swift_beginAccess();
          unint64_t v29 = static RealityFusionSession.sharedSession;
          if (static RealityFusionSession.sharedSession)
          {
            swift_beginAccess();
            if (v29[2])
            {
              swift_retain();
              id v30 = (id)RFServiceManagerGetAnchorManagementService();
              if (v30)
              {
                uint64_t v31 = v30;
                uint64_t SceneNullable = REEntityGetSceneNullable();
                if (SceneNullable)
                {
                  uint64_t v33 = SceneNullable;
                  uint64_t v34 = v16;
                  unint64_t v35 = v18;
                  unint64_t rawValue = _._rawValue;
                  id v37 = (id)RESceneGetSwiftObject();
                  type metadata accessor for Scene();
                  if (v37)
                  {
                    swift_dynamicCastClassUnconditional();
                  }
                  else
                  {
                    uint64_t v38 = swift_allocObject();
                    *(_OWORD *)(v38 + 24) = 0u;
                    *(_OWORD *)(v38 + 40) = 0u;
                    *(void *)(v38 + 56) = 0;
                    swift_unknownObjectWeakInit();
                    *(void *)(v38 + 104) = 0;
                    *(_OWORD *)(v38 + 88) = 0u;
                    *(_OWORD *)(v38 + 72) = 0u;
                    swift_weakInit();
                    *(_OWORD *)(v38 + 216) = 0u;
                    *(_OWORD *)(v38 + 200) = 0u;
                    *(_OWORD *)(v38 + 184) = 0u;
                    *(_OWORD *)(v38 + 168) = 0u;
                    *(_OWORD *)(v38 + 152) = 0u;
                    *(_OWORD *)(v38 + 136) = 0u;
                    *(_OWORD *)(v38 + 120) = 0u;
                    RERetain();
                    *(void *)(v38 + 16) = v33;
                    RESceneSetSwiftObject();
                  }
                  swift_release();
                  RFAnchorManagementUpdateAnchoringInScene();
                  _._unint64_t rawValue = rawValue;
                  unint64_t v18 = v35;
                  uint64_t v16 = v34;
                  uint64_t v14 = v52;
                }
              }
              swift_release();
            }
          }
        }
        static Entity.updateInteractions(root:)(v19);
        uint64_t v39 = REEntityGetSceneNullable();
        if (v39)
        {
          uint64_t v40 = v39;
          id v41 = (id)RESceneGetSwiftObject();
          type metadata accessor for Scene();
          if (v41)
          {
            swift_dynamicCastClassUnconditional();
          }
          else
          {
            uint64_t v42 = swift_allocObject();
            *(_OWORD *)(v42 + 24) = 0u;
            *(_OWORD *)(v42 + 40) = 0u;
            *(void *)(v42 + 56) = 0;
            swift_unknownObjectWeakInit();
            *(void *)(v42 + 104) = 0;
            *(_OWORD *)(v42 + 88) = 0u;
            *(_OWORD *)(v42 + 72) = 0u;
            swift_weakInit();
            *(_OWORD *)(v42 + 216) = 0u;
            *(_OWORD *)(v42 + 200) = 0u;
            *(_OWORD *)(v42 + 184) = 0u;
            *(_OWORD *)(v42 + 168) = 0u;
            *(_OWORD *)(v42 + 152) = 0u;
            *(_OWORD *)(v42 + 136) = 0u;
            *(_OWORD *)(v42 + 120) = 0u;
            RERetain();
            *(void *)(v42 + 16) = v40;
            RESceneSetSwiftObject();
          }
          swift_beginAccess();
          if (static __RKScenePhysics.registration)
          {
            RESceneGetComponentsOfCustomType();
            if (v43)
            {
              uint64_t Object = (long long *)RECustomComponentGetObject();
              if (Object)
              {
                long long v55 = *Object;
                if (RESceneGetECSManagerNullable())
                {
                  uint64_t ServiceLocator = REECSManagerGetServiceLocator();
                  if (MEMORY[0x22A6922C0](ServiceLocator))
                  {
                    REPhysicsSimulationServiceGetDefaultGravity();
                    long long v48 = v46;
                    uint64_t v47 = 0;
                    HIDWORD(v48) = v58;
                    BOOL v49 = 1;
                    while (1)
                    {
                      while (!v49)
                      {
                        if (v47 == 2) {
                          goto LABEL_21;
                        }
                        BOOL v49 = 0;
                        ++v47;
                      }
                      long long v59 = v48;
                      float v50 = *(float *)((unint64_t)&v59 & 0xFFFFFFFFFFFFFFF3 | (4 * (v47 & 3)));
                      long long v60 = v55;
                      float v51 = *(float *)((unint64_t)&v60 & 0xFFFFFFFFFFFFFFF3 | (4 * (v47 & 3)));
                      BOOL v49 = v50 == v51;
                      if (v47 == 2) {
                        break;
                      }
                      ++v47;
                    }
                    if (v50 != v51) {
LABEL_21:
                    }
                      REPhysicsSimulationServiceSetDefaultGravity();
                  }
                }
              }
            }
          }
          swift_release();
        }
        swift_release();
        if (++v17 == v14)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
    __break(1u);
LABEL_73:
    __break(1u);
    return;
  }
LABEL_69:

  swift_bridgeObjectRelease();
}

uint64_t Entity.ChildCollection.replaceAll<A>(_:preservingWorldTransforms:)(uint64_t a1, int a2, uint64_t a3)
{
  int v17 = a2;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t v16 = *v3;
  v19._unint64_t rawValue = (void *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a3, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (!v18) {
      break;
    }
    uint64_t v14 = swift_retain();
    MEMORY[0x22A688E10](v14);
    if (*(void *)(((unint64_t)v19._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v19._rawValue & 0xFFFFFFFFFFFFFF8)
                                                                                                  + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  uint64_t v18 = v16;
  Entity.ChildCollection.replaceAll(_:preservingWorldTransforms:)(v19, v17 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Entity.ChildCollection(uint64_t *a1, uint64_t *a2))()
{
  uint64_t v3 = Entity.ChildCollection.subscript.getter(*a2);
  *a1 = v3;
  a1[1] = v3;
  return protocol witness for Collection.subscript.read in conformance RealityRenderer.EntityCollection;
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance Entity.ChildCollection(void *a1, void *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2, *v2);
}

uint64_t protocol witness for Collection.count.getter in conformance Entity.ChildCollection()
{
  uint64_t result = REEntityGetChildCount();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v1 = result;
    if (!result) {
      return v1;
    }
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t result = REEntityGetChildCount();
      if (v2 >= result) {
        break;
      }
      if (v1 == ++v2) {
        return v1;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Entity.ChildCollection()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Entity.ChildCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t Entity.ChildCollection.description.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  uint64_t v2 = type metadata accessor for Entity();
  uint64_t v3 = MEMORY[0x22A688E60](v1, v2);
  swift_release();
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Entity.ChildCollection()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  uint64_t v2 = type metadata accessor for Entity();
  uint64_t v3 = MEMORY[0x22A688E60](v1, v2);
  swift_release();
  return v3;
}

uint64_t Entity.ChildCollection.IndexingIterator.init(_elements:_position:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for Entity.ChildCollection.IndexingIterator() + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v8(v6, a2, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Entity.ChildCollection.IndexingIterator<A>(uint64_t a1)
{
  uint64_t v3 = specialized Sequence._copyToContiguousArray()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t EntityCollection.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EntityCollection.append<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v11;

  dispatch thunk of Collection.endIndex.getter();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))(a1, v11, a3, a5, a2, a4);
}

uint64_t EntityCollection.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  lazy protocol witness table accessor for type Entity and conformance Entity();
  uint64_t result = Collection<>.firstIndex(of:)();
  if ((v7 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v6, a2, a3);
  }
  return result;
}

Swift::Void __swiftcall EntityCollection.removeAll()()
{
  (*(void (**)(uint64_t (*)(), void))(v0 + 72))(protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError, 0);
}

uint64_t EntityCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return EntityCollection.replaceAll<A>(_:)(a1, a4, a2, a5, a3);
}

{
  uint64_t (*v10)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  (*(void (**)(uint64_t, uint64_t))(a4 + 64))(a2, a4);
  uint64_t v10 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40);

  return v10(a1, 0, a3, a5, a2, a4);
}

uint64_t protocol witness for EntityCollection.remove(_:) in conformance Entity.ChildCollection(uint64_t a1)
{
  return Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(a1, 0);
}

uint64_t protocol witness for EntityCollection.remove(at:) in conformance Entity.ChildCollection(uint64_t a1)
{
  uint64_t v1 = Entity.ChildCollection.subscript.getter(a1);
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v1, 0);

  return swift_release();
}

uint64_t protocol witness for EntityCollection.removeAll(where:) in conformance Entity.ChildCollection(uint64_t (*a1)(uint64_t))
{
  return specialized EntityCollection.removeAll(where:)(a1);
}

uint64_t type metadata accessor for Entity.ChildCollection.IndexingIterator()
{
  return __swift_instantiateGenericMetadata();
}

void partial apply for closure #1 in Entity.ChildCollection.append<A>(contentsOf:preservingWorldTransforms:)(uint64_t *a1)
{
  closure #1 in Entity.ChildCollection.append<A>(contentsOf:preservingWorldTransforms:)(a1, *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
}

uint64_t specialized Entity.ChildCollection.forEach(recursive:using:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_retain();
  uint64_t v7 = swift_retain();
  uint64_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)(v7);
  uint64_t result = swift_release();
  if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_release();
    if (v10) {
      goto LABEL_4;
    }
LABEL_54:
    swift_release();
    return swift_release();
  }
  uint64_t v10 = *(void *)(v8 + 16);
  if (!v10) {
    goto LABEL_54;
  }
LABEL_4:
  if (v10 >= 1)
  {
    uint64_t v11 = v8;
    unint64_t v12 = v8 & 0xC000000000000001;
    type metadata accessor for Entity();
    uint64_t v13 = 0;
    uint64_t v47 = v11;
    uint64_t v45 = v11 + 32;
    char v46 = a1;
    while (1)
    {
      if (v12)
      {
        uint64_t v14 = MEMORY[0x22A689930](v13, v47);
        if ((a4 & 1) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(v45 + 8 * v13);
        swift_retain();
        if ((a4 & 1) == 0) {
          goto LABEL_14;
        }
      }
      if (one-time initialization token for identity != -1) {
        swift_once();
      }
      simd_quatf v48 = (simd_quatf)static simd_quatf.identity;
      specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v14, a3);
      *(double *)&long long v15 = simd_matrix4x4((float32x4_t)v48);
      v54[0] = v15;
      v54[1] = v16;
      v54[2] = v17;
      _OWORD v54[3] = v18;
      simd_float4x4.scale(_:)((float32x4_t)xmmword_22830EC80);
      REMakeSRTFromMatrix();
      long long v20 = v19;
      HIDWORD(v20) = v50;
      HIDWORD(v21) = v51;
      v55[0] = v20;
      v55[1] = v22;
      v55[2] = v21;
      char v56 = 0;
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v55);
      swift_release();
LABEL_14:
      REEntitySetParent();
      if (swift_conformsToProtocol2()) {
        uint64_t v23 = v14;
      }
      else {
        uint64_t v23 = 0;
      }
      if (v23)
      {
        swift_beginAccess();
        long long v24 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession)
        {
          swift_beginAccess();
          if (v24[2])
          {
            swift_retain();
            id v25 = (id)RFServiceManagerGetAnchorManagementService();
            if (v25)
            {
              long long v26 = v25;
              uint64_t SceneNullable = REEntityGetSceneNullable();
              if (SceneNullable)
              {
                uint64_t v28 = SceneNullable;
                id v29 = (id)RESceneGetSwiftObject();
                type metadata accessor for Scene();
                if (v29)
                {
                  swift_dynamicCastClassUnconditional();
                }
                else
                {
                  uint64_t v30 = swift_allocObject();
                  *(_OWORD *)(v30 + 24) = 0u;
                  *(_OWORD *)(v30 + 40) = 0u;
                  *(void *)(v30 + 56) = 0;
                  swift_unknownObjectWeakInit();
                  *(void *)(v30 + 104) = 0;
                  *(_OWORD *)(v30 + 88) = 0u;
                  *(_OWORD *)(v30 + 72) = 0u;
                  swift_weakInit();
                  *(_OWORD *)(v30 + 216) = 0u;
                  *(_OWORD *)(v30 + 200) = 0u;
                  *(_OWORD *)(v30 + 184) = 0u;
                  *(_OWORD *)(v30 + 168) = 0u;
                  *(_OWORD *)(v30 + 152) = 0u;
                  *(_OWORD *)(v30 + 136) = 0u;
                  *(_OWORD *)(v30 + 120) = 0u;
                  RERetain();
                  *(void *)(v30 + 16) = v28;
                  RESceneSetSwiftObject();
                }
                swift_release();
                RFAnchorManagementUpdateAnchoringInScene();
                a1 = v46;
              }
            }
            swift_release();
          }
        }
      }
      static Entity.updateInteractions(root:)(v14);
      uint64_t v31 = REEntityGetSceneNullable();
      if (v31)
      {
        uint64_t v32 = v31;
        id v33 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v33)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          uint64_t v34 = swift_allocObject();
          *(_OWORD *)(v34 + 24) = 0u;
          *(_OWORD *)(v34 + 40) = 0u;
          *(void *)(v34 + 56) = 0;
          swift_unknownObjectWeakInit();
          *(void *)(v34 + 104) = 0;
          *(_OWORD *)(v34 + 88) = 0u;
          *(_OWORD *)(v34 + 72) = 0u;
          swift_weakInit();
          *(_OWORD *)(v34 + 216) = 0u;
          *(_OWORD *)(v34 + 200) = 0u;
          *(_OWORD *)(v34 + 184) = 0u;
          *(_OWORD *)(v34 + 168) = 0u;
          *(_OWORD *)(v34 + 152) = 0u;
          *(_OWORD *)(v34 + 136) = 0u;
          *(_OWORD *)(v34 + 120) = 0u;
          RERetain();
          *(void *)(v34 + 16) = v32;
          RESceneSetSwiftObject();
        }
        swift_beginAccess();
        if (static __RKScenePhysics.registration)
        {
          RESceneGetComponentsOfCustomType();
          if (!v35
            || (uint64_t Object = (long long *)RECustomComponentGetObject()) == 0
            || (long long v49 = *Object, !RESceneGetECSManagerNullable()))
          {
            swift_release();
            a1 = v46;
            if (v46) {
              goto LABEL_47;
            }
            goto LABEL_6;
          }
          uint64_t ServiceLocator = REECSManagerGetServiceLocator();
          a1 = v46;
          if (MEMORY[0x22A6922C0](ServiceLocator))
          {
            REPhysicsSimulationServiceGetDefaultGravity();
            long long v40 = v38;
            uint64_t v39 = 0;
            HIDWORD(v40) = v44;
            BOOL v41 = 1;
            while (1)
            {
              while (!v41)
              {
                if (v39 == 2) {
                  goto LABEL_49;
                }
                BOOL v41 = 0;
                ++v39;
              }
              long long v52 = v40;
              float v42 = *(float *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (v39 & 3)));
              long long v53 = v49;
              float v43 = *(float *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (v39 & 3)));
              BOOL v41 = v42 == v43;
              if (v39 == 2) {
                break;
              }
              ++v39;
            }
            if (v42 == v43) {
              goto LABEL_50;
            }
LABEL_49:
            REPhysicsSimulationServiceSetDefaultGravity();
LABEL_50:
            swift_release();
            if ((v46 & 1) == 0) {
              goto LABEL_6;
            }
LABEL_47:
            *(void *)&v54[0] = v14;
            swift_retain();
            specialized Entity.ChildCollection.forEach(recursive:using:)(1, v54, a3, a4 & 1);
            swift_release();
            goto LABEL_6;
          }
        }
        swift_release();
      }
      if (a1) {
        goto LABEL_47;
      }
LABEL_6:
      swift_release();
      if (++v13 == v10)
      {
        swift_release();
        return swift_release();
      }
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection;
  if (!lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection;
  if (!lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ChildCollection and conformance Entity.ChildCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Entity.ChildCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<Entity.ChildCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<Entity.ChildCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Entity.ChildCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<Entity.ChildCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<Entity.ChildCollection>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Entity.ChildCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Entity.ChildCollection.IndexingIterator<Entity.ChildCollection> and conformance Entity.ChildCollection.IndexingIterator<A>, &demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Entity.ChildCollection>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Entity.ChildCollection.IndexingIterator<A>()
{
  return swift_getWitnessTable();
}

unint64_t instantiation function for generic protocol witness table for Entity.ChildCollection(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Entity.ChildCollection and conformance Entity.ChildCollection();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2280CEDD8@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = Entity.ChildCollection.subscript.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_2280CEE1C()
{
  return 0;
}

ValueMetadata *type metadata accessor for Entity.ChildCollection()
{
  return &type metadata for Entity.ChildCollection;
}

uint64_t type metadata completion function for Entity.ChildCollection.IndexingIterator()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for Entity.ChildCollection.IndexingIterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = AssociatedTypeWitness;
    uint64_t v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t destroy for Entity.ChildCollection.IndexingIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = AssociatedTypeWitness;
  unint64_t v9 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t initializeWithCopy for Entity.ChildCollection.IndexingIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for Entity.ChildCollection.IndexingIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for Entity.ChildCollection.IndexingIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for Entity.ChildCollection.IndexingIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.ChildCollection.IndexingIterator(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v12) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v11)
      {
        if (v7 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
          return v23(a1, v7, v5);
        }
        else
        {
          long long v21 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v12);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = v14;
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v11 + (v20 | v18) + 1;
}

void storeEnumTagSinglePayload for Entity.ChildCollection.IndexingIterator(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v24 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v8 + 64) + v14;
  size_t v16 = (v15 & ~v14) + *(void *)(v10 + 64);
  if (a3 <= v13)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v13 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v18 = ~v13 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x2280CFA70);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v9 >= v12)
        {
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
          v23(a1, a2, v9, v7);
        }
        else
        {
          long long v22 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v15] & ~v14, a2);
        }
      }
      return;
  }
}

uint64_t dispatch thunk of EntityCollection.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of EntityCollection.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of EntityCollection.insert(_:beforeIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of EntityCollection.insert<A>(contentsOf:beforeIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of EntityCollection.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of EntityCollection.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of EntityCollection.removeAll()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of EntityCollection.removeAll(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of EntityCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 80))();
}

CGColorRef HasDirectionalLight.light.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v9);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v6);
  swift_release();
  CGColorRef result = v6;
  if (v6)
  {
    int v4 = v7;
    char v5 = v8 & 1;
  }
  else
  {
    CGColorRef result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    char v5 = 0;
    int v4 = 1158028115;
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return result;
}

uint64_t key path setter for HasDirectionalLight.light : <A>A(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  char v2 = *(unsigned char *)(a1 + 12);
  char v5 = *(void **)a1;
  int v6 = v1;
  char v7 = v2;
  id v3 = v5;
  return HasDirectionalLight.light.setter(&v5);
}

uint64_t HasDirectionalLight.light.setter(void **a1)
{
  char v2 = *a1;
  id v3 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);

  swift_release();
  return v3(v5, 0);
}

void (*HasDirectionalLight.light.modify(void *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  char v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  HasDirectionalLight.light.getter((uint64_t)v7);
  return HasDirectionalLight.light.modify;
}

void HasDirectionalLight.light.modify(void ***a1, char a2)
{
  char v2 = *a1;
  uint64_t v3 = **a1;
  int v4 = *((_DWORD *)*a1 + 2);
  char v5 = *((unsigned char *)*a1 + 12);
  char v7 = v3;
  int v8 = v4;
  char v9 = v5;
  if (a2)
  {
    id v6 = v3;
    HasDirectionalLight.light.setter(&v7);
  }
  else
  {
    HasDirectionalLight.light.setter(&v7);
  }

  free(v2);
}

uint64_t HasDirectionalLight.shadow.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v16);
  uint64_t Component = REEntityGetComponent();
  if (Component)
  {
    uint64_t v15 = Component;
    static DirectionalLightComponent.Shadow.__fromCore(_:)((uint64_t)&v10);
    uint64_t result = swift_release();
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    unint64_t v7 = v12;
    char v8 = v14;
    unint64_t v9 = (unint64_t)v13 << 32;
  }
  else
  {
    uint64_t result = swift_release();
    unint64_t v9 = 0;
    uint64_t v5 = 0x40A000003F800000;
    char v8 = 1;
    unint64_t v7 = 1084227584;
    uint64_t v6 = 3;
  }
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6 | (v7 << 32);
  *(void *)(a1 + 16) = v9 | HIDWORD(v7);
  *(unsigned char *)(a1 + 24) = v8;
  return result;
}

uint64_t HasDirectionalLight.shadow.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 24);
  uint64_t v6 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2, v3, v4, v5);
  swift_release();
  return v6(v8, 0);
}

void (*HasDirectionalLight.shadow.modify(void *a1, uint64_t a2, uint64_t a3))(void **a1)
{
  unint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[5] = a3;
  v7[6] = v3;
  v7[4] = a2;
  HasDirectionalLight.shadow.getter((uint64_t)v7);
  return HasDirectionalLight.shadow.modify;
}

void HasDirectionalLight.shadow.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[1];
  uint64_t v3 = (*a1)[2];
  char v4 = *((unsigned char *)*a1 + 24);
  v5[0] = **a1;
  v5[1] = v2;
  v5[2] = v3;
  char v6 = v4;
  HasDirectionalLight.shadow.setter((uint64_t)v5);

  free(v1);
}

float sub_2280D006C@<S0>(uint64_t a1@<X8>)
{
  HasDirectionalLight.light.getter((uint64_t)&v4);
  float result = v5;
  char v3 = v6;
  *(void *)a1 = v4;
  *(float *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 12) = v3;
  return result;
}

uint64_t sub_2280D00BC()
{
  return 16;
}

__n128 sub_2280D00C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_2280D00D4@<D0>(uint64_t a1@<X8>)
{
  HasDirectionalLight.shadow.getter((uint64_t)&v5);
  uint64_t v2 = v6;
  char v3 = v7;
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(void *)(a1 + 16) = v2;
  *(unsigned char *)(a1 + 24) = v3;
  return result;
}

uint64_t sub_2280D0120(long long *a1)
{
  uint64_t v1 = *((void *)a1 + 2);
  char v2 = *((unsigned char *)a1 + 24);
  long long v4 = *a1;
  uint64_t v5 = v1;
  char v6 = v2;
  return HasDirectionalLight.shadow.setter((uint64_t)&v4);
}

uint64_t sub_2280D0168()
{
  return 16;
}

__n128 sub_2280D0174(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t static RKARSystemCore.generateDecimatedMeshes.getter()
{
  return static RKARSystemCore.generateDecimatedMeshes;
}

uint64_t static RKARSystemCore.generateDecimatedMeshes.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static RKARSystemCore.generateDecimatedMeshes = a1;
  return result;
}

uint64_t (*static RKARSystemCore.generateDecimatedMeshes.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

id RKARSystemCore.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id RKARSystemCore.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RKARSystemCore();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for RKARSystemCore()
{
  return self;
}

id RKARSystemCore.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RKARSystemCore();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8 = result;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10 < 0)
    {
      __break(1u);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v10 < a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  a5[2] = a3;
  a5[3] = a4;
  *a5 = v8;
  a5[1] = a2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (REEntityGetComponentCount() < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      if (Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)()) {
        break;
      }
      ++v8;
    }
    while (v8 < REEntityGetComponentCount());
  }
  uint64_t result = REEntityGetComponentCount();
  if (result < v8)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v8 > a1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (result < a2)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  a4[1] = a2;
  a4[2] = a3;
  *a4 = a1;

  return swift_retain();
}

uint64_t IKComponent.resource.getter()
{
  return swift_retain();
}

uint64_t IKComponent.resource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*IKComponent.resource.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t IKComponent.solvers.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = *(void *)(v1 + 8);
  a1[1] = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 IKComponent.solvers.setter(__n128 *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*IKComponent.solvers.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 IKComponent.init(resource:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  IKComponent.SolverCollection.init(_:)(MEMORY[0x263F8EE78], v5.n128_u64);
  __n128 result = v5;
  *(void *)a2 = a1;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t IKComponent.SolverCollection.init(_:)@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v25 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v4 = v25;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    long long v22 = a2;
    if (!v5) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    long long v22 = a2;
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      MEMORY[0x22A689930](i, a1);
      REIkParametersComponentGetSolverNodeName();
      uint64_t v23 = String.init(cString:)();
      uint64_t v24 = v7;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v8 = StringProtocol.hash.getter();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v25 = v4;
      unint64_t v10 = *(void *)(v4 + 16);
      unint64_t v9 = *(void *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v4 = v25;
      }
      uint64_t v11 = v4 + 16 * v10;
      *(void *)(v11 + 32) = v8;
      *(void *)(v11 + 40) = i;
      *(void *)(v4 + 16) = v10 + 1;
    }
  }
  else
  {
    for (uint64_t j = 0; j != v5; ++j)
    {
      swift_retain();
      REIkParametersComponentGetSolverNodeName();
      uint64_t v23 = String.init(cString:)();
      uint64_t v24 = v13;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v14 = StringProtocol.hash.getter();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v25 = v4;
      unint64_t v16 = *(void *)(v4 + 16);
      unint64_t v15 = *(void *)(v4 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v4 = v25;
      }
      uint64_t v17 = v4 + 16 * v16;
      *(void *)(v17 + 32) = v14;
      *(void *)(v17 + 40) = j;
      *(void *)(v4 + 16) = v16 + 1;
    }
  }
LABEL_16:
  swift_bridgeObjectRelease_n();
  if (*(void *)(v4 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IKComponent.Solver.ID, Int>);
    uint64_t v18 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v18 = MEMORY[0x263F8EE80];
  }
  uint64_t v23 = v18;
  int v19 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v19, 1, &v23);
  uint64_t result = swift_release();
  uint64_t v21 = v23;
  *long long v22 = a1;
  v22[1] = v21;
  return result;
}

uint64_t IKComponent.init(coreComponent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t Asset = REIkParametersComponentGetAsset();
  if (Asset)
  {
    uint64_t v5 = Asset;
    type metadata accessor for IKResource();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    RERetain();
    REAssetSetSwiftObject();
  }
  else
  {
    uint64_t v6 = 0;
  }
  MEMORY[0x22A68EEA0](a1);
  uint64_t result = REIkParametersComponentGetSolverCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = result;
    unint64_t v9 = MEMORY[0x263F8EE78];
    if (v8)
    {
      *(void *)&long long v12 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for IKComponent.Solver();
      for (uint64_t i = 0; i != v8; ++i)
      {
        swift_allocObject();
        IKComponent.Solver.init(coreComp:solverIndex:)(a1, i);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      unint64_t v9 = v12;
    }
    uint64_t result = IKComponent.SolverCollection.init(_:)(v9, (unint64_t *)&v12);
    long long v11 = v12;
    *(void *)a2 = v6;
    *(_OWORD *)(a2 + 8) = v11;
  }
  return result;
}

void IKComponent.Solver.ID.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static IKComponent.Solver.ID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int IKComponent.Solver.ID.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t IKComponent.Solver.id.getter@<X0>(uint64_t *a1@<X8>)
{
  REIkParametersComponentGetSolverNodeName();
  String.init(cString:)();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v2 = StringProtocol.hash.getter();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t IKComponent.Solver.maxIterations.getter()
{
  if (*(unsigned char *)(v0 + 40) == 1) {
    return REIkParametersComponentSolverGetMaxIterations();
  }
  else {
    return *(void *)(v0 + 32);
  }
}

uint64_t IKComponent.Solver.maxIterations.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  *(unsigned char *)(v1 + 40) = 0;
  return result;
}

void *(*IKComponent.Solver.maxIterations.modify(void *a1))(void *result)
{
  a1[1] = v1;
  if (*(unsigned char *)(v1 + 40) == 1) {
    uint64_t MaxIterations = REIkParametersComponentSolverGetMaxIterations();
  }
  else {
    uint64_t MaxIterations = *(void *)(v1 + 32);
  }
  *a1 = MaxIterations;
  return IKComponent.Solver.maxIterations.modify;
}

void *IKComponent.Solver.maxIterations.modify(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 32) = *result;
  *(unsigned char *)(v1 + 40) = 0;
  return result;
}

float IKComponent.Solver.globalFkWeight.getter()
{
  if ((*(unsigned char *)(v0 + 48) & 1) == 0) {
    return *(float *)(v0 + 44);
  }
  REIkParametersComponentSolverGetRetargetingGain();
  return result;
}

void IKComponent.Solver.globalFkWeight.setter(float a1)
{
  *(float *)(v1 + 44) = a1;
  *(unsigned char *)(v1 + 48) = 0;
}

uint64_t *(*IKComponent.Solver.globalFkWeight.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 48)) {
    REIkParametersComponentSolverGetRetargetingGain();
  }
  else {
    int v3 = *(_DWORD *)(v1 + 44);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return IKComponent.Solver.globalFkWeight.modify;
}

uint64_t *IKComponent.Solver.globalFkWeight.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  *(_DWORD *)(v1 + 44) = *((_DWORD *)result + 2);
  *(unsigned char *)(v1 + 48) = 0;
  return result;
}

Swift::Void __swiftcall IKComponent.Solver.reset()()
{
  *(unsigned char *)(v0 + 49) = 1;
}

uint64_t key path getter for IKComponent.Solver.joints : IKComponent.Solver@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = *(void *)(v3 + 64);
  *a2 = v4;
  a2[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for IKComponent.Solver.joints : IKComponent.Solver(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 56) = v2;
  *(void *)(v4 + 64) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t IKComponent.Solver.joints.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t IKComponent.Solver.joints.setter(_OWORD *a1)
{
  swift_beginAccess();
  *(_OWORD *)(v1 + 56) = *a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for IKComponent.Solver.constraints : IKComponent.Solver@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(void *)(v3 + 80);
  *a2 = v4;
  a2[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for IKComponent.Solver.constraints : IKComponent.Solver(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 72) = v2;
  *(void *)(v4 + 80) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t IKComponent.Solver.constraints.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 72);
  uint64_t v4 = *(void *)(v1 + 80);
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t IKComponent.Solver.constraints.setter(_OWORD *a1)
{
  swift_beginAccess();
  *(_OWORD *)(v1 + 72) = *a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*IKComponent.Solver.constraints.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t IKComponent.Solver.init(coreComp:solverIndex:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a2;
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 40) = 1;
  *(_DWORD *)(v2 + 44) = 0;
  *(_WORD *)(v2 + 48) = 1;
  *(void *)(v2 + 16) = a1;
  uint64_t result = REIkParametersComponentSolverGetJointCount();
  if (result < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  v7._unint64_t rawValue = (void *)MEMORY[0x263F8EE78];
  uint64_t v20 = v2;
  if (v6)
  {
    uint64_t v21 = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    type metadata accessor for IKComponent.Joint();
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = v8 + 1;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(unsigned char *)(v10 + 64) = 1;
      *(void *)(v10 + 80) = 0;
      *(void *)(v10 + 88) = 0;
      *(unsigned char *)(v10 + 96) = 1;
      *(void *)(v10 + 16) = a1;
      *(void *)(v10 + 24) = a2;
      *(void *)(v10 + 32) = v8;
      REIkParametersComponentJointGetName();
      *(void *)&long long v23 = String.init(cString:)();
      *((void *)&v23 + 1) = v11;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v12 = StringProtocol.hash.getter();
      swift_bridgeObjectRelease();
      *(void *)(v10 + 104) = v12;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v8 = v9;
    }
    while (v6 != v9);
    uint64_t v2 = v20;
    v7._unint64_t rawValue = v21;
  }
  IKComponent.JointCollection.init(_:)(v7);
  *(_OWORD *)(v2 + 56) = v23;
  uint64_t result = REIkParametersComponentSolverGetTaskCount();
  if (result < 0) {
    goto LABEL_13;
  }
  uint64_t v13 = result;
  v14._unint64_t rawValue = (void *)MEMORY[0x263F8EE78];
  if (v13)
  {
    long long v22 = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    type metadata accessor for IKComponent.Constraint();
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = v15 + 1;
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(unsigned char *)(v17 + 96) = 1;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_OWORD *)(v17 + 128) = 0u;
      *(_OWORD *)(v17 + 144) = 0u;
      *(unsigned char *)(v17 + 160) = 1;
      *(void *)(v17 + 176) = 0;
      *(void *)(v17 + 184) = 0;
      *(unsigned char *)(v17 + 192) = 1;
      *(void *)(v17 + 196) = 0;
      *(unsigned char *)(v17 + 204) = 1;
      *(void *)(v17 + 16) = a1;
      *(void *)(v17 + 24) = a2;
      *(void *)(v17 + 32) = v15;
      REIkParametersComponentTaskGetName();
      *(void *)&long long v23 = String.init(cString:)();
      *((void *)&v23 + 1) = v18;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v19 = StringProtocol.hash.getter();
      swift_bridgeObjectRelease();
      *(void *)(v17 + 208) = v19;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v15 = v16;
    }
    while (v13 != v16);
    uint64_t v2 = v20;
    v14._unint64_t rawValue = v22;
  }
  IKComponent.ConstraintCollection.init(_:)(v14);
  *(_OWORD *)(v2 + 72) = v23;
  return v2;
}

RealityFoundation::IKComponent::JointCollection __swiftcall IKComponent.JointCollection.init(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v1;
  uint64_t v24 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v4 = v24;
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    long long v23 = v3;
    if (!v5) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    long long v23 = v3;
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    uint64_t v19 = (void *)swift_unexpectedError();
    __break(1u);
    goto LABEL_21;
  }
  if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v7 = *(void *)(MEMORY[0x22A689930](i, a1._rawValue) + 104);
      swift_unknownObjectRelease();
      uint64_t v24 = v4;
      unint64_t v9 = *(void *)(v4 + 16);
      unint64_t v8 = *(void *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        uint64_t v4 = v24;
      }
      unint64_t v10 = v4 + 16 * v9;
      *(void *)(v10 + 32) = v7;
      *(void *)(v10 + 40) = i;
      *(void *)(v4 + 16) = v9 + 1;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(v24 + 16);
    uint64_t v13 = 16 * v12;
    do
    {
      uint64_t v14 = *(void *)(*((void *)a1._rawValue + v11 + 4) + 104);
      uint64_t v24 = v4;
      unint64_t v15 = *(void *)(v4 + 24);
      if (v12 + v11 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v12 + v11 + 1, 1);
        uint64_t v4 = v24;
      }
      *(void *)(v4 + 16) = v12 + v11 + 1;
      uint64_t v16 = v4 + v13;
      *(void *)(v16 + 32) = v14;
      *(void *)(v16 + 40) = v11;
      v13 += 16;
      ++v11;
    }
    while (v5 != v11);
  }
LABEL_16:
  swift_bridgeObjectRelease_n();
  if (*(void *)(v4 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IKRig.Joint.ID, Int>);
    uint64_t v17 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v17 = MEMORY[0x263F8EE80];
  }
  uint64_t v24 = v17;
  uint64_t v18 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v18, 1, &v24);
  uint64_t v19 = (void *)swift_release();
  uint64_t v21 = (void *)v24;
  v23->_unint64_t rawValue = a1._rawValue;
  v23[1]._unint64_t rawValue = v21;
LABEL_21:
  result.lookUpHelper._unint64_t rawValue = v20;
  result.storage._unint64_t rawValue = v19;
  return result;
}

RealityFoundation::IKComponent::ConstraintCollection __swiftcall IKComponent.ConstraintCollection.init(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v1;
  uint64_t v24 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v4 = v24;
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    long long v23 = v3;
    if (!v5) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    long long v23 = v3;
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    uint64_t v19 = (void *)swift_unexpectedError();
    __break(1u);
    goto LABEL_21;
  }
  if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v7 = *(void *)(MEMORY[0x22A689930](i, a1._rawValue) + 208);
      swift_unknownObjectRelease();
      uint64_t v24 = v4;
      unint64_t v9 = *(void *)(v4 + 16);
      unint64_t v8 = *(void *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        uint64_t v4 = v24;
      }
      unint64_t v10 = v4 + 16 * v9;
      *(void *)(v10 + 32) = v7;
      *(void *)(v10 + 40) = i;
      *(void *)(v4 + 16) = v9 + 1;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(v24 + 16);
    uint64_t v13 = 16 * v12;
    do
    {
      uint64_t v14 = *(void *)(*((void *)a1._rawValue + v11 + 4) + 208);
      uint64_t v24 = v4;
      unint64_t v15 = *(void *)(v4 + 24);
      if (v12 + v11 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v12 + v11 + 1, 1);
        uint64_t v4 = v24;
      }
      *(void *)(v4 + 16) = v12 + v11 + 1;
      uint64_t v16 = v4 + v13;
      *(void *)(v16 + 32) = v14;
      *(void *)(v16 + 40) = v11;
      v13 += 16;
      ++v11;
    }
    while (v5 != v11);
  }
LABEL_16:
  swift_bridgeObjectRelease_n();
  if (*(void *)(v4 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IKRig.Constraint.ID, Int>);
    uint64_t v17 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v17 = MEMORY[0x263F8EE80];
  }
  uint64_t v24 = v17;
  uint64_t v18 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v18, 1, &v24);
  uint64_t v19 = (void *)swift_release();
  uint64_t v21 = (void *)v24;
  v23->_unint64_t rawValue = a1._rawValue;
  v23[1]._unint64_t rawValue = v21;
LABEL_21:
  result.lookUpHelper._unint64_t rawValue = v20;
  result.storage._unint64_t rawValue = v19;
  return result;
}

uint64_t IKComponent.Solver.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t IKComponent.Solver.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Identifiable.id.getter in conformance IKComponent.Solver@<X0>(uint64_t *a1@<X8>)
{
  REIkParametersComponentGetSolverNodeName();
  String.init(cString:)();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v2 = StringProtocol.hash.getter();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void IKComponent.Joint.id.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 104);
}

uint64_t IKComponent.Joint.name.getter()
{
  return IKComponent.Joint.name.getter(MEMORY[0x263F37090]);
}

float32x2_t IKComponent.Joint.fkWeightPerAxis.getter()
{
  if (v0[8].i8[0])
  {
    REIkParametersComponentJointGetRetargetingGain();
    float v4 = v1;
    REIkParametersComponentJointGetRetargetingGainPerAxis();
    return vmul_n_f32(v2, v4);
  }
  else
  {
    return v0[6];
  }
}

void IKComponent.Joint.fkWeightPerAxis.setter(__n128 a1)
{
  v1[3] = a1;
  v1[4].n128_u8[0] = 0;
}

void (*IKComponent.Joint.fkWeightPerAxis.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x18uLL);
  *a1 = v3;
  v3[2] = v1;
  if (*(unsigned char *)(v1 + 64))
  {
    REIkParametersComponentJointGetRetargetingGain();
    float v8 = v4;
    REIkParametersComponentJointGetRetargetingGainPerAxis();
    *(float32x2_t *)&long long v6 = vmul_n_f32(*(float32x2_t *)v5.f32, v8);
    *((void *)&v6 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v8, v5, 2));
  }
  else
  {
    long long v6 = *(_OWORD *)(v1 + 48);
  }
  *(_OWORD *)uint64_t v3 = v6;
  return IKComponent.Joint.fkWeightPerAxis.modify;
}

void IKComponent.Joint.fkWeightPerAxis.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = v1[1];
  uint64_t v2 = v1[2];
  *(void *)(v2 + 48) = *v1;
  *(void *)(v2 + 56) = v3;
  *(unsigned char *)(v2 + 64) = 0;
  free(v1);
}

double IKComponent.Joint.rotationStiffness.getter()
{
  if ((*(unsigned char *)(v0 + 96) & 1) == 0) {
    return *(double *)(v0 + 80);
  }
  REIkParametersComponentJointGetRotationStiffness();
  return result;
}

void IKComponent.Joint.rotationStiffness.setter(__n128 a1)
{
  v1[5] = a1;
  v1[6].n128_u8[0] = 0;
}

void (*IKComponent.Joint.rotationStiffness.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x18uLL);
  *a1 = v3;
  v3[2] = v1;
  if (*(unsigned char *)(v1 + 96)) {
    REIkParametersComponentJointGetRotationStiffness();
  }
  else {
    long long v4 = *(_OWORD *)(v1 + 80);
  }
  *(_OWORD *)uint64_t v3 = v4;
  return IKComponent.Joint.rotationStiffness.modify;
}

void IKComponent.Joint.rotationStiffness.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = v1[1];
  uint64_t v2 = v1[2];
  *(void *)(v2 + 80) = *v1;
  *(void *)(v2 + 88) = v3;
  *(unsigned char *)(v2 + 96) = 0;
  free(v1);
}

uint64_t IKComponent.Joint.deinit()
{
  return v0;
}

uint64_t IKComponent.Joint.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for Identifiable.id.getter in conformance IKComponent.Joint(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 104);
}

uint64_t IKComponent.Constraint.DemandOptions.rawValue.getter()
{
  return *(void *)v0;
}

RealityFoundation::IKComponent::Constraint::DemandOptions __swiftcall IKComponent.Constraint.DemandOptions.init(rawValue:)(RealityFoundation::IKComponent::Constraint::DemandOptions rawValue)
{
  v1->unint64_t rawValue = rawValue.rawValue;
  return rawValue;
}

void IKComponent.Constraint.id.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 208);
}

uint64_t IKComponent.Constraint.name.getter()
{
  return IKComponent.Joint.name.getter(MEMORY[0x263F37098]);
}

uint64_t IKComponent.Joint.name.getter(void (*a1)(void, void, void))
{
  a1(v1[2], v1[3], v1[4]);

  return String.init(cString:)();
}

uint64_t IKComponent.Constraint.jointID.getter@<X0>(uint64_t *a1@<X8>)
{
  REIkParametersComponentTaskGetTargetName();
  String.init(cString:)();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v2 = StringProtocol.hash.getter();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t IKComponent.Constraint.demands.getter@<X0>(void *a1@<X8>)
{
  uint64_t HasPositionEnabled = REIkParametersComponentTaskHasPositionEnabled();
  uint64_t result = REIkParametersComponentTaskHasRotationEnabled();
  if (result)
  {
    uint64_t result = REIkParametersComponentTaskHasLookAtEnabled();
    uint64_t v4 = 2;
    if (result) {
      uint64_t v4 = 6;
    }
    HasPositionEnabled |= v4;
  }
  *a1 = HasPositionEnabled;
  return result;
}

double IKComponent.Constraint.target.getter()
{
  if ((*(unsigned char *)(v0 + 96) & 1) == 0) {
    return *(double *)(v0 + 48);
  }
  REIkParametersComponentTaskGetTargetRotation();
  REIkParametersComponentTaskGetTargetPosition();
  double result = 0.00781250185;
  if (one-time initialization token for identity != -1)
  {
    swift_once();
    return 0.00781250185;
  }
  return result;
}

void IKComponent.Constraint.target.setter(__n128 a1, __n128 a2, __n128 a3)
{
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = a3;
  v3[6].n128_u8[0] = 0;
}

void (*IKComponent.Constraint.target.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  if (*(unsigned char *)(v1 + 96))
  {
    REIkParametersComponentTaskGetTargetRotation();
    long long v10 = v4;
    REIkParametersComponentTaskGetTargetPosition();
    long long v6 = xmmword_22830EC80;
    if (one-time initialization token for identity != -1)
    {
      long long v9 = v5;
      swift_once();
      long long v5 = v9;
      long long v6 = xmmword_22830EC80;
    }
    long long v7 = v10;
  }
  else
  {
    long long v6 = *(_OWORD *)(v1 + 48);
    long long v7 = *(_OWORD *)(v1 + 64);
    long long v5 = *(_OWORD *)(v1 + 80);
  }
  *(_OWORD *)uint64_t v3 = v6;
  *((_OWORD *)v3 + 1) = v7;
  *((_OWORD *)v3 + 2) = v5;
  return IKComponent.Constraint.target.modify;
}

void IKComponent.Constraint.target.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = v1[5];
  uint64_t v2 = v1[6];
  long long v4 = *((_OWORD *)v1 + 1);
  uint64_t v5 = v1[4];
  *(_OWORD *)(v2 + 48) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 64) = v4;
  *(void *)(v2 + 80) = v5;
  *(void *)(v2 + 88) = v3;
  *(unsigned char *)(v2 + 96) = 0;
  free(v1);
}

uint64_t key path getter for IKComponent.Constraint.offset : IKComponent.Constraint@<X0>(uint64_t result@<X0>, long long *a2@<X8>)
{
  uint64_t v3 = *(_OWORD **)result;
  if (*(unsigned char *)(*(void *)result + 160))
  {
    if (one-time initialization token for identity != -1) {
      double result = swift_once();
    }
    long long v4 = static Transform.identity;
    long long v5 = xmmword_2681C7AB0;
    long long v6 = xmmword_2681C7AC0;
  }
  else
  {
    long long v4 = v3[7];
    long long v5 = v3[8];
    long long v6 = v3[9];
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

double IKComponent.Constraint.offset.getter()
{
  if ((*(unsigned char *)(v0 + 160) & 1) == 0) {
    return *(double *)(v0 + 112);
  }
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  return *(double *)&static Transform.identity;
}

void IKComponent.Constraint.offset.setter(__n128 a1, __n128 a2, __n128 a3)
{
  v3[7] = a1;
  v3[8] = a2;
  v3[9] = a3;
  v3[10].n128_u8[0] = 0;
}

void (*IKComponent.Constraint.offset.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  if (*(unsigned char *)(v1 + 160))
  {
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    long long v4 = static Transform.identity;
    long long v5 = xmmword_2681C7AB0;
    long long v6 = xmmword_2681C7AC0;
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 112);
    long long v5 = *(_OWORD *)(v1 + 128);
    long long v6 = *(_OWORD *)(v1 + 144);
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((_OWORD *)v3 + 1) = v5;
  *((_OWORD *)v3 + 2) = v6;
  return IKComponent.Constraint.offset.modify;
}

void IKComponent.Constraint.offset.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = v1[5];
  uint64_t v2 = v1[6];
  long long v4 = *((_OWORD *)v1 + 1);
  uint64_t v5 = v1[4];
  *(_OWORD *)(v2 + 112) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 128) = v4;
  *(void *)(v2 + 144) = v5;
  *(void *)(v2 + 152) = v3;
  *(unsigned char *)(v2 + 160) = 0;
  free(v1);
}

double IKComponent.Constraint.lookAtTargetPosition.getter()
{
  if ((*(unsigned char *)(v0 + 192) & 1) == 0) {
    return *(double *)(v0 + 176);
  }
  REIkParametersComponentTaskGetLookAtTarget();
  return result;
}

void IKComponent.Constraint.lookAtTargetPosition.setter(__n128 a1)
{
  v1[11] = a1;
  v1[12].n128_u8[0] = 0;
}

void (*IKComponent.Constraint.lookAtTargetPosition.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x18uLL);
  *a1 = v3;
  v3[2] = v1;
  if (*(unsigned char *)(v1 + 192)) {
    REIkParametersComponentTaskGetLookAtTarget();
  }
  else {
    long long v4 = *(_OWORD *)(v1 + 176);
  }
  *(_OWORD *)uint64_t v3 = v4;
  return IKComponent.Constraint.lookAtTargetPosition.modify;
}

void IKComponent.Constraint.lookAtTargetPosition.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = v1[1];
  uint64_t v2 = v1[2];
  *(void *)(v2 + 176) = *v1;
  *(void *)(v2 + 184) = v3;
  *(unsigned char *)(v2 + 192) = 0;
  free(v1);
}

float IKComponent.Constraint.animationOverrideWeight.getter()
{
  if ((*(unsigned char *)(v0 + 204) & 1) == 0) {
    return *(float *)(v0 + 196);
  }
  REIkParametersComponentTaskGetPositionTargetBlendWeight();
  float v2 = v1;
  REIkParametersComopnentTaskGetRotationTargetBlendWeight();
  return v2;
}

void IKComponent.Constraint.animationOverrideWeight.setter(float a1, float a2)
{
  *(void *)(v2 + 196) = LODWORD(a1) | ((unint64_t)LODWORD(a2) << 32);
  *(unsigned char *)(v2 + 204) = 0;
}

void *(*IKComponent.Constraint.animationOverrideWeight.modify(uint64_t a1))(void *result)
{
  *(void *)(a1 + 8) = v1;
  if (*(unsigned char *)(v1 + 204))
  {
    REIkParametersComponentTaskGetPositionTargetBlendWeight();
    int v4 = v3;
    REIkParametersComopnentTaskGetRotationTargetBlendWeight();
  }
  else
  {
    int v4 = *(_DWORD *)(v1 + 196);
    int v5 = *(_DWORD *)(v1 + 200);
  }
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = v5;
  return IKComponent.Constraint.animationOverrideWeight.modify;
}

void *IKComponent.Constraint.animationOverrideWeight.modify(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 196) = *result;
  *(unsigned char *)(v1 + 204) = 0;
  return result;
}

uint64_t IKComponent.Constraint.deinit()
{
  return v0;
}

uint64_t IKComponent.Constraint.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for Identifiable.id.getter in conformance IKComponent.Constraint(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 208);
}

unint64_t IKComponent.SolverCollection.subscript.getter(void *a1)
{
  return IKComponent.SolverCollection.subscript.getter(a1, specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.SolverCollection.subscript.setter(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    int v3 = v2;
    uint64_t v4 = result;
    uint64_t v5 = *a2;
    swift_retain();
    REIkParametersComponentGetSolverNodeName();
    String.init(cString:)();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v6 = StringProtocol.hash.getter();
    swift_bridgeObjectRelease();
    if (v6 != v5) {
      return swift_release_n();
    }
    uint64_t v7 = v3[1];
    if (!*(void *)(v7 + 16)) {
      return swift_release_n();
    }
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v9 & 1) == 0) {
      return swift_release_n();
    }
    unint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
    uint64_t v11 = *v3;
    swift_retain();
    double result = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *int v3 = v11;
    if (!result || v11 < 0 || (v11 & 0x4000000000000000) != 0)
    {
      double result = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      uint64_t v11 = result;
      *int v3 = result;
    }
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v10 < *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * v10 + 0x20) = v4;
      swift_release();
      specialized Array._endMutation()();
      return swift_release_n();
    }
    __break(1u);
  }
  return result;
}

uint64_t (*IKComponent.SolverCollection.subscript.modify(uint64_t *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *a2;
  a1[1] = (uint64_t)v2;
  a1[2] = v5;
  uint64_t v6 = v2[1];
  if (!*(void *)(v6 + 16) || (v7 = *v3, uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) == 0))
  {
    uint64_t v11 = 0;
    goto LABEL_8;
  }
  double result = *(uint64_t (**)(uint64_t *, char))(*(void *)(v6 + 56) + 8 * v8);
  if ((v7 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = MEMORY[0x22A689930](result, v7);
    goto LABEL_8;
  }
  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)result < *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v11 = swift_retain();
LABEL_8:
    *a1 = v11;
    return IKComponent.SolverCollection.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t IKComponent.SolverCollection.subscript.modify(uint64_t *a1, char a2)
{
  return IKComponent.SolverCollection.subscript.modify(a1, a2, (void (*)(uint64_t, uint64_t *))IKComponent.SolverCollection.subscript.setter);
}

Swift::Bool __swiftcall IKComponent.SolverCollection.contains(_:)(RealityFoundation::IKComponent::Solver::ID a1)
{
  return IKComponent.SolverCollection.contains(_:)((void *)a1.nameHash, (void (*)(void))specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.SolverCollection.set(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  REIkParametersComponentGetSolverNodeName();
  String.init(cString:)();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v4 = StringProtocol.hash.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v1[1];
  if (!*(void *)(v5 + 16)) {
    return 0;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v7 & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v5 + 56);
  unint64_t v9 = *(void *)(v8 + 8 * result);
  uint64_t v10 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = MEMORY[0x22A689930](*(void *)(v8 + 8 * result), *v2);
    uint64_t v10 = *v2;
    goto LABEL_7;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v9 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v11 = *(void *)(v10 + 8 * v9 + 32);
  swift_retain();
LABEL_7:
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v10;
  if (!result || v10 < 0 || (v10 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    uint64_t v10 = result;
    *uint64_t v2 = result;
  }
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
  if (v9 < *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v9 + 0x20) = a1;
    swift_release();
    specialized Array._endMutation()();
    return v11;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t IKComponent.SolverCollection.startIndex.getter()
{
  return 0;
}

uint64_t IKComponent.SolverCollection.subscript.setter(uint64_t a1, unint64_t a2)
{
  return IKComponent.SolverCollection.subscript.setter(a1, a2, specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t (*IKComponent.SolverCollection.subscript.modify(uint64_t (****a1)(), unint64_t a2))()
{
  uint64_t v4 = (uint64_t (***)())malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t (**)())specialized Array.subscript.modify(v4, a2);
  return IKRig.JointCollection.subscript.modify;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IKComponent.SolverCollection(uint64_t *a1, void *a2))()
{
  uint64_t v3 = IKComponent.JointCollection.subscript.getter(*a2);
  *a1 = v3;
  a1[1] = v3;
  return destroy for CustomMaterial.Roughness;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance IKComponent.SolverCollection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance IKComponent.SolverCollection(a1, a2, a3, specialized Collection.index(_:offsetBy:limitedBy:), a4);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IKComponent.SolverCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance IKComponent.SolverCollection(a1, a2, (uint64_t (*)(void, void))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance IKComponent.SolverCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

unint64_t IKComponent.JointCollection.subscript.getter(void *a1)
{
  return IKComponent.SolverCollection.subscript.getter(a1, specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.JointCollection.subscript.setter(uint64_t result, void *a2)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 104) == *a2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = v2[1];
    if (*(void *)(v5 + 16))
    {
      uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(*a2);
      if (v7)
      {
        unint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
        uint64_t v9 = *v4;
        swift_retain_n();
        uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *uint64_t v4 = v9;
        if (!result || v9 < 0 || (v9 & 0x4000000000000000) != 0)
        {
          uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          uint64_t v9 = result;
          *uint64_t v4 = result;
        }
        if ((v8 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v8 < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v3;
          swift_release();
          specialized Array._endMutation()();
          swift_release();
          goto LABEL_12;
        }
        __break(1u);
        return result;
      }
    }
  }
LABEL_12:

  return swift_release();
}

uint64_t (*IKComponent.JointCollection.subscript.modify(uint64_t *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a2;
  a1[1] = (uint64_t)v2;
  a1[2] = v5;
  uint64_t v6 = v2[1];
  if (!*(void *)(v6 + 16) || (v7 = *v3, uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) == 0))
  {
    uint64_t v11 = 0;
    goto LABEL_8;
  }
  uint64_t result = *(uint64_t (**)(uint64_t *, char))(*(void *)(v6 + 56) + 8 * v8);
  if ((v7 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = MEMORY[0x22A689930](result, v7);
    goto LABEL_8;
  }
  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)result < *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v11 = swift_retain();
LABEL_8:
    *a1 = v11;
    return IKComponent.JointCollection.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t IKComponent.JointCollection.subscript.modify(uint64_t *a1, char a2)
{
  return IKComponent.SolverCollection.subscript.modify(a1, a2, (void (*)(uint64_t, uint64_t *))IKComponent.JointCollection.subscript.setter);
}

uint64_t IKComponent.JointCollection.subscript.getter(uint64_t a1, uint64_t a2)
{
  return IKComponent.JointCollection.subscript.getter(a1, a2, specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.JointCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IKComponent.JointCollection.subscript.setter(a1, a2, a3, IKComponent.JointCollection.subscript.setter);
}

void (*IKComponent.JointCollection.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  v7[2] = IKComponent.JointCollection.subscript.getter(a2, a3);
  return IKComponent.JointCollection.subscript.modify;
}

void IKComponent.JointCollection.subscript.modify(uint64_t a1, char a2)
{
}

Swift::Bool __swiftcall IKComponent.JointCollection.contains(_:)(RealityFoundation::IKRig::Joint::ID a1)
{
  return IKComponent.SolverCollection.contains(_:)((void *)a1.nameHash, (void (*)(void))specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.JointCollection.set(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1[1];
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(a1 + 104));
  if ((v6 & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(v3 + 56);
  unint64_t v8 = *(void *)(v7 + 8 * result);
  uint64_t v9 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = MEMORY[0x22A689930](*(void *)(v7 + 8 * result), *v2);
    uint64_t v9 = *v2;
    goto LABEL_7;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v8 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v10 = *(void *)(v9 + 8 * v8 + 32);
  swift_retain();
LABEL_7:
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v9;
  if (!result || v9 < 0 || (v9 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
    uint64_t v9 = result;
    *uint64_t v2 = result;
  }
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
  if (v8 < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = a1;
    swift_release();
    specialized Array._endMutation()();
    return v10;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t IKComponent.JointCollection.startIndex.getter()
{
  return 0;
}

uint64_t IKComponent.JointCollection.subscript.setter(uint64_t a1, unint64_t a2)
{
  return IKComponent.SolverCollection.subscript.setter(a1, a2, specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t (*IKComponent.JointCollection.subscript.modify(uint64_t (****a1)(), unint64_t a2))()
{
  uint64_t v4 = (uint64_t (***)())malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t (**)())specialized Array.subscript.modify(v4, a2);
  return IKRig.JointCollection.subscript.modify;
}

Swift::Int __swiftcall IKComponent.JointCollection.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t IKComponent.JointCollection.makeIterator()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = 0;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IKComponent.JointCollection(uint64_t *a1, void *a2))()
{
  uint64_t v3 = IKComponent.JointCollection.subscript.getter(*a2);
  *a1 = v3;
  a1[1] = v3;
  return protocol witness for Collection.subscript.read in conformance RealityRenderer.EntityCollection;
}

uint64_t protocol witness for Collection.subscript.getter in conformance IKComponent.JointCollection@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], *(void *)v2, *(void *)(v2 + 8), a2);
}

unint64_t IKComponent.ConstraintCollection.subscript.getter(void *a1)
{
  return IKComponent.SolverCollection.subscript.getter(a1, specialized __RawDictionaryStorage.find<A>(_:));
}

unint64_t IKComponent.SolverCollection.subscript.getter(void *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = v2;
  uint64_t v4 = v2[1];
  if (!*(void *)(v4 + 16)) {
    return 0;
  }
  uint64_t v5 = *v3;
  uint64_t v6 = a2(*a1);
  if ((v7 & 1) == 0) {
    return 0;
  }
  unint64_t result = *(void *)(*(void *)(v4 + 56) + 8 * v6);
  if ((v5 & 0xC000000000000001) != 0) {
    return MEMORY[0x22A689930](result, v5);
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t IKComponent.ConstraintCollection.subscript.setter(uint64_t result, void *a2)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 208) == *a2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = v2[1];
    if (*(void *)(v5 + 16))
    {
      uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(*a2);
      if (v7)
      {
        unint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
        uint64_t v9 = *v4;
        swift_retain_n();
        unint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *uint64_t v4 = v9;
        if (!result || v9 < 0 || (v9 & 0x4000000000000000) != 0)
        {
          unint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          uint64_t v9 = result;
          *uint64_t v4 = result;
        }
        if ((v8 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v8 < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v3;
          swift_release();
          specialized Array._endMutation()();
          swift_release();
          goto LABEL_12;
        }
        __break(1u);
        return result;
      }
    }
  }
LABEL_12:

  return swift_release();
}

uint64_t (*IKComponent.ConstraintCollection.subscript.modify(uint64_t *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a2;
  a1[1] = (uint64_t)v2;
  a1[2] = v5;
  uint64_t v6 = v2[1];
  if (!*(void *)(v6 + 16) || (v7 = *v3, uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) == 0))
  {
    uint64_t v11 = 0;
    goto LABEL_8;
  }
  unint64_t result = *(uint64_t (**)(uint64_t *, char))(*(void *)(v6 + 56) + 8 * v8);
  if ((v7 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = MEMORY[0x22A689930](result, v7);
    goto LABEL_8;
  }
  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if ((unint64_t)result < *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v11 = swift_retain();
LABEL_8:
    *a1 = v11;
    return IKComponent.ConstraintCollection.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t IKComponent.ConstraintCollection.subscript.modify(uint64_t *a1, char a2)
{
  return IKComponent.SolverCollection.subscript.modify(a1, a2, (void (*)(uint64_t, uint64_t *))IKComponent.ConstraintCollection.subscript.setter);
}

uint64_t IKComponent.SolverCollection.subscript.modify(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4 = *a1;
  if (a2)
  {
    uint64_t v7 = a1[2];
    uint64_t v5 = swift_retain();
    a3(v5, &v7);
    return swift_release();
  }
  else
  {
    uint64_t v7 = a1[2];
    return ((uint64_t (*)(uint64_t, uint64_t *))a3)(v4, &v7);
  }
}

uint64_t IKComponent.ConstraintCollection.subscript.getter(uint64_t a1, uint64_t a2)
{
  return IKComponent.JointCollection.subscript.getter(a1, a2, specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.JointCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v7 = StringProtocol.hash.getter();
  if (!*(void *)(v6 + 16)) {
    return 0;
  }
  uint64_t result = a3(v7);
  if ((v9 & 1) == 0) {
    return 0;
  }
  unint64_t v10 = *(void *)(*(void *)(v6 + 56) + 8 * result);
  if ((v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = MEMORY[0x22A689930](v10, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v10 < *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v11 = *(void *)(v5 + 8 * v10 + 32);
    swift_retain();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t key path getter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection@<X0>(uint64_t *a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = a2(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v7;
  return result;
}

uint64_t key path setter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void *))
{
  uint64_t v6 = *a1;
  v8[1] = *(void *)(a3 + 8);
  lazy protocol witness table accessor for type String and conformance String();
  swift_retain();
  v8[0] = StringProtocol.hash.getter();
  return a5(v6, v8);
}

uint64_t IKComponent.ConstraintCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IKComponent.JointCollection.subscript.setter(a1, a2, a3, IKComponent.ConstraintCollection.subscript.setter);
}

uint64_t IKComponent.JointCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *))
{
  v8[1] = a3;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v6 = StringProtocol.hash.getter();
  swift_bridgeObjectRelease();
  v8[0] = v6;
  return a4(a1, v8);
}

void (*IKComponent.ConstraintCollection.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  v7[2] = IKComponent.ConstraintCollection.subscript.getter(a2, a3);
  return IKComponent.ConstraintCollection.subscript.modify;
}

void IKComponent.ConstraintCollection.subscript.modify(uint64_t a1, char a2)
{
}

void IKComponent.JointCollection.subscript.modify(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  *uint64_t v4 = *(void *)(*(void *)a1 + 24);
  v4[1] = v6;
  if (a2)
  {
    lazy protocol witness table accessor for type String and conformance String();
    swift_retain();
    uint64_t v7 = StringProtocol.hash.getter();
    a3(v5, &v7);
    swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v7 = StringProtocol.hash.getter();
    a3(v5, &v7);
  }

  free(v4);
}

BOOL IKComponent.SolverCollection.isEmpty.getter()
{
  if (*v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v1 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  return v1 == 0;
}

Swift::Bool __swiftcall IKComponent.ConstraintCollection.contains(_:)(RealityFoundation::IKRig::Constraint::ID a1)
{
  return IKComponent.SolverCollection.contains(_:)((void *)a1.nameHash, (void (*)(void))specialized __RawDictionaryStorage.find<A>(_:));
}

uint64_t IKComponent.SolverCollection.contains(_:)(void *a1, void (*a2)(void))
{
  if (*(void *)(*(void *)(v2 + 8) + 16)) {
    a2(*a1);
  }
  else {
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t IKComponent.ConstraintCollection.set(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1[1];
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(a1 + 208));
  if ((v6 & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(v3 + 56);
  unint64_t v8 = *(void *)(v7 + 8 * result);
  uint64_t v9 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = MEMORY[0x22A689930](*(void *)(v7 + 8 * result), *v2);
    uint64_t v9 = *v2;
    goto LABEL_7;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v8 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v10 = *(void *)(v9 + 8 * v8 + 32);
  swift_retain();
LABEL_7:
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v9;
  if (!result || v9 < 0 || (v9 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
    uint64_t v9 = result;
    *uint64_t v2 = result;
  }
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
  if (v8 < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = a1;
    swift_release();
    specialized Array._endMutation()();
    return v10;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t IKComponent.ConstraintCollection.startIndex.getter()
{
  return 0;
}

uint64_t IKComponent.SolverCollection.count.getter()
{
  if (!(*v0 >> 62)) {
    return *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t IKComponent.SolverCollection.subscript.getter(unint64_t a1)
{
  if ((*v1 & 0xC000000000000001) != 0) {
LABEL_8:
  }
    JUMPOUT(0x22A689930);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  return swift_retain();
}

uint64_t *key path getter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *result;
  unint64_t v5 = *a2;
  if ((*result & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = MEMORY[0x22A689930](v5, v4);
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v5 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v6 = *(void *)(v4 + 8 * v5 + 32);
    uint64_t result = (uint64_t *)swift_retain();
LABEL_5:
    *a3 = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t key path setter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  unint64_t v7 = *a3;
  uint64_t v8 = *a1;
  uint64_t v9 = *a2;
  swift_retain_n();
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a2 = v9;
  if (!result || v9 < 0 || (v9 & 0x4000000000000000) != 0)
  {
    uint64_t result = a5(v9);
    uint64_t v9 = result;
    *a2 = result;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v7 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v8;
  swift_release();
  specialized Array._endMutation()();

  return swift_release();
}

uint64_t IKComponent.ConstraintCollection.subscript.setter(uint64_t a1, unint64_t a2)
{
  return IKComponent.SolverCollection.subscript.setter(a1, a2, specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t IKComponent.SolverCollection.subscript.setter(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v7;
  if (!result || v7 < 0 || (v7 & 0x4000000000000000) != 0)
  {
    uint64_t result = a3(v7);
    uint64_t v7 = result;
    *uint64_t v3 = result;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20) = a1;
  swift_release();
  specialized Array._endMutation()();

  return swift_release();
}

uint64_t (*IKComponent.ConstraintCollection.subscript.modify(uint64_t (****a1)(), unint64_t a2))()
{
  uint64_t v4 = (uint64_t (***)())malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t (**)())specialized Array.subscript.modify(v4, a2);
  return IKRig.JointCollection.subscript.modify;
}

void IKComponent.SolverCollection.Iterator.next()()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  if (!((unint64_t)*v0 >> 62))
  {
    if (v1 == *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      return;
    }
LABEL_5:
    if ((v2 & 0xC000000000000001) != 0)
    {
      MEMORY[0x22A689930](v1, v2);
      unint64_t v4 = v1 + 1;
      if (!__OFADD__(v1, 1)) {
        goto LABEL_9;
      }
    }
    else
    {
      if ((v1 & 0x8000000000000000) != 0)
      {
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
      if (v1 >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_14:
        __break(1u);
        return;
      }
      swift_retain();
      unint64_t v4 = v1 + 1;
      if (!__OFADD__(v1, 1))
      {
LABEL_9:
        v0[1] = v4;
        return;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v1 != v3) {
    goto LABEL_5;
  }
}

void protocol witness for IteratorProtocol.next() in conformance IKComponent.SolverCollection.Iterator(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3 == v6) {
      goto LABEL_3;
    }
  }
  else if (v3 == *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    uint64_t v5 = 0;
LABEL_10:
    *a1 = v5;
    return;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = MEMORY[0x22A689930](v3, v4);
    unint64_t v7 = v3 + 1;
    if (!__OFADD__(v3, 1)) {
      goto LABEL_9;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v3 < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v5 = swift_retain();
    unint64_t v7 = v3 + 1;
    if (!__OFADD__(v3, 1))
    {
LABEL_9:
      v1[1] = v7;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_15:
  __break(1u);
}

void protocol witness for Collection.endIndex.getter in conformance IKComponent.SolverCollection(uint64_t *a1@<X8>)
{
  unint64_t v3 = *v1;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *a1 = v4;
}

uint64_t protocol witness for Collection.indices.getter in conformance IKComponent.SolverCollection@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = 0;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  a1[3] = v5;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance IKComponent.SolverCollection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(void, uint64_t, void)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result = a4(*a1, a2, *a3);
  *(void *)a5 = result;
  *(unsigned char *)(a5 + 8) = v7 & 1;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IKComponent.SolverCollection(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  uint64_t v4 = a3(*v3, v3[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance IKComponent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return IKComponent.init(coreComponent:)(*a1, a2);
}

uint64_t static IKComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return IKComponent.init(coreComponent:)(*a1, a2);
}

uint64_t IKComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t Asset = REIkParametersComponentGetAsset();
  if (v3)
  {
    if (Asset) {
      BOOL v7 = *(void *)(v3 + 16) == Asset;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7) {
      goto LABEL_9;
    }
  }
  else if (Asset)
  {
LABEL_9:
    return MEMORY[0x270F1E228](v2);
  }
  if (v4 >> 62) {
    goto LABEL_68;
  }
  uint64_t v23 = v4 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v27 = v8;
  if (!v8) {
    goto LABEL_70;
  }
  while (2)
  {
    unint64_t v9 = 0;
    unint64_t v25 = v4;
    unint64_t v26 = v4 & 0xC000000000000001;
    unint64_t v22 = v4 + 32;
    uint64_t v24 = v5;
    while (1)
    {
      if (v26)
      {
        uint64_t v10 = MEMORY[0x22A689930](v9, v4);
        BOOL v11 = __OFADD__(v9, 1);
        unint64_t v12 = v9 + 1;
        if (v11) {
          goto LABEL_63;
        }
      }
      else
      {
        if (v9 >= *(void *)(v23 + 16)) {
          goto LABEL_67;
        }
        uint64_t v10 = *(void *)(v22 + 8 * v9);
        swift_retain();
        BOOL v11 = __OFADD__(v9, 1);
        unint64_t v12 = v9 + 1;
        if (v11) {
          goto LABEL_63;
        }
      }
      if ((*(unsigned char *)(v10 + 40) & 1) == 0) {
        REIkParametersComponentSolverSetMaxIterations();
      }
      if ((*(unsigned char *)(v10 + 48) & 1) == 0) {
        REIkParametersComponentSolverSetRetargetingGain();
      }
      if (*(unsigned char *)(v10 + 49) == 1) {
        REIkParametersComponentResetSolver();
      }
      unint64_t v28 = v12;
      swift_beginAccess();
      unint64_t v13 = *(void *)(v10 + 56);
      if (v13 >> 62)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v4) {
          goto LABEL_44;
        }
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14 < 1) {
          goto LABEL_65;
        }
      }
      else
      {
        uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        if (!v14) {
          goto LABEL_44;
        }
      }
      if ((v13 & 0xC000000000000001) == 0
        && (unint64_t)(v14 - 1) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_64;
      }
      for (uint64_t i = 0; i != v14; ++i)
      {
        if ((v13 & 0xC000000000000001) != 0)
        {
          unint64_t v4 = MEMORY[0x22A689930](i, v13);
        }
        else
        {
          unint64_t v4 = *(void *)(v13 + 8 * i + 32);
          swift_retain();
        }
        uint64_t v5 = *(void *)(v4 + 32);
        if ((*(unsigned char *)(v4 + 64) & 1) == 0) {
          REIkParametersComponentJointSetRetargetingGainPerAxis();
        }
        if ((*(unsigned char *)(v4 + 96) & 1) == 0) {
          REIkParametersComponentJointSetRotationStiffness();
        }
        swift_release();
      }
LABEL_44:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_beginAccess();
      unint64_t v16 = *(void *)(v10 + 72);
      if (v16 >> 62) {
        break;
      }
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      if (v17) {
        goto LABEL_46;
      }
LABEL_15:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release();
      unint64_t v9 = v28;
      uint64_t v5 = v24;
      unint64_t v4 = v25;
      if (v28 == v27) {
        goto LABEL_70;
      }
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_15;
    }
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17 >= 1)
    {
LABEL_46:
      if ((v16 & 0xC000000000000001) == 0
        && (unint64_t)(v17 - 1) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_66;
      }
      uint64_t v18 = 0;
      while (1)
      {
        if ((v16 & 0xC000000000000001) != 0)
        {
          uint64_t v19 = (unsigned char *)MEMORY[0x22A689930](v18, v16);
        }
        else
        {
          uint64_t v19 = *(unsigned char **)(v16 + 8 * v18 + 32);
          swift_retain();
        }
        if (v19[96])
        {
          if (v19[192]) {
            goto LABEL_55;
          }
        }
        else
        {
          REIkParametersComponentTaskSetTargetPosition();
          REIkParametersComponentTaskSetTargetRotation();
          if (v19[192])
          {
LABEL_55:
            if ((v19[204] & 1) == 0) {
              goto LABEL_59;
            }
            goto LABEL_49;
          }
        }
        REIkParametersComponentTaskSetLookAtTarget();
        if ((v19[204] & 1) == 0)
        {
LABEL_59:
          REIkParametersComponentTaskSetPositionTargetBlendWeight();
          REIkParametersComponentTaskSetRotationTargetBlendWeight();
        }
LABEL_49:
        swift_release();
        if (v17 == ++v18) {
          goto LABEL_15;
        }
      }
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    uint64_t v23 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
LABEL_70:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease_n();
}

void protocol witness for static Component.__coreComponentType.getter in conformance IKComponent(_DWORD *a1@<X8>)
{
  *a1 = 5008;
}

void static IKComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5008;
}

unint64_t lazy protocol witness table accessor for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID;
  if (!lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID;
  if (!lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Solver.ID and conformance IKComponent.Solver.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions;
  if (!lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions;
  if (!lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions;
  if (!lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions;
  if (!lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.Constraint.DemandOptions and conformance IKComponent.Constraint.DemandOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKComponent.SolverCollection and conformance IKComponent.SolverCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type IKComponent.SolverCollection and conformance IKComponent.SolverCollection;
  if (!lazy protocol witness table cache variable for type IKComponent.SolverCollection and conformance IKComponent.SolverCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.SolverCollection and conformance IKComponent.SolverCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IKComponent.SolverCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<IKComponent.SolverCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IKComponent.SolverCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IKComponent.SolverCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<IKComponent.SolverCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IKComponent.SolverCollection>);
}

unint64_t lazy protocol witness table accessor for type IKComponent.SolverCollection.Iterator and conformance IKComponent.SolverCollection.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type IKComponent.SolverCollection.Iterator and conformance IKComponent.SolverCollection.Iterator;
  if (!lazy protocol witness table cache variable for type IKComponent.SolverCollection.Iterator and conformance IKComponent.SolverCollection.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.SolverCollection.Iterator and conformance IKComponent.SolverCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKComponent.JointCollection and conformance IKComponent.JointCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type IKComponent.JointCollection and conformance IKComponent.JointCollection;
  if (!lazy protocol witness table cache variable for type IKComponent.JointCollection and conformance IKComponent.JointCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.JointCollection and conformance IKComponent.JointCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IKComponent.JointCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<IKComponent.JointCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IKComponent.JointCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IKComponent.JointCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<IKComponent.JointCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IKComponent.JointCollection>);
}

unint64_t lazy protocol witness table accessor for type IKComponent.JointCollection.Iterator and conformance IKComponent.JointCollection.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type IKComponent.JointCollection.Iterator and conformance IKComponent.JointCollection.Iterator;
  if (!lazy protocol witness table cache variable for type IKComponent.JointCollection.Iterator and conformance IKComponent.JointCollection.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.JointCollection.Iterator and conformance IKComponent.JointCollection.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IKComponent.ConstraintCollection and conformance IKComponent.ConstraintCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type IKComponent.ConstraintCollection and conformance IKComponent.ConstraintCollection;
  if (!lazy protocol witness table cache variable for type IKComponent.ConstraintCollection and conformance IKComponent.ConstraintCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.ConstraintCollection and conformance IKComponent.ConstraintCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in IKComponent.ConstraintCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<IKComponent.ConstraintCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<IKComponent.ConstraintCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in IKComponent.ConstraintCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<IKComponent.ConstraintCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<IKComponent.ConstraintCollection>);
}

unint64_t lazy protocol witness table accessor for type IKComponent.ConstraintCollection.Iterator and conformance IKComponent.ConstraintCollection.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type IKComponent.ConstraintCollection.Iterator and conformance IKComponent.ConstraintCollection.Iterator;
  if (!lazy protocol witness table cache variable for type IKComponent.ConstraintCollection.Iterator and conformance IKComponent.ConstraintCollection.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKComponent.ConstraintCollection.Iterator and conformance IKComponent.ConstraintCollection.Iterator);
  }
  return result;
}

uint64_t sub_2280D46D0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(*(void *)result + 40) == 1)
  {
    unint64_t result = REIkParametersComponentSolverGetMaxIterations();
    uint64_t v3 = result;
  }
  else
  {
    uint64_t v3 = *(void *)(*(void *)result + 32);
  }
  *a2 = v3;
  return result;
}

void *sub_2280D4718(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(v2 + 32) = *result;
  *(unsigned char *)(v2 + 40) = 0;
  return result;
}

uint64_t sub_2280D472C@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  if (*(unsigned char *)(*(void *)result + 48)) {
    unint64_t result = REIkParametersComponentSolverGetRetargetingGain();
  }
  else {
    int v3 = *(_DWORD *)(*(void *)result + 44);
  }
  *a2 = v3;
  return result;
}

_DWORD *sub_2280D476C(_DWORD *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(v2 + 44) = *result;
  *(unsigned char *)(v2 + 48) = 0;
  return result;
}

void sub_2280D4790(_OWORD *a1@<X8>)
{
  *(float32x2_t *)&long long v2 = IKComponent.Joint.fkWeightPerAxis.getter();
  *a1 = v2;
}

void *sub_2280D47BC(void *result, uint64_t *a2)
{
  uint64_t v2 = result[1];
  uint64_t v3 = *a2;
  *(void *)(v3 + 48) = *result;
  *(void *)(v3 + 56) = v2;
  *(unsigned char *)(v3 + 64) = 0;
  return result;
}

uint64_t sub_2280D47D0@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  if (*(unsigned char *)(*(void *)result + 96)) {
    unint64_t result = REIkParametersComponentJointGetRotationStiffness();
  }
  else {
    long long v3 = *(_OWORD *)(*(void *)result + 80);
  }
  *a2 = v3;
  return result;
}

void *sub_2280D481C(void *result, uint64_t *a2)
{
  uint64_t v2 = result[1];
  uint64_t v3 = *a2;
  *(void *)(v3 + 80) = *result;
  *(void *)(v3 + 88) = v2;
  *(unsigned char *)(v3 + 96) = 0;
  return result;
}

void sub_2280D4830(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = IKComponent.Constraint.target.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
}

__n128 sub_2280D4860(uint64_t a1, uint64_t *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = *a2;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 64) = v3;
  *(void *)(v6 + 80) = v5;
  *(void *)(v6 + 88) = v4;
  *(unsigned char *)(v6 + 96) = 0;
  return result;
}

__n128 sub_2280D4880(uint64_t a1, uint64_t *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = *a2;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 128) = v3;
  *(void *)(v6 + 144) = v5;
  *(void *)(v6 + 152) = v4;
  *(unsigned char *)(v6 + 160) = 0;
  return result;
}

uint64_t sub_2280D489C@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  if (*(unsigned char *)(*(void *)result + 192)) {
    __n128 result = REIkParametersComponentTaskGetLookAtTarget();
  }
  else {
    long long v3 = *(_OWORD *)(*(void *)result + 176);
  }
  *a2 = v3;
  return result;
}

void *sub_2280D48E8(void *result, uint64_t *a2)
{
  uint64_t v2 = result[1];
  uint64_t v3 = *a2;
  *(void *)(v3 + 176) = *result;
  *(void *)(v3 + 184) = v2;
  *(unsigned char *)(v3 + 192) = 0;
  return result;
}

void sub_2280D48FC(uint64_t a1@<X8>)
{
  *(float *)a1 = IKComponent.Constraint.animationOverrideWeight.getter();
  *(_DWORD *)(a1 + 4) = v2;
}

void *sub_2280D4928(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)(v2 + 196) = *result;
  *(unsigned char *)(v2 + 204) = 0;
  return result;
}

uint64_t sub_2280D493C@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_get_21Tm_0(a1, a2, (uint64_t (*)(uint64_t *))IKComponent.SolverCollection.subscript.getter, a3);
}

uint64_t sub_2280D4954(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_set_22Tm_0(a1, a2, a3, a4, IKComponent.SolverCollection.subscript.setter);
}

uint64_t sub_2280D496C()
{
  return 0;
}

uint64_t *sub_2280D497C@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3);
}

uint64_t sub_2280D4994(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  return key path setter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3, a4, specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t sub_2280D49C0()
{
  return 0;
}

uint64_t sub_2280D49D0@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_get_21Tm_0(a1, a2, (uint64_t (*)(uint64_t *))IKComponent.JointCollection.subscript.getter, a3);
}

uint64_t keypath_get_21Tm_0@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t *)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *a2;
  long long v8 = *a1;
  uint64_t v7 = v5;
  uint64_t result = a3(&v7);
  *a4 = result;
  return result;
}

uint64_t sub_2280D4A34(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_set_22Tm_0(a1, a2, a3, a4, IKComponent.JointCollection.subscript.setter);
}

uint64_t sub_2280D4A4C()
{
  return 0;
}

uint64_t sub_2280D4A5C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return key path getter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection(a1, IKComponent.JointCollection.subscript.getter, a2);
}

uint64_t sub_2280D4A88(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection(a1, a2, a3, a4, IKComponent.JointCollection.subscript.setter);
}

uint64_t sub_2280D4AB4()
{
  return 0;
}

uint64_t *sub_2280D4AC4@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3);
}

uint64_t sub_2280D4ADC(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  return key path setter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3, a4, specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t sub_2280D4B08()
{
  return 0;
}

uint64_t sub_2280D4B18@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return keypath_get_21Tm_0(a1, a2, (uint64_t (*)(uint64_t *))IKComponent.ConstraintCollection.subscript.getter, a3);
}

uint64_t sub_2280D4B30(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return keypath_set_22Tm_0(a1, a2, a3, a4, IKComponent.ConstraintCollection.subscript.setter);
}

uint64_t keypath_set_22Tm_0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *))
{
  uint64_t v8 = *a3;
  uint64_t v6 = swift_retain();
  return a5(v6, &v8);
}

uint64_t sub_2280D4B90()
{
  return 0;
}

uint64_t sub_2280D4BA0@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return key path getter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection(a1, IKComponent.ConstraintCollection.subscript.getter, a2);
}

uint64_t sub_2280D4BCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for IKComponent.JointCollection.subscript(_:) : IKComponent.JointCollection(a1, a2, a3, a4, IKComponent.ConstraintCollection.subscript.setter);
}

uint64_t sub_2280D4BF8()
{
  return 0;
}

uint64_t *sub_2280D4C08@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3);
}

uint64_t sub_2280D4C20(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  return key path setter for IKComponent.SolverCollection.subscript(_:) : IKComponent.SolverCollection(a1, a2, a3, a4, specialized _ArrayBuffer._consumeAndCreateNew());
}

uint64_t sub_2280D4C4C()
{
  return 0;
}

uint64_t destroy for IKComponent()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for IKComponent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IKComponent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IKComponent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for IKComponent()
{
  return &type metadata for IKComponent;
}

uint64_t type metadata accessor for IKComponent.Solver()
{
  return self;
}

uint64_t method lookup function for IKComponent.Solver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IKComponent.Solver);
}

uint64_t dispatch thunk of IKComponent.Solver.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of IKComponent.Solver.maxIterations.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of IKComponent.Solver.maxIterations.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of IKComponent.Solver.maxIterations.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of IKComponent.Solver.globalFkWeight.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of IKComponent.Solver.globalFkWeight.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of IKComponent.Solver.globalFkWeight.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of IKComponent.Solver.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of IKComponent.Solver.joints.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of IKComponent.Solver.joints.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of IKComponent.Solver.joints.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of IKComponent.Solver.constraints.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of IKComponent.Solver.constraints.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of IKComponent.Solver.constraints.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

ValueMetadata *type metadata accessor for IKComponent.Solver.ID()
{
  return &type metadata for IKComponent.Solver.ID;
}

uint64_t type metadata accessor for IKComponent.Joint()
{
  return self;
}

uint64_t method lookup function for IKComponent.Joint(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IKComponent.Joint);
}

uint64_t dispatch thunk of IKComponent.Joint.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of IKComponent.Joint.fkWeightPerAxis.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of IKComponent.Joint.fkWeightPerAxis.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of IKComponent.Joint.fkWeightPerAxis.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of IKComponent.Joint.rotationStiffness.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of IKComponent.Joint.rotationStiffness.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of IKComponent.Joint.rotationStiffness.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t type metadata accessor for IKComponent.Constraint()
{
  return self;
}

uint64_t method lookup function for IKComponent.Constraint(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IKComponent.Constraint);
}

uint64_t dispatch thunk of IKComponent.Constraint.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of IKComponent.Constraint.jointID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of IKComponent.Constraint.demands.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of IKComponent.Constraint.target.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of IKComponent.Constraint.target.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of IKComponent.Constraint.target.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of IKComponent.Constraint.offset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of IKComponent.Constraint.offset.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of IKComponent.Constraint.offset.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of IKComponent.Constraint.lookAtTargetPosition.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of IKComponent.Constraint.lookAtTargetPosition.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of IKComponent.Constraint.lookAtTargetPosition.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of IKComponent.Constraint.animationOverrideWeight.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of IKComponent.Constraint.animationOverrideWeight.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of IKComponent.Constraint.animationOverrideWeight.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

ValueMetadata *type metadata accessor for IKComponent.Constraint.DemandOptions()
{
  return &type metadata for IKComponent.Constraint.DemandOptions;
}

ValueMetadata *type metadata accessor for IKComponent.SolverCollection()
{
  return &type metadata for IKComponent.SolverCollection;
}

ValueMetadata *type metadata accessor for IKComponent.SolverCollection.Iterator()
{
  return &type metadata for IKComponent.SolverCollection.Iterator;
}

ValueMetadata *type metadata accessor for IKComponent.JointCollection()
{
  return &type metadata for IKComponent.JointCollection;
}

ValueMetadata *type metadata accessor for IKComponent.JointCollection.Iterator()
{
  return &type metadata for IKComponent.JointCollection.Iterator;
}

ValueMetadata *type metadata accessor for IKComponent.ConstraintCollection()
{
  return &type metadata for IKComponent.ConstraintCollection;
}

ValueMetadata *type metadata accessor for IKComponent.ConstraintCollection.Iterator()
{
  return &type metadata for IKComponent.ConstraintCollection.Iterator;
}

uint64_t __RKEntityLookAtTrigger.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(unsigned char *)(result + 18) = 0;
  return result;
}

uint64_t __RKEntityLookAtTrigger.init()()
{
  uint64_t result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 18) = 0;
  return result;
}

uint64_t __RKEntityLookAtTrigger.deinit()
{
  return v0;
}

uint64_t __RKEntityLookAtTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEntityLookAtTrigger()
{
  return self;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_SSs5NeverOTg504_s17d13Foundation26_f1_g9Resource_i18C4withAcA01_c1_d11h15_F0V_tKcfcSSAF5J54Vcfu_33_194c66f652b1d54667754fca0031e5efAHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v4 += 10;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_s6UInt32Vs5NeverOTg504_s17d13Foundation28_f1_gh1_i2V5j3Vs6k11VIgnd_AeGs5l62OIegnrzr_TR04_s17a13Foundation26_c1_d9Resource_f18C4withAcA01_W42_d11e12_F0V_tKcfcs6h4VAF5G5VcfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v8;
    uint64_t v4 = (unsigned char *)(a1 + 56);
    do
    {
      if (*v4)
      {
        LODWORD(v5) = -1;
      }
      else
      {
        unint64_t v5 = *((void *)v4 - 1);
        if ((v5 & 0x8000000000000000) != 0 || HIDWORD(v5))
        {
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
      }
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 16);
      unint64_t v6 = *(void *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v7 + 1;
      *(_DWORD *)(result + 4 * v7 + 32) = v5;
      v4 += 80;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_So5RESRTas5NeverOTg504_s17d13Foundation26_f1_g9Resource_i18C4withAcA01_c1_d11h22_F0V_tKcfcSo5RESRTaAF5J54Vcfu0_33_5265ce75bb004bfc7d633de337cec3d7AjHTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v14;
    uint64_t v4 = (long long *)(a1 + 96);
    do
    {
      long long v5 = *(v4 - 2);
      long long v6 = *(v4 - 1);
      long long v7 = *v4;
      uint64_t v15 = result;
      unint64_t v9 = *(void *)(result + 16);
      unint64_t v8 = *(void *)(result + 24);
      if (v9 >= v8 >> 1)
      {
        long long v12 = *(v4 - 1);
        long long v13 = *(v4 - 2);
        long long v11 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        long long v7 = v11;
        long long v6 = v12;
        long long v5 = v13;
        uint64_t result = v15;
      }
      *(void *)(result + 16) = v9 + 1;
      uint64_t v10 = (_OWORD *)(result + 48 * v9);
      v10[2] = v5;
      v10[3] = v6;
      v10[4] = v7;
      v4 += 5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *static _Proto_SkeletonResource_v1.__fromCore(_:)(uint64_t a1)
{
  if ((id)REAssetGetSwiftObject())
  {
    type metadata accessor for _Proto_SkeletonResource_v1();
    int64_t v2 = (void *)swift_dynamicCastClass();
    if (v2) {
      return v2;
    }
    swift_unknownObjectRelease();
  }
  type metadata accessor for _Proto_SkeletonResource_v1();
  int64_t v2 = (void *)swift_allocObject();
  v2[2] = a1;
  uint64_t Name = RESkeletonAssetGetName();
  if (Name) {
    uint64_t Name = String.init(cString:)();
  }
  else {
    unint64_t v4 = 0xE000000000000000;
  }
  v2[3] = Name;
  v2[4] = v4;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t type metadata accessor for _Proto_SkeletonResource_v1()
{
  return self;
}

uint64_t _Proto_SkeletonResource_v1.deinit()
{
  if (*(void *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _Proto_SkeletonResource_v1.__deallocating_deinit()
{
  if (*(void *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

int64_t _Proto_SkeletonResource_v1.definition.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = swift_retain();

  return _Proto_SkeletonDefinition_v1.init(from:)(v2, a1);
}

uint64_t _Proto_SkeletonResource_v1.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _Proto_SkeletonResource_v1.__allocating_init(with:)(uint64_t *a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v1 = (void *)a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v20);
  uint64_t v5 = v21;
  uint64_t v6 = v22;
  __swift_project_boxed_opaque_existential_1(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_SSs5NeverOTg504_s17d13Foundation26_f1_g9Resource_i18C4withAcA01_c1_d11h15_F0V_tKcfcSSAF5J54Vcfu_33_194c66f652b1d54667754fca0031e5efAHSSTf3nnnpk_nTf1cn_n(v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_s6UInt32Vs5NeverOTg504_s17d13Foundation28_f1_gh1_i2V5j3Vs6k11VIgnd_AeGs5l62OIegnrzr_TR04_s17a13Foundation26_c1_d9Resource_f18C4withAcA01_W42_d11e12_F0V_tKcfcs6h4VAF5G5VcfU_Tf3nnnpf_nTf1cn_n(v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = specialized Array.init(repeating:count:)(*(void *)(v3 + 16), *(__n128 *)zmmword_22830EC90, *(__n128 *)&zmmword_22830EC90[16], *(__n128 *)&zmmword_22830EC90[32], *(__n128 *)&zmmword_22830EC90[48]);
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_So5RESRTas5NeverOTg504_s17d13Foundation26_f1_g9Resource_i18C4withAcA01_c1_d11h22_F0V_tKcfcSo5RESRTaAF5J54Vcfu0_33_5265ce75bb004bfc7d633de337cec3d7AjHTf3nnnpk_nTf1cn_n(v12);
  swift_bridgeObjectRelease();
  specialized static MeshResource.Skeleton.makeSkeletonDef(id:jointNames:parentIndices:inverseBindPoseMatrices:restPoseTransforms:)(v2, (uint64_t)v1, v8, v10, v11, v13);
  v20[0] = 0;
  uint64_t result = RESkeletonDefinitionValidate();
  if (result)
  {
    Skeletonuint64_t Asset = RESkeletonDefinitionCreateSkeletonAsset();
    RERelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (SkeletonAsset)
    {
      type metadata accessor for _Proto_SkeletonResource_v1();
      uint64_t v1 = (void *)swift_allocObject();
      v1[2] = SkeletonAsset;
      uint64_t Name = RESkeletonAssetGetName();
      if (Name) {
        uint64_t Name = String.init(cString:)();
      }
      else {
        unint64_t v17 = 0xE000000000000000;
      }
      v1[3] = Name;
      v1[4] = v17;
      RERetain();
      REAssetSetSwiftObject();
    }
    else
    {
      lazy protocol witness table accessor for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError();
      swift_allocError();
      swift_willThrow();
    }
    return (uint64_t)v1;
  }
  uint64_t v18 = v20[0];
  if (v20[0])
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *uint64_t v19 = v18;
    swift_willThrow();
    RERelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v1;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError()
{
  unint64_t result = lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError;
  if (!lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError;
  if (!lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_SkeletonResource_v1.SkeletonResourceGenError and conformance _Proto_SkeletonResource_v1.SkeletonResourceGenError);
  }
  return result;
}

uint64_t method lookup function for _Proto_SkeletonResource_v1(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _Proto_SkeletonResource_v1);
}

uint64_t dispatch thunk of _Proto_SkeletonResource_v1.coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of _Proto_SkeletonResource_v1.definition.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

unsigned char *storeEnumTagSinglePayload for _Proto_SkeletonResource_v1.SkeletonResourceGenError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2280D6518);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for _Proto_SkeletonResource_v1.SkeletonResourceGenError()
{
  return &type metadata for _Proto_SkeletonResource_v1.SkeletonResourceGenError;
}

void Scene.AnchorCollection.append(_:)(uint64_t a1)
{
  specialized Scene.AnchorCollection.append(_:)(a1, v1);
}

uint64_t Scene.AnchorCollection.removeNinja(_:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = specialized HasHierarchy.parent.getter();
  uint64_t result = swift_release();
  if (v2)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = REEntityGetSceneNullable();
  if (!result)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  id v5 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v5)
  {
    uint64_t v6 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    uint64_t v6 = Scene.init(coreScene:)(v4);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t result = swift_release();
  if (v7 != v8) {
    goto LABEL_12;
  }
  uint64_t result = Entity.isNinja.getter();
  if ((result & 1) == 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  return RESceneRemoveEntity();
}

void Scene.AnchorCollection.appendNinja(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (Entity.isNinja.getter())
  {
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable) {
      goto LABEL_7;
    }
    uint64_t v5 = SceneNullable;
    id v6 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v6)
    {
      uint64_t v7 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      uint64_t v7 = Scene.init(coreScene:)(v5);
    }
    uint64_t v8 = *(void *)(v7 + 16);
    uint64_t v9 = *(void *)(v3 + 16);
    swift_release();
    if (v8 != v9)
    {
LABEL_7:
      Scene.AnchorCollection.doAppend(_:)(a1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void Scene.AnchorCollection.makeIterator()(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

void Scene.AnchorCollection.doAppend(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable) {
    goto LABEL_6;
  }
  uint64_t v5 = SceneNullable;
  id v6 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v6)
  {
    uint64_t v7 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    uint64_t v7 = Scene.init(coreScene:)(v5);
  }
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v3 + 16);
  swift_release();
  if (v8 != v9)
  {
LABEL_6:
    RESceneAddEntity();
    if (swift_conformsToProtocol2()) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      swift_beginAccess();
      uint64_t v11 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v11[2])
        {
          swift_retain();
          id v12 = (id)RFServiceManagerGetAnchorManagementService();
          if (v12)
          {
            uint64_t v13 = v12;
            RFAnchorManagementUpdateAnchoringInScene();
          }
          swift_release();
        }
      }
    }
    Entity.updateSceneGravityIfNeeded()();
  }
}

uint64_t Scene.AnchorCollection.startIndex.getter()
{
  return 0;
}

uint64_t Scene.AnchorCollection.endIndex.getter()
{
  EntitiesArray = (char *)RESceneGetEntitiesArray();
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v1);
  uint64_t v37 = *(void *)(v2 + 16);
  if (!v37)
  {
    uint64_t v35 = 0;
    uint64_t v5 = 0;
LABEL_42:
    swift_release();
    uint64_t result = v35 - v5;
    if (!__OFSUB__(v35, v5)) {
      return result;
    }
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v3 = one-time initialization token for customComponentTypeObjectIdToHandles;
  swift_retain();
  if (v3 != -1) {
LABEL_49:
  }
    swift_once();
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  id v6 = &static SceneManager.customComponentTypeObjectIdToHandles;
  while (1)
  {
    uint64_t v8 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    swift_beginAccess();
    if (*(void *)(*v6 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
      if (v9)
      {
        swift_endAccess();
        goto LABEL_22;
      }
    }
    uint64_t v10 = v2;
    swift_endAccess();
    uint64_t v2 = (uint64_t)&type metadata for __EntityInfoComponent;
    uint64_t v11 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent, 0, 0);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v6;
    long long v38 = (void *)*v6;
    uint64_t v14 = v6;
    *id v6 = 0x8000000000000000;
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
    uint64_t v17 = *(void *)(v13 + 16);
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      goto LABEL_45;
    }
    uint64_t v2 = v15;
    if (*(void *)(v13 + 24) >= v19)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v22 = v38;
        if ((v15 & 1) == 0) {
          goto LABEL_19;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v22 = v38;
        if ((v2 & 1) == 0) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, isUniquelyReferenced_nonNull_native);
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
      if ((v2 & 1) != (v21 & 1)) {
        goto LABEL_52;
      }
      unint64_t v16 = v20;
      uint64_t v22 = v38;
      if ((v2 & 1) == 0)
      {
LABEL_19:
        v22[(v16 >> 6) + 8] |= 1 << v16;
        uint64_t v23 = 8 * v16;
        *(void *)(v22[6] + v23) = &type metadata for __EntityInfoComponent;
        *(void *)(v22[7] + v23) = v11;
        uint64_t v24 = v22[2];
        BOOL v7 = __OFADD__(v24, 1);
        uint64_t v25 = v24 + 1;
        if (v7) {
          goto LABEL_47;
        }
        v22[2] = v25;
        goto LABEL_21;
      }
    }
    *(void *)(v22[7] + 8 * v16) = v11;
LABEL_21:
    static SceneManager.customComponentTypeObjectIdToHandles = (uint64_t)v22;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v2 = v10;
    id v6 = v14;
LABEL_22:
    if (REEntityGetCustomComponent()) {
      break;
    }
LABEL_4:
    BOOL v7 = __OFADD__(v5++, 1);
    if (v7) {
      goto LABEL_46;
    }
LABEL_5:
    ++v4;
    if (v8 == v37)
    {
      swift_release();
      uint64_t v35 = *(void *)(v2 + 16);
      goto LABEL_42;
    }
  }
  uint64_t Object = RECustomComponentGetObject();
  if (!Object) {
    goto LABEL_51;
  }
  uint64_t v27 = *(unsigned __int8 **)Object;
  if (*(void *)(Object + 8)) {
    BOOL v28 = 1;
  }
  else {
    BOOL v28 = v27 == 0;
  }
  if (v28)
  {
    swift_retain();
  }
  else
  {
    int v29 = *v27;
    uint64_t v30 = String.init(utf8String:)();
    if (v31) {
      Swift::Int v32 = v30;
    }
    else {
      Swift::Int v32 = 0;
    }
    if (v31) {
      unint64_t v33 = v31;
    }
    else {
      unint64_t v33 = 0xE000000000000000;
    }
    uint64_t v27 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v29 == 42, v32, v33);
    swift_bridgeObjectRelease();
    type metadata accessor for IntrospectionDataCleanupHelper();
    *(void *)(swift_allocObject() + 16) = v27;
  }
  if (v27)
  {
    int v34 = *v27;
    swift_release();
    if (v34 != 42) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall Scene.AnchorCollection.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t Scene.AnchorCollection.subscript.getter(uint64_t a1)
{
  EntitiesArray = (char *)RESceneGetEntitiesArray();
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v2);
  uint64_t v40 = *(void *)(v3 + 16);
  uint64_t v41 = v3;
  if (!v40)
  {
LABEL_60:
    swift_release();
    goto LABEL_61;
  }
  if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
LABEL_56:
  }
    swift_once();
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v7 = *(void *)(v41 + 8 * v4 + 32);
    swift_beginAccess();
    if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v8 & 1) == 0))
    {
      swift_endAccess();
      uint64_t v9 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = static SceneManager.customComponentTypeObjectIdToHandles;
      uint64_t v42 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
      uint64_t v14 = *(void *)(v11 + 16);
      BOOL v15 = (v12 & 1) == 0;
      uint64_t v16 = v14 + v15;
      if (__OFADD__(v14, v15)) {
        goto LABEL_53;
      }
      char v17 = v12;
      if (*(void *)(v11 + 24) < v16)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
        unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
        if ((v17 & 1) != (v19 & 1)) {
          goto LABEL_62;
        }
        unint64_t v13 = v18;
        unint64_t v20 = (void *)v42;
        if ((v17 & 1) == 0) {
          goto LABEL_12;
        }
LABEL_16:
        *(void *)(v20[7] + 8 * v13) = v9;
LABEL_17:
        static SceneManager.customComponentTypeObjectIdToHandles = (uint64_t)v20;
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v20 = (void *)v42;
        if (v12) {
          goto LABEL_16;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        unint64_t v20 = (void *)v42;
        if (v17) {
          goto LABEL_16;
        }
      }
LABEL_12:
      v20[(v13 >> 6) + 8] |= 1 << v13;
      uint64_t v21 = 8 * v13;
      *(void *)(v20[6] + v21) = &type metadata for __EntityInfoComponent;
      *(void *)(v20[7] + v21) = v9;
      uint64_t v22 = v20[2];
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23) {
        goto LABEL_54;
      }
      v20[2] = v24;
      goto LABEL_17;
    }
LABEL_18:
    swift_endAccess();
    if (REEntityGetCustomComponent())
    {
      uint64_t Object = RECustomComponentGetObject();
      if (!Object) {
        goto LABEL_59;
      }
      unint64_t v26 = *(unsigned __int8 **)Object;
      if (*(void *)(Object + 8)) {
        BOOL v27 = 1;
      }
      else {
        BOOL v27 = v26 == 0;
      }
      if (v27)
      {
        swift_retain();
      }
      else
      {
        int v28 = *v26;
        uint64_t v29 = String.init(utf8String:)();
        if (v30) {
          Swift::Int v31 = v29;
        }
        else {
          Swift::Int v31 = 0;
        }
        if (v30) {
          unint64_t v32 = v30;
        }
        else {
          unint64_t v32 = 0xE000000000000000;
        }
        unint64_t v26 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v28 == 42, v31, v32);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(void *)(swift_allocObject() + 16) = v26;
      }
      if (!v26) {
        goto LABEL_58;
      }
      int v33 = *v26;
      swift_release();
      if (v33 != 42) {
        break;
      }
    }
LABEL_4:
    ++v4;
    if (v6 == v40) {
      goto LABEL_60;
    }
  }
  if (v5 != a1)
  {
    BOOL v23 = __OFADD__(v5++, 1);
    if (v23) {
      goto LABEL_55;
    }
    goto LABEL_4;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v34 = swift_dynamicCastClassUnconditional();
    goto LABEL_43;
  }
  if (REEntityIsBeingDestroyed())
  {
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v36 = specialized static Entity.entityInfoType(_:)(v7);
  if (v36)
  {
    uint64_t v35 = (*(uint64_t (**)(void))(v36 + 232))();
    uint64_t v37 = *(void *)(v35 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v37, 0);
    *(void *)(v35 + 16) = v7;
    MEMORY[0x22A68E750](v7, v35);
    swift_release();
  }
  else
  {
    uint64_t v34 = makeEntity(for:)(v7);
LABEL_43:
    uint64_t v35 = v34;
  }
  if (!swift_conformsToProtocol2()) {
    uint64_t v35 = 0;
  }
  if (!v35)
  {
    while (1)
    {
LABEL_61:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_62:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
  }
  swift_release();
  return v35;
}

uint64_t Scene.AnchorCollection.subscript.setter(void *a1, char a2, uint64_t a3)
{
  LOBYTE(v4) = a2;
  EntitiesArray = (char *)RESceneGetEntitiesArray();
  uint64_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v7);
  uint64_t v50 = *(void *)(v8 + 16);
  uint64_t v51 = v8;
  if (!v50) {
    goto LABEL_71;
  }
  uint64_t v47 = v3;
  simd_quatf v48 = a1;
  if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
LABEL_66:
  }
    swift_once();
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    uint64_t v12 = *(void *)(v51 + 8 * v9 + 32);
    swift_beginAccess();
    uint64_t v3 = (void *)static SceneManager.customComponentTypeObjectIdToHandles;
    if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v14 & 1) == 0))
    {
      swift_endAccess();
      uint64_t v4 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v3 = (void *)static SceneManager.customComponentTypeObjectIdToHandles;
      v52[0] = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
      uint64_t v18 = v3[2];
      BOOL v19 = (v16 & 1) == 0;
      uint64_t v20 = v18 + v19;
      if (__OFADD__(v18, v19)) {
        goto LABEL_58;
      }
      char v21 = v16;
      if (v3[3] < v20)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
        uint64_t v3 = (void *)v52[0];
        unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent);
        if ((v21 & 1) != (v23 & 1)) {
          goto LABEL_73;
        }
        unint64_t v17 = v22;
        uint64_t v24 = (void *)v52[0];
        if ((v21 & 1) == 0) {
          goto LABEL_18;
        }
LABEL_16:
        *(void *)(v24[7] + 8 * v17) = v4;
LABEL_20:
        static SceneManager.customComponentTypeObjectIdToHandles = (uint64_t)v24;
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v24 = (void *)v52[0];
        if (v16) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v3 = v52;
        specialized _NativeDictionary.copy()();
        uint64_t v24 = (void *)v52[0];
        if (v21) {
          goto LABEL_16;
        }
      }
LABEL_18:
      v24[(v17 >> 6) + 8] |= 1 << v17;
      uint64_t v25 = 8 * v17;
      *(void *)(v24[6] + v25) = &type metadata for __EntityInfoComponent;
      *(void *)(v24[7] + v25) = v4;
      uint64_t v26 = v24[2];
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (v27)
      {
        __break(1u);
        goto LABEL_66;
      }
      v24[2] = v28;
      goto LABEL_20;
    }
    uint64_t v4 = *(void *)(v3[7] + 8 * v13);
LABEL_21:
    swift_endAccess();
    if (REEntityGetCustomComponent())
    {
      uint64_t Object = RECustomComponentGetObject();
      if (!Object) {
        goto LABEL_68;
      }
      unint64_t v30 = *(unsigned __int8 **)Object;
      if (*(void *)(Object + 8)) {
        BOOL v31 = 1;
      }
      else {
        BOOL v31 = v30 == 0;
      }
      if (v31)
      {
        swift_retain();
      }
      else
      {
        LODWORD(v4) = *v30;
        uint64_t v32 = String.init(utf8String:)();
        if (v33) {
          Swift::Int v34 = v32;
        }
        else {
          Swift::Int v34 = 0;
        }
        if (v33) {
          uint64_t v3 = v33;
        }
        else {
          uint64_t v3 = (void *)0xE000000000000000;
        }
        unint64_t v30 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v4 == 42, v34, (unint64_t)v3);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        *(void *)(swift_allocObject() + 16) = v30;
      }
      if (!v30) {
        goto LABEL_69;
      }
      int v35 = *v30;
      swift_release();
      if (v35 != 42)
      {
        if (v10 == a3) {
          goto LABEL_42;
        }
        BOOL v27 = __OFADD__(v10++, 1);
        if (v27) {
          break;
        }
      }
    }
    ++v9;
    if (v11 == v50) {
      goto LABEL_71;
    }
  }
  __break(1u);
LABEL_42:
  swift_release();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v36 = swift_dynamicCastClassUnconditional();
    uint64_t v37 = v48;
    goto LABEL_48;
  }
  uint64_t v37 = v48;
  if (REEntityIsBeingDestroyed())
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
  }
  else
  {
    uint64_t v38 = specialized static Entity.entityInfoType(_:)();
    if (v38)
    {
      uint64_t v36 = (*(uint64_t (**)(void))(v38 + 232))();
      uint64_t v39 = *(void *)(v36 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v39, 0);
      *(void *)(v36 + 16) = v12;
      MEMORY[0x22A68E750](v12, v36);
      swift_release();
    }
    else
    {
      uint64_t v36 = makeEntity(for:)(v12);
    }
LABEL_48:
    if (*(void *)(v36 + 16) == v37[2]) {
      goto LABEL_63;
    }
    uint64_t v40 = HasHierarchy.parent.getter();
    uint64_t v41 = *(uint64_t (**)(uint64_t))(*v37 + 120);
    uint64_t v42 = swift_retain();
    uint64_t v43 = v41(v42);
    swift_release();
    if (v40)
    {
      v52[1] = v40;
      swift_retain();
      swift_retain();
      Entity.ChildCollection.doRemove(_:preservingWorldTransform:)((uint64_t)v37, 0);
      swift_release();
      swift_release();
      RESceneSetEntityAtIndex();
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
    if (!v43)
    {
      RESceneSetEntityAtIndex();
LABEL_63:
      swift_release();
      return swift_release();
    }
    if (*(void *)(v43 + 16) != *(void *)(*v47 + 16))
    {
      swift_retain();
      RESceneRemoveEntity();
      swift_release();
      goto LABEL_62;
    }
    swift_retain();
    uint64_t v44 = swift_retain();
    uint64_t v3 = (void *)specialized Collection.firstIndex(where:)(v44, (uint64_t)v37);
    LOBYTE(v4) = v45;
    swift_release();
    swift_release();
    RESceneRemoveEntity();
    if (RELinkedOnOrAfterFall2024OSVersions())
    {
      RESceneGetEntityIndexInParent();
      goto LABEL_62;
    }
LABEL_59:
    if (v4) {
      goto LABEL_72;
    }
    if ((uint64_t)v3 >= a3 || !__OFSUB__(v9, 1))
    {
LABEL_62:
      RESceneSetEntityAtIndex();
      swift_release();
      goto LABEL_63;
    }
  }
  __break(1u);
LABEL_71:
  swift_release();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_72:
  swift_release();
  swift_release();
  __break(1u);
LABEL_73:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Scene.AnchorCollection.remove(_:)()
{
  return specialized Scene.AnchorCollection.remove(_:)();
}

uint64_t (*Scene.AnchorCollection.subscript.modify(uint64_t *a1, uint64_t a2))(uint64_t a1, char a2)
{
  a1[2] = a2;
  a1[3] = v2;
  *a1 = Scene.AnchorCollection.subscript.getter(a2);
  a1[1] = v4;
  return Scene.AnchorCollection.subscript.modify;
}

uint64_t Scene.AnchorCollection.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if ((a2 & 1) == 0) {
    return Scene.AnchorCollection.subscript.setter(*(void **)a1, v2, v3);
  }
  uint64_t v4 = (void *)swift_retain();
  Scene.AnchorCollection.subscript.setter(v4, v2, v3);

  return swift_release();
}

Swift::Void __swiftcall Scene.AnchorCollection.append(contentsOf:)(Swift::OpaquePointer contentsOf)
{
  uint64_t v2 = *((void *)contentsOf._rawValue + 2);
  if (v2)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = (char *)contentsOf._rawValue + 32;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v6 = *(void *)&v4[16 * i];
      swift_retain();
      uint64_t SceneNullable = REEntityGetSceneNullable();
      if (!SceneNullable) {
        goto LABEL_39;
      }
      uint64_t v8 = SceneNullable;
      id v9 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v9)
      {
        uint64_t v10 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        uint64_t v10 = swift_allocObject();
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 40) = 0u;
        *(void *)(v10 + 56) = 0;
        swift_unknownObjectWeakInit();
        *(void *)(v10 + 104) = 0;
        *(_OWORD *)(v10 + 88) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        swift_weakInit();
        *(_OWORD *)(v10 + 216) = 0u;
        *(_OWORD *)(v10 + 200) = 0u;
        *(_OWORD *)(v10 + 184) = 0u;
        *(_OWORD *)(v10 + 168) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 136) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
        RERetain();
        *(void *)(v10 + 16) = v8;
        RESceneSetSwiftObject();
      }
      uint64_t v11 = *(void *)(v10 + 16);
      uint64_t v12 = *(void *)(v3 + 16);
      swift_release();
      if (v11 != v12)
      {
LABEL_39:
        RESceneAddEntity();
        if (swift_conformsToProtocol2()) {
          uint64_t v13 = v6;
        }
        else {
          uint64_t v13 = 0;
        }
        if (v13)
        {
          swift_beginAccess();
          char v14 = static RealityFusionSession.sharedSession;
          if (static RealityFusionSession.sharedSession)
          {
            swift_beginAccess();
            if (v14[2])
            {
              swift_retain();
              id v15 = (id)RFServiceManagerGetAnchorManagementService();
              if (v15)
              {
                char v16 = v15;
                RFAnchorManagementUpdateAnchoringInScene();
              }
              swift_release();
            }
          }
        }
        uint64_t v17 = REEntityGetSceneNullable();
        if (v17)
        {
          uint64_t v18 = v17;
          id v19 = (id)RESceneGetSwiftObject();
          type metadata accessor for Scene();
          if (v19)
          {
            swift_dynamicCastClassUnconditional();
          }
          else
          {
            uint64_t v20 = swift_allocObject();
            *(_OWORD *)(v20 + 24) = 0u;
            *(_OWORD *)(v20 + 40) = 0u;
            *(void *)(v20 + 56) = 0;
            swift_unknownObjectWeakInit();
            *(void *)(v20 + 104) = 0;
            *(_OWORD *)(v20 + 88) = 0u;
            *(_OWORD *)(v20 + 72) = 0u;
            swift_weakInit();
            *(_OWORD *)(v20 + 216) = 0u;
            *(_OWORD *)(v20 + 200) = 0u;
            *(_OWORD *)(v20 + 184) = 0u;
            *(_OWORD *)(v20 + 168) = 0u;
            *(_OWORD *)(v20 + 152) = 0u;
            *(_OWORD *)(v20 + 136) = 0u;
            *(_OWORD *)(v20 + 120) = 0u;
            RERetain();
            *(void *)(v20 + 16) = v18;
            RESceneSetSwiftObject();
          }
          swift_beginAccess();
          if (static __RKScenePhysics.registration)
          {
            RESceneGetComponentsOfCustomType();
            if (v21)
            {
              uint64_t Object = (long long *)RECustomComponentGetObject();
              if (Object)
              {
                long long v30 = *Object;
                if (RESceneGetECSManagerNullable())
                {
                  uint64_t ServiceLocator = REECSManagerGetServiceLocator();
                  if (MEMORY[0x22A6922C0](ServiceLocator))
                  {
                    REPhysicsSimulationServiceGetDefaultGravity();
                    long long v26 = v24;
                    uint64_t v25 = 0;
                    HIDWORD(v26) = v31;
                    BOOL v27 = 1;
                    while (1)
                    {
                      while (!v27)
                      {
                        if (v25 == 2) {
                          goto LABEL_34;
                        }
                        BOOL v27 = 0;
                        ++v25;
                      }
                      long long v32 = v26;
                      float v28 = *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
                      long long v33 = v30;
                      float v29 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
                      BOOL v27 = v28 == v29;
                      if (v25 == 2) {
                        break;
                      }
                      ++v25;
                    }
                    if (v28 == v29) {
                      goto LABEL_35;
                    }
LABEL_34:
                    REPhysicsSimulationServiceSetDefaultGravity();
                  }
                }
              }
            }
          }
LABEL_35:
          swift_release();
        }
      }
      swift_release();
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t Scene.AnchorCollection.append<A>(contentsOf:)()
{
  return Sequence.forEach(_:)();
}

void closure #1 in Scene.AnchorCollection.append<A>(contentsOf:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable) {
    goto LABEL_6;
  }
  uint64_t v5 = SceneNullable;
  id v6 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v6)
  {
    uint64_t v7 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    uint64_t v7 = Scene.init(coreScene:)(v5);
  }
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(a2 + 16);
  swift_release();
  if (v8 != v9)
  {
LABEL_6:
    RESceneAddEntity();
    if (swift_conformsToProtocol2()) {
      uint64_t v10 = v3;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      swift_beginAccess();
      uint64_t v11 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v11[2])
        {
          swift_retain();
          id v12 = (id)RFServiceManagerGetAnchorManagementService();
          if (v12)
          {
            uint64_t v13 = v12;
            RFAnchorManagementUpdateAnchoringInScene();
          }
          swift_release();
        }
      }
    }
    Entity.updateSceneGravityIfNeeded()();
  }
}

Swift::Void __swiftcall Scene.AnchorCollection.remove(at:)(Swift::Int at)
{
  Scene.AnchorCollection.subscript.getter(at);
  RESceneRemoveEntity();

  swift_release();
}

Swift::Void __swiftcall Scene.AnchorCollection.removeAll(keepCapacity:)(Swift::Bool keepCapacity)
{
  while (1)
  {
    uint64_t v1 = Scene.AnchorCollection.endIndex.getter();
    if (v1 < 0) {
      break;
    }
    if (!v1) {
      return;
    }
    Scene.AnchorCollection.subscript.getter(0);
    RESceneRemoveEntity();
    swift_release();
  }
  __break(1u);
}

Swift::Void __swiftcall Scene.AnchorCollection.removeAll()()
{
  while (1)
  {
    uint64_t v0 = Scene.AnchorCollection.endIndex.getter();
    if (v0 < 0) {
      break;
    }
    if (!v0) {
      return;
    }
    Scene.AnchorCollection.subscript.getter(0);
    RESceneRemoveEntity();
    swift_release();
  }
  __break(1u);
}

Swift::Void __swiftcall Scene.AnchorCollection.replaceAll(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = *v1;
  while (1)
  {
    uint64_t v36 = v3;
    uint64_t v4 = Scene.AnchorCollection.endIndex.getter();
    if (v4 < 0)
    {
      __break(1u);
      return;
    }
    if (!v4) {
      break;
    }
    uint64_t v36 = v3;
    Scene.AnchorCollection.subscript.getter(0);
    RESceneRemoveEntity();
    swift_release();
  }
  uint64_t v5 = *((void *)a1._rawValue + 2);
  if (v5)
  {
    id v6 = (char *)a1._rawValue + 32;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = *(void *)&v6[16 * i];
      swift_retain_n();
      uint64_t SceneNullable = REEntityGetSceneNullable();
      if (SceneNullable)
      {
        uint64_t v10 = SceneNullable;
        id v11 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v11)
        {
          uint64_t v12 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          uint64_t v12 = swift_allocObject();
          *(_OWORD *)(v12 + 24) = 0u;
          *(_OWORD *)(v12 + 40) = 0u;
          *(void *)(v12 + 56) = 0;
          swift_unknownObjectWeakInit();
          *(void *)(v12 + 104) = 0;
          *(_OWORD *)(v12 + 88) = 0u;
          *(_OWORD *)(v12 + 72) = 0u;
          swift_weakInit();
          *(_OWORD *)(v12 + 216) = 0u;
          *(_OWORD *)(v12 + 200) = 0u;
          *(_OWORD *)(v12 + 184) = 0u;
          *(_OWORD *)(v12 + 168) = 0u;
          *(_OWORD *)(v12 + 152) = 0u;
          *(_OWORD *)(v12 + 136) = 0u;
          *(_OWORD *)(v12 + 120) = 0u;
          RERetain();
          *(void *)(v12 + 16) = v10;
          RESceneSetSwiftObject();
        }
        uint64_t v13 = *(void *)(v12 + 16);
        uint64_t v14 = *(void *)(v3 + 16);
        swift_release();
        if (v13 == v14) {
          goto LABEL_7;
        }
      }
      RESceneAddEntity();
      if (swift_conformsToProtocol2()) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 0;
      }
      if (v15)
      {
        swift_beginAccess();
        char v16 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession)
        {
          swift_beginAccess();
          if (v16[2])
          {
            swift_retain();
            id v17 = (id)RFServiceManagerGetAnchorManagementService();
            if (v17)
            {
              uint64_t v18 = v17;
              RFAnchorManagementUpdateAnchoringInScene();
            }
            swift_release();
          }
        }
      }
      uint64_t v19 = REEntityGetSceneNullable();
      if (!v19)
      {
LABEL_7:
        swift_release_n();
      }
      else
      {
        uint64_t v20 = v19;
        id v21 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v21)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          uint64_t v22 = swift_allocObject();
          *(_OWORD *)(v22 + 24) = 0u;
          *(_OWORD *)(v22 + 40) = 0u;
          *(void *)(v22 + 56) = 0;
          swift_unknownObjectWeakInit();
          *(void *)(v22 + 104) = 0;
          *(_OWORD *)(v22 + 88) = 0u;
          *(_OWORD *)(v22 + 72) = 0u;
          swift_weakInit();
          *(_OWORD *)(v22 + 216) = 0u;
          *(_OWORD *)(v22 + 200) = 0u;
          *(_OWORD *)(v22 + 184) = 0u;
          *(_OWORD *)(v22 + 168) = 0u;
          *(_OWORD *)(v22 + 152) = 0u;
          *(_OWORD *)(v22 + 136) = 0u;
          *(_OWORD *)(v22 + 120) = 0u;
          RERetain();
          *(void *)(v22 + 16) = v20;
          RESceneSetSwiftObject();
        }
        swift_beginAccess();
        if (static __RKScenePhysics.registration)
        {
          RESceneGetComponentsOfCustomType();
          if (v23)
          {
            uint64_t Object = (long long *)RECustomComponentGetObject();
            if (Object)
            {
              long long v32 = *Object;
              if (RESceneGetECSManagerNullable())
              {
                uint64_t ServiceLocator = REECSManagerGetServiceLocator();
                if (MEMORY[0x22A6922C0](ServiceLocator))
                {
                  REPhysicsSimulationServiceGetDefaultGravity();
                  long long v28 = v26;
                  uint64_t v27 = 0;
                  HIDWORD(v28) = v33;
                  BOOL v29 = 1;
                  while (1)
                  {
                    while (!v29)
                    {
                      if (v27 == 2) {
                        goto LABEL_39;
                      }
                      BOOL v29 = 0;
                      ++v27;
                    }
                    long long v34 = v28;
                    float v30 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
                    long long v35 = v32;
                    float v31 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
                    BOOL v29 = v30 == v31;
                    if (v27 == 2) {
                      break;
                    }
                    ++v27;
                  }
                  if (v30 == v31) {
                    goto LABEL_40;
                  }
LABEL_39:
                  REPhysicsSimulationServiceSetDefaultGravity();
                }
              }
            }
          }
        }
LABEL_40:
        swift_release_n();
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t Scene.AnchorCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = *v2;
  while (1)
  {
    uint64_t v43 = v11;
    uint64_t result = Scene.AnchorCollection.endIndex.getter();
    if (result < 0)
    {
      __break(1u);
      return result;
    }
    if (!result) {
      break;
    }
    uint64_t v43 = v11;
    Scene.AnchorCollection.subscript.getter(0);
    RESceneRemoveEntity();
    swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  for (uint64_t i = v44; v44; uint64_t i = v44)
  {
    swift_retain();
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      uint64_t v15 = SceneNullable;
      id v16 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v16)
      {
        uint64_t v17 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        uint64_t v17 = swift_allocObject();
        *(_OWORD *)(v17 + 24) = 0u;
        *(_OWORD *)(v17 + 40) = 0u;
        *(void *)(v17 + 56) = 0;
        swift_unknownObjectWeakInit();
        *(void *)(v17 + 104) = 0;
        *(_OWORD *)(v17 + 88) = 0u;
        *(_OWORD *)(v17 + 72) = 0u;
        swift_weakInit();
        *(_OWORD *)(v17 + 216) = 0u;
        *(_OWORD *)(v17 + 200) = 0u;
        *(_OWORD *)(v17 + 184) = 0u;
        *(_OWORD *)(v17 + 168) = 0u;
        *(_OWORD *)(v17 + 152) = 0u;
        *(_OWORD *)(v17 + 136) = 0u;
        *(_OWORD *)(v17 + 120) = 0u;
        RERetain();
        *(void *)(v17 + 16) = v15;
        RESceneSetSwiftObject();
      }
      uint64_t v18 = *(void *)(v17 + 16);
      uint64_t v19 = *(void *)(v11 + 16);
      swift_release();
      if (v18 == v19) {
        goto LABEL_7;
      }
    }
    RESceneAddEntity();
    if (swift_conformsToProtocol2()) {
      uint64_t v20 = i;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v20)
    {
      swift_beginAccess();
      id v21 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v21[2])
        {
          swift_retain();
          id v22 = (id)RFServiceManagerGetAnchorManagementService();
          if (v22)
          {
            uint64_t v23 = v22;
            RFAnchorManagementUpdateAnchoringInScene();
          }
          swift_release();
        }
      }
    }
    uint64_t v24 = REEntityGetSceneNullable();
    if (!v24)
    {
LABEL_7:
      swift_release_n();
      goto LABEL_8;
    }
    uint64_t v25 = v24;
    id v26 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v26)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 24) = 0u;
      *(_OWORD *)(v27 + 40) = 0u;
      *(void *)(v27 + 56) = 0;
      swift_unknownObjectWeakInit();
      *(void *)(v27 + 104) = 0;
      *(_OWORD *)(v27 + 88) = 0u;
      *(_OWORD *)(v27 + 72) = 0u;
      swift_weakInit();
      *(_OWORD *)(v27 + 216) = 0u;
      *(_OWORD *)(v27 + 200) = 0u;
      *(_OWORD *)(v27 + 184) = 0u;
      *(_OWORD *)(v27 + 168) = 0u;
      *(_OWORD *)(v27 + 152) = 0u;
      *(_OWORD *)(v27 + 136) = 0u;
      *(_OWORD *)(v27 + 120) = 0u;
      RERetain();
      *(void *)(v27 + 16) = v25;
      RESceneSetSwiftObject();
    }
    swift_beginAccess();
    if (!static __RKScenePhysics.registration) {
      goto LABEL_40;
    }
    RESceneGetComponentsOfCustomType();
    if (!v28) {
      goto LABEL_40;
    }
    uint64_t Object = (long long *)RECustomComponentGetObject();
    if (!Object) {
      goto LABEL_40;
    }
    long long v39 = *Object;
    if (!RESceneGetECSManagerNullable()) {
      goto LABEL_40;
    }
    uint64_t ServiceLocator = REECSManagerGetServiceLocator();
    if (!MEMORY[0x22A6922C0](ServiceLocator)) {
      goto LABEL_40;
    }
    REPhysicsSimulationServiceGetDefaultGravity();
    long long v33 = v31;
    uint64_t v32 = 0;
    HIDWORD(v33) = HIDWORD(v40);
    BOOL v34 = 1;
    long long v40 = v33;
    while (!v34)
    {
      if (v32 == 2) {
        goto LABEL_39;
      }
      BOOL v34 = 0;
LABEL_34:
      ++v32;
    }
    long long v41 = v33;
    float v35 = *(float *)((unint64_t)&v41 & 0xFFFFFFFFFFFFFFF3 | (4 * (v32 & 3)));
    long long v42 = v39;
    float v36 = *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFF3 | (4 * (v32 & 3)));
    BOOL v34 = v35 == v36;
    if (v32 != 2) {
      goto LABEL_34;
    }
    if (v35 == v36) {
      goto LABEL_40;
    }
LABEL_39:
    REPhysicsSimulationServiceSetDefaultGravity();
LABEL_40:
    swift_release_n();
    swift_release();
LABEL_8:
    dispatch thunk of IteratorProtocol.next()();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, AssociatedTypeWitness);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Scene.AnchorCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Scene.AnchorCollection.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Scene.AnchorCollection(uint64_t *a1, uint64_t *a2))()
{
  uint64_t v3 = Scene.AnchorCollection.subscript.getter(*a2);
  a1[1] = v4;
  a1[2] = v3;
  *a1 = v3;
  return destroy for __RKEntityUUIDComponent;
}

uint64_t protocol witness for Collection.subscript.getter in conformance Scene.AnchorCollection@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *v2;
  uint64_t result = Scene.AnchorCollection.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < v4)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  a2[1] = v4;
  a2[2] = v6;
  *a2 = v5;

  return swift_retain();
}

uint64_t protocol witness for Collection.indices.getter in conformance Scene.AnchorCollection@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
  swift_retain();
  uint64_t result = Scene.AnchorCollection.endIndex.getter();
  a1[2] = result;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Scene.AnchorCollection()
{
  return Scene.AnchorCollection.endIndex.getter() == 0;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance Scene.AnchorCollection@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance Scene.AnchorCollection()
{
  uint64_t result = Scene.AnchorCollection.endIndex.getter();
  if (result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Scene.AnchorCollection()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Scene.AnchorCollection(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t Scene.AnchorCollection.description.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasAnchoring);
  uint64_t v3 = MEMORY[0x22A688E60](v1, v2);
  swift_release();
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Scene.AnchorCollection()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasAnchoring);
  uint64_t v3 = MEMORY[0x22A688E60](v1, v2);
  swift_release();
  return v3;
}

uint64_t specialized Scene.AnchorCollection.remove(_:)()
{
  return RESceneRemoveEntity();
}

void specialized Scene.AnchorCollection.append(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable) {
    goto LABEL_6;
  }
  uint64_t v5 = SceneNullable;
  id v6 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v6)
  {
    uint64_t v7 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    uint64_t v7 = Scene.init(coreScene:)(v5);
  }
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v3 + 16);
  swift_release();
  if (v8 != v9)
  {
LABEL_6:
    RESceneAddEntity();
    if (swift_conformsToProtocol2()) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      swift_beginAccess();
      uint64_t v11 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v11[2])
        {
          swift_retain();
          id v12 = (id)RFServiceManagerGetAnchorManagementService();
          if (v12)
          {
            uint64_t v13 = v12;
            RFAnchorManagementUpdateAnchoringInScene();
          }
          swift_release();
        }
      }
    }
    Entity.updateSceneGravityIfNeeded()();
  }
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  if (Scene.AnchorCollection.endIndex.getter())
  {
    while (1)
    {
      uint64_t v4 = *(void *)(Scene.AnchorCollection.subscript.getter(v3) + 16);
      uint64_t v5 = *(void *)(a2 + 16);
      uint64_t result = swift_release();
      if (v4 == v5) {
        break;
      }
      uint64_t v7 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
        return result;
      }
      ++v3;
      if (v7 == Scene.AnchorCollection.endIndex.getter()) {
        return 0;
      }
    }
  }
  return v3;
}

void partial apply for closure #1 in Scene.AnchorCollection.append<A>(contentsOf:)(uint64_t *a1)
{
  closure #1 in Scene.AnchorCollection.append<A>(contentsOf:)(a1, *(void *)(v1 + 40));
}

unint64_t lazy protocol witness table accessor for type Scene.AnchorCollection and conformance Scene.AnchorCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection;
  if (!lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Scene.AnchorCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<Scene.AnchorCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<Scene.AnchorCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Scene.AnchorCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<Scene.AnchorCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<Scene.AnchorCollection>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Scene.AnchorCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Entity.ChildCollection.IndexingIterator<Scene.AnchorCollection> and conformance Entity.ChildCollection.IndexingIterator<A>, &demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Scene.AnchorCollection>);
}

uint64_t sub_2280D916C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = Scene.AnchorCollection.subscript.getter(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2280D91AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)swift_retain();
  return Scene.AnchorCollection.subscript.setter(v5, v4, v3);
}

uint64_t sub_2280D91F0()
{
  return 0;
}

ValueMetadata *type metadata accessor for Scene.AnchorCollection()
{
  return &type metadata for Scene.AnchorCollection;
}

uint64_t GroundingShadowComponent.castsShadow.getter()
{
  return *v0;
}

uint64_t GroundingShadowComponent.castsShadow.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*GroundingShadowComponent.castsShadow.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double GroundingShadowComponent.init(castsShadow:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(unsigned char *)a2 = a1;
  *(unsigned char *)(a2 + 1) = a1;
  return result;
}

uint64_t static GroundingShadowComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  char CastsShadow = REGroundingShadowComponentGetCastsShadow();
  char ReceivesShadow = REGroundingShadowComponentGetReceivesShadow();
  int FadeBehaviorNearPhysicalObjects = REGroundingShadowComponentGetFadeBehaviorNearPhysicalObjects();
  char v5 = FadeBehaviorNearPhysicalObjects == 1;
  if (FadeBehaviorNearPhysicalObjects == 2) {
    char v5 = 2;
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(unsigned char *)a1 = CastsShadow;
  *(unsigned char *)(a1 + 1) = ReceivesShadow;
  uint64_t v8 = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  v7[0] = v5;
  return outlined assign with take of Any?((uint64_t)v7, a1 + 8);
}

uint64_t GroundingShadowComponent.__toCore(_:)()
{
  REGroundingShadowComponentSetCastsShadow();
  REGroundingShadowComponentSetReceivesShadow();
  uint64_t v1 = v0 + 8;
  outlined init with copy of Any?(v1, (uint64_t)&v6);
  uint64_t v2 = v7;
  outlined destroy of Any?((uint64_t)&v6);
  if (!v2) {
    goto LABEL_4;
  }
  uint64_t result = outlined init with copy of Any?(v1, (uint64_t)&v4);
  if (v5)
  {
    outlined init with take of Any(&v4, &v6);
    swift_dynamicCast();
LABEL_4:
    REGroundingShadowComponentSetFadeBehaviorNearPhysicalObjects();
    return RENetworkMarkComponentDirty();
  }
  __break(1u);
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance GroundingShadowComponent(_DWORD *a1@<X8>)
{
  *a1 = 4009;
}

void static GroundingShadowComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 4009;
}

uint64_t static GroundingShadowComponent.FadeBehaviorNearPhysicalObjects.__fromCore(from:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = result == 1;
  if (result == 2) {
    char v2 = 2;
  }
  *a2 = v2;
  return result;
}

uint64_t GroundingShadowComponent.init(castsShadow:receivesShadow:fadeBehaviorNearPhysicalObjects:)@<X0>(char a1@<W0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *a3;
  *(_OWORD *)(a4 + 24) = 0u;
  *(unsigned char *)a4 = a1;
  *(unsigned char *)(a4 + 1) = a2;
  *(_OWORD *)(a4 + 8) = 0u;
  uint64_t v7 = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  v6[0] = v4;
  return outlined assign with take of Any?((uint64_t)v6, a4 + 8);
}

uint64_t GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = v1 + 8;
  outlined init with copy of Any?(v3, (uint64_t)&v8);
  uint64_t v4 = v9;
  uint64_t result = outlined destroy of Any?((uint64_t)&v8);
  if (v4)
  {
    uint64_t result = outlined init with copy of Any?(v3, (uint64_t)&v6);
    if (v7)
    {
      outlined init with take of Any(&v6, &v8);
      return swift_dynamicCast();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

uint64_t GroundingShadowComponent.FadeBehaviorNearPhysicalObjects.__toCore()()
{
  return *v0;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t GroundingShadowComponent.receivesShadow.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t GroundingShadowComponent.receivesShadow.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

unsigned char *(*GroundingShadowComponent.receivesShadow.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 1);
  return RealityRenderer.CameraSettings.antialiasing.modify;
}

double GroundingShadowComponent.init(castsShadow:receivesShadow:)@<D0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(unsigned char *)a3 = a1;
  *(unsigned char *)(a3 + 1) = a2;
  return result;
}

BOOL static GroundingShadowComponent.FadeBehaviorNearPhysicalObjects.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GroundingShadowComponent.FadeBehaviorNearPhysicalObjects.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int GroundingShadowComponent.FadeBehaviorNearPhysicalObjects.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v5 = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  v4[0] = v2;
  return outlined assign with take of Any?((uint64_t)v4, v1 + 8);
}

void (*GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = v1 + 8;
  outlined init with copy of Any?(v1 + 8, (uint64_t)v3);
  uint64_t v5 = v3[3];
  outlined destroy of Any?((uint64_t)v3);
  if (!v5)
  {
    *((unsigned char *)v3 + 72) = 0;
    return GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.modify;
  }
  double result = (void (*)(uint64_t))outlined init with copy of Any?(v4, (uint64_t)(v3 + 4));
  if (v3[7])
  {
    outlined init with take of Any((_OWORD *)v3 + 2, v3);
    swift_dynamicCast();
    return GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.modify;
  }
  __break(1u);
  return result;
}

void GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(*(void *)a1 + 72);
  uint64_t v3 = *(void *)(*(void *)a1 + 64) + 8;
  v1[3] = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  *(unsigned char *)uint64_t v1 = v2;
  outlined assign with take of Any?((uint64_t)v1, v3);

  free(v1);
}

uint64_t GroundingShadowComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of GroundingShadowComponent((uint64_t)v0, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_22831E360;
  *(void *)(v8 + 32) = 0x6168537374736163;
  *(void *)(v8 + 40) = 0xEB00000000776F64;
  uint64_t v9 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v8 + 48) = *v0;
  *(void *)(v8 + 72) = v9;
  strcpy((char *)(v8 + 80), "receivesShadow");
  *(unsigned char *)(v8 + 95) = -18;
  *(unsigned char *)(v8 + 96) = v0[1];
  *(void *)(v8 + 120) = v9;
  *(void *)(v8 + 128) = 0xD00000000000001FLL;
  *(void *)(v8 + 136) = 0x8000000228358810;
  *(void *)(v8 + 168) = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.getter((unsigned char *)(v8 + 144));
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t lazy protocol witness table accessor for type GroundingShadowComponent.FadeBehaviorNearPhysicalObjects and conformance GroundingShadowComponent.FadeBehaviorNearPhysicalObjects()
{
  unint64_t result = lazy protocol witness table cache variable for type GroundingShadowComponent.FadeBehaviorNearPhysicalObjects and conformance GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  if (!lazy protocol witness table cache variable for type GroundingShadowComponent.FadeBehaviorNearPhysicalObjects and conformance GroundingShadowComponent.FadeBehaviorNearPhysicalObjects)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroundingShadowComponent.FadeBehaviorNearPhysicalObjects and conformance GroundingShadowComponent.FadeBehaviorNearPhysicalObjects);
  }
  return result;
}

uint64_t sub_2280D9A40@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 1);
  return result;
}

unsigned char *sub_2280D9A4C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 1) = *result;
  return result;
}

uint64_t sub_2280D9A58@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = GroundingShadowComponent.fadeBehaviorNearPhysicalObjects.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_2280D9A94(char *a1, uint64_t a2)
{
  char v2 = *a1;
  uint64_t v5 = &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
  v4[0] = v2;
  return outlined assign with take of Any?((uint64_t)v4, a2 + 8);
}

uint64_t destroy for GroundingShadowComponent(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  }
  return result;
}

uint64_t initializeWithCopy for GroundingShadowComponent(uint64_t a1, __int16 *a2)
{
  __int16 v5 = *a2;
  uint64_t v4 = a2 + 4;
  *(_WORD *)a1 = v5;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v7 = *((void *)a2 + 4);
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v6, v4);
  }
  else
  {
    long long v8 = v4[1];
    *uint64_t v6 = *v4;
    v6[1] = v8;
  }
  return a1;
}

uint64_t assignWithCopy for GroundingShadowComponent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  char v3 = (_OWORD *)(a1 + 8);
  uint64_t v4 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v5)
    {
      *(void *)(a1 + 32) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 8, a2 + 8);
      return a1;
    }
LABEL_7:
    long long v6 = v4[1];
    *char v3 = *v4;
    v3[1] = v6;
    return a1;
  }
  if (!v5)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t assignWithTake for GroundingShadowComponent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  v4[1] = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for GroundingShadowComponent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroundingShadowComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroundingShadowComponent()
{
  return &type metadata for GroundingShadowComponent;
}

unsigned char *storeEnumTagSinglePayload for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280D9DF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects()
{
  return &type metadata for GroundingShadowComponent.FadeBehaviorNearPhysicalObjects;
}

void *Entity.prepareAudio(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for AudioPlaybackController();
  unsigned int v4 = (void *)swift_allocObject();
  swift_weakInit();
  v4[5] = a1;
  v4[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  uint64_t v5 = REEntityGetOrAddComponentByClass();
  v4[4] = v5;
  RERetain();
  uint64_t v6 = REAudioPlayerComponentPrepareAsset();
  v4[6] = v6;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v7 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v5, v2, a1, v6);
  swift_release();
  swift_release();
  v4[2] = v7;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  return v4;
}

void *Entity.playAudio(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for AudioPlaybackController();
  unsigned int v4 = (void *)swift_allocObject();
  swift_weakInit();
  v4[5] = a1;
  v4[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  uint64_t v5 = REEntityGetOrAddComponentByClass();
  v4[4] = v5;
  RERetain();
  uint64_t v6 = REAudioPlayerComponentPrepareAsset();
  v4[6] = v6;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v7 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v5, v2, a1, v6);
  swift_release();
  swift_release();
  v4[2] = v7;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  AudioPlaybackController.play()();
  return v4;
}

Swift::Void __swiftcall Entity.stopAllAudio()()
{
  REAudioPlayerComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    MEMORY[0x22A68C6C0]();
    RENetworkMarkComponentDirty();
  }
}

void *Entity.playAudio(_:parentTimebase:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for AudioFileResource();
  uint64_t v5 = swift_dynamicCastClassUnconditional();
  type metadata accessor for AudioPlaybackController();
  uint64_t v6 = (void *)swift_allocObject();
  swift_weakInit();
  v6[5] = v5;
  v6[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  uint64_t v7 = REEntityGetOrAddComponentByClass();
  v6[4] = v7;
  RERetain();
  uint64_t v8 = REAudioPlayerComponentPrepareAsset();
  v6[6] = v8;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v9 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v7, v3, v5, v8);
  swift_release();
  swift_release();
  v6[2] = v9;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  id v10 = a2;
  REAudioPlayerComponentSetSourceClockOrTimebase();
  RENetworkMarkComponentDirty();

  AudioPlaybackController.play()();
  return v6;
}

void *Entity.prepareAudio(_:parentTimebase:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  type metadata accessor for AudioFileResource();
  uint64_t v5 = swift_dynamicCastClassUnconditional();
  type metadata accessor for AudioPlaybackController();
  uint64_t v6 = (void *)swift_allocObject();
  swift_weakInit();
  v6[5] = v5;
  v6[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  uint64_t v7 = REEntityGetOrAddComponentByClass();
  v6[4] = v7;
  RERetain();
  uint64_t v8 = REAudioPlayerComponentPrepareAsset();
  v6[6] = v8;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v9 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v7, v3, v5, v8);
  swift_release();
  swift_release();
  v6[2] = v9;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  id v10 = a2;
  REAudioPlayerComponentSetSourceClockOrTimebase();
  RENetworkMarkComponentDirty();

  return v6;
}

uint64_t static MeshResource.makeMutable()()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v6);
  uint64_t v1 = v7;
  uint64_t v2 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  uint64_t Mutable = REAssetServiceMeshAssetCreateMutable();
  if (!(id)REAssetGetSwiftObject()) {
    goto LABEL_4;
  }
  type metadata accessor for MeshResource();
  uint64_t v4 = swift_dynamicCastClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for MeshResource();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = Mutable;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v4;
}

uint64_t MeshResource.replaceAll(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    __break(1u);
    return MEMORY[0x270F1ECF8](a1, a2);
  }
  uint64_t v4 = a1;
  uint64_t result = REAssetHandleConvertToMutable();
  if (result)
  {
    a2 = *(void *)(v4 + 16);
    a1 = v3;
    return MEMORY[0x270F1ECF8](a1, a2);
  }
  return result;
}

Swift::Void __swiftcall MeshResource.replaceAll(with:instances:skeletons:)(Swift::OpaquePointer with, Swift::OpaquePointer instances, Swift::OpaquePointer skeletons)
{
  if (!*(void *)(v3 + 16)) {
    goto LABEL_53;
  }
  if (!REAssetHandleConvertToMutable()) {
    return;
  }
  if ((unint64_t)with._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)(((unint64_t)with._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v8 = MEMORY[0x263F8EE78];
  unint64_t rawValue = skeletons._rawValue;
  if (v7)
  {
    uint64_t v36 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    uint64_t v8 = v36;
    if (((unint64_t)with._rawValue & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        uint64_t v10 = *(void *)(MEMORY[0x22A689930](i, with._rawValue) + 16);
        swift_unknownObjectRelease();
        unint64_t v12 = *(void *)(v36 + 16);
        unint64_t v11 = *(void *)(v36 + 24);
        if (v12 >= v11 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        }
        *(void *)(v36 + 16) = v12 + 1;
        *(void *)(v36 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      uint64_t v13 = (char *)with._rawValue + 32;
      unint64_t v14 = *(void *)(v36 + 16);
      do
      {
        uint64_t v15 = *(void *)(*(void *)v13 + 16);
        unint64_t v16 = *(void *)(v36 + 24);
        if (v14 >= v16 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v14 + 1, 1);
        }
        *(void *)(v36 + 16) = v14 + 1;
        *(void *)(v36 + 8 * v14 + 32) = v15;
        v13 += 8;
        ++v14;
        --v7;
      }
      while (v7);
    }
    skeletons._unint64_t rawValue = rawValue;
  }
  if ((unint64_t)instances._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)(((unint64_t)instances._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v18 = MEMORY[0x263F8EE78];
  if (!v17) {
    goto LABEL_34;
  }
  uint64_t v37 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17 & ~(v17 >> 63), 0);
  if (v17 < 0) {
    goto LABEL_52;
  }
  uint64_t v18 = v37;
  if (((unint64_t)instances._rawValue & 0xC000000000000001) != 0)
  {
    for (uint64_t j = 0; j != v17; ++j)
    {
      uint64_t v20 = *(void *)(MEMORY[0x22A689930](j, instances._rawValue) + 16);
      swift_unknownObjectRelease();
      unint64_t v22 = *(void *)(v37 + 16);
      unint64_t v21 = *(void *)(v37 + 24);
      if (v22 >= v21 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      }
      *(void *)(v37 + 16) = v22 + 1;
      *(void *)(v37 + 8 * v22 + 32) = v20;
    }
  }
  else
  {
    uint64_t v23 = (char *)instances._rawValue + 32;
    unint64_t v24 = *(void *)(v37 + 16);
    do
    {
      uint64_t v25 = *(void *)(*(void *)v23 + 16);
      unint64_t v26 = *(void *)(v37 + 24);
      if (v24 >= v26 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v24 + 1, 1);
      }
      *(void *)(v37 + 16) = v24 + 1;
      *(void *)(v37 + 8 * v24 + 32) = v25;
      v23 += 8;
      ++v24;
      --v17;
    }
    while (v17);
  }
  skeletons._unint64_t rawValue = rawValue;
LABEL_34:
  int64_t v27 = *((void *)skeletons._rawValue + 2);
  uint64_t v28 = MEMORY[0x263F8EE78];
  if (v27)
  {
    uint64_t v38 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27, 0);
    uint64_t v28 = v38;
    BOOL v29 = (char *)skeletons._rawValue + 56;
    do
    {
      v30._unint64_t rawValue = MeshSkeleton.makeSkeletonDef()()._rawValue;
      unint64_t v32 = *(void *)(v38 + 16);
      unint64_t v31 = *(void *)(v38 + 24);
      if (v32 >= v31 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
      }
      *(void *)(v38 + 16) = v32 + 1;
      *(Swift::OpaquePointer *)(v38 + 8 * v32 + 32) = v30;
      v29 += 32;
      --v27;
    }
    while (v27);
  }
  if (HIDWORD(*(void *)(v8 + 16)) || HIDWORD(*(void *)(v18 + 16)) || HIDWORD(*(void *)(v28 + 16))) {
    goto LABEL_54;
  }
  REMeshAssetReplaceAllWithSkinnedModels();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v28 + 16);
  if (v33)
  {
    swift_bridgeObjectRetain();
    for (uint64_t k = 0; k != v33; ++k)
      RERelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
}

uint64_t specialized static MeshResource.makeMutable(assetService:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  uint64_t Mutable = REAssetServiceMeshAssetCreateMutable();
  if (!(id)REAssetGetSwiftObject()) {
    goto LABEL_4;
  }
  type metadata accessor for MeshResource();
  uint64_t v4 = swift_dynamicCastClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for MeshResource();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = Mutable;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  return v4;
}

char *EnvironmentResource.CreateOptions.init(samplingQuality:specularCubeDimension:compression:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  char v5 = *result;
  *(_WORD *)a5 = *a4;
  *(unsigned char *)(a5 + 2) = v5;
  *(void *)(a5 + 8) = a2;
  *(unsigned char *)(a5 + 16) = a3 & 1;
  return result;
}

Swift::OpaquePointer_optional __swiftcall EnvironmentResource.CreateOptions.toCoreImageBasedLightCompilationOptions(skyboxCubeDimension:)(Swift::Int_optional skyboxCubeDimension)
{
  Swift::Bool is_nil = skyboxCubeDimension.is_nil;
  Swift::Int value = skyboxCubeDimension.value;
  int v4 = *(unsigned __int8 *)(v1 + 2);
  uint64_t v5 = *(void *)(v1 + 8);
  char v6 = *(unsigned char *)(v1 + 16);
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  uint64_t v25 = MEMORY[0x263F8E8F8];
  LODWORD(v24) = v4;
  outlined init with take of Any(&v24, v23);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, v8, v10, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = MEMORY[0x263F8D6C8];
  if (!is_nil)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    uint64_t v25 = v13;
    *(void *)&long long v24 = value;
    outlined init with take of Any(&v24, v23);
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, v14, v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((v6 & 1) == 0)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
    uint64_t v25 = v13;
    *(void *)&long long v24 = v5;
    outlined init with take of Any(&v24, v23);
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, v18, v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v22 = (void *)v7;
  result.value._unint64_t rawValue = v22;
  result.Swift::Bool is_nil = v12;
  return result;
}

uint64_t __SkyboxMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = REMaterialParameterBlockValueCreate();
  *(void *)(a1 + 8) = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v2;
  uint64_t result = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x8000000228356E60);
  *(void *)a1 = result;
  return result;
}

uint64_t EnvironmentResource.LoadError.errorDescription.getter()
{
  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v22);
  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)&v23);
  unint64_t v1 = 0xD00000000000001ELL;
  switch(v27)
  {
    case 1:
      uint64_t v7 = v23;
      uint64_t v8 = v24;
      unint64_t v9 = v25;
      unint64_t v10 = v26;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v21[0] = 0xD000000000000011;
      v21[1] = 0x8000000228358AC0;
      v11._countAndFlagsBits = v7;
      v11._object = v8;
      String.append(_:)(v11);
      v12._countAndFlagsBits = 2112034;
      v12._object = (void *)0xE300000000000000;
      String.append(_:)(v12);
      unint64_t v5 = v9;
      unint64_t v6 = v10;
      goto LABEL_7;
    case 2:
      uint64_t v13 = v23;
      uint64_t v14 = v24;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      v21[0] = 0xD000000000000011;
      v21[1] = 0x8000000228358AC0;
      v15._countAndFlagsBits = v13;
      v15._object = v14;
      String.append(_:)(v15);
      unint64_t v5 = 10530;
      unint64_t v6 = 0xE200000000000000;
      goto LABEL_7;
    case 3:
      uint64_t v16 = v23;
      char v17 = v24;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      strcpy((char *)v21, "Extension \"");
      HIDWORD(v21[1]) = -352321536;
      v18._countAndFlagsBits = v16;
      v18._object = v17;
      String.append(_:)(v18);
      unint64_t v5 = 0x746F6E2073692022;
      unint64_t v6 = 0xEE0064696C617620;
      goto LABEL_7;
    case 4:
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      strcpy((char *)v21, "Received only ");
      HIBYTE(v21[1]) = -18;
      v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      unint64_t v5 = 0xD000000000000016;
      unint64_t v6 = 0x8000000228358AA0;
      goto LABEL_7;
    case 5:
      v21[0] = v23;
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CancellationError and conformance CancellationError((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      return Error.localizedDescription.getter();
    case 6:
      unint64_t v1 = v23;
      swift_bridgeObjectRetain();
      return v1;
    case 7:
      return v1;
    default:
      uint64_t v2 = v23;
      uint64_t v3 = v24;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      v21[0] = 0xD000000000000023;
      v21[1] = 0x800000022834FB10;
      v4._countAndFlagsBits = v2;
      v4._object = v3;
      String.append(_:)(v4);
      unint64_t v5 = 0x6E7562206E692022;
      unint64_t v6 = 0xEB00000000656C64;
LABEL_7:
      String.append(_:)(*(Swift::String *)&v5);
      return v21[0];
  }
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance EnvironmentResource.LoadError()
{
  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v2);
  return EnvironmentResource.LoadError.errorDescription.getter();
}

unint64_t EnvironmentResource.OptionError.errorDescription.getter(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0xD00000000000002CLL;
  }
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x766E692073692022;
  v5._object = (void *)0xEC00000064696C61;
  String.append(_:)(v5);
  return 0xD000000000000012;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance EnvironmentResource.OptionError()
{
  return EnvironmentResource.OptionError.errorDescription.getter(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t EnvironmentResource.coreSkyboxAsset.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t EnvironmentResource.coreSkyboxAssetRef.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(void *)(v1 + 24);
  return result;
}

uint64_t static EnvironmentResource.__compiledExtension.getter()
{
  return 0x657974696C616572;
}

uint64_t EnvironmentResource.deinit()
{
  if (*(void *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_beginAccess();
  if (*(void *)(v0 + 24))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  return v0;
}

uint64_t EnvironmentResource.__deallocating_deinit()
{
  if (*(void *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_beginAccess();
  if (*(void *)(v0 + 24))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  return swift_deallocClassInstance();
}

uint64_t static EnvironmentResource.load(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = specialized static EnvironmentResource.loadPrivate(named:in:allowsREIbl:)(a1, a2, a3, 0);
  if (!v3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 56) = type metadata accessor for EnvironmentResource();
    *(void *)(inited + 64) = &protocol witness table for EnvironmentResource;
    *(void *)(inited + 32) = v4;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v4;
}

uint64_t static EnvironmentResource.load(named:in:allowsREIbl:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v5 = specialized static EnvironmentResource.loadPrivate(named:in:allowsREIbl:)(a1, a2, a3, a4);
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 56) = type metadata accessor for EnvironmentResource();
    *(void *)(inited + 64) = &protocol witness table for EnvironmentResource;
    *(void *)(inited + 32) = v5;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v5;
}

unint64_t *static EnvironmentResource.__load(contentsOf:withName:)(unint64_t *a1)
{
  if (URL.pathExtension.getter() == 0x657974696C616572 && v3 == 0xEA0000000000766ELL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      a1 = specialized static EnvironmentResource.importResourceInternal(contentsOf:options:)((uint64_t)a1, v6);
      swift_bridgeObjectRelease();
      return a1;
    }
  }
  uint64_t v5 = specialized static EnvironmentResource.loadCompiledResource(from:)((uint64_t)a1);
  if (!v1) {
    return (unint64_t *)v5;
  }
  return a1;
}

uint64_t static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v60 + 64);
  MEMORY[0x270FA5388](v7);
  long long v55 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v56 = (char *)&v55 - v10;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char **)((char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v61 = v7;
  if (a3) {
    id v15 = a3;
  }
  else {
    id v15 = objc_msgSend(self, sel_mainBundle);
  }
  id v16 = a3;
  uint64_t v17 = specialized static __ServiceLocator.shared.getter();
  Swift::String v18 = *(void **)(*(void *)(v17 + 168) + 16);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v17 + 24);
  swift_unownedRetainStrong();
  uint64_t v20 = *(void **)(v19 + 32);
  swift_retain();
  id v59 = v18;
  id v21 = v20;
  swift_release();
  void *v14 = v21;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x263F8F0E0], v11);
  id v22 = v21;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v19)
  {
    id v58 = v22;
    long long v24 = (void *)MEMORY[0x22A688A50](v62, v63);
    unint64_t v25 = (void *)MEMORY[0x22A688A50](0x657974696C616572, 0xEA0000000000766ELL);
    unint64_t v26 = v15;
    id v27 = objc_msgSend(v15, sel_URLForResource_withExtension_, v24, v25);

    if (v27)
    {
      uint64_t v28 = v55;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v29 = v60;
      uint64_t v30 = v61;
      unint64_t v31 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
      v31(v6, v28, v61);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v6, 0, 1, v30);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v6, 1, v30) != 1)
      {
        unint64_t v32 = v56;
        v31(v56, v6, v30);
        (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v28, v32, v30);
        unint64_t v33 = (*(unsigned __int8 *)(v29 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
        uint64_t v34 = v29;
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v17;
        v31((char *)(v35 + v33), v28, v30);
        uint64_t v36 = v59;
        *(void *)(v35 + ((v8 + v33 + 7) & 0xFFFFFFFFFFFFFFF8)) = v59;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
        uint64_t v37 = swift_allocObject();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<EnvironmentResource, Error>?>);
        uint64_t v38 = swift_allocObject();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
        uint64_t v39 = swift_allocObject();
        *(_DWORD *)(v39 + 16) = 0;
        *(void *)(v38 + 16) = v39;
        *(void *)(v38 + 24) = 0;
        *(unsigned char *)(v38 + 32) = -1;
        *(void *)(v37 + 16) = v38;
        long long v40 = (void *)swift_allocObject();
        v40[2] = partial apply for closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:);
        v40[3] = v35;
        v40[4] = v38;
        v40[5] = 0;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<EnvironmentResource, Error>);
        swift_allocObject();
        swift_retain();
        id v41 = v36;
        swift_retain();
        *(void *)(v37 + 24) = Future.init(_:)();
        uint64_t v42 = specialized LoadRequest<A>.thenWaitForResourceSharing()();

        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v56, v30);
        return v42;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v6, 1, 1, v61);
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for URL?);
    uint64_t v43 = (void *)swift_allocObject();
    id v44 = v58;
    uint64_t v45 = v62;
    uint64_t v46 = v63;
    v43[2] = v57;
    v43[3] = v45;
    v43[4] = v46;
    v43[5] = v26;
    v43[6] = v17;
    v43[7] = v44;
    uint64_t v47 = v59;
    v43[8] = v59;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
    uint64_t v48 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<EnvironmentResource, Error>?>);
    uint64_t v49 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v50 = swift_allocObject();
    *(_DWORD *)(v50 + 16) = 0;
    *(void *)(v49 + 16) = v50;
    *(void *)(v49 + 24) = 0;
    *(unsigned char *)(v49 + 32) = -1;
    *(void *)(v48 + 16) = v49;
    uint64_t v51 = (void *)swift_allocObject();
    v51[2] = partial apply for closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:);
    v51[3] = v43;
    v51[4] = v49;
    v51[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<EnvironmentResource, Error>);
    swift_allocObject();
    swift_retain();
    id v52 = v47;
    id v53 = v44;
    swift_bridgeObjectRetain();
    id v54 = v26;
    swift_retain();
    *(void *)(v48 + 24) = Future.init(_:)();
    uint64_t v42 = specialized LoadRequest<A>.thenWaitForResourceSharing()();

    swift_release();
    swift_release();
    return v42;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = a5;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v10 - 8);
  uint64_t v29 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x270FA5388](v13);
  id v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v20 + v18, v16, v13);
  id v21 = (void *)(v20 + v19);
  *id v21 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v21[1] = v17;
  aBlock[4] = partial apply for doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_80;
  id v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v23 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v12, v9, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v23);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
  return swift_release();
}

uint64_t doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v30, 0, 25);
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  v30[25] = 1;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  v25[0] = 1;
  swift_beginAccess();
  outlined init with copy of __REAssetService(a1 + 120, (uint64_t)&v20);
  uint64_t v11 = *((void *)&v21 + 1);
  uint64_t v10 = v22;
  __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
  v30[27] = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 56))(v11, v10) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  outlined init with copy of __REAssetService(a1 + 120, (uint64_t)&v20);
  uint64_t v12 = *((void *)&v21 + 1);
  uint64_t v13 = v22;
  __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
  v30[26] = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 56))(v12, v13) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)v25, (uint64_t)&v20);
  swift_retain();
  __REAssetBundle.init(url:serviceLocator:_:)((uint64_t)v9, a1, (uint64_t)&v20, v24);
  swift_beginAccess();
  swift_unownedRetainStrong();
  outlined init with copy of __REAssetBundle((uint64_t)v24, (uint64_t)&v20);
  uint64_t v14 = swift_allocObject();
  long long v15 = v21;
  *(_OWORD *)(v14 + 16) = v20;
  *(_OWORD *)(v14 + 32) = v15;
  long long v16 = v23;
  *(_OWORD *)(v14 + 48) = v22;
  *(_OWORD *)(v14 + 64) = v16;
  *(void *)(v14 + 80) = v18;
  *(void *)(v14 + 88) = v19;
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:), v14);
  swift_release();
  swift_release();
  outlined destroy of __REAssetBundle((uint64_t)v24);
  return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v25);
}

void closure #1 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4 < 2) {
      goto LABEL_3;
    }
LABEL_7:
    if ((v3 & 0xC000000000000001) == 0)
    {
      uint64_t v7 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v7)
      {
        if (v7 != 1)
        {
          uint64_t v8 = *(void *)(v3 + 32);
          uint64_t v9 = *(void *)(v3 + 40);
          swift_retain();
          swift_retain();
          goto LABEL_11;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_16:
      __break(1u);
      return;
    }
    uint64_t v8 = MEMORY[0x22A689930](0, v3);
    uint64_t v9 = MEMORY[0x22A689930](1, v3);
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v10 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v10, (uint64_t)v24);
    uint64_t v11 = v25;
    uint64_t v12 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
    uint64_t v13 = specialized static __ServiceLocator.shared.getter() + 40;
    swift_beginAccess();
    outlined init with copy of __RenderService?(v13, (uint64_t)&v19);
    if (v20)
    {
      outlined init with take of BindableDataInternal(&v19, (uint64_t)v21);
      uint64_t v14 = v22;
      uint64_t v15 = v23;
      __swift_project_boxed_opaque_existential_1(v21, v22);
      (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
      REAssetManagerPostLoadProcessImageBasedLightAsset();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      uint64_t v16 = *(void *)(v8 + 16);
      uint64_t v17 = *(void *)(v9 + 16);
      type metadata accessor for EnvironmentResource();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 16) = v16;
      swift_beginAccess();
      *(void *)(v18 + 24) = v17;
      RERetain();
      REAssetSetSwiftObject();
      RERetain();
      REAssetSetSwiftObject();
      a2(v18, 0);
      swift_release();
      swift_release();
      swift_release();
      return;
    }
    goto LABEL_16;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4 >= 2) {
    goto LABEL_7;
  }
LABEL_3:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = v4;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 4;
  a2((uint64_t)v5, 1);
}

void closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)(void (*a1)(void **), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v16 - 8);
  uint64_t v33 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  swift_retain();
  uint64_t v20 = specialized static EnvironmentResource.resolvedPath(forName:in:allowsREIbl:)(a4, a5, a6, 1);
  if (v21)
  {
    uint64_t v22 = v20;
    uint64_t v23 = v21;
    long long v24 = (void *)swift_allocObject();
    v24[2] = v22;
    void v24[3] = v23;
    v24[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    v24[5] = v19;
    v24[6] = a4;
    v24[7] = a5;
    uint64_t v25 = v31;
    v24[8] = v30;
    v24[9] = v25;
    long long v40 = partial apply for doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:);
    id v41 = v24;
    aBlocuint64_t k = (void *)MEMORY[0x263EF8330];
    uint64_t v37 = 1107296256;
    uint64_t v38 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v39 = &block_descriptor_96_0;
    uint64_t v26 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    id v27 = v25;
    static DispatchQoS.unspecified.getter();
    uint64_t v35 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type CancellationError and conformance CancellationError((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v18, v15, v26);
    _Block_release(v26);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v13);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v33);
    swift_release();
  }
  else
  {
    swift_release();
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    long long v28 = (void *)swift_allocError();
    *(void *)uint64_t v29 = a4;
    *(void *)(v29 + 8) = a5;
    *(void *)(v29 + 16) = 0;
    *(void *)(v29 + 24) = 0;
    *(unsigned char *)(v29 + 32) = 0;
    aBlocuint64_t k = v28;
    LOBYTE(v37) = 1;
    swift_bridgeObjectRetain();
    a1(&aBlock);
  }
}

void doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v11 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v11, (uint64_t)v29);
  uint64_t v13 = v30;
  uint64_t v12 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v13, v12);
  uint64_t v14 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of __RenderService?(v14, (uint64_t)&v24);
  if (v25)
  {
    outlined init with take of BindableDataInternal(&v24, (uint64_t)v26);
    uint64_t v16 = v27;
    uint64_t v15 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v16, v15);
    String.utf8CString.getter();
    uint64_t v17 = REAssetManagerImageBasedLightMemoryAssetCreateFromReiblFileAsync();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    if (v17)
    {
      swift_beginAccess();
      swift_unownedRetainStrong();
      uint64_t v18 = (void *)swift_allocObject();
      v18[2] = v17;
      v18[3] = a3;
      v18[4] = a4;
      v18[5] = a8;
      swift_retain();
      id v19 = a8;
      __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:), (uint64_t)v18);
      swift_release();
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
      uint64_t v20 = (void *)swift_allocError();
      *(void *)uint64_t v21 = a5;
      *(void *)(v21 + 8) = a6;
      *(void *)(v21 + 16) = 0;
      *(void *)(v21 + 24) = 0;
      *(unsigned char *)(v21 + 32) = 2;
      swift_bridgeObjectRetain();
      a3(v20, 1);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, void (*a2)(void, void), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  RERetain();
  RERelease();
  REAssetHandleLoadNow();
  if (REAssetHandleLoadFailed())
  {
    uint64_t v16 = (void *)REAssetCopyDescription();
    Swift::String v17 = String.init(_:)(v16);
    uint64_t v35 = a4;
    uint64_t v37 = v12;
    uint64_t FailedMessage = REAssetHandleCopyLoadFailedMessage();
    uint64_t v33 = a2;
    id v19 = (void *)FailedMessage;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v13;
    uint64_t v21 = v20;
    uint64_t v34 = v9;
    uint64_t v23 = v22;

    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    long long v24 = (void *)swift_allocError();
    *(Swift::String *)uint64_t v25 = v17;
    *(void *)(v25 + 16) = v21;
    *(void *)(v25 + 24) = v23;
    *(unsigned char *)(v25 + 32) = 1;
    swift_willThrow();
    RERelease();
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = v33;
    void v26[3] = a3;
    v26[4] = v24;
    aBlock[4] = partial apply for closure #1 in closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:);
    aBlock[5] = v26;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_105;
    uint64_t v27 = _Block_copy(aBlock);
    swift_retain();
    id v28 = v24;
    static DispatchQoS.unspecified.getter();
    uint64_t v38 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type CancellationError and conformance CancellationError((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A689420](0, v15, v11, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
    return swift_release();
  }
  else
  {
    uint64_t SkyboxTexture = REIBLAssetGetSkyboxTexture();
    type metadata accessor for EnvironmentResource();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 24) = 0;
    *(void *)(v31 + 16) = a1;
    swift_beginAccess();
    *(void *)(v31 + 24) = SkyboxTexture;
    RERetain();
    REAssetSetSwiftObject();
    if (SkyboxTexture)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    a2(v31, 0);
    swift_release();
    return RERelease();
  }
}

void closure #2 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(void (*a1)(void *, uint64_t), int a2, id a3)
{
  id v4 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for CFErrorRef(0);
  swift_dynamicCast();
  CFIndex Code = CFErrorGetCode(err);
  if (Code == 300 || Code == 200)
  {
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CancellationError and conformance CancellationError(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, (void (*)(uint64_t))type metadata accessor for Entity.LoadError);
    uint64_t v6 = (void *)swift_allocError();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    if (Code != 100)
    {
      lazy protocol witness table accessor for type CancellationError and conformance CancellationError((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v6 = (void *)swift_allocError();
      *uint64_t v7 = err;
      goto LABEL_8;
    }
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CancellationError and conformance CancellationError(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
    uint64_t v6 = (void *)swift_allocError();
    CancellationError.init()();
  }

LABEL_8:
  a1(v6, 1);
}

uint64_t static EnvironmentResource.defaultAR()()
{
  if (one-time initialization token for coreRE != -1) {
    swift_once();
  }
  uint64_t v0 = specialized static EnvironmentResource.loadPrivate(named:in:allowsREIbl:)(0xD000000000000016, 0x8000000228358830, (void *)static NSBundle.coreRE, 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for EnvironmentResource();
  *(void *)(inited + 64) = &protocol witness table for EnvironmentResource;
  *(void *)(inited + 32) = v0;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v0;
}

uint64_t static EnvironmentResource.defaultObject()()
{
  uint64_t v0 = type metadata accessor for Logger();
  MEMORY[0x270FA5388](v0);
  if (one-time initialization token for coreRE != -1) {
    swift_once();
  }
  uint64_t v1 = specialized static EnvironmentResource.loadPrivate(named:in:allowsREIbl:)(0xD00000000000001ALL, 0x80000002283588B0, (void *)static NSBundle.coreRE, 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v3 = type metadata accessor for EnvironmentResource();
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 56) = v3;
  *(void *)(inited + 64) = &protocol witness table for EnvironmentResource;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v1;
}

uint64_t static EnvironmentResource.generate(fromEquirectangular:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = specialized static EnvironmentResource.generateCube(fromEquirectangular:withName:compilationOptions:semantic:mipmapOptions:compressionNone:)(a1, a2, a3, 0, 4, 0, 0);
  if (!v3)
  {
    uint64_t v6 = specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(v5, 0, 0);
    uint64_t v4 = v6();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v8 = type metadata accessor for EnvironmentResource();
    *(void *)(inited + 32) = v4;
    *(void *)(inited + 56) = v8;
    *(void *)(inited + 64) = &protocol witness table for EnvironmentResource;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    swift_release();
  }
  return v4;
}

{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v6;
  v4[8] = v5;
  return MEMORY[0x270FA2498](static EnvironmentResource.generate(fromEquirectangular:withName:), v6, v5);
}

uint64_t static EnvironmentResource.generate(fromEquirectangular:withName:)()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v2;
  void v5[3] = v4;
  v5[4] = v3;
  v5[5] = v1;
  swift_bridgeObjectRetain();
  id v6 = v4;
  uint64_t v7 = static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t)partial apply for closure #1 in static EnvironmentResource.generateAsync(fromLatLong:withName:), (uint64_t)v5, 0, 0);
  v0[9] = v7;
  swift_release();
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static EnvironmentResource.load<A>(_:)
                                        + async function pointer to specialized static EnvironmentResource.load<A>(_:));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[10] = v8;
  *uint64_t v8 = v0;
  v8[1] = static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  return v10(v7);
}

uint64_t static EnvironmentResource.generateAsync(fromLatLong:withName:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = a3;
  swift_bridgeObjectRetain();
  id v8 = a1;
  uint64_t v9 = static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t)partial apply for closure #1 in static EnvironmentResource.generateAsync(fromLatLong:withName:), (uint64_t)v7, 0, 0);
  swift_release();
  return v9;
}

uint64_t specialized static EnvironmentResource.load<A>(_:)(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>);
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator);
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[14] = v5;
  v1[15] = v4;
  return MEMORY[0x270FA2498](specialized static EnvironmentResource.load<A>(_:), v5, v4);
}

uint64_t specialized static EnvironmentResource.load<A>(_:)()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  v0[2] = v0[5];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
  uint64_t v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<EnvironmentResource> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
  MEMORY[0x22A688760](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  uint64_t v6 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[17] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized static EnvironmentResource.load<A>(_:);
  uint64_t v8 = v0[9];
  return MEMORY[0x270FA1E80](v0 + 3, v8, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = specialized static TextureResource.load<A>(_:);
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = specialized static EnvironmentResource.load<A>(_:);
  }
  return MEMORY[0x270FA2498](v7, v4, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  v0[19] = v0[3];
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  return MEMORY[0x270FA2498](specialized static EnvironmentResource.load<A>(_:), v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v8)(void);
  uint64_t v9;

  uint64_t v1 = v0[19];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[9];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v1)
  {
    uint64_t v5 = v0[19];
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t))v0[1];
    return v6(v5);
  }
  else
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CancellationError and conformance CancellationError(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t closure #1 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(uint64_t a1)
{
  uint64_t SkyboxTexture = REIBLAssetGetSkyboxTexture();
  type metadata accessor for EnvironmentResource();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 16) = a1;
  swift_beginAccess();
  *(void *)(v3 + 24) = SkyboxTexture;
  RERetain();
  REAssetSetSwiftObject();
  if (SkyboxTexture)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  return v3;
}

uint64_t specialized closure #2 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(void (*a1)(uint64_t), uint64_t a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t (*a7)(void))
{
  if (!a1
    || (uint64_t v12 = swift_retain(),
        a1(v12),
        uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a1),
        !v7))
  {
    if (!a3
      || (uint64_t v14 = swift_retain(),
          a3(v14),
          uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a3),
          !v7))
    {
      if (!a5) {
        return a7();
      }
      uint64_t v15 = swift_retain();
      a5(v15);
      uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a5);
      if (!v7) {
        return a7();
      }
    }
  }
  return result;
}

uint64_t static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = specialized static __ServiceLocator.shared.getter();
  uint64_t v11 = *(void **)(*(void *)(v10 + 168) + 16);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v10 + 24);
  swift_unownedRetainStrong();
  uint64_t v13 = *(void **)(v12 + 32);
  swift_retain();
  id v14 = v11;
  id v15 = v13;
  swift_release();
  *uint64_t v9 = v15;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F0E0], v6);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v15)
  {
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = a1;
    v18[3] = a2;
    uint64_t v19 = v28;
    uint64_t v20 = v29;
    v18[4] = v27;
    v18[5] = v20;
    v18[6] = v19;
    v18[7] = v10;
    v18[8] = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
    uint64_t v21 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<EnvironmentResource, Error>?>);
    uint64_t v22 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v23 = swift_allocObject();
    *(_DWORD *)(v23 + 16) = 0;
    *(void *)(v22 + 16) = v23;
    *(void *)(v22 + 24) = 0;
    *(unsigned char *)(v22 + 32) = -1;
    *(void *)(v21 + 16) = v22;
    long long v24 = (void *)swift_allocObject();
    v24[2] = partial apply for closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:);
    void v24[3] = v18;
    v24[4] = v22;
    v24[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<EnvironmentResource, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id v25 = v14;
    swift_retain();
    swift_bridgeObjectRetain();
    *(void *)(v21 + 24) = Future.init(_:)();
    uint64_t v26 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
    swift_release();

    swift_release();
    return v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v32 = a9;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  Swift::String v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v18 - 8);
  uint64_t v30 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = a2;
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a3;
  v22[3] = a4;
  uint64_t v23 = v28;
  v22[4] = v27;
  v22[5] = v23;
  v22[6] = a7;
  v22[7] = a8;
  char v22[8] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v22[9] = v21;
  aBlock[4] = partial apply for doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_24;
  long long v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v20, v17, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v15);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v30);
  return swift_release();
}

uint64_t doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, objc_class *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = a1();
  uint64_t v13 = specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(v12, a4, a5);
  uint64_t v15 = v14;
  swift_beginAccess();
  swift_unownedRetainStrong();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v13;
  _OWORD v16[3] = v15;
  v16[4] = a7;
  v16[5] = a8;
  swift_retain();
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:), (uint64_t)v16);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t static EnvironmentResource.__fromAssets(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  type metadata accessor for EnvironmentResource();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = v2;
  swift_beginAccess();
  *(void *)(v4 + 24) = v3;
  if (v2)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  if (v3)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v4;
}

uint64_t static EnvironmentResource.__exportCompiledResource(contentsOf:to:)(uint64_t a1, uint64_t a2)
{
  long long v3 = xmmword_228333C40;
  uint64_t v4 = 0;
  char v6 = 0;
  int v5 = 0;
  return specialized static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(a1, a2, (uint64_t)&v3, 0);
}

uint64_t static EnvironmentResource.exportCompiledResource(contentsOf:to:for:)(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *((void *)a3 + 2);
  int v4 = *((_DWORD *)a3 + 6);
  char v5 = *((unsigned char *)a3 + 28);
  long long v7 = *a3;
  uint64_t v8 = v3;
  char v10 = v5;
  int v9 = v4;
  return specialized static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(a1, a2, (uint64_t)&v7, 0);
}

uint64_t static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(a1, a2, a3, a4);
}

uint64_t static EnvironmentResource.exportCompiledResource(contentsOf:to:for:compilationOptions:)(uint64_t a1, uint64_t a2, long long *a3, unint64_t a4)
{
  uint64_t v4 = *((void *)a3 + 2);
  int v5 = *((_DWORD *)a3 + 6);
  char v6 = *((unsigned char *)a3 + 28);
  long long v8 = *a3;
  uint64_t v9 = v4;
  char v11 = v6;
  int v10 = v5;
  return specialized static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(a1, a2, (uint64_t)&v8, a4);
}

uint64_t EnvironmentResource.init(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[13] = a3;
  v4[14] = v3;
  v4[11] = a1;
  v4[12] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>);
  v4[15] = v5;
  v4[16] = *(void *)(v5 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator);
  v4[18] = v6;
  v4[19] = *(void *)(v6 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = type metadata accessor for MainActor();
  v4[22] = static MainActor.shared.getter();
  return MEMORY[0x270FA2498](EnvironmentResource.init(named:in:), 0, 0);
}

uint64_t EnvironmentResource.init(named:in:)()
{
  *(void *)(v0 + 184) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](EnvironmentResource.init(named:in:), v2, v1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = (void *)v0[13];
  uint64_t v3 = v0[11];
  uint64_t v2 = v0[12];
  swift_release();
  v0[24] = static EnvironmentResource.loadAsyncPrivate(named:in:)(v3, v2, v1);
  swift_bridgeObjectRelease();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[25] = v5;
  v0[26] = v4;
  return MEMORY[0x270FA2498](EnvironmentResource.init(named:in:), v5, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[15];
  v0[8] = v0[24];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
  uint64_t v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<EnvironmentResource> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
  MEMORY[0x22A688760](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[27] = static MainActor.shared.getter();
  uint64_t v6 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<EnvironmentResource>>.Iterator);
  long long v7 = (void *)swift_task_alloc();
  v0[28] = v7;
  *long long v7 = v0;
  v7[1] = EnvironmentResource.init(named:in:);
  uint64_t v8 = v0[18];
  return MEMORY[0x270FA1E80](v0 + 9, v8, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 216);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    long long v7 = EnvironmentResource.init(named:in:);
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    long long v7 = EnvironmentResource.init(named:in:);
  }
  return MEMORY[0x270FA2498](v7, v4, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  v0[30] = v0[9];
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[26];
  return MEMORY[0x270FA2498](EnvironmentResource.init(named:in:), v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(uint64_t);
  void *v12;
  uint64_t (*v13)(void);
  uint64_t v14;

  uint64_t v1 = v0[30];
  swift_release();
  if (v1)
  {
    uint64_t v2 = v0[30];
    uint64_t v3 = *(void *)(v2 + 16);
    swift_beginAccess();
    uint64_t v4 = *(void *)(v2 + 24);
    type metadata accessor for EnvironmentResource();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 16) = v3;
    swift_beginAccess();
    *(void *)(v5 + 24) = v4;
    if (v3)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    if (v4)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    long long v7 = v0[19];
    uint64_t v6 = v0[20];
    uint64_t v8 = v0[18];
    uint64_t v9 = (void *)v0[13];
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    int v10 = (uint64_t (*)(uint64_t))v0[1];
    return v10(v5);
  }
  else
  {
    uint64_t v12 = (void *)v0[13];
    (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CancellationError and conformance CancellationError(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x263F8F488]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0[10] = v0[29];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  swift_release();
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[26];
  return MEMORY[0x270FA2498](EnvironmentResource.init(named:in:), v1, v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v4 = (void *)v0[13];
  swift_release();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t EnvironmentResource.skybox.getter()
{
  if (!*(void *)(v0 + 16) || (uint64_t SkyboxTexture = REIBLAssetGetSkyboxTexture()) == 0)
  {
    uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v4, (uint64_t)v6);
    uint64_t v3 = closure #1 in static TextureResource.builtinTexture(named:)(v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    return v3;
  }
  uint64_t v2 = SkyboxTexture;
  if (!(id)REAssetGetSwiftObject()) {
    goto LABEL_6;
  }
  type metadata accessor for TextureResource();
  uint64_t v3 = swift_dynamicCastClass();
  if (!v3)
  {
    swift_unknownObjectRelease();
LABEL_6:
    type metadata accessor for TextureResource();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  return v3;
}

void EnvironmentResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t EnvironmentResource.addToLoadRequest(_:)()
{
  if (*(void *)(v0 + 16)) {
    REAssetLoadRequestAddAsset();
  }
  uint64_t result = swift_beginAccess();
  if (*(void *)(v0 + 24)) {
    return REAssetLoadRequestAddAsset();
  }
  return result;
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance EnvironmentResource()
{
  return EnvironmentResource.addToLoadRequest(_:)();
}

uint64_t EnvironmentResource.init(cube:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  specialized static EnvironmentResource.validate(cubeTexture:)();
  if (v2)
  {
    swift_release();
  }
  else
  {
    v15.Swift::Int value = 0;
    v15.Swift::Bool is_nil = 1;
    uint64_t v5 = (objc_class *)EnvironmentResource.CreateOptions.toCoreImageBasedLightCompilationOptions(skyboxCubeDimension:)(v15);
    uint64_t v6 = (unint64_t)TextureResource.Compression.toCoreASTCOptions()();
    uint64_t v7 = *(void *)(a1 + 16);
    RERetain();
    uint64_t v8 = specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(v7, v5, v6);
    uint64_t v9 = v8();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v11 = type metadata accessor for EnvironmentResource();
    *(void *)(inited + 32) = v9;
    *(void *)(inited + 56) = v11;
    *(void *)(inited + 64) = &protocol witness table for EnvironmentResource;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v9 + 16);
    swift_beginAccess();
    uint64_t v14 = *(void *)(v9 + 24);
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 16) = v13;
    swift_beginAccess();
    *(void *)(v4 + 24) = v14;
    if (v13)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    if (v14)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    swift_release();
    swift_release();
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  *(void *)(v3 + 64) = a1;
  *(void *)(v3 + 72) = v2;
  *(_WORD *)(v3 + 144) = *(_WORD *)a2;
  *(unsigned char *)(v3 + 146) = *(unsigned char *)(a2 + 2);
  *(void *)(v3 + 80) = *(void *)(a2 + 8);
  *(unsigned char *)(v3 + 147) = *(unsigned char *)(a2 + 16);
  type metadata accessor for MainActor();
  *(void *)(v3 + 88) = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 96) = v5;
  *(void *)(v3 + 104) = v4;
  return MEMORY[0x270FA2498](EnvironmentResource.init(cube:options:), v5, v4);
}

uint64_t EnvironmentResource.init(equirectangular:withName:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = specialized static EnvironmentResource.generateCube(fromEquirectangular:withName:compilationOptions:semantic:mipmapOptions:compressionNone:)((uint64_t)a1, a2, a3, 0, 4, 0, 0);
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    uint64_t v8 = specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(v7, 0, 0);
    uint64_t v9 = v8();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    uint64_t v11 = type metadata accessor for EnvironmentResource();
    *(void *)(inited + 32) = v9;
    *(void *)(inited + 56) = v11;
    *(void *)(inited + 64) = &protocol witness table for EnvironmentResource;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    swift_release();
    uint64_t v13 = *(void *)(v9 + 16);
    swift_beginAccess();
    uint64_t v14 = *(void *)(v9 + 24);
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 16) = v13;
    swift_beginAccess();
    *(void *)(v4 + 24) = v14;
    if (v13)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    if (v14)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    swift_release();
  }
  return v4;
}

uint64_t EnvironmentResource.init(equirectangular:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  type metadata accessor for MainActor();
  v4[12] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[13] = v6;
  v4[14] = v5;
  return MEMORY[0x270FA2498](EnvironmentResource.init(equirectangular:withName:), v6, v5);
}

uint64_t EnvironmentResource.init(equirectangular:withName:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = (void *)v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v2;
  void v5[3] = v4;
  v5[4] = v3;
  v5[5] = v1;
  swift_bridgeObjectRetain();
  id v6 = v4;
  uint64_t v7 = static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t)partial apply for closure #1 in static EnvironmentResource.generateAsync(fromLatLong:withName:), (uint64_t)v5, 0, 0);
  v0[15] = v7;
  swift_release();
  swift_bridgeObjectRelease();
  int v10 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static EnvironmentResource.load<A>(_:)
                                        + async function pointer to specialized static EnvironmentResource.load<A>(_:));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[16] = v8;
  *uint64_t v8 = v0;
  v8[1] = EnvironmentResource.init(equirectangular:withName:);
  return v10(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 136);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 24);
  type metadata accessor for EnvironmentResource();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = v2;
  swift_beginAccess();
  *(void *)(v4 + 24) = v3;
  if (v2)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  if (v3)
  {
    RERetain();
    REAssetSetSwiftObject();
  }

  swift_release();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t EnvironmentResource.init(equirectangular:withName:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[13];
    uint64_t v5 = v3[14];
    id v6 = EnvironmentResource.init(equirectangular:withName:);
  }
  else
  {
    swift_release();
    uint64_t v4 = v3[13];
    uint64_t v5 = v3[14];
    id v6 = EnvironmentResource.init(equirectangular:withName:);
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

uint64_t EnvironmentResource.init(cube:options:)()
{
  specialized static EnvironmentResource.validate(cubeTexture:)();
  uint64_t v1 = v0[8];
  v9.Swift::Int value = 0;
  v9.Swift::Bool is_nil = 1;
  uint64_t v2 = (unint64_t)EnvironmentResource.CreateOptions.toCoreImageBasedLightCompilationOptions(skyboxCubeDimension:)(v9);
  uint64_t v3 = (unint64_t)TextureResource.Compression.toCoreASTCOptions()();
  swift_retain();
  uint64_t v4 = static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t)partial apply for closure #1 in EnvironmentResource.init(cube:options:), v1, v2, v3);
  v0[14] = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static EnvironmentResource.load<A>(_:)
                                       + async function pointer to specialized static EnvironmentResource.load<A>(_:));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[15] = v5;
  *uint64_t v5 = v0;
  v5[1] = EnvironmentResource.init(cube:options:);
  return v7(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 128);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 24);
  type metadata accessor for EnvironmentResource();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 16) = v2;
  swift_beginAccess();
  *(void *)(v4 + 24) = v3;
  if (v2)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  if (v3)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  swift_release();
  swift_release_n();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release_n();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t EnvironmentResource.init(cube:options:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[16] = a1;
  v3[17] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[12];
    uint64_t v5 = v3[13];
    id v6 = EnvironmentResource.init(cube:options:);
  }
  else
  {
    swift_release();
    uint64_t v4 = v3[12];
    uint64_t v5 = v3[13];
    id v6 = EnvironmentResource.init(cube:options:);
  }
  return MEMORY[0x270FA2498](v6, v4, v5);
}

BOOL static EnvironmentResource.CreateOptions.SamplingQuality.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void EnvironmentResource.CreateOptions.SamplingQuality.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int EnvironmentResource.CreateOptions.SamplingQuality.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void EnvironmentResource.CreateOptions.compression.getter(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

_WORD *EnvironmentResource.CreateOptions.compression.setter(_WORD *result)
{
  _WORD *v1 = *result;
  return result;
}

uint64_t (*EnvironmentResource.CreateOptions.compression.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void EnvironmentResource.CreateOptions.samplingQuality.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

unsigned char *EnvironmentResource.CreateOptions.samplingQuality.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 2) = *result;
  return result;
}

uint64_t (*EnvironmentResource.CreateOptions.samplingQuality.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t EnvironmentResource.CreateOptions.specularCubeDimension.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t EnvironmentResource.CreateOptions.specularCubeDimension.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*EnvironmentResource.CreateOptions.specularCubeDimension.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void EnvironmentResource.CreateOptions.hash(into:)()
{
  unint64_t v1 = *v0;
  Swift::UInt v2 = *((unsigned __int8 *)v0 + 2);
  Swift::UInt v3 = *((void *)v0 + 1);
  int v4 = *((unsigned __int8 *)v0 + 16);
  Swift::UInt v5 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    Swift::UInt v5 = 0;
  }
  else if (v5 == 5)
  {
    Swift::UInt v5 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v2);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
}

Swift::Int EnvironmentResource.CreateOptions.hashValue.getter()
{
  unint64_t v1 = *v0;
  Swift::UInt v2 = *((unsigned __int8 *)v0 + 2);
  Swift::UInt v3 = *((void *)v0 + 1);
  int v4 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)();
  Swift::UInt v5 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    Swift::UInt v5 = 0;
  }
  else if (v5 == 5)
  {
    Swift::UInt v5 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v2);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EnvironmentResource.CreateOptions()
{
  unint64_t v1 = *v0;
  Swift::UInt v2 = *((unsigned __int8 *)v0 + 2);
  Swift::UInt v3 = *((void *)v0 + 1);
  int v4 = *((unsigned __int8 *)v0 + 16);
  Swift::UInt v5 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    Swift::UInt v5 = 0;
  }
  else if (v5 == 5)
  {
    Swift::UInt v5 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v2);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EnvironmentResource.CreateOptions()
{
  unint64_t v1 = *v0;
  Swift::UInt v2 = *((unsigned __int8 *)v0 + 2);
  Swift::UInt v3 = *((void *)v0 + 1);
  int v4 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)();
  Swift::UInt v5 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    Swift::UInt v5 = 0;
  }
  else if (v5 == 5)
  {
    Swift::UInt v5 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v2);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

uint64_t __SkyboxMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t __SkyboxMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  Swift::UInt v5 = *(void **)(v1 + 32);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t __SkyboxMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = v5;
  return result;
}

uint64_t (*__SkyboxMaterial.__parameterBlock.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v4 = v2;
  uint64_t v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a2((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v9;
    }
  }
  else
  {
    int v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v4 = a2((char *)v10, v7, v5);
    MEMORY[0x22A696500](v10, -1, -1);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  void v12[2];

  uint64_t v4 = v2;
  uint64_t v5 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a2((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v9;
    }
  }
  else
  {
    int v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v4 = a2((char *)v10, v7, v5);
    MEMORY[0x22A696500](v10, -1, -1);
  }
  return v4;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = (unint64_t *)result;
  uint64_t v20 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v24 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v24) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v24) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
      }
      unint64_t v15 = *(void *)(v5 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v24) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
        }
        unint64_t v15 = *(void *)(v5 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v10, (uint64_t)v23);
    v21[0] = v13;
    v21[1] = v12;
    outlined init with copy of Any((uint64_t)v23, (uint64_t)&v22);
    swift_bridgeObjectRetain_n();
    LOBYTE(v13) = specialized Sequence<>.starts<A>(with:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for (key: String, value: Any));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      *(unint64_t *)((char *)v19 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v24) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v24) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
    }
    unint64_t v15 = *(void *)(v5 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t *v19;
  uint64_t v20;
  void v21[2];
  uint64_t v22;
  unsigned char v23[32];
  int64_t v24;

  uint64_t v19 = (unint64_t *)result;
  uint64_t v20 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v24 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v24) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v24) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
      }
      unint64_t v15 = *(void *)(v5 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v24) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
        }
        unint64_t v15 = *(void *)(v5 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v10, (uint64_t)v23);
    v21[0] = v13;
    v21[1] = v12;
    outlined init with copy of Any((uint64_t)v23, (uint64_t)&v22);
    swift_bridgeObjectRetain_n();
    LOBYTE(v13) = specialized Sequence<>.starts<A>(with:)();
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for (key: String, value: Any));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    uint64_t result = swift_bridgeObjectRelease();
    if (v13)
    {
      *(unint64_t *)((char *)v19 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v24) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v24) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v19, a2, v20, a3);
    }
    unint64_t v15 = *(void *)(v5 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized static EnvironmentResource.CreateOptions.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  int v3 = *((unsigned __int8 *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 1);
  char v5 = *((unsigned char *)a1 + 16);
  unsigned int v6 = *a2;
  unsigned int v7 = v2 >> 8;
  if (v2 >> 8 == 4)
  {
    uint64_t result = 0;
    if ((v6 & 0xFF00) != 0x400) {
      return result;
    }
    goto LABEL_13;
  }
  if (v7 == 5)
  {
    uint64_t result = 0;
    if ((v6 & 0xFF00) != 0x500) {
      return result;
    }
LABEL_13:
    if (((v3 ^ *((unsigned __int8 *)a2 + 2)) & 1) == 0)
    {
      if (v5)
      {
        if ((a2[8] & 1) == 0) {
          return 0;
        }
      }
      else
      {
        if (v4 == *((void *)a2 + 1)) {
          char v11 = *((unsigned char *)a2 + 16);
        }
        else {
          char v11 = 1;
        }
        if (v11) {
          return 0;
        }
      }
      return 1;
    }
    return result;
  }
  if ((v6 & 0xFE00) == 0x400) {
    return 0;
  }
  uint64_t result = 0;
  int v9 = (v6 ^ v2);
  if (v7 == v6 >> 8 && v9 == 0) {
    goto LABEL_13;
  }
  return result;
}

BOOL specialized static EnvironmentResource.areEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (v5) {
      BOOL v6 = v4 == v5;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + 24);
  swift_beginAccess();
  uint64_t v8 = *(void *)(a2 + 24);
  BOOL result = (v7 | v8) == 0;
  if (v7)
  {
    if (v8) {
      return v7 == v8;
    }
    else {
      return v7 == 0;
    }
  }
  return result;
}

uint64_t specialized static EnvironmentResource.generateCube(fromEquirectangular:withName:compilationOptions:semantic:mipmapOptions:compressionNone:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v10 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  uint64_t v11 = RETextureImportOperationCreateWithCGImage();
  RETextureImportOperationSetSemantic();
  RETextureImportOperationSetMipmapMode();
  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  if (a7) {
    RETextureImportOperationSetCompressionType();
  }
  uint64_t v38 = 0;
  if (!RETextureImportOperationCreateAssetData())
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v16._countAndFlagsBits = 0xD00000000000002FLL;
    v16._object = (void *)0x80000002283589E0;
    String.append(_:)(v16);
    v17._countAndFlagsBits = MEMORY[0x22A689990](v11);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._object = (void *)0x8000000228358A10;
    v18._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v18);
    uint64_t TextureAssetFromData = 0xE000000000000000;
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(void *)uint64_t v29 = 0;
    *(void *)(v29 + 8) = 0xE000000000000000;
    *(void *)(v29 + 16) = 0;
    *(void *)(v29 + 24) = 0;
    *(unsigned char *)(v29 + 32) = 6;
    swift_willThrow();
    goto LABEL_17;
  }
  uint64_t v37 = 0;
  swift_beginAccess();
  uint64_t result = outlined init with copy of __RenderService?(v10 + 40, (uint64_t)&v31);
  if (v32)
  {
    outlined init with take of BindableDataInternal(&v31, (uint64_t)&v33);
    uint64_t v13 = v35;
    uint64_t v14 = v36;
    __swift_project_boxed_opaque_existential_1(&v33, v35);
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    if (a4) {
      v15.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    }
    else {
      v15.super.isa = 0;
    }
    uint64_t v20 = RECreateCubeTextureDataFromLatLong();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    if (v20)
    {
      swift_beginAccess();
      outlined init with copy of __REAssetService(v10 + 120, (uint64_t)&v33);
      uint64_t v21 = v35;
      uint64_t v22 = v36;
      __swift_project_boxed_opaque_existential_1(&v33, v35);
      (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
      uint64_t TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      RERelease();
      RERelease();
      RERelease();
      swift_release();
      return TextureAssetFromData;
    }
    uint64_t v23 = v37;
    uint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v24._countAndFlagsBits = 0xD000000000000022;
    v24._object = (void *)0x8000000228358A30;
    String.append(_:)(v24);
    v25._countAndFlagsBits = MEMORY[0x22A689990](v11);
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._object = (void *)0x8000000228358A10;
    v26._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v26);
    uint64_t TextureAssetFromData = v34;
    if (v23)
    {
      id v27 = v23;
      swift_bridgeObjectRelease();
      uint64_t TextureAssetFromData = 0;
      char v28 = 5;
    }
    else
    {
      uint64_t v23 = v33;
      char v28 = 6;
    }
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(void *)uint64_t v30 = v23;
    *(void *)(v30 + 8) = TextureAssetFromData;
    *(void *)(v30 + 16) = 0;
    *(void *)(v30 + 24) = 0;
    *(unsigned char *)(v30 + 32) = v28;
    swift_willThrow();
    RERelease();
LABEL_17:
    RERelease();
    swift_release();
    return TextureAssetFromData;
  }
  __break(1u);
  return result;
}

uint64_t specialized static EnvironmentResource.resolvedPath(forName:in:allowsREIbl:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3) {
    id v12 = a3;
  }
  else {
    id v12 = objc_msgSend(self, sel_mainBundle);
  }
  id v13 = a3;
  uint64_t v14 = (void *)MEMORY[0x22A688A50](a1, a2);
  id v15 = objc_msgSend(v12, sel_pathForResource_ofType_, v14, 0);

  if (a4)
  {
    if (v15)
    {
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      char v28 = (void *)MEMORY[0x22A688A50](a1, a2);
      uint64_t v29 = (void *)MEMORY[0x22A688A50](0x6C62696572, 0xE500000000000000);
      id v30 = objc_msgSend(v12, sel_pathForResource_ofType_, v28, v29);

      if (v30)
      {
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {

        return 0;
      }
    }
    return v16;
  }
  uint64_t v36 = v9;
  if (v15
    || (Swift::String v17 = (void *)MEMORY[0x22A688A50](a1, a2),
        Swift::String v18 = (void *)MEMORY[0x22A688A50](0x786F62796B73, 0xE600000000000000),
        id v15 = objc_msgSend(v12, sel_pathForResource_ofType_, v17, v18),
        v17,
        v18,
        v15))
  {
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v20 = 0;
  }
  uint64_t v21 = (void *)MEMORY[0x22A688A50](a1, a2);
  id v22 = objc_msgSend(v12, sel_pathForResource_ofType_, v21, 0);

  if (!v22)
  {
    uint64_t v23 = (void *)MEMORY[0x22A688A50](a1, a2);
    Swift::String v24 = (void *)MEMORY[0x22A688A50](0x6C62696572, 0xE500000000000000);
    id v22 = objc_msgSend(v12, sel_pathForResource_ofType_, v23, v24);

    if (!v22)
    {
      if (v20) {
        goto LABEL_13;
      }
      uint64_t v25 = 0;
      goto LABEL_23;
    }
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  if (v20)
  {
LABEL_13:
    swift_bridgeObjectRelease();

    return v16;
  }
  if (!v27)
  {
LABEL_23:

    return v25;
  }
  Logger.init(subsystem:category:)();
  long long v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl(&dword_227DD2000, v31, v32, "Using .reibl files is not supported publicly in RealityKit anymore. Please use EnvironmentResource.loadAllowREIbl to load .reibl files for internal useage.", v33, 2u);
    MEMORY[0x22A696500](v33, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v8);
  return v25;
}

uint64_t specialized static EnvironmentResource.loadCompiledResource(from:)(uint64_t a1)
{
  if (URL.pathExtension.getter() == 0x657974696C616572 && v3 == 0xEA0000000000766ELL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      a1 = URL.pathExtension.getter();
      uint64_t v10 = v9;
      lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
      swift_allocError();
      *(void *)uint64_t v11 = a1;
      *(void *)(v11 + 8) = v10;
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      *(unsigned char *)(v11 + 32) = 3;
      swift_willThrow();
      return a1;
    }
  }
  uint64_t v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v28);
  memset(v25, 0, sizeof(v25));
  LOBYTE(v23) = 2;
  static __REAssetBundle.__init(url:assetService:materialDefinition:with:)(a1, v28, (char *)&v23, &v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  if (v1) {
    return a1;
  }
  a1 = v32;
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
    if (result < 2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6 < 2)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
      swift_allocError();
      *(void *)uint64_t v8 = v6;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      *(unsigned char *)(v8 + 32) = 4;
      swift_willThrow();
      outlined destroy of __REAssetBundle((uint64_t)&v31);
      return a1;
    }
  }
  if ((a1 & 0xC000000000000001) == 0)
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12)
    {
      if (v12 != 1)
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = *(void *)(a1 + 40);
        swift_retain();
        swift_retain();
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v13 = MEMORY[0x22A689930](0, a1);
  uint64_t v14 = MEMORY[0x22A689930](1, a1);
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t v15 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v15, (uint64_t)v28);
  uint64_t v16 = v29;
  uint64_t v17 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
  uint64_t v18 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  uint64_t result = outlined init with copy of __RenderService?(v18, (uint64_t)&v23);
  if (v24)
  {
    outlined init with take of BindableDataInternal(&v23, (uint64_t)v25);
    uint64_t v19 = v26;
    uint64_t v20 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
    REAssetManagerPostLoadProcessImageBasedLightAsset();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    uint64_t v21 = *(void *)(v13 + 16);
    uint64_t v22 = *(void *)(v14 + 16);
    type metadata accessor for EnvironmentResource();
    a1 = swift_allocObject();
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 16) = v21;
    swift_beginAccess();
    *(void *)(a1 + 24) = v22;
    RERetain();
    REAssetSetSwiftObject();
    RERetain();
    REAssetSetSwiftObject();
    swift_release();
    swift_release();
    outlined destroy of __REAssetBundle((uint64_t)&v31);
    return a1;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized static EnvironmentResource.getCubeMapData(coreTexture:options:source:)(void *a1, uint64_t a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TextureType = RETextureAssetDataGetTextureType();
  if (TextureType != 2)
  {
    if (TextureType == 5)
    {
      uint64_t v10 = (void *)*MEMORY[0x263F375A8];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(a2 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12), (v14 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v13, (uint64_t)&v50);
        swift_bridgeObjectRelease();
        if (*((void *)&v51 + 1))
        {
          outlined destroy of BodyTrackingComponent?((uint64_t)&v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_18:
          Logger.init(subsystem:category:)();
          unint64_t v32 = Logger.logObject.getter();
          os_log_type_t v33 = static os_log_type_t.error.getter();
          int v34 = v33;
          uint64_t v47 = v32;
          if (os_log_type_enabled(v32, v33))
          {
            uint64_t v35 = swift_slowAlloc();
            HIDWORD(v44) = v34;
            uint64_t v36 = v35;
            uint64_t v37 = swift_slowAlloc();
            uint64_t v45 = v6;
            uint64_t v38 = (void *)v37;
            *(_DWORD *)uint64_t v36 = 138412546;
            uint64_t v46 = v36 + 4;
            *(void *)&long long v50 = v10;
            id v39 = v10;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v38 = v10;
            *(_WORD *)(v36 + 12) = 2112;
            uint64_t v46 = v2;
            *(void *)&long long v50 = *MEMORY[0x263F375B0];
            uint64_t v40 = v50;
            id v41 = (id)v50;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v38[1] = v40;
            _os_log_impl(&dword_227DD2000, v47, BYTE4(v44), "Options %@ and %@ only apply when creating a cube map from a 2D lat/long texture source. They are not applicable for cube map sources and will be ignored.", (uint8_t *)v36, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            uint64_t v42 = v38;
            uint64_t v6 = v45;
            MEMORY[0x22A696500](v42, -1, -1);
            MEMORY[0x22A696500](v36, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_21:
          RERetain();
          return (uint64_t)a1;
        }
      }
      else
      {
        long long v50 = 0u;
        long long v51 = 0u;
        swift_bridgeObjectRelease();
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)&v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(a2 + 16) && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28), (v30 & 1) != 0))
      {
        outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v29, (uint64_t)&v50);
      }
      else
      {
        long long v50 = 0u;
        long long v51 = 0u;
      }
      swift_bridgeObjectRelease();
      uint64_t v31 = *((void *)&v51 + 1);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (!v31) {
        goto LABEL_21;
      }
      goto LABEL_18;
    }
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(_OWORD *)uint64_t v26 = 0u;
    *(_OWORD *)(v26 + 16) = 0u;
    *(unsigned char *)(v26 + 32) = 7;
LABEL_24:
    swift_willThrow();
    return (uint64_t)a1;
  }
  uint64_t v15 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  uint64_t result = outlined init with copy of __RenderService?(v15, (uint64_t)&v48);
  if (v49)
  {
    outlined init with take of BindableDataInternal(&v48, (uint64_t)&v50);
    uint64_t v17 = *((void *)&v51 + 1);
    uint64_t v18 = v52;
    __swift_project_boxed_opaque_existential_1(&v50, *((uint64_t *)&v51 + 1));
    (*(void (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
    *(void *)&long long v48 = 0;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    a1 = (void *)RECreateCubeTextureDataFromLatLong();

    if (a1) {
      return (uint64_t)a1;
    }
    a1 = (void *)v48;
    *(void *)&long long v50 = 0;
    *((void *)&v50 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v20._countAndFlagsBits = 0xD000000000000022;
    v20._object = (void *)0x8000000228358A30;
    String.append(_:)(v20);
    type metadata accessor for URL();
    lazy protocol witness table accessor for type CancellationError and conformance CancellationError((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0xD00000000000001ALL;
    v22._object = (void *)0x8000000228358A10;
    String.append(_:)(v22);
    uint64_t v23 = *((void *)&v50 + 1);
    if (a1)
    {
      id v24 = a1;
      swift_bridgeObjectRelease();
      uint64_t v23 = 0;
      char v25 = 5;
    }
    else
    {
      a1 = (void *)v50;
      char v25 = 6;
    }
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(void *)uint64_t v43 = a1;
    *(void *)(v43 + 8) = v23;
    *(void *)(v43 + 16) = 0;
    *(void *)(v43 + 24) = 0;
    *(unsigned char *)(v43 + 32) = v25;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t (*specialized static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = partial apply for closure #1 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:);
  if (!a2) {
    return v6;
  }
  uint64_t v7 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  uint64_t result = (uint64_t (*)())outlined init with copy of __RenderService?(v7, (uint64_t)&v27);
  if (v28)
  {
    outlined init with take of BindableDataInternal(&v27, (uint64_t)v29);
    uint64_t v9 = v30;
    uint64_t v10 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    uint64_t SkyboxTexture = REIBLAssetGetSkyboxTexture();
    if (SkyboxTexture)
    {
      uint64_t v12 = SkyboxTexture;
      type metadata accessor for TextureResource();
      unint64_t v13 = static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(v12, a2);
      if (v2) {
        goto LABEL_10;
      }
      uint64_t v15 = (uint64_t)v13;
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    type metadata accessor for TextureResource();
    uint64_t SpecularTexture = REIBLAssetGetSpecularTexture();
    uint64_t v18 = static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(SpecularTexture, a2);
    if (!v2)
    {
      Swift::String v20 = v18;
      uint64_t v21 = v19;
      uint64_t DiffuseTexture = REIBLAssetGetDiffuseTexture();
      uint64_t v23 = static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(DiffuseTexture, a2);
      uint64_t v25 = v24;
      uint64_t v26 = (void *)swift_allocObject();
      v26[2] = v15;
      void v26[3] = v16;
      v26[4] = v20;
      v26[5] = v21;
      v26[6] = v23;
      v26[7] = v25;
      v26[8] = partial apply for closure #1 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:);
      v26[9] = v5;
      return partial apply for specialized closure #2 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:);
    }
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v15);
LABEL_10:
    swift_release();
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t (*specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(uint64_t a1, Class isa, uint64_t a3))()
{
  char v4 = v3;
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v7 = specialized static __ServiceLocator.shared.getter();
  uint64_t v28 = 0;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7 + 120, (uint64_t)v25);
  uint64_t v8 = v26;
  uint64_t v9 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 32);
  swift_retain();
  v10(v8, v9);
  swift_beginAccess();
  outlined init with copy of __RenderService?(v7 + 40, (uint64_t)&v20);
  if (!v21) {
    __break(1u);
  }
  outlined init with take of BindableDataInternal(&v20, (uint64_t)v22);
  uint64_t v11 = v23;
  uint64_t v12 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  uint64_t v13 = REAssetManagerImageBasedLightCreateWithCubeMapNullableAsync();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  if (!v13)
  {
    char v4 = v28;
    if (v28)
    {
      uint64_t v15 = v28;
      unint64_t v16 = 0;
      char v17 = 5;
    }
    else
    {
      unint64_t v16 = 0x8000000228358980;
      char v17 = 6;
      char v4 = (uint64_t (*)())0xD000000000000052;
    }
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(void *)uint64_t v18 = v4;
    *(void *)(v18 + 8) = v16;
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 24) = 0;
    *(unsigned char *)(v18 + 32) = v17;
    swift_willThrow();
    goto LABEL_11;
  }
  uint64_t v14 = specialized static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(v13, a3);
  if (v3)
  {
LABEL_11:
    RERelease();
    swift_release();
    return v4;
  }
  char v4 = v14;
  RERelease();
  swift_release();
  return v4;
}

unint64_t *specialized static EnvironmentResource.importResourceInternal(contentsOf:options:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v46 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  URL._bridgeToObjectiveC()(v9);
  uint64_t v11 = v10;
  RETextureImportOperationCreateWithURL();

  RETextureImportOperationSetSemantic();
  if (a2) {
    unint64_t v12 = a2;
  }
  else {
    unint64_t v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  unint64_t v47 = v12;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  unint64_t v16 = &v47;
  specialized Dictionary._Variant.removeValue(forKey:)(v13, v15, &v53);
  swift_bridgeObjectRelease();
  if (v54)
  {
    outlined init with take of Any(&v53, &v50);
    outlined init with copy of Any((uint64_t)&v50, (uint64_t)&v53);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      unint64_t v16 = (unint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v22 = v21;
      lazy protocol witness table accessor for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError();
      swift_allocError();
      *uint64_t v23 = v16;
      v23[1] = v22;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
      goto LABEL_21;
    }
    unint64_t v16 = v49;
    char v17 = (void *)MEMORY[0x22A688A50](v48, v49);
    swift_bridgeObjectRelease();
    RETextureImportOperationSetColorSpaceName();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v53, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  id v48 = 0;
  uint64_t AssetData = RETextureImportOperationCreateAssetData();
  if (!AssetData)
  {
    swift_bridgeObjectRelease();
    id v24 = v48;
    if (v48)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CancellationError and conformance CancellationError((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v25 = swift_allocError();
      *uint64_t v26 = v24;
    }
    else
    {
      uint64_t v25 = 0;
    }
    uint64_t v36 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v8, a1, v6);
    if (!v25)
    {
      uint64_t v37 = URL.absoluteString.getter();
      uint64_t v39 = v38;
      lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
      swift_allocError();
      *(void *)uint64_t v40 = v37;
      *(void *)(v40 + 8) = v39;
      uint64_t v36 = v46;
      *(void *)(v40 + 16) = 0;
      *(void *)(v40 + 24) = 0;
      *(unsigned char *)(v40 + 32) = 2;
    }
    id v41 = *(void (**)(char *, uint64_t))(v36 + 8);
    unint64_t v16 = (unint64_t *)(v36 + 8);
    v41(v8, v6);
    swift_willThrow();
    goto LABEL_21;
  }
  uint64_t v19 = (void *)AssetData;
  if (v48) {

  }
  uint64_t v20 = v47;
  swift_bridgeObjectRetain();
  specialized static EnvironmentResource.getCubeMapData(coreTexture:options:source:)(v19, v20);
  if (v3)
  {
    swift_bridgeObjectRelease_n();
    RERelease();
LABEL_21:
    RERelease();
    return v16;
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v27, (uint64_t)&v50);
  uint64_t v28 = v51;
  uint64_t v29 = v52;
  __swift_project_boxed_opaque_existential_1(&v50, v51);
  (*(void (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
  uint64_t TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
  uint64_t v31 = swift_bridgeObjectRetain();
  uint64_t v32 = specialized _NativeDictionary.filter(_:)(v31, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
  swift_bridgeObjectRelease();
  uint64_t v33 = swift_bridgeObjectRetain();
  int v34 = (objc_class *)specialized _NativeDictionary.filter(_:)(v33, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
  swift_bridgeObjectRelease_n();
  uint64_t v35 = specialized static EnvironmentResource.generateIBLAssetInternal(cubeMap:compilationOptions:compressOptions:)(TextureAssetFromData, v34, v32);
  unint64_t v16 = (unint64_t *)v35();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v43 = type metadata accessor for EnvironmentResource();
  *(void *)(inited + 32) = v16;
  uint64_t v46 = inited + 32;
  *(void *)(inited + 56) = v43;
  *(void *)(inited + 64) = &protocol witness table for EnvironmentResource;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  swift_release();
  swift_release();
  swift_release();
  RERelease();
  RERelease();
  RERelease();
  return v16;
}

uint64_t specialized static EnvironmentResource.loadPrivate(named:in:allowsREIbl:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int v58 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  char v56 = (char *)&v55 - v16;
  uint64_t v57 = v4;
  if (a3) {
    id v17 = a3;
  }
  else {
    id v17 = objc_msgSend(self, sel_mainBundle);
  }
  id v18 = a3;
  uint64_t v67 = a1;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = (void *)MEMORY[0x22A688A50](v19, a2);
  Swift::String v22 = (void *)MEMORY[0x22A688A50](0x657974696C616572, 0xEA0000000000766ELL);
  uint64_t v23 = v17;
  id v24 = objc_msgSend(v17, sel_URLForResource_withExtension_, v21, v22);

  if (v24)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v25 = *(void (**)(void))(v12 + 32);
    ((void (*)(char *, char *, uint64_t))v25)(v10, v14, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      uint64_t v26 = (uint64_t)v56;
      v25();
      uint64_t v28 = v23;
      if (URL.pathExtension.getter() == 0x657974696C616572 && v27 == 0xEA0000000000766ELL)
      {
        swift_bridgeObjectRelease();
        uint64_t FailedMessage = v57;
      }
      else
      {
        char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t FailedMessage = v57;
        if ((v50 & 1) == 0)
        {
          unint64_t v53 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
          uint64_t v54 = specialized static EnvironmentResource.importResourceInternal(contentsOf:options:)(v26, v53);
          if (FailedMessage)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t FailedMessage = v54;
            swift_bridgeObjectRelease();
          }
          goto LABEL_28;
        }
      }
      uint64_t v51 = specialized static EnvironmentResource.loadCompiledResource(from:)(v26);
      if (!FailedMessage) {
        uint64_t FailedMessage = (void *)v51;
      }
LABEL_28:
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v26, v11);
      goto LABEL_29;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
  uint64_t v28 = v23;
  id v30 = v23;
  uint64_t v31 = v67;
  uint64_t FailedMessage = (void *)v20;
  specialized static EnvironmentResource.resolvedPath(forName:in:allowsREIbl:)(v67, v20, v28, v58 & 1);
  uint64_t v33 = v32;

  if (!v33)
  {
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(void *)uint64_t v48 = v31;
    *(void *)(v48 + 8) = v20;
    *(void *)(v48 + 16) = 0;
    *(void *)(v48 + 24) = 0;
    *(unsigned char *)(v48 + 32) = 0;
LABEL_17:
    swift_bridgeObjectRetain();
    swift_willThrow();
LABEL_29:

    return (uint64_t)FailedMessage;
  }
  uint64_t v34 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v34, (uint64_t)v64);
  uint64_t v35 = v65;
  uint64_t v36 = v66;
  __swift_project_boxed_opaque_existential_1(v64, v65);
  (*(void (**)(uint64_t, uint64_t))(v36 + 32))(v35, v36);
  uint64_t v37 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  uint64_t result = outlined init with copy of __RenderService?(v37, (uint64_t)&v59);
  if (v60)
  {
    outlined init with take of BindableDataInternal(&v59, (uint64_t)v61);
    uint64_t v39 = v62;
    uint64_t v40 = v63;
    __swift_project_boxed_opaque_existential_1(v61, v62);
    (*(void (**)(uint64_t, uint64_t))(v40 + 24))(v39, v40);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v41 = REAssetManagerImageBasedLightMemoryAssetCreateFromReiblFileAsync();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    if (v41)
    {
      RERetain();
      RERelease();
      REAssetHandleLoadNow();
      if (REAssetHandleLoadFailed())
      {
        uint64_t v42 = (void *)REAssetCopyDescription();
        Swift::String v43 = String.init(_:)(v42);
        uint64_t FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v46 = v45;

        lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
        swift_allocError();
        *(Swift::String *)uint64_t v47 = v43;
        *(void *)(v47 + 16) = v44;
        *(void *)(v47 + 24) = v46;
        *(unsigned char *)(v47 + 32) = 1;
        swift_willThrow();
        RERelease();
      }
      else
      {
        uint64_t SkyboxTexture = REIBLAssetGetSkyboxTexture();
        type metadata accessor for EnvironmentResource();
        uint64_t FailedMessage = (void *)swift_allocObject();
        FailedMessage[3] = 0;
        FailedMessage[2] = v41;
        swift_beginAccess();
        FailedMessage[3] = SkyboxTexture;
        RERetain();
        REAssetSetSwiftObject();
        if (SkyboxTexture)
        {
          RERetain();
          REAssetSetSwiftObject();
        }
        RERelease();
      }
      goto LABEL_29;
    }
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(void *)uint64_t v49 = v67;
    *(void *)(v49 + 8) = FailedMessage;
    *(void *)(v49 + 16) = 0;
    *(void *)(v49 + 24) = 0;
    *(unsigned char *)(v49 + 32) = 2;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for EnvironmentResource()
{
  return self;
}

uint64_t partial apply for closure #1 in static EnvironmentResource.generateAsync(fromLatLong:withName:)()
{
  return partial apply for closure #1 in static EnvironmentResource.generateAsync(fromLatLong:withName:)();
}

{
  uint64_t *v0;

  return specialized static EnvironmentResource.generateCube(fromEquirectangular:withName:compilationOptions:semantic:mipmapOptions:compressionNone:)(v0[3], v0[4], v0[5], 0, 4, 0, 0);
}

uint64_t specialized static EnvironmentResource.validate(cubeTexture:)()
{
  if (RETextureAssetGetSemantic() - 3 >= 2)
  {
    lazy protocol witness table accessor for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError();
    swift_allocError();
    *uint64_t v2 = 0;
    v2[1] = 0;
  }
  else
  {
    uint64_t result = RETextureAssetGetTextureType();
    if (result == 5) {
      return result;
    }
    lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
    swift_allocError();
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(unsigned char *)(v1 + 32) = 7;
  }
  return swift_willThrow();
}

uint64_t specialized static EnvironmentResource.exportCompiledResource(contentsOf:to:for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v27 = *(void *)a3;
  unint64_t v28 = *(void *)(a3 + 8);
  uint64_t v8 = *(unsigned __int8 *)(a3 + 28);
  uint64_t v9 = *(unsigned int *)(a3 + 24);
  uint64_t v63 = a2;
  if (URL.pathExtension.getter() == 0x657974696C616572 && v10 == 0xEA0000000000766ELL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v23 = URL.pathExtension.getter();
      uint64_t v25 = v24;
      lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError();
      swift_allocError();
      *(void *)uint64_t v26 = v23;
      *(void *)(v26 + 8) = v25;
      *(void *)(v26 + 16) = 0;
      *(void *)(v26 + 24) = 0;
      *(unsigned char *)(v26 + 32) = 3;
      return swift_willThrow();
    }
  }
  uint64_t result = (uint64_t)specialized static EnvironmentResource.importResourceInternal(contentsOf:options:)(a1, a4);
  if (!v4)
  {
    uint64_t v13 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_228336970;
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      uint64_t v15 = result;
      uint64_t v16 = MEMORY[0x263F8DD08];
      uint64_t v56 = MEMORY[0x263F8DD08];
      *(void *)&long long v54 = v14;
      outlined init with copy of Any((uint64_t)&v54, (uint64_t)v48);
      swift_dynamicCast();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      RERetain();
      type metadata accessor for __REAsset();
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v29[0];
      *(void *)(v15 + 32) = v17;
      uint64_t result = swift_beginAccess();
      uint64_t v18 = *(void *)(v13 + 24);
      if (v18)
      {
        v62[3] = v16;
        v62[0] = v18;
        outlined init with copy of Any((uint64_t)v62, (uint64_t)v48);
        swift_dynamicCast();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
        RERetain();
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = v29[0];
        *(void *)(v15 + 40) = v19;
        *(void *)&v48[0] = v15;
        specialized Array._endMutation()();
        uint64_t v20 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v20, (uint64_t)v48);
        outlined init with copy of __REAssetService((uint64_t)v48, (uint64_t)v29);
        Swift::Int v21 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        unint64_t v22 = swift_bridgeObjectRetain();
        __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v22, (uint64_t)v29, v21, 0, v53);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
        swift_bridgeObjectRelease();
        char v52 = 0;
        char v51 = 1;
        char v50 = 1;
        LOBYTE(v54) = 2;
        *((void *)&v54 + 1) = 1;
        LOBYTE(v55) = 0;
        uint64_t v56 = 0;
        LODWORD(v57) = 16777217;
        *((void *)&v57 + 1) = v27;
        *(void *)&long long v58 = v28;
        *((void *)&v58 + 1) = v7;
        BYTE4(v59) = (v9 | (unint64_t)(v8 << 32)) >> 32;
        LODWORD(v59) = v9;
        uint64_t v60 = 0;
        v61[0] = 1;
        *(_WORD *)&v61[1] = 0;
        memset(&v61[8], 0, 64);
        v61[72] = 1;
        *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)&v61[57];
        v48[2] = v57;
        v48[3] = v58;
        v48[4] = v59;
        v48[5] = *(_OWORD *)v61;
        v48[6] = *(_OWORD *)&v61[16];
        v48[7] = *(_OWORD *)&v61[32];
        v49[0] = *(_OWORD *)&v61[48];
        v48[0] = v54;
        v48[1] = v55;
        outlined copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v27, v28);
        outlined retain of __REAssetBundle.ExportOptions((uint64_t)&v54);
        __REAssetBundle.writeWithCPlusPlus(to:with:)(v63, v48);
        swift_release();
        outlined release of __REAssetBundle.ExportOptions((uint64_t)&v54);
        outlined destroy of __REAssetBundle((uint64_t)v53);
        LOBYTE(v29[0]) = 2;
        v29[1] = 1;
        char v30 = v52;
        uint64_t v31 = 0;
        __int16 v32 = 1;
        char v33 = 0;
        char v34 = v51;
        uint64_t v35 = v27;
        unint64_t v36 = v28;
        uint64_t v37 = v7;
        char v39 = (v9 | (unint64_t)(v8 << 32)) >> 32;
        int v38 = v9;
        uint64_t v40 = 0;
        char v41 = v50;
        __int16 v42 = 0;
        long long v46 = 0u;
        long long v45 = 0u;
        long long v44 = 0u;
        long long v43 = 0u;
        char v47 = 1;
        return outlined release of __REAssetBundle.ExportOptions((uint64_t)v29);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t objectdestroyTm_3()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in EnvironmentResource.init(cube:options:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  RERetain();
  return v1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentResource.CreateOptions.SamplingQuality and conformance EnvironmentResource.CreateOptions.SamplingQuality()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions.SamplingQuality and conformance EnvironmentResource.CreateOptions.SamplingQuality;
  if (!lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions.SamplingQuality and conformance EnvironmentResource.CreateOptions.SamplingQuality)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions.SamplingQuality and conformance EnvironmentResource.CreateOptions.SamplingQuality);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentResource.CreateOptions and conformance EnvironmentResource.CreateOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions and conformance EnvironmentResource.CreateOptions;
  if (!lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions and conformance EnvironmentResource.CreateOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentResource.CreateOptions and conformance EnvironmentResource.CreateOptions);
  }
  return result;
}

uint64_t sub_2280E3DB0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 24);
  return result;
}

uint64_t sub_2280E3DF8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 24) = v2;
  return result;
}

uint64_t method lookup function for EnvironmentResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EnvironmentResource);
}

uint64_t dispatch thunk of EnvironmentResource.coreSkyboxAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of EnvironmentResource.coreSkyboxAsset.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of EnvironmentResource.coreSkyboxAsset.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of EnvironmentResource.coreIBLAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of EnvironmentResource.coreSkyboxAssetRef.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t getEnumTagSinglePayload for EnvironmentResource.CreateOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 2);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentResource.CreateOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 2) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentResource.CreateOptions()
{
  return &type metadata for EnvironmentResource.CreateOptions;
}

unsigned char *storeEnumTagSinglePayload for EnvironmentResource.CreateOptions.SamplingQuality(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280E406CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentResource.CreateOptions.SamplingQuality()
{
  return &type metadata for EnvironmentResource.CreateOptions.SamplingQuality;
}

ValueMetadata *type metadata accessor for __SkyboxMaterial()
{
  return &type metadata for __SkyboxMaterial;
}

unint64_t lazy protocol witness table accessor for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError;
  if (!lazy protocol witness table cache variable for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentResource.OptionError and conformance EnvironmentResource.OptionError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError;
  if (!lazy protocol witness table cache variable for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentResource.LoadError and conformance EnvironmentResource.LoadError);
  }
  return result;
}

uint64_t outlined retain of __REAssetBundle.ExportOptions(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 128);
  id v5 = *(id *)(a1 + 24);
  outlined copy of __REAssetBundle.ExportOptions.DeploymentTarget?(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v7);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2280E4228()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(a1, a2, closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:));
}

uint64_t _s10RealityKit11LoadRequestC_12dependenciesACyxGyys6ResultOyxs5Error_pGcc_0A10Foundation0cD12DependenciesCSgtcfcyyAIccfU_AA19EnvironmentResourceC_Tg5TA_0(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_2280E42A8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2280E42E0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)()
{
  return partial apply for doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t (*)(void, void, void, void, void, void, void, void))doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:));
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t sub_2280E436C()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_2280E43AC()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)()
{
  return closure #1 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(*(void *)(v0 + 16));
}

uint64_t sub_2280E43D8()
{
  if (v0[2]) {
    swift_release();
  }
  if (v0[4]) {
    swift_release();
  }
  if (v0[6]) {
    swift_release();
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for specialized closure #2 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)()
{
  return specialized closure #2 in static EnvironmentResource.compressWithEngineQueueCompletion(coreIBLAsset:compressOptions:)(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(void *)(v0 + 40), *(void (**)(uint64_t))(v0 + 48), *(void *)(v0 + 56), *(uint64_t (**)(void))(v0 + 64));
}

uint64_t sub_2280E4468()
{
  swift_bridgeObjectRelease();

  swift_release();

  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t partial apply for closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void))closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:));
}

uint64_t partial apply for closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8]);
}

uint64_t sub_2280E4518()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(a1, a2, v7, v2 + v6, v8);
}

uint64_t sub_2280E46B4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + v2;
  uint64_t v5 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];

  return doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(v3, v4, v6, v7);
}

uint64_t sub_2280E4838()
{
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 96, 7);
}

void partial apply for closure #1 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)()
{
  closure #1 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(v0 + 16, *(void (**)(uint64_t, uint64_t))(v0 + 80));
}

uint64_t sub_2280E489C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t partial apply for doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)()
{
  return partial apply for doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)((uint64_t (*)(void, void, void, void, void, void, void, void))doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:));
}

uint64_t partial apply for doGenerateEnvironmentAsync #1 @Sendable () in closure #1 in static EnvironmentResource.generateAsyncInternal(createCubeFunc:compilationOptions:compressOptions:)(uint64_t (*a1)(void, void, void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_2280E4928()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)()
{
  return closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)(*(void *)(v0 + 16), *(void (**)(void, void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t objectdestroy_46Tm()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in closure #1 in doLoadEnvironmentAsync #1 () in closure #2 in static EnvironmentResource.loadAsyncPrivate(named:in:)()
{
  closure #2 in doLoadEnvironmentAsync #1 () in closure #1 in static EnvironmentResource.loadAsyncPrivate(named:in:)(*(void (**)(void *, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32));
}

uint64_t lazy protocol witness table accessor for type CancellationError and conformance CancellationError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id outlined copy of EnvironmentResource.LoadError(id result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 2:
    case 3:
    case 6:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRetain();
LABEL_4:
      uint64_t result = (id)swift_bridgeObjectRetain();
      break;
    case 5:
      uint64_t result = result;
      break;
    default:
      return result;
  }
  return result;
}

void destroy for EnvironmentResource.LoadError(uint64_t a1)
{
}

void outlined consume of EnvironmentResource.LoadError(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 2:
    case 3:
    case 6:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      break;
    case 5:

      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for EnvironmentResource.LoadError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of EnvironmentResource.LoadError(*(id *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for EnvironmentResource.LoadError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of EnvironmentResource.LoadError(*(id *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of EnvironmentResource.LoadError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for EnvironmentResource.LoadError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of EnvironmentResource.LoadError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentResource.LoadError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentResource.LoadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 249;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for EnvironmentResource.LoadError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 6u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 7);
  }
}

uint64_t destructiveInjectEnumTag for EnvironmentResource.LoadError(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(void *)uint64_t result = a2 - 7;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 7;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

void *type metadata accessor for EnvironmentResource.LoadError()
{
  return &unk_26DCA8600;
}

void *type metadata accessor for EnvironmentResource.OptionError()
{
  return &unk_26DCA8690;
}

uint64_t static Reverb.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 11)
  {
    if (v3 == 11) {
      return 1;
    }
  }
  else if (v2 == 10)
  {
    if (v3 == 10) {
      return 1;
    }
  }
  else if (v2 == v3 && (v3 & 0xFE) != 10)
  {
    return 1;
  }
  return 0;
}

void Reverb.Preset.init(core:)(uint64_t a1@<X0>, char *a2@<X8>)
{
  switch(a1)
  {
    case 201:
      char v3 = 1;
      break;
    case 202:
      char v3 = 2;
      break;
    case 203:
      char v3 = 3;
      break;
    case 204:
      char v3 = 4;
      break;
    case 205:
      char v3 = 5;
      break;
    case 206:
      char v3 = 6;
      break;
    case 207:
      char v3 = 8;
      break;
    case 208:
      char v3 = 7;
      break;
    case 209:
      char v3 = 9;
      break;
    default:
      if (a1 == 101)
      {
        char v3 = 0;
      }
      else
      {
        if (one-time initialization token for audio != -1) {
          swift_once();
        }
        uint64_t v4 = type metadata accessor for Logger();
        __swift_project_value_buffer(v4, (uint64_t)static Logger.audio);
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v5, v6))
        {
          uint64_t v7 = (uint8_t *)swift_slowAlloc();
          uint64_t v8 = swift_slowAlloc();
          uint64_t v11 = v8;
          *(_DWORD *)uint64_t v7 = 136315138;
          type metadata accessor for REAudioReverbPreset(0);
          uint64_t v9 = String.init<A>(describing:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_227DD2000, v5, v6, "Unknown REAudioReverbPreset case: %s", v7, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x22A696500](v8, -1, -1);
          MEMORY[0x22A696500](v7, -1, -1);
        }

        char v3 = 10;
      }
      break;
  }
  *a2 = v3;
}

unsigned char *static Reverb.preset(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t Reverb.Preset.core.getter()
{
  unint64_t v1 = *v0;
  if (v1 < 0xA) {
    return qword_228336E30[v1];
  }
  if (one-time initialization token for audio != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.audio);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v10 = v7;
    *(_DWORD *)os_log_type_t v6 = 136315138;
    uint64_t v8 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227DD2000, v4, v5, "Unknown reverb preset case: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v7, -1, -1);
    MEMORY[0x22A696500](v6, -1, -1);
  }

  return 100;
}

void static Reverb.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

void static Reverb.anechoic.getter(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Reverb.Kind(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 11) {
    return v3 == 11;
  }
  if (v2 == 10) {
    return v3 == 10;
  }
  if ((v3 & 0xFE) == 0xA) {
    return 0;
  }
  return v2 == v3;
}

void Reverb.hash(into:)()
{
  Swift::UInt v1 = *v0;
  if (v1 == 10)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 11)
  {
    Swift::UInt v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int Reverb.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 10)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 11)
  {
    Swift::UInt v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static Reverb.Preset.outside.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static Reverb.Preset.concertHall.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static Reverb.Preset.veryLargeRoom.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static Reverb.Preset.largeRoom.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static Reverb.Preset.largeRoomTreated.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static Reverb.Preset.mediumRoomDry.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static Reverb.Preset.smallRoomBright.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

void static Reverb.Preset.verySmallRoomBright.getter(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

void static Reverb.Preset.listeningRoom.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void static Reverb.Preset.livingRoom.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void Reverb.Preset.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Reverb.Preset.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int Reverb.Preset.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Reverb and conformance Reverb()
{
  unint64_t result = lazy protocol witness table cache variable for type Reverb and conformance Reverb;
  if (!lazy protocol witness table cache variable for type Reverb and conformance Reverb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Reverb and conformance Reverb);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Reverb.Preset and conformance Reverb.Preset()
{
  unint64_t result = lazy protocol witness table cache variable for type Reverb.Preset and conformance Reverb.Preset;
  if (!lazy protocol witness table cache variable for type Reverb.Preset and conformance Reverb.Preset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Reverb.Preset and conformance Reverb.Preset);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Reverb(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280E55C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Reverb()
{
  return &type metadata for Reverb;
}

ValueMetadata *type metadata accessor for Reverb.Preset()
{
  return &type metadata for Reverb.Preset;
}

unsigned char *storeEnumTagSinglePayload for Reverb.Preset(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280E56DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Reverb.Preset.Kind()
{
  return &type metadata for Reverb.Preset.Kind;
}

uint64_t getEnumTagSinglePayload for Reverb.Kind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF5)
  {
    unsigned int v2 = a2 + 11;
    if (a2 + 11 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 11;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 11;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2280E57C4);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 11;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 0xA) {
    unsigned int v8 = v7 - 9;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for Reverb.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 11;
  if (a3 + 11 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v7 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x2280E58ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for Reverb.Kind(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 0xA) {
    return v1 - 9;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for Reverb.Kind(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 9;
  }
  return result;
}

ValueMetadata *type metadata accessor for Reverb.Kind()
{
  return &type metadata for Reverb.Kind;
}

unint64_t lazy protocol witness table accessor for type Reverb.Kind and conformance Reverb.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type Reverb.Kind and conformance Reverb.Kind;
  if (!lazy protocol witness table cache variable for type Reverb.Kind and conformance Reverb.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Reverb.Kind and conformance Reverb.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Reverb.Preset.Kind and conformance Reverb.Preset.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type Reverb.Preset.Kind and conformance Reverb.Preset.Kind;
  if (!lazy protocol witness table cache variable for type Reverb.Preset.Kind and conformance Reverb.Preset.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Reverb.Preset.Kind and conformance Reverb.Preset.Kind);
  }
  return result;
}

Swift::Void __swiftcall Entity.generateCollisionShapes(recursive:)(Swift::Bool recursive)
{
  if (dynamic_cast_existential_2_conditional(v1))
  {
    swift_retain();
    HasCollision.collision.getter(v25);
    uint64_t v3 = v25[0];
    swift_bridgeObjectRelease();
    if (!v3) {
      HasModel.__generateCollisionShape(isStatic:)(0);
    }
    swift_release();
  }
  if (recursive)
  {
    swift_retain();
    if (REEntityGetChildCount() < 1)
    {
LABEL_41:
      swift_release();
    }
    else
    {
      uint64_t v4 = 0;
      while (v4 < REEntityGetChildCount())
      {
        uint64_t Child = REEntityGetChild();
        if (!Child) {
          goto LABEL_48;
        }
        uint64_t v6 = Child;
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if (REEntityIsBeingDestroyed()) {
            goto LABEL_47;
          }
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          if (!REEntityGetCustomComponent()) {
            goto LABEL_38;
          }
          uint64_t Object = RECustomComponentGetObject();
          if (!Object) {
            goto LABEL_38;
          }
          unsigned int v8 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8)) {
            BOOL v9 = 1;
          }
          else {
            BOOL v9 = v8 == 0;
          }
          if (v9)
          {
            swift_retain();
          }
          else
          {
            int v10 = *v8;
            uint64_t v11 = String.init(utf8String:)();
            if (v12) {
              Swift::Int v13 = v11;
            }
            else {
              Swift::Int v13 = 0;
            }
            if (v12) {
              unint64_t v14 = v12;
            }
            else {
              unint64_t v14 = 0xE000000000000000;
            }
            unsigned int v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(void *)(swift_allocObject() + 16) = v8;
          }
          if (!v8) {
            goto LABEL_49;
          }
          swift_retain();
          uint64_t v15 = String.init(utf8String:)();
          unint64_t v17 = v16;
          swift_release();
          uint64_t v18 = v17 ? v15 : 0;
          unint64_t v19 = v17 ? v17 : 0xE000000000000000;
          uint64_t v20 = (NSString *)MEMORY[0x22A688A50](v18, v19);
          swift_bridgeObjectRelease();
          Class v21 = NSClassFromString(v20);

          swift_release();
          if (!v21) {
            goto LABEL_38;
          }
          swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          uint64_t v22 = swift_dynamicCastMetatype();
          if (v22)
          {
            uint64_t v23 = (*(uint64_t (**)(void))(v22 + 232))();
            uint64_t v24 = *(void *)(v23 + 16);
            swift_retain();
            MEMORY[0x22A68E750](v24, 0);
            *(void *)(v23 + 16) = v6;
            MEMORY[0x22A68E750](v6, v23);
            swift_release();
          }
          else
          {
LABEL_38:
            makeEntity(for:)(v6);
          }
        }
        if (v4 >= REEntityGetChildCount()) {
          goto LABEL_46;
        }
        ++v4;
        Entity.generateCollisionShapes(recursive:)(1);
        swift_release();
        if (v4 >= REEntityGetChildCount()) {
          goto LABEL_41;
        }
      }
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
    }
  }
}

uint64_t specialized Entity.ChildCollection.IndexingIterator.next()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (v1 >= REEntityGetChildCount()) {
    return 0;
  }
  uint64_t result = Entity.ChildCollection.subscript.getter(v1);
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    uint64_t result = REEntityGetChildCount();
    if (v1 < result)
    {
      *(void *)(v0 + 8) = v1 + 1;
      return v3;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall HasModel.__generateCollisionShape()()
{
}

Swift::Void __swiftcall Entity.generateCollisionShapes(recursive:static:)(Swift::Bool recursive, Swift::Bool a2)
{
  if (dynamic_cast_existential_2_conditional(v2))
  {
    swift_retain();
    HasCollision.collision.getter(v27);
    uint64_t v5 = v27[0];
    swift_bridgeObjectRelease();
    if (!v5) {
      HasModel.__generateCollisionShape(isStatic:)(a2);
    }
    swift_release();
  }
  if (recursive)
  {
    swift_retain();
    if (REEntityGetChildCount() < 1)
    {
LABEL_41:
      swift_release();
    }
    else
    {
      uint64_t v6 = 0;
      while (v6 < REEntityGetChildCount())
      {
        uint64_t Child = REEntityGetChild();
        if (!Child) {
          goto LABEL_48;
        }
        uint64_t v8 = Child;
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if (REEntityIsBeingDestroyed()) {
            goto LABEL_47;
          }
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          if (!REEntityGetCustomComponent()) {
            goto LABEL_38;
          }
          uint64_t Object = RECustomComponentGetObject();
          if (!Object) {
            goto LABEL_38;
          }
          int v10 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8)) {
            BOOL v11 = 1;
          }
          else {
            BOOL v11 = v10 == 0;
          }
          if (v11)
          {
            swift_retain();
          }
          else
          {
            int v12 = *v10;
            uint64_t v13 = String.init(utf8String:)();
            if (v14) {
              Swift::Int v15 = v13;
            }
            else {
              Swift::Int v15 = 0;
            }
            if (v14) {
              unint64_t v16 = v14;
            }
            else {
              unint64_t v16 = 0xE000000000000000;
            }
            int v10 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v12 == 42, v15, v16);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(void *)(swift_allocObject() + 16) = v10;
          }
          if (!v10) {
            goto LABEL_49;
          }
          swift_retain();
          uint64_t v17 = String.init(utf8String:)();
          unint64_t v19 = v18;
          swift_release();
          uint64_t v20 = v19 ? v17 : 0;
          unint64_t v21 = v19 ? v19 : 0xE000000000000000;
          uint64_t v22 = (NSString *)MEMORY[0x22A688A50](v20, v21);
          swift_bridgeObjectRelease();
          Class v23 = NSClassFromString(v22);

          swift_release();
          if (!v23) {
            goto LABEL_38;
          }
          swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          uint64_t v24 = swift_dynamicCastMetatype();
          if (v24)
          {
            uint64_t v25 = (*(uint64_t (**)(void))(v24 + 232))();
            uint64_t v26 = *(void *)(v25 + 16);
            swift_retain();
            MEMORY[0x22A68E750](v26, 0);
            *(void *)(v25 + 16) = v8;
            MEMORY[0x22A68E750](v8, v25);
            swift_release();
          }
          else
          {
LABEL_38:
            makeEntity(for:)(v8);
          }
        }
        if (v6 >= REEntityGetChildCount()) {
          goto LABEL_46;
        }
        ++v6;
        Entity.generateCollisionShapes(recursive:static:)(1, a2);
        swift_release();
        if (v6 >= REEntityGetChildCount()) {
          goto LABEL_41;
        }
      }
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
    }
  }
}

Swift::Void __swiftcall HasModel.__generateCollisionShape(isStatic:)(Swift::Bool isStatic)
{
  uint64_t v2 = v1;
  if (!dynamic_cast_existential_2_conditional(v1)) {
    return;
  }
  swift_retain();
  HasCollision.collision.getter(v16);
  uint64_t v4 = v16[0];
  swift_bridgeObjectRelease();
  if (v4)
  {
    __break(1u);
LABEL_22:
    __n128 v15 = v5;
    swift_once();
    __n128 v5 = v15;
    goto LABEL_15;
  }
  HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)(0, v2);
  if (REAABBIsEmpty())
  {
    swift_release();
    return;
  }
  REAABBExtents();
  if (v8 < 0.0001 && v6 < 0.0001 && v7 < 0.0001)
  {
    uint64_t v12 = specialized static ShapeResource.generateSphere(radius:)();
    goto LABEL_17;
  }
  specialized static ShapeResource.generateBox(size:)();
  REAABBCenter();
  __n128 v5 = v11;
  if (one-time initialization token for identity != -1) {
    goto LABEL_22;
  }
LABEL_15:
  uint64_t v12 = ShapeResource.offsetBy(rotation:translation:)((__n128)static simd_quatf.identity, v5);
  swift_release();
LABEL_17:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_22831E4E0;
  *(void *)(v13 + 32) = v12;
  v16[0] = v13;
  specialized Array._endMutation()();
  uint64_t v14 = 0x100000000;
  if (!isStatic) {
    uint64_t v14 = 0;
  }
  v16[1] = v14;
  v16[2] = 0xFFFFFFFF00000001;
  swift_retain();
  HasCollision.collision.setter(v16);
  swift_release();
  swift_release();
}

void *Scene.__allocating_init(name:addSystemsCallback:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v4 = RESceneCreate();
  swift_release();
  a3(v4);
  type metadata accessor for Scene();
  __n128 v5 = (void *)swift_allocObject();
  Scene.init(coreScene:)(v4);
  swift_retain();
  RERelease();
  MEMORY[0x22A692120](v4, 1);
  Scene.addDefaultCamera()();
  if (!v5[12])
  {
    type metadata accessor for Entity();
    swift_allocObject();
    uint64_t v6 = Entity.init()();
    REEntitySetName();
    RENetworkMarkEntityMetadataDirty();
    Entity.turnIntoNinja()();
    REAudioMixerComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneAddEntity();
    v5[12] = v6;
    swift_release();
  }
  swift_beginAccess();
  v5[9] = 0;
  swift_release();
  uint64_t active = v5[9];
  if (!active) {
    uint64_t active = Scene.internalActiveCamera.getter();
  }
  uint64_t v8 = v5[10];
  v5[10] = active;
  swift_retain();
  swift_retain();
  Scene.internalAudioListener.didset(v8);
  swift_release();
  swift_release();
  swift_release();
  return v5;
}

uint64_t static Scene.fromCore(_:)(uint64_t a1)
{
  id v2 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v2)
  {
    return swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    Scene.init(coreScene:)(a1);
    return v4;
  }
}

uint64_t one-time initialization function for pickingEmitter()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v8);
  uint64_t v1 = v9;
  uint64_t v2 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if (AssetHandle)
  {
    uint64_t v9 = MEMORY[0x263F8DD08];
    v8[0] = AssetHandle;
    outlined init with copy of Any((uint64_t)v8, (uint64_t)v7);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    RERetain();
    type metadata accessor for __REAsset();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v6;
    type metadata accessor for __RERenderGraphEmitter();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    pickingEmitter = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t pickingEmitter.getter()
{
  if (one-time initialization token for pickingEmitter != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t Scene.coreScene.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Scene.session.getter()
{
  swift_beginAccess();
  return MEMORY[0x22A696620](v0 + 64);
}

void Scene.session.setter(void *a1)
{
}

void (*Scene.session.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = MEMORY[0x22A696620](v1 + 64);
  return Scene.session.modify;
}

void Scene.session.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }

  free(v3);
}

uint64_t Scene.name.getter()
{
  RESceneGetName();

  return String.init(cString:)();
}

uint64_t Scene.__audioListener.getter()
{
  return swift_retain();
}

uint64_t Scene.__audioListener.setter(uint64_t a1)
{
  specialized Scene.__audioListener.setter(a1);

  return swift_release();
}

uint64_t (*Scene.__audioListener.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return Scene.__audioListener.modify;
}

uint64_t Scene.__audioListener.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (*(void *)(v5 + 72))
    {
      uint64_t active = *(void *)(v5 + 72);
    }
    else
    {
      uint64_t active = Scene.internalActiveCamera.getter();
      uint64_t v5 = *(void *)(a1 + 24);
    }
    uint64_t v7 = *(void *)(v5 + 80);
    *(void *)(v5 + 80) = active;
    swift_retain();
    swift_retain();
    Scene.internalAudioListener.didset(v7);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t Scene.internalAudioListener.didset(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 80);
  if (!result)
  {
    if (!v2) {
      return result;
    }
    goto LABEL_10;
  }
  if (!v2 || *(void *)(result + 16) != *(void *)(v2 + 16))
  {
    swift_retain();
    REListenerComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      REListenerComponentSetSystemListener();
      REListenerComponentGetComponentType();
      REEntityRemoveComponentByClass();
    }
    uint64_t result = swift_release();
    if (*(void *)(v1 + 80))
    {
LABEL_10:
      swift_retain();
      REListenerComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      REListenerComponentSetSystemListener();
      return swift_release();
    }
  }
  return result;
}

AUAudioUnit_optional __swiftcall Scene.__addPostProcessingAudioEffect(_:)(AudioComponentDescription a1)
{
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  REEngineGetServiceLocator();
  if (REServiceLocatorGetAudioService())
  {
    inserted = (void *)REAudioServiceInsertPostProcessingEffect();
    uint64_t v2 = inserted;
  }
  else
  {
    uint64_t v2 = (objc_class *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result.value.super.Class isa = v2;
  result.Swift::Bool is_nil = v3;
  return result;
}

uint64_t key path setter for Scene.defaultCamera : Scene(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 88) = v2;
  swift_retain();
  return swift_release();
}

uint64_t Scene.defaultCamera.getter()
{
  return swift_retain();
}

uint64_t Scene.defaultCamera.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 88) = a1;
  return swift_release();
}

uint64_t Scene.internalActiveCamera.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (!result)
  {
    uint64_t result = closure #1 in Scene.internalActiveCamera.getter(54, (uint64_t)v0);
    if (!result)
    {
      uint64_t result = closure #1 in Scene.internalActiveCamera.getter(55, (uint64_t)v0);
      if (!result)
      {
        uint64_t result = closure #1 in Scene.internalActiveCamera.getter(56, (uint64_t)v0);
        if (!result)
        {
          swift_beginAccess();
          if (!v0[9])
          {
            swift_beginAccess();
            uint64_t v2 = v0[10];
            v0[10] = v0[11];
            swift_retain_n();
            Scene.internalAudioListener.didset(v2);
            swift_release();
            swift_release();
          }
          swift_beginAccess();
          return swift_retain();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in Scene.internalActiveCamera.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = RESceneGetComponentsOfType();
  if (v4 < 0)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    return result;
  }
  uint64_t v5 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v6 = result;
  uint64_t v36 = a2;
  uint64_t v7 = a2 + 88;
  uint64_t result = swift_beginAccess();
  while (1)
  {
    if (!v5)
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    uint64_t Entity = REComponentGetEntity();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v9 = swift_dynamicCastClassUnconditional();
LABEL_36:
      uint64_t v27 = v9;
      goto LABEL_37;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if (result) {
      goto LABEL_53;
    }
    if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v10 & 1) == 0))
    {
      swift_endAccess();
      uint64_t v11 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v37 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypeObjectIdToHandles = v37;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    if (!REEntityGetCustomComponent()) {
      goto LABEL_35;
    }
    uint64_t Object = RECustomComponentGetObject();
    if (!Object) {
      goto LABEL_35;
    }
    uint64_t v14 = *(unsigned __int8 **)Object;
    if (*(void *)(Object + 8) || !v14)
    {
      uint64_t result = swift_retain();
    }
    else
    {
      int v15 = *v14;
      uint64_t v16 = String.init(utf8String:)();
      if (v17) {
        Swift::Int v18 = v16;
      }
      else {
        Swift::Int v18 = 0;
      }
      if (v17) {
        unint64_t v19 = v17;
      }
      else {
        unint64_t v19 = 0xE000000000000000;
      }
      uint64_t v14 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v15 == 42, v18, v19);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v14;
    }
    if (!v14) {
      goto LABEL_55;
    }
    swift_retain();
    uint64_t v20 = String.init(utf8String:)();
    unint64_t v22 = v21;
    swift_release();
    if (v22) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = 0;
    }
    if (!v22) {
      unint64_t v22 = 0xE000000000000000;
    }
    uint64_t v24 = (NSString *)MEMORY[0x22A688A50](v23, v22);
    swift_bridgeObjectRelease();
    Class v25 = NSClassFromString(v24);

    swift_release();
    if (!v25
      || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (uint64_t v26 = swift_dynamicCastMetatype()) == 0))
    {
LABEL_35:
      uint64_t v9 = makeEntity(for:)(Entity);
      goto LABEL_36;
    }
    uint64_t v27 = (*(uint64_t (**)(void))(v26 + 232))();
    uint64_t v28 = *(void *)(v27 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v28, 0);
    *(void *)(v27 + 16) = Entity;
    MEMORY[0x22A68E750](Entity, v27);
    swift_release();
LABEL_37:
    if ((REEntityIsActive() & 1) == 0 || *(void *)v7 && *(void *)(v27 + 16) == *(void *)(*(void *)v7 + 16)) {
      goto LABEL_4;
    }
    swift_retain();
    if (!REEntityGetComponent()) {
      break;
    }
    unsigned int IsAuthoritative = RENetworkComponentIsAuthoritative();
    int ShouldAlwaysMigrate = RENetworkComponentShouldAlwaysMigrate();
    uint64_t v31 = RENetworkComponentGuid();
    int IsOwnershipLocked = RENetworkComponentIsOwnershipLocked();
    swift_release();
    uint64_t v33 = 0x10000;
    if (!IsOwnershipLocked) {
      uint64_t v33 = 0;
    }
    uint64_t v34 = 256;
    if (!ShouldAlwaysMigrate) {
      uint64_t v34 = 0;
    }
    outlined consume of SynchronizationComponent?(v31, v34 | IsAuthoritative | v33, 0, 1);
    if (IsAuthoritative) {
      goto LABEL_50;
    }
LABEL_4:
    uint64_t result = swift_release();
    v6 += 8;
    if (!--v5) {
      return 0;
    }
  }
  swift_release();
LABEL_50:
  swift_beginAccess();
  if (!*(void *)(v36 + 72))
  {
    uint64_t v35 = *(void *)(v36 + 80);
    *(void *)(v36 + 80) = v27;
    swift_retain_n();
    Scene.internalAudioListener.didset(v35);
    swift_release();
    swift_release();
  }
  return v27;
}

uint64_t Scene.__entities.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  uint64_t v2 = specialized _arrayForceCast<A, B>(_:)(v1);
  swift_release();
  return v2;
}

uint64_t Scene.anchors.getter@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

uint64_t Scene.anchors.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 16);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t result = swift_release();
  if (v2 != v3) {
    __break(1u);
  }
  return result;
}

BOOL static Scene.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

uint64_t (*Scene.anchors.modify(void *a1))()
{
  *a1 = v1;
  swift_retain();
  return destroy for __ImageBasedLightComponent;
}

uint64_t Scene.addAnchor(_:)(uint64_t a1)
{
  return specialized Scene.addAnchor(_:)(a1, v1);
}

uint64_t Scene.removeAnchor(_:)()
{
  swift_retain();
  specialized Scene.AnchorCollection.remove(_:)();

  return swift_release();
}

uint64_t Scene.eventService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 120;
  swift_beginAccess();
  outlined init with copy of EventService?(v1 + 120, (uint64_t)&v10);
  if (!v11)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v10, &demangling cache variable for type metadata for EventService?);
    uint64_t EventBus = RESceneGetEventBus();
    uint64_t v5 = type metadata accessor for REEventBus();
    uint64_t v6 = swift_allocObject();
    uint64_t v7 = MEMORY[0x263F8EE80];
    *(void *)(v6 + 16) = EventBus;
    *(void *)(v6 + 24) = v7;
    RERetain();
    REEventBusSetSwiftObject();
    uint64_t v11 = v5;
    uint64_t v12 = &protocol witness table for REEventBus;
    *(void *)&long long v10 = v6;
    outlined init with copy of __REAssetService((uint64_t)&v10, (uint64_t)v9);
    swift_beginAccess();
    outlined assign with take of Material?((uint64_t)v9, v3, &demangling cache variable for type metadata for EventService?);
    swift_endAccess();
  }
  return outlined init with take of BindableDataInternal(&v10, a1);
}

uint64_t Scene.engineEventService.getter@<X0>(uint64_t *a1@<X8>)
{
  if (RESceneGetECSManagerNullable()
    && (uint64_t ServiceLocator = REECSManagerGetServiceLocator(), MEMORY[0x22A692270](ServiceLocator)))
  {
    uint64_t EventBus = REEngineGetEventBus();
    uint64_t v4 = type metadata accessor for REEventBus();
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = MEMORY[0x263F8EE80];
    *(void *)(v5 + 16) = EventBus;
    *(void *)(v5 + 24) = v6;
    RERetain();
    uint64_t result = REEventBusSetSwiftObject();
    a1[3] = v4;
    a1[4] = (uint64_t)&protocol witness table for REEventBus;
    *a1 = v5;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t Scene.applyReverbPreset(_:)()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 104)) {
    goto LABEL_3;
  }
  type metadata accessor for Entity();
  swift_allocObject();
  uint64_t v2 = Entity.init()();
  REEntitySetName();
  RENetworkMarkEntityMetadataDirty();
  Entity.turnIntoNinja()();
  REReverbComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RESceneAddEntity();
  REReverbComponentSetPriority();
  *(void *)(v1 + 104) = v2;
  uint64_t result = swift_release();
  if (*(void *)(v1 + 104))
  {
LABEL_3:
    swift_retain();
    REReverbComponentGetComponentType();
    if (REEntityGetComponentByClass()) {
      REReverbComponentSetReverbPreset();
    }
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall Scene.setReverbPresetPriority(_:)(Swift::UInt16 a1)
{
  uint64_t v2 = v1;
  if (*(void *)(v1 + 104)) {
    goto LABEL_3;
  }
  type metadata accessor for Entity();
  swift_allocObject();
  uint64_t v3 = Entity.init()();
  REEntitySetName();
  RENetworkMarkEntityMetadataDirty();
  Entity.turnIntoNinja()();
  REReverbComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RESceneAddEntity();
  REReverbComponentSetPriority();
  *(void *)(v2 + 104) = v3;
  swift_release();
  if (*(void *)(v2 + 104))
  {
LABEL_3:
    swift_retain();
    REReverbComponentGetComponentType();
    if (REEntityGetComponentByClass()) {
      REReverbComponentSetPriority();
    }
    swift_release();
  }
}

Swift::Void __swiftcall Scene.addDefaultCamera()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (_OWORD *)((char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 16);
  type metadata accessor for Entity();
  swift_allocObject();
  uint64_t v5 = Entity.init()();
  uint64_t v6 = (uint64_t *)(v0 + 88);
  swift_beginAccess();
  *uint64_t v6 = v5;
  swift_release();
  if (!*v6)
  {
    __break(1u);
    goto LABEL_15;
  }
  swift_retain();
  REEntitySetName();
  RENetworkMarkEntityMetadataDirty();
  swift_release();
  if (!*v6)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  swift_retain_n();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v18);
  uint64_t v7 = v18[0];
  uint64_t v8 = v18[1];
  uint64_t v9 = v18[2];
  uint64_t v10 = v18[3];
  uint64_t v12 = v18[4];
  int v11 = HIDWORD(v19);
  swift_release();
  outlined init with take of Transform?((uint64_t)v18, (uint64_t)v20);
  if (v20[48])
  {
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    uint64_t v8 = *((void *)&static Transform.identity + 1);
    uint64_t v7 = static Transform.identity;
    uint64_t v10 = *((void *)&xmmword_2681C7AB0 + 1);
    uint64_t v9 = xmmword_2681C7AB0;
    long long v13 = xmmword_2681C7AC0;
  }
  else
  {
    *(void *)&long long v13 = v12;
    HIDWORD(v13) = v11;
  }
  DWORD2(v13) = 2.0;
  v21[0] = v7;
  v21[1] = v8;
  void v21[2] = v9;
  void v21[3] = v10;
  long long v22 = v13;
  char v23 = 0;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v21);
  swift_release_n();
  if (!*v6) {
    goto LABEL_16;
  }
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(0x7F8000003C23D70ALL, 0x142700000);
  swift_release();
  if (!*v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  RECameraViewDescriptorsComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RECameraViewDescriptorsComponentSetRenderOrder();
  if (!*v6)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *uint64_t v4 = *(_OWORD *)zmmword_22830EC90;
  v4[1] = *(_OWORD *)&zmmword_22830EC90[16];
  v4[2] = *(_OWORD *)&zmmword_22830EC90[32];
  v4[3] = *(_OWORD *)&zmmword_22830EC90[48];
  type metadata accessor for AnchoringComponent.Target(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = (int *)type metadata accessor for AnchoringComponent(0);
  *(void *)((char *)v4 + v14[5]) = 1;
  *(void *)((char *)v4 + v14[6]) = 1;
  int v15 = (char *)v4 + v14[7];
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *(_OWORD *)int v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  v15[64] = 1;
  (*(void (**)(_OWORD *, void, uint64_t, int *))(*((void *)v14 - 1) + 56))(v4, 0, 1, v14);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v4);
  outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnchoringComponent?);
  swift_release();
  if (!*v6)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_retain();
  Entity.turnIntoNinja()();
  swift_release();
  uint64_t v17 = v1;
  if (*(void *)(v1 + 88))
  {
    swift_retain();
    uint64_t v16 = swift_retain();
    Scene.AnchorCollection.appendNinja(_:)(v16);
    swift_release();
    swift_release();
    return;
  }
LABEL_20:
  __break(1u);
}

Swift::Void __swiftcall Scene.addAudioMixer()()
{
  if (!*(void *)(v0 + 96))
  {
    uint64_t v1 = v0;
    type metadata accessor for Entity();
    swift_allocObject();
    uint64_t v2 = Entity.init()();
    REEntitySetName();
    RENetworkMarkEntityMetadataDirty();
    Entity.turnIntoNinja()();
    REAudioMixerComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneAddEntity();
    *(void *)(v1 + 96) = v2;
    swift_release();
  }
}

uint64_t type metadata accessor for Scene()
{
  return self;
}

Swift::Void __swiftcall Scene.addAudioReverb()()
{
  if (!*(void *)(v0 + 104))
  {
    uint64_t v1 = v0;
    type metadata accessor for Entity();
    swift_allocObject();
    uint64_t v2 = Entity.init()();
    REEntitySetName();
    RENetworkMarkEntityMetadataDirty();
    Entity.turnIntoNinja()();
    REReverbComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneAddEntity();
    REReverbComponentSetPriority();
    *(void *)(v1 + 104) = v2;
    swift_release();
  }
}

void *static Scene.__testInit(name:)()
{
  swift_bridgeObjectRetain();

  return specialized Scene.__allocating_init(name:)();
}

uint64_t Scene.init(coreScene:)(uint64_t a1)
{
  *(void *)(v1 + 56) = 0;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 104) = 0;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  swift_weakInit();
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  RERetain();
  *(void *)(v1 + 16) = a1;
  RESceneSetSwiftObject();
  return v1;
}

void *Scene.deinit()
{
  RESceneSetSwiftObject();
  RERelease();
  swift_beginAccess();
  if (v0[6])
  {
    outlined init with copy of __REAssetService((uint64_t)(v0 + 3), (uint64_t)v5);
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  swift_beginAccess();
  if (v0[27])
  {
    uint64_t v1 = v0[28];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v1 + 56);
    swift_unknownObjectRetain();
    v3(ObjectType, v1);
    swift_unknownObjectRelease();
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)(v0 + 3), &demangling cache variable for type metadata for Cancellable?);
  swift_unknownObjectWeakDestroy();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_weakDestroy();
  outlined destroy of BodyTrackingComponent?((uint64_t)(v0 + 15), &demangling cache variable for type metadata for EventService?);
  outlined destroy of BodyTrackingComponent?((uint64_t)(v0 + 20), &demangling cache variable for type metadata for Cancellable?);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t Scene.__deallocating_deinit()
{
  Scene.deinit();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall Scene.enableCollisions(_:)(Swift::Bool a1)
{
  uint64_t v3 = v1 + 24;
  swift_beginAccess();
  if (*(void *)(v1 + 48))
  {
    outlined init with copy of __REAssetService(v1 + 24, (uint64_t)v9);
    __swift_project_boxed_opaque_existential_1(v9, v10);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  if (a1)
  {
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v7, v9);
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = partial apply for closure #1 in Scene.enableCollisions(_:);
    *(void *)(v5 + 24) = v4;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<CollisionEvents.Began>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<CollisionEvents.Began> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<CollisionEvents.Began>);
    uint64_t v6 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    uint64_t v10 = type metadata accessor for AnyCancellable();
    uint64_t v11 = MEMORY[0x263EFDD10];
    swift_release();
    v9[0] = v6;
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Material?((uint64_t)v9, v3, &demangling cache variable for type metadata for Cancellable?);
    swift_endAccess();
  }
}

uint64_t closure #1 in Scene.enableCollisions(_:)(long long *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = a1[3];
  long long v23 = a1[2];
  long long v24 = v8;
  long long v25 = a1[4];
  long long v9 = a1[1];
  long long v21 = *a1;
  long long v22 = v9;
  type metadata accessor for OS_dispatch_queue();
  uint64_t v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  long long v13 = v24;
  *(_OWORD *)(v12 + 64) = v23;
  *(_OWORD *)(v12 + 80) = v13;
  *(_OWORD *)(v12 + 96) = v25;
  long long v14 = v22;
  *(_OWORD *)(v12 + 32) = v21;
  *(_OWORD *)(v12 + 48) = v14;
  aBlock[4] = partial apply for closure #1 in closure #1 in Scene.enableCollisions(_:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_25;
  int v15 = _Block_copy(aBlock);
  swift_retain();
  outlined retain of CollisionEvents.Began((uint64_t)&v21);
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v7, v4, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v17);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in Scene.enableCollisions(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Scene.__interactionService.getter();
    type metadata accessor for __RKEntityInteractionManager();
    if (swift_dynamicCastClass())
    {
      uint64_t v7 = *a2;
      Entity.__interactionIdentifier.getter((uint64_t)v5);
      uint64_t v8 = type metadata accessor for UUID();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v5, 1, v8) == 1)
      {
        swift_unknownObjectRelease();
        swift_release();
        return outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_22831E4E0;
        *(void *)(v9 + 32) = a2[1];
        uint64_t v13 = v9;
        specialized Array._endMutation()();
        uint64_t v10 = v13;
        swift_retain();
        swift_retain();
        uint64_t v11 = Entity.__tags.getter();
        type metadata accessor for __RKEntityCollisionTrigger();
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 24) = 0;
        swift_beginAccess();
        *(void *)(v12 + 24) = v7;
        swift_retain();
        swift_release();
        *(void *)(v12 + 32) = v10;
        *(void *)(v12 + 40) = v11;
        swift_release();
        *(_WORD *)(v12 + 16) = 0;
        *(unsigned char *)(v12 + 18) = 0;
        __RKEntityInteractionManager.__performInteractions(matching:on:)(v12, 0);
        swift_release();
        swift_unknownObjectRelease();
        return swift_release();
      }
    }
    else
    {
      swift_release();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t Scene.findEntity(named:)()
{
  String.utf8CString.getter();
  EntityByuint64_t Name = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName) {
    return 0;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v4 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v4)
    {
      uint64_t v2 = (*(uint64_t (**)(void))(v4 + 232))();
      uint64_t v5 = *(void *)(v2 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v5, 0);
      *(void *)(v2 + 16) = EntityByName;
      MEMORY[0x22A68E750](EntityByName, v2);
      swift_release();
      return v2;
    }
    return makeEntity(for:)(EntityByName);
  }
  __break(1u);
  return result;
}

uint64_t Scene.findEntity(id:)()
{
  uint64_t Entity = RESceneFindEntity();
  if (!Entity) {
    return 0;
  }
  uint64_t v1 = Entity;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v5 = specialized static Entity.entityInfoType(_:)();
    if (v5)
    {
      uint64_t v3 = (*(uint64_t (**)(void))(v5 + 232))();
      uint64_t v6 = *(void *)(v3 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v6, 0);
      *(void *)(v3 + 16) = v1;
      MEMORY[0x22A68E750](v1, v3);
      swift_release();
      return v3;
    }
    return makeEntity(for:)(v1);
  }
  __break(1u);
  return result;
}

uint64_t Scene.__interactionService.getter()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 200))
  {
    uint64_t v2 = *(void *)(v0 + 200);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    type metadata accessor for __RKEntityInteractionManager();
    swift_allocObject();
    uint64_t v2 = __RKEntityInteractionManager.init(sceneRef:)(v3);
    *(void *)(v1 + 200) = v2;
    *(void *)(v1 + 208) = &protocol witness table for __RKEntityInteractionManager;
    swift_retain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

uint64_t Scene.synchronizationService.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Scene.synchronizationService.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v3 + 216);
  uint64_t v7 = *(void *)(v3 + 224);
  *(void *)(v3 + 216) = a1;
  *(void *)(v3 + 224) = a2;
  swift_unknownObjectRetain();
  if (v6)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v7 + 56))(ObjectType, v7);
  }
  if (*(void *)(v3 + 216))
  {
    uint64_t v9 = *(void *)(v3 + 224);
    uint64_t v10 = swift_getObjectType();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v9 + 48);
    swift_unknownObjectRetain();
    v11(v10, v9);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

void (*Scene.synchronizationService.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 5) = v1;
  swift_beginAccess();
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v1 + 216);
  swift_unknownObjectRetain();
  return Scene.synchronizationService.modify;
}

void Scene.synchronizationService.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[3];
  uint64_t v4 = v2[4];
  if (a2)
  {
    uint64_t v5 = swift_unknownObjectRetain();
    Scene.synchronizationService.setter(v5, v4);
    swift_unknownObjectRelease();
  }
  else
  {
    Scene.synchronizationService.setter(v3, v2[4]);
  }

  free(v2);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Scene.containsChangeSceneActions()()
{
  uint64_t v51 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v41 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v1 = (char *)&v34 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v50 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for Data.Deallocator();
  uint64_t v5 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration)
  {
    unint64_t v8 = closure #1 in Scene.entitiesWithInteractions()();
    unint64_t v9 = v8;
    if (v8 >> 62) {
      goto LABEL_40;
    }
    for (uint64_t i = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v43 = type metadata accessor for Scene();
      unint64_t v46 = v9 & 0xC000000000000001;
      uint64_t v40 = v9 & 0xFFFFFFFFFFFFFF8;
      unint64_t v39 = v9 + 32;
      unsigned int v36 = *MEMORY[0x263F06F00];
      uint64_t v35 = (void (**)(char *, void, uint64_t))(v5 + 104);
      uint64_t v34 = (void (**)(char *, uint64_t))(v5 + 8);
      __int16 v42 = v7;
      uint64_t v44 = i;
      unint64_t v45 = v9;
      unint64_t v11 = 0;
      while (v46)
      {
        uint64_t v12 = MEMORY[0x22A689930](v11, v9);
        BOOL v13 = __OFADD__(v11, 1);
        unint64_t v14 = v11 + 1;
        if (v13) {
          goto LABEL_38;
        }
LABEL_11:
        uint64_t v48 = v12;
        unint64_t v49 = v14;
        if (!static __RKEntityInteractionsComponent.registration
          || !REEntityGetCustomComponent()
          || (uint64_t Object = RECustomComponentGetObject()) == 0)
        {
          uint64_t v17 = (const char *)MEMORY[0x263F8EE78];
          int64_t v18 = *(void *)(MEMORY[0x263F8EE78] + 16);
          if (v18) {
            goto LABEL_17;
          }
          goto LABEL_33;
        }
        uint64_t v16 = *(const char **)(Object + 16);
        outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v52);
        if (v16)
        {
          uint64_t v17 = v16;
          goto LABEL_32;
        }
        long long v25 = v52[0];
        if (!v52[0]) {
          goto LABEL_30;
        }
        uint64_t v26 = strlen(v52[0]);
        (*v35)(v7, v36, v37);
        Data.Deallocator._deallocator.getter();
        if (v26)
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          swift_retain();
          uint64_t v27 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
          uint64_t v26 = specialized Data._Representation.init(_:count:)(v27, v26);
          unint64_t v29 = v28;
          swift_release();
        }
        else
        {
          char v30 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
          v30(v25, 0);
          swift_release();
          swift_release();
          unint64_t v29 = 0xC000000000000000;
        }
        (*v34)(v7, v37);
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
        lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
        uint64_t v31 = v38;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        if (v31)
        {
          swift_release();
          outlined consume of Data._Representation(v26, v29);

          int v38 = 0;
LABEL_30:
          uint64_t v17 = (const char *)MEMORY[0x263F8EE78];
          goto LABEL_32;
        }
        int v38 = 0;
        swift_release();
        outlined consume of Data._Representation(v26, v29);
        uint64_t v17 = v52[11];
LABEL_32:
        swift_bridgeObjectRetain();
        outlined destroy of __RKEntityInteractionsComponent((uint64_t)v52);
        int64_t v18 = *((void *)v17 + 2);
        if (v18)
        {
LABEL_17:
          v52[0] = (const char *)MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
          uint64_t v19 = *(unsigned __int8 *)(v41 + 80);
          char v47 = v17;
          uint64_t v20 = (uint64_t)&v17[(v19 + 32) & ~v19];
          uint64_t v21 = *(void *)(v41 + 72);
          do
          {
            _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_1(v20, (uint64_t)v1, type metadata accessor for __RKEntityInteractionSpecification);
            _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_1((uint64_t)&v1[*(int *)(v51 + 20)], (uint64_t)v4, type metadata accessor for __RKEntityActionSpecification);
            _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_0((uint64_t)v1, type metadata accessor for __RKEntityInteractionSpecification);
            long long v22 = v52[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1);
              long long v22 = v52[0];
            }
            unint64_t v24 = *((void *)v22 + 2);
            unint64_t v23 = *((void *)v22 + 3);
            if (v24 >= v23 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
              long long v22 = v52[0];
            }
            *((void *)v22 + 2) = v24 + 1;
            outlined init with take of __RKEntityActionSpecification((uint64_t)v4, (uint64_t)&v22[((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(void *)(v50 + 72) * v24]);
            v20 += v21;
            --v18;
          }
          while (v18);
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
LABEL_33:
        swift_bridgeObjectRelease();
        long long v22 = (const char *)MEMORY[0x263F8EE78];
LABEL_34:
        uint64_t v5 = static Scene.containsChangeSceneActions(_:)((uint64_t)v22);
        swift_bridgeObjectRelease();
        swift_release();
        unint64_t v9 = v45;
        unint64_t v11 = v49;
        if ((v5 & 1) == 0)
        {
          uint64_t v7 = v42;
          if (v49 != v44) {
            continue;
          }
        }
        goto LABEL_42;
      }
      if (v11 >= *(void *)(v40 + 16)) {
        goto LABEL_39;
      }
      uint64_t v12 = swift_retain();
      BOOL v13 = __OFADD__(v11, 1);
      unint64_t v14 = v11 + 1;
      if (!v13) {
        goto LABEL_11;
      }
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      ;
    }
    LOBYTE(v5) = 0;
LABEL_42:
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type SerializationError and conformance SerializationError();
    swift_allocError();
    *(_OWORD *)uint64_t v32 = xmmword_228336E80;
    *(unsigned char *)(v32 + 16) = 0;
    swift_willThrow();
  }
  return v5 & 1;
}

uint64_t static Scene.containsChangeSceneActions(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v8 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_1(v7, (uint64_t)v5, type metadata accessor for __RKEntityActionSpecification);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 6) {
      break;
    }
    char v9 = static Scene.containsChangeSceneActions(_:)(*((void *)v5 + 1));
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
LABEL_4:
    v7 += v8;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  if (EnumCaseMultiPayload != 1)
  {
    _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_0((uint64_t)v5, type metadata accessor for __RKEntityActionSpecification);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_0((uint64_t)v5, type metadata accessor for __RKEntityActionSpecification);
  return 1;
}

uint64_t closure #1 in Scene.entitiesWithInteractions()()
{
  uint64_t result = RESceneGetComponentsOfCustomType();
  if (v1 < 0) {
    goto LABEL_37;
  }
  uint64_t v2 = result;
  uint64_t v3 = v1;
  uint64_t result = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    while (1)
    {
      uint64_t Entity = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        uint64_t result = REEntityIsBeingDestroyed();
        if (result)
        {
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          return result;
        }
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
        if (!REEntityGetCustomComponent()) {
          goto LABEL_32;
        }
        uint64_t Object = RECustomComponentGetObject();
        if (!Object) {
          goto LABEL_32;
        }
        uint64_t v6 = *(unsigned __int8 **)Object;
        if (*(void *)(Object + 8)) {
          BOOL v7 = 1;
        }
        else {
          BOOL v7 = v6 == 0;
        }
        if (v7)
        {
          uint64_t result = swift_retain();
        }
        else
        {
          int v8 = *v6;
          uint64_t v9 = String.init(utf8String:)();
          if (v10) {
            Swift::Int v11 = v9;
          }
          else {
            Swift::Int v11 = 0;
          }
          if (v10) {
            unint64_t v12 = v10;
          }
          else {
            unint64_t v12 = 0xE000000000000000;
          }
          uint64_t v6 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v8 == 42, v11, v12);
          swift_bridgeObjectRelease();
          type metadata accessor for IntrospectionDataCleanupHelper();
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = v6;
        }
        if (!v6) {
          goto LABEL_38;
        }
        swift_retain();
        uint64_t v13 = String.init(utf8String:)();
        unint64_t v15 = v14;
        swift_release();
        uint64_t v16 = v15 ? v13 : 0;
        unint64_t v17 = v15 ? v15 : 0xE000000000000000;
        int64_t v18 = (NSString *)MEMORY[0x22A688A50](v16, v17);
        swift_bridgeObjectRelease();
        Class v19 = NSClassFromString(v18);

        swift_release();
        if (!v19) {
          goto LABEL_32;
        }
        swift_getObjCClassMetadata();
        type metadata accessor for Entity();
        uint64_t v20 = swift_dynamicCastMetatype();
        if (v20)
        {
          uint64_t v21 = (*(uint64_t (**)(void))(v20 + 232))();
          uint64_t v22 = *(void *)(v21 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v22, 0);
          *(void *)(v21 + 16) = Entity;
          MEMORY[0x22A68E750](Entity, v21);
          swift_release();
        }
        else
        {
LABEL_32:
          makeEntity(for:)(Entity);
        }
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v2 += 8;
      if (!--v3) {
        return v23;
      }
    }
  }
  return result;
}

uint64_t static Scene.__fromCore(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  id v2 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v2)
  {
    return swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    Scene.init(coreScene:)(v1);
    return v4;
  }
}

void Scene.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(v0 + 16));
}

Swift::Int Scene.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  return Hasher._finalize()();
}

uint64_t Scene.id.getter()
{
  uint64_t result = *(void *)(v0 + 16);
  if (result < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance Scene@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (v2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = v2;
  }
  return result;
}

uint64_t Scene.__corePointer.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t specialized Scene.addAnchor(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  swift_retain();
  specialized Scene.AnchorCollection.append(_:)(a1, &v4);

  return swift_release();
}

uint64_t specialized Scene.__audioListener.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 72) = a1;
  swift_retain();
  swift_release();
  uint64_t active = *(void *)(v1 + 72);
  if (!active) {
    uint64_t active = Scene.internalActiveCamera.getter();
  }
  uint64_t v4 = *(void *)(v1 + 80);
  *(void *)(v1 + 80) = active;
  swift_retain();
  swift_retain();
  Scene.internalAudioListener.didset(v4);
  swift_release();
  return swift_release();
}

void *specialized Scene.__allocating_init(name:)()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v0 = RESceneCreate();
  swift_release();
  RESceneAddDefaultSystems();
  type metadata accessor for Scene();
  uint64_t v1 = (void *)swift_allocObject();
  Scene.init(coreScene:)(v0);
  swift_retain();
  RERelease();
  MEMORY[0x22A692120](v0, 1);
  Scene.addDefaultCamera()();
  if (!v1[12])
  {
    type metadata accessor for Entity();
    swift_allocObject();
    uint64_t v2 = Entity.init()();
    REEntitySetName();
    RENetworkMarkEntityMetadataDirty();
    Entity.turnIntoNinja()();
    REAudioMixerComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RESceneAddEntity();
    v1[12] = v2;
    swift_release();
  }
  swift_beginAccess();
  v1[9] = 0;
  swift_release();
  uint64_t active = v1[9];
  if (!active) {
    uint64_t active = Scene.internalActiveCamera.getter();
  }
  uint64_t v4 = v1[10];
  v1[10] = active;
  swift_retain();
  swift_retain();
  Scene.internalAudioListener.didset(v4);
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_2280E9C34()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in Scene.enableCollisions(_:)(long long *a1)
{
  return closure #1 in Scene.enableCollisions(_:)(a1);
}

uint64_t sub_2280E9C74()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of __RKEntityActionSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __RKEntityActionSpecification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Equatable in Scene(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification(&lazy protocol witness table cache variable for type Scene and conformance Scene, a2, (void (*)(uint64_t))type metadata accessor for Scene);
}

uint64_t sub_2280E9E1C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + 64;
  swift_beginAccess();
  uint64_t result = MEMORY[0x22A696620](v3);
  *a2 = result;
  return result;
}

uint64_t sub_2280E9E6C()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_2280E9EBC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 72);
  return swift_retain();
}

uint64_t sub_2280E9F08()
{
  uint64_t v0 = swift_retain();
  specialized Scene.__audioListener.setter(v0);

  return swift_release();
}

uint64_t sub_2280E9F4C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 88);
  return swift_retain();
}

uint64_t sub_2280E9F9C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_2280E9FA8(uint64_t result, uint64_t a2)
{
  if (*(void *)(*(void *)result + 16) != *(void *)(*(void *)a2 + 16)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_2280E9FC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Scene.__interactionService.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2280E9FF4(_OWORD *a1, uint64_t a2)
{
  *(_OWORD *)(*(void *)a2 + 200) = *a1;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

uint64_t sub_2280EA03C@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(_OWORD *)(v3 + 216);
  return swift_unknownObjectRetain();
}

uint64_t sub_2280EA08C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = swift_unknownObjectRetain();
  return Scene.synchronizationService.setter(v2, v1);
}

uint64_t method lookup function for Scene(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Scene);
}

uint64_t dispatch thunk of Scene.__coreScene.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of Scene.session.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of Scene.session.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of Scene.session.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of Scene.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of Scene.__audioListener.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of Scene.__audioListener.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of Scene.__audioListener.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of Scene.__addPostProcessingAudioEffect(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of Scene.defaultCamera.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of Scene.defaultCamera.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of Scene.defaultCamera.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of Scene.__defaultCamera.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of Scene.internalActiveCamera.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of Scene.__entities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of Scene.anchors.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of Scene.anchors.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of Scene.anchors.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of Scene.addAnchor(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of Scene.removeAnchor(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of Scene.applyReverbPreset(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of Scene.setReverbPresetPriority(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of Scene.addDefaultCamera()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t dispatch thunk of Scene.addAudioMixer()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of Scene.addAudioReverb()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of Scene.enableCollisions(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of Scene.findEntity(named:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of Scene.findEntity(id:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of Scene.__interactionService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of Scene.synchronizationService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of Scene.synchronizationService.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of Scene.synchronizationService.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of Scene.containsChangeSceneActions()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))() & 1;
}

uint64_t outlined init with copy of EventService?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventService?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s10RealityKit34__RKEntityInteractionSpecificationVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2280EA72C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 112, 15);
}

uint64_t partial apply for closure #1 in closure #1 in Scene.enableCollisions(_:)()
{
  return closure #1 in closure #1 in Scene.enableCollisions(_:)(*(void *)(v0 + 16), (uint64_t *)(v0 + 32));
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

uint64_t outlined retain of CollisionEvents.Began(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyp_ypyptG_17RealityFoundation22AcousticModelComponentV18AbsorptionMaterialVs5NeverOTg5010_sypypyp17d12Foundation22fgh3V18ij20VIgnnnr_yp_ypyptAEs5k83OIegnrzr_TR04_s17a12Foundation22cde38V10__fromCoreyAC0A3Kit02__E3RefVFZAC18fG15Vyp_Q16XEfU0_Tf3nnnpf_nTf1cn_nTm(uint64_t a1, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
    a3(0, v3, 0);
    uint64_t v6 = a1 + 96;
    do
    {
      outlined init with copy of Any(v6 - 64, (uint64_t)v22);
      swift_dynamicCast();
      uint64_t v7 = v21;
      uint64_t v17 = v20;
      outlined init with copy of Any(v6 - 32, (uint64_t)v19);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSArray);
      swift_dynamicCast();
      toFloatArray #1 (_:) in static AcousticModelComponent.__fromCore(_:)(v18);
      uint64_t v9 = v8;

      outlined init with copy of Any(v6, (uint64_t)v19);
      swift_dynamicCast();
      toFloatArray #1 (_:) in static AcousticModelComponent.__fromCore(_:)(v18);
      uint64_t v11 = v10;

      uint64_t v4 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        a3(0, *(void *)(v4 + 16) + 1, 1);
        uint64_t v4 = v23;
      }
      unint64_t v13 = *(void *)(v4 + 16);
      unint64_t v12 = *(void *)(v4 + 24);
      if (v13 >= v12 >> 1)
      {
        a3(v12 > 1, v13 + 1, 1);
        uint64_t v4 = v23;
      }
      *(void *)(v4 + 16) = v13 + 1;
      unint64_t v14 = (void *)(v4 + 32 * v13);
      v14[4] = v17;
      v14[5] = v7;
      v14[6] = v9;
      v14[7] = v11;
      v6 += 96;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySo7NSArrayCAGyA2IGG_yp_ypypts5NeverOTg503_s7b42STQzAASTQy_AASTQy0_AbcDIgnnnrrr_AB_AC_ADttn7_AcDts5g31OIegnrzr_STRzSTR_STR0_r1_lTRSo7f129C_A2HTG5091_s17RealityFoundation22AcousticModelComponentV10__fromCoreyAC0A3Kit02__E3RefVFZ4zip3L_ySay7a67Qz_AIQy_AIQy0_tGx_q_q0_ttu1_v1_w32_lFAJ_AkLtAJ_AK_ALttXEfU_So7C8C_Y14OTg5Tf3nnnpf_nTf1cn_n(void *a1, void *a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<NSArray, Zip2Sequence<NSArray, NSArray>>.Iterator);
  uint64_t v7 = v6 - 8;
  *(void *)&double v8 = MEMORY[0x270FA5388](v6).n128_u64[0];
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(a1, sel_count, v8);
  id v12 = objc_msgSend(a2, sel_count);
  id v13 = objc_msgSend(a3, sel_count);
  if ((uint64_t)v13 >= (uint64_t)v12) {
    id v14 = v12;
  }
  else {
    id v14 = v13;
  }
  if ((uint64_t)v14 >= (uint64_t)v11) {
    uint64_t v15 = (uint64_t)v11;
  }
  else {
    uint64_t v15 = (uint64_t)v14;
  }
  uint64_t v79 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 & ~(v15 >> 63), 0);
  id v16 = a1;
  id v17 = a2;
  id v18 = a3;
  NSArray.makeIterator()();

  Class v19 = &v10[*(int *)(v7 + 60)];
  NSArray.makeIterator()();

  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<NSArray, NSArray>.Iterator);
  char v47 = &v19[*(int *)(v20 + 52)];
  NSArray.makeIterator()();
  uint64_t v21 = (uint64_t)v10;

  uint64_t v49 = *(int *)(v20 + 56);
  uint64_t v50 = v19;
  v19[v49] = 0;
  uint64_t v51 = *(int *)(v7 + 64);
  v10[v51] = 0;
  if (v15 < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
    __break(1u);
LABEL_42:
    uint64_t v41 = &v56;
LABEL_44:
    outlined destroy of BodyTrackingComponent?((uint64_t)v41, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v50[v49] = 1;
LABEL_45:
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    __break(1u);
  }
  else
  {
    uint64_t v48 = v10;
    if (v15)
    {
      unint64_t v45 = &v75;
      unint64_t v46 = &v71;
      uint64_t v44 = &v77;
      do
      {
        if (*(unsigned char *)(v21 + v51))
        {
          __break(1u);
          goto LABEL_40;
        }
        type metadata accessor for NSFastEnumerationIterator();
        lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator();
        dispatch thunk of IteratorProtocol.next()();
        if (!*((void *)&v64 + 1)) {
          goto LABEL_41;
        }
        outlined init with take of Any(&v63, v52);
        if (v50[v49]) {
          goto LABEL_45;
        }
        dispatch thunk of IteratorProtocol.next()();
        if (!v57) {
          goto LABEL_42;
        }
        outlined init with take of Any(&v56, v58);
        dispatch thunk of IteratorProtocol.next()();
        if (!v55)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
          uint64_t v41 = &v54;
          goto LABEL_44;
        }
        outlined init with take of Any(&v54, &v56);
        outlined init with take of Any(v58, &v59);
        outlined init with take of Any(&v56, &v61);
        long long v63 = v59;
        long long v64 = v60;
        long long v65 = v61;
        long long v66 = v62;
        outlined init with take of Any(v52, &v67);
        long long v69 = v63;
        long long v70 = v64;
        long long v71 = v65;
        long long v72 = v66;
        outlined init with copy of Any((uint64_t)&v69, (uint64_t)&v63);
        outlined init with copy of Any((uint64_t)v46, (uint64_t)&v65);
        outlined init with copy of Any((uint64_t)&v67, (uint64_t)&v73);
        outlined init with copy of Any((uint64_t)&v63, (uint64_t)&v59);
        outlined init with copy of Any((uint64_t)&v65, (uint64_t)&v61);
        outlined init with take of Any(&v59, v45);
        outlined init with take of Any(&v63, v52);
        outlined init with take of Any(&v65, v53);
        outlined init with take of Any(v53, v44);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v67, &demangling cache variable for type metadata for (Any, (Any, Any)));
        uint64_t v22 = v79;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
          uint64_t v22 = v79;
        }
        unint64_t v24 = *(void *)(v22 + 16);
        unint64_t v23 = *(void *)(v22 + 24);
        if (v24 >= v23 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          uint64_t v22 = v79;
        }
        *(void *)(v22 + 16) = v24 + 1;
        long long v25 = (_OWORD *)(v22 + 96 * v24);
        long long v26 = v74;
        v25[2] = v73;
        void v25[3] = v26;
        long long v27 = v75;
        long long v28 = v76;
        long long v29 = v78;
        v25[6] = v77;
        v25[7] = v29;
        v25[4] = v27;
        v25[5] = v28;
        --v15;
        uint64_t v21 = (uint64_t)v48;
      }
      while (v15);
      if (v48[v51]) {
        goto LABEL_38;
      }
    }
    type metadata accessor for NSFastEnumerationIterator();
    lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator();
    unint64_t v45 = &v77;
    unint64_t v46 = &v75;
    uint64_t v43 = v53;
    uint64_t v44 = &v71;
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      if (!*((void *)&v64 + 1))
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)&v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
        goto LABEL_37;
      }
      outlined init with take of Any(&v63, v52);
      if (v50[v49]) {
        break;
      }
      dispatch thunk of IteratorProtocol.next()();
      if (!v57)
      {
        unint64_t v39 = &v56;
LABEL_35:
        outlined destroy of BodyTrackingComponent?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v50[v49] = 1;
        break;
      }
      outlined init with take of Any(&v56, v58);
      dispatch thunk of IteratorProtocol.next()();
      if (!v55)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
        unint64_t v39 = &v54;
        goto LABEL_35;
      }
      outlined init with take of Any(&v54, &v56);
      outlined init with take of Any(v58, &v59);
      outlined init with take of Any(&v56, &v61);
      long long v63 = v59;
      long long v64 = v60;
      long long v65 = v61;
      long long v66 = v62;
      outlined init with take of Any(v52, &v67);
      long long v71 = v65;
      long long v72 = v66;
      long long v69 = v63;
      long long v70 = v64;
      long long v73 = v67;
      long long v74 = v68;
      long long v75 = v63;
      long long v76 = v64;
      long long v77 = v65;
      long long v78 = v66;
      outlined init with copy of Any((uint64_t)v46, (uint64_t)&v63);
      outlined init with copy of Any((uint64_t)v45, (uint64_t)&v65);
      outlined init with copy of Any((uint64_t)&v73, (uint64_t)&v67);
      outlined init with copy of Any((uint64_t)&v63, (uint64_t)&v59);
      outlined init with copy of Any((uint64_t)&v65, (uint64_t)&v61);
      outlined init with take of Any(&v59, &v69);
      outlined init with take of Any(&v63, v52);
      char v30 = v43;
      outlined init with take of Any(&v65, v43);
      outlined init with take of Any(v30, v44);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v73, &demangling cache variable for type metadata for (Any, (Any, Any)));
      uint64_t v31 = v79;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
        uint64_t v31 = v79;
      }
      unint64_t v33 = *(void *)(v31 + 16);
      unint64_t v32 = *(void *)(v31 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        uint64_t v31 = v79;
      }
      *(void *)(v31 + 16) = v33 + 1;
      uint64_t v34 = (_OWORD *)(v31 + 96 * v33);
      long long v35 = v68;
      v34[2] = v67;
      v34[3] = v35;
      long long v36 = v69;
      long long v37 = v70;
      long long v38 = v72;
      v34[6] = v71;
      v34[7] = v38;
      v34[4] = v36;
      v34[5] = v37;
      uint64_t v21 = (uint64_t)v48;
      if (v48[v51]) {
        goto LABEL_38;
      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
LABEL_37:
    uint64_t v21 = (uint64_t)v48;
    v48[v51] = 1;
LABEL_38:
    outlined destroy of BodyTrackingComponent?(v21, &demangling cache variable for type metadata for Zip2Sequence<NSArray, Zip2Sequence<NSArray, NSArray>>.Iterator);
    return v79;
  }
  return result;
}

uint64_t AcousticModelComponent.mesh.getter()
{
  return swift_retain();
}

uint64_t AcousticModelComponent.mesh.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*AcousticModelComponent.mesh.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AcousticModelComponent.absorptionMaterials.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AcousticModelComponent.absorptionMaterials.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AcousticModelComponent.absorptionMaterials.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AcousticModelComponent.scatteringMaterials.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AcousticModelComponent.scatteringMaterials.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AcousticModelComponent.scatteringMaterials.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AcousticModelComponent.soundReductionMaterials.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AcousticModelComponent.soundReductionMaterials.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AcousticModelComponent.soundReductionMaterials.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AcousticModelComponent.init(mesh:absorptionMaterials:scatteringMaterials:soundReductionMaterials:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

void AcousticModelComponent.init()(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *a1 = 0;
  a1[1] = v1;
  a1[2] = v1;
  a1[3] = v1;
}

void static AcousticModelComponent.__fromCore(_:)(uint64_t *a1@<X8>)
{
  Meshuint64_t Asset = REAcousticMeshComponentGetMeshAsset();
  if (MeshAsset)
  {
    uint64_t v2 = MeshAsset;
    type metadata accessor for AcousticMeshResource();
    uint64_t v3 = swift_allocObject();
    RERetain();
    uint64_t v25 = v3;
    *(void *)(v3 + 16) = v2;
  }
  else
  {
    uint64_t v25 = 0;
  }
  uint64_t v4 = (void *)REAcousticMeshComponentCopyAllAbsorptionIdentifiers();
  uint64_t v5 = (void *)REAcousticMeshComponentCopyAllAbsorptionFrequencies();
  unint64_t v24 = (void *)REAcousticMeshComponentCopyAllAbsorptionCoefficients();
  id v6 = v5;
  id v7 = v4;
  uint64_t v8 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySo7NSArrayCAGyA2IGG_yp_ypypts5NeverOTg503_s7b42STQzAASTQy_AASTQy0_AbcDIgnnnrrr_AB_AC_ADttn7_AcDts5g31OIegnrzr_STRzSTR_STR0_r1_lTRSo7f129C_A2HTG5091_s17RealityFoundation22AcousticModelComponentV10__fromCoreyAC0A3Kit02__E3RefVFZ4zip3L_ySay7a67Qz_AIQy_AIQy0_tGx_q_q0_ttu1_v1_w32_lFAJ_AkLtAJ_AK_ALttXEfU_So7C8C_Y14OTg5Tf3nnnpf_nTf1cn_n(v7, v6, v24);

  uint64_t v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyp_ypyptG_17RealityFoundation22AcousticModelComponentV18AbsorptionMaterialVs5NeverOTg5010_sypypyp17d12Foundation22fgh3V18ij20VIgnnnr_yp_ypyptAEs5k83OIegnrzr_TR04_s17a12Foundation22cde38V10__fromCoreyAC0A3Kit02__E3RefVFZAC18fG15Vyp_Q16XEfU0_Tf3nnnpf_nTf1cn_nTm(v8, (uint64_t)v29, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)REAcousticMeshComponentCopyAllScatteringIdentifiers();
  uint64_t v10 = (void *)REAcousticMeshComponentCopyAllScatteringCoefficients();
  id v11 = (void *)REAcousticMeshComponentCopyAllScatteringFrequencies();
  id v12 = v10;
  id v13 = v9;
  uint64_t v14 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySo7NSArrayCAGyA2IGG_yp_ypypts5NeverOTg503_s7b42STQzAASTQy_AASTQy0_AbcDIgnnnrrr_AB_AC_ADttn7_AcDts5g31OIegnrzr_STRzSTR_STR0_r1_lTRSo7f129C_A2HTG5091_s17RealityFoundation22AcousticModelComponentV10__fromCoreyAC0A3Kit02__E3RefVFZ4zip3L_ySay7a67Qz_AIQy_AIQy0_tGx_q_q0_ttu1_v1_w32_lFAJ_AkLtAJ_AK_ALttXEfU_So7C8C_Y14OTg5Tf3nnnpf_nTf1cn_n(v13, v11, v12);

  uint64_t v22 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyp_ypyptG_17RealityFoundation22AcousticModelComponentV18AbsorptionMaterialVs5NeverOTg5010_sypypyp17d12Foundation22fgh3V18ij20VIgnnnr_yp_ypyptAEs5k83OIegnrzr_TR04_s17a12Foundation22cde38V10__fromCoreyAC0A3Kit02__E3RefVFZAC18fG15Vyp_Q16XEfU0_Tf3nnnpf_nTf1cn_nTm(v14, (uint64_t)v28, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)REAcousticMeshComponentCopyAllSoundReductionIdentifiers();
  id v16 = (void *)REAcousticMeshComponentCopyAllSoundReductionIndices();
  id v17 = (void *)REAcousticMeshComponentCopyAllSoundReductionFrequencies();
  id v18 = v16;
  id v19 = v15;
  uint64_t v20 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySo7NSArrayCAGyA2IGG_yp_ypypts5NeverOTg503_s7b42STQzAASTQy_AASTQy0_AbcDIgnnnrrr_AB_AC_ADttn7_AcDts5g31OIegnrzr_STRzSTR_STR0_r1_lTRSo7f129C_A2HTG5091_s17RealityFoundation22AcousticModelComponentV10__fromCoreyAC0A3Kit02__E3RefVFZ4zip3L_ySay7a67Qz_AIQy_AIQy0_tGx_q_q0_ttu1_v1_w32_lFAJ_AkLtAJ_AK_ALttXEfU_So7C8C_Y14OTg5Tf3nnnpf_nTf1cn_n(v19, v17, v18);

  uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyp_ypyptG_17RealityFoundation22AcousticModelComponentV18AbsorptionMaterialVs5NeverOTg5010_sypypyp17d12Foundation22fgh3V18ij20VIgnnnr_yp_ypyptAEs5k83OIegnrzr_TR04_s17a12Foundation22cde38V10__fromCoreyAC0A3Kit02__E3RefVFZAC18fG15Vyp_Q16XEfU0_Tf3nnnpf_nTf1cn_nTm(v20, (uint64_t)v27, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  *a1 = v25;
  a1[1] = v23;
  a1[2] = v22;
  a1[3] = v21;
}

uint64_t AcousticModelComponent.__toCore(_:)()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  REAcousticMeshComponentSetMeshAsset();
  REAcousticMeshComponentClearAllMaterials();
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v20 = v2;
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = v1 + 56;
    do
    {
      uint64_t v6 = *(void *)(v5 - 24);
      uint64_t v7 = *(void *)(v5 - 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = (void *)MEMORY[0x22A688A50](v6, v7);
      REAcousticMeshComponentAddAbsorptionCoefficients();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v5 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    uint64_t v2 = v20;
  }
  uint64_t v9 = *(void *)(v2 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = v2 + 56;
    do
    {
      uint64_t v11 = *(void *)(v10 - 24);
      uint64_t v12 = *(void *)(v10 - 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v13 = (void *)MEMORY[0x22A688A50](v11, v12);
      REAcousticMeshComponentAddScatteringCoefficients();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v10 += 32;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = *(void *)(v3 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = v3 + 56;
    do
    {
      uint64_t v16 = *(void *)(v15 - 24);
      uint64_t v17 = *(void *)(v15 - 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v18 = (void *)MEMORY[0x22A688A50](v16, v17);
      REAcousticMeshComponentAddSoundReductionIndices();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v15 += 32;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance AcousticModelComponent(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static AcousticModelComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

uint64_t destroy for AcousticModelComponent()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AcousticModelComponent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AcousticModelComponent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AcousticModelComponent(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AcousticModelComponent()
{
  return &type metadata for AcousticModelComponent;
}

ValueMetadata *type metadata accessor for AcousticModelComponent.AbsorptionMaterial()
{
  return &type metadata for AcousticModelComponent.AbsorptionMaterial;
}

ValueMetadata *type metadata accessor for AcousticModelComponent.ScatteringMaterial()
{
  return &type metadata for AcousticModelComponent.ScatteringMaterial;
}

ValueMetadata *type metadata accessor for AcousticModelComponent.SoundReductionMaterial()
{
  return &type metadata for AcousticModelComponent.SoundReductionMaterial;
}

void toFloatArray #1 (_:) in static AcousticModelComponent.__fromCore(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)&double v4 = MEMORY[0x270FA5388](v2).n128_u64[0];
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)objc_msgSend(a1, sel_count, v4);
  uint64_t v28 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  id v8 = a1;
  NSArray.makeIterator()();

  if (v7 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }
  uint64_t v22 = v3;
  if (v7)
  {
    lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator();
    do
    {
      dispatch thunk of IteratorProtocol.next()();
      if (!v27) {
        goto LABEL_18;
      }
      outlined init with copy of Any((uint64_t)&v26, (uint64_t)&v24);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber);
      swift_dynamicCast();
      id v9 = v23;
      objc_msgSend(v23, sel_floatValue);
      int v11 = v10;

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      uint64_t v12 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        uint64_t v12 = v28;
      }
      unint64_t v14 = *(void *)(v12 + 16);
      unint64_t v13 = *(void *)(v12 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v12 = v28;
      }
      *(void *)(v12 + 16) = v14 + 1;
      *(_DWORD *)(v12 + 4 * v14 + 32) = v11;
    }
    while (--v7);
  }
  lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator();
  dispatch thunk of IteratorProtocol.next()();
  while (v25)
  {
    outlined init with take of Any(&v24, &v26);
    outlined init with copy of Any((uint64_t)&v26, (uint64_t)&v24);
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSNumber);
    swift_dynamicCast();
    id v15 = v23;
    objc_msgSend(v23, sel_floatValue);
    int v17 = v16;

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    uint64_t v18 = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
      uint64_t v18 = v28;
    }
    unint64_t v20 = *(void *)(v18 + 16);
    unint64_t v19 = *(void *)(v18 + 24);
    if (v20 >= v19 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      uint64_t v18 = v28;
    }
    *(void *)(v18 + 16) = v20 + 1;
    *(_DWORD *)(v18 + 4 * v20 + 32) = v17;
    dispatch thunk of IteratorProtocol.next()();
  }
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v2);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v24, (uint64_t *)&demangling cache variable for type metadata for Any?);
}

unint64_t lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator;
  if (!lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator)
  {
    type metadata accessor for NSFastEnumerationIterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator);
  }
  return result;
}

uint64_t AudioMixGroupsComponent._proto_fadeMixGroup(named:to:duration:)(uint64_t a1, uint64_t a2, double a3)
{
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized Dictionary.subscript.modify(v12, a1, a2);
  if (*(void *)(v6 + 48))
  {
    uint64_t v8 = v6;
    double v9 = (double)Duration.components.getter();
    Duration.components.getter();
    *(double *)(v8 + 8) = a3;
    *(unsigned char *)(v8 + 16) = 0;
    *(double *)(v8 + 24) = (double)v10 * 1.0e-18 + v9;
    *(unsigned char *)(v8 + 32) = 0;
  }
  ((void (*)(void *, void))v7)(v12, 0);
  return swift_bridgeObjectRelease();
}

void (*specialized Dictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  void v6[5] = specialized Dictionary._Variant.subscript.modify(v6, a2, a3);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

void (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = specialized Dictionary._Variant.asNative.modify(v6);
  v6[10] = specialized _NativeDictionary.subscript.modify(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, char a4))(long long **a1)
{
  uint64_t v5 = v4;
  uint64_t v10 = (char *)malloc(0x70uLL);
  *a1 = v10;
  *((void *)v10 + 11) = a3;
  *((void *)v10 + 12) = v4;
  *((void *)v10 + 10) = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v10[73] = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      *((void *)v10 + 13) = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*v5 + 56) + 80 * v13;
        long long v20 = *(_OWORD *)v19;
        uint64_t v21 = *(unsigned __int8 *)(v19 + 16);
        uint64_t v22 = *(void *)(v19 + 24);
        uint64_t v23 = *(unsigned __int8 *)(v19 + 32);
        int v24 = *(unsigned __int8 *)(v19 + 33);
        uint64_t v25 = *(void *)(v19 + 40);
        uint64_t v26 = *(void *)(v19 + 48);
        long long v27 = *(_OWORD *)(v19 + 56);
        char v28 = *(unsigned char *)(v19 + 72);
        BOOL v29 = v24 == 0;
        uint64_t v30 = 256;
        if (v29) {
          uint64_t v30 = 0;
        }
        uint64_t v31 = v30 | v23;
        goto LABEL_15;
      }
LABEL_14:
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v31 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      char v28 = 0;
      long long v20 = 0uLL;
      long long v27 = 0uLL;
LABEL_15:
      *(_OWORD *)uint64_t v10 = v20;
      *((void *)v10 + 2) = v21;
      *((void *)v10 + 3) = v22;
      *((void *)v10 + 4) = v31;
      *((void *)v10 + 5) = v25;
      *((void *)v10 + 6) = v26;
      *(_OWORD *)(v10 + 56) = v27;
      v10[72] = v28;
      return _NativeDictionary.subscript.modifyspecialized ;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
    unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v17 & 1) == (v33 & 1))
    {
      unint64_t v13 = v32;
      *((void *)v10 + 13) = v32;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  unint64_t result = (void (*)(long long **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (long long **a1)
{
  uint64_t v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((unsigned char *)*a1 + 73), *((uint64_t **)*a1 + 12), *((void *)*a1 + 13), *((void *)*a1 + 10), *((void *)*a1 + 11));
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(long long *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *((void *)a1 + 6);
  if (v8)
  {
    uint64_t v9 = *((void *)a1 + 5);
    int v10 = *((_DWORD *)a1 + 8);
    uint64_t v11 = *((void *)a1 + 3);
    char v12 = *((_DWORD *)a1 + 4);
    char v13 = *((unsigned char *)a1 + 72) & 1;
    long long v18 = *a1;
    LOBYTE(v19) = v12 & 1;
    *((void *)&v19 + 1) = v11;
    LOWORD(v20) = v10 & 0x101;
    *((void *)&v20 + 1) = v9;
    *(void *)uint64_t v21 = v8;
    *(_OWORD *)&v21[8] = *(long long *)((char *)a1 + 56);
    v21[24] = v13;
    if (a2)
    {
      uint64_t v14 = (_OWORD *)(*(void *)(*a3 + 56) + 80 * a4);
      long long v15 = *(_OWORD *)v21;
      v14[2] = v20;
      v14[3] = v15;
      *(_OWORD *)((char *)v14 + 57) = *(_OWORD *)&v21[9];
      long long v16 = v19;
      _OWORD *v14 = v18;
      v14[1] = v16;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, &v18, (void *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }

  return swift_bridgeObjectRetain();
}

double SPRect3D.init(_:)@<D0>(uint64_t a1@<X8>)
{
  REAABBCenter();
  __n128 v11 = (__n128)vcvtq_f64_f32(v2);
  long long v12 = COERCE_UNSIGNED_INT64(v3);
  SPSize3DMakeWithVector(&v11, (__n128 *)&v17);
  REAABBExtents();
  __n128 v11 = (__n128)vcvtq_f64_f32(v5);
  long long v12 = COERCE_UNSIGNED_INT64(v4);
  SPSize3DMakeWithVector(&v11, (__n128 *)&v16);
  SPRect3DMakeAtCenter(&v17, &v16, (uint64_t)&v11);
  double result = v11.n128_f64[0];
  long long v7 = v12;
  long long v8 = v13;
  uint64_t v9 = v14;
  uint64_t v10 = v15;
  *(__n128 *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 32) = v8;
  return result;
}

float64x2_t SPRect3DMakeAtCenter@<Q0>(SPPoint3D *a1@<X0>, SPSize3D *a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *(_OWORD *)&a2->width;
  float64x2_t v3 = *(float64x2_t *)&a2->vector.f64[2];
  __asm { FMOV            V4.2D, #-0.5 }
  uint64_t v10 = *(_OWORD *)&vaddq_f64(*(float64x2_t *)&a1->vector.f64[2], vmulq_f64(v3, _Q4));
  float64x2_t result = vaddq_f64(*(float64x2_t *)&a1->x, vmulq_f64(*(float64x2_t *)&a2->width, _Q4));
  *(float64x2_t *)a3 = result;
  *(void *)(a3 + 16) = v10;
  *(_OWORD *)(a3 + 32) = v4;
  *(float64_t *)(a3 + 48) = v3.f64[0];
  return result;
}

__n128 BoundingBox.init(_:)(double *a1)
{
  double v1 = *a1;
  double v2 = a1[1];
  double v4 = a1[3];
  double v5 = a1[4];
  double v6 = a1[5];
  double v7 = a1[6];
  double v8 = a1[7];
  v15.origin.double z = a1[2];
  double z = v15.origin.z;
  v15.origin.vector.f64[3] = v4;
  v15.origin.x = v1;
  v15.origin.y = v2;
  v15.size.depth = v7;
  v15.size.vector.f64[3] = v8;
  v15.size.width = v5;
  v15.size.height = v6;
  SPRect3DGetMinimum(&v15, (uint64_t)&v13);
  *(float32x2_t *)&long long v9 = vcvt_f32_f64(v13);
  *(float *)&unsigned int v10 = v14;
  *((void *)&v9 + 1) = v10;
  long long v12 = v9;
  v15.origin.double z = z;
  v15.origin.vector.f64[3] = v4;
  v15.origin.x = v1;
  v15.origin.y = v2;
  v15.size.depth = v7;
  v15.size.vector.f64[3] = v8;
  v15.size.width = v5;
  v15.size.height = v6;
  SPRect3DGetMaximum(&v15, (uint64_t)&v13);
  return (__n128)v12;
}

float64x2_t SPRect3DGetMinimum@<Q0>(SPRect3D *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(_OWORD *)&vaddq_f64(*(float64x2_t *)&a1->origin.vector.f64[2], vminnmq_f64((float64x2_t)*(unint64_t *)&a1->size.depth, (float64x2_t)0));
  float64x2_t result = vaddq_f64(*(float64x2_t *)&a1->origin.x, vminnmq_f64(*(float64x2_t *)&a1->size.width, (float64x2_t)0));
  *(float64x2_t *)a2 = result;
  *(void *)(a2 + 16) = v2;
  return result;
}

float64x2_t SPRect3DGetMaximum@<Q0>(SPRect3D *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(_OWORD *)&vaddq_f64(*(float64x2_t *)&a1->origin.vector.f64[2], vmaxnmq_f64((float64x2_t)*(unint64_t *)&a1->size.depth, (float64x2_t)0));
  float64x2_t result = vaddq_f64(*(float64x2_t *)&a1->origin.x, vmaxnmq_f64(*(float64x2_t *)&a1->size.width, (float64x2_t)0));
  *(float64x2_t *)a2 = result;
  *(void *)(a2 + 16) = v2;
  return result;
}

uint64_t VFXParameterType.isMatching(type:)()
{
  int v1 = *v0;
  if (swift_dynamicCastMetatype())
  {
    return v1 == 0;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 1;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 2;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 3;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 4;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 5;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 6;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 7;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 8;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 9;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 10;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 11;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 12;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    if (swift_dynamicCastMetatype())
    {
      return v1 == 13;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      if (swift_dynamicCastMetatype())
      {
        return v1 == 14;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
        if (swift_dynamicCastMetatype())
        {
          return v1 == 15;
        }
        else
        {
          type metadata accessor for simd_float3x3(0);
          if (swift_dynamicCastMetatype())
          {
            return v1 == 16;
          }
          else
          {
            type metadata accessor for simd_float4x4(0);
            if (swift_dynamicCastMetatype())
            {
              return v1 == 17;
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
              if (swift_dynamicCastMetatype())
              {
                return v1 == 18;
              }
              else
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
                if (swift_dynamicCastMetatype())
                {
                  return v1 == 19;
                }
                else
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
                  if (swift_dynamicCastMetatype())
                  {
                    return v1 == 20;
                  }
                  else
                  {
                    type metadata accessor for simd_double3x3(0);
                    if (swift_dynamicCastMetatype())
                    {
                      return v1 == 21;
                    }
                    else
                    {
                      type metadata accessor for simd_double4x4(0);
                      if (swift_dynamicCastMetatype())
                      {
                        return v1 == 22;
                      }
                      else
                      {
                        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for CAKeyframeAnimation);
                        uint64_t result = swift_dynamicCastMetatype();
                        if (!result) {
                          return result;
                        }
                        return (v1 & 0xFE) == 24;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t VFXParameterType.rawValue.getter()
{
  return *v0;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v9 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  uint64_t result = v9;
  if (v2)
  {
    double v4 = (long long *)(a1 + 32);
    unint64_t v5 = *(void *)(v9 + 16);
    do
    {
      long long v6 = *v4;
      uint64_t v10 = result;
      unint64_t v7 = *(void *)(result + 24);
      if (v5 >= v7 >> 1)
      {
        long long v8 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v5 + 1, 1);
        long long v6 = v8;
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v5 + 1;
      *(_OWORD *)(result + 16 * v5 + 32) = v6;
      ++v4;
      ++v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[32];
  uint64_t v12;

  int64_t v2 = *(void *)(a1 + 16);
  long long v12 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  float64x2_t v3 = v12;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      outlined init with copy of Any(i, (uint64_t)v11);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        float64x2_t v3 = v12;
      }
      long long v6 = *(void *)(v3 + 16);
      unint64_t v5 = *(void *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        float64x2_t v3 = v12;
      }
      *(void *)(v3 + 16) = v6 + 1;
      unint64_t v7 = v3 + 16 * v6;
      *(void *)(v7 + 32) = v9;
      *(void *)(v7 + 40) = v10;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

RealityFoundation::VFXParameterSemantic_optional __swiftcall VFXParameterSemantic.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 12;
  if ((unint64_t)rawValue < 0xC) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (RealityFoundation::VFXParameterSemantic_optional)rawValue;
}

RealityFoundation::VFXParameterSemantic_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VFXParameterSemantic(Swift::Int *a1)
{
  return VFXParameterSemantic.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance VFXParameterSemantic()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VFXParameterSemantic()
{
  return RawRepresentable<>.encode(to:)();
}

RealityFoundation::VFXParameterType_optional __swiftcall VFXParameterType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 0;
  char v3 = 8;
  switch(rawValue)
  {
    case 0:
      goto LABEL_10;
    case 1:
      char v2 = 1;
      goto LABEL_10;
    case 2:
      char v2 = 2;
      goto LABEL_10;
    case 3:
      char v2 = 3;
      goto LABEL_10;
    case 4:
      char v2 = 4;
      goto LABEL_10;
    case 5:
      char v2 = 5;
      goto LABEL_10;
    case 6:
      char v2 = 6;
      goto LABEL_10;
    case 7:
      char v2 = 7;
LABEL_10:
      char v3 = v2;
      goto LABEL_11;
    case 8:
LABEL_11:
      char *v1 = v3;
      break;
    case 9:
      char *v1 = 9;
      break;
    case 10:
      char *v1 = 10;
      break;
    case 11:
      char *v1 = 11;
      break;
    case 12:
      char *v1 = 12;
      break;
    case 13:
      char *v1 = 13;
      break;
    case 14:
      char *v1 = 14;
      break;
    case 15:
      char *v1 = 15;
      break;
    case 16:
      char *v1 = 16;
      break;
    case 17:
      char *v1 = 17;
      break;
    case 18:
      char *v1 = 18;
      break;
    case 19:
      char *v1 = 19;
      break;
    case 20:
      char *v1 = 20;
      break;
    case 21:
      char *v1 = 21;
      break;
    case 22:
      char *v1 = 22;
      break;
    case 23:
      char *v1 = 23;
      break;
    case 24:
      char *v1 = 24;
      break;
    case 25:
      char *v1 = 25;
      break;
    default:
      char *v1 = 26;
      break;
  }
  return (RealityFoundation::VFXParameterType_optional)rawValue;
}

RealityFoundation::VFXParameterType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VFXParameterType(Swift::Int *a1)
{
  return VFXParameterType.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance VFXParameterType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VFXParameterType()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t VFXResource.LoadError.errorDescription.getter()
{
  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v12);
  uint64_t v1 = v12[0];
  char v2 = (void *)v12[1];
  if (v13)
  {
    uint64_t v3 = v12[2];
    unint64_t v4 = v12[3];
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000019;
    v5._countAndFlagsBits = v1;
    v5._object = v2;
    String.append(_:)(v5);
    v6._countAndFlagsBits = 2112034;
    v6._object = (void *)0xE300000000000000;
    String.append(_:)(v6);
    uint64_t v7 = v3;
    unint64_t v8 = v4;
  }
  else
  {
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000023;
    v9._countAndFlagsBits = v1;
    v9._object = v2;
    String.append(_:)(v9);
    uint64_t v7 = 0x6E7562206E692022;
    unint64_t v8 = 0xEB00000000656C64;
  }
  String.append(_:)(*(Swift::String *)&v7);
  return v11;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance VFXResource.LoadError()
{
  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v2);
  return VFXResource.LoadError.errorDescription.getter();
}

id static VFXResource.systemNames.getter()
{
  id result = (id)REVFXAssetEnumerateBuiltInAssets();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *static VFXResource.load(systemName:)(uint64_t a1, char *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  Swift::String v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = MEMORY[0x270FA5388](v11);
  double v14 = (char *)v22 - v13;
  SPRect3D v15 = (void *)MEMORY[0x22A688A50](a1, a2, v12);
  id v16 = (id)REVFXGetLibraryURLForSystemName();

  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_7;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  SPPoint3D v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v17(v6, v10, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_7:
    outlined destroy of URL?((uint64_t)v6);
    id v20 = (id)REVFXAssetGetBuiltInEffectsBundle();
    a2 = specialized static VFXResource.load(named:in:)(a1, (uint64_t)a2, v20);

    return a2;
  }
  v17(v14, v6, v7);
  uint64_t v18 = v22[1];
  uint64_t v19 = specialized static VFXResource.load(contentsOf:withName:)();
  if (!v18) {
    a2 = (char *)v19;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static VFXResource.load(contentsOf:withName:)()
{
  return specialized static VFXResource.load(contentsOf:withName:)();
}

char *static VFXResource.load(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized static VFXResource.load(named:in:)(a1, a2, a3);
}

uint64_t static VFXResource.loadAsync(systemName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v4 - 8);
  Swift::String v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = MEMORY[0x270FA5388](v11);
  double v14 = (char *)&v21 - v13;
  SPRect3D v15 = (void *)MEMORY[0x22A688A50](a1, a2, v12);
  id v16 = (id)REVFXGetLibraryURLForSystemName();

  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_5;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  SPPoint3D v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v17(v6, v10, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_5:
    outlined destroy of URL?((uint64_t)v6);
    id v19 = (id)REVFXAssetGetBuiltInEffectsBundle();
    uint64_t v18 = specialized static VFXResource.loadAsync(named:in:)(a1, a2, v19);

    return v18;
  }
  v17(v14, v6, v7);
  uint64_t v18 = specialized static VFXResource.loadAsync(contentsOf:withName:)(v14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  return v18;
}

void closure #1 in static VFXResource.loadAsync(named:in:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = swift_allocObject();
  uint64_t v42 = a1;
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  uint64_t v12 = a3 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(a3 + 120, (uint64_t)&aBlock);
  double v14 = v51;
  uint64_t v13 = v52;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v51);
  SPRect3D v15 = (void (*)(void *, void (*)(char)))*((void *)v13 + 4);
  swift_retain();
  v15(v14, v13);
  id v16 = (void *)MEMORY[0x22A688A50](a5, a6);
  SPPoint3D v17 = (void *)MEMORY[0x22A688A50](7890550, 0xE300000000000000);
  uint64_t v18 = REAssetManagerAssetHandleCreateWithBundleResource();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  if (v18)
  {
    uint64_t v19 = v18;
    outlined init with copy of __REAssetService(v12, (uint64_t)&aBlock);
    outlined init with copy of __REAssetService(v12, (uint64_t)&v43);
    id v20 = v45;
    uint64_t v21 = v46;
    __swift_project_boxed_opaque_existential_1(&v43, (uint64_t)v45);
    LOBYTE(v20) = (*((uint64_t (**)(void *, uint64_t (*)()))v21 + 7))(v20, v21);
    uint64_t v22 = v51;
    uint64_t v23 = v52;
    __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v51);
    (*((void (**)(void *, void (*)(char)))v23 + 4))(v22, v23);
    uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
    Request = (void *)type metadata accessor for __AssetLoadRequest();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = AssetRequest;
    if (v20) {
      REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
    long long v27 = (void *)swift_allocObject();
    v27[2] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    void v27[3] = v11;
    v27[4] = v19;
    v27[5] = a5;
    v27[6] = a6;
    v27[7] = v26;
    char v52 = partial apply for specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(named:in:);
    unint64_t v53 = v27;
    aBlocuint64_t k = MEMORY[0x263EF8330];
    uint64_t v49 = 1107296256;
    uint64_t v50 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    uint64_t v51 = &block_descriptor_77;
    char v28 = _Block_copy(&aBlock);
    BOOL v29 = _Block_copy(v28);
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v29;
    unint64_t v46 = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    uint64_t v47 = v30;
    *(void *)&long long v43 = MEMORY[0x263EF8330];
    *((void *)&v43 + 1) = 1107296256;
    uint64_t v44 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    unint64_t v45 = &block_descriptor_84;
    uint64_t v31 = _Block_copy(&v43);
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v31);
    _Block_release(v28);
    swift_release();
    REAssetLoadRequestAddAsset();
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v33 = Strong;
      uint64_t v51 = Request;
      aBlocuint64_t k = v26;
      uint64_t v34 = (os_unfair_lock_s *)(*(void *)(Strong + 24) + 16);
      os_unfair_lock_lock(v34);
      outlined init with copy of Any((uint64_t)&aBlock, (uint64_t)&v43);
      long long v35 = (void *)(v33 + 16);
      swift_beginAccess();
      long long v36 = *(void **)(v33 + 16);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v33 + 16) = v36;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        long long v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
        *long long v35 = v36;
      }
      unint64_t v39 = v36[2];
      unint64_t v38 = v36[3];
      if (v39 >= v38 >> 1)
      {
        long long v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v36);
        *long long v35 = v36;
      }
      v36[2] = v39 + 1;
      outlined init with take of Any(&v43, &v36[4 * v39 + 4]);
      swift_endAccess();
      os_unfair_lock_unlock(v34);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    }
    else
    {
      swift_release_n();
    }
    RERelease();
  }
  else
  {
    swift_release();
    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    uint64_t v40 = (void *)swift_allocError();
    *(void *)uint64_t v41 = a5;
    *(void *)(v41 + 8) = a6;
    *(void *)(v41 + 16) = 0;
    *(void *)(v41 + 24) = 0;
    *(unsigned char *)(v41 + 32) = 0;
    aBlocuint64_t k = (uint64_t)v40;
    LOBYTE(v49) = 1;
    swift_bridgeObjectRetain();
    v42(&aBlock);
  }
}

void specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(named:in:)(char a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    type metadata accessor for VFXResource();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a4;
    RERetain();
    REAssetSetSwiftObject();
    a2(v8, 0);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    SPRect3D v15 = (void *)swift_allocError();
    *(void *)uint64_t v16 = a5;
    *(void *)(v16 + 8) = a6;
    *(void *)(v16 + 16) = v12;
    *(void *)(v16 + 24) = v14;
    *(unsigned char *)(v16 + 32) = 1;
    a2((uint64_t)v15, 1);
  }
  aBlock[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_87;
  SPPoint3D v17 = _Block_copy(aBlock);
  uint64_t v18 = _Block_copy(v17);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  void v21[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v21[5] = v19;
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 1107296256;
  void v21[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  void v21[3] = &block_descriptor_94;
  id v20 = _Block_copy(v21);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v20);
  _Block_release(v17);
}

void closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v49 = a5;
  uint64_t v52 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v50 = v10;
  uint64_t v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  Request = a1;
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  uint64_t v12 = a3 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12, (uint64_t)&aBlock);
  uint64_t v14 = v61;
  uint64_t v13 = v62;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v61);
  SPRect3D v15 = (void (*)(void *, void (*)(char)))*((void *)v13 + 4);
  swift_retain();
  v15(v14, v13);
  *(void *)&long long v53 = 0x6170656372756F73;
  *((void *)&v53 + 1) = 0xEB000000003A6874;
  v16._countAndFlagsBits = URL.path.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  if (AssetHandle)
  {
    uint64_t v18 = AssetHandle;
    v49 += 16;
    outlined init with copy of __REAssetService(v12, (uint64_t)&aBlock);
    outlined init with copy of __REAssetService(v12, (uint64_t)&v53);
    uint64_t v19 = v55;
    id v20 = (uint64_t (**)(void *, uint64_t (*)(char)))v56;
    __swift_project_boxed_opaque_existential_1(&v53, (uint64_t)v55);
    LOBYTE(v20) = v20[7](v19, (uint64_t (*)(char))v20);
    uint64_t v21 = v61;
    uint64_t v22 = v62;
    __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v61);
    (*((void (**)(void *, void (*)(char)))v22 + 4))(v21, v22);
    uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
    Request = (void (*)(void))type metadata accessor for __AssetLoadRequest();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = AssetRequest;
    if (v20) {
      REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
    uint64_t v25 = v51;
    uint64_t v26 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v51, a4, v52);
    unint64_t v27 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    unint64_t v28 = (v50 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    BOOL v29 = (char *)swift_allocObject();
    *((void *)v29 + 2) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    *((void *)v29 + 3) = v11;
    *((void *)v29 + 4) = v18;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v29[v27], v25, v26);
    *(void *)&v29[v28] = v24;
    long long v62 = partial apply for specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(contentsOf:withName:);
    long long v63 = v29;
    aBlocuint64_t k = MEMORY[0x263EF8330];
    uint64_t v59 = 1107296256;
    long long v60 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    long long v61 = &block_descriptor_43_0;
    uint64_t v30 = _Block_copy(&aBlock);
    uint64_t v31 = _Block_copy(v30);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v31;
    long long v56 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
    uint64_t v57 = v32;
    *(void *)&long long v53 = MEMORY[0x263EF8330];
    *((void *)&v53 + 1) = 1107296256;
    long long v54 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    uint64_t v55 = &block_descriptor_49;
    uint64_t v33 = _Block_copy(&v53);
    swift_retain_n();
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v33);
    _Block_release(v30);
    swift_release();
    REAssetLoadRequestAddAsset();
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v35 = Strong;
      long long v61 = Request;
      aBlocuint64_t k = v24;
      long long v36 = (os_unfair_lock_s *)(*(void *)(Strong + 24) + 16);
      os_unfair_lock_lock(v36);
      outlined init with copy of Any((uint64_t)&aBlock, (uint64_t)&v53);
      long long v37 = (void *)(v35 + 16);
      swift_beginAccess();
      unint64_t v38 = *(void **)(v35 + 16);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v35 + 16) = v38;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        *long long v37 = v38;
      }
      unint64_t v41 = v38[2];
      unint64_t v40 = v38[3];
      if (v41 >= v40 >> 1)
      {
        unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v38);
        *long long v37 = v38;
      }
      v38[2] = v41 + 1;
      outlined init with take of Any(&v53, &v38[4 * v41 + 4]);
      swift_endAccess();
      os_unfair_lock_unlock(v36);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    }
    else
    {
      swift_release_n();
    }
    RERelease();
  }
  else
  {
    swift_release();
    uint64_t v42 = URL.path.getter();
    uint64_t v44 = v43;
    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    unint64_t v45 = (void *)swift_allocError();
    *(void *)uint64_t v46 = v42;
    *(void *)(v46 + 8) = v44;
    *(void *)(v46 + 16) = 0;
    *(void *)(v46 + 24) = 0;
    *(unsigned char *)(v46 + 32) = 0;
    aBlocuint64_t k = (uint64_t)v45;
    LOBYTE(v59) = 1;
    Request(&aBlock);
  }
}

void specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(char a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    type metadata accessor for VFXResource();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a4;
    RERetain();
    REAssetSetSwiftObject();
    a2(v6, 0);
    swift_release();
  }
  else
  {
    uint64_t v7 = URL.path.getter();
    uint64_t v9 = v8;
    uint64_t FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    uint64_t v14 = (void *)swift_allocError();
    *(void *)uint64_t v15 = v7;
    *(void *)(v15 + 8) = v9;
    *(void *)(v15 + 16) = v11;
    *(void *)(v15 + 24) = v13;
    *(unsigned char *)(v15 + 32) = 1;
    a2((uint64_t)v14, 1);
  }
  aBlock[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_52_0;
  Swift::String v16 = _Block_copy(aBlock);
  SPPoint3D v17 = _Block_copy(v16);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  v20[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v20[5] = v18;
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 1107296256;
  v20[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  void v20[3] = &block_descriptor_59_0;
  uint64_t v19 = _Block_copy(v20);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v19);
  _Block_release(v16);
}

uint64_t protocol witness for VFXParameter.bindingName.getter in conformance VFXResource.VFXParameterImpl()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void protocol witness for VFXParameter.semantic.getter in conformance VFXResource.VFXParameterImpl(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 49);
}

double protocol witness for VFXParameter.min.getter in conformance VFXResource.VFXParameterImpl()
{
  return *(double *)(v0 + 56);
}

double protocol witness for VFXParameter.max.getter in conformance VFXResource.VFXParameterImpl()
{
  return *(double *)(v0 + 64);
}

uint64_t protocol witness for VFXParameter.userManual.getter in conformance VFXResource.VFXParameterImpl()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for VFXParameter.enumName.getter in conformance VFXResource.VFXParameterImpl()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for VFXParameter.enumCases.getter in conformance VFXResource.VFXParameterImpl()
{
  return swift_bridgeObjectRetain();
}

uint64_t VFXResource.version.getter()
{
  return MEMORY[0x270F21170](*(void *)(v0 + 16));
}

uint64_t VFXResource.parameters.getter()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  uint64_t v1 = (uint64_t *)(v0 + 16);
  void v5[4] = partial apply for closure #1 in VFXResource.parameters.getter;
  v5[5] = v0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed String, @guaranteed String, @guaranteed String, @unowned Int, @unowned Int, @unowned Double, @unowned Double, @guaranteed String, @guaranteed String, @guaranteed [Any]) -> ();
  void v5[3] = &block_descriptor_26;
  uint64_t v2 = _Block_copy(v5);
  swift_retain();
  swift_release();
  REVFXAssetEnumerateParameterInfosWithEnum();
  _Block_release(v2);
  swift_beginAccess();
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  swift_release();
  return v3;
}

void closure #1 in VFXResource.parameters.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, Swift::Int rawValue, unint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  VFXParameterType.init(rawValue:)(rawValue);
  char v23 = v39;
  if (v39 == 26 || a8 > 0xB)
  {
    os_log_type_t v25 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    log = static OS_os_log.default.getter();
    if (os_log_type_enabled(log, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(void *)&long long v39 = v27;
      *(_DWORD *)uint64_t v26 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 22) = 2048;
      uint64_t v42 = rawValue;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_227DD2000, log, v25, "[VFX] Parameter %s.%s with unknown type %ld", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v27, -1, -1);
      MEMORY[0x22A696500](v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    unint64_t v28 = (void *)(a16 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v34 = specialized _arrayConditionalCast<A, B>(_:)(a15);
    swift_beginAccess();
    BOOL v29 = *(void **)(a16 + 16);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v28 = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      BOOL v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
      *unint64_t v28 = v29;
    }
    unint64_t v32 = v29[2];
    unint64_t v31 = v29[3];
    if (v32 >= v31 >> 1)
    {
      BOOL v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v29);
      *unint64_t v28 = v29;
    }
    unint64_t v40 = &type metadata for VFXResource.VFXParameterImpl;
    unint64_t v41 = &protocol witness table for VFXResource.VFXParameterImpl;
    uint64_t v33 = swift_allocObject();
    *(void *)&long long v39 = v33;
    *(void *)(v33 + 16) = a1;
    *(void *)(v33 + 24) = a2;
    *(void *)(v33 + 32) = a3;
    *(void *)(v33 + 40) = a4;
    *(void *)(v33 + 48) = a5;
    *(void *)(v33 + 56) = a6;
    *(unsigned char *)(v33 + 64) = v23;
    *(unsigned char *)(v33 + 65) = a8;
    *(double *)(v33 + 72) = a9;
    *(double *)(v33 + 80) = a10;
    *(void *)(v33 + 88) = a11;
    *(void *)(v33 + 96) = a12;
    *(void *)(v33 + 104) = a13;
    *(void *)(v33 + 112) = a14;
    *(void *)(v33 + 120) = v34;
    void v29[2] = v32 + 1;
    outlined init with take of BindableDataInternal(&v39, (uint64_t)&v29[5 * v32 + 4]);
    swift_endAccess();
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String, @guaranteed String, @guaranteed String, @unowned Int, @unowned Int, @unowned Double, @unowned Double, @guaranteed String, @guaranteed String, @guaranteed [Any]) -> ()(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v27(v26, v11, v25, v13, v14, v16, a7, a8, a2, a3, v17, v19, v20, v22, v23);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t VFXResource.parameter(named:owner:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(void *)(v10 + 48) = 0;
  if (a4) {
    a4 = (void *)MEMORY[0x22A688A50](a3, a4);
  }
  uint64_t v11 = (void *)MEMORY[0x22A688A50](a1, a2);
  v14[4] = partial apply for closure #1 in VFXResource.parameter(named:owner:);
  v14[5] = v10;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed String, @guaranteed String, @guaranteed String, @unowned Int, @unowned Int, @unowned Double, @unowned Double, @guaranteed String, @guaranteed String, @guaranteed [Any]) -> ();
  v14[3] = &block_descriptor_6_1;
  uint64_t v12 = _Block_copy(v14);
  swift_retain();
  swift_release();
  REVFXAssetFindParameterInfoWithEnum();
  _Block_release(v12);

  swift_beginAccess();
  outlined init with copy of VFXParameter?(v10 + 16, a5);
  return swift_release();
}

void closure #1 in VFXResource.parameter(named:owner:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, Swift::Int rawValue, unint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  VFXParameterType.init(rawValue:)(rawValue);
  char v23 = v34[0];
  if (LOBYTE(v34[0]) == 26 || a8 > 0xB)
  {
    uint64_t v25 = a3;
    os_log_type_t v26 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    log = static OS_os_log.default.getter();
    if (os_log_type_enabled(log, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v34[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315650;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, a4, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v27 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v27 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_227DD2000, log, v26, "[VFX] Parameter %s.%s with unknown type %ld", (uint8_t *)v27, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v28, -1, -1);
      MEMORY[0x22A696500](v27, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v29 = specialized _arrayConditionalCast<A, B>(_:)(a15);
    v34[3] = (uint64_t)&type metadata for VFXResource.VFXParameterImpl;
    v34[4] = (uint64_t)&protocol witness table for VFXResource.VFXParameterImpl;
    uint64_t v30 = swift_allocObject();
    v34[0] = v30;
    *(void *)(v30 + 16) = a1;
    *(void *)(v30 + 24) = a2;
    *(void *)(v30 + 32) = a3;
    *(void *)(v30 + 40) = a4;
    *(void *)(v30 + 48) = a5;
    *(void *)(v30 + 56) = a6;
    *(unsigned char *)(v30 + 64) = v23;
    *(unsigned char *)(v30 + 65) = a8;
    *(double *)(v30 + 72) = a9;
    *(double *)(v30 + 80) = a10;
    *(void *)(v30 + 88) = a11;
    *(void *)(v30 + 96) = a12;
    *(void *)(v30 + 104) = a13;
    *(void *)(v30 + 112) = a14;
    *(void *)(v30 + 120) = v29;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    outlined assign with take of VFXParameter?((uint64_t)v34, a16 + 16);
  }
}

uint64_t VFXResource.deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t VFXResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t specialized static VFXResource.load(contentsOf:withName:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v11);
  uint64_t v1 = v12;
  uint64_t v2 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v2 + 32);
  swift_retain();
  v3(v1, v2);
  v4._countAndFlagsBits = URL.path.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  if (AssetHandle)
  {
    REAssetHandleLoadNow();
    type metadata accessor for VFXResource();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = AssetHandle;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
  }
  else
  {
    uint64_t v7 = URL.path.getter();
    uint64_t v6 = v8;
    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    swift_allocError();
    *(void *)uint64_t v9 = v7;
    *(void *)(v9 + 8) = v6;
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 24) = 0;
    *(unsigned char *)(v9 + 32) = 0;
    swift_willThrow();
  }
  swift_release();
  return v6;
}

char *specialized static VFXResource.load(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  MEMORY[0x270FA5388](v12);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v48 - v14;
  uint64_t v50 = (char *)v16;
  uint64_t v51 = v3;
  uint64_t v49 = v17;
  uint64_t v18 = a2;
  if (a3) {
    id v19 = a3;
  }
  else {
    id v19 = objc_msgSend(self, sel_mainBundle);
  }
  id v20 = a3;
  id v55 = v19;
  id v21 = objc_msgSend(v19, sel_bundleURL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v22 = URL.pathExtension.getter();
  uint64_t v24 = v23;
  uint64_t v48 = *(void (**)(char *, uint64_t))(v11 + 8);
  v48(v15, v10);
  if (v22 == 0x617262696C786676 && v24 == 0xEA00000000007972)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      goto LABEL_18;
    }
  }
  uint64_t v27 = (void *)MEMORY[0x22A688A50](a1, a2);
  uint64_t v28 = (void *)MEMORY[0x22A688A50](7890550, 0xE300000000000000);
  id v29 = objc_msgSend(v55, sel_URLForResource_withExtension_, v27, v28);

  if (v29)
  {
    uint64_t v30 = v50;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v31 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v31(v9, v30, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
    {
      unint64_t v32 = v49;
      v31(v49, v9, v10);
      uint64_t v33 = v51;
      uint64_t v34 = specialized static VFXResource.load(contentsOf:withName:)();
      if (!v33) {
        uint64_t v30 = (char *)v34;
      }
      v48(v32, v10);

      return v30;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  }
  outlined destroy of URL?((uint64_t)v9);
LABEL_18:
  uint64_t v35 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v35, (uint64_t)v52);
  uint64_t v36 = v53;
  uint64_t v37 = v54;
  __swift_project_boxed_opaque_existential_1(v52, v53);
  unint64_t v38 = *(void (**)(uint64_t, uint64_t))(v37 + 32);
  swift_retain();
  v38(v36, v37);
  uint64_t v30 = (char *)MEMORY[0x22A688A50](a1, v18);
  long long v39 = (void *)MEMORY[0x22A688A50](7890550, 0xE300000000000000);
  id v40 = v55;
  uint64_t v41 = REAssetManagerAssetHandleCreateWithBundleResource();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  if (v41)
  {
    REAssetHandleLoadNow();
    if (!REAssetHandleLoadFailed())
    {
      type metadata accessor for VFXResource();
      uint64_t v30 = (char *)swift_allocObject();
      *((void *)v30 + 2) = v41;
      RERetain();
      REAssetSetSwiftObject();
      RERelease();

      swift_release();
      return v30;
    }
    swift_bridgeObjectRetain();
    uint64_t FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    uint64_t v30 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;

    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    swift_allocError();
    *(void *)uint64_t v45 = a1;
    *(void *)(v45 + 8) = v18;
    *(void *)(v45 + 16) = v30;
    *(void *)(v45 + 24) = v44;
    *(unsigned char *)(v45 + 32) = 1;
    swift_willThrow();
    RERelease();
  }
  else
  {
    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    swift_allocError();
    *(void *)uint64_t v46 = a1;
    *(void *)(v46 + 8) = v18;
    *(void *)(v46 + 16) = 0;
    *(void *)(v46 + 24) = 0;
    *(unsigned char *)(v46 + 32) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }

  swift_release();
  return v30;
}

uint64_t specialized static VFXResource.loadAsync(contentsOf:withName:)(void *a1)
{
  id v27 = a1;
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v9 = *(void *)(v8 + 24);
  swift_unownedRetainStrong();
  uint64_t v10 = *(void **)(v9 + 32);
  swift_retain();
  id v11 = v10;
  swift_release();
  *uint64_t v7 = v11;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8F0E0], v4);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v11)
  {
    type metadata accessor for LoadRequestDependencies();
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = MEMORY[0x263F8EE78];
    *(void *)(v14 + 16) = MEMORY[0x263F8EE78];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v16 = swift_allocObject();
    *(_DWORD *)(v16 + 16) = 0;
    *(void *)(v14 + 24) = v16;
    swift_beginAccess();
    *(void *)(v14 + 16) = v15;
    swift_bridgeObjectRelease();
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(char *, id, uint64_t))(v2 + 16))((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v27, v1);
    uint64_t v18 = *(unsigned __int8 *)(v2 + 80);
    id v27 = v12;
    uint64_t v19 = (v18 + 24) & ~v18;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v8;
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v20 + v19, (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
    *(void *)(v20 + ((v3 + v19 + 7) & 0xFFFFFFFFFFFFFFF8)) = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<VFXResource>);
    uint64_t v21 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<VFXResource, Error>?>);
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = swift_allocObject();
    *(_DWORD *)(v23 + 16) = 0;
    *(void *)(v22 + 16) = v23;
    *(void *)(v22 + 24) = 0;
    *(unsigned char *)(v22 + 32) = -1;
    *(void *)(v21 + 16) = v22;
    uint64_t v24 = (void *)swift_allocObject();
    v24[2] = partial apply for closure #1 in static VFXResource.loadAsync(contentsOf:withName:);
    void v24[3] = v20;
    v24[4] = v22;
    v24[5] = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<VFXResource, Error>);
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v25 = Future.init(_:)();
    swift_release();

    *(void *)(v21 + 24) = v25;
    return v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static VFXResource.loadAsync(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v60 = v6;
  MEMORY[0x270FA5388](v6);
  long long v58 = (uint64_t *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v57 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v54 - v16;
  long long v56 = v18;
  if (a3) {
    id v19 = a3;
  }
  else {
    id v19 = objc_msgSend(self, sel_mainBundle);
  }
  id v20 = a3;
  id v61 = v19;
  id v21 = objc_msgSend(v19, sel_bundleURL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v22 = URL.pathExtension.getter();
  uint64_t v24 = v23;
  id v55 = *(void (**)(char *, uint64_t))(v12 + 8);
  v55(v17, v11);
  if (v22 == 0x617262696C786676 && v24 == 0xEA00000000007972)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      goto LABEL_16;
    }
  }
  id v27 = (void *)MEMORY[0x22A688A50](a1, a2);
  uint64_t v28 = (void *)MEMORY[0x22A688A50](7890550, 0xE300000000000000);
  id v29 = objc_msgSend(v61, sel_URLForResource_withExtension_, v27, v28);

  if (v29)
  {
    uint64_t v30 = v57;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v31 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v31(v10, v30, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      unint64_t v32 = v56;
      v31((char *)v56, v10, v11);
      uint64_t v33 = specialized static VFXResource.loadAsync(contentsOf:withName:)(v32);

      v55((char *)v32, v11);
      return v33;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  }
  outlined destroy of URL?((uint64_t)v10);
LABEL_16:
  uint64_t v34 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v35 = *(void *)(v34 + 24);
  swift_unownedRetainStrong();
  uint64_t v36 = *(void **)(v35 + 32);
  swift_retain();
  id v37 = v36;
  swift_release();
  long long v39 = v58;
  uint64_t v38 = v59;
  *long long v58 = v37;
  uint64_t v40 = v60;
  (*(void (**)(void *, void, uint64_t))(v38 + 104))(v39, *MEMORY[0x263F8F0E0], v60);
  id v41 = v37;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v38 + 8))(v39, v40);
  if (v35)
  {
    type metadata accessor for LoadRequestDependencies();
    uint64_t v43 = swift_allocObject();
    uint64_t v44 = MEMORY[0x263F8EE78];
    *(void *)(v43 + 16) = MEMORY[0x263F8EE78];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v45 = swift_allocObject();
    *(_DWORD *)(v45 + 16) = 0;
    *(void *)(v43 + 24) = v45;
    swift_beginAccess();
    *(void *)(v43 + 16) = v44;
    swift_bridgeObjectRelease();
    uint64_t v46 = swift_allocObject();
    swift_weakInit();
    uint64_t v47 = (void *)swift_allocObject();
    id v48 = v61;
    v47[2] = v34;
    v47[3] = v48;
    v47[4] = a1;
    v47[5] = a2;
    v47[6] = v46;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<VFXResource>);
    uint64_t v33 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<VFXResource, Error>?>);
    uint64_t v49 = swift_allocObject();
    uint64_t v50 = swift_allocObject();
    *(_DWORD *)(v50 + 16) = 0;
    *(void *)(v49 + 16) = v50;
    *(void *)(v49 + 24) = 0;
    *(unsigned char *)(v49 + 32) = -1;
    *(void *)(v33 + 16) = v49;
    uint64_t v51 = (void *)swift_allocObject();
    v51[2] = partial apply for closure #1 in static VFXResource.loadAsync(named:in:);
    v51[3] = v47;
    v51[4] = v49;
    v51[5] = v43;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<VFXResource, Error>);
    swift_allocObject();
    swift_retain();
    id v52 = v48;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v53 = Future.init(_:)();

    swift_release();
    *(void *)(v33 + 24) = v53;
    return v33;
  }
  __break(1u);
  return result;
}

uint64_t sub_2280F0218()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in VFXResource.parameters.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, Swift::Int a7, unint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  closure #1 in VFXResource.parameters.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, v15);
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t sub_2280F0298()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in VFXResource.parameter(named:owner:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, Swift::Int a7, unint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  closure #1 in VFXResource.parameter(named:owner:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, v15);
}

uint64_t outlined init with copy of VFXParameter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VFXParameter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type VFXParameterSemantic and conformance VFXParameterSemantic()
{
  unint64_t result = lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic;
  if (!lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic;
  if (!lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VFXParameterType and conformance VFXParameterType()
{
  unint64_t result = lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType;
  if (!lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType;
  if (!lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for VFXParameterSemantic(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280F04ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VFXParameterSemantic()
{
  return &type metadata for VFXParameterSemantic;
}

uint64_t getEnumTagSinglePayload for VFXParameterType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE7) {
    goto LABEL_17;
  }
  if (a2 + 25 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 25) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 25;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  int v8 = v6 - 26;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VFXParameterType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE6)
  {
    unsigned int v6 = ((a2 - 231) >> 8) + 1;
    *unint64_t result = a2 + 25;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280F0680);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 25;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VFXParameterType()
{
  return &type metadata for VFXParameterType;
}

uint64_t dispatch thunk of VFXParameter.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of VFXParameter.objectName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of VFXParameter.bindingName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of VFXParameter.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of VFXParameter.semantic.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of VFXParameter.min.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of VFXParameter.max.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of VFXParameter.userManual.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of VFXParameter.enumName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of VFXParameter.enumCases.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t type metadata accessor for VFXResource()
{
  return self;
}

uint64_t method lookup function for VFXResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VFXResource);
}

uint64_t dispatch thunk of VFXResource.__coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of VFXResource.version.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of VFXResource.parameters.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of VFXResource.parameter(named:owner:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t sub_2280F08F4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 128, 7);
}

uint64_t outlined assign with take of VFXParameter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VFXParameter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_2280F09BC()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2280F09F4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

void partial apply for closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(void (*a1)(void), uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(a1, a2, v7, v2 + v6, v8);
}

uint64_t sub_2280F0B9C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError()
{
  unint64_t result = lazy protocol witness table cache variable for type VFXResource.LoadError and conformance VFXResource.LoadError;
  if (!lazy protocol witness table cache variable for type VFXResource.LoadError and conformance VFXResource.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXResource.LoadError and conformance VFXResource.LoadError);
  }
  return result;
}

uint64_t sub_2280F0C28()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

void partial apply for specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(char a1)
{
  type metadata accessor for URL();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];

  specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(a1, v3, v4, v5);
}

uint64_t sub_2280F0DB4()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2280F0DEC()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in static VFXResource.loadAsync(named:in:)(void (*a1)(uint64_t *), uint64_t a2)
{
  closure #1 in static VFXResource.loadAsync(named:in:)(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_2280F0E50()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

void partial apply for specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(named:in:)(char a1)
{
  specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(named:in:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t outlined copy of VFXResource.LoadError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = vars8;
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for VFXResource.LoadError(uint64_t a1)
{
  return outlined consume of VFXResource.LoadError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t outlined consume of VFXResource.LoadError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (a5)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for VFXResource.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of VFXResource.LoadError(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for VFXResource.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of VFXResource.LoadError(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of VFXResource.LoadError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for VFXResource.LoadError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of VFXResource.LoadError(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for VFXResource.LoadError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VFXResource.LoadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for VFXResource.LoadError(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

void *type metadata accessor for VFXResource.LoadError()
{
  return &unk_26DCA91C8;
}

uint64_t destroy for VFXResource.VFXParameterImpl()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VFXResource.VFXParameterImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VFXResource.VFXParameterImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VFXResource.VFXParameterImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VFXResource.VFXParameterImpl(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VFXResource.VFXParameterImpl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VFXResource.VFXParameterImpl()
{
  return &type metadata for VFXResource.VFXParameterImpl;
}

uint64_t StateMachineCommandParameter.init(name:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  uint64_t v7 = (char *)a5 + *(int *)(type metadata accessor for StateMachineCommandParameter() + 36);
  char v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v8(v7, a3, a4);
}

uint64_t type metadata accessor for StateMachineCommandParameter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t StateMachineCommandParameter.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t StateMachineCommandParameter.id.getter()
{
  uint64_t v0 = specialized StateMachineCommandParameter.id.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for StateMachineCommandParameterProtocol.name.getter in conformance StateMachineCommandParameter<A>()
{
  uint64_t v0 = specialized StateMachineCommandParameter.id.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for Identifiable.id.getter in conformance StateMachineCommandParameter<A>@<X0>(uint64_t *a1@<X8>)
{
  *a1 = specialized StateMachineCommandParameter.id.getter();
  a1[1] = v2;

  return swift_bridgeObjectRetain();
}

uint64_t specialized StateMachineCommandParameter.id.getter()
{
  return *(void *)v0;
}

uint64_t dispatch thunk of StateMachineCommandParameterProtocol.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata completion function for StateMachineCommandParameter()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StateMachineCommandParameter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for StateMachineCommandParameter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for StateMachineCommandParameter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_bridgeObjectRetain();
  v6(v8, v9, v5);
  return a1;
}

void *assignWithCopy for StateMachineCommandParameter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *initializeWithTake for StateMachineCommandParameter(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithTake for StateMachineCommandParameter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineCommandParameter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for StateMachineCommandParameter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x2280F1EA8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          id v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t SetEntityEnabledAction.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return outlined copy of ActionEntityResolution();
}

uint64_t SetEntityEnabledAction.targetEntity.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of ActionEntityResolution();
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = v4;
  return result;
}

uint64_t (*SetEntityEnabledAction.targetEntity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned char *(*SetEntityEnabledAction.enabled.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 17);
  return SetEntityEnabledAction.enabled.modify;
}

unsigned char *SetEntityEnabledAction.enabled.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 17) = result[8];
  return result;
}

uint64_t SetEntityEnabledAction.isEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t SetEntityEnabledAction.isEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*SetEntityEnabledAction.isEnabled.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SetEntityEnabledAction.animatedValueType.getter()
{
  return 0;
}

__n128 SetEntityEnabledAction.init(targetEntity:isEnabled:)@<Q0>(__n128 *a1@<X0>, unsigned __int8 a2@<W1>, __n128 *a3@<X8>)
{
  unsigned __int8 v3 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *a3 = *a1;
  a3[1].n128_u8[0] = v3;
  a3[1].n128_u8[1] = a2;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SetEntityEnabledAction.CodingKeys()
{
  if (*v0) {
    return 0x656C62616E457369;
  }
  else {
    return 0x6E45746567726174;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SetEntityEnabledAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SetEntityEnabledAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SetEntityEnabledAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SetEntityEnabledAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SetEntityEnabledAction.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SetEntityEnabledAction.CodingKeys>);
  uint64_t v12 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unsigned int v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v6 = v1[1];
  char v8 = *((unsigned char *)v1 + 16);
  int v16 = *((unsigned __int8 *)v1 + 17);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = v7;
  uint64_t v14 = v6;
  char v15 = v8;
  char v17 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  uint64_t v9 = v11[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v5, v3);
}

unint64_t lazy protocol witness table accessor for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys);
  }
  return result;
}

uint64_t SetEntityEnabledAction.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SetEntityEnabledAction.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v18 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v14;
  uint64_t v10 = v15;
  LOBYTE(v14) = 1;
  int v17 = v16;
  outlined copy of ActionEntityResolution();
  char v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  *(unsigned char *)(a2 + 16) = v17;
  *(unsigned char *)(a2 + 17) = v11 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined consume of ActionEntityResolution();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SetEntityEnabledAction@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SetEntityEnabledAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SetEntityEnabledAction(void *a1)
{
  return SetEntityEnabledAction.encode(to:)(a1);
}

uint64_t sub_2280F24E0@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 17);
  return result;
}

unsigned char *sub_2280F24EC(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 17) = *result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SetEntityEnabledAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
  return a1;
}

uint64_t assignWithCopy for SetEntityEnabledAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of ActionEntityResolution();
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
  return a1;
}

uint64_t assignWithTake for SetEntityEnabledAction(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of ActionEntityResolution();
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetEntityEnabledAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SetEntityEnabledAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SetEntityEnabledAction()
{
  return &type metadata for SetEntityEnabledAction;
}

unsigned char *storeEnumTagSinglePayload for SetEntityEnabledAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280F2780);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SetEntityEnabledAction.CodingKeys()
{
  return &unk_26DCA9468;
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance SetEntityEnabledActionHandler(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 176);
  v8[10] = *(_OWORD *)(a1 + 160);
  v8[11] = v1;
  v8[12] = *(_OWORD *)(a1 + 192);
  uint64_t v9 = *(void *)(a1 + 208);
  long long v2 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v2;
  long long v3 = *(_OWORD *)(a1 + 144);
  v8[8] = *(_OWORD *)(a1 + 128);
  v8[9] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  void v8[2] = *(_OWORD *)(a1 + 32);
  void v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized SetEntityEnabledActionHandler.setEntityEnabled(event:)((uint64_t)v8);
}

uint64_t specialized SetEntityEnabledAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E45746567726174 && a2 == 0xEC00000079746974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C62616E457369 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized SetEntityEnabledActionHandler.setEntityEnabled(event:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  char v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 25);
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v7._countAndFlagsBits = 0x2072656C646E6148;
    v7._object = (void *)0xEC00000020726F66;
    String.append(_:)(v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityEnabledAction.Type);
    v8._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._object = (void *)0x8000000228351880;
    v9._countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v9);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v12 = v1;
    outlined copy of ActionEntityResolution();
    uint64_t v11 = Entity.subscript.getter(&v12);
    outlined consume of ActionEntityResolution();
    if (!v11) {
      return swift_release();
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (SceneNullable)
  {
    uint64_t v5 = SceneNullable;
    id v6 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v6)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v5);
    }
    uint64_t v11 = Scene.findEntity(named:)();
    swift_release();
    outlined consume of ActionEntityResolution();
    if (!v11) {
      return swift_release();
    }
LABEL_12:
    MEMORY[0x22A68E740](*(void *)(v11 + 16), v3);
    RENetworkMarkEntityMetadataDirty();
    swift_release();
    return swift_release();
  }
  outlined consume of ActionEntityResolution();
  return swift_release();
}

ValueMetadata *type metadata accessor for SetEntityEnabledActionHandler()
{
  return &type metadata for SetEntityEnabledActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in SetEntityEnabledActionHandler()
{
  return &protocol witness table for SetEntityEnabledAction;
}

uint64_t InputTargetComponent.isEnabled.getter()
{
  return *v0;
}

uint64_t InputTargetComponent.isEnabled.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*InputTargetComponent.isEnabled.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void InputTargetComponent.allowedInputTypes.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 4);
}

_DWORD *InputTargetComponent.allowedInputTypes.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 4) = *result;
  return result;
}

uint64_t (*InputTargetComponent.allowedInputTypes.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t InputTargetComponent.InputType.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static InputTargetComponent.InputType.direct.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static InputTargetComponent.InputType.indirect.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void one-time initialization function for all()
{
  int v0 = unk_26DC8657C;
  if ((unk_26DC8657C & ~dword_26DC86578) == 0) {
    int v0 = 0;
  }
  static InputTargetComponent.InputType.all = v0 | dword_26DC86578;
}

{
  char v0;

  int v0 = byte_26DC86D31;
  if ((byte_26DC86D31 & ~byte_26DC86D30) == 0) {
    int v0 = 0;
  }
  static PhysicsSimulationComponent.CollisionOptions.all = v0 | byte_26DC86D30;
}

uint64_t static InputTargetComponent.InputType.all.getter@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for all != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static InputTargetComponent.InputType.all;
  return result;
}

uint64_t InputTargetComponent.InputType.rawValue.getter()
{
  return *v0;
}

int *InputTargetComponent.init(allowedInputTypes:)@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *result;
  *(unsigned char *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v2;
  return result;
}

uint64_t static InputTargetComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  int AllowsDirectInput = REInputTargetComponentGetAllowsDirectInput();
  if (REInputTargetComponentGetAllowsIndirectInput()) {
    AllowsDirectInput |= 2u;
  }
  uint64_t result = REInputTargetComponentIsEnabled();
  *(unsigned char *)a1 = result;
  *(_DWORD *)(a1 + 4) = AllowsDirectInput;
  return result;
}

uint64_t InputTargetComponent.__toCore(_:)()
{
  REInputTargetComponentSetEnabled();
  REInputTargetComponentSetAllowsDirectInput();
  REInputTargetComponentSetAllowsIndirectInput();

  return RENetworkMarkComponentDirty();
}

uint64_t static InputTargetComponent.__coreComponentType.getter()
{
  type metadata accessor for REComponentType(0);
  uint64_t v4 = v0;
  v3[0] = 4010;
  outlined init with copy of Any((uint64_t)v3, (uint64_t)&v2);
  swift_dynamicCast();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

BOOL static InputTargetComponent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance InputTargetComponent@<X0>(uint64_t a1@<X8>)
{
  int AllowsDirectInput = REInputTargetComponentGetAllowsDirectInput();
  if (REInputTargetComponentGetAllowsIndirectInput()) {
    AllowsDirectInput |= 2u;
  }
  uint64_t result = REInputTargetComponentIsEnabled();
  *(unsigned char *)a1 = result;
  *(_DWORD *)(a1 + 4) = AllowsDirectInput;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance InputTargetComponent()
{
  REInputTargetComponentSetEnabled();
  REInputTargetComponentSetAllowsDirectInput();
  REInputTargetComponentSetAllowsIndirectInput();

  return RENetworkMarkComponentDirty();
}

uint64_t protocol witness for static Component.__coreComponentType.getter in conformance InputTargetComponent()
{
  type metadata accessor for REComponentType(0);
  uint64_t v4 = v0;
  v3[0] = 4010;
  outlined init with copy of Any((uint64_t)v3, (uint64_t)&v2);
  swift_dynamicCast();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InputTargetComponent(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

uint64_t InputTargetComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  Swift::String v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *((_DWORD *)v0 + 1);
  char v15 = *v0;
  char v8 = v15;
  int v16 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_22831E350;
  *(void *)(v10 + 32) = 0x656C62616E457369;
  *(void *)(v10 + 40) = 0xE900000000000064;
  uint64_t v11 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v10 + 48) = v8;
  *(void *)(v10 + 72) = v11;
  *(void *)(v10 + 80) = 0xD000000000000011;
  *(void *)(v10 + 88) = 0x8000000228358E30;
  *(void *)(v10 + 120) = &type metadata for InputTargetComponent.InputType;
  *(_DWORD *)(v10 + 96) = v9;
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t lazy protocol witness table accessor for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType()
{
  unint64_t result = lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType;
  if (!lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType;
  if (!lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType;
  if (!lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType;
  if (!lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for InputTargetComponent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[8]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InputTargetComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InputTargetComponent()
{
  return &type metadata for InputTargetComponent;
}

ValueMetadata *type metadata accessor for InputTargetComponent.InputType()
{
  return &type metadata for InputTargetComponent.InputType;
}

uint64_t __RKEntityAnimateAction.perform(with:)()
{
  v4[0] = StaticString.description.getter();
  v4[1] = v0;
  v1._countAndFlagsBits = 8250;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  uint64_t v2 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v2, v4);
  swift_bridgeObjectRelease();
  return 1;
}

Swift::Void __swiftcall __RKEntityAnimateAction.stopAnimations()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    if (*(unsigned char *)(v0 + 144) == 1)
    {
      swift_retain();
      RERenderOptionsComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      if ((RERenderOptionsComponentGetVisibilityMode() || (REEntityGetSelfEnabled() & 1) == 0)
        && (REEntityGetSelfEnabled() & 1) != 0)
      {
        MEMORY[0x22A68E740](*(void *)(v1 + 16), 0);
        RENetworkMarkEntityMetadataDirty();
      }
    }
    else
    {
      swift_retain();
    }
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      if (REAnimationComponentHasRunningAnimations())
      {
        if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
          || (swift_beginAccess(), *(unsigned char *)(v0 + 104) == 1) && *(void *)(v0 + 96) == 3)
        {
          REAnimationComponentStopAllAnimations();
          RENetworkMarkComponentDirty();
        }
      }
    }
    swift_release();
    *(void *)(v0 + 168) = 0;
    *(unsigned char *)(v0 + 176) = 1;
  }
}

uint64_t __RKEntityAnimateAction.setAudioAnimationParameters(on:mute:gain:)(double a1, uint64_t a2, char a3)
{
  REAudioAnimationComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REAudioAnimationComponentSetMute();
    REAudioAnimationComponentSetLinearGain();
  }
  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
LABEL_39:
    return swift_release();
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v5 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_45;
    }
    uint64_t v7 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v8 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result) {
        goto LABEL_44;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        uint64_t Object = RECustomComponentGetObject();
        if (Object)
        {
          uint64_t v10 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8)) {
            BOOL v11 = 1;
          }
          else {
            BOOL v11 = v10 == 0;
          }
          if (v11)
          {
            uint64_t result = swift_retain();
          }
          else
          {
            int v12 = *v10;
            uint64_t v13 = String.init(utf8String:)();
            if (v14) {
              Swift::Int v15 = v13;
            }
            else {
              Swift::Int v15 = 0;
            }
            if (v14) {
              unint64_t v16 = v14;
            }
            else {
              unint64_t v16 = 0xE000000000000000;
            }
            uint64_t v10 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v12 == 42, v15, v16);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            uint64_t result = swift_allocObject();
            *(void *)(result + 16) = v10;
          }
          if (!v10) {
            goto LABEL_46;
          }
          swift_retain();
          uint64_t v17 = String.init(utf8String:)();
          unint64_t v19 = v18;
          swift_release();
          uint64_t v20 = v19 ? v17 : 0;
          unint64_t v21 = v19 ? v19 : 0xE000000000000000;
          uint64_t v22 = (NSString *)MEMORY[0x22A688A50](v20, v21);
          swift_bridgeObjectRelease();
          Class v23 = NSClassFromString(v22);

          swift_release();
          if (v23)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            uint64_t v24 = swift_dynamicCastMetatype();
            if (v24)
            {
              uint64_t v25 = (*(uint64_t (**)(void))(v24 + 232))();
              uint64_t v26 = *(void *)(v25 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v26, 0);
              *(void *)(v25 + 16) = v7;
              MEMORY[0x22A68E750](v7, v25);
              swift_release();
              goto LABEL_37;
            }
          }
        }
      }
      uint64_t v8 = makeEntity(for:)(v7);
    }
    uint64_t v25 = v8;
LABEL_37:
    uint64_t result = REEntityGetChildCount();
    if (v5 >= result) {
      goto LABEL_43;
    }
    ++v5;
    __RKEntityAnimateAction.setAudioAnimationParameters(on:mute:gain:)(v25, a3 & 1, a1);
    swift_release();
    if (v5 >= REEntityGetChildCount()) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t __RKEntityAnimateAction._setupAnimations(entity:assetManager:andPlay:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t DefaultAnimation = REAnimationLibraryComponentCreateDefaultAnimation();
  if (!DefaultAnimation) {
    return 0;
  }
  uint64_t v8 = DefaultAnimation;
  type metadata accessor for AnimationResource();
  int v9 = (void *)swift_allocObject();
  v9[2] = v8;
  if (REAssetHandleAssetType() == 11) {
    REAnimationSceneAssetGetRootTimeline();
  }
  uint64_t Name = REAnimationAssetGetName();
  if (Name) {
    uint64_t Name = String.init(cString:)();
  }
  else {
    unint64_t v11 = 0xE000000000000000;
  }
  v9[3] = Name;
  v9[4] = v11;
  RERetain();
  REAssetSetSwiftObject();
  AnimationResource.definition.getter(v50);
  double v13 = *(double *)(v3 + 128);
  if (v13 == 0.0)
  {
    uint64_t v14 = v51;
    uint64_t v15 = v52;
    __swift_project_boxed_opaque_existential_1(v50, v51);
    double v13 = (*(double (**)(uint64_t, uint64_t))(v15 + 272))(v14, v15);
  }
  uint64_t v16 = *(void *)(v3 + 112);
  if (v16)
  {
    double v17 = v13;
    if (v16 >= 2) {
      double v17 = v13 * (double)v16;
    }
  }
  else
  {
    double v17 = INFINITY;
  }
  outlined init with copy of __REAssetService((uint64_t)v50, (uint64_t)v49);
  int8x16_t v47 = 0uLL;
  char v48 = -1;
  if (*(unsigned __int8 *)(v3 + 136) < 4u)
  {
    char v46 = *(unsigned char *)(v3 + 136);
    if (one-time initialization token for forwards != -1) {
      swift_once();
    }
    char v18 = static AnimationFillMode.forwards;
    char v45 = static AnimationFillMode.forwards;
    float v19 = -*(float *)(v3 + 140);
    if (!*(unsigned char *)(v3 + 137)) {
      float v19 = *(float *)(v3 + 140);
    }
    AnimationView.init(source:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)((uint64_t)v49, 0, 0xE000000000000000, &v47, 0, &v46, &v45, *(void *)(v3 + 120), (uint64_t)v41, 0.0, 0.0, v19, 0, COERCE__INT64(v13 + *(double *)(v3 + 120)), 0, *(uint64_t *)&v17, 0);
    *((void *)&v28 + 1) = &type metadata for AnimationView;
    *(void *)&long long v29 = &protocol witness table for AnimationView;
    uint64_t v20 = swift_allocObject();
    *(void *)&long long v27 = v20;
    long long v21 = v41[7];
    *(_OWORD *)(v20 + 112) = v41[6];
    *(_OWORD *)(v20 + 128) = v21;
    *(_OWORD *)(v20 + 144) = v41[8];
    *(void *)(v20 + 160) = v42;
    long long v22 = v41[3];
    *(_OWORD *)(v20 + 48) = v41[2];
    *(_OWORD *)(v20 + 64) = v22;
    long long v23 = v41[5];
    *(_OWORD *)(v20 + 80) = v41[4];
    *(_OWORD *)(v20 + 96) = v23;
    long long v24 = v41[1];
    *(_OWORD *)(v20 + 16) = v41[0];
    *(_OWORD *)(v20 + 32) = v24;
    int8x16_t v39 = 0uLL;
    char v40 = -1;
    char v38 = v18;
    char v37 = 0;
    outlined retain of TimelineClipProperties((uint64_t)v41);
    AnimationView.init(source:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)((uint64_t)&v27, 0, 0xE000000000000000, &v39, 0, &v37, &v38, 0, (uint64_t)v43, 0.0, 0.0, 1.0, 1, 0, 1, *(uint64_t *)&v17, 0);
    long long v33 = v43[6];
    long long v34 = v43[7];
    long long v35 = v43[8];
    uint64_t v36 = v44;
    long long v29 = v43[2];
    long long v30 = v43[3];
    long long v31 = v43[4];
    long long v32 = v43[5];
    long long v27 = v43[0];
    long long v28 = v43[1];
    if (AnimationView.createResource()())
    {
      REAnimationSceneAssetCreateWithTimeline();
      REAnimationComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      *(void *)&long long v27 = 2;
      DWORD2(v27) = 256;
      *(void *)&long long v28 = "AnimateAction";
      BYTE8(v28) = 0;
      uint64_t v12 = REAnimationComponentPlay();
      if ((a3 & 1) == 0)
      {
        REAnimationComponentPauseAnimation();
        RENetworkMarkComponentDirty();
      }
      if ((REEntityGetSelfEnabled() & 1) == 0)
      {
        MEMORY[0x22A68E740](*(void *)(a1 + 16), 0);
        RENetworkMarkEntityMetadataDirty();
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
        RENetworkMarkComponentDirty();
        MEMORY[0x22A68E740](*(void *)(a1 + 16), 1);
        RENetworkMarkEntityMetadataDirty();
      }
      RERenderOptionsComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      if (RERenderOptionsComponentGetVisibilityMode()) {
        char v25 = 1;
      }
      else {
        char v25 = REEntityGetSelfEnabled() ^ 1;
      }
      *(unsigned char *)(v4 + 144) = v25;
      RERelease();
      swift_release();
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)v43);
      outlined release of TimelineClipProperties((uint64_t)v41);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
      RERelease();
    }
    else
    {
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)v43);
      outlined release of TimelineClipProperties((uint64_t)v41);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
      RERelease();
      return 0;
    }
    return v12;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall __RKEntityAnimateAction.stop()()
{
  swift_beginAccess();
  if (*(void *)(v0 + 16))
  {
    swift_retain();
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass()
      && REAnimationComponentHasRunningAnimations()
      && (*(unsigned char *)(v0 + 176) & 1) == 0)
    {
      REAnimationComponentPauseAnimation();
    }
    swift_release();
  }
  return 1;
}

uint64_t __RKEntityAnimateAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for __RKEntityAnimateAction();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 112) = 1;
  *(_WORD *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 1065353216;
  *(_WORD *)(v3 + 144) = 0;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v3 + 176) = 1;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  uint64_t v4 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t __RKEntityAnimateAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 112) = 1;
  *(_WORD *)(v2 + 136) = 1;
  *(_DWORD *)(v2 + 140) = 1065353216;
  *(_WORD *)(v2 + 144) = 0;
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 168) = 0;
  *(void *)(v2 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v2 + 176) = 1;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityAnimateAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = v1[2];
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    type metadata accessor for __RKEntityAnimateAction();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 120) = 0;
    *(void *)(v5 + 128) = 0;
    *(void *)(v5 + 112) = 1;
    *(_WORD *)(v5 + 136) = 1;
    *(_DWORD *)(v5 + 140) = 1065353216;
    *(_WORD *)(v5 + 144) = 0;
    *(void *)(v5 + 160) = 0;
    *(void *)(v5 + 168) = 0;
    *(void *)(v5 + 152) = 0x3FF0000000000000;
    *(unsigned char *)(v5 + 176) = 1;
    *(_OWORD *)(v5 + 184) = 0u;
    *(_OWORD *)(v5 + 200) = 0u;
    *(_OWORD *)(v5 + 216) = 0u;
    *(_OWORD *)(v5 + 232) = 0u;
    *(_OWORD *)(v5 + 248) = 0u;
    uint64_t v6 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v6);
  }
  else
  {
    (*(void (**)(void *__return_ptr, void))(*v1 + 464))(v8, 0);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v7;
    }
    else {
      return 0;
    }
  }
}

uint64_t __RKEntityAnimateAction.init(targetEntity:)(uint64_t a1)
{
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 128) = 0;
  *(void *)(v1 + 112) = 1;
  *(_WORD *)(v1 + 136) = 1;
  *(_DWORD *)(v1 + 140) = 1065353216;
  *(_WORD *)(v1 + 144) = 0;
  *(void *)(v1 + 160) = 0;
  *(void *)(v1 + 168) = 0;
  *(void *)(v1 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v1 + 176) = 1;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityAnimateAction.__ivar_destroyer()
{
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityAnimateAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityAnimateAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t __RKEntityStartAnimateAction.__allocating_init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(uint64_t a1, uint64_t a2, char *a3, char a4, char a5, char a6, uint64_t a7, double a8, double a9, float a10, double a11)
{
  return __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(uint64_t a1, uint64_t a2, char *a3, char a4, char a5, char a6, uint64_t a7, double a8, double a9, float a10, double a11)
{
  char v22 = *a3;
  *(void *)(v11 + 120) = 0;
  *(void *)(v11 + 128) = 0;
  *(void *)(v11 + 112) = 1;
  *(_WORD *)(v11 + 136) = 1;
  *(_DWORD *)(v11 + 140) = 1065353216;
  *(_WORD *)(v11 + 144) = 0;
  *(void *)(v11 + 160) = 0;
  *(void *)(v11 + 168) = 0;
  *(void *)(v11 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v11 + 176) = 1;
  *(_OWORD *)(v11 + 184) = 0u;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_OWORD *)(v11 + 232) = 0u;
  *(_OWORD *)(v11 + 248) = 0u;
  uint64_t v23 = swift_retain();
  uint64_t v24 = __RKEntityAction.init(targetEntity:)(v23);
  uint64_t v25 = v24;
  if (a1)
  {
    *(void *)(v24 + 160) = a7;
    swift_retain_n();
    swift_release();
    swift_release();
    swift_beginAccess();
    *(unsigned char *)(v25 + 105) = v22;
    swift_release();
    *(void *)(v25 + 112) = a2;
    *(unsigned char *)(v25 + 137) = a4 & 1;
    *(double *)(v25 + 120) = a8;
    *(double *)(v25 + 128) = a9;
    *(float *)(v25 + 140) = a10;
    if (a5) {
      char v26 = 3;
    }
    else {
      char v26 = 1;
    }
    if (a2 == 1) {
      char v26 = 0;
    }
    *(unsigned char *)(v25 + 136) = v26;
    *(unsigned char *)(v25 + 145) = a6 & 1;
    *(double *)(v25 + 152) = a11;
  }
  swift_release();
  return v25;
}

uint64_t __RKEntityStartAnimateAction.perform(with:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v38 = 91;
  unint64_t v39 = 0xE100000000000000;
  if (v2)
  {
    v35[0] = 0;
    v35[1] = 0xE000000000000000;
    uint64_t v42 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  uint64_t v9 = *(void *)(v0 + 16);
  if (!v9)
  {
    uint64_t v12 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v12, &v38);
    goto LABEL_15;
  }
  swift_retain();
  REAnimationComponentGetComponentType();
  if (!REEntityGetComponentByClass()
    || (*(unsigned char *)(v0 + 176) & 1) != 0
    || !REAnimationComponentIsPaused())
  {
    uint64_t v11 = (void *)(v0 + 96);
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 104) == 1 && *v11 == 1)
    {
      swift_beginAccess();
      if (*(unsigned char *)(v1 + 105))
      {
        if (*(unsigned char *)(v1 + 105) == 1)
        {
          swift_release();
LABEL_15:
          swift_bridgeObjectRelease();
          return 0;
        }
        swift_bridgeObjectRelease();
        long long v31 = *(char **)(v1 + 96);
        char v32 = *(unsigned char *)(v1 + 104);
        *(void *)(v1 + 96) = 2;
        uint64_t v10 = 1;
        *(unsigned char *)(v1 + 104) = 1;
        uint64_t v38 = (uint64_t)v31;
        LOBYTE(v39) = v32;
        __RKEntityAction.state.didset((uint64_t)&v38);
LABEL_23:
        swift_release();
        return v10;
      }
      __RKEntityAnimateAction.stopAnimations()();
    }
    __RKEntityAnimateAction.setAudioAnimationParameters(on:mute:gain:)(*(double *)(v1 + 152), v9, *(unsigned char *)(v1 + 145));
    uint64_t SceneNullable = REEntityGetSceneNullable();
    long long v33 = (char *)v38;
    unint64_t v34 = v39;
    if (SceneNullable && (uint64_t SceneNullable = RESceneGetECSManagerNullable()) != 0)
    {
      uint64_t ServiceLocator = REECSManagerGetServiceLocator();
      uint64_t SceneNullable = MEMORY[0x22A692220](ServiceLocator);
      if (SceneNullable)
      {
        uint64_t SceneNullable = __RKEntityAnimateAction._setupAnimations(entity:assetManager:andPlay:)(v9, SceneNullable, 1);
        char v16 = v15 & 1;
      }
      else
      {
        char v16 = 1;
      }
    }
    else
    {
      char v16 = 0;
    }
    *(void *)(v1 + 168) = SceneNullable;
    *(unsigned char *)(v1 + 176) = v16;
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    uint64_t v18 = *(void *)(v1 + 32);
    *(void *)(v1 + 32) = partial apply for closure #1 in __RKEntityStartAnimateAction.perform(with:);
    *(void *)(v1 + 40) = v17;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v18);
    float v19 = *(char **)(v1 + 96);
    char v20 = *(unsigned char *)(v1 + 104);
    uint64_t v10 = 1;
    *(void *)(v1 + 96) = 1;
    *(unsigned char *)(v1 + 104) = 1;
    uint64_t v38 = (uint64_t)v19;
    LOBYTE(v39) = v20;
    __RKEntityAction.state.didset((uint64_t)&v38);
    uint64_t v21 = type metadata accessor for Entity();
    uint64_t v36 = v21;
    char v37 = &protocol witness table for Entity;
    v35[0] = v9;
    uint64_t v22 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v35, 0, (char **)&v38);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = partial apply for closure #2 in __RKEntityStartAnimateAction.perform(with:);
    *(void *)(v23 + 24) = v22;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    uint64_t v24 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    uint64_t v25 = type metadata accessor for AnyCancellable();
    uint64_t v40 = v25;
    uint64_t v41 = MEMORY[0x263EFDD10];
    swift_release();
    uint64_t v38 = (uint64_t)v24;
    outlined destroy of BodyTrackingComponent?((uint64_t)v35, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v38, v1 + 184);
    swift_endAccess();
    uint64_t v36 = v21;
    char v37 = &protocol witness table for Entity;
    v35[0] = v9;
    uint64_t v26 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v35, 0, (char **)&v38);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = partial apply for closure #2 in __RKEntityStartAnimateAction.perform(with:);
    *(void *)(v27 + 24) = v26;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    long long v28 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    uint64_t v40 = v25;
    uint64_t v41 = MEMORY[0x263EFDD10];
    swift_release();
    uint64_t v38 = (uint64_t)v28;
    outlined destroy of BodyTrackingComponent?((uint64_t)v35, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v38, v1 + 224);
    swift_endAccess();
    uint64_t v38 = (uint64_t)v33;
    unint64_t v39 = v34;
    uint64_t v29 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v38);
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  REAnimationComponentResumeAnimation();
  swift_release();
  return 1;
}

uint64_t closure #1 in __RKEntityStartAnimateAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 184;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v2, (uint64_t)&v5);
    if (*((void *)&v6 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v5, (uint64_t)v3);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v3, v4);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Cancellable?((uint64_t)&v5, v2);
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v1 + 224, (uint64_t)&v5);
    if (*((void *)&v6 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v5, (uint64_t)v3);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v3, v4);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Cancellable?((uint64_t)&v5, v1 + 224);
    swift_endAccess();
    swift_release();
    __RKEntityAnimateAction.stopAnimations()();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityStartAnimateAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if ((*(unsigned char *)(result + 176) & 1) != 0 || *(void *)(v1 + 16) != *(void *)(result + 168))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      uint64_t v4 = *(void *)(v3 + 96);
      char v5 = *(unsigned char *)(v3 + 104);
      *(void *)(v3 + 96) = 2;
      *(unsigned char *)(v3 + 104) = 1;
      uint64_t v6 = v4;
      char v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t __RKEntityStartAnimateAction.reversed()()
{
  swift_beginAccess();
  type metadata accessor for __RKEntityStopAnimateAction();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0;
  *(void *)(v0 + 112) = 1;
  *(_WORD *)(v0 + 136) = 1;
  *(_DWORD *)(v0 + 140) = 1065353216;
  *(_WORD *)(v0 + 144) = 0;
  *(void *)(v0 + 160) = 0;
  *(void *)(v0 + 168) = 0;
  *(void *)(v0 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v0 + 176) = 1;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  uint64_t v1 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v1);
}

uint64_t __RKEntityStopAnimateAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 112) = 1;
  *(_WORD *)(v2 + 136) = 1;
  *(_DWORD *)(v2 + 140) = 1065353216;
  *(_WORD *)(v2 + 144) = 0;
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 168) = 0;
  *(void *)(v2 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v2 + 176) = 1;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityStartAnimateAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 112);
  swift_beginAccess();
  char v15 = *(unsigned char *)(v1 + 105);
  double v4 = *(double *)(v1 + 120);
  double v5 = *(double *)(v1 + 128);
  char v6 = *(unsigned char *)(v1 + 137);
  float v7 = *(float *)(v1 + 140);
  char v8 = *(unsigned char *)(v1 + 136) == 3;
  char v9 = *(unsigned char *)(v1 + 145);
  double v10 = *(double *)(v1 + 152);
  uint64_t v11 = *(void *)(v1 + 160);
  uint64_t started = type metadata accessor for __RKEntityStartAnimateAction();
  swift_allocObject();
  swift_retain();
  uint64_t v13 = swift_retain();
  uint64_t result = __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(v13, v3, &v15, v6, v8, v9, v11, v4, v5, v7, v10);
  a1[3] = started;
  *a1 = result;
  return result;
}

uint64_t __RKEntityStartAnimateAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    uint64_t v5 = *(void *)(v1 + 112);
    swift_beginAccess();
    LOBYTE(v15) = *(unsigned char *)(v1 + 105);
    double v6 = *(double *)(v1 + 120);
    double v7 = *(double *)(v1 + 128);
    char v8 = *(unsigned char *)(v1 + 137);
    float v9 = *(float *)(v1 + 140);
    char v10 = *(unsigned char *)(v1 + 136) == 3;
    char v11 = *(unsigned char *)(v1 + 145);
    double v12 = *(double *)(v1 + 152);
    uint64_t v13 = *(void *)(v1 + 160);
    type metadata accessor for __RKEntityStartAnimateAction();
    swift_allocObject();
    swift_retain();
    uint64_t v14 = swift_retain();
    return __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(v14, v5, (char *)&v15, v8, v10, v11, v13, v6, v7, v9, v12);
  }
  else
  {
    __RKEntityStartAnimateAction.copy(with:)(v16);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v15;
    }
    else {
      return 0;
    }
  }
}

void __RKEntityStartAnimateAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityStartAnimateAction.init(targetEntity:)()
{
}

uint64_t __RKEntityStopAnimateAction.perform(with:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v29 = 91;
  unint64_t v30 = 0xE100000000000000;
  if (v2)
  {
    uint64_t v27 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  uint64_t v10 = v29;
  unint64_t v9 = v30;
  uint64_t v11 = *(void *)(v0 + 16);
  if (!v11)
  {
    uint64_t v17 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v17, &v29);
    swift_bridgeObjectRelease();
    return 0;
  }
  double v12 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v12 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_15:
      uint64_t v27 = v29;
      unint64_t v28 = v30;
      uint64_t v18 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v18, &v27);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_15;
  }
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (SceneNullable && (uint64_t SceneNullable = RESceneGetECSManagerNullable()) != 0)
  {
    uint64_t ServiceLocator = REECSManagerGetServiceLocator();
    uint64_t SceneNullable = MEMORY[0x22A692220](ServiceLocator);
    if (SceneNullable)
    {
      uint64_t SceneNullable = __RKEntityAnimateAction._setupAnimations(entity:assetManager:andPlay:)(v11, SceneNullable, 0);
      char v16 = v15 & 1;
    }
    else
    {
      char v16 = 1;
    }
  }
  else
  {
    char v16 = 0;
  }
  *(void *)(v1 + 168) = SceneNullable;
  *(unsigned char *)(v1 + 176) = v16;
  uint64_t v20 = *(void *)(v1 + 96);
  char v21 = *(unsigned char *)(v1 + 104);
  *(void *)(v1 + 96) = 3;
  uint64_t v19 = 1;
  *(unsigned char *)(v1 + 104) = 1;
  uint64_t v27 = v20;
  LOBYTE(v28) = v21;
  __RKEntityAction.state.didset((uint64_t)&v27);
  __RKEntityAnimateAction.stopAnimations()();
  uint64_t v27 = v10;
  unint64_t v28 = v9;
  uint64_t v22 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v22, &v27);
  uint64_t v23 = *(void *)(v1 + 96);
  char v24 = *(unsigned char *)(v1 + 104);
  *(void *)(v1 + 96) = 2;
  *(unsigned char *)(v1 + 104) = 1;
  uint64_t v27 = v23;
  LOBYTE(v28) = v24;
  __RKEntityAction.state.didset((uint64_t)&v27);
  uint64_t v27 = v10;
  unint64_t v28 = v9;
  uint64_t v25 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v25, &v27);
  swift_bridgeObjectRelease();
  swift_release();
  return v19;
}

uint64_t __RKEntityStopAnimateAction.reversed()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 160);
  char v4 = 1;
  type metadata accessor for __RKEntityStartAnimateAction();
  swift_allocObject();
  swift_retain();
  uint64_t v2 = swift_retain();
  return __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(v2, 1, &v4, 0, 0, 0, v1, 0.0, 0.0, 1.0, 1.0);
}

uint64_t __RKEntityStopAnimateAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for __RKEntityStopAnimateAction();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 112) = 1;
  *(_WORD *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 1065353216;
  *(_WORD *)(v3 + 144) = 0;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v3 + 176) = 1;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  uint64_t v4 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t __RKEntityStopAnimateAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    type metadata accessor for __RKEntityStopAnimateAction();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 120) = 0;
    *(void *)(v7 + 128) = 0;
    *(void *)(v7 + 112) = 1;
    *(_WORD *)(v7 + 136) = 1;
    *(_DWORD *)(v7 + 140) = 1065353216;
    *(_WORD *)(v7 + 144) = 0;
    *(void *)(v7 + 160) = 0;
    *(void *)(v7 + 168) = 0;
    *(void *)(v7 + 152) = 0x3FF0000000000000;
    *(unsigned char *)(v7 + 176) = 1;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 248) = 0u;
    uint64_t v8 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v8);
  }
  else
  {
    type metadata accessor for __RKEntityStopAnimateAction();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 120) = 0;
    *(void *)(v4 + 128) = 0;
    *(void *)(v4 + 112) = 1;
    *(_WORD *)(v4 + 136) = 1;
    *(_DWORD *)(v4 + 140) = 1065353216;
    *(_WORD *)(v4 + 144) = 0;
    *(void *)(v4 + 160) = 0;
    *(void *)(v4 + 168) = 0;
    *(void *)(v4 + 152) = 0x3FF0000000000000;
    *(unsigned char *)(v4 + 176) = 1;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    uint64_t v5 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v5);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v9;
    }
    else {
      return 0;
    }
  }
}

uint64_t __RKEntityStopAnimateAction.init(targetEntity:)(uint64_t a1)
{
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 128) = 0;
  *(void *)(v1 + 112) = 1;
  *(_WORD *)(v1 + 136) = 1;
  *(_DWORD *)(v1 + 140) = 1065353216;
  *(_WORD *)(v1 + 144) = 0;
  *(void *)(v1 + 160) = 0;
  *(void *)(v1 + 168) = 0;
  *(void *)(v1 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v1 + 176) = 1;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityStartAnimateAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityStartAnimateAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t __RKEntityToggleAnimateAction.perform(with:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v43 = 91;
  unint64_t v44 = 0xE100000000000000;
  if (v5)
  {
    uint64_t v41 = 0;
    unint64_t v42 = 0xE000000000000000;
    uint64_t v38 = v5;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v6 = 0;
    unint64_t v7 = 0xE000000000000000;
  }
  else
  {
    unint64_t v7 = 0xE300000000000000;
    uint64_t v6 = 7104878;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8285;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8250;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  swift_release();
  uint64_t v13 = v43;
  unint64_t v12 = v44;
  if (!*(void *)(v1 + 16))
  {
    uint64_t v16 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v16, &v43);
    swift_bridgeObjectRelease();
LABEL_14:
    char v18 = 0;
    return v18 & 1;
  }
  uint64_t v14 = (void *)(v1 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v2 + 104) == 1 && *v14 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v2 + 105) == 1)
    {
      swift_retain();
LABEL_13:
      uint64_t v41 = v43;
      unint64_t v42 = v44;
      uint64_t v17 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v17, &v41);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_14;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_13;
  }
  RETransformComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    int IsAnimated = RETransformComponentIsAnimated();
  }
  else {
    int IsAnimated = 0;
  }
  REAnimationComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    if (REAnimationComponentHasRunningAnimations())
    {
LABEL_18:
      type metadata accessor for __RKEntityStopAnimateAction();
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 120) = 0;
      *(void *)(v19 + 128) = 0;
      *(void *)(v19 + 112) = 1;
      *(_WORD *)(v19 + 136) = 1;
      *(_DWORD *)(v19 + 140) = 1065353216;
      *(_WORD *)(v19 + 144) = 0;
      *(void *)(v19 + 160) = 0;
      *(void *)(v19 + 168) = 0;
      *(void *)(v19 + 152) = 0x3FF0000000000000;
      *(unsigned char *)(v19 + 176) = 1;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *(_OWORD *)(v19 + 216) = 0u;
      *(_OWORD *)(v19 + 232) = 0u;
      *(_OWORD *)(v19 + 248) = 0u;
      uint64_t v20 = swift_retain();
      uint64_t v21 = __RKEntityAction.init(targetEntity:)(v20);
      goto LABEL_21;
    }
  }
  else if (IsAnimated)
  {
    goto LABEL_18;
  }
  LOBYTE(v41) = 1;
  type metadata accessor for __RKEntityStartAnimateAction();
  swift_allocObject();
  uint64_t v22 = swift_retain();
  uint64_t v21 = __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(v22, 1, (char *)&v41, 0, 0, 0, 0, 0.0, 0.0, 1.0, 1.0);
LABEL_21:
  *(void *)(v2 + 264) = v21;
  uint64_t result = swift_release();
  uint64_t v24 = *(void *)(v2 + 264);
  if (!v24)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = *(void *)(v24 + 32);
  *(void *)(v24 + 32) = partial apply for closure #1 in __RKEntityToggleAnimateAction.perform(with:);
  *(void *)(v24 + 40) = v25;
  uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v26);
  uint64_t v27 = *(void *)(v2 + 264);
  if (!v27)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v41 = v3;
  unint64_t v42 = v4;
  unint64_t v28 = *(uint64_t (**)(uint64_t *))(*(void *)v27 + 408);
  swift_retain();
  char v18 = v28(&v41);
  uint64_t result = swift_release();
  uint64_t v29 = *(void *)(v2 + 264);
  if (!v29)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_beginAccess();
  char v30 = *(unsigned char *)(v29 + 104);
  uint64_t v31 = *(void *)(v2 + 96);
  char v32 = *(unsigned char *)(v2 + 104);
  *(void *)(v2 + 96) = *(void *)(v29 + 96);
  *(unsigned char *)(v2 + 104) = v30;
  uint64_t v39 = v31;
  LOBYTE(v40) = v32;
  uint64_t result = __RKEntityAction.state.didset((uint64_t)&v39);
  uint64_t v33 = *(void *)(v2 + 264);
  if (v33)
  {
    uint64_t v34 = *(void *)(v33 + 168);
    char v35 = *(unsigned char *)(v33 + 176);
    *(void *)(v2 + 168) = v34;
    *(unsigned char *)(v2 + 176) = v35;
    MEMORY[0x270FA5388](result);
    v37[16] = v18 & 1;
    uint64_t v39 = v13;
    unint64_t v40 = v12;
    uint64_t v36 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v36, &v39, partial apply for implicit closure #3 in __RKEntityToggleAnimateAction.perform(with:), v37);
    swift_bridgeObjectRelease();
    swift_release();
    return v18 & 1;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t closure #1 in __RKEntityToggleAnimateAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 264);
    if (v2)
    {
      swift_beginAccess();
      uint64_t v3 = *(void *)(v2 + 96);
      char v4 = *(unsigned char *)(v2 + 104);
      swift_beginAccess();
      uint64_t v5 = *(void *)(v1 + 96);
      char v6 = *(unsigned char *)(v1 + 104);
      *(void *)(v1 + 96) = v3;
      *(unsigned char *)(v1 + 104) = v4;
      uint64_t v7 = v5;
      char v8 = v6;
      swift_retain();
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v7);
      swift_release();
      swift_release();
      *(void *)(v1 + 168) = 0;
      *(unsigned char *)(v1 + 176) = 1;
    }
    return swift_release();
  }
  return result;
}

uint64_t implicit closure #3 in __RKEntityToggleAnimateAction.perform(with:)(char a1)
{
  v2._countAndFlagsBits = 0x6E696E7275746552;
  v2._object = (void *)0xEA00000000002067;
  String.append(_:)(v2);
  if (a1) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t __RKEntityToggleAnimateAction.reversed()()
{
  swift_beginAccess();
  type metadata accessor for __RKEntityToggleAnimateAction();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 264) = 0;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0;
  *(void *)(v0 + 112) = 1;
  *(_WORD *)(v0 + 136) = 1;
  *(_DWORD *)(v0 + 140) = 1065353216;
  *(_WORD *)(v0 + 144) = 0;
  *(void *)(v0 + 160) = 0;
  *(void *)(v0 + 168) = 0;
  *(void *)(v0 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v0 + 176) = 1;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  uint64_t v1 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v1);
}

uint64_t __RKEntityToggleAnimateAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 264) = 0;
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 112) = 1;
  *(_WORD *)(v2 + 136) = 1;
  *(_DWORD *)(v2 + 140) = 1065353216;
  *(_WORD *)(v2 + 144) = 0;
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 168) = 0;
  *(void *)(v2 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v2 + 176) = 1;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityToggleAnimateAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for __RKEntityToggleAnimateAction();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 264) = 0;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 112) = 1;
  *(_WORD *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 1065353216;
  *(_WORD *)(v3 + 144) = 0;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v3 + 176) = 1;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  uint64_t v4 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t __RKEntityToggleAnimateAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    type metadata accessor for __RKEntityToggleAnimateAction();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 264) = 0;
    *(void *)(v7 + 120) = 0;
    *(void *)(v7 + 128) = 0;
    *(void *)(v7 + 112) = 1;
    *(_WORD *)(v7 + 136) = 1;
    *(_DWORD *)(v7 + 140) = 1065353216;
    *(_WORD *)(v7 + 144) = 0;
    *(void *)(v7 + 160) = 0;
    *(void *)(v7 + 168) = 0;
    *(void *)(v7 + 152) = 0x3FF0000000000000;
    *(unsigned char *)(v7 + 176) = 1;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 248) = 0u;
    uint64_t v8 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v8);
  }
  else
  {
    type metadata accessor for __RKEntityToggleAnimateAction();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 264) = 0;
    *(void *)(v4 + 120) = 0;
    *(void *)(v4 + 128) = 0;
    *(void *)(v4 + 112) = 1;
    *(_WORD *)(v4 + 136) = 1;
    *(_DWORD *)(v4 + 140) = 1065353216;
    *(_WORD *)(v4 + 144) = 0;
    *(void *)(v4 + 160) = 0;
    *(void *)(v4 + 168) = 0;
    *(void *)(v4 + 152) = 0x3FF0000000000000;
    *(unsigned char *)(v4 + 176) = 1;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    uint64_t v5 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v5);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v9;
    }
    else {
      return 0;
    }
  }
}

uint64_t __RKEntityToggleAnimateAction.init(targetEntity:)(uint64_t a1)
{
  *(void *)(v1 + 264) = 0;
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 128) = 0;
  *(void *)(v1 + 112) = 1;
  *(_WORD *)(v1 + 136) = 1;
  *(_DWORD *)(v1 + 140) = 1065353216;
  *(_WORD *)(v1 + 144) = 0;
  *(void *)(v1 + 160) = 0;
  *(void *)(v1 + 168) = 0;
  *(void *)(v1 + 152) = 0x3FF0000000000000;
  *(unsigned char *)(v1 + 176) = 1;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityToggleAnimateAction.__ivar_destroyer()
{
  return swift_release();
}

uint64_t __RKEntityToggleAnimateAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  swift_release();
  return v0;
}

uint64_t __RKEntityToggleAnimateAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEntityAnimateAction()
{
  return self;
}

uint64_t sub_2280F65A4()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in __RKEntityStartAnimateAction.perform(with:)()
{
  return closure #1 in __RKEntityStartAnimateAction.perform(with:)();
}

uint64_t partial apply for closure #2 in __RKEntityStartAnimateAction.perform(with:)(uint64_t *a1)
{
  return closure #2 in __RKEntityStartAnimateAction.perform(with:)(a1);
}

uint64_t sub_2280F6600()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t type metadata accessor for __RKEntityStopAnimateAction()
{
  return self;
}

uint64_t type metadata accessor for __RKEntityStartAnimateAction()
{
  return self;
}

uint64_t partial apply for closure #1 in __RKEntityToggleAnimateAction.perform(with:)()
{
  return closure #1 in __RKEntityToggleAnimateAction.perform(with:)();
}

uint64_t partial apply for implicit closure #3 in __RKEntityToggleAnimateAction.perform(with:)()
{
  return implicit closure #3 in __RKEntityToggleAnimateAction.perform(with:)(*(unsigned char *)(v0 + 16));
}

uint64_t type metadata accessor for __RKEntityToggleAnimateAction()
{
  return self;
}

uint64_t method lookup function for __RKEntityAnimateAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityAnimateAction);
}

uint64_t method lookup function for __RKEntityStartAnimateAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityStartAnimateAction);
}

uint64_t dispatch thunk of __RKEntityStartAnimateAction.__allocating_init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)()
{
  return (*(uint64_t (**)(void))(v0 + 976))();
}

uint64_t method lookup function for __RKEntityToggleAnimateAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityToggleAnimateAction);
}

uint64_t sub_2280F6710()
{
  swift_release();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 128), *(void *)(v0 + 136), v1);
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 168, 7);
}

unsigned char *storeEnumTagSinglePayload for AudioBufferResource.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280F6840);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioBufferResource.Error()
{
  return &type metadata for AudioBufferResource.Error;
}

unint64_t lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error;
  if (!lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error;
  if (!lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error);
  }
  return result;
}

unint64_t AudioBufferResource.Error.errorDescription.getter(char a1)
{
  if (!a1) {
    return 0xD000000000000043;
  }
  if (a1 == 1) {
    return 0xD000000000000036;
  }
  return 0xD00000000000002DLL;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AudioBufferResource.Error()
{
  return AudioBufferResource.Error.errorDescription.getter(*v0);
}

uint64_t AudioGeneratorConfiguration.init(layoutTag:mixGroupName:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 48000;
  *(_DWORD *)(a4 + 4) = result;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = a3;
  return result;
}

uint64_t AudioGeneratorConfiguration.layoutTag.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t AudioGeneratorConfiguration.layoutTag.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*AudioGeneratorConfiguration.layoutTag.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioGeneratorConfiguration.mixGroupName.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioGeneratorConfiguration.mixGroupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AudioGeneratorConfiguration.mixGroupName.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void *initializeBufferWithCopyOfBuffer for AudioGeneratorConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioGeneratorConfiguration(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AudioGeneratorConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AudioGeneratorConfiguration()
{
  return &type metadata for AudioGeneratorConfiguration;
}

uint64_t ModelSortGroup.init(depthPass:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  type metadata accessor for ModelSortGroup.SortGroupRef();
  uint64_t v4 = swift_allocObject();
  uint64_t result = RECreateMeshSortGroup();
  *(void *)(v4 + 16) = result;
  *(unsigned char *)a2 = v3;
  *(unsigned char *)(a2 + 1) = 3;
  *(void *)(a2 + 8) = v4;
  return result;
}

uint64_t type metadata accessor for ModelSortGroup.SortGroupRef()
{
  return self;
}

BOOL static ModelSortGroup.!= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1);
  int v3 = *(unsigned __int8 *)(a2 + 1);
  if (REMeshSortingComponentCheckIfEqual())
  {
    BOOL v4 = v3 == 3;
    BOOL v6 = v3 != 3 && v2 == v3;
    if (v2 != 3) {
      BOOL v4 = v6;
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  return !v4;
}

void ModelSortGroup.depthPass.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

BOOL static ModelSortGroup.DepthPass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ModelSortGroup.DepthPass.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ModelSortGroup.DepthPass.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ModelSortGroup.planarUIPlacement.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

BOOL static ModelSortGroup.PlanarUIPlacement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ModelSortGroup.PlanarUIPlacement.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ModelSortGroup.PlanarUIPlacement.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for planarUIInline()
{
  type metadata accessor for ModelSortGroup.SortGroupRef();
  uint64_t v0 = swift_allocObject();
  uint64_t result = RECreateMeshSortGroup();
  *(void *)(v0 + 16) = result;
  static ModelSortGroup.planarUIInline = 2;
  qword_2681C36D8 = v0;
  return result;
}

uint64_t static ModelSortGroup.planarUIInline.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for planarUIInline != -1) {
    swift_once();
  }
  uint64_t v2 = qword_2681C36D8;
  *(_WORD *)a1 = static ModelSortGroup.planarUIInline;
  *(void *)(a1 + 8) = v2;

  return swift_retain();
}

uint64_t one-time initialization function for planarUIAlwaysInFront()
{
  type metadata accessor for ModelSortGroup.SortGroupRef();
  uint64_t v0 = swift_allocObject();
  uint64_t result = RECreateMeshSortGroup();
  *(void *)(v0 + 16) = result;
  static ModelSortGroup.planarUIAlwaysInFront = 258;
  qword_2681C36E8 = v0;
  return result;
}

uint64_t static ModelSortGroup.planarUIAlwaysInFront.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for planarUIAlwaysInFront != -1) {
    swift_once();
  }
  uint64_t v2 = qword_2681C36E8;
  *(_WORD *)a1 = static ModelSortGroup.planarUIAlwaysInFront;
  *(void *)(a1 + 8) = v2;

  return swift_retain();
}

uint64_t one-time initialization function for planarUIAlwaysBehind()
{
  type metadata accessor for ModelSortGroup.SortGroupRef();
  uint64_t v0 = swift_allocObject();
  uint64_t result = RECreateMeshSortGroup();
  *(void *)(v0 + 16) = result;
  static ModelSortGroup.planarUIAlwaysBehind = 514;
  qword_2681C36F8 = v0;
  return result;
}

uint64_t static ModelSortGroup.planarUIAlwaysBehind.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for planarUIAlwaysBehind != -1) {
    swift_once();
  }
  uint64_t v2 = qword_2681C36F8;
  *(_WORD *)a1 = static ModelSortGroup.planarUIAlwaysBehind;
  *(void *)(a1 + 8) = v2;

  return swift_retain();
}

__int16 *ModelSortGroupComponent.init(group:order:)@<X0>(__int16 *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v3 = *result;
  uint64_t v4 = *((void *)result + 1);
  *(_DWORD *)a3 = a2;
  *(_WORD *)(a3 + 8) = v3;
  *(void *)(a3 + 16) = v4;
  return result;
}

uint64_t ModelSortGroupComponent.group.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(_WORD *)a1 = *(_WORD *)(v1 + 8);
  *(void *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t ModelSortGroupComponent.group.setter(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t result = swift_release();
  *(_WORD *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = v3;
  return result;
}

uint64_t (*ModelSortGroupComponent.group.modify(uint64_t a1))(char *a1, char a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(_WORD *)a1 = *(_WORD *)(v1 + 8);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v1;
  swift_retain();
  return ModelSortGroupComponent.group.modify;
}

uint64_t ModelSortGroupComponent.group.modify(char *a1, char a2)
{
  char v2 = *a1;
  char v3 = a1[1];
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  if (a2)
  {
    swift_retain();
    swift_release();
    *(unsigned char *)(v5 + 8) = v2;
    *(unsigned char *)(v5 + 9) = v3;
    *(void *)(v5 + 16) = v4;
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    *(unsigned char *)(v5 + 8) = v2;
    *(unsigned char *)(v5 + 9) = v3;
    *(void *)(v5 + 16) = v4;
  }
  return result;
}

uint64_t ModelSortGroupComponent.order.getter()
{
  return *v0;
}

uint64_t ModelSortGroupComponent.order.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t (*ModelSortGroupComponent.order.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return ModelSortGroupComponent.order.modify;
}

uint64_t ModelSortGroupComponent.order.modify(uint64_t result)
{
  **(_DWORD **)uint64_t result = *(_DWORD *)(result + 8);
  return result;
}

uint64_t static ModelSortGroupComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = REMeshSortingComponentCopySortGroup();
  RECreateMeshSortGroup();
  type metadata accessor for ModelSortGroup.SortGroupRef();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  RERelease();
  REComponentGetEntity();
  REUISortingComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    int SortCategory = REUISortingComponentGetSortCategory();
    if ((SortCategory + 2) >= 5) {
      char v5 = 0;
    }
    else {
      char v5 = 0x101000202uLL >> (8 * (SortCategory + 2));
    }
    uint64_t result = REUISortingComponentGetSortPriorityHint();
    int PriorityInSortGroup = result;
    char v8 = 2;
  }
  else
  {
    int PriorityInSortGroup = REMeshSortingComponentGetPriorityInSortGroup();
    uint64_t result = REMeshSortingComponentGetDepthPriorityInSortGroup();
    if (result == 0x7FFFFFFF) {
      char v8 = 1;
    }
    else {
      char v8 = 2;
    }
    if (result == 0x80000000) {
      char v8 = 0;
    }
    char v5 = 3;
  }
  *(_DWORD *)a1 = PriorityInSortGroup;
  *(unsigned char *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 9) = v5;
  *(void *)(a1 + 16) = v3;
  return result;
}

uint64_t ModelSortGroupComponent.__toCore(_:)()
{
  if (*(unsigned char *)(v0 + 9) == 3)
  {
    if (REMeshSortingComponentGetIsUI())
    {
      REMeshSortingComponentSetIsUI();
      REComponentGetEntity();
      REUISortingComponentGetComponentType();
      REEntityRemoveComponentByClass();
    }
    REMeshSortingComponentSetPriorityInSortGroup();
  }
  else
  {
    REMeshSortingComponentSetIsUI();
    REComponentGetEntity();
    REUISortingComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    REUISortingComponentSetSortCategory();
    REUISortingComponentSetSortPriorityHint();
    REUISortingComponentSetUsesMeshBoundingBox();
    RENetworkMarkComponentDirty();
  }
  REMeshSortingComponentSetDepthPriorityInSortGroup();
  REMeshSortingComponentSetSortGroup();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ModelSortGroupComponent(_DWORD *a1@<X8>)
{
  *a1 = 2018;
}

void static ModelSortGroupComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2018;
}

uint64_t ModelSortGroupComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = *((unsigned char *)v0 + 8);
  char v10 = *((unsigned char *)v0 + 9);
  uint64_t v11 = *((void *)v0 + 2);
  int v16 = *v0;
  int v8 = v16;
  char v17 = v9;
  char v18 = v10;
  uint64_t v19 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_22831E350;
  *(void *)(v12 + 32) = 0x70756F7267;
  *(void *)(v12 + 40) = 0xE500000000000000;
  *(unsigned char *)(v12 + 48) = v9;
  *(unsigned char *)(v12 + 49) = v10;
  *(void *)(v12 + 56) = v11;
  *(void *)(v12 + 72) = &type metadata for ModelSortGroup;
  *(void *)(v12 + 80) = 0x726564726FLL;
  *(void *)(v12 + 88) = 0xE500000000000000;
  *(void *)(v12 + 120) = MEMORY[0x263F8E548];
  *(_DWORD *)(v12 + 96) = v8;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 1, 1, v13);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  swift_retain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t ModelSortGroup.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(v6) = *(unsigned char *)(v0 + 1);
  uint64_t v9 = *(void *)(v0 + 8);
  v13[0] = *(unsigned char *)v0;
  char v8 = v13[0];
  v13[1] = v6;
  uint64_t v14 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_22830EC60;
  *(void *)(v10 + 32) = 0x7361506874706564;
  *(void *)(v10 + 40) = 0xE900000000000073;
  *(void *)(v10 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup.DepthPass?);
  *(unsigned char *)(v10 + 48) = v8;
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static ModelSortGroup.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1);
  int v3 = *(unsigned __int8 *)(a2 + 1);
  uint64_t result = REMeshSortingComponentCheckIfEqual();
  if (result)
  {
    BOOL v6 = v3 != 3 && v2 == v3;
    if (v2 == 3) {
      return v3 == 3;
    }
    else {
      return v6;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelSortGroup.DepthPass and conformance ModelSortGroup.DepthPass()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelSortGroup.DepthPass and conformance ModelSortGroup.DepthPass;
  if (!lazy protocol witness table cache variable for type ModelSortGroup.DepthPass and conformance ModelSortGroup.DepthPass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelSortGroup.DepthPass and conformance ModelSortGroup.DepthPass);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelSortGroup.PlanarUIPlacement and conformance ModelSortGroup.PlanarUIPlacement()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelSortGroup.PlanarUIPlacement and conformance ModelSortGroup.PlanarUIPlacement;
  if (!lazy protocol witness table cache variable for type ModelSortGroup.PlanarUIPlacement and conformance ModelSortGroup.PlanarUIPlacement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelSortGroup.PlanarUIPlacement and conformance ModelSortGroup.PlanarUIPlacement);
  }
  return result;
}

uint64_t sub_2280F78A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v2 = *(_WORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(_WORD *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  return swift_retain();
}

uint64_t sub_2280F78BC(__int16 *a1, uint64_t a2)
{
  __int16 v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  swift_retain();
  uint64_t result = swift_release();
  *(_WORD *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  return result;
}

_DWORD *sub_2280F7908@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_2280F7914(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelSortGroup(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ModelSortGroup(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ModelSortGroup(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ModelSortGroup()
{
  return &type metadata for ModelSortGroup;
}

unsigned char *storeEnumTagSinglePayload for ModelSortGroup.DepthPass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280F7AC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelSortGroup.DepthPass()
{
  return &type metadata for ModelSortGroup.DepthPass;
}

unsigned char *storeEnumTagSinglePayload for ModelSortGroup.PlanarUIPlacement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280F7BC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelSortGroup.PlanarUIPlacement()
{
  return &type metadata for ModelSortGroup.PlanarUIPlacement;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelSortGroupComponent(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ModelSortGroupComponent(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ModelSortGroupComponent(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ModelSortGroupComponent()
{
  return &type metadata for ModelSortGroupComponent;
}

void Entity.moveCharacter(by:deltaTime:relativeTo:collisionHandler:)(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = v3;
  RECharacterControllerComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    uint64_t v11 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

LABEL_30:
    *a3 = 0;
    return;
  }
  RECharacterControllerComponentStateGetComponentType();
  REEntityGetOrAddComponentByClass();
  if (a1)
  {
    swift_retain();
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable) {
      goto LABEL_10;
    }
    uint64_t v9 = SceneNullable;
    id v10 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v10)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v9);
    }
    uint64_t v12 = Scene.physicsOrigin.getter();
    swift_release();
    if (!v12) {
LABEL_10:
    }
      uint64_t v12 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    swift_release();
  }
  else
  {
    uint64_t v12 = 0;
  }
  specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v12);
  if (!RECharacterControllerComponentMoveEx())
  {
    swift_release();
    goto LABEL_30;
  }
  if (!a2)
  {
LABEL_26:
    *a3 = RECharacterControllerCollisionResultGetHitFlags();
    RERelease();
    swift_release();
    return;
  }
  swift_retain();
  uint64_t CollisionCount = RECharacterControllerCollisionResultGetCollisionCount();
  if (CollisionCount < 0) {
    goto LABEL_32;
  }
  uint64_t v14 = CollisionCount;
  uint64_t v29 = a3;
  if (!CollisionCount)
  {
LABEL_25:
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
    a3 = v29;
    goto LABEL_26;
  }
  uint64_t v15 = 0;
  while (1)
  {
    uint64_t HitEntityAtCollisionIndex = RECharacterControllerCollisionResultGetHitEntityAtCollisionIndex();
    RECharacterControllerCollisionResultGetHitPositionAtCollisionIndex();
    long long v35 = v22;
    RECharacterControllerCollisionResultGetHitNormalAtCollisionIndex();
    long long v34 = v23;
    RECharacterControllerCollisionResultGetMoveDirectionAtCollisionIndex();
    long long v33 = v24;
    RECharacterControllerCollisionResultGetMoveDistanceAtCollisionIndex();
    int v26 = v25;
    swift_retain();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v16 = swift_dynamicCastClassUnconditional();
      goto LABEL_18;
    }
    if (REEntityIsBeingDestroyed()) {
      break;
    }
    uint64_t v27 = specialized static Entity.entityInfoType(_:)();
    if (v27)
    {
      uint64_t v17 = (*(uint64_t (**)(void))(v27 + 232))();
      uint64_t v28 = *(void *)(v17 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v28, 0);
      *(void *)(v17 + 16) = HitEntityAtCollisionIndex;
      MEMORY[0x22A68E750](HitEntityAtCollisionIndex, v17);
      swift_release();
      goto LABEL_19;
    }
    uint64_t v16 = makeEntity(for:)(HitEntityAtCollisionIndex);
LABEL_18:
    uint64_t v17 = v16;
LABEL_19:
    ++v15;
    long long v19 = v34;
    long long v18 = v35;
    long long v20 = v33;
    HIDWORD(v18) = v32;
    HIDWORD(v19) = v31;
    HIDWORD(v20) = v30;
    v36[0] = v4;
    v36[1] = v17;
    long long v37 = v18;
    long long v38 = v19;
    long long v39 = v20;
    int v40 = v26;
    a2(v36);
    swift_release();
    swift_release();
    if (v14 == v15) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
}

void Entity.teleportCharacter(to:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  RECharacterControllerComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RECharacterControllerComponentStateGetComponentType();
    REEntityGetOrAddComponentByClass();
    if (a1)
    {
      swift_retain();
      uint64_t SceneNullable = REEntityGetSceneNullable();
      if (!SceneNullable) {
        goto LABEL_12;
      }
      uint64_t v4 = SceneNullable;
      id v5 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v5)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v4);
      }
      uint64_t v6 = Scene.physicsOrigin.getter();
      swift_release();
      if (!v6) {
LABEL_12:
      }
        uint64_t v6 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
      swift_release();
    }
    else
    {
      uint64_t v6 = 0;
    }
    *(double *)v7.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v6);
    simd_float4x4.transform(position:)(a2, v7, v8, v9, v10);
    RECharacterControllerComponentSetPosition();
    swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
  }
}

uint64_t Entity.characterController.getter@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);

  return swift_release();
}

double key path getter for Entity.characterController : Entity@<D0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v6);
  swift_release();
  uint64_t v2 = v8;
  char v3 = v9;
  long long v4 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v4;
  double result = *(double *)&v7;
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = v2;
  *(unsigned char *)(a1 + 56) = v3;
  return result;
}

uint64_t key path setter for Entity.characterController : Entity(uint64_t a1)
{
  outlined init with take of CharacterControllerComponent?(a1, (uint64_t)v2);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
  return swift_release();
}

uint64_t Entity.characterController.setter(uint64_t a1)
{
  outlined init with take of CharacterControllerComponent?(a1, (uint64_t)v2);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
  return swift_release();
}

void (*Entity.characterController.modify(void *a1))(void **a1, char a2)
{
  char v3 = malloc(0xC8uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t)(v3 + 16);
  v3[24] = v1;
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(v4);
  swift_release();
  return Entity.characterController.modify;
}

void Entity.characterController.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)*a1 + 64;
  uint64_t v4 = (uint64_t)*a1 + 128;
  if (a2) {
    uint64_t v5 = (uint64_t)v2;
  }
  else {
    uint64_t v5 = v3;
  }
  outlined init with take of CharacterControllerComponent?(v4, v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v5);
  swift_release();

  free(v2);
}

uint64_t Entity.characterControllerState.getter@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);

  return swift_release();
}

double key path getter for Entity.characterControllerState : Entity@<D0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v4);
  swift_release();
  char v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 16) = v2;
  return result;
}

uint64_t key path setter for Entity.characterControllerState : Entity(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2, v3);

  return swift_release();
}

uint64_t Entity.characterControllerState.setter(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2, v3);

  return swift_release();
}

void (*Entity.characterControllerState.modify(void *a1))(uint64_t **a1)
{
  char v3 = malloc(0x20uLL);
  *a1 = v3;
  void v3[3] = v1;
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v3);
  swift_release();
  return Entity.characterControllerState.modify;
}

void Entity.characterControllerState.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  char v4 = *((unsigned char *)*a1 + 16);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2, v3, v4);
  swift_release();

  free(v1);
}

uint64_t outlined init with take of CharacterControllerComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterControllerComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

__n128 simd_float4x4.decompose()(float32x4_t a1, int32x4_t a2, int8x16_t a3, __n128 a4)
{
  return a4;
}

double static simd_float4x4.identity.getter()
{
  return *(double *)&_PromotedConst_1;
}

double simd_float4x4.init(translation:)()
{
  return *(double *)&_PromotedConst_6;
}

double simd_float4x4.translation.getter(double a1, double a2, double a3, double a4)
{
  return a4;
}

__n64 simd_float4x4.scale.getter(float32x4_t a1, int32x4_t a2, int8x16_t a3)
{
  float32x4_t v3 = vmulq_f32(a1, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(a3, a3, 0xCuLL), a3, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), a3, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a2, (int8x16_t)a2, 0xCuLL), (int8x16_t)a2, 8uLL)));
  BOOL v4 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0] <= 0.0;
  float v5 = -1.0;
  if (!v4) {
    float v5 = 1.0;
  }
  float32x4_t v6 = vmulq_f32(a1, a1);
  float32x4_t v7 = vmulq_f32((float32x4_t)a2, (float32x4_t)a2);
  result.n64_f32[0] = sqrtf(v6.f32[2] + vaddv_f32(*(float32x2_t *)v6.f32)) * v5;
  result.n64_f32[1] = sqrtf(v7.f32[2] + vaddv_f32(*(float32x2_t *)v7.f32)) * v5;
  return result;
}

double simd_float4x4.rotation.getter()
{
  return 0.0;
}

double simd_float4x4.init(scale:)(float a1)
{
  HIDWORD(v1) = vdupq_lane_s32(0, 0).i32[1];
  *(float *)&double v1 = a1;
  return v1;
}

void __swiftcall simd_float3x3.init(_:)(simd_float3x3 *__return_ptr retstr, simd_float4x4 *a2)
{
  v2.i32[3] = 0;
  v3.i32[3] = 0;
  v4.i32[3] = 0;
  retstr->columns[0] = v2;
  retstr->columns[1] = v3;
  retstr->columns[2] = v4;
}

double simd_float4x4.init(rows:)(int32x4_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4)
{
  *(void *)&double result = vzip1q_s32(vzip1q_s32(a1, a3), vzip1q_s32(a2, a4)).u64[0];
  return result;
}

void __swiftcall simd_float4x4.init(rows:)(simd_float4x4 *__return_ptr retstr, Swift::tuple_tuple_Float_Float_Float_Float_tuple_Float_Float_Float_Float_tuple_Float_Float_Float_Float_tuple_Float_Float_Float_Float *rows)
{
}

float32x4_t simd_float4x4.scale(_:)(float32x4_t a1)
{
  float32x4_t v2 = vmulq_lane_f32(v1[1], *(float32x2_t *)a1.f32, 1);
  float32x4_t *v1 = vmulq_n_f32(*v1, a1.f32[0]);
  v1[1]  = v2;
  float32x4_t result = vmulq_laneq_f32(v1[2], a1, 2);
  v1[2]  = result;
  return result;
}

float32x4_t simd_float4x4.translate(_:)(float32x4_t a1)
{
  float32x4_t result = vaddq_f32(v1[3], a1);
  result.i32[3]  = HIDWORD(*(_OWORD *)&v1[3]);
  v1[3]  = result;
  return result;
}

double simd_float4x4.scaled(_:)(float a1, float32x4_t a2)
{
  *(void *)&double result = vmulq_n_f32(a2, a1).u64[0];
  return result;
}

double simd_float4x4.translated(_:)(double a1, double a2)
{
  return a2;
}

double key path setter for simd_float4x4.scale : simd_float4x4(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v3 = *a2;
  float32x4_t v10 = *a2;
  float32x4_t v11 = *a1;
  v3.i32[3]  = 0;
  *(double *)v4.i64  = simd_normalize(v3);
  v4.i32[3]  = v10.i32[3];
  *a2  = v4;
  float32x4_t v5 = a2[1];
  v10.i32[3]  = v5.i32[3];
  v5.i32[3]  = 0;
  *(double *)v6.i64  = simd_normalize(v5);
  v6.i32[3]  = v10.i32[3];
  a2[1]  = v6;
  float32x4_t v7 = a2[2];
  v10.i32[3]  = v7.i32[3];
  v7.i32[3]  = 0;
  *(double *)v8.i64  = simd_normalize(v7);
  v8.i32[3]  = v10.i32[3];
  a2[2]  = v8;
  *(void *)&double result = simd_float4x4.scale(_:)(v11).u64[0];
  return result;
}

double simd_float4x4.scale.setter(float32x4_t a1)
{
  float32x4_t v2 = v1[1];
  int32x4_t v3 = (int32x4_t)vmulq_f32(*v1, *v1);
  v3.i32[0]  = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  float32x2_t v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  float32x2_t v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  float32x4_t v6 = vmulq_n_f32(*v1, vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).f32[0]);
  v6.i32[3]  = HIDWORD(*(unsigned long long *)v1);
  int32x4_t v7 = (int32x4_t)vmulq_f32(v2, v2);
  v7.i32[0]  = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  float32x2_t v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  float32x2_t v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  float32x4_t v10 = vmulq_n_f32(v2, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  v10.i32[3]  = v2.i32[3];
  float32x4_t v11 = v1[2];
  int32x4_t v12 = (int32x4_t)vmulq_f32(v11, v11);
  float32x4_t *v1 = v6;
  v1[1]  = v10;
  v10.i32[0]  = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
  *(float32x2_t *)v6.f32  = vrsqrte_f32((float32x2_t)v10.u32[0]);
  *(float32x2_t *)v6.f32  = vmul_f32(*(float32x2_t *)v6.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32)));
  float32x4_t v13 = vmulq_n_f32(v11, vmul_f32(*(float32x2_t *)v6.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32))).f32[0]);
  v13.i32[3]  = v11.i32[3];
  v1[2]  = v13;
  *(void *)&double result = simd_float4x4.scale(_:)(a1).u64[0];
  return result;
}

void (*simd_float4x4.scale.modify(void *a1))(float32x4_t **a1)
{
  int32x4_t v3 = malloc(0x18uLL);
  *a1  = v3;
  v3[2]  = v1;
  *(__n64 *)&long long v4 = simd_float4x4.scale.getter(*(float32x4_t *)v1, *(int32x4_t *)(v1 + 16), *(int8x16_t *)(v1 + 32));
  *(_OWORD *)int32x4_t v3 = v4;
  return simd_float4x4.scale.modify;
}

void simd_float4x4.scale.modify(float32x4_t **a1)
{
  uint64_t v1 = *a1;
  simd_float4x4.scale.setter(**a1);

  free(v1);
}

void simd_float4x4.rotation.setter(float32x4_t a1)
{
  double v7 = *(double *)(v1 + 48);
  LODWORD(v2)  = simd_float4x4.scale.getter(*(float32x4_t *)v1, *(int32x4_t *)(v1 + 16), *(int8x16_t *)(v1 + 32)).n64_u32[0];
  *(double *)&long long v3 = specialized simd_float4x4.init(translation:rotation:scale:)(v7, a1, v2);
  *(_OWORD *)uint64_t v1 = v3;
  *(_OWORD *)(v1 + 16)  = v4;
  *(_OWORD *)(v1 + 32)  = v5;
  *(_OWORD *)(v1 + 48)  = v6;
}

void (*simd_float4x4.rotation.modify(void *a1))(float32x4_t **a1)
{
  long long v3 = malloc(0x48uLL);
  *a1  = v3;
  v3[8]  = v1;
  *((_OWORD *)v3 + 1)  = 0u;
  *((_OWORD *)v3 + 2)  = 0u;
  *((_OWORD *)v3 + 3)  = 0u;
  REDecomposeMatrix();
  *(_OWORD *)long long v3 = *((_OWORD *)v3 + 2);
  return simd_float4x4.rotation.modify;
}

void simd_float4x4.rotation.modify(float32x4_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[4].i64[0];
  double v8 = *(double *)(v2 + 48);
  float32x4_t v9 = **a1;
  LODWORD(v3)  = simd_float4x4.scale.getter(*(float32x4_t *)v2, *(int32x4_t *)(v2 + 16), *(int8x16_t *)(v2 + 32)).n64_u32[0];
  *(double *)&long long v4 = specialized simd_float4x4.init(translation:rotation:scale:)(v8, v9, v3);
  *(_OWORD *)uint64_t v2 = v4;
  *(_OWORD *)(v2 + 16)  = v5;
  *(_OWORD *)(v2 + 32)  = v6;
  *(_OWORD *)(v2 + 48)  = v7;

  free(v1);
}

__n128 simd_float4x4.translation.setter(__n128 result)
{
  result.n128_u32[3]  = v1[3].n128_u32[3];
  v1[3]  = result;
  return result;
}

__n128 (*simd_float4x4.translation.modify(void *a1))(void **a1)
{
  float v3 = malloc(0x18uLL);
  *a1  = v3;
  long long v4 = *(_OWORD *)(v1 + 48);
  HIDWORD(v4)  = 0;
  v3[2]  = v1;
  *(_OWORD *)float v3 = v4;
  return simd_float4x4.translation.modify;
}

__n128 simd_float4x4.translation.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[2];
  long long v3 = *(_OWORD *)v1;
  HIDWORD(v3)  = *(_DWORD *)(v2 + 60);
  *(_OWORD *)(v2 + 48)  = v3;
  free(v1);
  return result;
}

double specialized simd_float4x4.init(translation:rotation:scale:)(double a1, float32x4_t a2, float a3)
{
  *(double *)v3.i64  = simd_matrix4x4(a2);
  *(void *)&double result = vmulq_n_f32(v3, a3).u64[0];
  return result;
}

double simd_normalize(float32x4_t a1)
{
  int32x4_t v1 = (int32x4_t)vmulq_f32(a1, a1);
  v1.i32[0]  = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v1, 2), vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1.i8, 1))).u32[0];
  float32x2_t v2 = vrsqrte_f32((float32x2_t)v1.u32[0]);
  float32x2_t v3 = vmul_f32(v2, vrsqrts_f32((float32x2_t)v1.u32[0], vmul_f32(v2, v2)));
  *(void *)&double result = vmulq_n_f32(a1, vmul_f32(v3, vrsqrts_f32((float32x2_t)v1.u32[0], vmul_f32(v3, v3))).f32[0]).u64[0];
  return result;
}

void sub_2280F8F24(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(__n64 *)&long long v3 = simd_float4x4.scale.getter(*(float32x4_t *)a1, *(int32x4_t *)(a1 + 16), *(int8x16_t *)(a1 + 32));
  *a2  = v3;
}

double sub_2280F8F58@<D0>(_OWORD *a1@<X8>)
{
  REDecomposeMatrix();
  double result = 0.0;
  *a1  = 0u;
  return result;
}

void sub_2280F8FD8(float32x4_t *a1, uint64_t a2)
{
  double v8 = *(double *)(a2 + 48);
  float32x4_t v9 = *a1;
  LODWORD(v3)  = simd_float4x4.scale.getter(*(float32x4_t *)a2, *(int32x4_t *)(a2 + 16), *(int8x16_t *)(a2 + 32)).n64_u32[0];
  *(double *)&long long v4 = specialized simd_float4x4.init(translation:rotation:scale:)(v8, v9, v3);
  *(_OWORD *)a2  = v4;
  *(_OWORD *)(a2 + 16)  = v5;
  *(_OWORD *)(a2 + 32)  = v6;
  *(_OWORD *)(a2 + 48)  = v7;
}

__n128 sub_2280F902C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[3];
  result.n128_u32[3]  = 0;
  *a2  = result;
  return result;
}

__n128 sub_2280F903C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  result.n128_u32[3]  = a2[3].n128_u32[3];
  a2[3]  = result;
  return result;
}

uint64_t GeometricPin.pose.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_6;
  }
  if (!*(void *)(v1 + 32))
  {
    uint64_t result = swift_release();
LABEL_6:
    char v9 = 0;
    long long v7 = *(_OWORD *)(v1 + 48);
    long long v8 = *(_OWORD *)(v1 + 64);
    goto LABEL_8;
  }
  String.utf8CString.getter();
  SkeletalJointPinPose  = REEntityTryGetSkeletalJointPinPose();
  swift_release();
  if (SkeletalJointPinPose)
  {
    REPoseMultiply();
    long long v10 = v6;
    long long v11 = v5;
    uint64_t result = swift_release();
    long long v8 = v10;
    long long v7 = v11;
    char v9 = 0;
  }
  else
  {
    uint64_t result = swift_release();
    char v9 = 1;
    long long v8 = 0uLL;
    long long v7 = 0uLL;
  }
LABEL_8:
  *(_OWORD *)a1  = v7;
  *(_OWORD *)(a1 + 16)  = v8;
  *(unsigned char *)(a1 + 32)  = v9;
  return result;
}

uint64_t GeometricPin.init(named:offsetPosition:offsetOrientation:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>)
{
  swift_weakInit();
  a3[1].n128_u64[1]  = 0;
  a3[2].n128_u64[0]  = 0;
  a3[3]  = a4;
  a3[4]  = a5;
  swift_weakAssign();
  a3->n128_u64[1]  = a1;
  a3[1].n128_u64[0]  = a2;
  uint64_t result = swift_bridgeObjectRelease();
  a3[1].n128_u64[1]  = 0;
  a3[2].n128_u64[0]  = 0;
  return result;
}

uint64_t GeometricPin.init(named:skeletalJointName:offsetPosition:offsetOrientation:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>)
{
  swift_weakInit();
  a5[1].n128_u64[1]  = 0;
  a5[2].n128_u64[0]  = 0;
  a5[3]  = a6;
  a5[4]  = a7;
  swift_weakAssign();
  a5->n128_u64[1]  = a1;
  a5[1].n128_u64[0]  = a2;
  uint64_t result = swift_bridgeObjectRelease();
  a5[1].n128_u64[1]  = a3;
  a5[2].n128_u64[0]  = a4;
  return result;
}

uint64_t GeometricPin.position.getter()
{
  if (!swift_weakLoadStrong()) {
    return *(_OWORD *)(v0 + 48);
  }
  if (!*(void *)(v0 + 32))
  {
    swift_release();
    return *(_OWORD *)(v0 + 48);
  }
  String.utf8CString.getter();
  SkeletalJointPinPose  = REEntityTryGetSkeletalJointPinPose();
  swift_release();
  if ((SkeletalJointPinPose & 1) == 0)
  {
    swift_release();
    return 0;
  }
  REPoseMultiply();
  uint64_t v5 = v2;
  swift_release();
  *(void *)&long long v3 = v5;
  return v3;
}

uint64_t GeometricPin.orientation.getter()
{
  if (!swift_weakLoadStrong()) {
    return *(_OWORD *)(v0 + 64);
  }
  if (!*(void *)(v0 + 32))
  {
    swift_release();
    return *(_OWORD *)(v0 + 64);
  }
  String.utf8CString.getter();
  SkeletalJointPinPose  = REEntityTryGetSkeletalJointPinPose();
  swift_release();
  if ((SkeletalJointPinPose & 1) == 0)
  {
    swift_release();
    return 0;
  }
  REPoseMultiply();
  uint64_t v5 = v2;
  swift_release();
  *(void *)&long long v3 = v5;
  return v3;
}

uint64_t GeometricPin.position(relativeTo:)(uint64_t a1)
{
  GeometricPin.pose(relativeTo:)(a1, (uint64_t)v2);
  outlined init with take of Transform?((uint64_t)v2, (uint64_t)&v3, &demangling cache variable for type metadata for REPoseF?);
  if (v4) {
    return 0;
  }
  else {
    return v3;
  }
}

uint64_t GeometricPin.pose(relativeTo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  if (!swift_weakLoadStrong()) {
    goto LABEL_6;
  }
  if (!*(void *)(v3 + 32))
  {
    swift_release();
LABEL_6:
    float32x4_t v19 = *(float32x4_t *)(v3 + 64);
    long long v21 = *(_OWORD *)(v3 + 48);
    goto LABEL_7;
  }
  String.utf8CString.getter();
  SkeletalJointPinPose  = REEntityTryGetSkeletalJointPinPose();
  swift_release();
  if ((SkeletalJointPinPose & 1) == 0)
  {
    uint64_t result = swift_release();
    char v16 = 1;
    long long v15 = 0uLL;
    __n128 v17 = 0uLL;
    goto LABEL_8;
  }
  REPoseMultiply();
  float32x4_t v19 = v8;
  long long v21 = v7;
  swift_release();
LABEL_7:
  uint64_t Strong = swift_weakLoadStrong();
  LODWORD(v10)  = DWORD2(v21);
  __n128 v11 = transformPose(_:from:to:)(Strong, a1, *(double *)&v21, v10, v19);
  long long v18 = v12;
  __n128 v20 = v11;
  unsigned __int32 v22 = v13;
  uint64_t result = swift_release();
  long long v15 = v18;
  __n128 v17 = v20;
  char v16 = 0;
  v17.n128_u32[2]  = v22;
LABEL_8:
  *(__n128 *)a2  = v17;
  *(_OWORD *)(a2 + 16)  = v15;
  *(unsigned char *)(a2 + 32)  = v16;
  return result;
}

uint64_t GeometricPin.orientation(relativeTo:)(uint64_t a1)
{
  GeometricPin.pose(relativeTo:)(a1, (uint64_t)v2);
  outlined init with take of Transform?((uint64_t)v2, (uint64_t)v3, &demangling cache variable for type metadata for REPoseF?);
  if (v5) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t GeometricPin.entity.getter()
{
  return swift_weakLoadStrong();
}

uint64_t GeometricPin.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeometricPin.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8)  = a1;
  *(void *)(v2 + 16)  = a2;
  return result;
}

uint64_t (*GeometricPin.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 GeometricPin.offsetPosition.getter()
{
  return v0[3];
}

void GeometricPin.offsetPosition.setter(__n128 a1)
{
  v1[3]  = a1;
}

void (*GeometricPin.offsetPosition.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x18uLL);
  *a1  = v3;
  v3[2]  = v1;
  *(_OWORD *)uint64_t v3 = *(_OWORD *)(v1 + 48);
  return GeometricPin.offsetPosition.modify;
}

void GeometricPin.offsetPosition.modify(void **a1)
{
  uint64_t v1 = *a1;
  *(_OWORD *)(v1[2] + 48)  = *(_OWORD *)v1;
  free(v1);
}

__n128 GeometricPin.offsetOrientation.getter()
{
  return v0[4];
}

void GeometricPin.offsetOrientation.setter(__n128 a1)
{
  v1[4]  = a1;
}

void (*GeometricPin.offsetOrientation.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x18uLL);
  *a1  = v3;
  v3[2]  = v1;
  *(_OWORD *)uint64_t v3 = *(_OWORD *)(v1 + 64);
  return GeometricPin.offsetOrientation.modify;
}

void GeometricPin.offsetOrientation.modify(void **a1)
{
  uint64_t v1 = *a1;
  *(_OWORD *)(v1[2] + 64)  = *(_OWORD *)v1;
  free(v1);
}

uint64_t GeometricPin.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

__n128 transformPose(_:from:to:)(uint64_t a1, uint64_t a2, double a3, double a4, float32x4_t a5)
{
  *(double *)v5.i64  = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, a2);
  float32x4_t v13 = v5;
  float32x4_t v14 = v6;
  float32x4_t v15 = v7;
  float32x4_t v16 = v8;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of transformPose(_:from:to:));
  specialized simd_float4x4.init(translation:rotation:scale:)(a3, a5, v9);
  float32x4_t v18 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v10.f32[0]), v14, *(float32x2_t *)v10.f32, 1), v15, v10, 2), v16, v10, 3);
  REDecomposeMatrix();
  return (__n128)v18;
}

void GeometricPin.alignment(to:relativeTo:)(uint64_t a1@<X1>, float32x4_t *a2@<X8>)
{
  GeometricPin.pose(relativeTo:)(a1, (uint64_t)v29);
  outlined init with take of Transform?((uint64_t)v29, (uint64_t)v41, &demangling cache variable for type metadata for REPoseF?);
  float32x4_t v4 = 0uLL;
  if (v42)
  {
    char v5 = 1;
    float32x4_t v6 = 0uLL;
    float32x4_t v7 = 0uLL;
    float32x4_t v8 = 0uLL;
  }
  else
  {
    double v27 = v41[0];
    GeometricPin.pose(relativeTo:)(a1, (uint64_t)v30);
    outlined init with take of Transform?((uint64_t)v30, (uint64_t)v38, &demangling cache variable for type metadata for REPoseF?);
    if (v40) {
      goto LABEL_8;
    }
    float32x4_t v9 = v39;
    if (one-time initialization token for identity != -1)
    {
      float32x4_t v26 = v39;
      swift_once();
      float32x4_t v9 = v26;
    }
    *(double *)v10.i64  = specialized simd_float4x4.init(translation:rotation:scale:)(v27, v9, 1.0);
    simd_float4 v25 = v11;
    simd_float4 v28 = v10;
    simd_float4 v23 = v13;
    simd_float4 v24 = v12;
    GeometricPin.pose(relativeTo:)(a1, (uint64_t)v31);
    outlined init with take of Transform?((uint64_t)v31, (uint64_t)v36, &demangling cache variable for type metadata for REPoseF?);
    if ((v37 & 1) != 0
      || (double v20 = v36[0],
          GeometricPin.pose(relativeTo:)(a1, (uint64_t)v32),
          outlined init with take of Transform?((uint64_t)v32, (uint64_t)v33, &demangling cache variable for type metadata for REPoseF?), (v35 & 1) != 0))
    {
LABEL_8:
      char v5 = 1;
      float32x4_t v6 = 0uLL;
      float32x4_t v7 = 0uLL;
      float32x4_t v8 = 0uLL;
      float32x4_t v4 = 0uLL;
    }
    else
    {
      *(double *)v14.i64  = specialized simd_float4x4.init(translation:rotation:scale:)(v20, v34, 1.0);
      float32x4_t v18 = v14;
      float32x4_t v19 = v15;
      float32x4_t v21 = v16;
      float32x4_t v22 = v17;
      v43.columns[1]  = v25;
      v43.columns[0]  = v28;
      v43.columns[3]  = v23;
      v43.columns[2]  = v24;
      simd_float4x4 v44 = __invert_f4(v43);
      char v5 = 0;
      float32x4_t v4 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v44.columns[0].f32[0]), v19, *(float32x2_t *)v44.columns[0].f32, 1), v21, (float32x4_t)v44.columns[0], 2), v22, (float32x4_t)v44.columns[0], 3);
      float32x4_t v6 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v44.columns[1].f32[0]), v19, *(float32x2_t *)v44.columns[1].f32, 1), v21, (float32x4_t)v44.columns[1], 2), v22, (float32x4_t)v44.columns[1], 3);
      float32x4_t v7 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v44.columns[2].f32[0]), v19, *(float32x2_t *)v44.columns[2].f32, 1), v21, (float32x4_t)v44.columns[2], 2), v22, (float32x4_t)v44.columns[2], 3);
      float32x4_t v8 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v44.columns[3].f32[0]), v19, *(float32x2_t *)v44.columns[3].f32, 1), v21, (float32x4_t)v44.columns[3], 2), v22, (float32x4_t)v44.columns[3], 3);
    }
  }
  *a2  = v4;
  a2[1]  = v6;
  a2[2]  = v7;
  a2[3]  = v8;
  a2[4].i8[0]  = v5;
}

Swift::Int GeometricPin.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GeometricPin()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GeometricPin()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeometricPin()
{
  return Hasher._finalize()();
}

uint64_t HasTransform.align(_:to:)@<X0>(float32x4_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t result = swift_weakLoadStrong();
  float32x4_t v5 = 0uLL;
  if (result)
  {
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v7 = *(void *)(v2 + 16);
    uint64_t result = swift_release();
    if (v6 == v7)
    {
      uint64_t v12 = HasHierarchy.parent.getter();
      GeometricPin.alignment(to:relativeTo:)(v12, v26);
      float32x4_t v24 = v26[1];
      float32x4_t v25 = v26[0];
      float32x4_t v22 = v26[3];
      float32x4_t v23 = v26[2];
      char v8 = v27;
      swift_release();
      uint64_t result = outlined init with take of Transform?((uint64_t)v26, (uint64_t)&v28, &demangling cache variable for type metadata for simd_float4x4?);
      if ((v29 & 1) == 0)
      {
        double v13 = HasTransform.transform.getter();
        specialized simd_float4x4.init(translation:rotation:scale:)(v15, v14, *(float *)&v13);
        REMakeSRTFromMatrix();
        if (one-time initialization token for identity != -1)
        {
          __n128 v20 = v16;
          __n128 v21 = v17;
          __n128 v19 = v18;
          swift_once();
          __n128 v18 = v19;
          __n128 v16 = v20;
          __n128 v17 = v21;
        }
        uint64_t result = HasTransform.transform.setter(v16, v17, v18);
      }
      float32x4_t v9 = v24;
      float32x4_t v5 = v25;
      float32x4_t v11 = v22;
      float32x4_t v10 = v23;
    }
    else
    {
      char v8 = 1;
      float32x4_t v9 = 0uLL;
      float32x4_t v10 = 0uLL;
      float32x4_t v11 = 0uLL;
      float32x4_t v5 = 0uLL;
    }
  }
  else
  {
    char v8 = 1;
    float32x4_t v9 = 0uLL;
    float32x4_t v10 = 0uLL;
    float32x4_t v11 = 0uLL;
  }
  *a1  = v5;
  a1[1]  = v9;
  a1[2]  = v10;
  a1[3]  = v11;
  a1[4].i8[0]  = v8;
  return result;
}

BOOL specialized static GeometricPin.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
    outlined init with copy of GeometricPin(a1, (uint64_t)v42);
    outlined init with copy of GeometricPin(a2, (uint64_t)v39);
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined init with copy of GeometricPin(a1, (uint64_t)v42);
    outlined init with copy of GeometricPin(a2, (uint64_t)v39);
    if ((v5 & 1) == 0)
    {
      outlined destroy of GeometricPin((uint64_t)v39);
      outlined destroy of GeometricPin((uint64_t)v42);
LABEL_17:
      outlined init with copy of GeometricPin(a1, (uint64_t)v37);
      outlined init with copy of GeometricPin(a2, (uint64_t)v35);
      goto LABEL_18;
    }
  }
  uint64_t v6 = v41;
  if (!v44)
  {
    swift_bridgeObjectRetain();
    outlined destroy of GeometricPin((uint64_t)v39);
    outlined destroy of GeometricPin((uint64_t)v42);
    if (!v6) {
      goto LABEL_14;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (!v41)
  {
    swift_bridgeObjectRetain();
    outlined destroy of GeometricPin((uint64_t)v39);
    outlined destroy of GeometricPin((uint64_t)v42);
    goto LABEL_16;
  }
  if (v43 == v40 && v44 == v41)
  {
    swift_bridgeObjectRetain();
    outlined destroy of GeometricPin((uint64_t)v39);
    outlined destroy of GeometricPin((uint64_t)v42);
    swift_bridgeObjectRelease();
LABEL_14:
    outlined init with copy of GeometricPin(a1, (uint64_t)v37);
    outlined init with copy of GeometricPin(a2, (uint64_t)v35);
    goto LABEL_25;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  outlined destroy of GeometricPin((uint64_t)v39);
  outlined destroy of GeometricPin((uint64_t)v42);
  swift_bridgeObjectRelease();
  outlined init with copy of GeometricPin(a1, (uint64_t)v37);
  outlined init with copy of GeometricPin(a2, (uint64_t)v35);
  if ((v8 & 1) == 0)
  {
LABEL_18:
    outlined destroy of GeometricPin((uint64_t)v35);
    outlined destroy of GeometricPin((uint64_t)v37);
LABEL_19:
    outlined init with copy of GeometricPin(a1, (uint64_t)v33);
    outlined init with copy of GeometricPin(a2, (uint64_t)v31);
    goto LABEL_20;
  }
LABEL_25:
  long long v23 = v38;
  outlined destroy of GeometricPin((uint64_t)v37);
  long long v21 = v36;
  outlined destroy of GeometricPin((uint64_t)v35);
  uint64_t v9 = 0;
  while (1)
  {
    long long v27 = v23;
    float v11 = *(float *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    long long v28 = v21;
    float v12 = *(float *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    BOOL v10 = v11 == v12;
    if (v9 == 2) {
      break;
    }
    while (1)
    {
      ++v9;
      if (v10) {
        break;
      }
      if (v9 == 2) {
        goto LABEL_19;
      }
      BOOL v10 = 0;
    }
  }
  outlined init with copy of GeometricPin(a1, (uint64_t)v33);
  outlined init with copy of GeometricPin(a2, (uint64_t)v31);
  if (v11 != v12)
  {
LABEL_20:
    outlined destroy of GeometricPin((uint64_t)v31);
    outlined destroy of GeometricPin((uint64_t)v33);
LABEL_21:
    outlined init with copy of GeometricPin(a1, (uint64_t)v30);
    outlined init with copy of GeometricPin(a2, (uint64_t)v29);
LABEL_22:
    outlined destroy of GeometricPin((uint64_t)v29);
    outlined destroy of GeometricPin((uint64_t)v30);
    return 0;
  }
  long long v24 = v34;
  outlined destroy of GeometricPin((uint64_t)v33);
  long long v22 = v32;
  outlined destroy of GeometricPin((uint64_t)v31);
  uint64_t v13 = 0;
  BOOL v14 = 1;
  while (1)
  {
    while (!v14)
    {
      if (v13 == 3) {
        goto LABEL_21;
      }
      BOOL v14 = 0;
      ++v13;
    }
    long long v25 = v24;
    float v15 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
    long long v26 = v22;
    float v16 = *(float *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
    BOOL v14 = v15 == v16;
    if (v13 == 3) {
      break;
    }
    ++v13;
  }
  outlined init with copy of GeometricPin(a1, (uint64_t)v30);
  outlined init with copy of GeometricPin(a2, (uint64_t)v29);
  if (v15 != v16) {
    goto LABEL_22;
  }
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v18 = swift_weakLoadStrong();
  outlined destroy of GeometricPin((uint64_t)v29);
  outlined destroy of GeometricPin((uint64_t)v30);
  if (Strong)
  {
    if (v18)
    {
      uint64_t v19 = *(void *)(Strong + 16);
      uint64_t v20 = *(void *)(v18 + 16);
      swift_release();
      swift_release();
      return v19 == v20;
    }
LABEL_43:
    swift_release();
    return 0;
  }
  if (v18) {
    goto LABEL_43;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type GeometricPin and conformance GeometricPin()
{
  unint64_t result = lazy protocol witness table cache variable for type GeometricPin and conformance GeometricPin;
  if (!lazy protocol witness table cache variable for type GeometricPin and conformance GeometricPin)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometricPin and conformance GeometricPin);
  }
  return result;
}

uint64_t sub_2280FA210@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  outlined init with copy of GeometricPin(a1, (uint64_t)v5);
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t result = outlined destroy of GeometricPin((uint64_t)v5);
  *a2  = Strong;
  return result;
}

uint64_t sub_2280FA258()
{
  return swift_weakAssign();
}

__n128 sub_2280FA268@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[3];
  *a2  = result;
  return result;
}

__n128 sub_2280FA274(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[3]  = *a1;
  return result;
}

__n128 sub_2280FA280@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[4];
  *a2  = result;
  return result;
}

__n128 sub_2280FA28C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[4]  = *a1;
  return result;
}

uint64_t destroy for GeometricPin()
{
  swift_weakDestroy();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GeometricPin(uint64_t a1, uint64_t a2)
{
  swift_weakCopyInit();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GeometricPin(uint64_t a1, uint64_t a2)
{
  *(void *)(swift_weakCopyAssign() + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for GeometricPin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_weakTakeInit();
  *(_OWORD *)(v3 + 8)  = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 24)  = *(_OWORD *)(a2 + 24);
  __n128 result = *(__n128 *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(v3 + 48)  = result;
  *(_OWORD *)(v3 + 64)  = v5;
  return result;
}

uint64_t assignWithTake for GeometricPin(uint64_t a1, uint64_t a2)
{
  swift_weakTakeAssign();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v5;
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for GeometricPin(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeometricPin(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72)  = 0;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeometricPin()
{
  return &type metadata for GeometricPin;
}

__n128 __RKScenePhysics.gravity.getter()
{
  return *(__n128 *)v0;
}

void __RKScenePhysics.gravity.setter(__n128 a1)
{
  __n128 *v1 = a1;
}

uint64_t (*__RKScenePhysics.gravity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKScenePhysics.adaptiveTimeStep.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t __RKScenePhysics.adaptiveTimeStep.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16)  = result;
  return result;
}

uint64_t (*__RKScenePhysics.adaptiveTimeStep.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKScenePhysics.Registration.componentType.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t __RKScenePhysics.Registration.init()()
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  REStructBuilderCreate();
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberDataTypeWithTag(),
        REStructBuilderAddMemberDataTypeWithTag(),
        (uint64_t v1 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_6:
    REStructBuilderDestroy();
    type metadata accessor for __RKScenePhysics.Registration();
    swift_deallocPartialClassInstance();
    return v0;
  }
  *(void *)(v0 + 16)  = v1;
  long long v4 = xmmword_228337F20;
  int v5 = 1;
  long long v6 = &v4;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v10 = 0;
  uint64_t v11 = v1;
  uint64_t v12 = 0;
  uint64_t v2 = RECustomComponentTypeCreate();
  if (!v2)
  {
    lazy protocol witness table accessor for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  *(void *)(v0 + 24)  = v2;
  REStructBuilderDestroy();
  return v0;
}

uint64_t __RKScenePhysics.Registration.deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __RKScenePhysics.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();

  return swift_deallocClassInstance();
}

uint64_t static __RKScenePhysics.registration.getter()
{
  return swift_retain();
}

uint64_t static __RKScenePhysics.registration.setter(void *a1)
{
  static __RKScenePhysics.registration  = a1;
  return swift_release();
}

uint64_t (*static __RKScenePhysics.registration.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t Scene.getOrAddInternalComponentPointer()()
{
  swift_beginAccess();
  if (!static __RKScenePhysics.registration) {
    return 0;
  }
  uint64_t v0 = *((void *)static __RKScenePhysics.registration + 3);
  RESceneGetComponentsOfCustomType();
  if (v1 >= 1) {
    return RECustomComponentGetObject();
  }
  swift_retain();
  if (!Scene.AnchorCollection.endIndex.getter())
  {
    swift_release();
    REEntityCreate();
    RESceneAddEntity();
    swift_retain();
    if (!Scene.AnchorCollection.endIndex.getter())
    {
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
  }
  uint64_t v3 = Scene.AnchorCollection.subscript.getter(0);
  swift_release();
  uint64_t v4 = *(void *)(v3 + 16);
  swift_release();
  uint64_t result = MEMORY[0x22A68E460](v4, v0);
  if (result) {
    return RECustomComponentGetObject();
  }
  return result;
}

uint64_t Scene.__gravity.getter()
{
  swift_beginAccess();
  if (!static __RKScenePhysics.registration) {
    return 0;
  }
  RESceneGetComponentsOfCustomType();
  if (!v0) {
    return 0;
  }
  uint64_t result = RECustomComponentGetObject();
  if (result) {
    return *(void *)result;
  }
  return result;
}

void *Scene.__gravity.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = (void *)swift_beginAccess();
  if (static __RKScenePhysics.registration)
  {
    if (a3)
    {
      uint64_t result = (void *)REEntityGetCustomComponent();
      if (result) {
        return (void *)REEntityRemoveComponentByClass();
      }
    }
    else
    {
      uint64_t result = (void *)Scene.getOrAddInternalComponentPointer()();
      if (result)
      {
        *uint64_t result = a1;
        result[1]  = a2;
      }
    }
  }
  return result;
}

void (*Scene.__gravity.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1  = v3;
  _DWORD v3[6] = v1;
  swift_beginAccess();
  if (static __RKScenePhysics.registration
    && (RESceneGetComponentsOfCustomType(), v4)
    && (uint64_t Object = (uint64_t *)RECustomComponentGetObject()) != 0)
  {
    char v6 = 0;
    uint64_t v7 = *Object;
    uint64_t v8 = Object[1];
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    char v6 = 1;
  }
  *uint64_t v3 = v7;
  v3[1]  = v8;
  *((unsigned char *)v3 + 16)  = v6;
  return Scene.__gravity.modify;
}

void Scene.__gravity.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  if (static __RKScenePhysics.registration)
  {
    if (v1[2])
    {
      if (REEntityGetCustomComponent()) {
        REEntityRemoveComponentByClass();
      }
    }
    else
    {
      uint64_t v4 = (void *)Scene.getOrAddInternalComponentPointer()();
      if (v4)
      {
        *uint64_t v4 = v2;
        v4[1]  = v3;
      }
    }
  }

  free(v1);
}

uint64_t Scene.__adaptiveTimeStep.getter()
{
  swift_beginAccess();
  if (static __RKScenePhysics.registration
    && (RESceneGetComponentsOfCustomType(), v0)
    && (uint64_t Object = RECustomComponentGetObject()) != 0)
  {
    return *(unsigned __int8 *)(Object + 16);
  }
  else
  {
    return 2;
  }
}

uint64_t Scene.__adaptiveTimeStep.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  if (static __RKScenePhysics.registration)
  {
    if (a1 == 2)
    {
      uint64_t result = REEntityGetCustomComponent();
      if (result) {
        return REEntityRemoveComponentByClass();
      }
    }
    else
    {
      uint64_t result = Scene.getOrAddInternalComponentPointer()();
      if (result) {
        *(unsigned char *)(result + 16)  = a1 & 1;
      }
    }
  }
  return result;
}

void (*Scene.__adaptiveTimeStep.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = (char *)malloc(0x28uLL);
  *a1  = v3;
  uint64_t v4 = v3 + 32;
  *((void *)v3 + 3)  = v1;
  swift_beginAccess();
  if (static __RKScenePhysics.registration
    && (RESceneGetComponentsOfCustomType(), v5)
    && (uint64_t Object = RECustomComponentGetObject()) != 0)
  {
    char v7 = *(unsigned char *)(Object + 16);
  }
  else
  {
    char v7 = 2;
  }
  *uint64_t v4 = v7;
  return Scene.__adaptiveTimeStep.modify;
}

void Scene.__adaptiveTimeStep.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int v2 = *(unsigned __int8 *)(*(void *)a1 + 32);
  if (static __RKScenePhysics.registration)
  {
    if (v2 == 2)
    {
      if (REEntityGetCustomComponent()) {
        REEntityRemoveComponentByClass();
      }
    }
    else
    {
      uint64_t v3 = Scene.getOrAddInternalComponentPointer()();
      if (v3) {
        *(unsigned char *)(v3 + 16)  = v2 & 1;
      }
    }
  }

  free(v1);
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __RKScenePhysics()
{
  return &protocol witness table for __RKScenePhysics.Registration;
}

uint64_t sub_2280FAE14@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = Scene.__gravity.getter();
  *(void *)a1  = result;
  *(void *)(a1 + 8)  = v3;
  *(unsigned char *)(a1 + 16)  = v4 & 1;
  return result;
}

void *sub_2280FAE48(uint64_t a1)
{
  return Scene.__gravity.setter(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_2280FAE7C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Scene.__adaptiveTimeStep.getter();
  *a1  = result;
  return result;
}

uint64_t sub_2280FAEA8(char *a1)
{
  return Scene.__adaptiveTimeStep.setter(*a1);
}

uint64_t getEnumTagSinglePayload for __RKScenePhysics(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKScenePhysics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16)  = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16)  = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKScenePhysics()
{
  return &type metadata for __RKScenePhysics;
}

uint64_t type metadata accessor for __RKScenePhysics.Registration()
{
  return self;
}

uint64_t method lookup function for __RKScenePhysics.Registration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKScenePhysics.Registration);
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3) {
    return v5;
  }
  return result;
}

void *specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, void *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2  = v5;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for __RKScenePhysics.Registration.RegistrationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2280FB128);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKScenePhysics.Registration.RegistrationError()
{
  return &type metadata for __RKScenePhysics.Registration.RegistrationError;
}

uint64_t AudioPlaybackController._proto_fade(to:duration:)()
{
  Duration.components.getter();
  Duration.components.getter();
  REAudioPlayerComponentFadeTokenToGainWithDuration();

  return RENetworkMarkComponentDirty();
}

void CharacterControllerStateComponent.init()(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(void *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 16)  = 0;
}

__n128 CharacterControllerStateComponent.velocity.getter()
{
  return *(__n128 *)v0;
}

uint64_t CharacterControllerStateComponent.isOnGround.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t static CharacterControllerStateComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  REComponentGetEntity();
  RECharacterControllerComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RECharacterControllerComponentGetVelocity();
    long long v6 = v2;
    uint64_t result = RECharacterControllerComponentOnGround();
    long long v4 = v6;
  }
  else
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    uint64_t v5 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t result = 0;
    long long v4 = 0uLL;
  }
  *(_OWORD *)a1  = v4;
  *(unsigned char *)(a1 + 16)  = result;
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance CharacterControllerStateComponent(_DWORD *a1@<X8>)
{
  *a1  = 2102;
}

void static CharacterControllerStateComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1  = 2102;
}

uint64_t CharacterControllerStateComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  long long v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0]  = *(_OWORD *)v0;
  v14[1]  = v14[0];
  char v8 = *(unsigned char *)(v0 + 16);
  char v15 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16)  = xmmword_22831E350;
  *(void *)(v9 + 32)  = 0x756F72476E4F7369;
  *(void *)(v9 + 40)  = 0xEA0000000000646ELL;
  uint64_t v10 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v9 + 48)  = v8;
  *(void *)(v9 + 72)  = v10;
  *(void *)(v9 + 80)  = 0x797469636F6C6576;
  *(void *)(v9 + 88)  = 0xE800000000000000;
  *(void *)(v9 + 120)  = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  uint64_t v11 = swift_allocObject();
  *(void *)(v9 + 96)  = v11;
  *(_OWORD *)(v11 + 16)  = v14[0];
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_2280FB574()
{
  return MEMORY[0x270FA0238](v0, 32, 15);
}

ValueMetadata *type metadata accessor for CharacterControllerStateComponent()
{
  return &type metadata for CharacterControllerStateComponent;
}

id __RCInteractionsController.__deallocating_deinit()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for __RCInteractionsController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall __RCEntity.invokeCustomTrigger(named:overrides:)(Swift::String named, Swift::OpaquePointer_optional overrides)
{
  unint64_t rawValue = overrides.value._rawValue;
  object  = named._object;
  countAndFlagsBits  = named._countAndFlagsBits;
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (SceneNullable)
  {
    uint64_t v6 = SceneNullable;
    id v7 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v7)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v6);
    }
    Scene.__interactionService.getter();
    uint64_t v9 = v8;
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, void *, void, void *, uint64_t, uint64_t))(v9 + 48))(countAndFlagsBits, object, 0, rawValue, ObjectType, v9);
    swift_unknownObjectRelease();
  }
}

uint64_t __RCEntity.registerCustomAction(named:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = REEntityGetSceneNullable();
  if (result)
  {
    uint64_t v9 = result;
    id v10 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v10)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v9);
    }
    Scene.__interactionService.getter();
    uint64_t v12 = v11;
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, a2, a3, a4, ObjectType, v12);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t __RCEntity.__allocating_init()()
{
  return Entity.init()();
}

uint64_t __RCEntity.__allocating_init(_coreEntity:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16)  = *a1;
  MEMORY[0x22A68E750]();
  return v2;
}

uint64_t __RCEntity.init(_coreEntity:)(void *a1)
{
  *(void *)(v1 + 16)  = *a1;
  MEMORY[0x22A68E750]();
  return v1;
}

uint64_t __RCEntity.deinit()
{
  MEMORY[0x22A68E750](*(void *)(v0 + 16), 0);
  return v0;
}

uint64_t __RCEntity.__deallocating_deinit()
{
  MEMORY[0x22A68E750](*(void *)(v0 + 16), 0);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RCInteractionsController()
{
  return self;
}

uint64_t type metadata accessor for __RCEntity()
{
  return self;
}

uint64_t method lookup function for __RCEntity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RCEntity);
}

uint64_t dispatch thunk of __RCEntity.invokeCustomTrigger(named:overrides:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of __RCEntity.registerCustomAction(named:action:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t sub_2280FBB4C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString) -> ()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = (id)MEMORY[0x22A688A50]();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t specialized static __RCInteractionsController.__invokeCustomTrigger(named:onEntityNamed:inSceneNamed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = specialized static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v17);
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized Sequence.first(where:)(v11, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (v12)
  {
    swift_retain();
    Scene.__interactionService.getter();
    uint64_t v15 = v14;
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v15 + 48))(a1, a2, 0, 0, ObjectType, v15);
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t specialized static __RCInteractionsController.__registerCustomAction(named:inSceneNamed:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = specialized static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12, (uint64_t)v23);
  uint64_t v13 = v24;
  uint64_t v14 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  swift_bridgeObjectRetain();
  uint64_t v16 = specialized Sequence.first(where:)(v15, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  if (v16)
  {
    swift_retain();
    Scene.__interactionService.getter();
    uint64_t v19 = v18;
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16)  = a5;
    *(void *)(v21 + 24)  = a6;
    long long v22 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v19 + 56);
    swift_retain();
    v22(a1, a2, partial apply for closure #2 in static __RCInteractionsController.__registerCustomAction(named:inSceneNamed:action:), v21, ObjectType, v19);
    swift_release();
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_2280FC038()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in static __RCInteractionsController.__registerCustomAction(named:inSceneNamed:action:)()
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 16))(0x614E797469746E45, 0xEA0000000000656DLL);
}

uint64_t MaterialDefinitionResource.deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t MaterialDefinitionResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t MaterialDefinitionResource.__allocating_init(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for MaterialDefinitionResource();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16)  = v1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t type metadata accessor for MaterialDefinitionResource()
{
  return self;
}

uint64_t MaterialDefinitionResource.BuildParameters.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialDefinitionResource.BuildParameters.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1]  = a2;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.overrideMaterial.getter()
{
  return swift_retain();
}

uint64_t MaterialDefinitionResource.BuildParameters.overrideMaterial.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16)  = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.overrideMaterial.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.techniqueMapping.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.techniqueMapping.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24)  = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.techniqueMapping.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.library.getter()
{
  return swift_retain();
}

uint64_t MaterialDefinitionResource.BuildParameters.library.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 32)  = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.library.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t MaterialDefinitionResource.BuildParameters.DebugMapping.init(name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *a3  = a1;
  a3[1]  = a2;
  a3[2]  = result;
  return result;
}

uint64_t MaterialDefinitionResource.BuildParameters.debugMappings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.debugMappings.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40)  = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.debugMappings.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1]  = a2;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.library.getter()
{
  return swift_retain();
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.library.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16)  = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.library.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.debugMapping.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.debugMapping.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24)  = a1;
  *(void *)(v2 + 32)  = a2;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.debugMapping.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.ShaderData.library.getter()
{
  return swift_retain();
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.ShaderData.library.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.ShaderData.library.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.ShaderData.entry.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.ShaderData.entry.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8)  = a1;
  *(void *)(v2 + 16)  = a2;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.ShaderData.entry.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.ShaderData.init(entry:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3  = 0;
  a3[1]  = result;
  a3[2]  = a2;
  return result;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.vertexShader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *(_OWORD *)a1  = *(_OWORD *)(v1 + 40);
  *(void *)(a1 + 16)  = v2;
  swift_retain();

  return swift_bridgeObjectRetain();
}

__n128 MaterialDefinitionResource.BuildParameters.Technique.vertexShader.setter(__n128 *a1)
{
  __n128 v4 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  swift_release();
  __n128 result = v4;
  *(__n128 *)(v1 + 40)  = v4;
  *(void *)(v1 + 56)  = v2;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.vertexShader.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.pixelShader.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[8];
  uint64_t v3 = v1[9];
  uint64_t v4 = v1[10];
  *a1  = v2;
  a1[1]  = v3;
  a1[2]  = v4;
  return outlined copy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(v2, v3, v4);
}

uint64_t outlined copy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 MaterialDefinitionResource.BuildParameters.Technique.pixelShader.setter(__n128 *a1)
{
  __n128 v4 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  outlined consume of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(v1[8], v1[9], v1[10]);
  __n128 result = v4;
  *((__n128 *)v1 + 4)  = v4;
  v1[10]  = v2;
  return result;
}

uint64_t outlined consume of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.pixelShader.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.alphaBlend.getter()
{
  return *v0;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.alphaBlend.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.State.alphaBlend.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.writeDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.writeDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1)  = result;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.State.writeDepth.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.depthCompareFunction.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.depthCompareFunction.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8)  = result;
  *(unsigned char *)(v2 + 16)  = a2 & 1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.State.depthCompareFunction.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.cullMode.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.cullMode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 24)  = result;
  *(unsigned char *)(v2 + 32)  = a2 & 1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.State.cullMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.colorWriteMask.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.colorWriteMask.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 40)  = result;
  *(unsigned char *)(v2 + 48)  = a2 & 1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.State.colorWriteMask.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MaterialDefinitionResource.BuildParameters.Technique.State.init()(uint64_t a1@<X8>)
{
  *(_WORD *)a1  = 514;
  *(void *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 16)  = 1;
  *(void *)(a1 + 24)  = 0;
  *(unsigned char *)(a1 + 32)  = 1;
  *(void *)(a1 + 40)  = 0;
  *(unsigned char *)(a1 + 48)  = 1;
}

void MaterialDefinitionResource.BuildParameters.Technique.state.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 96);
  char v3 = *(unsigned char *)(v1 + 104);
  uint64_t v4 = *(void *)(v1 + 112);
  char v5 = *(unsigned char *)(v1 + 120);
  uint64_t v6 = *(void *)(v1 + 128);
  char v7 = *(unsigned char *)(v1 + 136);
  *(_WORD *)a1  = *(_WORD *)(v1 + 88);
  *(void *)(a1 + 8)  = v2;
  *(unsigned char *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  *(unsigned char *)(a1 + 32)  = v5;
  *(void *)(a1 + 40)  = v6;
  *(unsigned char *)(a1 + 48)  = v7;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.state.setter(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  char v3 = *(unsigned char *)(result + 16);
  uint64_t v4 = *(void *)(result + 24);
  char v5 = *(unsigned char *)(result + 32);
  uint64_t v6 = *(void *)(result + 40);
  char v7 = *(unsigned char *)(result + 48);
  *(_WORD *)(v1 + 88)  = *(_WORD *)result;
  *(void *)(v1 + 96)  = v2;
  *(unsigned char *)(v1 + 104)  = v3;
  *(void *)(v1 + 112)  = v4;
  *(unsigned char *)(v1 + 120)  = v5;
  *(void *)(v1 + 128)  = v6;
  *(unsigned char *)(v1 + 136)  = v7;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.state.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.functionConstants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.functionConstants.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 144)  = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.functionConstants.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.variations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.variations.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 152)  = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.variations.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.defaultVariations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.defaultVariations.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 160)  = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.defaultVariations.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MaterialDefinitionResource.BuildParameters.Technique.init(name:vertexShader:fragmentShader:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *((void *)a3 + 2);
  __n128 v12 = *a4;
  long long v13 = *a3;
  unint64_t v9 = a4[1].n128_u64[0];
  *(void *)(a5 + 24)  = 0;
  *(void *)(a5 + 32)  = 0;
  *(void *)(a5 + 16)  = 0;
  *(_WORD *)(a5 + 88)  = 514;
  *(void *)(a5 + 96)  = 0;
  *(unsigned char *)(a5 + 104)  = 1;
  *(void *)(a5 + 112)  = 0;
  *(unsigned char *)(a5 + 120)  = 1;
  *(void *)(a5 + 128)  = 0;
  *(unsigned char *)(a5 + 136)  = 1;
  uint64_t v10 = MEMORY[0x263F8EE78];
  *(void *)(a5 + 144)  = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(a5 + 152)  = specialized Dictionary.init(dictionaryLiteral:)(v10);
  *(void *)(a5 + 160)  = v10;
  *(void *)a5  = a1;
  *(void *)(a5 + 8)  = a2;
  *(_OWORD *)(a5 + 40)  = v13;
  *(void *)(a5 + 56)  = v8;
  __n128 result = v12;
  *(__n128 *)(a5 + 64)  = v12;
  *(void *)(a5 + 80)  = v9;
  return result;
}

uint64_t MaterialDefinitionResource.BuildParameters.techniques.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.techniques.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48)  = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.techniques.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t MaterialDefinitionResource.BuildParameters.init()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *a1  = 0;
  a1[1]  = 0;
  a1[2]  = 0;
  a1[3]  = result;
  a1[4]  = 0;
  a1[5]  = v2;
  a1[6]  = v2;
  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance MaterialDefinitionResource.LoadError()
{
  return 0xD000000000000024;
}

uint64_t static MaterialDefinitionResource.load(_:services:)(long long *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 4);
  long long v4 = a1[1];
  long long v10 = *a1;
  long long v11 = v4;
  uint64_t v12 = v3;
  long long v13 = *(long long *)((char *)a1 + 40);
  uint64_t v5 = specialized static MaterialDefinitionResource.createBuilder(_:)(&v10);
  swift_beginAccess();
  outlined init with copy of __REAssetService(a2 + 120, (uint64_t)&v10);
  uint64_t v6 = *((void *)&v11 + 1);
  uint64_t v7 = v12;
  __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  uint64_t v8 = REAssetManagerMaterialDefinitionAssetBuilderBuild();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  RERelease();
  REAssetHandleLoadNow();
  if (REAssetHandleLoadFailed())
  {
    lazy protocol witness table accessor for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    type metadata accessor for MaterialDefinitionResource();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16)  = v8;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  return v5;
}

uint64_t static MaterialDefinitionResource.loadAsync(_:services:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a2 + 120;
  long long v31 = *(_OWORD *)(a1 + 5);
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)v32);
  outlined init with copy of __REAssetService(v7, (uint64_t)v36);
  uint64_t v8 = v37;
  uint64_t v9 = v38;
  __swift_project_boxed_opaque_existential_1(v36, v37);
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(v8, v9);
  uint64_t v11 = v33;
  uint64_t v12 = v34;
  __swift_project_boxed_opaque_existential_1(v32, v33);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  Request  = type metadata accessor for __AssetLoadRequest();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16)  = AssetRequest;
  if (v10) {
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  }
  uint64_t v16 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  *(void *)(v16 + 16)  = v15;
  v32[0]  = v2;
  v32[1]  = v3;
  v32[2]  = v4;
  uint64_t v33 = v5;
  uint64_t v34 = v6;
  long long v35 = v31;
  specialized static MaterialDefinitionResource.createBuilder(_:)(v32);
  outlined init with copy of __REAssetService(v7, (uint64_t)v32);
  uint64_t v17 = v33;
  uint64_t v18 = v34;
  __swift_project_boxed_opaque_existential_1(v32, v33);
  (*(void (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18);
  uint64_t v19 = REAssetManagerMaterialDefinitionAssetBuilderBuild();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  RERelease();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16)  = v16;
  *(void *)(v20 + 24)  = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16)  = xmmword_22830EC60;
  swift_beginAccess();
  uint64_t v22 = *(void *)(v16 + 16);
  *(void *)(v21 + 56)  = Request;
  *(void *)(v21 + 32)  = v22;
  type metadata accessor for LoadRequestDependencies();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16)  = MEMORY[0x263F8EE78];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v24 = swift_allocObject();
  *(_DWORD *)(v24 + 16)  = 0;
  *(void *)(v23 + 24)  = v24;
  swift_beginAccess();
  *(void *)(v23 + 16)  = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<MaterialDefinitionResource>);
  uint64_t v25 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<MaterialDefinitionResource, Error>?>);
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = swift_allocObject();
  *(_DWORD *)(v27 + 16)  = 0;
  *(void *)(v26 + 16)  = v27;
  *(void *)(v26 + 24)  = 0;
  *(unsigned char *)(v26 + 32)  = -1;
  *(void *)(v25 + 16)  = v26;
  long long v28 = (void *)swift_allocObject();
  v28[2]  = partial apply for closure #1 in static MaterialDefinitionResource.loadAsync(_:services:);
  void v28[3] = v20;
  v28[4]  = v26;
  v28[5]  = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<MaterialDefinitionResource, Error>);
  swift_allocObject();
  swift_retain();
  uint64_t v29 = Future.init(_:)();
  swift_release();
  *(void *)(v25 + 24)  = v29;
  return v25;
}

uint64_t closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16)  = a1;
  *(void *)(v8 + 24)  = a2;
  swift_beginAccess();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2]  = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v9[3]  = v8;
  v9[4]  = a4;
  v9[5]  = a3;
  aBlock[4]  = partial apply for closure #1 in closure #1 in static MaterialDefinitionResource.loadAsync(_:services:);
  aBlock[5]  = v9;
  aBlock[0]  = MEMORY[0x263EF8330];
  aBlock[1]  = 1107296256;
  aBlock[2]  = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3]  = &block_descriptor_27;
  char v10 = _Block_copy(aBlock);
  uint64_t v11 = _Block_copy(v10);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16)  = v11;
  v15[4]  = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v15[5]  = v12;
  v15[0]  = MEMORY[0x263EF8330];
  v15[1]  = 1107296256;
  v15[2]  = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v15[3]  = &block_descriptor_33_0;
  long long v13 = _Block_copy(v15);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v13);
  swift_release();
  _Block_release(v10);
  swift_release();
  swift_beginAccess();
  return REAssetLoadRequestAddAsset();
}

void closure #1 in closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(char a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    type metadata accessor for MaterialDefinitionResource();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16)  = a4;
    RERetain();
    REAssetSetSwiftObject();
    a2(v6, 0);
    swift_release();
    swift_beginAccess();
    aBlock[4]  = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    aBlock[5]  = 0;
    aBlock[0]  = MEMORY[0x263EF8330];
    aBlock[1]  = 1107296256;
    aBlock[2]  = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    aBlock[3]  = &block_descriptor_36;
    uint64_t v7 = _Block_copy(aBlock);
    uint64_t v8 = _Block_copy(v7);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16)  = v8;
    void v12[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    v12[5]  = v9;
    v12[0]  = MEMORY[0x263EF8330];
    v12[1]  = 1107296256;
    void v12[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v12[3]  = &block_descriptor_43_1;
    char v10 = _Block_copy(v12);
    swift_retain();
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v10);
    swift_release();
    _Block_release(v7);
  }
  else
  {
    lazy protocol witness table accessor for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError();
    uint64_t v11 = (void *)swift_allocError();
    a2((uint64_t)v11, 1);
  }
}

uint64_t MaterialDefinitionResource.update(from:services:)(long long *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 4);
  long long v4 = a1[1];
  long long v8 = *a1;
  long long v9 = v4;
  uint64_t v10 = v3;
  long long v11 = *(long long *)((char *)a1 + 40);
  specialized static MaterialDefinitionResource.createBuilder(_:)(&v8);
  swift_beginAccess();
  outlined init with copy of __REAssetService(a2 + 120, (uint64_t)&v8);
  uint64_t v5 = *((void *)&v9 + 1);
  uint64_t v6 = v10;
  __swift_project_boxed_opaque_existential_1(&v8, *((uint64_t *)&v9 + 1));
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  LOBYTE(a2)  = REAssetManagerMaterialDefinitionAssetBuilderUpdateExistingAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
  if ((a2 & 1) == 0)
  {
    lazy protocol witness table accessor for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError();
    swift_allocError();
    swift_willThrow();
  }
  return RERelease();
}

uint64_t MaterialDefinitionResource.udpate(from:services:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 16);
  v5[0]  = *(_OWORD *)a1;
  v5[1]  = v3;
  uint64_t v6 = v2;
  long long v7 = *(_OWORD *)(a1 + 40);
  return MaterialDefinitionResource.update(from:services:)(v5, a2);
}

void MaterialDefinitionResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1  = 3;
}

uint64_t MaterialDefinitionResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t specialized MaterialDefinitionResource.__allocating_init(path:)(uint64_t a1, void *a2)
{
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v12);
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  __swift_project_boxed_opaque_existential_1(&v12, v14);
  long long v7 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
  swift_retain();
  v7(v5, v6);
  String.utf8CString.getter();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  if (AssetHandle)
  {
    swift_bridgeObjectRelease();
    REAssetHandleLoadNow();
    type metadata accessor for MaterialDefinitionResource();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16)  = AssetHandle;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    swift_release();
    return v9;
  }
  else
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    unint64_t v12 = 0xD000000000000024;
    unint64_t v13 = 0x8000000228359300;
    v11._countAndFlagsBits  = a1;
    v11._object  = a2;
    String.append(_:)(v11);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized static MaterialDefinitionResource.createBuilder(_:)(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v71 = a1[6];
  uint64_t v4 = REMaterialDefinitionAssetBuilderCreate();
  if (v1)
  {
    String.utf8CString.getter();
    REMaterialDefinitionAssetBuilderSetName();
    swift_release();
  }
  uint64_t v78 = v3;
  v80  = v4;
  REMaterialDefinitionAssetBuilderSetOverrideMaterial();
  uint64_t v5 = v2 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(v2 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      v8 &= v8 - 1;
      goto LABEL_7;
    }
    int64_t v12 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_126;
    }
    uint64_t v13 = v4;
    if (v12 >= v9) {
      goto LABEL_23;
    }
    uint64_t v14 = *(void *)(v5 + 8 * v12);
    ++v11;
    if (!v14)
    {
      int64_t v11 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_23;
      }
      uint64_t v14 = *(void *)(v5 + 8 * v11);
      if (!v14)
      {
        int64_t v11 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_23;
        }
        uint64_t v14 = *(void *)(v5 + 8 * v11);
        if (!v14) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v8 = (v14 - 1) & v14;
LABEL_7:
    String.utf8CString.getter();
    String.utf8CString.getter();
    REMaterialDefinitionAssetBuilderSetTechniqueMapping();
    swift_release();
    uint64_t result = swift_release();
  }
  int64_t v15 = v12 + 3;
  if (v15 >= v9) {
    goto LABEL_23;
  }
  uint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v11 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      goto LABEL_129;
    }
    if (v11 >= v9) {
      break;
    }
    uint64_t v14 = *(void *)(v5 + 8 * v11);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_23:
  swift_release();
  uint64_t v16 = v78;
  REMaterialDefinitionAssetBuilderSetLibrary();
  uint64_t v77 = *(void *)(v78 + 16);
  if (!v77) {
    goto LABEL_49;
  }
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v17 = 0;
  while (2)
  {
    if (v17 >= *(void *)(v16 + 16)) {
      goto LABEL_127;
    }
    uint64_t v18 = *(void *)(v78 + 32 + 24 * v17 + 16);
    v81  = v17 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    REMaterialDefinitionAssetBuilderAddDebugMapping();
    String.utf8CString.getter();
    REMaterialDefinitionAssetBuilderSetDebugMappingName();
    swift_release();
    uint64_t v20 = v18 + 64;
    uint64_t v19 = *(void *)(v18 + 64);
    uint64_t v21 = 1 << *(unsigned char *)(v18 + 32);
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v22 = 0;
    if (v21 < 64) {
      uint64_t v23 = ~(-1 << v21);
    }
    else {
      uint64_t v23 = -1;
    }
    uint64_t v24 = v23 & v19;
    int64_t v25 = (unint64_t)(v21 + 63) >> 6;
    while (2)
    {
      if (v24)
      {
        v24 &= v24 - 1;
LABEL_32:
        String.utf8CString.getter();
        swift_bridgeObjectRetain();
        REMaterialDefinitionAssetBuilderSetDebugMappingEntry();
        swift_bridgeObjectRelease();
        uint64_t result = swift_release();
        continue;
      }
      break;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    if (v26 >= v25) {
      goto LABEL_25;
    }
    uint64_t v27 = *(void *)(v20 + 8 * v26);
    ++v22;
    if (v27) {
      goto LABEL_47;
    }
    int64_t v22 = v26 + 1;
    if (v26 + 1 >= v25) {
      goto LABEL_25;
    }
    uint64_t v27 = *(void *)(v20 + 8 * v22);
    if (v27) {
      goto LABEL_47;
    }
    int64_t v22 = v26 + 2;
    if (v26 + 2 >= v25) {
      goto LABEL_25;
    }
    uint64_t v27 = *(void *)(v20 + 8 * v22);
    if (v27)
    {
LABEL_47:
      uint64_t v24 = (v27 - 1) & v27;
      goto LABEL_32;
    }
    int64_t v28 = v26 + 3;
    if (v28 < v25)
    {
      uint64_t v27 = *(void *)(v20 + 8 * v28);
      if (!v27)
      {
        while (1)
        {
          int64_t v22 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            break;
          }
          if (v22 >= v25) {
            goto LABEL_25;
          }
          uint64_t v27 = *(void *)(v20 + 8 * v22);
          ++v28;
          if (v27) {
            goto LABEL_47;
          }
        }
LABEL_123:
        __break(1u);
        goto LABEL_124;
      }
      int64_t v22 = v28;
      goto LABEL_47;
    }
LABEL_25:
    uint64_t result = swift_release();
    uint64_t v16 = v78;
    uint64_t v13 = v80;
    unint64_t v17 = v81;
    if (v81 != v77) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
LABEL_49:
  uint64_t v70 = *(void *)(v71 + 16);
  if (!v70) {
    return v13;
  }
  swift_bridgeObjectRetain();
  unint64_t v29 = 0;
  while (2)
  {
    unint64_t v72 = v29;
    uint64_t v30 = v71 + 32 + 168 * v29;
    long long v31 = *(_OWORD *)v30;
    long long v32 = *(_OWORD *)(v30 + 32);
    v82[1]  = *(_OWORD *)(v30 + 16);
    v83  = v32;
    v82[0]  = v31;
    long long v33 = *(_OWORD *)(v30 + 48);
    long long v34 = *(_OWORD *)(v30 + 64);
    long long v35 = *(_OWORD *)(v30 + 96);
    v86  = *(_OWORD *)(v30 + 80);
    v87  = v35;
    v84  = v33;
    v85  = v34;
    long long v36 = *(_OWORD *)(v30 + 112);
    long long v37 = *(_OWORD *)(v30 + 128);
    long long v38 = *(_OWORD *)(v30 + 144);
    v91  = *(void *)(v30 + 160);
    v89  = v37;
    v90  = v38;
    v88  = v36;
    outlined retain of MaterialDefinitionResource.BuildParameters.Technique(v82);
    REMaterialDefinitionAssetBuilderAddTechnique();
    String.utf8CString.getter();
    REMaterialDefinitionAssetBuilderSetTechniqueName();
    swift_release();
    uint64_t v39 = v83;
    REMaterialDefinitionAssetBuilderSetTechniqueLibrary();
    if (v39)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRetain();
      REMaterialDefinitionAssetBuilderSetTechniqueDebugMapping();
      swift_bridgeObjectRelease();
      swift_release();
    }
    long long v40 = v85;
    uint64_t v41 = v86;
    REMaterialDefinitionAssetBuilderSetTechniqueVertexShaderLibrary();
    String.utf8CString.getter();
    REMaterialDefinitionAssetBuilderSetTechniqueVertexShaderEntry();
    swift_release();
    if (v41)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      REMaterialDefinitionAssetBuilderSetTechniquePixelShaderLibrary();
      String.utf8CString.getter();
      REMaterialDefinitionAssetBuilderSetTechniquePixelShaderEntry();
      swift_release();
      outlined consume of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(v40, *((uint64_t *)&v40 + 1), v41);
    }
    int v42 = BYTE9(v86);
    char v43 = BYTE8(v87);
    char v44 = BYTE8(v88);
    char v45 = BYTE8(v89);
    if (BYTE8(v86) == 2)
    {
      if (BYTE9(v86) == 2) {
        goto LABEL_57;
      }
LABEL_114:
      REMaterialDefinitionAssetBuilderSetTechniqueStateWriteDepth();
      if ((v43 & 1) == 0) {
        goto LABEL_115;
      }
LABEL_58:
      if (v44) {
        goto LABEL_59;
      }
LABEL_116:
      REMaterialDefinitionAssetBuilderSetTechniqueStateCullMode();
      if (v45) {
        goto LABEL_61;
      }
LABEL_60:
      REMaterialDefinitionAssetBuilderSetTechniqueStateColorWriteMask();
      goto LABEL_61;
    }
    REMaterialDefinitionAssetBuilderSetTechniqueStateAlphaBlend();
    if (v42 != 2) {
      goto LABEL_114;
    }
LABEL_57:
    if (v43) {
      goto LABEL_58;
    }
LABEL_115:
    REMaterialDefinitionAssetBuilderSetTechniqueStateDepthCompareFunction();
    if ((v44 & 1) == 0) {
      goto LABEL_116;
    }
LABEL_59:
    if ((v45 & 1) == 0) {
      goto LABEL_60;
    }
LABEL_61:
    unint64_t v73 = v72 + 1;
    uint64_t v46 = v90 + 64;
    uint64_t v47 = 1 << *(unsigned char *)(v90 + 32);
    if (v47 < 64) {
      uint64_t v48 = ~(-1 << v47);
    }
    else {
      uint64_t v48 = -1;
    }
    uint64_t v49 = v48 & *(void *)(v90 + 64);
    int64_t v50 = (unint64_t)(v47 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v51 = 0;
    while (2)
    {
      if (v49)
      {
        v49 &= v49 - 1;
LABEL_66:
        String.utf8CString.getter();
        String.utf8CString.getter();
        REMaterialDefinitionAssetBuilderSetTechniqueFunctionConstant();
        swift_release();
        uint64_t result = swift_release();
        continue;
      }
      break;
    }
    int64_t v52 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      goto LABEL_121;
    }
    if (v52 < v50)
    {
      uint64_t v53 = *(void *)(v46 + 8 * v52);
      ++v51;
      if (!v53)
      {
        int64_t v51 = v52 + 1;
        if (v52 + 1 >= v50) {
          goto LABEL_82;
        }
        uint64_t v53 = *(void *)(v46 + 8 * v51);
        if (!v53)
        {
          int64_t v51 = v52 + 2;
          if (v52 + 2 >= v50) {
            goto LABEL_82;
          }
          uint64_t v53 = *(void *)(v46 + 8 * v51);
          if (!v53)
          {
            int64_t v54 = v52 + 3;
            if (v54 >= v50) {
              goto LABEL_82;
            }
            uint64_t v53 = *(void *)(v46 + 8 * v54);
            if (!v53)
            {
              while (1)
              {
                int64_t v51 = v54 + 1;
                if (__OFADD__(v54, 1)) {
                  break;
                }
                if (v51 >= v50) {
                  goto LABEL_82;
                }
                uint64_t v53 = *(void *)(v46 + 8 * v51);
                ++v54;
                if (v53) {
                  goto LABEL_81;
                }
              }
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
              break;
            }
            int64_t v51 = v54;
          }
        }
      }
LABEL_81:
      uint64_t v49 = (v53 - 1) & v53;
      goto LABEL_66;
    }
LABEL_82:
    swift_release();
    uint64_t v75 = *((void *)&v90 + 1) + 64;
    uint64_t v55 = 1 << *(unsigned char *)(*((void *)&v90 + 1) + 32);
    if (v55 < 64) {
      uint64_t v56 = ~(-1 << v55);
    }
    else {
      uint64_t v56 = -1;
    }
    unint64_t v57 = v56 & *(void *)(*((void *)&v90 + 1) + 64);
    int64_t v76 = (unint64_t)(v55 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v58 = 0;
    uint64_t v74 = result;
    while (2)
    {
      if (v57)
      {
        unint64_t v59 = __clz(__rbit64(v57));
        v57 &= v57 - 1;
        unint64_t v60 = v59 | (v58 << 6);
LABEL_102:
        uint64_t v64 = *(void *)(*(void *)(result + 56) + 8 * v60);
        uint64_t v65 = *(void *)(v64 + 16);
        if (v65)
        {
          int64_t v79 = v58;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v66 = v64 + 40;
          do
          {
            String.utf8CString.getter();
            swift_bridgeObjectRetain();
            REMaterialDefinitionAssetBuilderAddTechniqueVariation();
            swift_release();
            String.utf8CString.getter();
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            REMaterialDefinitionAssetBuilderSetTechniqueVariation();
            swift_release();
            swift_release();
            v66 += 16;
            --v65;
          }
          while (v65);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t result = v74;
          int64_t v58 = v79;
        }
        continue;
      }
      break;
    }
    int64_t v61 = v58 + 1;
    if (__OFADD__(v58, 1)) {
      goto LABEL_122;
    }
    if (v61 < v76)
    {
      unint64_t v62 = *(void *)(v75 + 8 * v61);
      ++v58;
      if (!v62)
      {
        int64_t v58 = v61 + 1;
        if (v61 + 1 >= v76) {
          goto LABEL_106;
        }
        unint64_t v62 = *(void *)(v75 + 8 * v58);
        if (!v62)
        {
          int64_t v58 = v61 + 2;
          if (v61 + 2 >= v76) {
            goto LABEL_106;
          }
          unint64_t v62 = *(void *)(v75 + 8 * v58);
          if (!v62)
          {
            int64_t v63 = v61 + 3;
            if (v63 >= v76) {
              goto LABEL_106;
            }
            unint64_t v62 = *(void *)(v75 + 8 * v63);
            if (!v62)
            {
              while (1)
              {
                int64_t v58 = v63 + 1;
                if (__OFADD__(v63, 1)) {
                  goto LABEL_125;
                }
                if (v58 >= v76) {
                  goto LABEL_106;
                }
                unint64_t v62 = *(void *)(v75 + 8 * v58);
                ++v63;
                if (v62) {
                  goto LABEL_101;
                }
              }
            }
            int64_t v58 = v63;
          }
        }
      }
LABEL_101:
      unint64_t v57 = (v62 - 1) & v62;
      unint64_t v60 = __clz(__rbit64(v62)) + (v58 << 6);
      goto LABEL_102;
    }
LABEL_106:
    swift_release();
    uint64_t v67 = v91;
    uint64_t v68 = *(void *)(v91 + 16);
    if (v68)
    {
      swift_bridgeObjectRetain();
      uint64_t v69 = v67 + 40;
      do
      {
        swift_bridgeObjectRetain();
        REMaterialDefinitionAssetBuilderAddTechniqueDefaultVariation();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REMaterialDefinitionAssetBuilderSetTechniqueDefaultVariation();
        swift_release();
        v69 += 16;
        --v68;
      }
      while (v68);
      swift_bridgeObjectRelease();
    }
    uint64_t result = (uint64_t)outlined release of MaterialDefinitionResource.BuildParameters.Technique(v82);
    unint64_t v29 = v73;
    if (v73 == v70)
    {
      swift_bridgeObjectRelease();
      return v80;
    }
    if (v73 < *(void *)(v71 + 16)) {
      continue;
    }
    break;
  }
  __break(1u);
LABEL_129:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError;
  if (!lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError;
  if (!lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError);
  }
  return result;
}

uint64_t sub_2280FE3D0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2280FE408()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_2280FE448()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t method lookup function for MaterialDefinitionResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MaterialDefinitionResource);
}

uint64_t dispatch thunk of MaterialDefinitionResource.__coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of MaterialDefinitionResource.update(from:services:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of MaterialDefinitionResource.udpate(from:services:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t destroy for MaterialDefinitionResource.BuildParameters()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MaterialDefinitionResource.BuildParameters(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  uint64_t v4 = a2[3];
  a1[2]  = a2[2];
  a1[3]  = v4;
  uint64_t v5 = a2[5];
  a1[4]  = a2[4];
  a1[5]  = v5;
  a1[6]  = a2[6];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MaterialDefinitionResource.BuildParameters(void *a1, void *a2)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2]  = a2[2];
  swift_retain();
  swift_release();
  a1[3]  = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4]  = a2[4];
  swift_retain();
  swift_release();
  a1[5]  = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6]  = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MaterialDefinitionResource.BuildParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialDefinitionResource.BuildParameters()
{
  return &type metadata for MaterialDefinitionResource.BuildParameters;
}

ValueMetadata *type metadata accessor for MaterialDefinitionResource.BuildParameters.DebugMapping()
{
  return &type metadata for MaterialDefinitionResource.BuildParameters.DebugMapping;
}

uint64_t destroy for MaterialDefinitionResource.BuildParameters.Technique(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 80))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MaterialDefinitionResource.BuildParameters.Technique(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 72);
    *(void *)(a1 + 64)  = *(void *)(a2 + 64);
    *(void *)(a1 + 72)  = v9;
    *(void *)(a1 + 80)  = v8;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  }
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 136)  = *(unsigned char *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  *(void *)(a1 + 152)  = v10;
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MaterialDefinitionResource.BuildParameters.Technique(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 64);
  uint64_t v5 = (_OWORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v6)
    {
      *(void *)(a1 + 64)  = *(void *)(a2 + 64);
      swift_retain();
      swift_release();
      *(void *)(a1 + 72)  = *(void *)(a2 + 72);
      *(void *)(a1 + 80)  = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData(a1 + 64);
      uint64_t v7 = *(void *)(a2 + 80);
      *uint64_t v4 = *v5;
      *(void *)(a1 + 80)  = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 64)  = *(void *)(a2 + 64);
    *(void *)(a1 + 72)  = *(void *)(a2 + 72);
    *(void *)(a1 + 80)  = *(void *)(a2 + 80);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *v5;
    *(void *)(a1 + 80)  = *(void *)(a2 + 80);
    *uint64_t v4 = v8;
  }
  *(unsigned char *)(a1 + 88)  = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89)  = *(unsigned char *)(a2 + 89);
  uint64_t v9 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104)  = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96)  = v9;
  uint64_t v10 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120)  = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112)  = v10;
  uint64_t v11 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136)  = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128)  = v11;
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152)  = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16)  = a2[1];
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)a1  = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80)  = a2[5];
  *(_OWORD *)(a1 + 96)  = v6;
  *(_OWORD *)(a1 + 48)  = v4;
  *(_OWORD *)(a1 + 64)  = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 160)  = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128)  = v8;
  *(_OWORD *)(a1 + 144)  = v9;
  *(__n128 *)(a1 + 112)  = result;
  return result;
}

uint64_t assignWithTake for MaterialDefinitionResource.BuildParameters.Technique(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v6;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 80)) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a2 + 80);
  if (!v7)
  {
    outlined destroy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData(a1 + 64);
LABEL_5:
    *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80)  = *(void *)(a2 + 80);
    goto LABEL_6;
  }
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = v7;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_WORD *)(a1 + 88)  = *(_WORD *)(a2 + 88);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104)  = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120)  = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128)  = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136)  = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152)  = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters.Technique(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters.Technique(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 168)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 168)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialDefinitionResource.BuildParameters.Technique()
{
  return &type metadata for MaterialDefinitionResource.BuildParameters.Technique;
}

uint64_t destroy for MaterialDefinitionResource.BuildParameters.Technique.ShaderData()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for MaterialDefinitionResource.BuildParameters.Technique.ShaderData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  a1[2]  = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MaterialDefinitionResource.BuildParameters.Technique.ShaderData(void *a1, void *a2)
{
  *a1  = *a2;
  swift_retain();
  swift_release();
  a1[1]  = a2[1];
  a1[2]  = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for MaterialDefinitionResource.BuildParameters.Technique.ShaderData(void *a1, void *a2)
{
  *a1  = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1]  = a2[1];
  a1[2]  = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MaterialDefinitionResource.BuildParameters.Technique.ShaderData()
{
  return &type metadata for MaterialDefinitionResource.BuildParameters.Technique.ShaderData;
}

uint64_t getEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters.Technique.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[49]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters.Technique.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40)  = 0;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 48)  = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49)  = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialDefinitionResource.BuildParameters.Technique.State()
{
  return &type metadata for MaterialDefinitionResource.BuildParameters.Technique.State;
}

unsigned char *storeEnumTagSinglePayload for MaterialDefinitionResource.LoadError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2280FF0A8);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for MaterialDefinitionResource.LoadError()
{
  return &unk_26DCAA128;
}

uint64_t sub_2280FF13C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2280FF174()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(char a1)
{
  closure #1 in closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t sub_2280FF1D8()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void *outlined retain of MaterialDefinitionResource.BuildParameters.Technique(void *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *outlined release of MaterialDefinitionResource.BuildParameters.Technique(void *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Audio.Directivity.BeamCodingKeys()
{
  return 0x7375636F66;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Audio.Directivity.BeamCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7375636F66 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.Directivity.BeamCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.Directivity.BeamCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Audio.Directivity.CodingKeys()
{
  unint64_t result = 1835099490;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6E616D7568;
      break;
    case 2:
      unint64_t result = 0x65726964696E6D6FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Audio.Directivity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Audio.Directivity.CodingKeys.init(stringValue:)(a1, a2);
  *a3  = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.Directivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.Directivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.Directivity.HumanCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.Directivity.HumanCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.Directivity.OmnidirectionalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.Directivity.OmnidirectionalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Audio.Directivity.SphericalApproximationCodingKeys()
{
  if (*v0) {
    return 0x41676E696E65706FLL;
  }
  else {
    return 0x726574656D616964;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Audio.Directivity.SphericalApproximationCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Audio.Directivity.SphericalApproximationCodingKeys.init(stringValue:)(a1, a2);
  *a3  = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.Directivity.SphericalApproximationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.Directivity.SphericalApproximationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

void Audio.Directivity.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)v0;
  if (!*(unsigned char *)(v0 + 16))
  {
    Hasher._combine(_:)(0);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v1;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
LABEL_12:
    Hasher._combine(_:)(v4);
    return;
  }
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    Hasher._combine(_:)(3uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v1;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v2;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    goto LABEL_12;
  }
  if (v1 | v2) {
    Swift::UInt v5 = 2;
  }
  else {
    Swift::UInt v5 = 1;
  }
  Hasher._combine(_:)(v5);
}

uint64_t Audio.Directivity.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.Directivity.SphericalApproximationCodingKeys>);
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  MEMORY[0x270FA5388](v3);
  long long v36 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.Directivity.OmnidirectionalCodingKeys>);
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  MEMORY[0x270FA5388](v5);
  long long v31 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.Directivity.HumanCodingKeys>);
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v30 = v7;
  MEMORY[0x270FA5388](v7);
  int64_t v28 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.Directivity.BeamCodingKeys>);
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.Directivity.CodingKeys>);
  uint64_t v40 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *v1;
  uint64_t v39 = v1[1];
  int v16 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v16)
  {
    uint64_t v18 = v40;
    uint64_t v17 = v41;
    if (v16 == 1)
    {
      char v47 = 3;
      lazy protocol witness table accessor for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys();
      uint64_t v19 = v36;
      uint64_t v20 = v12;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v46 = 0;
      uint64_t v21 = v38;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v17)
      {
        char v45 = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v21);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v14, v20);
    }
    else
    {
      if (v15 | v39)
      {
        char v44 = 2;
        lazy protocol witness table accessor for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys();
        uint64_t v24 = v31;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v26 = v32;
        uint64_t v25 = v33;
      }
      else
      {
        char v43 = 1;
        lazy protocol witness table accessor for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys();
        uint64_t v24 = v28;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v26 = v29;
        uint64_t v25 = v30;
      }
      (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v14, v12);
    }
  }
  else
  {
    char v42 = 0;
    lazy protocol witness table accessor for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v23 = v35;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v14, v12);
  }
}

Swift::Int Audio.Directivity.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t Audio.Directivity.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  int64_t v52 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.Directivity.SphericalApproximationCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  uint64_t v51 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v55 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.Directivity.OmnidirectionalCodingKeys>);
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  MEMORY[0x270FA5388](v6);
  int64_t v54 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.Directivity.HumanCodingKeys>);
  uint64_t v53 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.Directivity.BeamCodingKeys>);
  uint64_t v48 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.Directivity.CodingKeys>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  int v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[3];
  uint64_t v56 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  lazy protocol witness table accessor for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys();
  uint64_t v18 = v57;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    goto LABEL_16;
  }
  uint64_t v19 = v12;
  uint64_t v44 = v10;
  uint64_t v45 = 0;
  uint64_t v21 = v53;
  uint64_t v20 = v54;
  int64_t v22 = v55;
  uint64_t v57 = v14;
  uint64_t v23 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v23 + 16) != 1)
  {
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v33 = &type metadata for Audio.Directivity;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, *MEMORY[0x263F8DCB0], v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v13);
LABEL_16:
    uint64_t v28 = (uint64_t)v56;
    return __swift_destroy_boxed_opaque_existential_1(v28);
  }
  switch(*(unsigned char *)(v23 + 32))
  {
    case 1:
      char v59 = 1;
      lazy protocol witness table accessor for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys();
      uint64_t v34 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v34) {
        goto LABEL_15;
      }
      (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v49);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v13);
      char v29 = 2;
      uint64_t v27 = 0;
      uint64_t v30 = 0;
      goto LABEL_11;
    case 2:
      char v60 = 2;
      lazy protocol witness table accessor for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys();
      uint64_t v35 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v35) {
        goto LABEL_15;
      }
      (*(void (**)(char *, uint64_t))(v46 + 8))(v20, v47);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v13);
      char v29 = 2;
      uint64_t v30 = 0;
      uint64_t v27 = 1;
      goto LABEL_11;
    case 3:
      char v63 = 3;
      lazy protocol witness table accessor for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys();
      uint64_t v37 = v22;
      uint64_t v38 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v38) {
        goto LABEL_15;
      }
      char v62 = 0;
      uint64_t v39 = v50;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v27 = v41;
      char v61 = 1;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v42 = v57;
      uint64_t v30 = v43;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v37, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v13);
      char v29 = 1;
LABEL_11:
      uint64_t v28 = (uint64_t)v56;
      goto LABEL_12;
    default:
      char v58 = 0;
      lazy protocol witness table accessor for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys();
      uint64_t v24 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v24)
      {
LABEL_15:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v13);
        goto LABEL_16;
      }
      uint64_t v25 = v44;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v27 = v26;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v19, v25);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v13);
      uint64_t v28 = (uint64_t)v56;
      char v29 = 0;
      uint64_t v30 = 0;
LABEL_12:
      long long v36 = v52;
      *int64_t v52 = v27;
      v36[1]  = v30;
      *((unsigned char *)v36 + 16)  = v29;
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1(v28);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Audio.Directivity()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Audio.Directivity()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Audio.Directivity@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Audio.Directivity.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Audio.Directivity(void *a1)
{
  return Audio.Directivity.encode(to:)(a1);
}

uint64_t specialized static Audio.Directivity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    double v5 = *(double *)(a1 + 8);
    double v6 = *(double *)(a2 + 8);
    if (*(unsigned char *)(a1 + 16) == 1)
    {
      if (v4 == 1 && v2 == v3) {
        return v5 == v6;
      }
      return 0;
    }
    if (*(void *)&v2 | *(void *)&v5)
    {
      if (v4 != 2 || *(void *)&v3 != 1 || *(void *)&v6 != 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v10 = *(void *)&v6 | *(void *)&v3;
      if (v4 != 2 || v10 != 0) {
        return 0;
      }
    }
    return 1;
  }
  return !*(unsigned char *)(a2 + 16) && v2 == v3;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys);
  }
  return result;
}

ValueMetadata *type metadata accessor for Audio()
{
  return &type metadata for Audio;
}

ValueMetadata *type metadata accessor for Audio.Directivity()
{
  return &type metadata for Audio.Directivity;
}

unsigned char *storeEnumTagSinglePayload for Audio.Directivity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22810098CLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Audio.Directivity.CodingKeys()
{
  return &unk_26DCAA3A8;
}

unsigned char *storeEnumTagSinglePayload for Audio.Directivity.BeamCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x228100A60);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Audio.Directivity.BeamCodingKeys()
{
  return &unk_26DCAA438;
}

void *type metadata accessor for Audio.Directivity.HumanCodingKeys()
{
  return &unk_26DCAA458;
}

void *type metadata accessor for Audio.Directivity.OmnidirectionalCodingKeys()
{
  return &unk_26DCAA478;
}

unsigned char *storeEnumTagSinglePayload for Audio.Directivity.SphericalApproximationCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228100B84);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Audio.Directivity.SphericalApproximationCodingKeys()
{
  return &unk_26DCAA508;
}

uint64_t specialized Audio.Directivity.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1835099490 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E616D7568 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65726964696E6D6FLL && a2 == 0xEF6C616E6F697463 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000228359330)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized Audio.Directivity.SphericalApproximationCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726574656D616964 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x41676E696E65706FLL && a2 == 0xEC000000656C676ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

BOOL static Entity.CoordinateSpaceReference.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Entity.CoordinateSpaceReference.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Entity.CoordinateSpaceReference.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void Entity.transformMatrix(relativeTo:)(char *a1@<X0>, float32x4_t *a2@<X8>)
{
  char v3 = *a1;
  ComponentInHierarchy  = RESceneSpaceRootComponentFindComponentInHierarchy();
  float32x4_t v5 = 0uLL;
  if (!ComponentInHierarchy)
  {
    char v13 = 1;
    float32x4_t v15 = 0uLL;
    float32x4_t v17 = 0uLL;
    float32x4_t v19 = 0uLL;
    goto LABEL_10;
  }
  IsSelfInImmersiveSpace  = RESceneSpaceRootComponentGetIsSelfInImmersiveSpace();
  IsImmersiveSpaceOpen  = RESceneSpaceRootComponentGetIsImmersiveSpaceOpen();
  if ((v3 & 1) == 0)
  {
    if ((IsSelfInImmersiveSpace & 1) == 0) {
      goto LABEL_9;
    }
LABEL_8:
    char v13 = 1;
    float32x4_t v15 = 0uLL;
    float32x4_t v17 = 0uLL;
    float32x4_t v19 = 0uLL;
    float32x4_t v5 = 0uLL;
    goto LABEL_10;
  }
  if ((IsImmersiveSpaceOpen & 1) == 0) {
    goto LABEL_8;
  }
  if (IsSelfInImmersiveSpace)
  {
LABEL_9:
    *(double *)v20.i64  = findWorldMatrix4x4FFromTransformComponent(_:)();
    float32x4_t v5 = v20;
    char v13 = 0;
    goto LABEL_10;
  }
  RESceneSpaceRootComponentGetSceneToImmersiveTransform();
  float32x4_t v21 = v8;
  float32x4_t v22 = v9;
  float32x4_t v23 = v10;
  float32x4_t v24 = v11;
  *(double *)v12.i64  = findWorldMatrix4x4FFromTransformComponent(_:)();
  char v13 = 0;
  float32x4_t v5 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, v12.f32[0]), v22, *(float32x2_t *)v12.f32, 1), v23, v12, 2), v24, v12, 3);
  float32x4_t v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, v14.f32[0]), v22, *(float32x2_t *)v14.f32, 1), v23, v14, 2), v24, v14, 3);
  float32x4_t v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, v16.f32[0]), v22, *(float32x2_t *)v16.f32, 1), v23, v16, 2), v24, v16, 3);
  float32x4_t v19 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, v18.f32[0]), v22, *(float32x2_t *)v18.f32, 1), v23, v18, 2), v24, v18, 3);
LABEL_10:
  *a2  = v5;
  a2[1]  = v15;
  a2[2]  = v17;
  a2[3]  = v19;
  a2[4].i8[0]  = v13;
}

double findWorldMatrix4x4FFromTransformComponent(_:)()
{
  RETransformComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RETransformComponentGetWorldMatrix4x4F();
  }
  else if (specialized HasHierarchy.parent.getter())
  {
    double v1 = findWorldMatrix4x4FFromTransformComponent(_:)();
    swift_release();
    return v1;
  }
  else
  {
    *(void *)&double result = 1065353216;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.CoordinateSpaceReference and conformance Entity.CoordinateSpaceReference()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.CoordinateSpaceReference and conformance Entity.CoordinateSpaceReference;
  if (!lazy protocol witness table cache variable for type Entity.CoordinateSpaceReference and conformance Entity.CoordinateSpaceReference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.CoordinateSpaceReference and conformance Entity.CoordinateSpaceReference);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Entity.CoordinateSpaceReference(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228101684);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Entity.CoordinateSpaceReference()
{
  return &type metadata for Entity.CoordinateSpaceReference;
}

void AudioFileResource.CreateOptions.spatialMode.getter(unsigned char *a1@<X8>)
{
  *a1  = *v1;
}

unsigned char *AudioFileResource.CreateOptions.spatialMode.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.spatialMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.CreateOptions.loadingStrategy.getter(unsigned char *a1@<X8>)
{
  *a1  = *(unsigned char *)(v1 + 1);
}

unsigned char *AudioFileResource.CreateOptions.loadingStrategy.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1)  = *result;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.loadingStrategy.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.CreateOptions.shouldLoop.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t AudioFileResource.CreateOptions.shouldLoop.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2)  = result;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.shouldLoop.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.CreateOptions.randomizeStartTime.getter()
{
  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t AudioFileResource.CreateOptions.randomizeStartTime.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 3)  = result;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.randomizeStartTime.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.CreateOptions.mixGroupName.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioFileResource.CreateOptions.mixGroupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8)  = a1;
  *(void *)(v2 + 16)  = a2;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.mixGroupName.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.CreateOptions.normalization.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  *(void *)a1  = *(void *)(v1 + 24);
  *(unsigned char *)(a1 + 8)  = v2;
}

uint64_t AudioFileResource.CreateOptions.normalization.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 24)  = *(void *)result;
  *(unsigned char *)(v1 + 32)  = v2;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.normalization.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.CreateOptions.calibration.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  *(void *)a1  = *(void *)(v1 + 40);
  *(unsigned char *)(a1 + 8)  = v2;
}

uint64_t AudioFileResource.CreateOptions.calibration.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 40)  = *(void *)result;
  *(unsigned char *)(v1 + 48)  = v2;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.calibration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double AudioFileResource.CreateOptions.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 257;
  *(_DWORD *)a1  = 257;
  *(void *)(a1 + 16)  = 0;
  *(void *)(a1 + 24)  = 0;
  *(void *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 32)  = -1;
  *(void *)(a1 + 40)  = 0;
  *(unsigned char *)(a1 + 48)  = -1;
  return result;
}

uint64_t AudioFileResource.CreateOptions.init(from:)@<X0>(uint64_t a1@<X8>)
{
  InputMode  = REAudioFileAssetGetInputMode();
  if (InputMode >= 3) {
    goto LABEL_21;
  }
  char v3 = InputMode;
  Streaming  = REAudioFileAssetGetStreaming();
  LoopCount  = REAudioFileAssetGetLoopCount();
  RandomizeStart  = REAudioFileAssetGetRandomizeStart();
  id v7 = (id)REAudioFileAssetGetMixGroupName();
  if (v7)
  {
    float32x4_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  NormalizationMode  = REAudioFileAssetGetNormalizationMode();
  REAudioFileAssetGetTargetLUFS();
  if (NormalizationMode == 2)
  {
    char v15 = 0;
LABEL_12:
    double v14 = v13;
    goto LABEL_13;
  }
  double v14 = 0.0;
  if (NormalizationMode != 1)
  {
    char v15 = -1;
    goto LABEL_13;
  }
  if (v13 != *MEMORY[0x263F375A0])
  {
    char v15 = 1;
    goto LABEL_12;
  }
  char v15 = 2;
LABEL_13:
  CalibrationMode  = REAudioFileAssetGetCalibrationMode();
  uint64_t result = REAudioFileAssetGetCalibrationLevel();
  switch(CalibrationMode)
  {
    case 0:
      uint64_t v20 = 0;
      char v19 = -1;
LABEL_20:
      *(unsigned char *)a1  = 0x20001u >> (8 * v3);
      *(unsigned char *)(a1 + 1)  = Streaming ^ 1;
      *(unsigned char *)(a1 + 2)  = LoopCount != 0;
      *(unsigned char *)(a1 + 3)  = RandomizeStart;
      *(void *)(a1 + 8)  = v9;
      *(void *)(a1 + 16)  = v11;
      *(double *)(a1 + 24)  = v14;
      *(unsigned char *)(a1 + 32)  = v15;
      *(void *)(a1 + 40)  = v20;
      *(unsigned char *)(a1 + 48)  = v19;
      return result;
    case 1:
      char v19 = 0;
LABEL_19:
      uint64_t v20 = v18;
      goto LABEL_20;
    case 2:
      char v19 = 1;
      goto LABEL_19;
  }
LABEL_21:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AudioFileResource.CreateOptions.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = a1[2];
  int v3 = a1[3];
  uint64_t v27 = *((void *)a1 + 1);
  uint64_t v28 = *((void *)a1 + 2);
  int v24 = a1[32];
  double v4 = *((double *)a1 + 5);
  int v5 = a1[48];
  int v6 = a2[2];
  int v7 = a2[3];
  uint64_t v26 = *((void *)a2 + 1);
  uint64_t v29 = *((void *)a2 + 2);
  BOOL v8 = a1[1] == 0;
  double v22 = *((double *)a1 + 3);
  double v23 = *((double *)a2 + 3);
  if (a1[1]) {
    uint64_t v9 = 0x64616F6C657270;
  }
  else {
    uint64_t v9 = 0x6D6165727473;
  }
  int v25 = a2[32];
  if (v8) {
    unint64_t v10 = 0xE600000000000000;
  }
  else {
    unint64_t v10 = 0xE700000000000000;
  }
  double v11 = *((double *)a2 + 5);
  if (a2[1]) {
    uint64_t v12 = 0x64616F6C657270;
  }
  else {
    uint64_t v12 = 0x6D6165727473;
  }
  if (a2[1]) {
    unint64_t v13 = 0xE700000000000000;
  }
  else {
    unint64_t v13 = 0xE600000000000000;
  }
  int v14 = a2[48];
  if (v9 == v12 && v10 == v13)
  {
    swift_bridgeObjectRelease_n();
    uint64_t result = 0;
    if (v2 != v6 || ((v3 ^ v7) & 1) != 0) {
      return result;
    }
  }
  else
  {
    int v21 = a2[48];
    double v16 = *((double *)a2 + 5);
    int v17 = v5;
    double v18 = v4;
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v19 & 1) == 0) {
      return result;
    }
    if ((v2 ^ v6)) {
      return result;
    }
    double v4 = v18;
    int v5 = v17;
    double v11 = v16;
    int v14 = v21;
    if ((v3 ^ v7)) {
      return result;
    }
  }
  if (!v28)
  {
    if (v29) {
      return 0;
    }
    goto LABEL_29;
  }
  if (!v29) {
    return 0;
  }
  if (v27 == v26 && v28 == v29 || (char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v20 & 1) != 0))
  {
LABEL_29:
    if (v24 == 255)
    {
      if (v25 != 255) {
        return 0;
      }
LABEL_42:
      if (v5 == 255)
      {
        if (v14 == 255) {
          return 1;
        }
      }
      else if (v14 != 255)
      {
        if (v5)
        {
          if ((v14 & 1) == 0) {
            return 0;
          }
        }
        else if (v14)
        {
          return 0;
        }
        if (v4 == v11) {
          return 1;
        }
      }
      return 0;
    }
    if (v25 == 255) {
      return 0;
    }
    if (v24)
    {
      if (v24 != 1)
      {
        uint64_t result = 0;
        if (v25 != 2 || v23 != 0.0) {
          return result;
        }
        goto LABEL_42;
      }
      uint64_t result = 0;
      if (v25 != 1) {
        return result;
      }
    }
    else
    {
      uint64_t result = 0;
      if (v25) {
        return result;
      }
    }
    if (v22 != v23) {
      return result;
    }
    goto LABEL_42;
  }
  return result;
}

uint64_t initializeWithCopy for AudioFileResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioFileResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24)  = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40)  = v5;
  return a1;
}

uint64_t assignWithTake for AudioFileResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioFileResource.CreateOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioFileResource.CreateOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40)  = 0;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 48)  = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49)  = 0;
    }
    if (a2) {
      *(void *)(result + 16)  = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioFileResource.CreateOptions()
{
  return &type metadata for AudioFileResource.CreateOptions;
}

CGColorRef HasAmbientLight.light.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v7);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v5);
  swift_release();
  CGColorRef result = v5;
  if (v5)
  {
    int v4 = v6;
  }
  else
  {
    CGColorRef result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    int v4 = 1143652352;
  }
  *(void *)a1  = result;
  *(_DWORD *)(a1 + 8)  = v4;
  return result;
}

uint64_t key path setter for HasAmbientLight.light : <A>A(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  int v4 = *(void **)a1;
  int v5 = v1;
  id v2 = v4;
  return HasAmbientLight.light.setter(&v4);
}

uint64_t HasAmbientLight.light.setter(void **a1)
{
  id v2 = *a1;
  unint64_t v3 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);
  swift_release();

  return v3(v5, 0);
}

void (*HasAmbientLight.light.modify(void *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1  = v7;
  v7[3]  = a3;
  v7[4]  = v3;
  _OWORD v7[2] = a2;
  HasAmbientLight.light.getter((uint64_t)v7);
  return HasAmbientLight.light.modify;
}

void HasAmbientLight.light.modify(void ***a1, char a2)
{
  id v2 = *a1;
  uint64_t v3 = **a1;
  int v4 = *((_DWORD *)*a1 + 2);
  int v6 = v3;
  int v7 = v4;
  if (a2)
  {
    id v5 = v3;
    HasAmbientLight.light.setter(&v6);
  }
  else
  {
    HasAmbientLight.light.setter(&v6);
  }

  free(v2);
}

float sub_22810224C@<S0>(uint64_t a1@<X8>)
{
  HasAmbientLight.light.getter((uint64_t)&v3);
  float result = v4;
  *(void *)a1  = v3;
  *(float *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_228102294()
{
  return 16;
}

__n128 sub_2281022A0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2  = *a1;
  return result;
}

uint64_t _sSpsRi_zrlE10initialize2toyxn_tF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a2, a1);
}

void ObservableComponent.init()()
{
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static ObservableComponent.__publisher(buffer:)()
{
  specialized static ObservableComponent.__publisher(buffer:)();

  return swift_retain();
}

{
  uint64_t vars8;

  specialized static ObservableComponent.__publisher(buffer:)();

  return swift_retain();
}

uint64_t static ObservableComponent.__size.getter()
{
  return *(void *)(*(void *)(type metadata accessor for ObservableComponentStorage() - 8) + 64);
}

uint64_t static ObservableComponent.__load(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t static ObservableComponent.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for ObservableComponentStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = &v22[-v11 - 8];
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v14);
  double v16 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x270FA5388](v17);
  char v19 = &v22[-v18 - 8];
  outlined init with copy of __REAssetService(a1, (uint64_t)v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  if (a4)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 24))(a2, v19, a5);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
    ObservableComponentStorage.notifyValueSubscribers()();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v19, a5);
    *(void *)&v12[*(int *)(v9 + 36)]  = 0;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v12, v16, a5);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v12, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, a5);
}

Swift::Void __swiftcall ObservableComponentStorage.notifyValueSubscribers()()
{
  __n128 v3 = ((__n128 (*)())MEMORY[0x270FA5388])();
  if (*(void *)(v0 + *(int *)(v4 + 36)))
  {
    (*(void (**)(char *, uint64_t, __n128))(v2 + 16))((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v3);
    CurrentValueSubject.value.setter();
  }
}

uint64_t ObservableComponentStorage.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + *(int *)(type metadata accessor for ObservableComponentStorage() + 36))  = 0;
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v6(a3, a1, a2);
}

uint64_t static ObservableComponent.__free(to:offset:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObservableComponentStorage();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = MEMORY[0x270FA5388](v2);
  int v6 = &v8[-v5];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v3 + 16))(&v8[-v5], a1, v2, v4);
  if (*(void *)&v6[*(int *)(v2 + 36)])
  {
    v8[15]  = 1;
    CurrentValueSubject.send(completion:)();
  }
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v6, v2);
  UnsafeMutablePointer.deinitialize(count:)();
  return MEMORY[0x22A689520](a1, v2);
}

Swift::Void __swiftcall ObservableComponentStorage.cleanup()()
{
  if (*(void *)(v1 + *(int *)(v0 + 36))) {
    CurrentValueSubject.send(completion:)();
  }
}

uint64_t static ObservableComponent<>.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v23 = a7;
  uint64_t v11 = type metadata accessor for ObservableComponentStorage();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v24[-v13 - 8];
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x270FA5388](v19);
  int v21 = &v24[-v20 - 8];
  outlined init with copy of __REAssetService(a1, (uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  if (a4)
  {
    ObservableComponentStorage<>.setValueIfChanged(_:)((uint64_t)v21, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v21, a5);
    *(void *)&v14[*(int *)(v11 + 36)]  = 0;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v14, v18, a5);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a2, v14, v11);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v21, a5);
}

void ObservableComponentStorage<>.setValueIfChanged(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, v3, v5, v7);
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v3, a1, v5);
    ObservableComponentStorage.notifyValueSubscribers()();
  }
}

uint64_t specialized ObservableComponentStorage.publisher()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(v7 + 36);
  uint64_t result = *(void *)(v2 + v8);
  if (!result)
  {
    type metadata accessor for CurrentValueSubject();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, v3);
    uint64_t result = CurrentValueSubject.__allocating_init(_:)();
    *(void *)(v2 + v8)  = result;
  }
  return result;
}

uint64_t specialized static ObservableComponent.__publisher(buffer:)()
{
  uint64_t v0 = type metadata accessor for ObservableComponentStorage();
  return specialized ObservableComponentStorage.publisher()(v0);
}

uint64_t type metadata accessor for ObservableComponentStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of ObservableComponent.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static ObservableComponent.__publisher(buffer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata completion function for ObservableComponentStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ObservableComponentStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8)  = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ObservableComponentStorage(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t initializeWithCopy for ObservableComponentStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8)  = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ObservableComponentStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8)  = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ObservableComponentStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8)  = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ObservableComponentStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8)  = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ObservableComponentStorage(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x228103348);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10)  = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17)  = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ObservableComponentStorage(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1  = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10]  = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10]  = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10]  = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x228103548);
    case 4:
      *(_DWORD *)&a1[v10]  = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *uint64_t v18 = 0;
            *(_DWORD *)uint64_t v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *uint64_t v18 = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

__n128 PhysicsMotionComponent.linearVelocity.getter()
{
  return *(__n128 *)v0;
}

void PhysicsMotionComponent.linearVelocity.setter(__n128 a1)
{
  __n128 *v1 = a1;
}

uint64_t (*PhysicsMotionComponent.linearVelocity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PhysicsMotionComponent.angularVelocity.getter()
{
  return v0[1];
}

void PhysicsMotionComponent.angularVelocity.setter(__n128 a1)
{
  v1[1]  = a1;
}

uint64_t (*PhysicsMotionComponent.angularVelocity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double PhysicsMotionComponent.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1  = 0u;
  a1[1]  = 0u;
  return result;
}

void PhysicsMotionComponent.init(linearVelocity:angularVelocity:)(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  *a1  = a2;
  a1[1]  = a3;
}

uint64_t static PhysicsMotionComponent.__fromCore(_:)@<X0>(_OWORD *a1@<X8>)
{
  REMotionStateComponentGetLinearVelocity();
  long long v5 = v2;
  uint64_t result = REMotionStateComponentGetAngularVelocity();
  *a1  = v5;
  a1[1]  = v4;
  return result;
}

uint64_t PhysicsMotionComponent.__toCore(_:)()
{
  REMotionStateComponentSetLinearVelocity();
  REMotionStateComponentSetAngularVelocity();

  return RENetworkMarkComponentDirty();
}

void static PhysicsMotionComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1  = 58;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance PhysicsMotionComponent@<X0>(_OWORD *a1@<X8>)
{
  REMotionStateComponentGetLinearVelocity();
  long long v5 = v2;
  uint64_t result = REMotionStateComponentGetAngularVelocity();
  *a1  = v5;
  a1[1]  = v4;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance PhysicsMotionComponent()
{
  REMotionStateComponentSetLinearVelocity();
  REMotionStateComponentSetAngularVelocity();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance PhysicsMotionComponent(_DWORD *a1@<X8>)
{
  *a1  = 58;
}

ValueMetadata *type metadata accessor for PhysicsMotionComponent()
{
  return &type metadata for PhysicsMotionComponent;
}

uint64_t specialized Collection<>.indices.getter@<X0>(uint64_t a1@<X8>)
{
  long long v14 = *(_OWORD *)(v1 + 16);
  uint64_t v15 = *(void *)(v1 + 32);
  v16[0]  = *(_OWORD *)v1;
  v16[1]  = v14;
  uint64_t v17 = v15;
  outlined init with take of Transform?((uint64_t)v16, (uint64_t)v19, &demangling cache variable for type metadata for AnimationLibraryResource?);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1  = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16)  = v3;
  *(void *)(a1 + 32)  = *(void *)(v1 + 32);
  outlined init with take of Transform?((uint64_t)v19, (uint64_t)&v20, &demangling cache variable for type metadata for AnimationLibraryResource?);
  if (v20)
  {
    outlined retain of AnimationLibraryComponent.AnimationCollection(v1);
    outlined retain of OrbitEntityActionHandler((uint64_t)v19);
    unint64_t v4 = AnimationLibraryResource.keyedResources.getter();
    uint64_t v5 = specialized Dictionary.startIndex.getter(v4);
    uint64_t v7 = v6;
    char v9 = v8;
    swift_bridgeObjectRelease();
    outlined release of TimelineDefinition?((uint64_t)v19);
  }
  else
  {
    outlined init with take of Transform?((uint64_t)v16 + 8, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
    outlined init with take of Transform?((uint64_t)v18, (uint64_t)&v21, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
    unint64_t v10 = v21;
    if (v21)
    {
      outlined retain of AnimationLibraryComponent.AnimationCollection(v1);
    }
    else
    {
      outlined retain of AnimationLibraryComponent.AnimationCollection(v1);
      unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    uint64_t v5 = specialized Dictionary.startIndex.getter(v10);
    uint64_t v7 = v11;
    char v9 = v12;
    outlined retain of [String : String]((uint64_t)v18);
    swift_bridgeObjectRelease();
  }
  *(void *)(a1 + 40)  = v5;
  *(void *)(a1 + 48)  = v7;
  *(unsigned char *)(a1 + 56)  = v9 & 1;
  return AnimationLibraryComponent.AnimationCollection.endIndex.getter(a1 + 64);
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a2 < 0) {
    goto LABEL_56;
  }
  uint64_t v3 = a2;
  uint64_t v4 = result;
  if (!a2)
  {
LABEL_53:
    *a3  = v4;
    return result;
  }
  uint64_t v5 = 0;
  while (1)
  {
    if (__OFADD__(v4++, 1)) {
      goto LABEL_55;
    }
    uint64_t result = REEntityGetComponentCount();
    if (v4 < result) {
      break;
    }
LABEL_5:
    if (++v5 == v3) {
      goto LABEL_53;
    }
  }
  while (1)
  {
    Shared  = REEngineGetShared();
    if (Shared)
    {
      uint64_t v8 = Shared;
      if (one-time initialization token for lock != -1) {
        swift_once();
      }
      os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      if (!static __ServiceLocator.sharedEngine || *((void *)static __ServiceLocator.sharedEngine + 3) != v8)
      {
        type metadata accessor for __Engine();
        swift_allocObject();
        static __ServiceLocator.sharedEngine  = __Engine.init(coreEngine:)(v8);
        swift_release();
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      char v9 = static __ServiceLocator.sharedEngine;
      if (static __ServiceLocator.sharedEngine) {
        goto LABEL_34;
      }
    }
    else
    {
      static __ServiceLocator.sharedEngine  = 0;
      swift_release();
      char v9 = static __ServiceLocator.sharedEngine;
      if (static __ServiceLocator.sharedEngine) {
        goto LABEL_34;
      }
    }
    Default  = REEngineConfigurationCreateDefault();
    type metadata accessor for EngineConfiguration();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16)  = Default;
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v12 = REEngineConfigurationClone();
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16)  = v12;
      swift_release_n();
      uint64_t v11 = v13;
    }
    REEngineConfigurationSetClockMode();
    if (one-time initialization token for defaultServices != -1) {
      swift_once();
    }
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v14 = REEngineConfigurationClone();
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16)  = v14;
      swift_release_n();
      uint64_t v11 = v15;
    }
    REEngineConfigurationSetServicesToCreate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v16 = REEngineConfigurationClone();
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16)  = v16;
      swift_release_n();
      uint64_t v11 = v17;
    }
    REEngineConfigurationSetServicesToUpdate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v18 = REEngineConfigurationClone();
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16)  = v18;
      swift_release_n();
      uint64_t v11 = v19;
    }
    REEngineConfigurationSetStartupOptions();
    if (one-time initialization token for defaultRenderFlags != -1) {
      swift_once();
    }
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v20 = REEngineConfigurationClone();
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16)  = v20;
      swift_release_n();
      uint64_t v11 = v21;
    }
    REEngineConfigurationSetRenderFlags();
    if (!specialized static __ServiceLocator.__sharedEngine.getter())
    {
      v41[0]  = v11;
      double v22 = specialized static __Engine.makeSharedEngine(_:)(v41);
      REEngineSetShared();
      static __ServiceLocator.sharedEngine  = v22;
      swift_release();
      static __ServiceLocator.createdSharedEngine  = 1;
    }
    swift_release();
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
    uint64_t result = specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
    char v9 = static __ServiceLocator.sharedEngine;
    if (!static __ServiceLocator.sharedEngine) {
      goto LABEL_58;
    }
LABEL_34:
    uint64_t result = swift_beginAccess();
    uint64_t v23 = v9[5];
    if (!v23) {
      goto LABEL_57;
    }
    uint64_t v24 = v23 + 80;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v24, (uint64_t)v41);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
    type metadata accessor for SceneManager();
    swift_dynamicCast();
    REEntityGetComponentAtIndex();
    Class  = REComponentGetClass();
    swift_beginAccess();
    uint64_t v26 = *(void *)(v40 + 16);
    swift_beginAccess();
    uint64_t v27 = *(void *)(v26 + 24);
    if (*(void *)(v27 + 16))
    {
      uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(Class);
      if (v29) {
        break;
      }
    }
    if (one-time initialization token for handlesToCustomComponentTypes != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v32 = static SceneManager.handlesToCustomComponentTypes;
    if (*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
      && (uint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v34 & 1) != 0))
    {
      uint64_t v35 = *(void *)(*(void *)(v32 + 56) + 16 * v33);
      swift_endAccess();
      uint64_t v36 = *(void *)(v40 + 16);
      swift_beginAccess();
      if (!*(void *)(*(void *)(v36 + 16) + 16)
        || (specialized __RawDictionaryStorage.find<A>(_:)(v35), (v37 & 1) == 0))
      {
        uint64_t result = swift_release();
        goto LABEL_4;
      }
    }
    else
    {
      swift_endAccess();
    }
    uint64_t result = swift_release();
    uint64_t v31 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_54;
    }
LABEL_50:
    uint64_t result = REEntityGetComponentCount();
    ++v4;
    if (v31 >= result)
    {
      uint64_t v4 = v31;
LABEL_4:
      uint64_t v3 = a2;
      goto LABEL_5;
    }
  }
  int v30 = *(unsigned __int8 *)(*(void *)(v27 + 56) + 80 * v28 + 48);
  uint64_t result = swift_release();
  if (v30 == 2) {
    goto LABEL_4;
  }
  uint64_t v31 = v4 + 1;
  if (!__OFADD__(v4, 1)) {
    goto LABEL_50;
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    if (!a2) {
      return v3;
    }
    uint64_t v4 = a2 + result;
    uint64_t v5 = result;
    while ((v3 & 0x8000000000000000) == 0)
    {
      uint64_t result = REEntityGetChildCount();
      if (v5 >= result) {
        goto LABEL_10;
      }
      ++v5;
      if (!--v2) {
        return v4;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a4 < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
  }
  else
  {
    uint64_t v8 = a2;
    unint64_t v9 = result;
    uint64_t v10 = a5;
    char v11 = a3 & 1;
    if (a4)
    {
      long long v12 = *(_OWORD *)(v5 + 16);
      v28[0]  = *(_OWORD *)v5;
      v28[1]  = v12;
      uint64_t v29 = *(void *)(v5 + 32);
      outlined init with take of Transform?((uint64_t)v28 + 8, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
      char v13 = a3 & 1;
      uint64_t v14 = (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?;
      outlined copy of [A : B].Index._Variant<A, B>(v9, v8, v13);
      uint64_t v15 = 0;
      uint64_t v16 = v8;
      while (1)
      {
        uint64_t result = outlined init with take of Transform?((uint64_t)v31, (uint64_t)&v32, v14);
        uint64_t v17 = v32;
        if (!v32)
        {
          outlined init with take of Transform?((uint64_t)v28, (uint64_t)v30, &demangling cache variable for type metadata for AnimationLibraryResource?);
          outlined init with take of Transform?((uint64_t)v30, (uint64_t)&v33, &demangling cache variable for type metadata for AnimationLibraryResource?);
          if (v33) {
            uint64_t result = AnimationLibraryResource.keyedResources.getter();
          }
          else {
            uint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
          }
          uint64_t v17 = result;
        }
        if (v11) {
          goto LABEL_41;
        }
        if ((v9 & 0x8000000000000000) != 0 || (uint64_t v18 = 1 << *(unsigned char *)(v17 + 32), (uint64_t)v9 >= v18))
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        unint64_t v19 = v9 >> 6;
        uint64_t v20 = v17 + 64;
        unint64_t v21 = *(void *)(v17 + 64 + 8 * (v9 >> 6));
        if (((v21 >> v9) & 1) == 0) {
          goto LABEL_38;
        }
        if (*(_DWORD *)(v17 + 36) != v8) {
          goto LABEL_39;
        }
        unint64_t v22 = v21 & (-2 << (v9 & 0x3F));
        if (v22)
        {
          unint64_t v9 = __clz(__rbit64(v22)) | v9 & 0xFFFFFFFFFFFFFFC0;
          outlined retain of [String : String]((uint64_t)v31);
          uint64_t result = swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v23 = v19 + 1;
          unint64_t v24 = (unint64_t)(v18 + 63) >> 6;
          if (v19 + 1 < v24)
          {
            int v25 = v14;
            unint64_t v26 = *(void *)(v20 + 8 * v23);
            if (v26) {
              goto LABEL_19;
            }
            unint64_t v23 = v19 + 2;
            if (v19 + 2 >= v24)
            {
              outlined retain of [String : String]((uint64_t)v31);
              goto LABEL_31;
            }
            unint64_t v26 = *(void *)(v20 + 8 * v23);
            if (v26)
            {
LABEL_19:
              outlined retain of [String : String]((uint64_t)v31);
            }
            else
            {
              unint64_t v23 = v19 + 3;
              if (v19 + 3 >= v24) {
                goto LABEL_33;
              }
              unint64_t v26 = *(void *)(v20 + 8 * v23);
              if (!v26)
              {
                while (v24 - 4 != v19)
                {
                  unint64_t v26 = *(void *)(v17 + 96 + 8 * v19++);
                  if (v26)
                  {
                    unint64_t v23 = v19 + 3;
                    goto LABEL_29;
                  }
                }
LABEL_33:
                outlined retain of [String : String]((uint64_t)v31);
                outlined consume of [String : AnimationResource].Index._Variant(v9, v8, 0);
LABEL_31:
                uint64_t result = swift_bridgeObjectRelease();
                unint64_t v9 = v18;
LABEL_32:
                uint64_t v14 = v25;
                goto LABEL_5;
              }
LABEL_29:
              outlined retain of [String : String]((uint64_t)v31);
              outlined consume of [String : AnimationResource].Index._Variant(v9, v8, 0);
            }
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v9 = __clz(__rbit64(v26)) + (v23 << 6);
            goto LABEL_32;
          }
          outlined retain of [String : String]((uint64_t)v31);
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v9 = v18;
        }
LABEL_5:
        char v11 = 0;
        ++v15;
        uint64_t v8 = v16;
        if (v15 == a4)
        {
          uint64_t v8 = v16;
          uint64_t v10 = a5;
          goto LABEL_36;
        }
      }
    }
    uint64_t result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
LABEL_36:
    *(void *)uint64_t v10 = v9;
    *(void *)(v10 + 8)  = v8;
    *(unsigned char *)(v10 + 16)  = v11;
  }
  return result;
}

uint64_t AnimationLibraryResource.__deallocating_deinit()
{
  RERelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t AnimationLibraryResource.resource(_:)(unint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)(v1 + 24);
  if (*(void *)(v4 + 16) <= a1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v5 = v4 + 8 * a1;
  if (*(void *)(v5 + 32))
  {
    uint64_t v6 = *(void *)(v5 + 32);
LABEL_15:
    swift_retain();
    return v6;
  }
  Entry  = REAnimationLibraryAssetGetEntry();
  type metadata accessor for AnimationResource();
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = Entry;
  if (REAssetHandleAssetType() == 11) {
    REAnimationSceneAssetGetRootTimeline();
  }
  uint64_t Name = REAnimationAssetGetName();
  if (Name) {
    uint64_t Name = String.init(cString:)();
  }
  else {
    unint64_t v10 = 0xE000000000000000;
  }
  void v8[3] = Name;
  void v8[4] = v10;
  RERetain();
  REAssetSetSwiftObject();
  swift_beginAccess();
  uint64_t v11 = *v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v11;
  if ((result & 1) == 0) {
LABEL_18:
  }
    specialized _ArrayBuffer._consumeAndCreateNew()();
  if (*(void *)(v11 + 16) <= a1)
  {
    __break(1u);
    goto LABEL_20;
  }
  *(void *)(v11 + 8 * a1 + 32)  = v8;
  swift_release();
  specialized Array._endMutation()();
  uint64_t result = swift_endAccess();
  if (*(void *)(*v3 + 16) <= a1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)(*v3 + 8 * a1 + 32);
  if (v6)
  {
    swift_retain();
    goto LABEL_15;
  }
LABEL_21:
  __break(1u);
  return result;
}

unint64_t AnimationLibraryResource.keyedResources.getter()
{
  if (*(void *)(v0 + 32)) {
    return swift_bridgeObjectRetain();
  }
  uint64_t v2 = v0;
  uint64_t v3 = (uint64_t *)(v0 + 24);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_20:
    uint64_t v15 = *(void *)(v2 + 16);
    KeyCount  = REAnimationLibraryAssetGetKeyCount();
    if (KeyCount < 1)
    {
      *(void *)(v2 + 32)  = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      swift_bridgeObjectRelease();
      if (*(void *)(v2 + 32)) {
        return swift_bridgeObjectRetain();
      }
      __break(1u);
    }
    else
    {
      uint64_t v17 = KeyCount;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<Int8>);
      uint64_t v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v18 + 16)  = v17;
      REAnimationLibraryAssetGetKeys();
      *(void *)(v18 + 16)  = v17;
      swift_release();
      uint64_t v45 = *(void *)(v18 + 16);
      if (v45)
      {
        swift_bridgeObjectRetain();
        uint64_t v19 = 0;
        uint64_t v20 = (void *)MEMORY[0x263F8EE80];
        uint64_t v44 = v3;
        while (1)
        {
          EntryIndexFromKey  = REAnimationLibraryAssetGetEntryIndexFromKey();
          if (!EntryIndexFromKey) {
            goto LABEL_25;
          }
          unint64_t v22 = (unint64_t *)EntryIndexFromKey;
          uint64_t v23 = String.init(cString:)();
          unint64_t v25 = *v22;
          if ((*v22 & 0x8000000000000000) != 0) {
            goto LABEL_48;
          }
          if (v25 >= *(void *)(*v3 + 16)) {
            goto LABEL_49;
          }
          uint64_t v26 = *(void *)(*v3 + 8 * v25 + 32);
          if (!v26) {
            goto LABEL_54;
          }
          uint64_t v27 = v23;
          uint64_t v28 = v24;
          uint64_t v29 = v15;
          uint64_t v30 = v2;
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
          uint64_t v34 = v20[2];
          BOOL v35 = (v32 & 1) == 0;
          uint64_t v36 = v34 + v35;
          if (__OFADD__(v34, v35)) {
            goto LABEL_50;
          }
          char v37 = v32;
          if (v20[3] >= v36)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              if ((v32 & 1) == 0) {
                goto LABEL_37;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()();
              if ((v37 & 1) == 0) {
                goto LABEL_37;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
            unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
            if ((v37 & 1) != (v39 & 1)) {
              goto LABEL_56;
            }
            unint64_t v33 = v38;
            if ((v37 & 1) == 0)
            {
LABEL_37:
              v20[(v33 >> 6) + 8] |= 1 << v33;
              uint64_t v40 = (uint64_t *)(v20[6] + 16 * v33);
              *uint64_t v40 = v27;
              v40[1]  = v28;
              *(void *)(v20[7] + 8 * v33)  = v26;
              uint64_t v41 = v20[2];
              BOOL v42 = __OFADD__(v41, 1);
              uint64_t v43 = v41 + 1;
              if (v42) {
                goto LABEL_53;
              }
              v20[2]  = v43;
              swift_bridgeObjectRetain();
              goto LABEL_24;
            }
          }
          *(void *)(v20[7] + 8 * v33)  = v26;
          swift_release();
LABEL_24:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v2 = v30;
          uint64_t v15 = v29;
          uint64_t v3 = v44;
LABEL_25:
          if (v45 == ++v19)
          {
            swift_bridgeObjectRelease();
            goto LABEL_45;
          }
        }
      }
    }
    uint64_t v20 = (void *)MEMORY[0x263F8EE80];
LABEL_45:
    swift_bridgeObjectRelease();
    *(void *)(v2 + 32)  = v20;
    swift_bridgeObjectRelease();
    if (!*(void *)(v2 + 32)) {
      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    return swift_bridgeObjectRetain();
  }
  uint64_t v6 = -v5;
  uint64_t v7 = 4;
  while (1)
  {
    unint64_t v8 = v7 - 4;
    if ((unint64_t)(v7 - 4) >= *(void *)(v4 + 16)) {
      break;
    }
    if (!*(void *)(v4 + 8 * v7))
    {
      Entry  = REAnimationLibraryAssetGetEntry();
      type metadata accessor for AnimationResource();
      unint64_t v10 = (void *)swift_allocObject();
      v10[2]  = Entry;
      if (REAssetHandleAssetType() == 11) {
        REAnimationSceneAssetGetRootTimeline();
      }
      uint64_t Name = REAnimationAssetGetName();
      if (Name) {
        uint64_t Name = String.init(cString:)();
      }
      else {
        unint64_t v12 = 0xE000000000000000;
      }
      v10[3]  = Name;
      v10[4]  = v12;
      RERetain();
      REAssetSetSwiftObject();
      swift_beginAccess();
      uint64_t v13 = *v3;
      char v14 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v3 = v13;
      if ((v14 & 1) == 0) {
        specialized _ArrayBuffer._consumeAndCreateNew()();
      }
      if (v8 >= *(void *)(v13 + 16)) {
        goto LABEL_51;
      }
      *(void *)(v13 + 8 * v7)  = v10;
      swift_release();
      specialized Array._endMutation()();
      swift_endAccess();
      uint64_t v4 = *v3;
      if (v8 >= *(void *)(*v3 + 16)) {
        goto LABEL_52;
      }
      if (!*(void *)(v4 + 8 * v7)) {
        goto LABEL_55;
      }
    }
    ++v7;
    if (v6 + v7 == 4) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AnimationLibraryDefinition.addResource(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = v3[4];
  if (v9)
  {
    unint64_t v10 = v3[4];
  }
  else if (v8)
  {
    swift_beginAccess();
    int64_t v11 = *(void *)(*(void *)(v8 + 24) + 16);
    swift_retain();
    unint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v11);
    swift_release();
  }
  else
  {
    unint64_t v10 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  swift_retain();
  char v12 = specialized Sequence.contains(where:)(v10, a3);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v12 & 1) == 0)
  {
    if (v9)
    {
      swift_retain();
      uint64_t v13 = v9;
    }
    else if (v8)
    {
      swift_beginAccess();
      int64_t v14 = *(void *)(*(void *)(v8 + 24) + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v14);
      swift_release();
    }
    else
    {
      swift_retain();
      uint64_t v13 = MEMORY[0x263F8EE78];
    }
    uint64_t v15 = swift_bridgeObjectRetain();
    MEMORY[0x22A688E10](v15);
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_bridgeObjectRelease();
    v4[4]  = v13;
  }
  unint64_t v16 = v4[1];
  if (v16)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v17 = v16;
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    if (v8) {
      unint64_t v18 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    unint64_t v17 = v18;
  }
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, a1, a2, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  v4[1]  = v17;
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 88);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if ((a1 & 0xC000000000000001) != 0) {
    return __CocoaDictionary.startIndex.getter();
  }
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = 0;
    return __clz(__rbit64(v2)) + v3;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v1 = 1 << v5;
  if (v6 < 7) {
    return v1;
  }
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = 64;
    return __clz(__rbit64(v2)) + v3;
  }
  if (v6 < 8) {
    return v1;
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v3 = 128;
    return __clz(__rbit64(v2)) + v3;
  }
  unint64_t v7 = (unint64_t)(v1 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 88);
  uint64_t v3 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    uint64_t v2 = v10;
    --v8;
    v3 += 64;
    if (v10) {
      return __clz(__rbit64(v2)) + v3;
    }
  }
  return v1;
}

void *specialized Dictionary.subscript.getter(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    *uint64_t result = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    swift_bridgeObjectRetain();
    swift_retain();
    return (void *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v6 = a2;
  unint64_t v7 = (void *)result;
  if ((a5 & 0xC000000000000001) == 0)
  {
    if (a4) {
      goto LABEL_10;
    }
    if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
    {
      __break(1u);
    }
    else if ((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2))
    {
      if (*(_DWORD *)(a5 + 36) == a3)
      {
LABEL_12:
        uint64_t v11 = *(void *)(a5 + 56);
        uint64_t v8 = *(void *)(*(void *)(a5 + 48) + 8 * v6);
        *unint64_t v7 = *(void *)(v11 + 8 * v6);
        swift_retain();
        swift_retain();
        return v8;
      }
      __break(1u);
LABEL_10:
      uint64_t result = __CocoaDictionary.Index.age.getter();
      if (result == *(_DWORD *)(a5 + 36))
      {
        __CocoaDictionary.Index.key.getter();
        type metadata accessor for __REAsset();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)();
        char v10 = v9;
        uint64_t result = swift_release();
        if (v10) {
          goto LABEL_12;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_16;
  }
  if (a4)
  {
    __CocoaDictionary.lookup(_:)();
    type metadata accessor for __REAsset();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v8 = v12;
    swift_unknownObjectRelease();
    type metadata accessor for RESceneDescriptor();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    *unint64_t v7 = v12;
    swift_unknownObjectRelease();
    return v8;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t AnimationLibraryDefinition.removeResource(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if (v2[1])
  {
    unint64_t v7 = v2[1];
  }
  else if (v6)
  {
    unint64_t v7 = AnimationLibraryResource.keyedResources.getter();
  }
  else
  {
    unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  unint64_t v17 = v7;
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized Dictionary._Variant.removeValue(forKey:)(a1, a2);
  swift_bridgeObjectRelease();
  v2[1]  = v17;
  if (!v8) {
    return v8;
  }
  swift_retain_n();
  uint64_t v9 = swift_bridgeObjectRetain();
  char v10 = specialized Sequence.contains(where:)(v9, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (v10)
  {
    swift_release();
    return v8;
  }
  uint64_t v11 = v2[4];
  if (v11)
  {
    swift_retain();
    uint64_t v12 = v11;
  }
  else if (v6)
  {
    swift_beginAccess();
    int64_t v13 = *(void *)(*(void *)(v6 + 24) + 16);
    swift_retain();
    swift_retain();
    uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v13);
    swift_release();
  }
  else
  {
    swift_retain();
    uint64_t v12 = MEMORY[0x263F8EE78];
  }
  unint64_t v18 = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v14 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t *)&v18, v8);
  uint64_t result = swift_release();
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 >= v14) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16 >= v14)
    {
LABEL_16:
      specialized Array.replaceSubrange<A>(_:with:)(v14, v16);
      swift_release_n();
      swift_bridgeObjectRelease();
      v3[4]  = v18;
      return v8;
    }
  }
  __break(1u);
  return result;
}

uint64_t AnimationLibraryDefinition.removeAll(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if (v2[1])
  {
    uint64_t v5 = v2[1];
  }
  else
  {
    if (v4) {
      unint64_t v6 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    uint64_t v5 = v6;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v7 = specialized _NativeDictionary.filter(_:)(v5, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v2[1]  = v7;
  uint64_t v8 = v2[4];
  if (v8)
  {
    swift_retain();
    uint64_t v9 = v8;
  }
  else if (v4)
  {
    swift_beginAccess();
    int64_t v10 = *(void *)(*(void *)(v4 + 24) + 16);
    swift_retain();
    swift_retain();
    uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v10);
    swift_release();
  }
  else
  {
    swift_retain();
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  unint64_t v14 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v11 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t *)&v14, a1);
  uint64_t result = swift_release();
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v13 >= v11) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13 >= v11)
    {
LABEL_14:
      specialized Array.replaceSubrange<A>(_:with:)(v11, v13);
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      v2[4]  = v14;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t AnimationLibraryDefinition.defaultResource.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = specialized AnimationLibraryDefinition.defaultResourceKey.getter(*v0, v1, v0[2], v0[3]);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    if (v1)
    {
      if (*(void *)(v1 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
        if (v8)
        {
          EntryIndexFromKey  = *(unint64_t **)(*(void *)(v1 + 56) + 8 * v7);
          swift_retain();
          swift_bridgeObjectRelease_n();
          return (uint64_t)EntryIndexFromKey;
        }
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    else if (v2)
    {
      String.utf8CString.getter();
      EntryIndexFromKey  = (unint64_t *)REAnimationLibraryAssetGetEntryIndexFromKey();
      swift_release();
      if (EntryIndexFromKey) {
        EntryIndexFromKey  = (unint64_t *)AnimationLibraryResource.resource(_:)(*EntryIndexFromKey);
      }
      swift_bridgeObjectRelease();
      return (uint64_t)EntryIndexFromKey;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  outlined init with take of Transform?((uint64_t)(v0 + 4), (uint64_t)&v14, &demangling cache variable for type metadata for [AnimationResource]?);
  uint64_t result = outlined init with take of Transform?((uint64_t)&v14, (uint64_t)&v15, &demangling cache variable for type metadata for [AnimationResource]?);
  unint64_t v11 = v15;
  if (!v15)
  {
    if (!v2) {
      return 0;
    }
    return AnimationLibraryResource.resource(_:)(0);
  }
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = outlined release of [String : String]((uint64_t)&v14);
    if (v13 <= 0) {
      return 0;
    }
  }
  else if (*(uint64_t *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 0)
  {
    return 0;
  }
  if ((v11 & 0xC000000000000001) != 0) {
    return MEMORY[0x22A689930](0, v11);
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    EntryIndexFromKey  = *(unint64_t **)(v11 + 32);
    swift_retain();
    return (uint64_t)EntryIndexFromKey;
  }
  __break(1u);
  return result;
}

uint64_t AnimationLibraryDefinition.createAsset()()
{
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  if (!MEMORY[0x22A692220](ServiceLocator)) {
    return 0;
  }
  uint64_t v57 = 0;
  char v58 = (void *)MEMORY[0x263F8EE80];
  REAnimationLibraryDefinitionCreate();
  outlined init with take of Transform?(v0 + 32, (uint64_t)v60, &demangling cache variable for type metadata for [AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v60, (uint64_t)&v61, &demangling cache variable for type metadata for [AnimationResource]?);
  unint64_t v2 = v61;
  if (v61)
  {
    if (!(v61 >> 62)) {
      goto LABEL_4;
    }
LABEL_31:
    swift_bridgeObjectRetain_n();
    outlined retain of [String : String]((uint64_t)v60);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v53 = (uint64_t *)v0;
    if (v3) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
  outlined init with take of Transform?(v0, (uint64_t)v59, &demangling cache variable for type metadata for AnimationLibraryResource?);
  outlined init with take of Transform?((uint64_t)v59, (uint64_t)&v62, &demangling cache variable for type metadata for AnimationLibraryResource?);
  uint64_t v25 = v62;
  if (v62)
  {
    swift_beginAccess();
    int64_t v26 = *(void *)(*(void *)(v25 + 24) + 16);
    outlined retain of OrbitEntityActionHandler((uint64_t)v59);
    unint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v26);
    outlined release of TimelineDefinition?((uint64_t)v59);
    if (v2 >> 62) {
      goto LABEL_31;
    }
  }
  else
  {
    unint64_t v2 = MEMORY[0x263F8EE78];
    if (MEMORY[0x263F8EE78] >> 62) {
      goto LABEL_31;
    }
  }
LABEL_4:
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  outlined retain of [String : String]((uint64_t)v60);
  uint64_t v53 = (uint64_t *)v0;
  if (v3)
  {
LABEL_5:
    swift_beginAccess();
    uint64_t v56 = 0;
    uint64_t v4 = 4;
    while (1)
    {
      uint64_t v5 = v4 - 4;
      if ((v2 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x22A689930](v4 - 4, v2);
        uint64_t v7 = v4 - 3;
        if (__OFADD__(v5, 1)) {
          goto LABEL_77;
        }
      }
      else
      {
        uint64_t v6 = *(void *)(v2 + 8 * v4);
        swift_retain();
        uint64_t v7 = v4 - 3;
        if (__OFADD__(v5, 1))
        {
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
      }
      Swift::UInt v8 = *(void *)(v6 + 16);
      swift_beginAccess();
      if (v58[2])
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v8);
        if (v9)
        {
          swift_endAccess();
          goto LABEL_7;
        }
      }
      swift_endAccess();
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      uint64_t v13 = v58[2];
      BOOL v14 = (v11 & 1) == 0;
      uint64_t v15 = v13 + v14;
      if (__OFADD__(v13, v14)) {
        goto LABEL_80;
      }
      char v16 = v11;
      if (v58[3] >= v15)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v19 = v58;
          if ((v11 & 1) == 0) {
            goto LABEL_19;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v19 = v58;
          if ((v16 & 1) == 0) {
            goto LABEL_19;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
        uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
        if ((v16 & 1) != (v18 & 1)) {
          goto LABEL_86;
        }
        unint64_t v12 = v17;
        uint64_t v19 = v58;
        if ((v16 & 1) == 0)
        {
LABEL_19:
          v19[(v12 >> 6) + 8] |= 1 << v12;
          uint64_t v20 = 8 * v12;
          *(void *)(v19[6] + v20)  = v8;
          *(void *)(v19[7] + v20)  = v56;
          uint64_t v21 = v19[2];
          BOOL v22 = __OFADD__(v21, 1);
          uint64_t v23 = v21 + 1;
          if (v22) {
            goto LABEL_84;
          }
          v19[2]  = v23;
          goto LABEL_24;
        }
      }
      *(void *)(v19[7] + 8 * v12)  = v56;
LABEL_24:
      char v58 = v19;
      swift_bridgeObjectRelease();
      swift_endAccess();
      REAnimationLibraryDefinitionAddEntryAsset();
      if (__OFADD__(v57, 1)) {
        goto LABEL_81;
      }
      uint64_t v56 = ++v57;
LABEL_7:
      swift_release();
      ++v4;
      if (v7 == v3) {
        goto LABEL_33;
      }
    }
  }
LABEL_32:
  uint64_t v56 = 0;
LABEL_33:
  swift_bridgeObjectRelease_n();
  uint64_t v27 = v53[1];
  if (!v27)
  {
LABEL_71:
    specialized AnimationLibraryDefinition.defaultResourceKey.getter(*v53, v27, v53[2], v53[3]);
    if (v51)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REAnimationLibraryDefinitionSetDefaultEntryKey();
      swift_release();
    }
    AnimationLibraryuint64_t Asset = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
    RERelease();
    swift_bridgeObjectRelease();
    return AnimationLibraryAsset;
  }
  uint64_t v54 = v27 + 64;
  uint64_t v28 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & *(void *)(v27 + 64);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v31 = 0;
  int64_t v55 = (unint64_t)(v28 + 63) >> 6;
  while (v30)
  {
    unint64_t v32 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    unint64_t v33 = v32 | (v31 << 6);
LABEL_52:
    Swift::UInt v36 = *(void *)(*(void *)(*(void *)(v27 + 56) + 8 * v33) + 16);
    swift_beginAccess();
    if (v58[2] && (specialized __RawDictionaryStorage.find<A>(_:)(v36), (v37 & 1) != 0))
    {
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      uint64_t v38 = v27;
      swift_endAccess();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_retain();
      char v39 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
      uint64_t v42 = v58[2];
      BOOL v43 = (v40 & 1) == 0;
      uint64_t v44 = v42 + v43;
      if (__OFADD__(v42, v43)) {
        goto LABEL_78;
      }
      char v45 = v40;
      if (v58[3] >= v44)
      {
        if ((v39 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, v39);
        uint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
        if ((v45 & 1) != (v47 & 1)) {
          goto LABEL_86;
        }
        unint64_t v41 = v46;
      }
      if (v45)
      {
        *(void *)(v58[7] + 8 * v41)  = v56;
      }
      else
      {
        v58[(v41 >> 6) + 8] |= 1 << v41;
        uint64_t v48 = 8 * v41;
        *(void *)(v58[6] + v48)  = v36;
        *(void *)(v58[7] + v48)  = v56;
        uint64_t v49 = v58[2];
        BOOL v22 = __OFADD__(v49, 1);
        uint64_t v50 = v49 + 1;
        if (v22) {
          goto LABEL_83;
        }
        _OWORD v58[2] = v50;
      }
      swift_bridgeObjectRelease();
      swift_endAccess();
      REAnimationLibraryDefinitionAddEntryAsset();
      if (__OFADD__(v57, 1)) {
        goto LABEL_79;
      }
      uint64_t v27 = v38;
      uint64_t v56 = ++v57;
    }
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REAnimationLibraryDefinitionAddKeyedEntryIndex();
    swift_release();
    swift_release();
  }
  BOOL v22 = __OFADD__(v31++, 1);
  if (v22) {
    goto LABEL_82;
  }
  if (v31 >= v55)
  {
LABEL_70:
    swift_release();
    goto LABEL_71;
  }
  unint64_t v34 = *(void *)(v54 + 8 * v31);
  if (v34)
  {
LABEL_51:
    unint64_t v30 = (v34 - 1) & v34;
    unint64_t v33 = __clz(__rbit64(v34)) + (v31 << 6);
    goto LABEL_52;
  }
  int64_t v35 = v31 + 1;
  if (v31 + 1 >= v55) {
    goto LABEL_70;
  }
  unint64_t v34 = *(void *)(v54 + 8 * v35);
  if (v34) {
    goto LABEL_50;
  }
  int64_t v35 = v31 + 2;
  if (v31 + 2 >= v55) {
    goto LABEL_70;
  }
  unint64_t v34 = *(void *)(v54 + 8 * v35);
  if (v34) {
    goto LABEL_50;
  }
  int64_t v35 = v31 + 3;
  if (v31 + 3 >= v55) {
    goto LABEL_70;
  }
  unint64_t v34 = *(void *)(v54 + 8 * v35);
  if (v34)
  {
LABEL_50:
    int64_t v31 = v35;
    goto LABEL_51;
  }
  while (1)
  {
    int64_t v31 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v31 >= v55) {
      goto LABEL_70;
    }
    unint64_t v34 = *(void *)(v54 + 8 * v31);
    ++v35;
    if (v34) {
      goto LABEL_51;
    }
  }
LABEL_85:
  __break(1u);
LABEL_86:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

__n128 AnimationLibraryComponent.init(dictionaryLiteral:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized AnimationLibraryDefinition.init(_:)(a1, (uint64_t)v7);
  __n128 v5 = (__n128)v7[1];
  long long v6 = v7[0];
  uint64_t v3 = v8;
  swift_bridgeObjectRelease();
  __n128 result = v5;
  *(_OWORD *)a2  = v6;
  *(__n128 *)(a2 + 16)  = v5;
  *(void *)(a2 + 32)  = v3;
  return result;
}

double AnimationLibraryComponent.init(animations:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AnimationLibraryComponent.AnimationCollection.init(dictionary:)(a1, (uint64_t)v6);
  uint64_t v3 = v7;
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a2  = v6[0];
  *(_OWORD *)(a2 + 16)  = v5;
  *(void *)(a2 + 32)  = v3;
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.init(dictionary:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  int64_t v4 = 0;
  *(void *)&long long v19 = 0;
  *((void *)&v19 + 1)  = MEMORY[0x263F8EE80];
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v16 >= v9) {
      goto LABEL_21;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    ++v4;
    if (!v17)
    {
      int64_t v4 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_21;
      }
      unint64_t v17 = *(void *)(v5 + 8 * v4);
      if (!v17)
      {
        int64_t v4 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_21;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v4);
        if (!v17) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v11 = __clz(__rbit64(v17)) + (v4 << 6);
LABEL_5:
    unint64_t v12 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = *(void *)(*(void *)(v2 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_retain();
    AnimationLibraryDefinition.addResource(_:_:)(v13, v14, v15);
    swift_bridgeObjectRelease();
    double result = swift_release();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_21:
    double result = swift_release();
    *(_OWORD *)a2  = v19;
    *(_OWORD *)(a2 + 16)  = xmmword_228323FE0;
    *(void *)(a2 + 32)  = 0;
    return result;
  }
  unint64_t v17 = *(void *)(v5 + 8 * v18);
  if (v17)
  {
    int64_t v4 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_21;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v4);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

double AnimationLibraryComponent.init()@<D0>(uint64_t a1@<X8>)
{
  specialized AnimationLibraryDefinition.init(_:)(MEMORY[0x263F8EE78], (uint64_t)v5);
  uint64_t v2 = v6;
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1  = v5[0];
  *(_OWORD *)(a1 + 16)  = v4;
  *(void *)(a1 + 32)  = v2;
  return result;
}

uint64_t AnimationLibraryComponent.defaultAnimation.getter()
{
  return AnimationLibraryDefinition.defaultResource.getter();
}

uint64_t AnimationLibraryComponent.defaultKey.getter()
{
  return specialized AnimationLibraryDefinition.defaultResourceKey.getter(*v0, v0[1], v0[2], v0[3]);
}

uint64_t key path getter for AnimationLibraryComponent.defaultKey : AnimationLibraryComponent@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v5, v6);
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized AnimationLibraryDefinition.defaultResourceKey.getter(v3, v4, v5, v6);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of String??(v5, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v7;
  a2[1]  = v9;
  return result;
}

uint64_t AnimationLibraryComponent.defaultKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of String??(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16)  = a1;
  *(void *)(v2 + 24)  = a2;
  return result;
}

uint64_t (*AnimationLibraryComponent.defaultKey.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2]  = (uint64_t)v1;
  *a1  = specialized AnimationLibraryDefinition.defaultResourceKey.getter(*v1, v1[1], v1[2], v1[3]);
  a1[1]  = v3;
  return AnimationLibraryComponent.defaultKey.modify;
}

uint64_t AnimationLibraryComponent.defaultKey.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  if (a2)
  {
    swift_bridgeObjectRetain();
    outlined consume of String??(v5, v6);
    *(void *)(v3 + 16)  = v4;
    *(void *)(v3 + 24)  = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = outlined consume of String??(*(void *)(v3 + 16), *(void *)(v3 + 24));
    *(void *)(v3 + 16)  = v4;
    *(void *)(v3 + 24)  = v2;
  }
  return result;
}

uint64_t static AnimationLibraryComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return AnimationLibraryComponent.init(_:)(a1);
}

uint64_t AnimationLibraryComponent.init(_:)@<X0>(uint64_t a1@<X8>)
{
  AnimationLibraryuint64_t Asset = REAnimationLibraryComponentGetAnimationLibraryAsset();
  if (AnimationLibraryAsset)
  {
    uint64_t v3 = AnimationLibraryAsset;
    type metadata accessor for AnimationLibraryResource();
    uint64_t v4 = (void *)swift_allocObject();
    v4[4]  = 0;
    void v4[2] = v3;
    RERetain();
    EntryCount  = REAnimationLibraryAssetGetEntryCount();
    uint64_t result = specialized Array.init(repeating:count:)(0, EntryCount);
    uint64_t v7 = 0;
    v4[3]  = result;
    long long v8 = (unint64_t)v4;
    long long v9 = xmmword_228323FE0;
  }
  else
  {
    uint64_t result = specialized AnimationLibraryDefinition.init(_:)(MEMORY[0x263F8EE78], (uint64_t)v10);
    long long v8 = v10[0];
    long long v9 = v10[1];
    uint64_t v7 = v11;
  }
  *(_OWORD *)a1  = v8;
  *(_OWORD *)(a1 + 16)  = v9;
  *(void *)(a1 + 32)  = v7;
  return result;
}

uint64_t AnimationLibraryComponent.__toCore(_:)()
{
  long long v1 = v0[1];
  long long v3 = *v0;
  long long v4 = v1;
  uint64_t v5 = *((void *)v0 + 4);
  outlined init with take of Transform?((uint64_t)&v3 + 8, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v9, (uint64_t)&v10, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  if (v10
    || (outlined init with take of Transform?((uint64_t)&v4, (uint64_t)v8, &demangling cache variable for type metadata for String??), outlined init with take of Transform?((uint64_t)v8, (uint64_t)v11, &demangling cache variable for type metadata for String??), v12 != 1)|| (outlined init with take of Transform?((uint64_t)&v5, (uint64_t)v7, &demangling cache variable for type metadata for [AnimationResource]?), outlined init with take of Transform?((uint64_t)v7, (uint64_t)&v13, &demangling cache variable for type metadata for [AnimationResource]?), v13))
  {
    uint64_t result = AnimationLibraryDefinition.createAsset()();
    if (!result) {
      return result;
    }
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  }
  outlined init with take of Transform?((uint64_t)&v3, (uint64_t)v6, &demangling cache variable for type metadata for AnimationLibraryResource?);
  uint64_t result = outlined init with take of Transform?((uint64_t)v6, (uint64_t)&v14, &demangling cache variable for type metadata for AnimationLibraryResource?);
  if (v14) {
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  }
  return result;
}

void static AnimationLibraryComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1  = 45;
}

uint64_t AnimationLibraryComponent.animations.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  *a1  = v3;
  a1[1]  = v2;
  a1[2]  = v4;
  a1[3]  = v5;
  a1[4]  = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v4, v5);

  return swift_bridgeObjectRetain();
}

__n128 AnimationLibraryComponent.animations.setter(long long *a1)
{
  __n128 v6 = (__n128)a1[1];
  long long v7 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of String??(v3, v4);
  swift_bridgeObjectRelease();
  __n128 result = v6;
  *(_OWORD *)uint64_t v1 = v7;
  *(__n128 *)(v1 + 16)  = v6;
  *(void *)(v1 + 32)  = v2;
  return result;
}

uint64_t (*AnimationLibraryComponent.animations.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AnimationLibraryComponent.AnimationCollection.count.getter()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 24);
  }
  else
  {
    uint64_t v2 = v0[1];
    if (!v2) {
      return 0;
    }
  }
  return *(void *)(v2 + 16);
}

BOOL AnimationLibraryComponent.AnimationCollection.isEmpty.getter()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 24);
  }
  else
  {
    uint64_t v2 = v0[1];
    if (!v2) {
      return 1;
    }
  }
  return *(void *)(v2 + 16) == 0;
}

uint64_t AnimationLibraryComponent.AnimationCollection.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  if (*v1)
  {
    swift_retain();
    unint64_t v3 = AnimationLibraryResource.keyedResources.getter();
    uint64_t v4 = specialized Dictionary.startIndex.getter(v3);
    uint64_t v6 = v5;
    char v8 = v7;
    swift_release();
  }
  else
  {
    if (v1[1]) {
      unint64_t v9 = v1[1];
    }
    else {
      unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    uint64_t v4 = specialized Dictionary.startIndex.getter(v9);
    uint64_t v6 = v10;
    char v8 = v11;
    swift_bridgeObjectRetain();
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1  = v4;
  *(void *)(a1 + 8)  = v6;
  *(unsigned char *)(a1 + 16)  = v8 & 1;
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.endIndex.getter@<X0>(uint64_t a1@<X8>)
{
  if (*v1)
  {
    swift_retain();
    unint64_t v3 = AnimationLibraryResource.keyedResources.getter();
    swift_release();
    char v4 = *(unsigned char *)(v3 + 32);
    unsigned int v5 = *(_DWORD *)(v3 + 36);
  }
  else
  {
    if (v1[1]) {
      unint64_t v6 = v1[1];
    }
    else {
      unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    char v4 = *(unsigned char *)(v6 + 32);
    unsigned int v5 = *(_DWORD *)(v6 + 36);
    swift_bridgeObjectRetain();
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1  = 1 << v4;
  *(void *)(a1 + 8)  = v5;
  *(unsigned char *)(a1 + 16)  = 0;
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.makeIterator()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  if (!v3)
  {
    if (*v1) {
      unint64_t v6 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    unint64_t v3 = v6;
  }
  uint64_t v7 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t v8 = *(void *)(v3 + 64);
  swift_release();
  outlined consume of String??(v4, v5);
  uint64_t result = swift_bridgeObjectRelease();
  if (-v7 < 64) {
    uint64_t v10 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v10 = -1;
  }
  *a1  = v3;
  a1[1]  = v3 + 64;
  a1[2]  = ~v7;
  a1[3]  = 0;
  a1[4]  = v10 & v8;
  return result;
}

uint64_t (*AnimationLibraryComponent.AnimationCollection.subscript.modify(void *a1, uint64_t a2, uint64_t a3))()
{
  a1[2]  = a3;
  a1[3]  = v3;
  a1[1]  = a2;
  *a1  = AnimationLibraryComponent.AnimationCollection.subscript.getter(a2, a3);
  return AnimationLibraryComponent.AnimationCollection.subscript.modify;
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  uint64_t v10 = *v2;
  uint64_t v9 = v2[1];
  uint64_t v11 = v2[2];
  uint64_t v12 = v2[3];
  uint64_t v13 = v2[4];
  *(void *)(a2 + 48)  = v10;
  *(void *)(a2 + 56)  = v9;
  *(void *)(a2 + 64)  = v11;
  *(void *)(a2 + 72)  = v12;
  *(void *)(a2 + 80)  = v13;
  *(void *)a2  = v3;
  *(void *)(a2 + 8)  = v4;
  *(unsigned char *)(a2 + 16)  = v5;
  *(void *)(a2 + 24)  = v6;
  *(void *)(a2 + 32)  = v7;
  *(unsigned char *)(a2 + 40)  = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v11, v12);
  swift_bridgeObjectRetain();
  outlined copy of [A : B].Index._Variant<A, B>(v3, v4, v5);

  return outlined copy of [A : B].Index._Variant<A, B>(v6, v7, v8);
}

uint64_t AnimationLibraryComponent.AnimationCollection.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  if (v2[1])
  {
    uint64_t v7 = v2[1];
  }
  else
  {
    if (*v2) {
      unint64_t v8 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    uint64_t v7 = v8;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized _NativeDictionary.index(after:)(v4, v5, v6, v7);
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2  = v9;
  *(void *)(a2 + 8)  = v11;
  *(unsigned char *)(a2 + 16)  = v13 & 1;
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.formIndex(after:)(uint64_t a1)
{
  if (v1[1])
  {
    uint64_t v3 = v1[1];
  }
  else
  {
    if (*v1) {
      unint64_t v4 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized _NativeDictionary.index(after:)(v5, v6, v7, v3);
  uint64_t v10 = v9;
  char v12 = v11;
  outlined consume of [String : AnimationResource].Index._Variant(v5, v6, v7);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1  = v8;
  *(void *)(a1 + 8)  = v10;
  *(unsigned char *)(a1 + 16)  = v12 & 1;
  return result;
}

void *AnimationLibraryComponent.AnimationCollection.subscript.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  if (v1[1])
  {
    uint64_t v5 = v1[1];
  }
  else
  {
    if (*v1) {
      unint64_t v6 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    uint64_t v5 = v6;
  }
  char v7 = specialized Dictionary.subscript.getter(&v9, v2, v3, v4, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t AnimationLibraryComponent.AnimationCollection.Iterator.next()()
{
  int64_t v2 = v0[3];
  unint64_t v1 = v0[4];
  if (v1)
  {
    uint64_t v3 = (v1 - 1) & v1;
    unint64_t v4 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
    uint64_t v5 = *(void *)(*(void *)(*v0 + 48) + 16 * v4);
    swift_bridgeObjectRetain();
    swift_retain();
LABEL_4:
    v0[3]  = v2;
    v0[4]  = v3;
    return v5;
  }
  int64_t v7 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    int64_t v8 = (unint64_t)(v0[2] + 64) >> 6;
    if (v7 >= v8)
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
      goto LABEL_4;
    }
    uint64_t v9 = v0[1];
    unint64_t v10 = *(void *)(v9 + 8 * v7);
    if (v10) {
      goto LABEL_8;
    }
    if (v2 + 2 < v8)
    {
      unint64_t v10 = *(void *)(v9 + 8 * (v2 + 2));
      if (v10)
      {
        int64_t v7 = v2 + 2;
LABEL_8:
        uint64_t v3 = (v10 - 1) & v10;
        unint64_t v4 = __clz(__rbit64(v10)) + (v7 << 6);
        int64_t v2 = v7;
        goto LABEL_3;
      }
      if (v2 + 3 >= v8)
      {
        uint64_t v3 = 0;
        uint64_t v5 = 0;
        v2 += 2;
        goto LABEL_4;
      }
      unint64_t v10 = *(void *)(v9 + 8 * (v2 + 3));
      if (v10)
      {
        int64_t v7 = v2 + 3;
        goto LABEL_8;
      }
      int64_t v7 = v2 + 4;
      if (v2 + 4 >= v8)
      {
        uint64_t v3 = 0;
        uint64_t v5 = 0;
        v2 += 3;
        goto LABEL_4;
      }
      unint64_t v10 = *(void *)(v9 + 8 * v7);
      if (v10) {
        goto LABEL_8;
      }
      int64_t v7 = v8 - 1;
      int64_t v11 = v2 + 5;
      while (v8 != v11)
      {
        unint64_t v10 = *(void *)(v9 + 8 * v11++);
        if (v10)
        {
          int64_t v7 = v11 - 1;
          goto LABEL_8;
        }
      }
    }
    uint64_t v3 = 0;
    uint64_t v5 = 0;
    int64_t v2 = v7;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance AnimationLibraryComponent.AnimationCollection.Iterator@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnimationLibraryComponent.AnimationCollection.Iterator.next()();
  *a1  = result;
  a1[1]  = v3;
  a1[2]  = v4;
  return result;
}

BOOL static AnimationLibraryComponent.AnimationCollection.Index.< infix(_:_:)(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result < *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.Index.hash(into:)()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(v1, v2, v3);
  type metadata accessor for AnimationResource();
  Dictionary.Index.hash(into:)();

  return outlined consume of [String : AnimationResource].Index._Variant(v1, v2, v3);
}

BOOL static AnimationLibraryComponent.AnimationCollection.Index.== infix(_:_:)(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result == *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int AnimationLibraryComponent.AnimationCollection.Index.hashValue.getter()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance AnimationLibraryComponent.AnimationCollection.Index(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result < *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AnimationLibraryComponent.AnimationCollection.Index(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 16) & 1) == 0 && (*(unsigned char *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(void *)(result + 8)) {
      return *(void *)a2 >= *(void *)result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AnimationLibraryComponent.AnimationCollection.Index(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result >= *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance AnimationLibraryComponent.AnimationCollection.Index(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 16) & 1) == 0 && (*(unsigned char *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(void *)(result + 8)) {
      return *(void *)a2 < *(void *)result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnimationLibraryComponent.AnimationCollection.Index()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnimationLibraryComponent.AnimationCollection.Index()
{
  type metadata accessor for AnimationResource();

  return Dictionary.Index.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnimationLibraryComponent.AnimationCollection.Index()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnimationLibraryComponent.AnimationCollection.Index(BOOL result, uint64_t a2)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0 && (*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(void *)(a2 + 8)) {
      return *(void *)result == *(void *)a2;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AnimationLibraryComponent.AnimationCollection(void *a1, uint64_t a2))(void (***a1)(void, void), uint64_t a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1  = v4;
  uint64_t v5 = AnimationLibraryComponent.AnimationCollection.subscript.read(v4, a2);
  v4[4]  = v6;
  v4 += 4;
  void v4[2] = v7;
  v4[3]  = v5;
  v4[1]  = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  return protocol witness for Collection.subscript.read in conformance AnimationLibraryComponent.AnimationCollection;
}

void protocol witness for Collection.subscript.read in conformance AnimationLibraryComponent.AnimationCollection(void (***a1)(void, void), uint64_t a2)
{
  char v3 = *a1;
  swift_bridgeObjectRelease();
  swift_release();
  v3[7](v3, a2);

  free(v3);
}

uint64_t (*AnimationLibraryComponent.AnimationCollection.subscript.read(void *a1, uint64_t a2))()
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 16);
  if (v2[1])
  {
    uint64_t v7 = v2[1];
  }
  else
  {
    if (*v2) {
      unint64_t v8 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    uint64_t v7 = v8;
  }
  specialized Dictionary.subscript.getter(&v11, v4, v5, v6, v7);
  *a1  = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1]  = v11;
  return AnimationLibraryComponent.AnimationCollection.subscript.read;
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.read()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Collection.subscript.getter in conformance AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  uint64_t v10 = *v2;
  uint64_t v9 = v2[1];
  uint64_t v11 = v2[2];
  uint64_t v12 = v2[3];
  uint64_t v13 = v2[4];
  *(void *)(a2 + 48)  = v10;
  *(void *)(a2 + 56)  = v9;
  *(void *)(a2 + 64)  = v11;
  *(void *)(a2 + 72)  = v12;
  *(void *)(a2 + 80)  = v13;
  *(void *)a2  = v3;
  *(void *)(a2 + 8)  = v4;
  *(unsigned char *)(a2 + 16)  = v5;
  *(void *)(a2 + 24)  = v6;
  *(void *)(a2 + 32)  = v7;
  *(unsigned char *)(a2 + 40)  = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v11, v12);
  swift_bridgeObjectRetain();
  outlined copy of [A : B].Index._Variant<A, B>(v3, v4, v5);

  return outlined copy of [A : B].Index._Variant<A, B>(v6, v7, v8);
}

uint64_t protocol witness for Collection.indices.getter in conformance AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X8>)
{
  return specialized Collection<>.indices.getter(a1);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AnimationLibraryComponent.AnimationCollection()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 24);
  }
  else
  {
    uint64_t v2 = v0[1];
    if (!v2) {
      return 1;
    }
  }
  return *(void *)(v2 + 16) == 0;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(void *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 16)  = -2;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), a2, *(void *)a3, *(void *)(a3 + 8), *(unsigned char *)(a3 + 16), a4);
}

int64_t protocol witness for Collection.distance(from:to:) in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1, uint64_t a2)
{
  return specialized Collection.distance(from:to:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  long long v5 = a2[1];
  long long v7 = *a2;
  v8[0]  = v5;
  *(_OWORD *)((char *)v8 + 9)  = *(long long *)((char *)a2 + 25);
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(v2, v3, v4, &v7);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AnimationLibraryComponent.AnimationCollection(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_13;
  }
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a2 + 40))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(void *)(a2 + 32) != v2) {
    goto LABEL_11;
  }
  if (*(void *)(a2 + 24) < *(void *)result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  if (*(unsigned char *)(result + 16) & 1) != 0 || (*(unsigned char *)(a2 + 16)) {
    goto LABEL_13;
  }
  if (*(_DWORD *)(result + 8) != *(void *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)result < *(void *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((*(unsigned char *)(a2 + 40) | *(unsigned char *)(result + 40)))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(void *)(a2 + 32) != *(void *)(result + 32)) {
    goto LABEL_11;
  }
  if (*(void *)(a2 + 24) < *(void *)(result + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  if (v2[1])
  {
    uint64_t v7 = v2[1];
  }
  else
  {
    if (*v2) {
      unint64_t v8 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    uint64_t v7 = v8;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized _NativeDictionary.index(after:)(v4, v5, v6, v7);
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2  = v9;
  *(void *)(a2 + 8)  = v11;
  *(unsigned char *)(a2 + 16)  = v13 & 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1)
{
  if (v1[1])
  {
    uint64_t v3 = v1[1];
  }
  else
  {
    if (*v1) {
      unint64_t v4 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized _NativeDictionary.index(after:)(v5, v6, v7, v3);
  uint64_t v10 = v9;
  char v12 = v11;
  outlined consume of [String : AnimationResource].Index._Variant(v5, v6, v7);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1  = v8;
  *(void *)(a1 + 8)  = v10;
  *(unsigned char *)(a1 + 16)  = v12 & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AnimationLibraryComponent.AnimationCollection@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  if (v3) {
    goto LABEL_4;
  }
  if (*v1)
  {
    unint64_t v3 = AnimationLibraryResource.keyedResources.getter();
LABEL_4:
    swift_release();
    goto LABEL_5;
  }
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
LABEL_5:
  outlined consume of String??(v4, v5);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = -1;
  uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
  if (-v8 < 64) {
    uint64_t v7 = ~(-1 << -(char)v8);
  }
  uint64_t v9 = v7 & *(void *)(v3 + 64);
  *a1  = v3;
  a1[1]  = v3 + 64;
  a1[2]  = ~v8;
  a1[3]  = 0;
  a1[4]  = v9;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance AnimationLibraryComponent.AnimationCollection()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 24);
  }
  else
  {
    uint64_t v2 = v0[1];
    if (!v2) {
      return 0;
    }
  }
  return *(void *)(v2 + 16);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance AnimationLibraryComponent.AnimationCollection(a1, a2, (uint64_t (*)(_OWORD *))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AnimationLibraryComponent.AnimationCollection(unint64_t *a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance AnimationLibraryComponent@<X0>(uint64_t a1@<X8>)
{
  return AnimationLibraryComponent.init(_:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance AnimationLibraryComponent(_DWORD *a1@<X8>)
{
  *a1  = 45;
}

__n128 protocol witness for ExpressibleByDictionaryLiteral.init(dictionaryLiteral:) in conformance AnimationLibraryComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized AnimationLibraryDefinition.init(_:)(a1, (uint64_t)v7);
  __n128 v5 = (__n128)v7[1];
  long long v6 = v7[0];
  uint64_t v3 = v8;
  swift_bridgeObjectRelease();
  __n128 result = v5;
  *(_OWORD *)a2  = v6;
  *(__n128 *)(a2 + 16)  = v5;
  *(void *)(a2 + 32)  = v3;
  return result;
}

double _Proto_AnimationLibraryComponent_v1.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE80];
  *(void *)a1  = 0;
  *(void *)(a1 + 8)  = v1;
  double result = 0.0;
  *(_OWORD *)(a1 + 16)  = xmmword_228323FE0;
  *(void *)(a1 + 32)  = 0;
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2[1];
  if (!v6)
  {
    uint64_t v9 = *v3;
    if (!*v3) {
      return v9;
    }
    String.utf8CString.getter();
    EntryIndexFromKey  = (unint64_t *)REAnimationLibraryAssetGetEntryIndexFromKey();
    swift_release();
    if (EntryIndexFromKey) {
      return AnimationLibraryResource.resource(_:)(*EntryIndexFromKey);
    }
    return 0;
  }
  if (!*(void *)(v6 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
  swift_retain();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t key path getter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v6, v7);
  swift_bridgeObjectRetain();
  uint64_t v10 = a3(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of String??(v6, v7);
  uint64_t result = swift_bridgeObjectRelease();
  *a4  = v10;
  return result;
}

uint64_t key path setter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  uint64_t v5 = *a1;
  if (*a1)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    AnimationLibraryDefinition.addResource(_:_:)(v4, v3, v5);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    AnimationLibraryDefinition.removeResource(_:)(v4, v3);
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    AnimationLibraryDefinition.addResource(_:_:)(a2, a3, a1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    AnimationLibraryDefinition.removeResource(_:)(a2, a3);
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t (*_Proto_AnimationLibraryComponent_v1.subscript.modify(void *a1, uint64_t a2, uint64_t a3))()
{
  a1[2]  = a3;
  a1[3]  = v3;
  a1[1]  = a2;
  *a1  = _Proto_AnimationLibraryComponent_v1.subscript.getter(a2, a3);
  return AnimationLibraryComponent.AnimationCollection.subscript.modify;
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    if (v3)
    {
      swift_retain();
      AnimationLibraryDefinition.addResource(_:_:)(v4, v2, v3);
    }
    else
    {
      AnimationLibraryDefinition.removeResource(_:)(v4, v2);
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v3) {
      AnimationLibraryDefinition.addResource(_:_:)(v4, v2, v3);
    }
    else {
      AnimationLibraryDefinition.removeResource(_:)(v4, v2);
    }
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t _Proto_AnimationLibraryComponent_v1.addToLibrary(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
    do
    {
      uint64_t v3 = *(v2 - 2);
      uint64_t v4 = *(v2 - 1);
      uint64_t v5 = *v2;
      v2 += 3;
      swift_bridgeObjectRetain();
      swift_retain();
      AnimationLibraryDefinition.addResource(_:_:)(v3, v4, v5);
      swift_release();
      swift_bridgeObjectRelease();
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t AnimationLibraryComponent.unkeyedResources.getter()
{
  unint64_t v1 = specialized AnimationLibraryDefinition.unkeyedResources.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 32));
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      return v2;
    }
    goto LABEL_3;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v2;
}

double static _Proto_AnimationLibraryComponent_v1.__fromCore(_:)@<D0>(uint64_t a1@<X8>)
{
  AnimationLibraryuint64_t Asset = REAnimationLibraryComponentGetAnimationLibraryAsset();
  if (AnimationLibraryAsset)
  {
    uint64_t v3 = AnimationLibraryAsset;
    type metadata accessor for AnimationLibraryResource();
    uint64_t v4 = (void *)swift_allocObject();
    v4[4]  = 0;
    void v4[2] = v3;
    RERetain();
    EntryCount  = REAnimationLibraryAssetGetEntryCount();
    uint64_t v6 = specialized Array.init(repeating:count:)(0, EntryCount);
    uint64_t v7 = 0;
    v4[3]  = v6;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v7 = MEMORY[0x263F8EE80];
  }
  *(void *)a1  = v4;
  *(void *)(a1 + 8)  = v7;
  double result = 0.0;
  *(_OWORD *)(a1 + 16)  = xmmword_228323FE0;
  *(void *)(a1 + 32)  = 0;
  return result;
}

uint64_t _Proto_AnimationLibraryComponent_v1.__toCore(_:)()
{
  long long v1 = v0[1];
  long long v3 = *v0;
  long long v4 = v1;
  uint64_t v5 = *((void *)v0 + 4);
  outlined init with take of Transform?((uint64_t)&v3 + 8, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)&v13, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  if (v13
    || (outlined init with take of Transform?((uint64_t)&v4, (uint64_t)v8, &demangling cache variable for type metadata for String??), outlined init with take of Transform?((uint64_t)v8, (uint64_t)v11, &demangling cache variable for type metadata for String??), v12 != 1)|| (outlined init with take of Transform?((uint64_t)&v5, (uint64_t)v9, &demangling cache variable for type metadata for [AnimationResource]?), outlined init with take of Transform?((uint64_t)v9, (uint64_t)&v10, &demangling cache variable for type metadata for [AnimationResource]?), v10))
  {
    uint64_t result = AnimationLibraryDefinition.createAsset()();
    if (!result) {
      return result;
    }
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  }
  outlined init with take of Transform?((uint64_t)&v3, (uint64_t)v6, &demangling cache variable for type metadata for AnimationLibraryResource?);
  uint64_t result = outlined init with take of Transform?((uint64_t)v6, (uint64_t)&v14, &demangling cache variable for type metadata for AnimationLibraryResource?);
  if (v14) {
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  }
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance AnimationLibraryComponent()
{
  long long v1 = v0[1];
  long long v3 = *v0;
  long long v4 = v1;
  uint64_t v5 = *((void *)v0 + 4);
  outlined init with take of Transform?((uint64_t)&v3 + 8, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v6, (uint64_t)&v14, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  if (v14
    || (outlined init with take of Transform?((uint64_t)&v4, (uint64_t)v7, &demangling cache variable for type metadata for String??), outlined init with take of Transform?((uint64_t)v7, (uint64_t)v12, &demangling cache variable for type metadata for String??), v13 != 1)|| (outlined init with take of Transform?((uint64_t)&v5, (uint64_t)v8, &demangling cache variable for type metadata for [AnimationResource]?), outlined init with take of Transform?((uint64_t)v8, (uint64_t)&v11, &demangling cache variable for type metadata for [AnimationResource]?), v11))
  {
    uint64_t result = AnimationLibraryDefinition.createAsset()();
    if (!result) {
      return result;
    }
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  }
  outlined init with take of Transform?((uint64_t)&v3, (uint64_t)v9, &demangling cache variable for type metadata for AnimationLibraryResource?);
  uint64_t result = outlined init with take of Transform?((uint64_t)v9, (uint64_t)&v10, &demangling cache variable for type metadata for AnimationLibraryResource?);
  if (v10) {
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _Proto_AnimationLibraryComponent_v1(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance AnimationLibraryComponent.AnimationCollection(a1, a2, (uint64_t (*)(_OWORD *))specialized _copySequenceToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *))
{
  long long v4 = *(_OWORD *)(v3 + 16);
  v7[0]  = *(_OWORD *)v3;
  v7[1]  = v4;
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v5 = a3(v7);
  outlined release of AnimationLibraryComponent((uint64_t)v7);
  return v5;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _Proto_AnimationLibraryComponent_v1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, a4, a5);
}

uint64_t AnimationLibraryComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v42 = *(void *)(v2 - 8);
  uint64_t v43 = v2;
  MEMORY[0x270FA5388](v2);
  unint64_t v41 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v4 - 8);
  char v40 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v1;
  unint64_t v7 = v1[1];
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = v1[4];
  uint64_t v45 = *v1;
  unint64_t v46 = v7;
  uint64_t v47 = v8;
  uint64_t v48 = v9;
  uint64_t v49 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16)  = xmmword_22830EC60;
  *(void *)(v11 + 32)  = 0x73656D616ELL;
  *(void *)(v11 + 40)  = 0xE500000000000000;
  uint64_t v39 = v11;
  v35[1]  = v7;
  if (v7)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of String??(v8, v9);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of String??(v8, v9);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of String??(v8, v9);
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v6)
    {
      swift_retain();
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      swift_retain();
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      swift_retain();
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      unint64_t v12 = AnimationLibraryResource.keyedResources.getter();
    }
    else
    {
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      unint64_t v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    unint64_t v7 = v12;
  }
  v35[0]  = v6;
  swift_release();
  uint64_t v36 = v9;
  uint64_t v37 = v8;
  outlined consume of String??(v8, v9);
  uint64_t v38 = v10;
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v14 = 0;
  unint64_t v15 = v7 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v7 + 64);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = (void *)MEMORY[0x263F8EE78];
  if (!v18) {
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (unint64_t i = v21 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v24)) + (v14 << 6))
  {
    int64_t v26 = (uint64_t *)(*(void *)(v7 + 48) + 16 * i);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      uint64_t v20 = (void *)result;
    }
    unint64_t v30 = v20[2];
    unint64_t v29 = v20[3];
    if (v30 >= v29 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v20);
      uint64_t v20 = (void *)result;
    }
    v20[2]  = v30 + 1;
    int64_t v31 = &v20[2 * v30];
    v31[4]  = v28;
    v31[5]  = v27;
    if (v18) {
      goto LABEL_10;
    }
LABEL_11:
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v23 >= v19) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v15 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v19) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v15 + 8 * v14);
      if (!v24)
      {
        int64_t v14 = v23 + 2;
        if (v23 + 2 >= v19) {
          goto LABEL_33;
        }
        unint64_t v24 = *(void *)(v15 + 8 * v14);
        if (!v24)
        {
          int64_t v14 = v23 + 3;
          if (v23 + 3 >= v19) {
            goto LABEL_33;
          }
          unint64_t v24 = *(void *)(v15 + 8 * v14);
          if (!v24) {
            break;
          }
        }
      }
    }
LABEL_26:
    unint64_t v18 = (v24 - 1) & v24;
  }
  int64_t v25 = v23 + 4;
  if (v25 >= v19)
  {
LABEL_33:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of String??(v37, v36);
    swift_bridgeObjectRelease();
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    uint64_t v33 = v39;
    *(void *)(v39 + 72)  = v32;
    *(void *)(v33 + 48)  = v20;
    uint64_t v34 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v40, 1, 1, v34);
    (*(void (**)(char *, void, uint64_t))(v42 + 104))(v41, *MEMORY[0x263F8E830], v43);
    return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  }
  unint64_t v24 = *(void *)(v15 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v19) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v15 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_26;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t _Proto_AnimationLibraryComponent_v1.makeIterator()@<X0>(unint64_t *a1@<X8>)
{
  if (v1[1])
  {
    unint64_t v3 = v1[1];
  }
  else if (*v1)
  {
    unint64_t v3 = AnimationLibraryResource.keyedResources.getter();
  }
  else
  {
    unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  uint64_t v6 = v4 & *(void *)(v3 + 64);
  *a1  = v3;
  a1[1]  = v3 + 64;
  a1[2]  = ~v5;
  a1[3]  = 0;
  a1[4]  = v6;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _Proto_AnimationLibraryComponent_v1@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v5 = *v1;
  unint64_t v4 = v1[1];
  if (!v4)
  {
    if (v5) {
      unint64_t v6 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    unint64_t v4 = v6;
  }
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = *(void *)(v4 + 64);
  swift_release();
  if (-v7 < 64) {
    uint64_t v9 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & v8;
  outlined consume of String??(v2[2], v2[3]);
  uint64_t result = swift_bridgeObjectRelease();
  *a1  = v4;
  a1[1]  = v4 + 64;
  a1[2]  = ~v7;
  a1[3]  = 0;
  a1[4]  = v10;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnimationLibraryComponent()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  v4[0]  = *(_OWORD *)v0;
  v4[1]  = v1;
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v2 = specialized _copySequenceToContiguousArray<A>(_:)(v4);
  outlined release of AnimationLibraryComponent((uint64_t)v4);
  return v2;
}

unint64_t *AnimationLibraryComponent.animationResource(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v6 = v2[3];
  if (!v5)
  {
    if (*v2)
    {
      String.utf8CString.getter();
      swift_retain();
      outlined copy of String??(v7, v6);
      swift_bridgeObjectRetain();
      EntryIndexFromKey  = (unint64_t *)REAnimationLibraryAssetGetEntryIndexFromKey();
      swift_release();
      if (EntryIndexFromKey) {
        EntryIndexFromKey  = (unint64_t *)AnimationLibraryResource.resource(_:)(*EntryIndexFromKey);
      }
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_9;
    }
    return 0;
  }
  if (!*(void *)(v5 + 16)) {
    return 0;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of String??(v7, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of String??(v7, v6);
    swift_bridgeObjectRelease();
    return 0;
  }
  EntryIndexFromKey  = *(unint64_t **)(*(void *)(v5 + 56) + 8 * v8);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_9:
  outlined consume of String??(v7, v6);
  swift_bridgeObjectRelease();
  return EntryIndexFromKey;
}

uint64_t key path getter for AnimationLibraryComponent.subscript(_:) : AnimationLibraryComponent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v4, v5);
  swift_bridgeObjectRetain();
  uint64_t v8 = AnimationLibraryComponent.animationResource(_:)(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of String??(v4, v5);
  uint64_t result = swift_bridgeObjectRelease();
  *a3  = v8;
  return result;
}

uint64_t AnimationLibraryComponent.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    AnimationLibraryDefinition.addResource(_:_:)(a2, a3, a1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    AnimationLibraryDefinition.removeResource(_:)(a2, a3);
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t (*AnimationLibraryComponent.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2]  = a3;
  a1[3]  = v3;
  a1[1]  = a2;
  *a1  = AnimationLibraryComponent.animationResource(_:)(a2, a3);
  return AnimationLibraryComponent.AnimationCollection.subscript.modify;
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_10;
  }
  if (result < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= result)
  {
    __break(1u);
  }
  else if ((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result))
  {
    if (*(_DWORD *)(a4 + 36) == a2) {
      return _HashTable.occupiedBucket(after:)();
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6 = result;
  if ((a3 & 1) == 0)
  {
    if (result < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= result)
    {
      __break(1u);
    }
    else if ((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result))
    {
      if (*(_DWORD *)(a4 + 36) == a2) {
        return _HashTable.occupiedBucket(after:)();
      }
      goto LABEL_13;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = __CocoaDictionary.Index.age.getter();
  if (result != *(_DWORD *)(a4 + 36))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  __CocoaDictionary.Index.key.getter();
  outlined copy of [A : B].Index._Variant<A, B>(v6, a2, 1);
  type metadata accessor for __REAsset();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
  specialized __RawDictionaryStorage.find<A>(_:)();
  char v9 = v8;
  uint64_t result = swift_release();
  if (v9)
  {
    __CocoaDictionary.Index.dictionary.getter();
    uint64_t v7 = __CocoaDictionary.index(after:)();
    outlined consume of [String : AnimationResource].Index._Variant(v6, a2, 1);
    swift_unknownObjectRelease();
    return v7;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = 0;
      a2  = *(void *)(a2 + 16);
      while ((a1 & 0xC000000000000001) == 0)
      {
        BOOL v7 = __OFADD__(v5++, 1);
        char v9 = v7;
        uint64_t v10 = swift_retain();
        if (v9) {
          goto LABEL_17;
        }
        uint64_t v11 = *(void *)(v10 + 16);
        swift_release();
        if (a2 == v11)
        {
LABEL_15:
          swift_bridgeObjectRelease();
          return 1;
        }
LABEL_13:
        if (v5 == v4) {
          goto LABEL_14;
        }
      }
      uint64_t v6 = MEMORY[0x22A689930](v5, a1);
      BOOL v7 = __OFADD__(v5++, 1);
      if (!v7) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_14;
      }
    }
    uint64_t v8 = *(void *)(v6 + 16);
    swift_unknownObjectRelease();
    if (a2 == v8) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(uint64_t result, int64_t a2)
{
  int64_t v2 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_10;
  }
  int64_t v3 = result;
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (a2 < v3 || v2 < 0) {
      goto LABEL_11;
    }
    while (a2 != v3)
    {
      AnimationLibraryResource.resource(_:)(v3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if (a2 == ++v3) {
        return v5;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  return result;
}

uint64_t specialized AnimationLibraryDefinition.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  type metadata accessor for AnimationResource();
  uint64_t result = Dictionary.init(minimumCapacity:)();
  *(void *)unint64_t v12 = result;
  *(_OWORD *)&v12[8]  = xmmword_228323FE0;
  *(void *)&v12[24]  = 0;
  if (v4)
  {
    uint64_t v6 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v7 = *(v6 - 2);
      uint64_t v8 = *(v6 - 1);
      uint64_t v9 = *v6;
      v6 += 3;
      swift_bridgeObjectRetain();
      swift_retain();
      AnimationLibraryDefinition.addResource(_:_:)(v7, v8, v9);
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      --v4;
    }
    while (v4);
    long long v10 = *(_OWORD *)v12;
    long long v11 = *(_OWORD *)&v12[16];
  }
  else
  {
    long long v10 = (unint64_t)result;
    long long v11 = xmmword_22830EC70;
  }
  *(void *)a2  = 0;
  *(_OWORD *)(a2 + 8)  = v10;
  *(_OWORD *)(a2 + 24)  = v11;
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, char a3, long long *a4)
{
  if (a3) {
    goto LABEL_12;
  }
  uint64_t v4 = a2;
  long long v13 = *a4;
  char v14 = *((unsigned char *)a4 + 16);
  outlined init with take of Transform?((uint64_t)&v13, (uint64_t)v15, &demangling cache variable for type metadata for [String : AnimationResource].Index._Variant);
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)&v16, &demangling cache variable for type metadata for [String : AnimationResource].Index._Variant);
  if (v18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v17 != v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v16 > a1)
  {
LABEL_14:
    uint64_t result = outlined consume of [String : AnimationResource].Index._Variant(a1, v4, 0);
    __break(1u);
    goto LABEL_15;
  }
  long long v10 = *(long long *)((char *)a4 + 24);
  char v11 = *((unsigned char *)a4 + 40);
  outlined init with take of Transform?((uint64_t)&v10, (uint64_t)v12, &demangling cache variable for type metadata for [String : AnimationResource].Index._Variant);
  uint64_t result = outlined init with take of Transform?((uint64_t)v12, (uint64_t)&v19, &demangling cache variable for type metadata for [String : AnimationResource].Index._Variant);
  if (v21)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v8 = v19;
  int v9 = v20;
  uint64_t result = outlined consume of [String : AnimationResource].Index._Variant(a1, v4, 0);
  if (v9 != v4) {
    goto LABEL_10;
  }
  if (v8 <= a1)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
    goto LABEL_13;
  }
  return result;
}

uint64_t specialized AnimationLibraryDefinition.defaultResourceKey.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  if (a4 == 1)
  {
    if (!a1 || !REAnimationLibraryAssetGetDefaultEntryKey()) {
      return 0;
    }
    uint64_t v8 = String.init(cString:)();
    uint64_t v10 = v9;
    if (!a2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = a3;
    uint64_t v10 = a4;
    if (!a2)
    {
LABEL_6:
      if (a1)
      {
        String.utf8CString.getter();
        outlined copy of String??(a3, a4);
        EntryIndexFromKey  = (unint64_t *)REAnimationLibraryAssetGetEntryIndexFromKey();
        swift_release();
        if (EntryIndexFromKey)
        {
          AnimationLibraryResource.resource(_:)(*EntryIndexFromKey);
          swift_release();
        }
        else
        {
          swift_bridgeObjectRelease();
          return 0;
        }
        return v8;
      }
      outlined copy of String??(a3, a4);
      goto LABEL_15;
    }
  }
  uint64_t v12 = *(void *)(a2 + 16);
  outlined copy of String??(a3, a4);
  if (!v12
    || (swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(v8, v10),
        char v14 = v13,
        swift_bridgeObjectRelease(),
        (v14 & 1) == 0))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v8;
}

uint64_t specialized Sequence.contains(where:)(uint64_t result, uint64_t a2)
{
  int64_t v2 = 0;
  uint64_t v3 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v2 << 6);
LABEL_5:
    if (*(void *)(*(void *)(*(void *)(result + 56) + 8 * v9) + 16) == *(void *)(a2 + 16)) {
      return 1;
    }
  }
  int64_t v10 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v10 >= v7) {
    return 0;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v10);
  ++v2;
  if (v11) {
    goto LABEL_22;
  }
  int64_t v2 = v10 + 1;
  if (v10 + 1 >= v7) {
    return 0;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v2);
  if (v11) {
    goto LABEL_22;
  }
  int64_t v2 = v10 + 2;
  if (v10 + 2 >= v7) {
    return 0;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v2);
  if (v11) {
    goto LABEL_22;
  }
  int64_t v2 = v10 + 3;
  if (v10 + 3 >= v7) {
    return 0;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v2);
  if (v11)
  {
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
    goto LABEL_5;
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v7) {
    return 0;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int64_t v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v2 >= v7) {
      return 0;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = *(void *)(MEMORY[0x22A689930](v5, a1) + 16);
        uint64_t v7 = *(void *)(a2 + 16);
        swift_unknownObjectRelease();
        if (v6 == v7) {
          return v5;
        }
      }
      else if (*(void *)(*(void *)(a1 + 8 * v5 + 32) + 16) == *(void *)(a2 + 16))
      {
        return v5;
      }
      if (__OFADD__(v5, 1)) {
        break;
      }
      if (++v5 == v4) {
        return 0;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x22A689930](v5, a1);
        swift_unknownObjectRelease();
        if (v6 == a2) {
          return v5;
        }
      }
      else if (*(void *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1)) {
        break;
      }
      if (++v5 == v4) {
        return 0;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized AnimationLibraryDefinition.unkeyedResources.getter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2)
  {
    unint64_t v6 = a2;
  }
  else
  {
    if (a1) {
      unint64_t v7 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    unint64_t v6 = v7;
  }
  uint64_t v8 = *(void *)(v6 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!v8)
  {
    if (a3)
    {
      uint64_t v11 = a3;
    }
    else if (a1)
    {
      swift_beginAccess();
      int64_t v12 = *(void *)(*(void *)(a1 + 24) + 16);
      swift_retain();
      uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v12);
      swift_release();
    }
    else
    {
      uint64_t v11 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRetain();
    return v11;
  }
  unint64_t v9 = a2;
  if (!a2)
  {
    if (a1) {
      unint64_t v10 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    unint64_t v9 = v10;
  }
  uint64_t v27 = MEMORY[0x263F8EE88];
  unint64_t v13 = v9 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v9 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_21;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }
    if (v22 >= v17) {
      goto LABEL_41;
    }
    unint64_t v23 = *(void *)(v13 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v17) {
        goto LABEL_41;
      }
      unint64_t v23 = *(void *)(v13 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v17) {
          goto LABEL_41;
        }
        unint64_t v23 = *(void *)(v13 + 8 * v19);
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v17) {
            goto LABEL_41;
          }
          unint64_t v23 = *(void *)(v13 + 8 * v19);
          if (!v23)
          {
            int64_t v19 = v22 + 4;
            if (v22 + 4 >= v17) {
              goto LABEL_41;
            }
            unint64_t v23 = *(void *)(v13 + 8 * v19);
            if (!v23) {
              break;
            }
          }
        }
      }
    }
LABEL_40:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_21:
    uint64_t result = specialized Set._Variant.insert(_:)(&v28, *(void *)(*(void *)(*(void *)(v9 + 56) + 8 * v21) + 16));
  }
  int64_t v24 = v22 + 5;
  if (v24 < v17)
  {
    unint64_t v23 = *(void *)(v13 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        int64_t v19 = v24 + 1;
        if (__OFADD__(v24, 1)) {
          goto LABEL_51;
        }
        if (v19 >= v17) {
          goto LABEL_41;
        }
        unint64_t v23 = *(void *)(v13 + 8 * v19);
        ++v24;
        if (v23) {
          goto LABEL_40;
        }
      }
    }
    int64_t v19 = v24;
    goto LABEL_40;
  }
LABEL_41:
  swift_release();
  swift_bridgeObjectRelease();
  if (a3)
  {
    unint64_t v25 = a3;
  }
  else if (a1)
  {
    swift_beginAccess();
    int64_t v26 = *(void *)(*(void *)(a1 + 24) + 16);
    swift_retain();
    unint64_t v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v26);
    swift_release();
  }
  else
  {
    unint64_t v25 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized _ArrayProtocol.filter(_:)(v25, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t type metadata accessor for AnimationLibraryResource()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index;
  if (!lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index;
  if (!lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationLibraryComponent.AnimationCollection and conformance AnimationLibraryComponent.AnimationCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection and conformance AnimationLibraryComponent.AnimationCollection;
  if (!lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection and conformance AnimationLibraryComponent.AnimationCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection and conformance AnimationLibraryComponent.AnimationCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AnimationLibraryComponent.AnimationCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<AnimationLibraryComponent.AnimationCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AnimationLibraryComponent.AnimationCollection>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AnimationLibraryComponent.AnimationCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<AnimationLibraryComponent.AnimationCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AnimationLibraryComponent.AnimationCollection>);
}

unint64_t lazy protocol witness table accessor for type AnimationLibraryComponent.AnimationCollection.Iterator and conformance AnimationLibraryComponent.AnimationCollection.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Iterator and conformance AnimationLibraryComponent.AnimationCollection.Iterator;
  if (!lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Iterator and conformance AnimationLibraryComponent.AnimationCollection.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Iterator and conformance AnimationLibraryComponent.AnimationCollection.Iterator);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _Proto_AnimationLibraryComponent_v1()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [String : AnimationResource].Iterator and conformance [A : B].Iterator, &demangling cache variable for type metadata for [String : AnimationResource].Iterator);
}

uint64_t sub_228109D48(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = outlined consume of String??(v5, v6);
  *(void *)(a2 + 16)  = v4;
  *(void *)(a2 + 24)  = v3;
  return result;
}

uint64_t sub_228109D98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection(a1, a2, AnimationLibraryComponent.AnimationCollection.subscript.getter, a3);
}

uint64_t sub_228109DC4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return key path setter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection(a1, a2, a3);
}

uint64_t sub_228109DDC()
{
  return 0;
}

uint64_t sub_228109DEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection(a1, a2, (uint64_t (*)(uint64_t, uint64_t))_Proto_AnimationLibraryComponent_v1.subscript.getter, a3);
}

uint64_t sub_228109E18(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return key path setter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection(a1, a2, a3);
}

uint64_t sub_228109E30()
{
  return 0;
}

uint64_t sub_228109E48()
{
  return 0;
}

uint64_t outlined destroy of String?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for AnimationLibraryComponent()
{
  return &type metadata for AnimationLibraryComponent;
}

ValueMetadata *type metadata accessor for AnimationLibraryComponent.AnimationCollection()
{
  return &type metadata for AnimationLibraryComponent.AnimationCollection;
}

uint64_t destroy for AnimationLibraryComponent.AnimationCollection.Iterator()
{
  return outlined consume of [String : AnimationResource].Iterator._Variant();
}

void *initializeWithCopy for AnimationLibraryComponent.AnimationCollection.Iterator(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1  = v3;
  a1[1]  = v4;
  a1[2]  = v5;
  a1[3]  = v6;
  a1[4]  = v7;
  return a1;
}

void *assignWithCopy for AnimationLibraryComponent.AnimationCollection.Iterator(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1  = v3;
  a1[1]  = v4;
  a1[2]  = v5;
  a1[3]  = v6;
  a1[4]  = v7;
  outlined consume of [String : AnimationResource].Iterator._Variant();
  return a1;
}

uint64_t assignWithTake for AnimationLibraryComponent.AnimationCollection.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v4;
  *(void *)(a1 + 32)  = v3;
  outlined consume of [String : AnimationResource].Iterator._Variant();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationLibraryComponent.AnimationCollection.Iterator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnimationLibraryComponent.AnimationCollection.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)uint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 40)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 40)  = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 8)  = 0u;
      *(_OWORD *)(result + 24)  = 0u;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationLibraryComponent.AnimationCollection.Iterator()
{
  return &type metadata for AnimationLibraryComponent.AnimationCollection.Iterator;
}

uint64_t destroy for AnimationLibraryComponent.AnimationCollection.Index(uint64_t a1)
{
  return outlined consume of [String : AnimationResource].Index._Variant(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for AnimationLibraryComponent.AnimationCollection.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(void *)a2, v4, v5);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 16)  = v5;
  return a1;
}

uint64_t assignWithCopy for AnimationLibraryComponent.AnimationCollection.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 16)  = v5;
  outlined consume of [String : AnimationResource].Index._Variant(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AnimationLibraryComponent.AnimationCollection.Index(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16)  = v3;
  outlined consume of [String : AnimationResource].Index._Variant(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for AnimationLibraryComponent.AnimationCollection.Index()
{
  return &type metadata for AnimationLibraryComponent.AnimationCollection.Index;
}

ValueMetadata *type metadata accessor for _Proto_AnimationLibraryComponent_v1()
{
  return &type metadata for _Proto_AnimationLibraryComponent_v1;
}

uint64_t destroy for AnimationLibraryComponent(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24) != 1) {
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnimationLibraryComponent(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1  = *a2;
  *(void *)(a1 + 8)  = v4;
  uint64_t v5 = a2 + 2;
  uint64_t v6 = a2[3];
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 16)  = *v5;
  }
  else
  {
    *(void *)(a1 + 16)  = *(void *)v5;
    *(void *)(a1 + 24)  = v6;
    swift_bridgeObjectRetain();
  }
  *(void *)(a1 + 32)  = a2[4];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AnimationLibraryComponent(void *a1, void *a2)
{
  *a1  = *a2;
  swift_retain();
  swift_release();
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  if (a1[3] != 1)
  {
    if (v4 != 1)
    {
      a1[2]  = a2[2];
      a1[3]  = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of String?((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *((_OWORD *)a1 + 1)  = *((_OWORD *)a2 + 1);
    goto LABEL_8;
  }
  a1[2]  = a2[2];
  a1[3]  = a2[3];
  swift_bridgeObjectRetain();
LABEL_8:
  a1[4]  = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AnimationLibraryComponent(void *a1, void *a2)
{
  *a1  = *a2;
  swift_release();
  a1[1]  = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 2;
  if (a1[3] != 1)
  {
    uint64_t v5 = a2[3];
    if (v5 != 1)
    {
      a1[2]  = *v4;
      a1[3]  = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of String?((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1)  = *(_OWORD *)v4;
LABEL_6:
  a1[4]  = a2[4];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationLibraryComponent(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationLibraryComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40)  = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationLibraryDefinition()
{
  return &type metadata for AnimationLibraryDefinition;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    if (*(void *)(*(void *)(*(void *)(a3 + 56) + 8 * v13) + 16) != *(void *)(a4 + 16))
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v11) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v14[1]  = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  isStackAllocationSafe  = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe  = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    int64_t v11 = specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    unint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    int64_t v11 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v12, v8, a1, a2);
    swift_release();
    MEMORY[0x22A696500](v12, -1, -1);
    swift_release_n();
  }
  return v11;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = specialized Collection.firstIndex(where:)(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 != v22) {
        goto LABEL_6;
      }
    }
    else if (v9 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v6 + 5; ; ++i)
      {
        unint64_t v11 = i - 4;
        uint64_t v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0) {
          break;
        }
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (v11 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_45;
        }
        if (*(void *)(*(void *)(v12 + 8 * i) + 16) != *(void *)(a2 + 16)) {
          goto LABEL_11;
        }
LABEL_31:
        uint64_t v9 = i - 3;
        if (__OFADD__(v11, 1)) {
          goto LABEL_46;
        }
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v18 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == v18) {
          return v6;
        }
      }
      uint64_t v19 = *(void *)(MEMORY[0x22A689930](i - 4) + 16);
      uint64_t v9 = *(void *)(a2 + 16);
      swift_unknownObjectRelease();
      if (v19 == v9) {
        goto LABEL_31;
      }
LABEL_11:
      if (v11 == v6)
      {
LABEL_30:
        if (__OFADD__(v6++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_31;
      }
      uint64_t v9 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = MEMORY[0x22A689930](v6, *a1);
        uint64_t v9 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          uint64_t v14 = *(void *)(v9 + 8 * i);
          swift_retain();
          goto LABEL_19;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v6 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        uint64_t v13 = *(void *)(v9 + 8 * v6 + 32);
        swift_retain();
        if ((v9 & 0xC000000000000001) == 0) {
          goto LABEL_16;
        }
      }
      uint64_t v14 = MEMORY[0x22A689930](i - 4, v9);
      uint64_t v9 = *a1;
LABEL_19:
      isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1  = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        *a1  = v9;
      }
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20)  = v14;
      swift_release();
      specialized Array._endMutation()();
      uint64_t v9 = *a1;
      int v16 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1  = v9;
      if (!v16 || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        *a1  = v9;
      }
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * i)  = v13;
      swift_release();
      specialized Array._endMutation()();
      goto LABEL_30;
    }
    return v6;
  }
  unint64_t v20 = *a1;
  if (!(v20 >> 62)) {
    return *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v23;
}

{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t i;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  int v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = specialized Collection.firstIndex(where:)(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 != v22) {
        goto LABEL_6;
      }
    }
    else if (v9 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v6 + 5; ; ++i)
      {
        unint64_t v11 = i - 4;
        uint64_t v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0) {
          break;
        }
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (v11 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_45;
        }
        if (*(void *)(v12 + 8 * i) != a2) {
          goto LABEL_11;
        }
LABEL_31:
        uint64_t v9 = i - 3;
        if (__OFADD__(v11, 1)) {
          goto LABEL_46;
        }
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v18 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == v18) {
          return v6;
        }
      }
      uint64_t v19 = MEMORY[0x22A689930](i - 4);
      swift_unknownObjectRelease();
      if (v19 == a2) {
        goto LABEL_31;
      }
LABEL_11:
      if (v11 == v6)
      {
LABEL_30:
        if (__OFADD__(v6++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_31;
      }
      uint64_t v9 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = MEMORY[0x22A689930](v6, *a1);
        uint64_t v9 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          uint64_t v14 = *(void *)(v9 + 8 * i);
          swift_retain();
          goto LABEL_19;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v6 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        uint64_t v13 = *(void *)(v9 + 8 * v6 + 32);
        swift_retain();
        if ((v9 & 0xC000000000000001) == 0) {
          goto LABEL_16;
        }
      }
      uint64_t v14 = MEMORY[0x22A689930](i - 4, v9);
      uint64_t v9 = *a1;
LABEL_19:
      isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1  = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        *a1  = v9;
      }
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20)  = v14;
      swift_release();
      specialized Array._endMutation()();
      uint64_t v9 = *a1;
      int v16 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1  = v9;
      if (!v16 || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        *a1  = v9;
      }
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * i)  = v13;
      swift_release();
      specialized Array._endMutation()();
      goto LABEL_30;
    }
    return v6;
  }
  unint64_t v20 = *a1;
  if (!(v20 >> 62)) {
    return *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t __RERetain(_:)(uint64_t result)
{
  if (result) {
    return RERetain();
  }
  return result;
}

uint64_t __RERelease(_:)(uint64_t result)
{
  if (result) {
    return RERelease();
  }
  return result;
}

void *specialized static StateMachineParametersCreator.createBoundParameters(from:)()
{
  uint64_t v38 = type metadata accessor for Logger();
  uint64_t v0 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v36 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v39 = (char *)&v30 - v3;
  BoundParameterCount  = REStateMachineComponentGetBoundParameterCount();
  if (BoundParameterCount < 0)
  {
    __break(1u);
    JUMPOUT(0x22810B174);
  }
  uint64_t v6 = BoundParameterCount;
  if (!BoundParameterCount) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v7 = 0;
  uint64_t v37 = (void (**)(char *, uint64_t))(v0 + 8);
  char v8 = (void *)MEMORY[0x263F8EE78];
  int64_t v35 = "Scope";
  unint64_t v33 = 0x800000022834E3B0;
  *(void *)&long long v5 = 136315138;
  long long v34 = v5;
  unint64_t v31 = 0x8000000228359490;
  uint64_t v30 = MEMORY[0x263F8EE58] + 8;
  unint64_t v32 = 0x80000002283594C0;
  do
  {
    BoundParameterTypeAtIndex  = REStateMachineComponentGetBoundParameterTypeAtIndex();
    REStateMachineComponentGetBoundParameterNameAtIndex();
    uint64_t v10 = String.init(cString:)();
    uint64_t v12 = v11;
    REStateMachineComponentGetBoundParameterBindTargetAtIndex();
    unint64_t v13 = String.init(cString:)();
    static InternalBindPath.targetFromPath(_:)(v13, v14, (uint64_t)v41);
    swift_bridgeObjectRelease();
    uint64_t v15 = v41[0];
    uint64_t v16 = v41[1];
    unsigned __int8 v17 = v42;
    switch(BoundParameterTypeAtIndex)
    {
      case 0:
      case 4:
        swift_bridgeObjectRelease();
        outlined consume of BindTarget(v15, v16, v17);
        Logger.init(subsystem:category:)();
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = swift_slowAlloc();
          uint64_t v21 = swift_slowAlloc();
          v41[0]  = v21;
          *(_DWORD *)uint64_t v20 = v34;
          *(void *)(v20 + 4)  = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, v32, v41);
          _os_log_impl(&dword_227DD2000, v18, v19, "%s", (uint8_t *)v20, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x22A696500](v21, -1, -1);
          MEMORY[0x22A696500](v20, -1, -1);
        }

        (*v37)(v39, v38);
        break;
      case 1:
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Int>);
        uint64_t v44 = &protocol witness table for StateMachineParameter<A>;
        uint64_t v26 = swift_allocObject();
        v41[0]  = v26;
        *(void *)(v26 + 56)  = 0;
        *(unsigned char *)(v26 + 64)  = 1;
        goto LABEL_15;
      case 2:
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Float>);
        uint64_t v44 = &protocol witness table for StateMachineParameter<A>;
        uint64_t v26 = swift_allocObject();
        v41[0]  = v26;
        *(_DWORD *)(v26 + 52)  = 0;
        *(unsigned char *)(v26 + 56)  = 1;
        goto LABEL_15;
      case 3:
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Bool>);
        uint64_t v44 = &protocol witness table for StateMachineParameter<A>;
        uint64_t v26 = swift_allocObject();
        v41[0]  = v26;
        *(unsigned char *)(v26 + 49)  = 2;
LABEL_15:
        *(void *)(v26 + 16)  = v10;
        *(void *)(v26 + 24)  = v12;
        *(void *)(v26 + 32)  = v15;
        *(void *)(v26 + 40)  = v16;
        *(unsigned char *)(v26 + 48)  = v17;
        outlined init with copy of __REAssetService((uint64_t)v41, (uint64_t)v40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        }
        unint64_t v28 = v8[2];
        unint64_t v27 = v8[3];
        if (v28 >= v27 >> 1) {
          char v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v8);
        }
        _OWORD v8[2] = v28 + 1;
        outlined init with take of BindableDataInternal(v40, (uint64_t)&v8[5 * v28 + 4]);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
        break;
      default:
        swift_bridgeObjectRelease();
        outlined consume of BindTarget(v15, v16, v17);
        Logger.init(subsystem:category:)();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = swift_slowAlloc();
          uint64_t v25 = swift_slowAlloc();
          v41[0]  = v25;
          *(_DWORD *)uint64_t v24 = v34;
          *(void *)(v24 + 4)  = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, v31, v41);
          _os_log_impl(&dword_227DD2000, v22, v23, "%s", (uint8_t *)v24, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x22A696500](v25, -1, -1);
          MEMORY[0x22A696500](v24, -1, -1);
        }

        (*v37)(v36, v38);
        break;
    }
    ++v7;
  }
  while (v6 != v7);
  return v8;
}

uint64_t specialized static StateMachineParametersCreator.updateInCoreComponent(coreComponent:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  unint64_t v32 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = REStateMachineComponentRemoveAllBoundParameters();
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v7 = a2 + 32;
    uint64_t v30 = (void (**)(char *, uint64_t))(v3 + 8);
    v26[1]  = a2;
    swift_bridgeObjectRetain();
    unint64_t v29 = 0x800000022834E3B0;
    *(void *)&long long v8 = 136315138;
    long long v28 = v8;
    unint64_t v27 = 0x8000000228359460;
    v26[2]  = MEMORY[0x263F8EE58] + 8;
    while (1)
    {
      outlined init with copy of __REAssetService(v7, (uint64_t)v41);
      uint64_t v14 = v42;
      uint64_t v15 = v43;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 16))(v33, v14, v15);
      unsigned __int8 v16 = v34;
      if (v34 != 255)
      {
        uint64_t v18 = v33[0];
        uint64_t v17 = v33[1];
        specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)v33, 1);
        outlined consume of BindTarget?(v18, v17, v16);
        outlined init with copy of __REAssetService((uint64_t)v41, (uint64_t)v37);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameterProtocol);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Int>);
        if (swift_dynamicCast()
          || (outlined init with copy of __REAssetService((uint64_t)v41, (uint64_t)v37),
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Float>),
              swift_dynamicCast()))
        {
          uint64_t v9 = v34;
          uint64_t v10 = v35;
          unsigned __int8 v11 = v36;
          swift_bridgeObjectRelease();
          outlined consume of BindTarget?(v9, v10, v11);
        }
        else
        {
          outlined init with copy of __REAssetService((uint64_t)v41, (uint64_t)v33);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Bool>);
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            Logger.init(subsystem:category:)();
            uint64_t v22 = Logger.logObject.getter();
            os_log_type_t v23 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v22, v23))
            {
              uint64_t v24 = swift_slowAlloc();
              uint64_t v25 = swift_slowAlloc();
              v33[0]  = v25;
              *(_DWORD *)uint64_t v24 = v28;
              *(void *)(v24 + 4)  = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, v27, v33);
              _os_log_impl(&dword_227DD2000, v22, v23, "%s", (uint8_t *)v24, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x22A696500](v25, -1, -1);
              MEMORY[0x22A696500](v24, -1, -1);
            }

            (*v30)(v32, v31);
            goto LABEL_5;
          }
          uint64_t v19 = v38;
          uint64_t v20 = v39;
          unsigned __int8 v21 = v40;
          swift_bridgeObjectRelease();
          outlined consume of BindTarget?(v19, v20, v21);
        }
        uint64_t v13 = v42;
        uint64_t v12 = v43;
        __swift_project_boxed_opaque_existential_1(v41, v42);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v12);
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REStateMachineComponentAddBoundParameter();
        swift_release();
        swift_release();
      }
LABEL_5:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
      v7 += 40;
      if (!--v6) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_22810B638()
{
  return objectdestroyTm_4(50);
}

uint64_t sub_22810B640()
{
  return objectdestroyTm_4(57);
}

uint64_t sub_22810B648()
{
  return objectdestroyTm_4(65);
}

uint64_t objectdestroyTm_4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  int v3 = *(unsigned __int8 *)(v1 + 48);
  if (v3 != 255) {
    outlined consume of BindTarget(*(void *)(v1 + 32), *(void *)(v1 + 40), v3);
  }

  return MEMORY[0x270FA0238](v1, a1, 7);
}

uint64_t specialized static StateMachineParametersCreator.syncUp(parameters:with:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v41 = *(void *)(a2 + 24);
  uint64_t v2 = *a1;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)&long long v51 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  if (v4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = v2 + 32;
    uint64_t v8 = MEMORY[0x263F8EE78];
    do
    {
      if (v6 >= *(void *)(v2 + 16)) {
        goto LABEL_51;
      }
      outlined init with copy of __REAssetService(v7, (uint64_t)&v58);
      uint64_t v9 = v59;
      uint64_t v10 = v60;
      __swift_project_boxed_opaque_existential_1(&v58, v59);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v10 + 16))(&v54, v9, v10);
      int v11 = v55;
      outlined consume of BindTarget?(v54, *((uint64_t *)&v54 + 1), v55);
      if (v11 == 255)
      {
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
      }
      else
      {
        outlined init with take of BindableDataInternal(&v58, (uint64_t)&v54);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
        }
        uint64_t v8 = v51;
        unint64_t v13 = *(void *)(v51 + 16);
        unint64_t v12 = *(void *)(v51 + 24);
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          uint64_t v8 = v51;
        }
        *(void *)(v8 + 16)  = v13 + 1;
        uint64_t result = outlined init with take of BindableDataInternal(&v54, v8 + 40 * v13 + 32);
      }
      ++v6;
      v7 += 40;
    }
    while (v4 != v6);
    uint64_t v3 = v51;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a1  = v3;
  uint64_t v40 = *(void *)(v41 + 16);
  if (v40)
  {
    swift_bridgeObjectRetain();
    uint64_t result = v41;
    unint64_t v14 = 0;
    while (1)
    {
      if (v14 >= *(void *)(result + 16)) {
        goto LABEL_52;
      }
      uint64_t v15 = *(void *)(v41 + 32 + 72 * v14 + 64);
      uint64_t v44 = *(void *)(v15 + 16);
      if (v44) {
        break;
      }
LABEL_16:
      if (++v14 == v40) {
        return swift_bridgeObjectRelease();
      }
    }
    unint64_t v39 = v14;
    uint64_t v43 = v15 + 32;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v16 = 0;
    uint64_t v42 = v15;
    while (1)
    {
      if (v16 >= *(void *)(v15 + 16))
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        return result;
      }
      outlined init with copy of __REAssetService(v43 + 40 * v16, (uint64_t)&v58);
      uint64_t v17 = v59;
      uint64_t v18 = v60;
      __swift_project_boxed_opaque_existential_1(&v58, v59);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
      uint64_t v20 = v19;
      uint64_t v47 = *(void *)(v19 + 16);
      if (v47) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_21:
      ++v16;
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
      if (v16 == v44)
      {
        swift_bridgeObjectRelease();
        uint64_t result = v41;
        unint64_t v14 = v39;
        goto LABEL_16;
      }
    }
    unint64_t v45 = v16;
    unint64_t v21 = 0;
    uint64_t v46 = v19 + 32;
    while (v21 < *(void *)(v20 + 16))
    {
      outlined init with copy of __REAssetService(v46 + 40 * v21, (uint64_t)&v54);
      uint64_t v22 = *(void *)(*a1 + 16);
      if (v22)
      {
        uint64_t v23 = *a1 + 32;
        swift_bridgeObjectRetain_n();
        while (1)
        {
          outlined init with copy of __REAssetService(v23, (uint64_t)&v51);
          uint64_t v24 = v52;
          uint64_t v25 = v53;
          __swift_project_boxed_opaque_existential_1(&v51, v52);
          uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
          uint64_t v28 = v27;
          uint64_t v30 = v56;
          uint64_t v29 = v57;
          __swift_project_boxed_opaque_existential_1(&v54, v56);
          if (v26 == (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v30, v29) && v28 == v31) {
            break;
          }
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined init with copy of __REAssetService((uint64_t)&v51, (uint64_t)v50);
          outlined init with copy of __REAssetService((uint64_t)&v54, (uint64_t)v49);
          if (v33) {
            goto LABEL_39;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
LABEL_31:
          v23 += 40;
          if (!--v22)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_42;
          }
        }
        swift_bridgeObjectRelease_n();
        outlined init with copy of __REAssetService((uint64_t)&v51, (uint64_t)v50);
        outlined init with copy of __REAssetService((uint64_t)&v54, (uint64_t)v49);
LABEL_39:
        __swift_project_boxed_opaque_existential_1(v50, v50[3]);
        DynamicType  = swift_getDynamicType();
        __swift_project_boxed_opaque_existential_1(v49, v49[3]);
        uint64_t v35 = swift_getDynamicType();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
        if (DynamicType == v35)
        {
          swift_bridgeObjectRelease_n();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
          goto LABEL_26;
        }
        goto LABEL_31;
      }
LABEL_42:
      outlined init with copy of __REAssetService((uint64_t)&v54, (uint64_t)&v51);
      unsigned __int8 v36 = (void *)*a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned __int8 v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
      }
      unint64_t v38 = v36[2];
      unint64_t v37 = v36[3];
      if (v38 >= v37 >> 1) {
        unsigned __int8 v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v36);
      }
      void v36[2] = v38 + 1;
      outlined init with take of BindableDataInternal(&v51, (uint64_t)&v36[5 * v38 + 4]);
      *a1  = (uint64_t)v36;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
LABEL_26:
      if (++v21 == v47)
      {
        swift_bridgeObjectRelease();
        uint64_t v15 = v42;
        unint64_t v16 = v45;
        goto LABEL_21;
      }
    }
    __break(1u);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t destroy for VideoComponent(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  swift_release();

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for VideoComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32)  = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  return a1;
}

void *assignWithCopy for VideoComponent(void *a1, void *a2)
{
  *a1  = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  a1[6]  = a2[6];
  return a1;
}

uint64_t assignWithTake for VideoComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for VideoComponent()
{
  return &type metadata for VideoComponent;
}

uint64_t static VideoComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  Videouint64_t Asset = REVideoComponentGetVideoAsset();
  type metadata accessor for __VideoResource();
  *(void *)&v31[0]  = VideoAsset;
  uint64_t v3 = static __VideoResource.__fromCore(_:)((uint64_t *)v31);
  swift_retain();
  Materialuint64_t Asset = REVideoComponentGetMaterialAsset();
  long long v5 = (void *)REMaterialParameterBlockValueCreate();
  uint64_t v6 = specialized static LoadableResource.fromCore(assetRef:)(MaterialAsset);
  if (!v6) {
    goto LABEL_42;
  }
  uint64_t v7 = v6;
  v33[3]  = &type metadata for AnyMaterial;
  v33[4]  = &protocol witness table for AnyMaterial;
  uint64_t v8 = swift_allocObject();
  v33[0]  = v8;
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)(v8 + 16)  = v7;
  *(void *)(v8 + 24)  = v9;
  *(unsigned char *)(v8 + 32)  = 0;
  *(void *)(v8 + 40)  = 0;
  *(void *)(v8 + 48)  = v5;
  *(void *)&v31[0]  = v3;
  outlined init with copy of __REAssetService((uint64_t)v33, (uint64_t)v31 + 8);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static VideoComponent.__fromCore(_:));
  uint64_t v11 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v30 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  uint64_t v32 = v11;
  long long v12 = v31[1];
  *(_OWORD *)a1  = v31[0];
  *(_OWORD *)(a1 + 16)  = v12;
  *(_OWORD *)(a1 + 32)  = v31[2];
  *(void *)(a1 + 48)  = v32;
  uint64_t Entity = REComponentGetEntity();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v14 = swift_dynamicCastClassUnconditional();
    goto LABEL_4;
  }
  if ((REEntityIsBeingDestroyed() & 1) == 0)
  {
    uint64_t v16 = specialized static Entity.entityInfoType(_:)();
    if (v16)
    {
      uint64_t v15 = (*(uint64_t (**)(void))(v16 + 232))();
      uint64_t v17 = *(void *)(v15 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v17, 0);
      *(void *)(v15 + 16)  = Entity;
      MEMORY[0x22A68E750](Entity, v15);
      swift_release();
LABEL_8:
      __VideoResource.addEntity(_:)(v15);
      REVideoComponentGetDesiredViewingMode();
      uint64_t v18 = (uint64_t *)(v3 + 24);
      swift_beginAccess();
      unint64_t v19 = *(void *)(v3 + 24);
      v33[0]  = v9;
      if (v19 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        if (v20) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v20)
        {
LABEL_10:
          if (v20 < 1)
          {
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          for (uint64_t i = 0; i != v20; ++i)
          {
            if ((v19 & 0xC000000000000001) != 0) {
              MEMORY[0x22A689930](i, v19);
            }
            else {
              swift_retain();
            }
            uint64_t Strong = swift_weakLoadStrong();
            swift_release();
            if (Strong)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            else
            {
              swift_release();
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v23 = v33[0];
LABEL_23:
          *uint64_t v18 = v23;
          swift_bridgeObjectRelease();
          uint64_t v24 = *v18;
          if ((unint64_t)*v18 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
            if (v25)
            {
LABEL_25:
              if (v25 >= 1)
              {
                for (uint64_t j = 0; j != v25; ++j)
                {
                  if ((v24 & 0xC000000000000001) != 0) {
                    MEMORY[0x22A689930](j, v24);
                  }
                  else {
                    swift_retain();
                  }
                  if (swift_weakLoadStrong())
                  {
                    REVideoComponentGetComponentType();
                    if (REEntityGetComponentByClass())
                    {
                      REVideoComponentSetDesiredViewingMode();
                      RENetworkMarkComponentDirty();
                    }
                    swift_release();
                  }
                  swift_release();
                }
                goto LABEL_38;
              }
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v25) {
              goto LABEL_25;
            }
          }
LABEL_38:
          swift_release();
          swift_bridgeObjectRelease();
          REVideoComponentGetFadeThreshold();
          uint64_t v28 = v27;
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t result = swift_release();
          *(void *)(a1 + 48)  = v28;
          return result;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v23 = MEMORY[0x263F8EE78];
      goto LABEL_23;
    }
    uint64_t v14 = makeEntity(for:)(Entity);
LABEL_4:
    uint64_t v15 = v14;
    goto LABEL_8;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance VideoComponent()
{
  REVideoComponentSetVideoAsset();
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  swift_beginAccess();
  swift_release();
  REVideoComponentSetMaterialAsset();
  REVideoComponentSetFadeThreshold();
  REVideoComponentAddRealityKitDefaultAttachmentsOnAllMaterials();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance VideoComponent(_DWORD *a1@<X8>)
{
  *a1  = 1004;
}

uint64_t sub_22810C3AC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointV7elementtG_AKs5NeverOTg504_s17e13Foundation28_g1_hi1_j42V16removingChildren2of5namedACSS_SSSgtFAC5K85VSi6offset_AI7elementt_tcfu0_33_179b2a53a27cf57a49aec8c1ce8a5464SiAJ_AiKtAITf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v16;
    uint64_t v4 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      uint64_t v7 = v4[1];
      char v12 = *((unsigned char *)v4 + 16);
      long long v14 = *(_OWORD *)(v4 + 5);
      long long v15 = *(_OWORD *)(v4 + 3);
      long long v13 = *(_OWORD *)(v4 + 7);
      unint64_t v9 = *(void *)(v16 + 16);
      unint64_t v8 = *(void *)(v16 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      }
      *(void *)(v16 + 16)  = v9 + 1;
      uint64_t v10 = v16 + 80 * v9;
      *(void *)(v10 + 32)  = v6;
      *(void *)(v10 + 40)  = v5;
      *(void *)(v10 + 48)  = v7;
      *(unsigned char *)(v10 + 56)  = v12;
      *(_OWORD *)(v10 + 64)  = v15;
      *(_OWORD *)(v10 + 80)  = v14;
      *(_OWORD *)(v10 + 96)  = v13;
      v4 += 12;
      --v1;
    }
    while (v1);
  }
  return v2;
}

int64_t _Proto_SkeletonDefinition_v1.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!*(void *)(a1 + 16))
  {
    int64_t result = swift_release();
    uint64_t v7 = MEMORY[0x263F8EE78];
    unint64_t v5 = 0xE500000000000000;
    uint64_t v3 = 0x7974706D65;
LABEL_26:
    *a2  = v3;
    a2[1]  = v5;
    a2[2]  = v7;
    return result;
  }
  if (RESkeletonAssetGetName())
  {
    uint64_t v3 = String.init(cString:)();
    unint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v5 = 0xE000000000000000;
  }
  int64_t result = RESkeletonAssetGetJointCount();
  if ((result & 0x8000000000000000) == 0)
  {
    int64_t v8 = result;
    if (result)
    {
      unint64_t v29 = v5;
      id v30 = a2;
      uint64_t v31 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
      uint64_t v9 = 0;
      uint64_t v7 = v31;
      do
      {
        if (RESkeletonAssetGetJointName())
        {
          uint64_t v10 = String.init(cString:)();
          unint64_t v12 = v11;
        }
        else
        {
          uint64_t v10 = 0;
          unint64_t v12 = 0xE000000000000000;
        }
        JointParentIndex  = (unsigned int *)RESkeletonAssetGetJointParentIndex();
        long long v14 = JointParentIndex;
        if (JointParentIndex) {
          uint64_t v15 = *JointParentIndex;
        }
        else {
          uint64_t v15 = 0;
        }
        JointLocalRestTransform  = (long long *)RESkeletonAssetGetJointLocalRestTransform();
        if (JointLocalRestTransform)
        {
          long long v18 = *JointLocalRestTransform;
          long long v17 = JointLocalRestTransform[1];
          long long v19 = JointLocalRestTransform[2];
          if (one-time initialization token for identity != -1)
          {
            long long v25 = JointLocalRestTransform[2];
            long long v27 = JointLocalRestTransform[1];
            long long v23 = *JointLocalRestTransform;
            swift_once();
            long long v18 = v23;
            long long v19 = v25;
            long long v17 = v27;
          }
        }
        else
        {
          if (one-time initialization token for identity != -1) {
            swift_once();
          }
          long long v17 = static simd_quatf.identity;
          long long v19 = 0uLL;
          long long v18 = xmmword_22830EC80;
        }
        unint64_t v21 = *(void *)(v31 + 16);
        unint64_t v20 = *(void *)(v31 + 24);
        if (v21 >= v20 >> 1)
        {
          long long v26 = v19;
          long long v28 = v17;
          long long v24 = v18;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          long long v18 = v24;
          long long v19 = v26;
          long long v17 = v28;
        }
        ++v9;
        *(void *)(v31 + 16)  = v21 + 1;
        unint64_t v22 = v31 + 80 * v21;
        *(void *)(v22 + 32)  = v10;
        *(void *)(v22 + 40)  = v12;
        *(void *)(v22 + 48)  = v15;
        *(unsigned char *)(v22 + 56)  = v14 == 0;
        *(_OWORD *)(v22 + 64)  = v18;
        *(_OWORD *)(v22 + 80)  = v17;
        *(_OWORD *)(v22 + 96)  = v19;
      }
      while (v8 != v9);
      int64_t result = swift_release();
      unint64_t v5 = v29;
      a2  = v30;
    }
    else
    {
      int64_t result = swift_release();
      uint64_t v7 = MEMORY[0x263F8EE78];
    }
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t _Proto_SkeletonDefinition_v1.Joint.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1]  = a2;
  return result;
}

uint64_t (*_Proto_SkeletonDefinition_v1.Joint.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _Proto_SkeletonDefinition_v1.Joint.parentIndex.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t _Proto_SkeletonDefinition_v1.Joint.parentIndex.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16)  = result;
  *(unsigned char *)(v2 + 24)  = a2 & 1;
  return result;
}

uint64_t (*_Proto_SkeletonDefinition_v1.Joint.parentIndex.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 _Proto_SkeletonDefinition_v1.Joint.localTransform.getter()
{
  return v0[2];
}

void _Proto_SkeletonDefinition_v1.Joint.localTransform.setter(__n128 a1, __n128 a2, __n128 a3)
{
  v3[2]  = a1;
  void v3[3] = a2;
  v3[4]  = a3;
}

uint64_t (*_Proto_SkeletonDefinition_v1.Joint.localTransform.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _Proto_SkeletonDefinition_v1.Joint.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _Proto_SkeletonDefinition_v1.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1]  = a2;
  return result;
}

uint64_t (*_Proto_SkeletonDefinition_v1.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _Proto_SkeletonDefinition_v1.joints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _Proto_SkeletonDefinition_v1.joints.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16)  = a1;
  return result;
}

uint64_t (*_Proto_SkeletonDefinition_v1.joints.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::_Proto_SkeletonDefinition_v1 __swiftcall _Proto_SkeletonDefinition_v1.init(named:withJoints:)(Swift::String named, Swift::OpaquePointer withJoints)
{
  *(Swift::String *)uint64_t v2 = named;
  *(Swift::OpaquePointer *)(v2 + 16)  = withJoints;
  result.name  = named;
  result.joints  = withJoints;
  return result;
}

Swift::Bool __swiftcall _Proto_SkeletonDefinition_v1.equivalent(to:compareEnrolment:)(RealityFoundation::_Proto_SkeletonDefinition_v1 to, Swift::Bool compareEnrolment)
{
  uint64_t v3 = *(void *)(to.name._countAndFlagsBits + 16);
  uint64_t v4 = *(void *)(v2 + 16);
  if (*(void *)(v4 + 16) != *(void *)(v3 + 16)) {
    return 0;
  }
  object  = (char)to.name._object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Sequence.allSatisfy(_:)(v4, v3) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  if (object)
  {
    char v6 = specialized Sequence.allSatisfy(_:)(v4, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v6 & 1) != 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  while (v5)
  {
    uint64_t v7 = *(void *)(a1 + v6 + 48);
    char v8 = *(unsigned char *)(a1 + v6 + 56);
    uint64_t v9 = *(void *)(a2 + v6 + 48);
    char v10 = *(unsigned char *)(a2 + v6 + 56);
    BOOL v11 = *(void *)(a1 + v6 + 32) == *(void *)(a2 + v6 + 32)
       && *(void *)(a1 + v6 + 40) == *(void *)(a2 + v6 + 40);
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
LABEL_16:
      uint64_t v13 = 0;
      goto LABEL_19;
    }
    if (v8)
    {
      if ((v10 & 1) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      if (v7 == v9) {
        char v12 = v10;
      }
      else {
        char v12 = 1;
      }
      if (v12) {
        goto LABEL_16;
      }
    }
    v6 += 80;
    --v5;
    if (!--v2) {
      break;
    }
  }
  uint64_t v13 = 1;
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v8;
  uint64_t v9;
  long long v10;
  BOOL v11;
  float v12;
  float v13;
  long long v15;
  long long v16;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    uint64_t v4 = a1 + 32;
    uint64_t v5 = a2 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    while (2)
    {
      if (v6 != v3)
      {
        uint64_t v7 = 0;
        char v8 = *(_OWORD *)(v4 + 80 * v6 + 64);
        uint64_t v9 = v6 + 1;
        char v10 = *(_OWORD *)(v5 + 80 * v6 + 64);
        BOOL v11 = 1;
        while (1)
        {
          while (!v11)
          {
            if (v7 == 2) {
              goto LABEL_14;
            }
            BOOL v11 = 0;
            ++v7;
          }
          uint64_t v15 = v8;
          char v12 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
          uint64_t v16 = v10;
          uint64_t v13 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
          BOOL v11 = v12 == v13;
          if (v7 == 2) {
            break;
          }
          ++v7;
        }
        if (v12 != v13)
        {
LABEL_14:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
        uint64_t v6 = v9;
        if (v9 != v2) {
          continue;
        }
      }
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t _Proto_SkeletonDefinition_v1.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _Proto_SkeletonDefinition_v1.subTreeIndices(under:inclusive:)(unint64_t a1, char a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t result = specialized Array.init(repeating:count:)(MEMORY[0x263F8EE78], *(void *)(v5 + 16));
  uint64_t v7 = (void *)result;
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8)
  {
    char v24 = a2;
    unint64_t v25 = a1;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    char v10 = (unsigned char *)(v5 + 56);
    do
    {
      if ((*v10 & 1) == 0)
      {
        unint64_t v11 = *((void *)v10 - 1);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          uint64_t v7 = (void *)result;
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_35;
          }
        }
        if (v11 >= v7[2]) {
          goto LABEL_34;
        }
        char v12 = v7 + 4;
        uint64_t v13 = (void *)v7[v11 + 4];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v7[v11 + 4]  = v13;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          v12[v11]  = v13;
        }
        unint64_t v16 = v13[2];
        unint64_t v15 = v13[3];
        if (v16 >= v15 >> 1)
        {
          uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v13);
          v12[v11]  = v13;
        }
        v13[2]  = v16 + 1;
        v13[v16 + 4]  = v9;
      }
      ++v9;
      v10 += 80;
    }
    while (v8 != v9);
    uint64_t result = swift_bridgeObjectRelease();
    a1  = v25;
    a2  = v24;
  }
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16)  = xmmword_22830EC60;
    *(void *)(v17 + 32)  = a1;
    uint64_t v26 = v17;
    goto LABEL_21;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v7[2] <= a1)
  {
LABEL_37:
    __break(1u);
    return result;
  }
  uint64_t v17 = v7[a1 + 4];
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v26 = v17;
  swift_bridgeObjectRetain();
  if (v18)
  {
LABEL_21:
    long long v19 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      unint64_t v20 = *(void *)(v17 + 32);
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        long long v19 = (void *)result;
      }
      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      if (v22 >= v21 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v19);
        long long v19 = (void *)result;
      }
      v19[2]  = v22 + 1;
      v19[v22 + 4]  = v20;
      if ((v20 & 0x8000000000000000) != 0) {
        break;
      }
      if (v20 >= v7[2]) {
        goto LABEL_33;
      }
      uint64_t v23 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v23);
      uint64_t v17 = v26;
      if (!*(void *)(v26 + 16)) {
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  long long v19 = (void *)MEMORY[0x263F8EE78];
LABEL_31:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v19;
}

uint64_t _Proto_SkeletonDefinition_v1.adjustParenting(_:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v23 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v6 = v23;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v20 = v4;
    uint64_t v22 = v5;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    uint64_t v21 = a1;
    uint64_t v9 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v11 = *(v9 - 1);
      uint64_t v10 = *v9;
      uint64_t v23 = v6;
      unint64_t v13 = *(void *)(v6 + 16);
      unint64_t v12 = *(void *)(v6 + 24);
      swift_bridgeObjectRetain();
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v6 = v23;
      }
      v9 += 10;
      *(void *)(v6 + 16)  = v13 + 1;
      long long v14 = (void *)(v6 + 24 * v13);
      v14[5]  = v10;
      void v14[6] = v8;
      v14[4]  = v11;
      ++v8;
    }
    while (v7 != v8);
    a1  = v21;
    swift_bridgeObjectRelease();
    uint64_t v5 = v22;
    uint64_t v4 = v20;
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v6 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
    uint64_t v15 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v15 = MEMORY[0x263F8EE80];
  }
  uint64_t v23 = v15;
  unint64_t v16 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v16, 1, &v23);
  swift_release();
  uint64_t v17 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_AJs5NeverOTg504_s17d13Foundation28_f1_gh1_i62V15adjustParenting33_E1ACD9F60859F542086512E2BAD683FFLLySayAC5J14VGAHFA2GXEfU0_AHSDySSSiGTf1cn_nTf4ngg_n(a1, v4, v3, v5, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release_n();
  return v18;
}

RealityFoundation::_Proto_SkeletonDefinition_v1 __swiftcall _Proto_SkeletonDefinition_v1.subTree(fromRoot:named:)(Swift::String fromRoot, Swift::String_optional named)
{
  object  = fromRoot._object;
  countAndFlagsBits  = fromRoot._countAndFlagsBits;
  uint64_t v6 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = v3[1];
  uint64_t v9 = v3[2];
  uint64_t v10 = (uint64_t)named.value._object;
  if (!named.value._object)
  {
    swift_bridgeObjectRetain();
    named.value._countAndFlagsBits  = v7;
    uint64_t v10 = v8;
  }
  uint64_t v22 = named.value._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits  = countAndFlagsBits;
  v11._object  = object;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRetain();
  unint64_t v13 = specialized Collection.firstIndex(where:)(v12, countAndFlagsBits, (uint64_t)object, 47, (void *)0xE100000000000000);
  char v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_bridgeObjectRelease_n();
  if (v15)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v19 = _Proto_SkeletonDefinition_v1.subTreeIndices(under:inclusive:)(v13, 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVs5NeverOTg504_s17d13Foundation28_f1_gh1_i38V7subTree8fromRoot5namedACSS_SSSgtFAC5J9VSiXEfU0_AITf1cn_nTf4ng_n(v19, v7, v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = _Proto_SkeletonDefinition_v1.adjustParenting(_:)(v20);
    uint64_t v16 = swift_bridgeObjectRelease();
  }
  *uint64_t v6 = v22;
  v6[1]  = v10;
  _OWORD v6[2] = v21;
  result.joints._unint64_t rawValue = v18;
  result.name._object  = v17;
  result.name._countAndFlagsBits  = v16;
  return result;
}

RealityFoundation::_Proto_SkeletonDefinition_v1 __swiftcall _Proto_SkeletonDefinition_v1.removingChildren(of:named:)(Swift::String of, Swift::String_optional named)
{
  object  = of._object;
  countAndFlagsBits  = of._countAndFlagsBits;
  uint64_t v6 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = (void *)v3[1];
  uint64_t v9 = v3[2];
  uint64_t v10 = named.value._object;
  if (!named.value._object)
  {
    swift_bridgeObjectRetain();
    named.value._countAndFlagsBits  = v7;
    uint64_t v10 = v8;
  }
  uint64_t v24 = named.value._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits  = countAndFlagsBits;
  v11._object  = object;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRetain();
  unint64_t v13 = specialized Collection.firstIndex(where:)(v12, countAndFlagsBits, (uint64_t)object, 47, (void *)0xE100000000000000);
  char v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v15)
  {
    uint64_t v21 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v16 = _Proto_SkeletonDefinition_v1.subTreeIndices(under:inclusive:)(v13, 0);
    uint64_t v17 = specialized Set.init<A>(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v19 = specialized Sequence.filter(_:)(v18, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointV7elementtG_AKs5NeverOTg504_s17e13Foundation28_g1_hi1_j42V16removingChildren2of5namedACSS_SSSgtFAC5K85VSi6offset_AI7elementt_tcfu0_33_179b2a53a27cf57a49aec8c1ce8a5464SiAJ_AiKtAITf3nnnpk_nTf1cn_n(v19);
    swift_bridgeObjectRelease();
    uint64_t v9 = _Proto_SkeletonDefinition_v1.adjustParenting(_:)(v20);
    uint64_t v21 = swift_bridgeObjectRelease();
  }
  *uint64_t v6 = v24;
  v6[1]  = (uint64_t)v10;
  _OWORD v6[2] = v9;
  result.joints._unint64_t rawValue = v23;
  result.name._object  = v22;
  result.name._countAndFlagsBits  = v21;
  return result;
}

uint64_t specialized static _Proto_SkeletonDefinition_v1.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  if (*(void *)(v2 + 16) == *(void *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (specialized Sequence.allSatisfy(_:)(v2, v3)) {
      char v4 = specialized Sequence.allSatisfy(_:)(v2, v3);
    }
    else {
      char v4 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_AJs5NeverOTg504_s17d13Foundation28_f1_gh1_i62V15adjustParenting33_E1ACD9F60859F542086512E2BAD683FFLLySayAC5J14VGAHFA2GXEfU0_AHSDySSSiGTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!v5) {
    return v6;
  }
  uint64_t v31 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  uint64_t v10 = a5;
  uint64_t v6 = v31;
  uint64_t v26 = a4 + 32;
  Swift::String v11 = (unint64_t *)(a1 + 48);
  uint64_t v12 = a4;
  while (1)
  {
    uint64_t v13 = *(v11 - 1);
    unint64_t v14 = *v11;
    long long v27 = *((_OWORD *)v11 + 3);
    uint64_t v30 = *(v11 - 2);
    long long v28 = *((_OWORD *)v11 + 2);
    long long v29 = *((_OWORD *)v11 + 1);
    if (v11[1])
    {
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_12;
    }
    if ((v14 & 0x8000000000000000) != 0) {
      break;
    }
    if (v14 >= *(void *)(v12 + 16)) {
      goto LABEL_20;
    }
    if (*(void *)(v10 + 16))
    {
      uint64_t v15 = v12;
      uint64_t v16 = (uint64_t *)(v26 + 80 * v14);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
      if (v20)
      {
        unint64_t v14 = *(void *)(*(void *)(v10 + 56) + 8 * v19);
        uint64_t result = swift_bridgeObjectRelease();
        char v21 = 0;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v14 = 0;
        char v21 = 1;
      }
      uint64_t v12 = v15;
      goto LABEL_13;
    }
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v14 = 0;
LABEL_12:
    char v21 = 1;
LABEL_13:
    unint64_t v23 = *(void *)(v31 + 16);
    unint64_t v22 = *(void *)(v31 + 24);
    if (v23 >= v22 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      uint64_t v10 = a5;
    }
    *(void *)(v31 + 16)  = v23 + 1;
    uint64_t v24 = v31 + 80 * v23;
    *(void *)(v24 + 32)  = v30;
    *(void *)(v24 + 40)  = v13;
    *(void *)(v24 + 48)  = v14;
    *(unsigned char *)(v24 + 56)  = v21;
    *(_OWORD *)(v24 + 64)  = v29;
    *(_OWORD *)(v24 + 80)  = v28;
    *(_OWORD *)(v24 + 96)  = v27;
    v11 += 10;
    if (!--v5) {
      return v6;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVs5NeverOTg504_s17d13Foundation28_f1_gh1_i38V7subTree8fromRoot5namedACSS_SSSgtFAC5J9VSiXEfU0_AITf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v5;
  }
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  uint64_t v5 = v25;
  uint64_t v9 = (unint64_t *)(a1 + 32);
  uint64_t v10 = a4 + 32;
  unint64_t v20 = *(void *)(a4 + 16);
  while (1)
  {
    unint64_t v12 = *v9++;
    unint64_t v11 = v12;
    if (v12 >= v20) {
      break;
    }
    uint64_t v13 = (uint64_t *)(v10 + 80 * v11);
    uint64_t v14 = v13[1];
    uint64_t v21 = *v13;
    uint64_t v15 = v13[2];
    char v16 = *((unsigned char *)v13 + 24);
    long long v23 = *((_OWORD *)v13 + 3);
    long long v24 = *((_OWORD *)v13 + 2);
    long long v22 = *((_OWORD *)v13 + 4);
    unint64_t v18 = *(void *)(v25 + 16);
    unint64_t v17 = *(void *)(v25 + 24);
    uint64_t result = swift_bridgeObjectRetain();
    if (v18 >= v17 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    }
    *(void *)(v25 + 16)  = v18 + 1;
    uint64_t v19 = v25 + 80 * v18;
    *(void *)(v19 + 32)  = v21;
    *(void *)(v19 + 40)  = v14;
    *(void *)(v19 + 48)  = v15;
    *(unsigned char *)(v19 + 56)  = v16;
    *(_OWORD *)(v19 + 64)  = v24;
    *(_OWORD *)(v19 + 80)  = v23;
    *(_OWORD *)(v19 + 96)  = v22;
    if (!--v4) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v10 = 0;
  for (uint64_t i = (void *)(a1 + 40); *(i - 1) != a2 || *i != a3; i += 10)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      break;
    }
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits  = a4;
    v13._object  = a5;
    Swift::Bool v14 = String.hasSuffix(_:)(v13);
    swift_bridgeObjectRelease();
    if (v14) {
      break;
    }
    if (v5 == ++v10) {
      return 0;
    }
  }
  return v10;
}

uint64_t specialized Sequence.filter(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v3 = a2;
  unint64_t v4 = 0;
  uint64_t v23 = result + 32;
  uint64_t v5 = a2 + 56;
  uint64_t v6 = MEMORY[0x263F8EE78];
  do
  {
    uint64_t v22 = v6;
    if (v4 <= v2) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v4;
    }
    for (unint64_t i = v4; ; ++i)
    {
      if (i == v7)
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = v23 + 80 * i;
      uint64_t v11 = *(void *)v9;
      uint64_t v10 = *(void *)(v9 + 8);
      uint64_t v12 = *(void *)(v9 + 16);
      char v24 = *(unsigned char *)(v9 + 24);
      long long v26 = *(_OWORD *)(v9 + 48);
      long long v27 = *(_OWORD *)(v9 + 32);
      long long v25 = *(_OWORD *)(v9 + 64);
      unint64_t v4 = i + 1;
      if (!*(void *)(v3 + 16)) {
        break;
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v14 = result & ~v13;
      if (((*(void *)(v5 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        break;
      }
      uint64_t v15 = *(void *)(v3 + 48);
      if (*(void *)(v15 + 8 * v14) != i)
      {
        uint64_t v16 = ~v13;
        do
        {
          unint64_t v14 = (v14 + 1) & v16;
          if (((*(void *)(v5 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
            goto LABEL_16;
          }
        }
        while (*(void *)(v15 + 8 * v14) != i);
      }
      if (v4 == v2) {
        return v22;
      }
    }
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v6 = v22;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
      uint64_t v6 = v22;
    }
    unint64_t v18 = *(void *)(v6 + 16);
    unint64_t v17 = *(void *)(v6 + 24);
    unint64_t v19 = v18 + 1;
    if (v18 >= v17 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      unint64_t v19 = v18 + 1;
      uint64_t v6 = v22;
    }
    *(void *)(v6 + 16)  = v19;
    uint64_t v20 = v6 + 96 * v18;
    *(void *)(v20 + 32)  = i;
    *(void *)(v20 + 48)  = v11;
    *(void *)(v20 + 56)  = v10;
    *(void *)(v20 + 64)  = v12;
    *(unsigned char *)(v20 + 72)  = v24;
    *(_OWORD *)(v20 + 80)  = v27;
    *(_OWORD *)(v20 + 96)  = v26;
    *(_OWORD *)(v20 + 112)  = v25;
    uint64_t v3 = a2;
  }
  while (v4 != v2);
  return v6;
}

ValueMetadata *type metadata accessor for _Proto_SkeletonDefinition_v1()
{
  return &type metadata for _Proto_SkeletonDefinition_v1;
}

uint64_t initializeWithCopy for _Proto_SkeletonDefinition_v1.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = v4;
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _Proto_SkeletonDefinition_v1.Joint(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16)  = v4;
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for _Proto_SkeletonDefinition_v1.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = v5;
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for _Proto_SkeletonDefinition_v1.Joint(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _Proto_SkeletonDefinition_v1.Joint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72)  = 0;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _Proto_SkeletonDefinition_v1.Joint()
{
  return &type metadata for _Proto_SkeletonDefinition_v1.Joint;
}

uint64_t __RKTimerTrigger.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16)  = 0;
  *(unsigned char *)(result + 18)  = 0;
  return result;
}

uint64_t __RKTimerTrigger.init()()
{
  uint64_t result = v0;
  *(_WORD *)(v0 + 16)  = 0;
  *(unsigned char *)(v0 + 18)  = 0;
  return result;
}

uint64_t __RKTimerTrigger.deinit()
{
  return v0;
}

uint64_t __RKTimerTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKTimerTrigger()
{
  return self;
}

void one-time initialization function for basicFloatAnimationData()
{
  static EmphasizeAnimations.basicFloatAnimationData  = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicFloatAnimationData;
}

void one-time initialization function for playfulFloatAnimationData()
{
  static EmphasizeAnimations.playfulFloatAnimationData  = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulFloatAnimationData;
}

void one-time initialization function for wildFloatAnimationData()
{
  static EmphasizeAnimations.wildFloatAnimationData  = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildFloatAnimationData;
}

void *specialized static EmphasizeAnimations.createEmphasizeFloatAnimation(style:)(unsigned char *a1)
{
  if (!*a1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 318, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for basicFloatAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 375, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for playfulFloatAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 404, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for wildFloatAnimationData != -1) {
LABEL_9:
  }
    swift_once();
LABEL_8:
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t QueryPredicate.makeInternal()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t QueryPredicate.enumerate(using:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t static QueryPredicateProtocol.everything.getter@<X0>(uint64_t (**a1)()@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for QueryPredicates.Constant();
  WitnessTable  = swift_getWitnessTable();
  return QueryPredicateProtocol.eraseToQueryPredicate()(v2, WitnessTable, a1);
}

uint64_t QueryPredicate.evaluate(value:)()
{
  return (*v0)() & 1;
}

uint64_t QueryPredicate.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = implicit closure #1 in QueryPredicate.init<A>(_:)(v13, v14, v15, v16);
  unint64_t v19 = v18;
  uint64_t v20 = implicit closure #3 in QueryPredicate.init<A>(_:)(a1, a2, a3, a4);
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryInternalizable);
  if (swift_dynamicCast())
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
    outlined init with take of BindableDataInternal(v27, (uint64_t)v29);
    outlined init with copy of __REAssetService((uint64_t)v29, (uint64_t)v27);
    uint64_t v23 = swift_allocObject();
    outlined init with take of BindableDataInternal(v27, v23 + 16);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    long long v25 = partial apply for implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:);
  }
  else
  {
    uint64_t v28 = 0;
    memset(v27, 0, sizeof(v27));
    outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for QueryInternalizable?);
    long long v25 = (uint64_t (*)())makeCustomPredicate<A>(predicate:)(a1, a3, a4);
    uint64_t v23 = v26;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
  }
  *a5  = v17;
  a5[1]  = v19;
  a5[2]  = v25;
  a5[3]  = (uint64_t (*)())v23;
  a5[4]  = v20;
  a5[5]  = v22;
  return result;
}

uint64_t (*implicit closure #1 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v9 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v7 + 16))(v10, v9);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2)  = a2;
  *((void *)v12 + 3)  = a3;
  *((void *)v12 + 4)  = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return partial apply for implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
}

uint64_t (*implicit closure #3 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __n128 v9 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v7 + 16))(v10, v9);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2)  = a2;
  *((void *)v12 + 3)  = a3;
  *((void *)v12 + 4)  = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return partial apply for implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:);
}

uint64_t implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t makeCustomPredicate<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Entity();
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
    unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16)  = a2;
    *(void *)(v11 + 24)  = a3;
    uint64_t v12 = (char *)(v11 + v10);
    uint64_t v13 = partial apply for closure #1 in makeCustomPredicate<A>(predicate:);
LABEL_9:
    unint64_t v19 = v13;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v8, a2);
    return (uint64_t)v19;
  }
  uint64_t v14 = swift_conformsToProtocol2();
  if (v14) {
    uint64_t v15 = AssociatedTypeWitness;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15)
  {
    uint64_t v16 = v14;
    if (v14)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
      unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      unint64_t v18 = (void *)swift_allocObject();
      v18[2]  = a2;
      v18[3]  = a3;
      v18[4]  = AssociatedTypeWitness;
      void v18[5] = v16;
      uint64_t v12 = (char *)v18 + v17;
      uint64_t v13 = partial apply for closure #2 in makeCustomPredicate<A>(predicate:);
      goto LABEL_9;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicate<A>@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = QueryPredicate.evaluate(value:)();
  *a1  = result & 1;
  return result;
}

uint64_t QueryPredicateProtocol.eraseToQueryPredicate()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  __n128 v7 = MEMORY[0x270FA5388](a1);
  __n128 v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v9, v3, a1, v7);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return QueryPredicate.init<A>(_:)((uint64_t)v9, AssociatedTypeWitness, a1, a2, a3);
}

uint64_t type metadata accessor for QueryPredicates.Constant()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for QueryPredicate<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t dispatch thunk of QueryEvaluable.evaluate(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of QueryEvaluable.enumerate(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t destroy for QueryPredicate()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for QueryPredicate(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40)  = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for QueryPredicate(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1  = *a2;
  a1[1]  = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2]  = a2[2];
  a1[3]  = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[5];
  a1[4]  = a2[4];
  a1[5]  = v6;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for QueryPredicate(_OWORD *a1, _OWORD *a2)
{
  *a1  = *a2;
  swift_release();
  a1[1]  = a2[1];
  swift_release();
  a1[2]  = a2[2];
  swift_release();
  return a1;
}

uint64_t type metadata accessor for QueryPredicate()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for QueryPredicates()
{
  return &type metadata for QueryPredicates;
}

uint64_t getEnumTagSinglePayload for QueryPredicates.Constant(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for QueryPredicates.Constant(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22810EF60);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Constant<A>@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized QueryPredicates.Constant.evaluate(value:)(*v1);
  *a1  = result & 1;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Constant<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t thunk #1 (_:) in createEntityPredicate(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  void v11[3] = MEMORY[0x263F8DD08];
  v11[0]  = a1;
  outlined init with copy of Any((uint64_t)v11, (uint64_t)v10);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v3 = swift_dynamicCastClassUnconditional();
    goto LABEL_3;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v6 = specialized static Entity.entityInfoType(_:)();
    if (v6)
    {
      uint64_t v4 = (*(uint64_t (**)(void))(v6 + 232))();
      uint64_t v7 = *(void *)(v4 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v7, 0);
      *(void *)(v4 + 16)  = v9;
      MEMORY[0x22A68E750](v9, v4);
      swift_release();
      goto LABEL_7;
    }
    uint64_t v3 = makeEntity(for:)(v9);
LABEL_3:
    uint64_t v4 = v3;
LABEL_7:
    char v8 = a2(v4);
    swift_release();
    return v8 & 1;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in makeCustomPredicate<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = implicit closure #1 in closure #1 in makeCustomPredicate<A>(predicate:)(a1, a2, a3);
  uint64_t v7 = v6;
  char v8 = (void *)swift_allocObject();
  _OWORD v8[2] = a2;
  void v8[3] = a3;
  void v8[4] = v5;
  v8[5]  = v7;
  uint64_t v16 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.QueryEvaluable.Value) -> (@unowned Bool);
  unint64_t v17 = v8;
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  swift_dynamicCast();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16)  = v15;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16)  = _s10RealityKit6EntityCSbIegnr_ACSbIeggd_TRTA_0;
  *(void *)(v10 + 24)  = v9;
  v14[4]  = partial apply for thunk #1 (_:) in createEntityPredicate(_:);
  v14[5]  = v10;
  v14[0]  = MEMORY[0x263EF8330];
  v14[1]  = 1107296256;
  v14[2]  = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool);
  v14[3]  = &block_descriptor_28;
  uint64_t v11 = _Block_copy(v14);
  swift_retain();
  swift_release();
  CustomEntityPredicate  = REQueryCreateCustomEntityPredicate();
  _Block_release(v11);
  swift_release();
  return CustomEntityPredicate;
}

uint64_t (*implicit closure #1 in closure #1 in makeCustomPredicate<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __n128 v7 = MEMORY[0x270FA5388](a1);
  char v8 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v5 + 16))(v8, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16)  = a2;
  *(void *)(v10 + 24)  = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in makeCustomPredicate<A>(predicate:);
}

uint64_t closure #2 in makeCustomPredicate<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, v13, v14, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2)  = a4;
  *((void *)v16 + 3)  = a5;
  *((void *)v16 + 4)  = a1;
  *((void *)v16 + 5)  = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v12, a4);
  aBlock[4]  = partial apply for thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:);
  aBlock[5]  = v16;
  aBlock[0]  = MEMORY[0x263EF8330];
  aBlock[1]  = 1107296256;
  aBlock[2]  = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool);
  aBlock[3]  = &block_descriptor_30;
  unint64_t v17 = _Block_copy(aBlock);
  swift_release();
  CustomComponentPredicate  = REQueryCreateCustomComponentPredicate();
  _Block_release(v17);
  return CustomComponentPredicate;
}

uint64_t thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = &v16[-v13];
  closure #1 in thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:)(a2, a3, a1, v18);
  outlined init with copy of Component?((uint64_t)v18, (uint64_t)&v16[8]);
  if (*(void *)&v16[32])
  {
    outlined init with take of BindableDataInternal((long long *)&v16[8], (uint64_t)v17);
    outlined init with copy of __REAssetService((uint64_t)v17, (uint64_t)&v16[8]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
    swift_dynamicCast();
    (*(void (**)(unsigned char *__return_ptr, unsigned char *, uint64_t, uint64_t))(v10 + 24))(&v16[7], v14, a5, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for Component?);
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
    return v16[7];
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for Component?);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v16[8], &demangling cache variable for type metadata for Component?);
    return 0;
  }
}

uint64_t closure #1 in thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  (*(void (**)(void *__return_ptr))(a2 + 80))(v17);
  if (LODWORD(v17[0]) != 36)
  {
    v17[0]  = a3;
    __n128 v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a2 + 64);
    a4[3]  = a1;
    a4[4]  = a2;
    __swift_allocate_boxed_opaque_existential_1(a4);
    return v11(v17, a1, a2);
  }
  uint64_t Entity = REComponentGetEntity();
  v17[3]  = MEMORY[0x263F8DD08];
  v17[0]  = Entity;
  outlined init with copy of Any((uint64_t)v17, (uint64_t)v16);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v9 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t result = REEntityIsBeingDestroyed();
    if (result)
    {
      __break(1u);
      return result;
    }
    uint64_t v13 = specialized static Entity.entityInfoType(_:)();
    if (v13)
    {
      uint64_t v10 = (*(uint64_t (**)(void))(v13 + 232))();
      uint64_t v14 = *(void *)(v10 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v14, 0);
      *(void *)(v10 + 16)  = v15;
      MEMORY[0x22A68E750](v15, v10);
      swift_release();
      goto LABEL_9;
    }
    uint64_t v9 = makeEntity(for:)(v15);
  }
  uint64_t v10 = v9;
LABEL_9:
  v17[0]  = v10;
  Entity.ComponentSet.existentialBox(for:)(a1, a2, (uint64_t)a4);
  return swift_release();
}

uint64_t specialized QueryPredicates.Constant.evaluate(value:)(char a1)
{
  return a1 & 1;
}

uint64_t partial apply for closure #2 in makeCustomPredicate<A>(predicate:)()
{
  return closure #2 in makeCustomPredicate<A>(predicate:)(v0[4], v0[5], (uint64_t)v0+ ((*(unsigned __int8 *)(*(void *)(v0[2] - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0[2] - 8) + 80)), v0[2], v0[3]);
}

uint64_t partial apply for closure #1 in makeCustomPredicate<A>(predicate:)()
{
  return closure #1 in makeCustomPredicate<A>(predicate:)(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_22810F9E8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.QueryEvaluable.Value) -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1  = result & 1;
  return result;
}

uint64_t sub_22810FA54()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _s10RealityKit6EntityCSbIegnr_ACSbIeggd_TRTA_0(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed Entity) -> (@out Bool)(a1, *(void (**)(unsigned __int8 *__return_ptr, uint64_t *))(v1 + 16));
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in makeCustomPredicate<A>(predicate:)()
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(*(void *)(v0 + 24) + 8) + 24))(&v2);
  return v2;
}

uint64_t objectdestroyTm_5()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:)(uint64_t a1)
{
  return thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:)(a1, v1[4], v1[5], (uint64_t)v1+ ((*(unsigned __int8 *)(*(void *)(v1[2] - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[2] - 8) + 80)), v1[2], v1[3]);
}

uint64_t outlined init with copy of Component?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22810FCF0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(v0 + 32) + 8) + 32))();
}

uint64_t objectdestroy_35Tm()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)()
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(*(void *)(v0 + 32) + 8) + 24))(&v2);
  return v2;
}

uint64_t AudioFileResource.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioFileResource.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 41);
  char v3 = *(unsigned char *)(v1 + 42);
  uint64_t v4 = *(void *)(v1 + 48);
  char v5 = *(unsigned char *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  char v7 = *(unsigned char *)(v1 + 72);
  uint64_t v9 = *(void *)(v1 + 80);
  uint64_t v8 = *(void *)(v1 + 88);
  int v10 = *(_DWORD *)(v1 + 96);
  char v11 = *(unsigned char *)(v1 + 100);
  *(unsigned char *)a1  = *(unsigned char *)(v1 + 40);
  *(unsigned char *)(a1 + 1)  = v2;
  *(unsigned char *)(a1 + 2)  = v3;
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(unsigned char *)(a1 + 32)  = v7;
  *(void *)(a1 + 40)  = v9;
  *(void *)(a1 + 48)  = v8;
  *(_DWORD *)(a1 + 56)  = v10;
  *(unsigned char *)(a1 + 60)  = v11;
  return swift_bridgeObjectRetain();
}

uint64_t AudioFileResource.__allocating_init(fromCore:)(uint64_t a1)
{
  return AudioFileResource.init(fromCore:)(a1);
}

uint64_t AudioFileResource.init(fromCore:)(uint64_t a1)
{
  swift_retain();
  char v3 = (void *)REAssetCopyDescription();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  uint64_t v27 = 47;
  unint64_t v28 = 0xE100000000000000;
  v26[2]  = &v27;
  uint64_t v7 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v26, v4, v6);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v7 + 32 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = v9[2];
    uint64_t v13 = v9[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    uint64_t v14 = MEMORY[0x22A688B50](v10, v11, v12, v13);
    unint64_t v16 = v15;
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  *(void *)(v1 + 24)  = v14;
  *(void *)(v1 + 32)  = v16;
  if ((REAssetHandleIsLoaded() & 1) == 0) {
    REAssetHandleLoadNow();
  }
  AudioFileResource.Configuration.init(from:)((uint64_t)&v27);
  char v17 = BYTE1(v27);
  char v18 = BYTE2(v27);
  unint64_t v19 = v28;
  char v20 = v29;
  uint64_t v21 = v30;
  char v22 = v31;
  int v23 = v33;
  char v24 = v34;
  *(unsigned char *)(v1 + 40)  = v27;
  *(unsigned char *)(v1 + 41)  = v17;
  *(unsigned char *)(v1 + 42)  = v18;
  *(void *)(v1 + 48)  = v19;
  *(unsigned char *)(v1 + 56)  = v20;
  *(void *)(v1 + 64)  = v21;
  *(unsigned char *)(v1 + 72)  = v22;
  *(_OWORD *)(v1 + 80)  = v32;
  *(_DWORD *)(v1 + 96)  = v23;
  *(unsigned char *)(v1 + 100)  = v24;
  swift_release();
  return AudioResource.init(fromCore:)(a1);
}

uint64_t AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v7 = v6;
  v90  = a4;
  v88  = a3;
  v101  = a2;
  uint64_t v11 = type metadata accessor for URL();
  v104  = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  v89  = (char *)&InputMode - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v13 = *a5;
  int v14 = a5[1];
  v100  = a5[2];
  v99  = *((void *)a5 + 1);
  v98  = a5[16];
  v97  = *((void *)a5 + 3);
  v96  = a5[32];
  uint64_t v15 = *((void *)a5 + 6);
  v95  = *((void *)a5 + 5);
  int v16 = *((_DWORD *)a5 + 14);
  int v17 = a5[60];
  uint64_t v18 = *a6;
  swift_retain();
  IsCompletelyLoaded  = REAudioFileAssetIsCompletelyLoaded();
  v103  = v15;
  v91  = v11;
  v102  = v13;
  v94  = v14;
  v93  = v16;
  v92  = v17;
  if (!IsCompletelyLoaded)
  {
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = v101;
    uint64_t v28 = v104;
    goto LABEL_6;
  }
  v87  = v18;
  AudioFileResource.Configuration.init(from:)((uint64_t)&v114);
  int v78 = v114;
  v85  = BYTE1(v114);
  uint64_t v20 = a1;
  char v21 = BYTE2(v114);
  v84  = v115;
  char v22 = v116;
  uint64_t v79 = v117;
  v83  = v118;
  uint64_t v23 = v120;
  v82  = v119;
  v81  = v121;
  v80  = v122;
  v86  = v20;
  InputMode  = REAudioFileAssetGetInputMode();
  LOBYTE(v114)  = v13;
  BYTE1(v114)  = v14;
  BYTE2(v114)  = v100;
  v115  = v99;
  v116  = v98;
  v117  = v97;
  LOBYTE(v118)  = v96;
  v119  = v95;
  v120  = v15;
  v121  = v16;
  v122  = v17;
  v105[0]  = v78;
  v105[1]  = v85;
  v105[2]  = v21;
  v106  = v84;
  v107  = v22;
  v108  = v79;
  v109  = v83;
  v110  = v82;
  v111  = v23;
  v112  = v81;
  v113  = v80;
  BOOL v24 = specialized static AudioFileResource.Configuration.== infix(_:_:)((uint64_t)&v114, (uint64_t)v105);
  swift_bridgeObjectRelease();
  if (v24 && InputMode == (0x20001u >> (8 * v87)))
  {
    uint64_t v25 = 0;
    int v26 = 1;
    uint64_t v27 = v101;
    uint64_t v11 = v91;
    uint64_t v28 = v104;
    a1  = v86;
LABEL_6:
    char v29 = v90;
    uint64_t v30 = v89;
    goto LABEL_15;
  }
  if (one-time initialization token for audio != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Logger.audio);
  long long v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v11 = v91;
  uint64_t v35 = v104;
  uint64_t v36 = v86;
  char v37 = v94;
  if (v34)
  {
    unint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v38 = 0;
    _os_log_impl(&dword_227DD2000, v32, v33, "[API/RealityKit] AudioFileResource initialized with different CreateOptions. Cloning the internal asset.", v38, 2u);
    MEMORY[0x22A696500](v38, -1, -1);
  }

  uint64_t v39 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v39, (uint64_t)&v114);
  uint64_t v40 = v117;
  uint64_t v41 = v118;
  __swift_project_boxed_opaque_existential_1(&v114, v117);
  (*(void (**)(uint64_t, uint64_t))(v41 + 32))(v40, v41);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  LOBYTE(v114)  = v102;
  BYTE1(v114)  = v37;
  BYTE2(v114)  = v100;
  v115  = v99;
  v116  = v98;
  v117  = v97;
  LOBYTE(v118)  = v96;
  v119  = v95;
  v120  = v103;
  v121  = v93;
  v122  = v92;
  type metadata accessor for REAudioFileAssetConfigurationWrapper();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  REAudioFileAssetConfigurationWrapper.init(configuration:)((char *)&v114);
  REAudioFileAssetConfigurationSetInputMode();
  uint64_t v25 = REAudioFileAssetCloneWithConfiguration();
  swift_release();
  int v26 = 0;
  if (v25) {
    a1  = v25;
  }
  else {
    a1  = v36;
  }
  char v29 = v90;
  uint64_t v30 = v89;
  uint64_t v27 = v101;
  uint64_t v28 = v35;
LABEL_15:
  uint64_t v42 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, v27, v11);
  if (v29)
  {
    uint64_t v43 = v88;
  }
  else
  {
    uint64_t v43 = URL.lastPathComponent.getter();
    char v29 = v44;
  }
  v90  = *(void (**)(void, void))(v42 + 8);
  v104  = v42 + 8;
  v90(v30, v11);
  *(void *)(v7 + 24)  = v43;
  *(void *)(v7 + 32)  = v29;
  *(unsigned char *)(v7 + 40)  = v102;
  *(unsigned char *)(v7 + 41)  = v94;
  *(unsigned char *)(v7 + 42)  = v100;
  *(void *)(v7 + 48)  = v99;
  *(unsigned char *)(v7 + 56)  = v98;
  *(void *)(v7 + 64)  = v97;
  *(unsigned char *)(v7 + 72)  = v96;
  uint64_t v45 = v103;
  *(void *)(v7 + 80)  = v95;
  *(void *)(v7 + 88)  = v45;
  *(_DWORD *)(v7 + 96)  = v93;
  *(unsigned char *)(v7 + 100)  = v92;
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v46 = AudioResource.init(fromCore:)(a1);
  swift_retain();
  if (v25) {
    RERelease();
  }
  char v47 = v102;
  if (v26)
  {
    v90(v101, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((REAssetHandleIsLoaded() & 1) == 0)
    {
      REAssetHandleLoadNow();
      if (REAssetHandleLoadFailed())
      {
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v49 = (void *)REAssetCopyDescription();
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v52 = v51;

        uint64_t FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
        uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v56 = v55;

        v114  = v50;
        v115  = v52;
        swift_bridgeObjectRetain();
        v57._countAndFlagsBits  = 8250;
        v57._object  = (void *)0xE200000000000000;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v58._countAndFlagsBits  = v54;
        v58._object  = v56;
        String.append(_:)(v58);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v59 = v114;
        uint64_t v60 = v115;
        lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
        swift_allocError();
        *unint64_t v61 = v59;
        v61[1]  = v60;
        swift_willThrow();
        swift_release();
        v90(v101, v91);
        return v46;
      }
    }
    unint64_t v62 = 0xE900000000000067;
    uint64_t v63 = 0x6E696D6165727473;
    if (v47)
    {
      char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v64 & 1) == 0)
      {
        uint64_t v63 = 0x6564616F6C657270;
        unint64_t v62 = 0xE900000000000064;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for audio != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.audio);
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      v114  = v69;
      *(_DWORD *)uint64_t v68 = 136315906;
      swift_bridgeObjectRetain();
      AudioAssetID  = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v62, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v68 + 12)  = 2080;
      uint64_t v70 = *(void *)(v46 + 24);
      unint64_t v71 = *(void *)(v46 + 32);
      swift_bridgeObjectRetain();
      AudioAssetID  = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v68 + 22)  = 2048;
      AudioAssetID  = REAudioFileAssetGetAudioAssetID();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v68 + 32)  = 2048;
      AudioAssetID  = REAssetGetAssetId();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_227DD2000, v66, v67, "[API/RealityKit] Loading %s AudioFileResource %s with audioAssetID: %llu and REAssetID: %llu", (uint8_t *)v68, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v69, -1, -1);
      MEMORY[0x22A696500](v68, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    id v72 = (id)REAudioFileGetAVAudioFormat();
    uint64_t v73 = v91;
    if (!v72)
    {
      swift_release();
      lazy protocol witness table accessor for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError();
      swift_allocError();
      *int64_t v76 = 1;
      swift_willThrow();
      swift_release();
      v90(v101, v73);
      return v46;
    }
    uint64_t v74 = v72;
    AVAudioFormat.validateAudioFormatSupportsMultiChannel()();
    if (v75)
    {
      v90(v101, v73);

      swift_release_n();
      return v46;
    }
    v90(v101, v73);
  }
  swift_release();
  return v46;
}

uint64_t key path setter for AudioFileResource.loadingStrategy : AudioFileResource(unsigned char *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 16);
  if (*a1) {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  else {
    char v3 = 1;
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x270F1C948](v2, v3 & 1);
}

uint64_t AudioFileResource.loadingStrategy.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REAudioFileAssetGetStreaming();
  *a1  = result ^ 1;
  return result;
}

uint64_t AudioFileResource.loadingStrategy.setter(unsigned char *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (*a1) {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  else {
    char v3 = 1;
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x270F1C948](v2, v3 & 1);
}

uint64_t (*AudioFileResource.loadingStrategy.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1  = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8)  = REAudioFileAssetGetStreaming() ^ 1;
  return AudioFileResource.loadingStrategy.modify;
}

uint64_t AudioFileResource.loadingStrategy.modify(uint64_t *a1)
{
  if (*((unsigned char *)a1 + 8) == 1) {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  else {
    char v2 = 1;
  }
  uint64_t v3 = *a1;
  swift_bridgeObjectRelease();

  return MEMORY[0x270F1C948](v3, v2 & 1);
}

BOOL AudioFileResource.shouldLoop.getter()
{
  return REAudioFileAssetGetLoopCount() == -1;
}

uint64_t AudioFileResource.shouldLoop.setter()
{
  return REAudioFileAssetSetLoopCount();
}

uint64_t (*AudioFileResource.shouldLoop.modify(uint64_t a1))()
{
  *(void *)a1  = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8)  = REAudioFileAssetGetLoopCount() == -1;
  return AudioFileResource.shouldLoop.modify;
}

uint64_t AudioFileResource.shouldLoop.modify()
{
  return REAudioFileAssetSetLoopCount();
}

uint64_t AudioFileResource.__ivar_destroyer()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t AudioFileResource.deinit()
{
  uint64_t v0 = AudioResource.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioFileResource.__deallocating_deinit()
{
  AudioResource.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void AudioFileResource.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(v0 + 16));
}

Swift::Int AudioFileResource.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  return Hasher._finalize()();
}

uint64_t AudioFileResource.__duration.getter()
{
  return REAudioFileAssetGetLengthInSeconds();
}

uint64_t AudioFileResource.duration.getter()
{
  REAudioFileAssetGetLengthInSeconds();

  return static Duration.seconds(_:)();
}

uint64_t AudioFileResource.init(named:in:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 32)  = a3;
  *(void *)(v5 + 40)  = v4;
  *(void *)(v5 + 16)  = a1;
  *(void *)(v5 + 24)  = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v5 + 48)  = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  *(void *)(v5 + 56)  = v7;
  *(void *)(v5 + 64)  = *(void *)(v7 - 8);
  *(void *)(v5 + 72)  = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  *(unsigned char *)(v5 + 188)  = *(unsigned char *)a4;
  *(unsigned char *)(v5 + 189)  = *(unsigned char *)(a4 + 1);
  *(unsigned char *)(v5 + 190)  = *(unsigned char *)(a4 + 2);
  uint64_t v9 = *(void *)(a4 + 8);
  *(void *)(v5 + 80)  = v8;
  *(void *)(v5 + 88)  = v9;
  *(unsigned char *)(v5 + 191)  = *(unsigned char *)(a4 + 16);
  *(void *)(v5 + 96)  = *(void *)(a4 + 24);
  *(unsigned char *)(v5 + 192)  = *(unsigned char *)(a4 + 32);
  *(_OWORD *)(v5 + 104)  = *(_OWORD *)(a4 + 40);
  *(_DWORD *)(v5 + 184)  = *(_DWORD *)(a4 + 56);
  *(unsigned char *)(v5 + 193)  = *(unsigned char *)(a4 + 60);
  type metadata accessor for MainActor();
  *(void *)(v5 + 120)  = static MainActor.shared.getter();
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 128)  = v11;
  *(void *)(v5 + 136)  = v10;
  return MEMORY[0x270FA2498](AudioFileResource.init(named:in:configuration:), v11, v10);
}

uint64_t AudioFileResource.init(named:in:configuration:)()
{
  uint64_t v58 = v0;
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = *(id *)(v0 + 32);
  }
  else
  {
    id v2 = objc_msgSend(self, sel_mainBundle);
    uint64_t v1 = 0;
  }
  *(void *)(v0 + 144)  = v1;
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  id v8 = v1;
  static AudioFileResource.url(forAssetNamed:in:)(v7, v6, v2, v5);

  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3);
  uint64_t v10 = *(void *)(v0 + 48);
  uint64_t v12 = *(void *)(v0 + 16);
  uint64_t v11 = *(void *)(v0 + 24);
  if (v9 == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v10);
    lazy protocol witness table accessor for type AudioFileResource.Error and conformance AudioFileResource.Error();
    swift_allocError();
    *uint64_t v13 = v12;
    v13[1]  = v11;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
    return v41();
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 32))(*(void *)(v0 + 80), *(void *)(v0 + 48), *(void *)(v0 + 56));
  uint64_t v14 = URL.pathExtension.getter();
  uint64_t v16 = v15;
  int v17 = (void *)MEMORY[0x22A688A50](v12, v11);
  id v18 = objc_msgSend(v17, sel_pathExtension);

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  if (v14 == v19 && v16 == v21)
  {
    swift_bridgeObjectRelease_n();
LABEL_10:
    uint64_t v23 = *(void **)(v0 + 24);
    swift_bridgeObjectRetain();
    uint64_t v24 = *(void *)(v0 + 16);
    goto LABEL_12;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22) {
    goto LABEL_10;
  }
  uint64_t v25 = *(void **)(v0 + 24);
  uint64_t v49 = *(void *)(v0 + 16);
  uint64_t v50 = v25;
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits  = 46;
  v26._object  = (void *)0xE100000000000000;
  String.append(_:)(v26);
  uint64_t v27 = URL.pathExtension.getter();
  char v29 = v28;
  swift_bridgeObjectRetain();
  v30._countAndFlagsBits  = v27;
  v30._object  = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = v49;
  uint64_t v23 = v50;
LABEL_12:
  char v31 = *(unsigned char *)(v0 + 193);
  int v32 = *(_DWORD *)(v0 + 184);
  char v33 = *(unsigned char *)(v0 + 192);
  char v34 = *(unsigned char *)(v0 + 191);
  uint64_t v36 = *(void **)(v0 + 88);
  uint64_t v35 = *(void *)(v0 + 96);
  char v37 = *(unsigned char *)(v0 + 190);
  char v38 = *(unsigned char *)(v0 + 189);
  uint64_t v39 = *(void **)(v0 + 32);
  LOBYTE(v49)  = *(unsigned char *)(v0 + 188);
  BYTE1(v49)  = v38;
  BYTE2(v49)  = v37;
  uint64_t v50 = v36;
  char v51 = v34;
  uint64_t v52 = v35;
  char v53 = v33;
  long long v54 = *(_OWORD *)(v0 + 104);
  int v55 = v32;
  char v56 = v31;
  v57[0]  = 1;
  uint64_t v40 = static AudioFileResource.makeAssetRef(bundle:name:configuration:inputMode:)(v39, v24, v23, (unsigned __int8 *)&v49, v57);
  *(void *)(v0 + 152)  = v40;
  uint64_t v43 = v40;
  swift_bridgeObjectRelease();
  uint64_t v44 = URL.absoluteString.getter();
  uint64_t v46 = v45;
  *(void *)(v0 + 160)  = v45;
  uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)
                                                          + async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:));
  char v47 = (void *)swift_task_alloc();
  *(void *)(v0 + 168)  = v47;
  *char v47 = v0;
  v47[1]  = AudioFileResource.init(named:in:configuration:);
  return v48(v43, v44, v46);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  id v2 = *v1;
  *(void *)(*v1 + 176)  = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = AudioFileResource.init(named:in:configuration:);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 128);
    uint64_t v4 = *(void *)(v2 + 136);
    uint64_t v5 = AudioFileResource.init(named:in:configuration:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  void (*v21)(void, void);
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 v25[8];
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  unsigned __int8 v34[9];
  uint64_t v35;
  uint64_t v36;

  uint64_t v35 = v0;
  char v22 = *(void *)(v0 + 152);
  uint64_t v23 = *(void *)(v0 + 176);
  uint64_t v24 = *(void **)(v0 + 144);
  id v18 = *(_DWORD *)(v0 + 184);
  uint64_t v19 = *(unsigned char *)(v0 + 193);
  uint64_t v16 = *(void *)(v0 + 104);
  int v17 = *(void *)(v0 + 112);
  uint64_t v15 = *(unsigned char *)(v0 + 192);
  uint64_t v1 = *(unsigned char *)(v0 + 191);
  id v2 = *(void *)(v0 + 88);
  uint64_t v14 = *(void *)(v0 + 96);
  uint64_t v3 = *(unsigned char *)(v0 + 190);
  uint64_t v4 = *(unsigned char *)(v0 + 189);
  uint64_t v5 = *(unsigned char *)(v0 + 188);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  id v8 = *(void *)(v0 + 56);
  int v9 = *(void *)(v0 + 64);
  uint64_t v21 = *(void (**)(void, void))(v0 + 24);
  uint64_t v20 = *(void *)(v0 + 16);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v6, v8);
  v25[0]  = v5;
  v25[1]  = v4;
  v25[2]  = v3;
  Swift::String v26 = v2;
  uint64_t v27 = v1;
  uint64_t v28 = v14;
  char v29 = v15;
  Swift::String v30 = v16;
  char v31 = v17;
  int v32 = v18;
  char v33 = v19;
  v34[0]  = 1;
  type metadata accessor for AudioFileResource();
  swift_allocObject();
  uint64_t v10 = AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(v22, v7, v20, v21, v25, v34);
  RERelease();

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
  if (!v23) {
    uint64_t v11 = v10;
  }
  return v12(v11);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[18];
  id v2 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  swift_release();
  RERelease();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t AudioFileResource.init(named:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[10]  = a5;
  v6[11]  = v5;
  v6[8]  = a3;
  v6[9]  = a4;
  v6[6]  = a1;
  v6[7]  = a2;
  type metadata accessor for MainActor();
  v6[12]  = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[13]  = v8;
  v6[14]  = v7;
  return MEMORY[0x270FA2498](AudioFileResource.init(named:from:in:), v8, v7);
}

uint64_t AudioFileResource.init(named:from:in:)()
{
  uint64_t v1 = (void *)v0[10];
  uint64_t v3 = v0[6];
  id v2 = (void *)v0[7];
  uint64_t v11 = v0[8];
  uint64_t v12 = (void *)v0[9];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits  = 58;
  v4._object  = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits  = v3;
  v5._object  = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v0[15]  = v12;
  static LoadableResource.getAssetRefFromRealityFileInBundle(named:in:)(v11, v12, v1);
  uint64_t v7 = *(void *)(v6 + 16);
  v0[16]  = v7;
  RERetain();
  swift_release();
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)
                                                          + async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:));
  uint64_t v8 = (void *)swift_task_alloc();
  v0[17]  = v8;
  *uint64_t v8 = v0;
  v8[1]  = AudioFileResource.init(named:from:in:);
  return v10(v7, v11, (uint64_t)v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  id v2 = *v1;
  *(void *)(*v1 + 144)  = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = *(void *)(v2 + 104);
    Swift::String v4 = *(void *)(v2 + 112);
    Swift::String v5 = AudioFileResource.init(named:from:in:);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 104);
    Swift::String v4 = *(void *)(v2 + 112);
    Swift::String v5 = AudioFileResource.init(named:from:in:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  swift_release();
  if (one-time initialization token for audio != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.audio);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    Swift::String v4 = v0[6];
    uint64_t v12 = v0[9];
    Swift::String v5 = v0[7];
    uint64_t v13 = v0[8];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = v14;
    *(_DWORD *)uint64_t v6 = 136315906;
    swift_bridgeObjectRetain();
    v0[2]  = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12)  = 2048;
    v0[3]  = REAudioFileAssetGetAudioAssetID();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22)  = 2048;
    v0[4]  = REAssetGetAssetId();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 32)  = 2080;
    swift_bridgeObjectRetain();
    v0[5]  = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_227DD2000, v2, v3, "[API/RealityKit] Loading AudioFileResource %s with audioAssetID: %llu and REAssetID: %llu from scene: %s", (uint8_t *)v6, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v14, -1, -1);
    MEMORY[0x22A696500](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v7 = v0[16];
  uint64_t v8 = (void *)v0[10];
  type metadata accessor for AudioFileResource();
  swift_allocObject();
  int v9 = AudioFileResource.init(fromCore:)(v7);
  RERelease();

  uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
  return v10(v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  RERelease();

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AudioFileResource.init(contentsOf:withName:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24)  = a2;
  *(void *)(v4 + 32)  = a3;
  *(void *)(v4 + 16)  = a1;
  uint64_t v6 = type metadata accessor for URL();
  *(void *)(v4 + 40)  = v6;
  *(void *)(v4 + 48)  = *(void *)(v6 - 8);
  *(void *)(v4 + 56)  = swift_task_alloc();
  uint64_t v7 = swift_task_alloc();
  *(unsigned char *)(v4 + 164)  = *(unsigned char *)a4;
  *(unsigned char *)(v4 + 165)  = *(unsigned char *)(a4 + 1);
  *(unsigned char *)(v4 + 166)  = *(unsigned char *)(a4 + 2);
  uint64_t v8 = *(void *)(a4 + 8);
  *(void *)(v4 + 64)  = v7;
  *(void *)(v4 + 72)  = v8;
  *(unsigned char *)(v4 + 167)  = *(unsigned char *)(a4 + 16);
  *(void *)(v4 + 80)  = *(void *)(a4 + 24);
  *(unsigned char *)(v4 + 168)  = *(unsigned char *)(a4 + 32);
  *(_OWORD *)(v4 + 88)  = *(_OWORD *)(a4 + 40);
  *(_DWORD *)(v4 + 160)  = *(_DWORD *)(a4 + 56);
  *(unsigned char *)(v4 + 169)  = *(unsigned char *)(a4 + 60);
  type metadata accessor for MainActor();
  *(void *)(v4 + 104)  = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v4 + 112)  = v10;
  *(void *)(v4 + 120)  = v9;
  return MEMORY[0x270FA2498](AudioFileResource.init(contentsOf:withName:configuration:), v10, v9);
}

uint64_t AudioFileResource.init(contentsOf:withName:configuration:)()
{
  uint64_t v29 = v0;
  char v1 = *(unsigned char *)(v0 + 169);
  int v2 = *(_DWORD *)(v0 + 160);
  char v3 = *(unsigned char *)(v0 + 168);
  char v4 = *(unsigned char *)(v0 + 167);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80);
  char v7 = *(unsigned char *)(v0 + 166);
  char v8 = *(unsigned char *)(v0 + 165);
  uint64_t v9 = *(void *)(v0 + 24);
  uint64_t v10 = *(void *)(v0 + 32);
  uint64_t v11 = *(void *)(v0 + 16);
  v20[0]  = *(unsigned char *)(v0 + 164);
  v20[1]  = v8;
  v20[2]  = v7;
  uint64_t v21 = v6;
  char v22 = v4;
  uint64_t v23 = v5;
  char v24 = v3;
  long long v25 = *(_OWORD *)(v0 + 88);
  int v26 = v2;
  char v27 = v1;
  char v28 = 1;
  uint64_t v12 = specialized static AudioFileResource.makeAssetRef(from:withName:configuration:inputMode:)(v11, v9, v10, v20);
  *(void *)(v0 + 128)  = v12;
  uint64_t v13 = v12;
  uint64_t v14 = URL.absoluteString.getter();
  uint64_t v16 = v15;
  *(void *)(v0 + 136)  = v15;
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)
                                                          + async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:));
  int v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 144)  = v17;
  *int v17 = v0;
  v17[1]  = AudioFileResource.init(contentsOf:withName:configuration:);
  return v19(v13, v14, v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  int v2 = *v1;
  *(void *)(*v1 + 152)  = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v3 = *(void *)(v2 + 112);
    char v4 = *(void *)(v2 + 120);
    uint64_t v5 = AudioFileResource.init(contentsOf:withName:configuration:);
  }
  else
  {
    char v3 = *(void *)(v2 + 112);
    char v4 = *(void *)(v2 + 120);
    uint64_t v5 = AudioFileResource.init(contentsOf:withName:configuration:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void (*v8)(void, void);
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void, void);
  unsigned __int8 v32[8];
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  unsigned __int8 v41[9];
  uint64_t v42;
  uint64_t v43;

  uint64_t v42 = v0;
  char v1 = *(void *)(v0 + 56);
  int v2 = *(void *)(v0 + 64);
  char v3 = *(void *)(v0 + 40);
  char v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 16);
  swift_release();
  char v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v6, v3);
  v7(v1, v6, v3);
  if (v5)
  {
    uint64_t v30 = *(void *)(v0 + 24);
    char v31 = *(void (**)(void, void))(v0 + 32);
  }
  else
  {
    uint64_t v30 = URL.lastPathComponent.getter();
    char v31 = v8;
  }
  char v28 = *(void *)(v0 + 128);
  uint64_t v29 = *(void *)(v0 + 152);
  uint64_t v23 = *(_DWORD *)(v0 + 160);
  char v24 = *(unsigned char *)(v0 + 169);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v21 = *(void *)(v0 + 88);
  char v22 = *(void *)(v0 + 96);
  uint64_t v10 = *(unsigned char *)(v0 + 168);
  uint64_t v11 = *(unsigned char *)(v0 + 167);
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v13 = *(unsigned char *)(v0 + 166);
  uint64_t v14 = *(unsigned char *)(v0 + 165);
  uint64_t v15 = *(unsigned char *)(v0 + 164);
  long long v25 = *(void *)(v0 + 64);
  int v26 = *(void *)(v0 + 40);
  char v27 = *(void *)(v0 + 16);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 48) + 8);
  ((void (*)(void))v16)(*(void *)(v0 + 56));
  v32[0]  = v15;
  v32[1]  = v14;
  v32[2]  = v13;
  char v33 = v12;
  char v34 = v11;
  uint64_t v35 = v9;
  uint64_t v36 = v10;
  char v37 = v21;
  char v38 = v22;
  uint64_t v39 = v23;
  uint64_t v40 = v24;
  v41[0]  = 1;
  type metadata accessor for AudioFileResource();
  swift_allocObject();
  int v17 = AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(v28, v25, v30, v31, v32, v41);
  RERelease();
  v16(v27, v26);
  swift_task_dealloc();
  id v18 = swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(uint64_t))(v0 + 8);
  if (!v29) {
    id v18 = v17;
  }
  return v19(v18);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  char v1 = v0[5];
  int v2 = v0[6];
  char v3 = v0[2];
  swift_release();
  RERelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  char v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t AudioFileResource.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v34 = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  MEMORY[0x270FA5388](v3);
  char v31 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v30 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16)  = xmmword_22831E360;
  *(void *)(v7 + 32)  = 1701667182;
  *(void *)(v7 + 40)  = 0xE400000000000000;
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v29 = *(void *)(v1 + 32);
  uint64_t v9 = v29;
  uint64_t v10 = MEMORY[0x263F8D310];
  *(void *)(v7 + 48)  = v8;
  *(void *)(v7 + 56)  = v9;
  *(void *)(v7 + 72)  = v10;
  strcpy((char *)(v7 + 80), "configuration");
  *(_WORD *)(v7 + 94)  = -4864;
  char v11 = *(unsigned char *)(v1 + 40);
  char v12 = *(unsigned char *)(v1 + 41);
  char v13 = *(unsigned char *)(v1 + 42);
  uint64_t v14 = *(void *)(v2 + 48);
  char v15 = *(unsigned char *)(v2 + 56);
  uint64_t v16 = *(void *)(v2 + 64);
  char v17 = *(unsigned char *)(v2 + 72);
  uint64_t v18 = *(void *)(v2 + 88);
  uint64_t v28 = *(void *)(v2 + 80);
  int v19 = *(_DWORD *)(v2 + 96);
  int v26 = *(unsigned __int8 *)(v2 + 100);
  int v27 = v19;
  *(void *)(v7 + 120)  = &type metadata for AudioFileResource.Configuration;
  uint64_t v20 = swift_allocObject();
  *(void *)(v7 + 96)  = v20;
  *(unsigned char *)(v20 + 16)  = v11;
  *(unsigned char *)(v20 + 17)  = v12;
  *(unsigned char *)(v20 + 18)  = v13;
  *(void *)(v20 + 24)  = v14;
  *(unsigned char *)(v20 + 32)  = v15;
  *(void *)(v20 + 40)  = v16;
  *(unsigned char *)(v20 + 48)  = v17;
  *(void *)(v20 + 56)  = v28;
  *(void *)(v20 + 64)  = v18;
  *(_DWORD *)(v20 + 72)  = v27;
  *(unsigned char *)(v20 + 76)  = v26;
  *(void *)(v7 + 128)  = 0x6E6F697461727564;
  *(void *)(v7 + 136)  = 0xE800000000000000;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  REAudioFileAssetGetLengthInSeconds();
  uint64_t v21 = static Duration.seconds(_:)();
  *(void *)(v7 + 168)  = MEMORY[0x263F8ED48];
  *(void *)(v7 + 144)  = v21;
  *(void *)(v7 + 152)  = v22;
  uint64_t v23 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v30, 1, 1, v23);
  (*(void (**)(char *, void, uint64_t))(v32 + 104))(v31, *MEMORY[0x263F8E830], v33);
  type metadata accessor for AudioFileResource();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance AudioFileResource@<X0>(uint64_t a1@<X8>)
{
  return AudioFileResource.customMirror.getter(a1);
}

uint64_t specialized static AudioFileResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16)) {
    return 1;
  }
  AudioFileResource.CreateOptions.init(from:)((uint64_t)&v28);
  unsigned __int8 v2 = v28;
  unsigned __int8 v3 = v30;
  unsigned __int8 v4 = v31;
  uint64_t v5 = v32;
  long long v6 = v33;
  char v7 = v34;
  uint64_t v8 = v35;
  char v20 = v36;
  unsigned __int8 v21 = v29;
  AudioFileResource.CreateOptions.init(from:)((uint64_t)&v28);
  unsigned __int8 v9 = v28;
  unsigned __int8 v10 = v29;
  unsigned __int8 v11 = v30;
  unsigned __int8 v12 = v31;
  uint64_t v13 = v32;
  char v14 = v34;
  uint64_t v15 = v35;
  char v16 = v36;
  long long v19 = v33;
  unsigned __int8 v28 = v2;
  unsigned __int8 v29 = v21;
  unsigned __int8 v30 = v3;
  unsigned __int8 v31 = v4;
  uint64_t v32 = v5;
  long long v33 = v6;
  char v34 = v7;
  uint64_t v35 = v8;
  char v36 = v20;
  v22[0]  = v9;
  v22[1]  = v10;
  void v22[2] = v11;
  void v22[3] = v12;
  uint64_t v23 = v13;
  long long v24 = v19;
  char v25 = v14;
  uint64_t v26 = v15;
  char v27 = v16;
  char v17 = specialized static AudioFileResource.CreateOptions.== infix(_:_:)(&v28, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17) {
    return REAudioFileAssetIsEqual();
  }
  else {
    return 0;
  }
}

uint64_t type metadata accessor for AudioFileResource()
{
  return self;
}

uint64_t sub_228112DC8()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 77, 7);
}

unint64_t lazy protocol witness table accessor for type AudioFileResource and conformance AudioResource()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioFileResource and conformance AudioResource;
  if (!lazy protocol witness table cache variable for type AudioFileResource and conformance AudioResource)
  {
    type metadata accessor for AudioFileResource();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileResource and conformance AudioResource);
  }
  return result;
}

uint64_t sub_228112E58@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REAudioFileAssetGetStreaming();
  *a1  = result ^ 1;
  return result;
}

uint64_t sub_228112E90@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = REAudioFileAssetGetLoopCount();
  *a1  = result == -1;
  return result;
}

uint64_t sub_228112EC8()
{
  return REAudioFileAssetSetLoopCount();
}

uint64_t method lookup function for AudioFileResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AudioFileResource);
}

uint64_t dispatch thunk of AudioFileResource.loadingStrategy.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of AudioFileResource.loadingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of AudioFileResource.loadingStrategy.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of AudioFileResource.shouldLoop.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of AudioFileResource.shouldLoop.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of AudioFileResource.shouldLoop.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

unint64_t lazy protocol witness table accessor for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError()
{
  unint64_t result = lazy protocol witness table cache variable for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError;
  if (!lazy protocol witness table cache variable for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError);
  }
  return result;
}

uint64_t RKChangeSceneActionBasicTechnique.__deallocating_deinit()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC17RealityFoundation33RKChangeSceneActionBasicTechnique_targetSceneIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for RKChangeSceneActionBasicTechnique()
{
  return type metadata accessor for RKChangeSceneActionBasicTechnique();
}

uint64_t type metadata accessor for RKChangeSceneActionBasicTechnique()
{
  uint64_t result = type metadata singleton initialization cache for RKChangeSceneActionBasicTechnique;
  if (!type metadata singleton initialization cache for RKChangeSceneActionBasicTechnique) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RKChangeSceneActionBasicTechnique()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for RKChangeSceneActionTechnique.switchScenes() in conformance RKChangeSceneActionBasicTechnique()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

BOOL static LowLevelMesh.VertexSemantic.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void LowLevelMesh.VertexSemantic.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int LowLevelMesh.VertexSemantic.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned char *LowLevelMesh.Attribute.init(semantic:format:layoutIndex:offset:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(unsigned char *)a5  = *result;
  *(void *)(a5 + 8)  = a2;
  *(void *)(a5 + 16)  = a4;
  *(void *)(a5 + 24)  = a3;
  return result;
}

void LowLevelMesh.Attribute.semantic.getter(unsigned char *a1@<X8>)
{
  *a1  = *v1;
}

unsigned char *LowLevelMesh.Attribute.semantic.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*LowLevelMesh.Attribute.semantic.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Attribute.format.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t LowLevelMesh.Attribute.format.setter(uint64_t result)
{
  *(void *)(v1 + 8)  = result;
  return result;
}

uint64_t (*LowLevelMesh.Attribute.format.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Attribute.offset.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t LowLevelMesh.Attribute.offset.setter(uint64_t result)
{
  *(void *)(v1 + 16)  = result;
  return result;
}

uint64_t (*LowLevelMesh.Attribute.offset.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Attribute.layoutIndex.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t LowLevelMesh.Attribute.layoutIndex.setter(uint64_t result)
{
  *(void *)(v1 + 24)  = result;
  return result;
}

uint64_t (*LowLevelMesh.Attribute.layoutIndex.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::LowLevelMesh::Layout __swiftcall LowLevelMesh.Layout.init(bufferIndex:bufferOffset:bufferStride:)(Swift::Int bufferIndex, Swift::Int bufferOffset, Swift::Int bufferStride)
{
  *unsigned __int8 v3 = bufferIndex;
  v3[1]  = bufferOffset;
  v3[2]  = bufferStride;
  result.bufferStride  = bufferStride;
  result.bufferOffset  = bufferOffset;
  result.bufferIndex  = bufferIndex;
  return result;
}

uint64_t LowLevelMesh.Layout.bufferIndex.getter()
{
  return *(void *)v0;
}

uint64_t LowLevelMesh.Layout.bufferIndex.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*LowLevelMesh.Layout.bufferIndex.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Layout.bufferOffset.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t LowLevelMesh.Layout.bufferOffset.setter(uint64_t result)
{
  *(void *)(v1 + 8)  = result;
  return result;
}

uint64_t (*LowLevelMesh.Layout.bufferOffset.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Layout.bufferStride.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t LowLevelMesh.Layout.bufferStride.setter(uint64_t result)
{
  *(void *)(v1 + 16)  = result;
  return result;
}

uint64_t (*LowLevelMesh.Layout.bufferStride.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Descriptor.init(vertexCapacity:vertexAttributes:vertexLayouts:indexCapacity:indexType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = a5;
  uint64_t v7 = a4;
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  int64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    char v34 = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    uint64_t v15 = v34;
    char v16 = (uint64_t *)(a3 + 32);
    unint64_t v17 = v34[2];
    do
    {
      uint64_t v19 = *v16;
      v16 += 3;
      uint64_t v18 = v19;
      uint64_t v35 = v15;
      unint64_t v20 = v15[3];
      unint64_t v21 = v17 + 1;
      if (v17 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v17 + 1, 1);
        uint64_t v15 = v35;
      }
      v15[2]  = v21;
      v15[v17++ + 4]  = v18;
      --v12;
    }
    while (v12);
    uint64_t v6 = a5;
    uint64_t v7 = a4;
    uint64_t v10 = a1;
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x263F8EE78];
    unint64_t v21 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v21)
    {
      int64_t v22 = 0;
      goto LABEL_19;
    }
  }
  int64_t v22 = v15[4];
  unint64_t v23 = v21 - 1;
  if (v21 != 1)
  {
    if (v23 >= 4)
    {
      unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v25 = vdupq_n_s64(v22);
      uint64_t v26 = (int64x2_t *)(v15 + 7);
      unint64_t v27 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v28 = v25;
      do
      {
        int64x2_t v25 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v25, v26[-1]), (int8x16_t)v25, (int8x16_t)v26[-1]);
        int64x2_t v28 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v28, *v26), (int8x16_t)v28, *(int8x16_t *)v26);
        v26 += 2;
        v27 -= 4;
      }
      while (v27);
      int8x16_t v29 = vbslq_s8((int8x16_t)vcgtq_s64(v25, v28), (int8x16_t)v25, (int8x16_t)v28);
      uint64_t v30 = vextq_s8(v29, v29, 8uLL).u64[0];
      int64_t v22 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v29.i64[0], v30), *(int8x8_t *)v29.i8, (int8x8_t)v30);
      if (v23 == (v23 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v24 = 1;
    }
    do
    {
      if (v22 <= v15[v24 + 4]) {
        int64_t v22 = v15[v24 + 4];
      }
      ++v24;
    }
    while (v21 != v24);
  }
LABEL_19:
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFADD__(v22, 1))
  {
    __break(1u);
  }
  else
  {
    *a6  = v22 + 1;
    a6[1]  = v10;
    a6[2]  = v9;
    a6[3]  = a3;
    a6[4]  = v7;
    a6[5]  = v6;
  }
  return result;
}

uint64_t static LowLevelMesh.Descriptor.maxVertexBufferCount.getter()
{
  return 4;
}

uint64_t LowLevelMesh.Descriptor.vertexBufferCount.getter()
{
  return *(void *)v0;
}

uint64_t LowLevelMesh.Descriptor.vertexCapacity.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t LowLevelMesh.Descriptor.vertexCapacity.setter(uint64_t result)
{
  *(void *)(v1 + 8)  = result;
  return result;
}

uint64_t (*LowLevelMesh.Descriptor.vertexCapacity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Descriptor.vertexAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LowLevelMesh.Descriptor.vertexAttributes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16)  = a1;
  return result;
}

uint64_t (*LowLevelMesh.Descriptor.vertexAttributes.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Descriptor.vertexLayouts.getter()
{
  return swift_bridgeObjectRetain();
}

void LowLevelMesh.Descriptor.vertexLayouts.setter(uint64_t a1)
{
  swift_bridgeObjectRelease();
  *(void *)(v1 + 24)  = a1;

  LowLevelMesh.Descriptor.vertexLayouts.didset();
}

void LowLevelMesh.Descriptor.vertexLayouts.didset()
{
  int64_t v1 = v0[3];
  int64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    int64_t v11 = 0;
LABEL_20:
    int64_t *v0 = v11;
    return;
  }
  int64_t v22 = (void *)MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  unint64_t v3 = v22[2];
  uint64_t v4 = 32;
  do
  {
    uint64_t v5 = *(void *)(v1 + v4);
    unint64_t v6 = v22[3];
    if (v3 >= v6 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v3 + 1, 1);
    }
    void v22[2] = v3 + 1;
    v22[v3 + 4]  = v5;
    v4 += 24;
    ++v3;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  unint64_t v7 = v22[2];
  if (!v7)
  {
    int64_t v8 = 0;
    goto LABEL_19;
  }
  int64_t v8 = v22[4];
  unint64_t v9 = v7 - 1;
  if (v7 == 1) {
    goto LABEL_19;
  }
  if (v7 >= 5)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL | 1;
    int64x2_t v12 = vdupq_n_s64(v8);
    uint64_t v13 = (int64x2_t *)(v22 + 7);
    unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v15 = v12;
    do
    {
      int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v12, v13[-1]), (int8x16_t)v12, (int8x16_t)v13[-1]);
      int64x2_t v15 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v15, *v13), (int8x16_t)v15, *(int8x16_t *)v13);
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_s64(v12, v15), (int8x16_t)v12, (int8x16_t)v15);
    uint64_t v17 = vextq_s8(v16, v16, 8uLL).u64[0];
    int64_t v8 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v16.i64[0], v17), *(int8x8_t *)v16.i8, (int8x8_t)v17);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v10 = 1;
  }
  unint64_t v18 = v7 - v10;
  uint64_t v19 = &v22[v10 + 4];
  do
  {
    int64_t v21 = *v19++;
    int64_t v20 = v21;
    if (v8 <= v21) {
      int64_t v8 = v20;
    }
    --v18;
  }
  while (v18);
LABEL_19:
  swift_release();
  int64_t v11 = v8 + 1;
  if (!__OFADD__(v8, 1)) {
    goto LABEL_20;
  }
  __break(1u);
}

void (*LowLevelMesh.Descriptor.vertexLayouts.modify(void *a1))(uint64_t a1, char a2)
{
  *a1  = v1;
  return LowLevelMesh.Descriptor.vertexLayouts.modify;
}

void LowLevelMesh.Descriptor.vertexLayouts.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    LowLevelMesh.Descriptor.vertexLayouts.didset();
  }
}

uint64_t LowLevelMesh.Descriptor.indexCapacity.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t LowLevelMesh.Descriptor.indexCapacity.setter(uint64_t result)
{
  *(void *)(v1 + 32)  = result;
  return result;
}

uint64_t (*LowLevelMesh.Descriptor.indexCapacity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Descriptor.indexType.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t LowLevelMesh.Descriptor.indexType.setter(uint64_t result)
{
  *(void *)(v1 + 40)  = result;
  return result;
}

uint64_t (*LowLevelMesh.Descriptor.indexType.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t LowLevelMesh.Part.init(indexOffset:indexCount:topology:materialIndex:bounds:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>)
{
  a5->n128_u64[0]  = result;
  a5->n128_u64[1]  = a2;
  a5[1].n128_u64[0]  = a3;
  a5[1].n128_u64[1]  = a4;
  a5[2]  = a6;
  a5[3]  = a7;
  return result;
}

uint64_t LowLevelMesh.Part.indexOffset.getter()
{
  return *(void *)v0;
}

uint64_t LowLevelMesh.Part.indexOffset.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*LowLevelMesh.Part.indexOffset.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Part.indexCount.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t LowLevelMesh.Part.indexCount.setter(uint64_t result)
{
  *(void *)(v1 + 8)  = result;
  return result;
}

uint64_t (*LowLevelMesh.Part.indexCount.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Part.topology.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t LowLevelMesh.Part.topology.setter(uint64_t result)
{
  *(void *)(v1 + 16)  = result;
  return result;
}

uint64_t (*LowLevelMesh.Part.topology.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Part.materialIndex.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t LowLevelMesh.Part.materialIndex.setter(uint64_t result)
{
  *(void *)(v1 + 24)  = result;
  return result;
}

uint64_t (*LowLevelMesh.Part.materialIndex.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 LowLevelMesh.Part.bounds.getter()
{
  return v0[2];
}

void LowLevelMesh.Part.bounds.setter(__n128 a1, __n128 a2)
{
  v2[2]  = a1;
  v2[3]  = a2;
}

uint64_t (*LowLevelMesh.Part.bounds.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  *(_OWORD *)a1  = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 16)  = v2;
  *(void *)(a1 + 24)  = v3;
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(v1 + 56);
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t LowLevelMesh.indexCapacity.getter()
{
  return MEMORY[0x270F262D8](*(void *)(v0 + 16));
}

uint64_t LowLevelMesh.vertexCapacity.getter()
{
  return MEMORY[0x270F262F0](*(void *)(v0 + 16));
}

void (*LowLevelMesh.parts.modify(void *a1))(id *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  *a1  = v2;
  id v3 = v2;
  return destroy for DirectionalLightComponent;
}

id LowLevelMesh.parts.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 16);
  *a1  = v2;
  return v2;
}

uint64_t LowLevelMesh.__allocating_init(descriptor:)(uint64_t *a1)
{
  uint64_t v2 = swift_allocObject();
  LowLevelMesh.init(descriptor:)(a1);
  return v2;
}

uint64_t LowLevelMesh.init(descriptor:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[3];
  uint64_t v53 = *a1;
  uint64_t v54 = a1[2];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  unint64_t v7 = (void *)DRMeshDescriptorCreate();
  uint64_t v51 = v5;
  DRMeshDescriptorSetIndexCapacity();
  uint64_t v50 = v6;
  DRMeshDescriptorSetIndexType();
  uint64_t v52 = v3;
  DRMeshDescriptorSetVertexCapacity();
  int64_t v8 = *(void *)(v4 + 16);
  unint64_t v9 = (void *)MEMORY[0x263F8EE78];
  if (v8)
  {
    uint64_t v49 = v2;
    v57[0]  = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    unint64_t v9 = (void *)v57[0];
    unint64_t v10 = *(void *)(v57[0] + 16);
    uint64_t v11 = 32;
    int64_t v12 = v8;
    do
    {
      uint64_t v13 = *(void *)(v4 + v11);
      v57[0]  = v9;
      unint64_t v14 = v9[3];
      if (v10 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v10 + 1, 1);
        unint64_t v9 = (void *)v57[0];
      }
      v9[2]  = v10 + 1;
      v9[v10 + 4]  = v13;
      v11 += 24;
      ++v10;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v2 = v49;
  }
  unint64_t v15 = v9[2];
  if (!v15)
  {
    int64_t v16 = 0;
    goto LABEL_19;
  }
  int64_t v16 = v9[4];
  unint64_t v17 = v15 - 1;
  if (v15 == 1) {
    goto LABEL_19;
  }
  if (v15 >= 5)
  {
    unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFFCLL | 1;
    int64x2_t v19 = vdupq_n_s64(v16);
    int64_t v20 = (int64x2_t *)(v9 + 7);
    unint64_t v21 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v22 = v19;
    do
    {
      int64x2_t v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, v20[-1]), (int8x16_t)v19, (int8x16_t)v20[-1]);
      int64x2_t v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, *v20), (int8x16_t)v22, *(int8x16_t *)v20);
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    int8x16_t v23 = vbslq_s8((int8x16_t)vcgtq_s64(v19, v22), (int8x16_t)v19, (int8x16_t)v22);
    uint64_t v24 = vextq_s8(v23, v23, 8uLL).u64[0];
    int64_t v16 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v23.i64[0], v24), *(int8x8_t *)v23.i8, (int8x8_t)v24);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v18 = 1;
  }
  unint64_t v25 = v15 - v18;
  uint64_t v26 = &v9[v18 + 4];
  do
  {
    int64_t v28 = *v26++;
    int64_t v27 = v28;
    if (v16 <= v28) {
      int64_t v16 = v27;
    }
    --v25;
  }
  while (v25);
LABEL_19:
  swift_bridgeObjectRelease();
  if (__OFADD__(v16, 1)) {
    __break(1u);
  }
  DRMeshDescriptorSetVertexBufferCount();
  uint64_t v29 = v54;
  DRMeshDescriptorSetVertexAttributeCount();
  DRMeshDescriptorSetVertexLayoutCount();
  uint64_t v30 = *(void *)(v54 + 16);
  if (v30)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = 0;
    uint64_t v32 = (void *)(v54 + 56);
    while ((*v32 & 0x8000000000000000) == 0 && (*(v32 - 1) & 0x8000000000000000) == 0)
    {
      uint64_t v33 = v31 + 1;
      v32 += 4;
      DRMeshDescriptorSetVertexAttributeFormat();
      uint64_t v31 = v33;
      if (v30 == v33)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    goto LABEL_44;
  }
LABEL_26:
  uint64_t v34 = *(void *)(v4 + 16);
  if (v34)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = 0;
    char v36 = (void *)(v4 + 48);
    while ((*(v36 - 2) & 0x8000000000000000) == 0
         && (*(v36 - 1) & 0x8000000000000000) == 0
         && (*v36 & 0x8000000000000000) == 0)
    {
      uint64_t v37 = v35 + 1;
      v36 += 3;
      DRMeshDescriptorSetVertexLayout();
      uint64_t v35 = v37;
      if (v34 == v37)
      {
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    goto LABEL_44;
  }
LABEL_33:
  id v60 = 0;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  id v38 = (id)REServiceLocatorGetDirectResourceService();
  if (v38)
  {
    uint64_t v39 = v38;
    Mesh  = (void *)DRContextCreateMesh();
  }
  else
  {
    uint64_t v44 = specialized static __ServiceLocator.shared.getter() + 40;
    swift_beginAccess();
    outlined init with copy of __RenderService?(v44, (uint64_t)&v55);
    if (!v56)
    {
      __break(1u);
      goto LABEL_43;
    }
    outlined init with take of BindableDataInternal(&v55, (uint64_t)v57);
    uint64_t v45 = v58;
    uint64_t v46 = v59;
    __swift_project_boxed_opaque_existential_1(v57, v58);
    (*(void (**)(uint64_t, uint64_t))(v46 + 24))(v45, v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
    id v47 = (id)RERenderManagerGetRenderDevice();
    Mesh  = (void *)DRMeshCreateUnmanaged();
    swift_unknownObjectRelease();
    uint64_t v29 = v54;
    if (v60)
    {
      id v41 = v60;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
      swift_allocError();
      *uint64_t v42 = v41;
      id v43 = v41;
      swift_willThrow();

      type metadata accessor for LowLevelMesh();
      swift_deallocPartialClassInstance();
      return (uint64_t)v2;
    }
  }
  v2[3]  = v53;
  v2[4]  = v52;
  v2[5]  = v29;
  v2[6]  = v4;
  v2[7]  = v51;
  v2[8]  = v50;
  if (Mesh)
  {

    v2[2]  = Mesh;
    return (uint64_t)v2;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id LowLevelMesh.read(bufferIndex:using:)()
{
  VerticesUsing  = (void *)DRMeshReadVerticesUsing();

  return VerticesUsing;
}

id LowLevelMesh.replace(bufferIndex:using:)()
{
  uint64_t v0 = (void *)DRMeshReplaceVerticesUsing();

  return v0;
}

id LowLevelMesh.readIndices(using:)()
{
  IndicesUsing  = (void *)DRMeshReadIndicesUsing();

  return IndicesUsing;
}

id LowLevelMesh.replaceIndices(using:)()
{
  uint64_t v0 = (void *)DRMeshReplaceIndicesUsing();

  return v0;
}

uint64_t LowLevelMesh.withUnsafeBytes(bufferIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(v3 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16)  = a2;
  *(void *)(v7 + 24)  = a3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16)  = partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:);
  *(void *)(v8 + 24)  = v7;
  v13[4]  = partial apply for thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned Int) -> ();
  v13[5]  = v8;
  v13[0]  = MEMORY[0x263EF8330];
  v13[1]  = 1107296256;
  v13[2]  = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned Int) -> ();
  v13[3]  = &block_descriptor_29;
  unint64_t v9 = _Block_copy(v13);
  id v10 = v6;
  swift_retain();
  swift_release();
  DRMeshReadVertices();

  _Block_release(v9);
  isEscapingClosureAtFileLocation  = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned Int) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

uint64_t LowLevelMesh.withUnsafeMutableBytes(bufferIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(v3 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16)  = a2;
  *(void *)(v7 + 24)  = a3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16)  = partial apply for closure #1 in LowLevelMesh.withUnsafeMutableBytes(bufferIndex:_:);
  *(void *)(v8 + 24)  = v7;
  v13[4]  = partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ();
  v13[5]  = v8;
  v13[0]  = MEMORY[0x263EF8330];
  v13[1]  = 1107296256;
  v13[2]  = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ();
  v13[3]  = &block_descriptor_18_2;
  unint64_t v9 = _Block_copy(v13);
  id v10 = v6;
  swift_retain();
  swift_release();
  DRMeshUpdateVertices();

  _Block_release(v9);
  isEscapingClosureAtFileLocation  = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

uint64_t LowLevelMesh.replaceUnsafeMutableBytes(bufferIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(v3 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16)  = a2;
  *(void *)(v7 + 24)  = a3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16)  = partial apply for closure #1 in LowLevelMesh.withUnsafeMutableBytes(bufferIndex:_:);
  *(void *)(v8 + 24)  = v7;
  v13[4]  = thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()partial apply;
  v13[5]  = v8;
  v13[0]  = MEMORY[0x263EF8330];
  v13[1]  = 1107296256;
  v13[2]  = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ();
  v13[3]  = &block_descriptor_28_0;
  unint64_t v9 = _Block_copy(v13);
  id v10 = v6;
  swift_retain();
  swift_release();
  DRMeshReplaceVertices();

  _Block_release(v9);
  isEscapingClosureAtFileLocation  = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t LowLevelMesh.withUnsafeIndices(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16)  = a1;
  *(void *)(v6 + 24)  = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16)  = partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:);
  *(void *)(v7 + 24)  = v6;
  v11[4]  = thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned Int) -> ()partial apply;
  v11[5]  = v7;
  v11[0]  = MEMORY[0x263EF8330];
  v11[1]  = 1107296256;
  void v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned Int) -> ();
  void v11[3] = &block_descriptor_38;
  uint64_t v8 = _Block_copy(v11);
  id v9 = v5;
  swift_retain();
  swift_release();
  DRMeshReadIndices();

  _Block_release(v8);
  LOBYTE(v8)  = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v8) {
    __break(1u);
  }
  return result;
}

uint64_t LowLevelMesh.withUnsafeMutableIndices(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16)  = a1;
  *(void *)(v6 + 24)  = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16)  = partial apply for closure #1 in LowLevelMesh.withUnsafeMutableBytes(bufferIndex:_:);
  *(void *)(v7 + 24)  = v6;
  v11[4]  = thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()partial apply;
  v11[5]  = v7;
  v11[0]  = MEMORY[0x263EF8330];
  v11[1]  = 1107296256;
  void v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ();
  void v11[3] = &block_descriptor_48;
  uint64_t v8 = _Block_copy(v11);
  id v9 = v5;
  swift_retain();
  swift_release();
  DRMeshUpdateIndices();

  _Block_release(v8);
  LOBYTE(v8)  = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v8) {
    __break(1u);
  }
  return result;
}

uint64_t LowLevelMesh.replaceUnsafeMutableIndices(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16)  = a1;
  *(void *)(v6 + 24)  = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16)  = partial apply for closure #1 in LowLevelMesh.withUnsafeMutableBytes(bufferIndex:_:);
  *(void *)(v7 + 24)  = v6;
  v11[4]  = thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()partial apply;
  v11[5]  = v7;
  v11[0]  = MEMORY[0x263EF8330];
  v11[1]  = 1107296256;
  void v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ();
  void v11[3] = &block_descriptor_58_1;
  uint64_t v8 = _Block_copy(v11);
  id v9 = v5;
  swift_retain();
  swift_release();
  DRMeshReplaceIndices();

  _Block_release(v8);
  LOBYTE(v8)  = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v8) {
    __break(1u);
  }
  return result;
}

uint64_t LowLevelMesh.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LowLevelMesh.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t LowLevelMesh.PartsCollection.startIndex.getter()
{
  return 0;
}

uint64_t LowLevelMesh.PartsCollection.count.getter()
{
  return DRMeshGetPartCount();
}

Swift::Int __swiftcall LowLevelMesh.PartsCollection.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

__n128 LowLevelMesh.PartsCollection.subscript.getter@<Q0>(_OWORD *a1@<X8>)
{
  DRMeshGetPartAt();
  __n128 result = (__n128)xmmword_22831FD10;
  *a1  = 0uLL;
  a1[1]  = xmmword_22832C800;
  a1[2]  = xmmword_22831FD10;
  a1[3]  = xmmword_22831FD20;
  return result;
}

__n128 key path getter for LowLevelMesh.PartsCollection.subscript(_:) : LowLevelMesh.PartsCollection@<Q0>(_OWORD *a1@<X8>)
{
  DRMeshGetPartAt();
  __n128 result = (__n128)xmmword_22831FD10;
  *a1  = 0uLL;
  a1[1]  = xmmword_22832C800;
  a1[2]  = xmmword_22831FD10;
  a1[3]  = xmmword_22831FD20;
  return result;
}

uint64_t LowLevelMesh.PartsCollection.subscript.setter(void *a1)
{
  if ((*a1 & 0x8000000000000000) != 0 || (a1[1] & 0x8000000000000000) != 0 || (a1[3] & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return DRMeshSetPartAt();
  }
  return result;
}

void (*LowLevelMesh.PartsCollection.subscript.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v5 = malloc(0x90uLL);
  *a1  = v5;
  v5[9]  = 0;
  v5[8]  = 0;
  v5[16]  = a2;
  v5[17]  = v2;
  *((_OWORD *)v5 + 5)  = xmmword_22832C800;
  *((_OWORD *)v5 + 6)  = xmmword_22831FD10;
  *((_OWORD *)v5 + 7)  = xmmword_22831FD20;
  DRMeshGetPartAt();
  long long v6 = *((_OWORD *)v5 + 6);
  long long v7 = *((_OWORD *)v5 + 7);
  long long v8 = *((_OWORD *)v5 + 5);
  *(_OWORD *)uint64_t v5 = *((_OWORD *)v5 + 4);
  *((_OWORD *)v5 + 1)  = v8;
  *((_OWORD *)v5 + 2)  = v6;
  *((_OWORD *)v5 + 3)  = v7;
  return LowLevelMesh.PartsCollection.subscript.modify;
}

void LowLevelMesh.PartsCollection.subscript.modify(uint64_t a1)
{
  BOOL v1 = *(void **)a1;
  if ((**(void **)a1 & 0x8000000000000000) != 0
    || (*(void *)(*(void *)a1 + 8) & 0x8000000000000000) != 0
    || (*(void *)(*(void *)a1 + 24) & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    DRMeshSetPartAt();
    free(v1);
  }
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance LowLevelMesh.PartsCollection(_OWORD *a1)
{
  long long v1 = a1[2];
  long long v2 = a1[3];
  long long v3 = a1[1];
  v5[0]  = *a1;
  v5[1]  = v3;
  v5[2]  = v1;
  void v5[3] = v2;
  return LowLevelMesh.PartsCollection.subscript.setter(v5);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance LowLevelMesh.PartsCollection(void *a1, uint64_t *a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1  = v4;
  v4[4]  = LowLevelMesh.PartsCollection.subscript.modify(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

{
  void *v4;

  uint64_t v4 = malloc(0x28uLL);
  *a1  = v4;
  v4[4]  = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for MutableCollection.subscript.setter in conformance LowLevelMesh.PartsCollection(uint64_t *a1, uint64_t *a2)
{
  id v3 = (id)a1[2];
  specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v2, *a2, a2[1], *a1, a1[1]);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance LowLevelMesh.PartsCollection@<X0>(uint64_t (*a1)(long long *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance LowLevelMesh.PartsCollection(uint64_t *a1, uint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = DRMeshGetPartCount();
  if (a1 < 0 || result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = DRMeshGetPartCount();
  if (a3 < 0 || result < a3) {
    goto LABEL_17;
  }
  uint64_t v7 = a3 - a1;
  if (a2 >= 1)
  {
    if (v7 < 0 || v7 >= a2) {
      goto LABEL_12;
    }
    return 0;
  }
  if (v7 <= 0 && v7 > a2) {
    return 0;
  }
LABEL_12:
  BOOL v9 = __OFADD__(a1, a2);
  uint64_t v8 = a1 + a2;
  if (v9)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = DRMeshGetPartCount();
  if ((v8 & 0x8000000000000000) == 0 && result >= v8) {
    return v8;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance LowLevelMesh.PartsCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DRMeshGetPartCount();
  *a1  = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance LowLevelMesh.PartsCollection(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = LowLevelMesh.PartsCollection.subscript.read(v2);
  return protocol witness for Collection.subscript.read in conformance IKRig.JointCollection;
}

void (*LowLevelMesh.PartsCollection.subscript.read(void *a1))(void **a1)
{
  uint64_t v2 = malloc(0x80uLL);
  v2[9]  = 0;
  v2[8]  = 0;
  *a1  = v2;
  *((_OWORD *)v2 + 5)  = xmmword_22832C800;
  *((_OWORD *)v2 + 6)  = xmmword_22831FD10;
  *((_OWORD *)v2 + 7)  = xmmword_22831FD20;
  DRMeshGetPartAt();
  long long v3 = *((_OWORD *)v2 + 6);
  long long v4 = *((_OWORD *)v2 + 7);
  long long v5 = *((_OWORD *)v2 + 5);
  *(_OWORD *)uint64_t v2 = *((_OWORD *)v2 + 4);
  *((_OWORD *)v2 + 1)  = v5;
  *((_OWORD *)v2 + 2)  = v3;
  *((_OWORD *)v2 + 3)  = v4;
  return LowLevelMesh.PartsCollection.subscript.read;
}

void LowLevelMesh.PartsCollection.subscript.read(void **a1)
{
}

uint64_t protocol witness for Collection.subscript.getter in conformance LowLevelMesh.PartsCollection@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  id v7 = *v2;
  uint64_t result = DRMeshGetPartCount();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < v4)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  a2[1]  = v4;
  a2[2]  = v7;
  *a2  = v5;

  return (uint64_t)v7;
}

uint64_t protocol witness for Collection.indices.getter in conformance LowLevelMesh.PartsCollection@<X0>(void *a1@<X8>)
{
  uint64_t result = DRMeshGetPartCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a1  = 0;
    a1[1]  = result;
  }
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance LowLevelMesh.PartsCollection()
{
  return DRMeshGetPartCount() == 0;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance LowLevelMesh.PartsCollection@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (void *)DRMeshGetPartCount();
    if ((v3 & 0x8000000000000000) == 0 && v3 < (uint64_t)result)
    {
      *a2  = v3;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance LowLevelMesh.PartsCollection(uint64_t *result)
{
  uint64_t v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    uint64_t result = (uint64_t *)DRMeshGetPartCount();
    if ((v1 & 0x8000000000000000) == 0 && v1 < (uint64_t)result)
    {
      *uint64_t v2 = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance LowLevelMesh.PartsCollection@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (void *)DRMeshGetPartCount();
    if ((v4 & 0x8000000000000000) == 0 && (uint64_t)result >= v4)
    {
      *a3  = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance LowLevelMesh.PartsCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4  = result;
  *(unsigned char *)(a4 + 8)  = v6 & 1;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance LowLevelMesh.PartsCollection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = DRMeshGetPartCount();
  if (v2 < 0 || result < v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = DRMeshGetPartCount();
    if ((v3 & 0x8000000000000000) == 0 && result >= v3) {
      return v3 - v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance LowLevelMesh.PartsCollection()
{
  return DRMeshGetPartCount();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance LowLevelMesh.PartsCollection()
{
  uint64_t v1 = *v0;
  specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  uint64_t v3 = v2;

  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance LowLevelMesh.PartsCollection(void *a1, _OWORD *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t LowLevelMesh.PartsCollection.append(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  if (__OFADD__(DRMeshGetPartCount(), 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  DRMeshSetPartCount();
  if (__OFSUB__(DRMeshGetPartCount(), 1))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v1 < 0 || v2 < 0 || v3 < 0) {
    goto LABEL_11;
  }

  return DRMeshSetPartAt();
}

uint64_t LowLevelMesh.PartsCollection.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for EnumeratedSequence();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = type metadata accessor for EnumeratedSequence.Iterator();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  BOOL v9 = (char *)&v17 - v8;
  PartCount  = DRMeshGetPartCount();
  uint64_t v10 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (!__OFADD__(DRMeshGetPartCount(), v10))
  {
    uint64_t v17 = v7;
    DRMeshSetPartCount();
    MEMORY[0x22A688D00](a2, a3);
    EnumeratedSequence.makeIterator()();
    int64x2_t v19 = v9;
    uint64_t v20 = v6;
    EnumeratedSequence.Iterator.next()();
    if (v25) {
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v20);
    }
    uint64_t v11 = v21;
    uint64_t v12 = v22;
    uint64_t v13 = v23;
    uint64_t v14 = v24;
    while (!__OFADD__(PartCount, v11))
    {
      uint64_t v15 = PartCount + v11;
      if (v15 >= DRMeshGetPartCount())
      {
        if (__OFADD__(DRMeshGetPartCount(), 1)) {
          goto LABEL_17;
        }
        DRMeshSetPartCount();
        if (__OFSUB__(DRMeshGetPartCount(), 1)) {
          goto LABEL_18;
        }
        if (v12 < 0 || v13 < 0) {
          goto LABEL_20;
        }
      }
      else if (v12 < 0 || v13 < 0)
      {
        goto LABEL_20;
      }
      if (v14 < 0) {
        goto LABEL_20;
      }
      DRMeshSetPartAt();
      EnumeratedSequence.Iterator.next()();
      uint64_t v11 = v21;
      uint64_t v12 = v22;
      uint64_t v13 = v23;
      uint64_t v14 = v24;
      if (v25 == 1) {
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v20);
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  __break(1u);
LABEL_20:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall LowLevelMesh.PartsCollection.removeAll()()
{
}

uint64_t LowLevelMesh.PartsCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  DRMeshSetPartCount();

  return LowLevelMesh.PartsCollection.append<A>(contentsOf:)(a1, a2, a3);
}

uint64_t MeshResource.lowLevelMesh.getter()
{
  uint64_t result = *(void *)(v0 + 16);
  if (result)
  {
    id v2 = (id)REMeshAssetGetDirectMesh();
    if (!v2) {
      return 0;
    }
    uint64_t v3 = v2;
    type metadata accessor for LowLevelMesh();
    uint64_t v4 = (void *)swift_allocObject();
    _OWORD v4[2] = v3;
    id v5 = v3;
    uint64_t v6 = (void *)DRMeshCopyDescriptor();
    VertexBufferCount  = DRMeshDescriptorGetVertexBufferCount();
    VertexCapacity  = DRMeshDescriptorGetVertexCapacity();
    uint64_t result = DRMeshDescriptorGetVertexAttributeCount();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v9 = result;
      id v10 = v6;
      uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation12LowLevelMeshC9AttributeVs5NeverOTg5027_sSo18DRMeshDescriptor_ta17de63E16vertexAttributes33_C756CB0E2E227DD8D28F0A9CF825D987LLSayAC12fgh2C9I13VGvgAISiXEfU_So0mN2_taTf1cn_nTf4ng_n(0, v9);

      uint64_t result = DRMeshDescriptorGetVertexLayoutCount();
      if ((result & 0x8000000000000000) == 0)
      {
        uint64_t v12 = result;
        id v13 = v10;
        uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation12LowLevelMeshC6LayoutVs5NeverOTg5027_sSo18DRMeshDescriptor_ta17de60E13vertexLayouts33_C756CB0E2E227DD8D28F0A9CF825D987LLSayAC12fgh2C6I13VGvgAISiXEfU_So0mN2_taTf1cn_nTf4ng_n(0, v12);

        IndexCapacity  = DRMeshDescriptorGetIndexCapacity();
        IndexType  = DRMeshDescriptorGetIndexType();

        v4[3]  = VertexBufferCount;
        v4[4]  = VertexCapacity;
        v4[5]  = v11;
        v4[6]  = v14;
        v4[7]  = IndexCapacity;
        v4[8]  = IndexType;
        return (uint64_t)v4;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LowLevelMesh()
{
  return self;
}

uint64_t sub_228116334()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:)(a1, a2);
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(a1, a1 + a2);
}

uint64_t sub_22811634C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned Int) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t sub_22811639C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in LowLevelMesh.withUnsafeMutableBytes(bufferIndex:_:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:)(a1, a2);
}

uint64_t sub_2281163B4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_2281163EC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2281163FC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22811640C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22811641C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22811642C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22811643C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22811644C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_228116484()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation12LowLevelMeshC9AttributeVs5NeverOTg5027_sSo18DRMeshDescriptor_ta17de63E16vertexAttributes33_C756CB0E2E227DD8D28F0A9CF825D987LLSayAC12fgh2C9I13VGvgAISiXEfU_So0mN2_taTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v5 = a1;
  uint64_t v14 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if (v2 < 0) {
LABEL_20:
  }
    __break(1u);
  uint64_t v3 = v14;
  if (a2 <= v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = a2;
  }
  uint64_t v12 = v6;
  uint64_t v7 = v5;
  uint64_t v13 = v5;
  while (1)
  {
    if (a2 == v7)
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v5 < 0) {
      break;
    }
    DRMeshDescriptorGetVertexAttributeFormat();
    unint64_t v9 = *(void *)(v14 + 16);
    unint64_t v8 = *(void *)(v14 + 24);
    if (v9 >= v8 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
    }
    *(void *)(v14 + 16)  = v9 + 1;
    uint64_t v10 = v14 + 32 * v9;
    *(unsigned char *)(v10 + 32)  = unk_228339774;
    *(void *)(v10 + 40)  = 0;
    *(void *)(v10 + 48)  = 0;
    *(void *)(v10 + 56)  = 0;
    uint64_t v5 = v13;
    if (a2 < v13) {
      goto LABEL_17;
    }
    if (v12 == v7) {
      goto LABEL_18;
    }
    if (a2 == ++v7) {
      return v3;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation12LowLevelMeshC6LayoutVs5NeverOTg5027_sSo18DRMeshDescriptor_ta17de60E13vertexLayouts33_C756CB0E2E227DD8D28F0A9CF825D987LLSayAC12fgh2C6I13VGvgAISiXEfU_So0mN2_taTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v13 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if (v2 < 0) {
LABEL_20:
  }
    __break(1u);
  uint64_t v3 = v13;
  if (a2 <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = a2;
  }
  uint64_t v12 = v6;
  uint64_t v7 = a1;
  while (1)
  {
    if (a2 == v7)
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (a1 < 0) {
      break;
    }
    DRMeshDescriptorGetVertexLayout();
    unint64_t v9 = *(void *)(v13 + 16);
    unint64_t v8 = *(void *)(v13 + 24);
    if (v9 >= v8 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
    }
    *(void *)(v13 + 16)  = v9 + 1;
    uint64_t v10 = (void *)(v13 + 24 * v9);
    v10[4]  = 0;
    v10[5]  = 0;
    v10[6]  = 0;
    if (a2 < a1) {
      goto LABEL_17;
    }
    if (v12 == v7) {
      goto LABEL_18;
    }
    if (a2 == ++v7) {
      return v3;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type LowLevelMesh.VertexSemantic and conformance LowLevelMesh.VertexSemantic()
{
  unint64_t result = lazy protocol witness table cache variable for type LowLevelMesh.VertexSemantic and conformance LowLevelMesh.VertexSemantic;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.VertexSemantic and conformance LowLevelMesh.VertexSemantic)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.VertexSemantic and conformance LowLevelMesh.VertexSemantic);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<LowLevelMesh.PartsCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<LowLevelMesh.PartsCollection>);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
}

uint64_t lazy protocol witness table accessor for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<LowLevelMesh.PartsCollection>);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<LowLevelMesh.PartsCollection> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<LowLevelMesh.PartsCollection>);
}

uint64_t sub_228116D8C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2  = *(void *)(a1 + 24);
  return swift_bridgeObjectRetain();
}

void sub_228116D98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a2 + 24)  = v3;
  LowLevelMesh.Descriptor.vertexLayouts.didset();
}

id sub_228116DE0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(*(void *)a1 + 16);
  *a2  = v2;
  return v2;
}

double sub_228116DF4@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = key path getter for LowLevelMesh.PartsCollection.subscript(_:) : LowLevelMesh.PartsCollection(a1).n128_u64[0];
  return result;
}

uint64_t sub_228116E4C(_OWORD *a1)
{
  long long v1 = a1[2];
  long long v2 = a1[3];
  long long v3 = a1[1];
  v5[0]  = *a1;
  v5[1]  = v3;
  v5[2]  = v1;
  void v5[3] = v2;
  return LowLevelMesh.PartsCollection.subscript.setter(v5);
}

uint64_t sub_228116E90()
{
  return 0;
}

uint64_t method lookup function for LowLevelMesh(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LowLevelMesh);
}

uint64_t dispatch thunk of LowLevelMesh.indexCapacity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of LowLevelMesh.vertexCapacity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of LowLevelMesh.parts.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of LowLevelMesh.parts.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of LowLevelMesh.parts.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of LowLevelMesh.__allocating_init(descriptor:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of LowLevelMesh.read(bufferIndex:using:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of LowLevelMesh.replace(bufferIndex:using:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of LowLevelMesh.readIndices(using:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of LowLevelMesh.replaceIndices(using:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of LowLevelMesh.withUnsafeBytes(bufferIndex:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of LowLevelMesh.withUnsafeMutableBytes(bufferIndex:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of LowLevelMesh.replaceUnsafeMutableBytes(bufferIndex:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of LowLevelMesh.withUnsafeIndices(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of LowLevelMesh.withUnsafeMutableIndices(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of LowLevelMesh.replaceUnsafeMutableIndices(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

unsigned char *storeEnumTagSinglePayload for LowLevelMesh.VertexSemantic(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *double result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2281171C8);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LowLevelMesh.VertexSemantic()
{
  return &type metadata for LowLevelMesh.VertexSemantic;
}

uint64_t getEnumTagSinglePayload for LowLevelMesh.Attribute(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF3 && a1[32]) {
    return (*(_DWORD *)a1 + 243);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 0xE;
  int v5 = v3 - 14;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LowLevelMesh.Attribute(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(void *)(result + 16)  = 0;
    *(void *)(result + 24)  = 0;
    *(void *)double result = a2 - 243;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xF3) {
      *(unsigned char *)(result + 32)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xF3) {
      *(unsigned char *)(result + 32)  = 0;
    }
    if (a2) {
      *(unsigned char *)double result = a2 + 13;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LowLevelMesh.Attribute()
{
  return &type metadata for LowLevelMesh.Attribute;
}

ValueMetadata *type metadata accessor for LowLevelMesh.Layout()
{
  return &type metadata for LowLevelMesh.Layout;
}

uint64_t destroy for LowLevelMesh.Descriptor()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LowLevelMesh.Descriptor(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = v3;
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LowLevelMesh.Descriptor(void *a1, void *a2)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  a1[2]  = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3]  = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4]  = a2[4];
  a1[5]  = a2[5];
  return a1;
}

_OWORD *assignWithTake for LowLevelMesh.Descriptor(_OWORD *a1, _OWORD *a2)
{
  *a1  = *a2;
  swift_bridgeObjectRelease();
  a1[1]  = a2[1];
  swift_bridgeObjectRelease();
  a1[2]  = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for LowLevelMesh.Descriptor()
{
  return &type metadata for LowLevelMesh.Descriptor;
}

ValueMetadata *type metadata accessor for LowLevelMesh.Part()
{
  return &type metadata for LowLevelMesh.Part;
}

ValueMetadata *type metadata accessor for LowLevelMesh.PartsCollection()
{
  return &type metadata for LowLevelMesh.PartsCollection;
}

void one-time initialization function for basicBlinkAnimationData()
{
  static EmphasizeAnimations.basicBlinkAnimationData  = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicBlinkAnimationData;
}

void one-time initialization function for playfulBlinkAnimationData()
{
  static EmphasizeAnimations.playfulBlinkAnimationData  = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulBlinkAnimationData;
}

void one-time initialization function for wildBlinkAnimationData()
{
  static EmphasizeAnimations.wildBlinkAnimationData  = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildBlinkAnimationData;
}

void *specialized static EmphasizeAnimations.createEmphasizeBlinkAnimation(style:)(unsigned char *a1)
{
  if (!*a1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 133, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for basicBlinkAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 168, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for playfulBlinkAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 226, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for wildBlinkAnimationData != -1) {
LABEL_9:
  }
    swift_once();
LABEL_8:
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t VirtualEnvironmentProbeComponent.Probe.environment.getter()
{
  return swift_retain();
}

uint64_t VirtualEnvironmentProbeComponent.Probe.environment.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*VirtualEnvironmentProbeComponent.Probe.environment.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float VirtualEnvironmentProbeComponent.Probe.intensityExponent.getter()
{
  return *(float *)(v0 + 8);
}

void VirtualEnvironmentProbeComponent.Probe.intensityExponent.setter(float a1)
{
  *(float *)(v1 + 8)  = a1;
}

uint64_t (*VirtualEnvironmentProbeComponent.Probe.intensityExponent.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VirtualEnvironmentProbeComponent.Probe.init(environment:intensityExponent:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(void *)a2  = result;
  *(float *)(a2 + 8)  = a3;
  return result;
}

uint64_t VirtualEnvironmentProbeComponent.source.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1  = *v1;
  a1[1]  = v3;
  a1[2]  = v4;
  a1[3]  = v5;
  return outlined copy of VirtualEnvironmentProbeComponent.Source(v2, v3, v4);
}

__n128 VirtualEnvironmentProbeComponent.source.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of VirtualEnvironmentProbeComponent.Source(*v1, v1[1], v1[2]);
  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  v1[2]  = v2;
  v1[3]  = v3;
  return result;
}

uint64_t (*VirtualEnvironmentProbeComponent.source.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 VirtualEnvironmentProbeComponent.init(source:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2  = *(_OWORD *)a1;
  a2[1]  = v3;
  return result;
}

uint64_t static VirtualEnvironmentProbeComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REVirtualEnvironmentProbeComponentGetResourceCount();
  if (result != 1)
  {
    uint64_t v3 = result;
    if (!result)
    {
      *(void *)a1  = 0;
      *(void *)(a1 + 8)  = 0;
      *(_OWORD *)(a1 + 16)  = xmmword_228339790;
      return result;
    }
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v9 = (void *)MEMORY[0x263F8EE78];
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      do
      {
        Resource  = REVirtualEnvironmentProbeComponentGetResource();
        uint64_t SkyboxTexture = REIBLAssetGetSkyboxTexture();
        type metadata accessor for EnvironmentResource();
        uint64_t v13 = swift_allocObject();
        *(void *)(v13 + 24)  = 0;
        *(void *)(v13 + 16)  = Resource;
        swift_beginAccess();
        *(void *)(v13 + 24)  = SkyboxTexture;
        RERetain();
        REAssetSetSwiftObject();
        if (SkyboxTexture)
        {
          RERetain();
          REAssetSetSwiftObject();
        }
        REVirtualEnvironmentProbeComponentGetIntensityExponent();
        int v15 = v14;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        }
        unint64_t v17 = v9[2];
        unint64_t v16 = v9[3];
        if (v17 >= v16 >> 1) {
          unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v9);
        }
        v9[2]  = v17 + 1;
        unint64_t v18 = &v9[2 * v17];
        v18[4]  = v13;
        *((_DWORD *)v18 + 10)  = v15;
        REVirtualEnvironmentProbeComponentGetRelativeWeight();
        int v20 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
        }
        unint64_t v22 = *((void *)v10 + 2);
        unint64_t v21 = *((void *)v10 + 3);
        if (v22 >= v21 >> 1) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v10);
        }
        ++v8;
        *((void *)v10 + 2)  = v22 + 1;
        *(_DWORD *)&v10[4 * v22 + 32]  = v20;
        uint64_t result = swift_release();
      }
      while (v3 != v8);
      uint64_t v23 = *((void *)v10 + 2);
      if (v23)
      {
        if (v23 != 1)
        {
          float v24 = *((float *)v10 + 9);
          float v25 = *((float *)v10 + 8) + v24;
          uint64_t v26 = v9[2];
          if (v25 <= 0.0)
          {
            if (v26)
            {
              if (v26 != 1)
              {
                uint64_t v32 = *((unsigned int *)v9 + 10);
                uint64_t v33 = v9[4];
                uint64_t v34 = v9[6];
                uint64_t v35 = *((unsigned int *)v9 + 14);
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                *(void *)a1  = v33;
                *(void *)(a1 + 8)  = v32;
                *(void *)(a1 + 16)  = v34 | 0x4000000000000000;
                *(void *)(a1 + 24)  = v35;
                return result;
              }
              goto LABEL_35;
            }
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            return result;
          }
          if (v26)
          {
            if (v26 != 1)
            {
              uint64_t v27 = *((unsigned int *)v9 + 10);
              uint64_t v28 = v9[4];
              uint64_t v29 = v9[6];
              uint64_t v30 = *((unsigned int *)v9 + 14);
              *(float *)&unsigned int v31 = v24 / v25;
              swift_retain();
              swift_retain();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              *(void *)a1  = v28;
              *(void *)(a1 + 8)  = v27;
              *(void *)(a1 + 16)  = v29 | 0x4000000000000000;
              *(void *)(a1 + 24)  = v30 | ((unint64_t)v31 << 32);
              return result;
            }
            goto LABEL_33;
          }
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v4 = REVirtualEnvironmentProbeComponentGetResource();
  uint64_t v5 = REIBLAssetGetSkyboxTexture();
  type metadata accessor for EnvironmentResource();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 24)  = 0;
  *(void *)(v6 + 16)  = v4;
  swift_beginAccess();
  *(void *)(v6 + 24)  = v5;
  RERetain();
  REAssetSetSwiftObject();
  if (v5)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  uint64_t result = REVirtualEnvironmentProbeComponentGetIntensityExponent();
  *(void *)a1  = v6;
  *(void *)(a1 + 8)  = v7;
  *(void *)(a1 + 16)  = 0;
  *(void *)(a1 + 24)  = 0;
  return result;
}

uint64_t VirtualEnvironmentProbeComponent.__toCore(_:)()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  unint64_t v3 = v0[2];
  REVirtualEnvironmentProbeComponentClearResources();
  if (v3 >> 62)
  {
    if (v3 >> 62 == 1)
    {
      swift_retain();
      swift_retain();
      REVirtualEnvironmentProbeComponentAddResource();
      REVirtualEnvironmentProbeComponentSetIntensityExponent();
      REVirtualEnvironmentProbeComponentSetRelativeWeight();
      REVirtualEnvironmentProbeComponentAddResource();
      REVirtualEnvironmentProbeComponentSetIntensityExponent();
      REVirtualEnvironmentProbeComponentSetRelativeWeight();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_retain();
    REVirtualEnvironmentProbeComponentAddResource();
    REVirtualEnvironmentProbeComponentSetIntensityExponent();
    REVirtualEnvironmentProbeComponentSetRelativeWeight();
    outlined consume of VirtualEnvironmentProbeComponent.Source(v2, v1, v3);
  }

  return RENetworkMarkComponentDirty();
}

void static VirtualEnvironmentProbeComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1  = 5002;
}

void protocol witness for static Component.__coreComponentType.getter in conformance VirtualEnvironmentProbeComponent(_DWORD *a1@<X8>)
{
  *a1  = 5002;
}

ValueMetadata *type metadata accessor for VirtualEnvironmentProbeComponent()
{
  return &type metadata for VirtualEnvironmentProbeComponent;
}

uint64_t destroy for VirtualEnvironmentProbeComponent.Source(uint64_t a1)
{
  return outlined consume of VirtualEnvironmentProbeComponent.Source(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t *initializeWithCopy for VirtualEnvironmentProbeComponent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of VirtualEnvironmentProbeComponent.Source(*a2, v4, v5);
  *a1  = v3;
  a1[1]  = v4;
  a1[2]  = v5;
  a1[3]  = v6;
  return a1;
}

uint64_t *assignWithCopy for VirtualEnvironmentProbeComponent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of VirtualEnvironmentProbeComponent.Source(*a2, v4, v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  *a1  = v3;
  a1[1]  = v4;
  a1[2]  = v5;
  a1[3]  = v6;
  outlined consume of VirtualEnvironmentProbeComponent.Source(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for VirtualEnvironmentProbeComponent(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  long long v6 = a2[1];
  *(_OWORD *)a1  = *a2;
  *((_OWORD *)a1 + 1)  = v6;
  outlined consume of VirtualEnvironmentProbeComponent.Source(v3, v5, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for VirtualEnvironmentProbeComponent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7 | (*(void *)(a1 + 8) >> 25) & 0xFFFFFF80;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for VirtualEnvironmentProbeComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16)  = 0;
    *(void *)(result + 24)  = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8)  = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (-a2 | ((unint64_t)-a2 << 57)) & 0xF000000000000007;
      *(void *)(result + 8)  = ((unint64_t)-a2 << 25) & 0x1FFFFFF00000000;
      *(void *)(result + 16)  = 0;
      *(void *)(result + 24)  = 0;
      return result;
    }
    *(unsigned char *)(result + 32)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for VirtualEnvironmentProbeComponent.Source(void *a1)
{
  uint64_t v1 = a1[2] >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

uint64_t destructiveProjectEnumData for VirtualEnvironmentProbeComponent.Source(uint64_t result)
{
  *(void *)(result + 16) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

int8x16_t destructiveInjectEnumTag for VirtualEnvironmentProbeComponent.Source(uint64_t a1, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v3 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    int8x16_t result = vandq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_2283397A0);
    *(int8x16_t *)a1  = result;
    *(void *)(a1 + 16)  = v3;
  }
  else
  {
    *(void *)a1  = 8 * (a2 - 2);
    result.i64[0]  = 0;
    *(_OWORD *)(a1 + 8)  = xmmword_2283397B0;
    *(void *)(a1 + 24)  = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for VirtualEnvironmentProbeComponent.Source()
{
  return &type metadata for VirtualEnvironmentProbeComponent.Source;
}

uint64_t assignWithCopy for VirtualEnvironmentProbeComponent.Probe(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for VirtualEnvironmentProbeComponent.Probe(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for VirtualEnvironmentProbeComponent.Probe()
{
  return &type metadata for VirtualEnvironmentProbeComponent.Probe;
}

uint64_t __RKEntityFadeAction.__allocating_init(targetEntity:targetOpacity:duration:)(uint64_t a1, float a2, float a3)
{
  uint64_t v6 = swift_allocObject();
  *(float *)(v6 + 108)  = a2;
  *(float *)(v6 + 112)  = a3;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityFadeAction.init(targetEntity:targetOpacity:duration:)(uint64_t a1, float a2, float a3)
{
  *(float *)(v3 + 108)  = a2;
  *(float *)(v3 + 112)  = a3;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityFadeAction.perform(with:)()
{
  uint64_t v1 = v0;
  uint64_t v14 = StaticString.description.getter();
  uint64_t v15 = v2;
  v3._countAndFlagsBits  = 8250;
  v3._object  = (void *)0xE200000000000000;
  String.append(_:)(v3);
  uint64_t v5 = v14;
  uint64_t v4 = v15;
  uint64_t v6 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v6 == 1 && (swift_beginAccess(), *(unsigned char *)(v1 + 105) == 1)
    || !RESceneGetECSManagerNullable())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v1 + 96);
    char v8 = *(unsigned char *)(v1 + 104);
    uint64_t v9 = 1;
    *(void *)(v1 + 96)  = 1;
    *(unsigned char *)(v1 + 104)  = 1;
    uint64_t v12 = v7;
    LOBYTE(v13)  = v8;
    __RKEntityAction.state.didset((uint64_t)&v12);
    uint64_t v12 = v5;
    uint64_t v13 = v4;
    uint64_t v10 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v10, &v12);
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t __RKEntityFadeAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = type metadata accessor for __RKEntityFadeAction();
  *(void *)(swift_allocObject() + 108)  = *(void *)(v1 + 108);
  uint64_t v4 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3]  = v3;
  *a1  = result;
  return result;
}

uint64_t __RKEntityFadeAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    type metadata accessor for __RKEntityFadeAction();
    *(void *)(swift_allocObject() + 108)  = *(void *)(v1 + 108);
    uint64_t v6 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v6);
  }
  else
  {
    type metadata accessor for __RKEntityFadeAction();
    *(void *)(swift_allocObject() + 108)  = *(void *)(v1 + 108);
    uint64_t v4 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v4);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v7;
    }
    else {
      return 0;
    }
  }
}

void __RKEntityFadeAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityFadeAction.init(targetEntity:)()
{
}

uint64_t __RKFadeSceneAction.__allocating_init(targetOpacity:duration:)(float a1, float a2)
{
  uint64_t v4 = swift_allocObject();
  *(float *)(v4 + 108)  = a1;
  *(float *)(v4 + 112)  = a2;
  return __RKEntityAction.init(targetEntity:)(0);
}

uint64_t __RKFadeSceneAction.init(targetOpacity:duration:)(float a1, float a2)
{
  *(float *)(v2 + 108)  = a1;
  *(float *)(v2 + 112)  = a2;
  return __RKEntityAction.init(targetEntity:)(0);
}

uint64_t __RKFadeSceneAction.perform(with:)()
{
  uint64_t v1 = v0;
  uint64_t v14 = StaticString.description.getter();
  uint64_t v15 = v2;
  v3._countAndFlagsBits  = 8250;
  v3._object  = (void *)0xE200000000000000;
  String.append(_:)(v3);
  uint64_t v5 = v14;
  uint64_t v4 = v15;
  uint64_t v6 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v6 == 1 && (swift_beginAccess(), *(unsigned char *)(v1 + 105) == 1)
    || !RESceneGetECSManagerNullable())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v1 + 96);
    char v8 = *(unsigned char *)(v1 + 104);
    uint64_t v9 = 1;
    *(void *)(v1 + 96)  = 1;
    *(unsigned char *)(v1 + 104)  = 1;
    uint64_t v12 = v7;
    LOBYTE(v13)  = v8;
    __RKEntityAction.state.didset((uint64_t)&v12);
    uint64_t v12 = v5;
    uint64_t v13 = v4;
    uint64_t v10 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v10, &v12);
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t __RKFadeSceneAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for __RKFadeSceneAction();
  *(void *)(swift_allocObject() + 108)  = *(void *)(v1 + 108);
  uint64_t result = __RKEntityAction.init(targetEntity:)(0);
  a1[3]  = v3;
  *a1  = result;
  return result;
}

void __RKFadeSceneAction.__allocating_init(targetEntity:)()
{
}

void __RKFadeSceneAction.init(targetEntity:)()
{
}

uint64_t __RKEntityFadeAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96)  = 2;
  *(unsigned char *)(v0 + 104)  = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  return v0;
}

uint64_t __RKEntityFadeAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96)  = 2;
  *(unsigned char *)(v0 + 104)  = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEntityFadeAction()
{
  return self;
}

uint64_t type metadata accessor for __RKFadeSceneAction()
{
  return self;
}

uint64_t method lookup function for __RKEntityFadeAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityFadeAction);
}

uint64_t dispatch thunk of __RKEntityFadeAction.__allocating_init(targetEntity:targetOpacity:duration:)()
{
  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t method lookup function for __RKFadeSceneAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKFadeSceneAction);
}

uint64_t dispatch thunk of __RKFadeSceneAction.__allocating_init(targetOpacity:duration:)()
{
  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t _finalizeUninitializedArray<A>(_:)(uint64_t a1)
{
  return a1;
}

Swift::Bool __swiftcall Entity.ComponentSet.hasMesh()()
{
  return Entity.ComponentSet.hasMesh()(MEMORY[0x263F37108]);
}

Swift::Bool __swiftcall Entity.ComponentSet.hasRectAreaLight()()
{
  return Entity.ComponentSet.hasMesh()(MEMORY[0x263F37308]);
}

Swift::Bool __swiftcall Entity.ComponentSet.hasVideo()()
{
  return Entity.ComponentSet.hasMesh()(MEMORY[0x263F37598]);
}

BOOL Entity.ComponentSet.hasMesh()(void (*a1)(void))
{
  return REEntityGetComponentByClass() != 0;
}

uint64_t Entity.MetricUtilitiesBase.entity.getter()
{
  return swift_retain();
}

uint64_t Entity.MetricUtilitiesBase.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2  = result;
  return result;
}

uint64_t Entity.metrics.getter@<X0>(void *a1@<X8>)
{
  *a1  = v1;
  return swift_retain();
}

uint64_t Entity.MetricUtilitiesBase.meshAsset.getter()
{
  REMeshComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result) {
    return REMeshComponentGetMesh();
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.animationJointCounts.getter(uint64_t a1)
{
  uint64_t v22 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v19 - v4;
  uint64_t v24 = *v1;
  uint64_t v6 = Entity.MetricUtilitiesBase.skeletalAnimationNames.getter();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  int64_t v8 = 0;
  uint64_t v24 = result;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v19 = v6 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v20 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v21 = v2 - 8;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v16 >= v20) {
      goto LABEL_21;
    }
    unint64_t v17 = *(void *)(v19 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v20) {
        goto LABEL_21;
      }
      unint64_t v17 = *(void *)(v19 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v20) {
          goto LABEL_21;
        }
        unint64_t v17 = *(void *)(v19 + 8 * v8);
        if (!v17) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(*(void *)(v6 + 48) + 8 * v14);
    swift_bridgeObjectRetain();
    RETimelineDefinitionCreateFromTimeline();
    SkeletalJointCount  = RETimelineDefinitionGetSkeletalJointCount();
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v5, 0, 1, v2);
    SkeletalJointCount  = v15;
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_bridgeObjectRelease();
    uint64_t result = RERelease();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v20)
  {
LABEL_21:
    swift_release();
    return v24;
  }
  unint64_t v17 = *(void *)(v19 + 8 * v18);
  if (v17)
  {
    int64_t v8 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v8 >= v20) {
      goto LABEL_21;
    }
    unint64_t v17 = *(void *)(v19 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t Entity.MetricUtilitiesBase.skeletalAnimationNames.getter()
{
  REAnimationLibraryComponentGetComponentType();
  ComponentByClass  = REEntityGetComponentByClass();
  uint64_t v1 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  if (!ComponentByClass) {
    return (uint64_t)v1;
  }
  if (!REAnimationLibraryComponentGetAnimationLibraryAsset()) {
    return (uint64_t)v1;
  }
  REAssetGetAssetManager();
  if (!REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset()) {
    return (uint64_t)v1;
  }
  EntryCount  = REAnimationLibraryDefinitionGetEntryCount();
  if (EntryCount < 0) {
    goto LABEL_35;
  }
  uint64_t v3 = EntryCount;
  if (!EntryCount)
  {
LABEL_31:
    RERelease();
    return (uint64_t)v1;
  }
  uint64_t v4 = 0;
  while (1)
  {
    Entryuint64_t Asset = REAnimationLibraryDefinitionGetEntryAsset();
    if (!EntryAsset) {
      goto LABEL_10;
    }
    Swift::UInt v7 = EntryAsset;
    id v8 = (id)REAssetGetType();
    Swift::String v9 = String.init(_:)(v8);
    if (v9._countAndFlagsBits == 0x656E696C656D6954 && v9._object == (void *)0xE800000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0) {
        goto LABEL_10;
      }
    }
    RETimelineDefinitionCreateFromTimeline();
    if (RETimelineDefinitionGetTimelineType() == 19) {
      break;
    }
LABEL_9:
    RERelease();
LABEL_10:
    if (v3 == ++v4) {
      goto LABEL_31;
    }
  }
  uint64_t v12 = v3;
  RETimelineDefinitionGetName();
  uint64_t v13 = String.init(cString:)();
  uint64_t v15 = v14;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  uint64_t v19 = v1[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (!__OFADD__(v19, v20))
  {
    char v22 = v17;
    if (v1[3] < v21)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
      uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_36;
      }
      unint64_t v18 = v23;
      if ((v22 & 1) == 0) {
        goto LABEL_27;
      }
LABEL_7:
      uint64_t v5 = (uint64_t *)(v1[7] + 16 * v18);
      swift_bridgeObjectRelease();
      *uint64_t v5 = v13;
      v5[1]  = v15;
LABEL_8:
      swift_bridgeObjectRelease();
      uint64_t v3 = v12;
      goto LABEL_9;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v17) {
        goto LABEL_7;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v22) {
        goto LABEL_7;
      }
    }
LABEL_27:
    v1[(v18 >> 6) + 8] |= 1 << v18;
    *(void *)(v1[6] + 8 * v18)  = v7;
    float v25 = (uint64_t *)(v1[7] + 16 * v18);
    uint64_t *v25 = v13;
    v25[1]  = v15;
    uint64_t v26 = v1[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_34;
    }
    v1[2]  = v28;
    goto LABEL_8;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Entity.MetricUtilitiesBase.averageSkinInfluenceCount.getter()
{
  uint64_t result = Entity.MetricUtilitiesBase.meshAsset.getter();
  if (result)
  {
    uint64_t result = REMeshAssetGetModelCount();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v1 = result;
      if (result)
      {
        uint64_t v2 = 0;
        float v3 = 0.0;
        do
        {
          uint64_t v4 = v2 + 1;
          uint64_t result = REMeshAssetGetAverageInfluenceCount();
          float v3 = v3 + v5;
          uint64_t v2 = v4;
        }
        while (v1 != v4);
      }
    }
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.influenceCount.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  float v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v1;
  uint64_t v6 = v14;
  Entity.MetricUtilitiesBase.averageSkinInfluenceCount.getter();
  float v8 = v7;
  uint64_t v14 = v6;
  Entity.MetricUtilitiesBase.meshVertexCount.getter();
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
  {
    char v10 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v11 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v10) {
      float v9 = (float)v11;
    }
    else {
      float v9 = (float)(unint64_t)v11;
    }
  }
  else
  {
    lazy protocol witness table accessor for type Float and conformance Float();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    float v9 = *(float *)&v14;
  }
  *(float *)&uint64_t v14 = v8 * v9;
  lazy protocol witness table accessor for type Float and conformance Float();
  return dispatch thunk of BinaryInteger.init<A>(_:)();
}

uint64_t Entity.MetricUtilitiesBase.meshVertexCount.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  if (Entity.MetricUtilitiesBase.meshAsset.getter())
  {
    uint64_t result = REMeshAssetGetModelCount();
    if ((result & 0x8000000000000000) == 0)
    {
      int v2 = 0;
      uint64_t v3 = result;
      if (!result)
      {
LABEL_7:
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        return dispatch thunk of BinaryInteger.init<A>(_:)();
      }
      uint64_t v4 = 0;
      while (1)
      {
        uint64_t result = REMeshAssetGetModelVertexCount();
        BOOL v5 = __CFADD__(v2, result);
        v2 += result;
        if (v5) {
          break;
        }
        if (v3 == ++v4) {
          goto LABEL_7;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.shapeTargetCount.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  if (Entity.MetricUtilitiesBase.meshAsset.getter())
  {
    uint64_t result = REMeshAssetGetModelCount();
    if ((result & 0x8000000000000000) == 0)
    {
      uint64_t v2 = 0;
      uint64_t v3 = result;
      if (!result)
      {
LABEL_13:
        lazy protocol witness table accessor for type Int and conformance Int();
        return dispatch thunk of BinaryInteger.init<A>(_:)();
      }
      uint64_t v4 = 0;
      while (v4 != v3)
      {
        uint64_t result = REMeshAssetGetBlendShapeGroupCount();
        if (result < 0) {
          goto LABEL_18;
        }
        uint64_t v5 = result;
        if (result)
        {
          uint64_t v6 = 0;
          while (1)
          {
            uint64_t result = REMeshAssetGetBlendShapeGroupDefinitionCount();
            BOOL v7 = __OFADD__(v2, result);
            v2 += result;
            if (v7) {
              break;
            }
            if (v5 == ++v6) {
              goto LABEL_5;
            }
          }
          __break(1u);
          break;
        }
LABEL_5:
        if (++v4 == v3) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.skeletalAnimationCount.getter(uint64_t a1)
{
  return Entity.MetricUtilitiesBase.skeletalAnimationCount.getter(a1, (void (*)(void))Entity.MetricUtilitiesBase.animationJointCounts.getter, MEMORY[0x263F8D018]);
}

uint64_t Entity.MetricUtilitiesBase.skeletonJointCount.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  if (Entity.MetricUtilitiesBase.meshAsset.getter())
  {
    uint64_t result = REMeshAssetGetTotalSkeletonCount();
    if ((result & 0x8000000000000000) == 0)
    {
      uint64_t v2 = 0;
      uint64_t v3 = result;
      if (!result)
      {
LABEL_7:
        lazy protocol witness table accessor for type Int and conformance Int();
        return dispatch thunk of BinaryInteger.init<A>(_:)();
      }
      uint64_t v4 = 0;
      while (1)
      {
        uint64_t result = REMeshAssetGetSkeletonJointCount();
        BOOL v5 = __OFADD__(v2, result);
        v2 += result;
        if (v5) {
          break;
        }
        if (v3 == ++v4) {
          goto LABEL_7;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.transformAnimationCount.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  REAnimationLibraryComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    uint64_t v1 = MEMORY[0x263F8EE88];
    uint64_t v9 = MEMORY[0x263F8EE88];
    if (!REAnimationLibraryComponentCreateQueryAllTransformAnimations())
    {
LABEL_9:
      Swift::UInt v7 = *(void *)(v1 + 16);
      swift_bridgeObjectRelease();
      Swift::UInt v8 = v7;
      lazy protocol witness table accessor for type Int and conformance Int();
      return dispatch thunk of BinaryInteger.init<A>(_:)();
    }
    uint64_t result = REAnimationLibraryComponentGetTransformQueryResultCount();
    if ((result & 0x8000000000000000) == 0)
    {
      uint64_t v3 = result;
      if (result)
      {
        uint64_t v4 = 0;
        do
        {
          uint64_t v5 = v4 + 1;
          TransformQueryResultAnimationuint64_t Asset = REAnimationLibraryComponentGetTransformQueryResultAnimationAsset();
          specialized Set._Variant.insert(_:)(&v8, TransformQueryResultAnimationAsset);
          uint64_t v4 = v5;
        }
        while (v3 != v5);
        uint64_t v1 = v9;
      }
      RERelease();
      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.audioAssets.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v66 = (char *)&v46 - v4;
  uint64_t v69 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v65 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = *(void *)(*(void *)(*(void *)(a1 + 24) + 24) + 16);
  uint64_t v67 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = type metadata accessor for Optional();
  uint64_t v68 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v9 = (char *)&v46 - v8;
  uint64_t v10 = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v62 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v61 = (char *)&v46 - v15;
  int64_t v16 = (void *)swift_slowAlloc();
  *int64_t v16 = 0;
  id v47 = v16;
  char v17 = (void *)REAudioPlayerComponentCopySizeOfAudioPlayerComponentFromEntity();
  *(void *)&long long v79 = 0;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v18 = v79;
  if (!(void)v79) {
    unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  int64_t v71 = 0;
  uint64_t v20 = *(void *)(v18 + 64);
  unint64_t v48 = v18 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(v18 + 32);
  v83  = result;
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v24 = (unint64_t)(v21 + 63) >> 6;
  float v25 = (char *)v77 + 8;
  uint64_t v26 = &v82;
  uint64_t v70 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v56 = (uint64_t (**)(char *, uint64_t))(v68 + 8);
  long long v55 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v54 = (void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v53 = (void (**)(char *, char *, uint64_t))(v69 + 16);
  uint64_t v52 = (void (**)(char *, void, uint64_t, uint64_t))(v69 + 56);
  uint64_t v51 = (void (**)(char *, uint64_t))(v69 + 8);
  uint64_t v50 = (void (**)(char *, uint64_t))(v11 + 8);
  int64_t v46 = v24 - 1;
  uint64_t v69 = MEMORY[0x263F8EE58] + 8;
  unint64_t v60 = v18;
  int64_t v59 = v24;
  uint64_t v58 = (char *)v77 + 8;
  Swift::String v57 = &v82;
  uint64_t v49 = v10;
  while (1)
  {
    if (v23)
    {
      unint64_t v27 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v28 = v27 | (v71 << 6);
LABEL_9:
      outlined init with copy of AnyHashable(*(void *)(v18 + 48) + 40 * v28, (uint64_t)&v75);
      outlined init with copy of Any(*(void *)(v18 + 56) + 32 * v28, (uint64_t)v25);
      goto LABEL_28;
    }
    int64_t v29 = v71 + 1;
    if (__OFADD__(v71, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v29 < v24)
    {
      unint64_t v30 = *(void *)(v48 + 8 * v29);
      if (v30) {
        goto LABEL_13;
      }
      int64_t v31 = v71 + 2;
      ++v71;
      if (v29 + 1 < v24)
      {
        unint64_t v30 = *(void *)(v48 + 8 * v31);
        if (v30) {
          goto LABEL_16;
        }
        int64_t v71 = v29 + 1;
        if (v29 + 2 < v24)
        {
          unint64_t v30 = *(void *)(v48 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2;
            goto LABEL_13;
          }
          int64_t v31 = v29 + 3;
          int64_t v71 = v29 + 2;
          if (v29 + 3 < v24) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v23 = 0;
    uint64_t v78 = 0;
    memset(v77, 0, sizeof(v77));
    long long v75 = 0u;
    long long v76 = 0u;
LABEL_28:
    outlined init with take of (key: AnyHashable, value: Any)?((uint64_t)&v75, (uint64_t)&v79);
    if (!*((void *)&v80 + 1))
    {
      swift_release();
      uint64_t v45 = v83;
      MEMORY[0x22A696500](v47, -1, -1);
      return v45;
    }
    outlined init with take of Any(v26, v74);
    long long v75 = v79;
    long long v76 = v80;
    *(void *)&v77[0]  = v81;
    if (swift_dynamicCast())
    {
      uint64_t v32 = v72;
      uint64_t v33 = v73;
      outlined init with copy of Any((uint64_t)v74, (uint64_t)&v75);
      char v34 = swift_dynamicCast();
      uint64_t v35 = *v70;
      if (v34)
      {
        v35(v9, 0, 1, v10);
        char v36 = v61;
        (*v55)(v61, v9, v10);
        uint64_t v37 = *v54;
        uint64_t v68 = v32;
        v37(v62, v36, v10);
        id v38 = v65;
        uint64_t v39 = v67;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        uint64_t v40 = v66;
        (*v53)(v66, v38, v39);
        (*v52)(v40, 0, 1, v39);
        *(void *)&long long v75 = v68;
        *((void *)&v75 + 1)  = v33;
        type metadata accessor for Dictionary();
        uint64_t v41 = v49;
        unint64_t v18 = v60;
        Dictionary.subscript.setter();
        uint64_t v42 = v38;
        int64_t v24 = v59;
        uint64_t v43 = v39;
        float v25 = v58;
        (*v51)(v42, v43);
        uint64_t v44 = v36;
        uint64_t v26 = v57;
        uint64_t v10 = v41;
        (*v50)(v44, v41);
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
      }
      else
      {
        v35(v9, 1, 1, v10);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
        uint64_t result = (*v56)(v9, v63);
      }
    }
    else
    {
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
    }
  }
  unint64_t v30 = *(void *)(v48 + 8 * v31);
  if (v30)
  {
LABEL_16:
    int64_t v29 = v31;
LABEL_13:
    unint64_t v23 = (v30 - 1) & v30;
    unint64_t v28 = __clz(__rbit64(v30)) + (v29 << 6);
    int64_t v71 = v29;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v29 >= v24)
    {
      int64_t v71 = v46;
      goto LABEL_27;
    }
    unint64_t v30 = *(void *)(v48 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_13;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t Entity.MetricUtilitiesBase.audioFileCount.getter(uint64_t a1)
{
  return Entity.MetricUtilitiesBase.audioFileCount.getter(a1, MEMORY[0x263F36E28]);
}

uint64_t Entity.MetricUtilitiesBase.audioMemory.getter(uint64_t a1)
{
  return Entity.MetricUtilitiesBase.audioFileCount.getter(a1, MEMORY[0x263F36E38]);
}

uint64_t Entity.MetricUtilitiesBase.audioFileCount.getter(uint64_t a1, void (*a2)(void))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  REAudioPlayerComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    a2();
    lazy protocol witness table accessor for type Int and conformance Int();
    return dispatch thunk of BinaryInteger.init<A>(_:)();
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  }
}

uint64_t Entity.MetricUtilitiesBase.meshMemory.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  if (Entity.MetricUtilitiesBase.meshAsset.getter())
  {
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      uint64_t v2 = SceneNullable;
      id v3 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v3)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v2);
      }
      if (RESceneGetECSManagerNullable())
      {
        REECSManagerGetServiceLocator();
        REAssetComputeEstimatedMemorySize();
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(_:)();
        return swift_release();
      }
      swift_release();
    }
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
}

uint64_t Entity.MetricUtilitiesBase.meshTriangleCount.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  REMeshComponentGetComponentType();
  if (!REEntityGetComponentByClass() || (MEMORY[0x22A690540]() & 0x80000000) != 0)
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  }
  else
  {
    lazy protocol witness table accessor for type Int32 and conformance Int32();
    return dispatch thunk of BinaryInteger.init<A>(_:)();
  }
}

uint64_t specialized Entity.MetricUtilitiesBase.hasTechniqueMappedToShadowPass.getter()
{
  REMaterialParameterBlockArrayComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result)
  {
    swift_retain();
    uint64_t v1 = specialized Entity.MetricUtilitiesBase.materialCounts.getter();
    uint64_t result = swift_release();
    int64_t v2 = 0;
    uint64_t v3 = v1 + 64;
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v5 = -1;
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    uint64_t v6 = v5 & *(void *)(v1 + 64);
    int64_t v14 = (unint64_t)(v4 + 63) >> 6;
    while (1)
    {
      if (v6)
      {
        v6 &= v6 - 1;
      }
      else
      {
        int64_t v8 = v2 + 1;
        if (__OFADD__(v2, 1)) {
          goto LABEL_41;
        }
        if (v8 >= v14)
        {
LABEL_38:
          swift_release();
          return 0;
        }
        uint64_t v9 = *(void *)(v3 + 8 * v8);
        ++v2;
        if (!v9)
        {
          int64_t v2 = v8 + 1;
          if (v8 + 1 >= v14) {
            goto LABEL_38;
          }
          uint64_t v9 = *(void *)(v3 + 8 * v2);
          if (!v9)
          {
            int64_t v2 = v8 + 2;
            if (v8 + 2 >= v14) {
              goto LABEL_38;
            }
            uint64_t v9 = *(void *)(v3 + 8 * v2);
            if (!v9)
            {
              int64_t v2 = v8 + 3;
              if (v8 + 3 >= v14) {
                goto LABEL_38;
              }
              uint64_t v9 = *(void *)(v3 + 8 * v2);
              if (!v9)
              {
                int64_t v2 = v8 + 4;
                if (v8 + 4 >= v14) {
                  goto LABEL_38;
                }
                uint64_t v9 = *(void *)(v3 + 8 * v2);
                if (!v9)
                {
                  int64_t v2 = v8 + 5;
                  if (v8 + 5 >= v14) {
                    goto LABEL_38;
                  }
                  uint64_t v9 = *(void *)(v3 + 8 * v2);
                  if (!v9)
                  {
                    int64_t v10 = v8 + 6;
                    if (v10 >= v14) {
                      goto LABEL_38;
                    }
                    uint64_t v9 = *(void *)(v3 + 8 * v10);
                    if (!v9)
                    {
                      while (1)
                      {
                        int64_t v2 = v10 + 1;
                        if (__OFADD__(v10, 1)) {
                          goto LABEL_42;
                        }
                        if (v2 >= v14) {
                          goto LABEL_38;
                        }
                        uint64_t v9 = *(void *)(v3 + 8 * v2);
                        ++v10;
                        if (v9) {
                          goto LABEL_27;
                        }
                      }
                    }
                    int64_t v2 = v10;
                  }
                }
              }
            }
          }
        }
LABEL_27:
        uint64_t v6 = (v9 - 1) & v9;
      }
      uint64_t v11 = (void *)swift_slowAlloc();
      *uint64_t v11 = 0;
      uint64_t result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0) {
        break;
      }
      uint64_t v12 = result;
      if (result)
      {
        uint64_t v13 = 0;
        while (v12 != v13)
        {
          uint64_t result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
          if (result)
          {
            REMaterialAssetGetMaterialDefinition();
            uint64_t result = REMaterialDefinitionAssetHasTechniqueWithHash();
            if (result)
            {
              MEMORY[0x22A696500](v11, -1, -1);
              goto LABEL_36;
            }
          }
          if (v12 == ++v13) {
            goto LABEL_5;
          }
        }
        __break(1u);
        break;
      }
LABEL_5:
      ValidPassTechniqueMapping  = REMaterialAssetGetValidPassTechniqueMapping();
      uint64_t result = MEMORY[0x22A696500](v11, -1, -1);
      if (ValidPassTechniqueMapping)
      {
LABEL_36:
        swift_release();
        return 1;
      }
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.hasTechniqueMappedToShadowPass.getter()
{
  REMaterialParameterBlockArrayComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result)
  {
    swift_retain();
    uint64_t v1 = specialized Entity.MetricUtilitiesBase.materialCounts.getter();
    uint64_t result = swift_release();
    int64_t v2 = 0;
    uint64_t v3 = v1 + 64;
    uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v5 = -1;
    if (v4 < 64) {
      uint64_t v5 = ~(-1 << v4);
    }
    uint64_t v6 = v5 & *(void *)(v1 + 64);
    int64_t v14 = (unint64_t)(v4 + 63) >> 6;
    while (1)
    {
      if (v6)
      {
        v6 &= v6 - 1;
      }
      else
      {
        int64_t v8 = v2 + 1;
        if (__OFADD__(v2, 1)) {
          goto LABEL_39;
        }
        if (v8 >= v14)
        {
LABEL_36:
          swift_release();
          return 0;
        }
        uint64_t v9 = *(void *)(v3 + 8 * v8);
        ++v2;
        if (!v9)
        {
          int64_t v2 = v8 + 1;
          if (v8 + 1 >= v14) {
            goto LABEL_36;
          }
          uint64_t v9 = *(void *)(v3 + 8 * v2);
          if (!v9)
          {
            int64_t v2 = v8 + 2;
            if (v8 + 2 >= v14) {
              goto LABEL_36;
            }
            uint64_t v9 = *(void *)(v3 + 8 * v2);
            if (!v9)
            {
              int64_t v2 = v8 + 3;
              if (v8 + 3 >= v14) {
                goto LABEL_36;
              }
              uint64_t v9 = *(void *)(v3 + 8 * v2);
              if (!v9)
              {
                int64_t v2 = v8 + 4;
                if (v8 + 4 >= v14) {
                  goto LABEL_36;
                }
                uint64_t v9 = *(void *)(v3 + 8 * v2);
                if (!v9)
                {
                  int64_t v10 = v8 + 5;
                  if (v10 >= v14) {
                    goto LABEL_36;
                  }
                  uint64_t v9 = *(void *)(v3 + 8 * v10);
                  if (!v9)
                  {
                    while (1)
                    {
                      int64_t v2 = v10 + 1;
                      if (__OFADD__(v10, 1)) {
                        goto LABEL_40;
                      }
                      if (v2 >= v14) {
                        goto LABEL_36;
                      }
                      uint64_t v9 = *(void *)(v3 + 8 * v2);
                      ++v10;
                      if (v9) {
                        goto LABEL_25;
                      }
                    }
                  }
                  int64_t v2 = v10;
                }
              }
            }
          }
        }
LABEL_25:
        uint64_t v6 = (v9 - 1) & v9;
      }
      uint64_t v11 = (void *)swift_slowAlloc();
      *uint64_t v11 = 0;
      uint64_t result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0) {
        break;
      }
      uint64_t v12 = result;
      if (result)
      {
        uint64_t v13 = 0;
        while (v12 != v13)
        {
          uint64_t result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
          if (result)
          {
            REMaterialAssetGetMaterialDefinition();
            uint64_t result = REMaterialDefinitionAssetHasTechniqueWithHash();
            if (result)
            {
              MEMORY[0x22A696500](v11, -1, -1);
              goto LABEL_34;
            }
          }
          if (v12 == ++v13) {
            goto LABEL_5;
          }
        }
        __break(1u);
        break;
      }
LABEL_5:
      ValidPassTechniqueMapping  = REMaterialAssetGetValidPassTechniqueMapping();
      uint64_t result = MEMORY[0x22A696500](v11, -1, -1);
      if (ValidPassTechniqueMapping)
      {
LABEL_34:
        swift_release();
        return 1;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
  }
  return result;
}

uint64_t specialized Entity.MetricUtilitiesBase.materialCounts.getter()
{
  REMeshComponentGetComponentType();
  ComponentByClass  = REEntityGetComponentByClass();
  uint64_t v1 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  if (!ComponentByClass) {
    return (uint64_t)v1;
  }
  REMeshComponentGetComponentType();
  if (!REEntityGetComponentByClass()) {
    return (uint64_t)v1;
  }
  MaterialCount  = REMeshComponentGetMaterialCount();
  if (MaterialCount < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_32;
  }
  if (MaterialCount > 0x7FFFFFFF)
  {
LABEL_33:
    __break(1u);
  }
  else if ((MaterialCount & 0x8000000000000000) == 0)
  {
    if (MaterialCount)
    {
      uint64_t v3 = 0;
      uint64_t v4 = MaterialCount;
      while (1)
      {
        MaterialAtIndex  = REMeshComponentGetMaterialAtIndex();
        if (!MaterialAtIndex) {
          goto LABEL_10;
        }
        Swift::UInt v6 = MaterialAtIndex;
        uint64_t v7 = v1[2];
        if (v7)
        {
          uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(MaterialAtIndex);
          if (v9) {
            LODWORD(v7)  = *(_DWORD *)(v1[7] + 4 * v8);
          }
          else {
            LODWORD(v7)  = 0;
          }
        }
        int v10 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
        uint64_t v14 = v1[2];
        BOOL v15 = (v12 & 1) == 0;
        uint64_t v16 = v14 + v15;
        if (__OFADD__(v14, v15)) {
          goto LABEL_30;
        }
        char v17 = v12;
        if (v1[3] >= v16)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((v12 & 1) == 0) {
              goto LABEL_24;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if ((v17 & 1) == 0) {
              goto LABEL_24;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
          uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
          if ((v17 & 1) != (v19 & 1)) {
            goto LABEL_35;
          }
          unint64_t v13 = v18;
          if ((v17 & 1) == 0)
          {
LABEL_24:
            v1[(v13 >> 6) + 8] |= 1 << v13;
            *(void *)(v1[6] + 8 * v13)  = v6;
            *(_DWORD *)(v1[7] + 4 * v13)  = v10;
            uint64_t v20 = v1[2];
            BOOL v21 = __OFADD__(v20, 1);
            uint64_t v22 = v20 + 1;
            if (v21) {
              goto LABEL_31;
            }
            v1[2]  = v22;
            goto LABEL_9;
          }
        }
        *(_DWORD *)(v1[7] + 4 * v13)  = v10;
LABEL_9:
        swift_bridgeObjectRelease();
LABEL_10:
        if (v4 == ++v3) {
          return (uint64_t)v1;
        }
      }
    }
    return (uint64_t)v1;
  }
  __break(1u);
LABEL_35:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Entity.MetricUtilitiesBase.materialCounts.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void (***)(char *, void, uint64_t, uint64_t))(v4 - 8);
  v90  = v4;
  v91  = v5;
  MEMORY[0x270FA5388](v4);
  v103  = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v98  = (char *)&v88 - v8;
  v105  = *(void *)(a1 + 24);
  v100  = *(void *)(v105 + 24);
  v107  = *(void *)(v100 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v101  = (char *)&v88 - v10;
  uint64_t v11 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v99  = (char *)&v88 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (uint64_t)&v88 - v18;
  MEMORY[0x270FA5388](v20);
  v88  = (void (**)(char *, uint64_t))((char *)&v88 - v21);
  MEMORY[0x270FA5388](v22);
  v94  = (char *)&v88 - v23;
  MEMORY[0x270FA5388](v24);
  v92  = (char *)&v88 - v25;
  MEMORY[0x270FA5388](v26);
  v102  = (char *)&v88 - v27;
  MEMORY[0x270FA5388](v28);
  v89  = (char *)&v88 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v88 - v31;
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t))((char *)&v88 - v34);
  int64_t v36 = *v1;
  REMeshComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    v95  = AssociatedTypeWitness;
    swift_getTupleTypeMetadata2();
    static Array._allocateUninitialized(_:)();
    uint64_t v37 = Dictionary.init(dictionaryLiteral:)();
    v109  = v36;
    v110  = v37;
    Entity.MetricUtilitiesBase.materialAssignmentCount.getter();
    char v38 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v40 = v35;
    v39(v32, (char *)v35, v3);
    v96  = v3;
    v97  = v14;
    v93  = v11;
    if ((v38 & 1) == 0)
    {
      v104  = *(void (**)(char *, uint64_t))(v11 + 8);
      v104(v32, v3);
LABEL_27:
      uint64_t v43 = v40;
      goto LABEL_28;
    }
    uint64_t v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v104  = *(void (**)(char *, uint64_t))(v11 + 8);
    v104(v32, v3);
    if (v41 <= 64)
    {
LABEL_26:
      uint64_t v14 = v97;
      goto LABEL_27;
    }
    uint64_t v42 = v89;
    uint64_t v43 = v40;
    v39(v89, (char *)v40, v3);
    v109  = 0x8000000000000000;
    if (dispatch thunk of static BinaryInteger.isSigned.getter())
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        uint64_t v51 = v102;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v43 = v40;
        uint64_t v19 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v52 = v104;
        v104(v51, v3);
        v52(v42, v3);
        uint64_t v14 = v97;
        if ((v19 & 1) == 0) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v44 = dispatch thunk of BinaryInteger._lowWord.getter();
        v104(v42, v3);
        uint64_t v14 = v97;
        if (v44 >= v109) {
          goto LABEL_28;
        }
      }
      goto LABEL_24;
    }
    char v46 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v47 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v46)
    {
      if (v47 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        unint64_t v48 = v102;
        uint64_t v3 = v96;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v49 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v50 = v104;
        v104(v48, v3);
        v50(v42, v3);
        uint64_t v14 = v97;
        uint64_t v43 = v40;
        if ((v49 & 1) == 0) {
          goto LABEL_28;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v3 = v96;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      long long v55 = v102;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v56 = dispatch thunk of static Comparable.< infix(_:_:)();
      Swift::String v57 = v55;
      uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t))v104;
      v104(v57, v3);
      (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v19, v42, v3);
      if (v56)
      {
LABEL_56:
        uint64_t result = v43(v19, v3);
        __break(1u);
        return result;
      }
      int64_t v58 = v109;
      uint64_t v59 = dispatch thunk of BinaryInteger._lowWord.getter();
      v43(v19, v3);
      BOOL v54 = v59 < v58;
    }
    else
    {
      if (v47 >= 64)
      {
LABEL_25:
        uint64_t v3 = v96;
        v104(v42, v96);
        goto LABEL_26;
      }
      uint64_t v3 = v96;
      uint64_t v53 = dispatch thunk of BinaryInteger._lowWord.getter();
      v104(v42, v3);
      BOOL v54 = v53 < v109;
    }
    uint64_t v14 = v97;
    uint64_t v43 = v40;
    if (!v54)
    {
LABEL_28:
      uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v61 = v92;
      v39(v92, (char *)v43, v3);
      BOOL v54 = v60 < 65;
      unint64_t v62 = v94;
      if (v54)
      {
        uint64_t v70 = dispatch thunk of BinaryInteger.bitWidth.getter();
        uint64_t v71 = (v93 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v104(v61, v3);
        if (v70 != 64)
        {
          uint64_t v72 = v71;
          goto LABEL_44;
        }
        uint64_t v72 = v71;
        if (dispatch thunk of static BinaryInteger.isSigned.getter()) {
          goto LABEL_44;
        }
      }
      else
      {
        v104(v61, v3);
      }
      v39(v62, (char *)v43, v3);
      v109  = 0x7FFFFFFFFFFFFFFFLL;
      char v63 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v64 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v63)
      {
        if (v64 > 64)
        {
          lazy protocol witness table accessor for type Int and conformance Int();
          uint64_t v65 = v102;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v66 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v67 = v93 + 8;
          uint64_t v68 = v104;
          v104(v65, v3);
          uint64_t v69 = v62;
LABEL_42:
          v68(v69, v3);
          if (v66)
          {
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          uint64_t v72 = v67 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          uint64_t v3 = v96;
LABEL_44:
          uint64_t v77 = dispatch thunk of BinaryInteger._lowWord.getter();
          v104((char *)v43, v3);
          if ((v77 & 0x8000000000000000) == 0)
          {
            uint64_t v78 = v103;
            if (v77)
            {
              uint64_t v79 = 0;
              v92  = (char *)(v93 + 48);
              v89  = (char *)(v93 + 32);
              v88  = (void (**)(char *, uint64_t))(v91 + 1);
              v91  = (void (**)(char *, void, uint64_t, uint64_t))(v93 + 56);
              v80  = MEMORY[0x263F8DD08];
              v93  = v77;
              v94  = (char *)v72;
              v81  = v96;
              do
              {
                MaterialAtIndex  = REMeshComponentGetMaterialAtIndex();
                if (MaterialAtIndex)
                {
                  v87  = MaterialAtIndex;
                  v109  = MaterialAtIndex;
                  MEMORY[0x22A688970](&v109, v110, v80, v81, MEMORY[0x263F8DD10]);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v92)(v78, 1, v81) == 1)
                  {
                    swift_getAssociatedConformanceWitness();
                    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
                    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
                    (*v88)(v78, v90);
                  }
                  else
                  {
                    (*(void (**)(char *, char *, uint64_t))v89)(v14, v78, v81);
                  }
                  v82  = v99;
                  dispatch thunk of BinaryInteger.init<A>(_:)();
                  swift_getAssociatedConformanceWitness();
                  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
                  v83  = v102;
                  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
                  v84  = v98;
                  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
                  v85  = v104;
                  v104(v83, v81);
                  v85(v82, v81);
                  (*v91)(v84, 0, 1, v81);
                  v109  = v87;
                  v80  = MEMORY[0x263F8DD08];
                  type metadata accessor for Dictionary();
                  Dictionary.subscript.setter();
                  uint64_t v78 = v103;
                  uint64_t v14 = v97;
                  uint64_t v77 = v93;
                }
                ++v79;
              }
              while (v77 != v79);
            }
            return v110;
          }
          __break(1u);
          goto LABEL_55;
        }
        dispatch thunk of BinaryInteger._lowWord.getter();
        uint64_t v74 = v93 + 8;
      }
      else
      {
        uint64_t v73 = v93;
        if (v64 > 63)
        {
          v108  = 0x7FFFFFFFFFFFFFFFLL;
          long long v75 = v102;
          (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v102, v62, v3);
          lazy protocol witness table accessor for type Int and conformance Int();
          long long v76 = v88;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v66 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v67 = v73 + 8;
          uint64_t v68 = v104;
          v104((char *)v76, v3);
          uint64_t v69 = v75;
          goto LABEL_42;
        }
        dispatch thunk of BinaryInteger._lowWord.getter();
        uint64_t v74 = v73 + 8;
      }
      uint64_t v72 = v74 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v104(v62, v3);
      goto LABEL_44;
    }
    goto LABEL_24;
  }
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Entity.MetricUtilitiesBase.isShadowCaster.getter()
{
  RERenderOptionsComponentGetComponentType();
  if (!REEntityGetComponentByClass()) {
    goto LABEL_5;
  }
  uint64_t v0 = (unsigned char *)swift_slowAlloc();
  unsigned char *v0 = 1;
  if (!RERenderOptionsComponentGetCastsShadowsOverride() || (*v0 & 1) != 0)
  {
    MEMORY[0x22A696500](v0, -1, -1);
LABEL_5:
    swift_retain();
    char v1 = specialized Entity.MetricUtilitiesBase.hasTechniqueMappedToShadowPass.getter();
    swift_release();
    return v1 & 1;
  }
  MEMORY[0x22A696500](v0, -1, -1);
  return 0;
}

uint64_t specialized Entity.MetricUtilitiesBase.isShadowReceiver.getter()
{
  REMaterialParameterBlockArrayComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result)
  {
    swift_retain();
    uint64_t v1 = specialized Entity.MetricUtilitiesBase.materialCounts.getter();
    uint64_t result = swift_release();
    int64_t v2 = 0;
    uint64_t v14 = v1 + 64;
    uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v4 = -1;
    if (v3 < 64) {
      uint64_t v4 = ~(-1 << v3);
    }
    uint64_t v5 = v4 & *(void *)(v1 + 64);
    int64_t v15 = (unint64_t)(v3 + 63) >> 6;
    while (1)
    {
      if (v5)
      {
        v5 &= v5 - 1;
      }
      else
      {
        int64_t v6 = v2 + 1;
        if (__OFADD__(v2, 1)) {
          goto LABEL_55;
        }
        if (v6 >= v15)
        {
LABEL_50:
          swift_release();
          return 0;
        }
        uint64_t v7 = *(void *)(v14 + 8 * v6);
        ++v2;
        if (!v7)
        {
          int64_t v2 = v6 + 1;
          if (v6 + 1 >= v15) {
            goto LABEL_50;
          }
          uint64_t v7 = *(void *)(v14 + 8 * v2);
          if (!v7)
          {
            int64_t v2 = v6 + 2;
            if (v6 + 2 >= v15) {
              goto LABEL_50;
            }
            uint64_t v7 = *(void *)(v14 + 8 * v2);
            if (!v7)
            {
              int64_t v2 = v6 + 3;
              if (v6 + 3 >= v15) {
                goto LABEL_50;
              }
              uint64_t v7 = *(void *)(v14 + 8 * v2);
              if (!v7)
              {
                int64_t v2 = v6 + 4;
                if (v6 + 4 >= v15) {
                  goto LABEL_50;
                }
                uint64_t v7 = *(void *)(v14 + 8 * v2);
                if (!v7)
                {
                  int64_t v2 = v6 + 5;
                  if (v6 + 5 >= v15) {
                    goto LABEL_50;
                  }
                  uint64_t v7 = *(void *)(v14 + 8 * v2);
                  if (!v7)
                  {
                    int64_t v8 = v6 + 6;
                    if (v8 >= v15) {
                      goto LABEL_50;
                    }
                    uint64_t v7 = *(void *)(v14 + 8 * v8);
                    if (!v7)
                    {
                      while (1)
                      {
                        int64_t v2 = v8 + 1;
                        if (__OFADD__(v8, 1)) {
                          goto LABEL_56;
                        }
                        if (v2 >= v15) {
                          goto LABEL_50;
                        }
                        uint64_t v7 = *(void *)(v14 + 8 * v2);
                        ++v8;
                        if (v7) {
                          goto LABEL_27;
                        }
                      }
                    }
                    int64_t v2 = v8;
                  }
                }
              }
            }
          }
        }
LABEL_27:
        uint64_t v5 = (v7 - 1) & v7;
      }
      char v9 = (void *)swift_slowAlloc();
      *char v9 = 0;
      uint64_t result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0) {
        goto LABEL_53;
      }
      uint64_t v10 = result;
      if (result) {
        break;
      }
LABEL_36:
      if (REMaterialAssetGetValidPassTechniqueMapping()
        && REMaterialAssetTechniqueHasVariation())
      {
LABEL_48:
        MEMORY[0x22A696500](v9, -1, -1);
        swift_release();
        return 1;
      }
      uint64_t result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0) {
        goto LABEL_54;
      }
      uint64_t v12 = result;
      if (result)
      {
        uint64_t v13 = 0;
        while (v12 != v13)
        {
          uint64_t result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
          if (result)
          {
            uint64_t result = REMaterialAssetTechniqueHasVariation();
            if (result) {
              goto LABEL_48;
            }
          }
          if (v12 == ++v13) {
            goto LABEL_46;
          }
        }
        goto LABEL_52;
      }
LABEL_46:
      if (REMaterialAssetGetValidPassTechniqueMapping()
        && REMaterialAssetTechniqueHasVariation())
      {
        goto LABEL_48;
      }
      uint64_t result = MEMORY[0x22A696500](v9, -1, -1);
    }
    uint64_t v11 = 0;
    while (v10 != v11)
    {
      uint64_t result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
      if (result)
      {
        uint64_t result = REMaterialAssetTechniqueHasVariation();
        if (result) {
          goto LABEL_48;
        }
      }
      if (v10 == ++v11) {
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.isShadowReceiver.getter()
{
  REMaterialParameterBlockArrayComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result)
  {
    swift_retain();
    uint64_t v1 = specialized Entity.MetricUtilitiesBase.materialCounts.getter();
    uint64_t result = swift_release();
    int64_t v2 = 0;
    uint64_t v14 = v1 + 64;
    uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v4 = -1;
    if (v3 < 64) {
      uint64_t v4 = ~(-1 << v3);
    }
    uint64_t v5 = v4 & *(void *)(v1 + 64);
    int64_t v15 = (unint64_t)(v3 + 63) >> 6;
    while (1)
    {
      if (v5)
      {
        v5 &= v5 - 1;
      }
      else
      {
        int64_t v6 = v2 + 1;
        if (__OFADD__(v2, 1)) {
          goto LABEL_53;
        }
        if (v6 >= v15)
        {
LABEL_48:
          swift_release();
          return 0;
        }
        uint64_t v7 = *(void *)(v14 + 8 * v6);
        ++v2;
        if (!v7)
        {
          int64_t v2 = v6 + 1;
          if (v6 + 1 >= v15) {
            goto LABEL_48;
          }
          uint64_t v7 = *(void *)(v14 + 8 * v2);
          if (!v7)
          {
            int64_t v2 = v6 + 2;
            if (v6 + 2 >= v15) {
              goto LABEL_48;
            }
            uint64_t v7 = *(void *)(v14 + 8 * v2);
            if (!v7)
            {
              int64_t v2 = v6 + 3;
              if (v6 + 3 >= v15) {
                goto LABEL_48;
              }
              uint64_t v7 = *(void *)(v14 + 8 * v2);
              if (!v7)
              {
                int64_t v2 = v6 + 4;
                if (v6 + 4 >= v15) {
                  goto LABEL_48;
                }
                uint64_t v7 = *(void *)(v14 + 8 * v2);
                if (!v7)
                {
                  int64_t v8 = v6 + 5;
                  if (v8 >= v15) {
                    goto LABEL_48;
                  }
                  uint64_t v7 = *(void *)(v14 + 8 * v8);
                  if (!v7)
                  {
                    while (1)
                    {
                      int64_t v2 = v8 + 1;
                      if (__OFADD__(v8, 1)) {
                        goto LABEL_54;
                      }
                      if (v2 >= v15) {
                        goto LABEL_48;
                      }
                      uint64_t v7 = *(void *)(v14 + 8 * v2);
                      ++v8;
                      if (v7) {
                        goto LABEL_25;
                      }
                    }
                  }
                  int64_t v2 = v8;
                }
              }
            }
          }
        }
LABEL_25:
        uint64_t v5 = (v7 - 1) & v7;
      }
      char v9 = (void *)swift_slowAlloc();
      *char v9 = 0;
      uint64_t result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0) {
        goto LABEL_51;
      }
      uint64_t v10 = result;
      if (result) {
        break;
      }
LABEL_34:
      if (REMaterialAssetGetValidPassTechniqueMapping()
        && REMaterialAssetTechniqueHasVariation())
      {
LABEL_46:
        MEMORY[0x22A696500](v9, -1, -1);
        swift_release();
        return 1;
      }
      uint64_t result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0) {
        goto LABEL_52;
      }
      uint64_t v12 = result;
      if (result)
      {
        uint64_t v13 = 0;
        while (v12 != v13)
        {
          uint64_t result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
          if (result)
          {
            uint64_t result = REMaterialAssetTechniqueHasVariation();
            if (result) {
              goto LABEL_46;
            }
          }
          if (v12 == ++v13) {
            goto LABEL_44;
          }
        }
        goto LABEL_50;
      }
LABEL_44:
      if (REMaterialAssetGetValidPassTechniqueMapping()
        && REMaterialAssetTechniqueHasVariation())
      {
        goto LABEL_46;
      }
      uint64_t result = MEMORY[0x22A696500](v9, -1, -1);
    }
    uint64_t v11 = 0;
    while (v10 != v11)
    {
      uint64_t result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
      if (result)
      {
        uint64_t result = REMaterialAssetTechniqueHasVariation();
        if (result) {
          goto LABEL_46;
        }
      }
      if (v10 == ++v11) {
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.shadowCasterCount.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  swift_retain();
  RERenderOptionsComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    uint64_t v1 = (unsigned char *)swift_slowAlloc();
    unsigned char *v1 = 1;
    if (RERenderOptionsComponentGetCastsShadowsOverride() && (*v1 & 1) == 0)
    {
      MEMORY[0x22A696500](v1, -1, -1);
      swift_release();
      goto LABEL_7;
    }
    MEMORY[0x22A696500](v1, -1, -1);
  }
  swift_retain();
  specialized Entity.MetricUtilitiesBase.hasTechniqueMappedToShadowPass.getter();
  swift_release_n();
LABEL_7:
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
}

uint64_t Entity.MetricUtilitiesBase.shadowClusterID.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v1 = (void *)swift_slowAlloc();
  void *v1 = 0;
  if (REEntityGetProjectiveShadowClusterID())
  {
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    dispatch thunk of BinaryInteger.init<A>(_:)();
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  }
  return MEMORY[0x22A696500](v1, -1, -1);
}

uint64_t Entity.MetricUtilitiesBase.shadowClusterIDs.getter()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Entity]);
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  uint64_t v4 = v3;
  uint64_t v5 = *(int *)(TupleTypeMetadata2 + 48);
  Entity.MetricUtilitiesBase.shadowClusterID.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16)  = xmmword_22831E4E0;
  *(void *)(v6 + 32)  = v1;
  uint64_t v8 = v6;
  specialized Array._endMutation()();
  *(void *)(v4 + v5)  = v8;
  type metadata accessor for Array();
  swift_retain();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Entity.MetricUtilitiesBase.shadowReceiverCount.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  swift_retain();
  specialized Entity.MetricUtilitiesBase.isShadowReceiver.getter();
  swift_release();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
}

uint64_t Entity.MetricUtilitiesBase.materialAssignmentCount.getter()
{
  if (REEntityGetComponentByClass()) {
    REMeshComponentGetMaterialCount();
  }
  lazy protocol witness table accessor for type Int and conformance Int();
  return dispatch thunk of BinaryInteger.init<A>(_:)();
}

uint64_t Entity.MetricUtilitiesBase.uniqueMaterialCount.getter(uint64_t a1)
{
  return Entity.MetricUtilitiesBase.skeletalAnimationCount.getter(a1, (void (*)(void))Entity.MetricUtilitiesBase.materialCounts.getter, MEMORY[0x263F8CFD0]);
}

uint64_t Entity.MetricUtilitiesBase.skeletalAnimationCount.getter(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  return dispatch thunk of BinaryInteger.init<A>(_:)();
}

unint64_t Entity.MetricUtilitiesBase.rawCollisionShapeType.getter()
{
  REColliderComponentGetComponentType();
  if (REEntityGetComponentByClass() && REColliderComponentGetCollisionObject())
  {
    RECollisionObjectGetShape();
    Type  = RECollisionShapeGetType();
    unsigned __int8 v1 = 0;
    uint64_t v2 = Type;
  }
  else
  {
    uint64_t v2 = 0;
    unsigned __int8 v1 = 1;
  }
  return v2 | ((unint64_t)v1 << 32);
}

uint64_t Entity.MetricUtilitiesBase.TextureMetrics.assetId.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Entity.MetricUtilitiesBase.TextureMetrics.memorySize.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Entity.MetricUtilitiesBase.TextureMetrics.resolution.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 16);
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
  __n128 v9 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = v3 + *(int *)(a3 + 40);
  uint64_t v14 = *(int *)(v13 + 56);
  int64_t v15 = &v11[v14];
  uint64_t v16 = v12 + v14;
  uint64_t v17 = *(void *)(v7 - 8);
  uint64_t v18 = *(void (**)(char *, __n128))(v17 + 16);
  v18(v11, v9);
  ((void (*)(char *, uint64_t, uint64_t))v18)(v15, v16, v7);
  uint64_t v19 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
  v19(a1, v11, v7);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(a2, v15, v7);
}

void Entity.MetricUtilitiesBase.TextureMetrics.init(coreMetrics:textureIdx:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = (id)REEntityTextureMetricsCopyNthTextureAssetId();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *a2  = v5;
  a2[1]  = v7;
  NthTextureByteSize  = REEntityTextureMetricsGetNthTextureByteSize();
  if (NthTextureByteSize < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    a2[2]  = NthTextureByteSize;
    REEntityTextureMetricsGetNthTextureDimensions();
    type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics();
    lazy protocol witness table accessor for type Int32 and conformance Int32();
    dispatch thunk of BinaryInteger.init<A>(_:)();
    swift_getTupleTypeMetadata2();
    dispatch thunk of BinaryInteger.init<A>(_:)();
  }
}

uint64_t static Entity.MetricUtilitiesBase.TextureMetrics.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t Entity.MetricUtilitiesBase.TextureMetrics.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Int Entity.MetricUtilitiesBase.TextureMetrics.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Entity.MetricUtilitiesBase<A>.TextureMetrics()
{
  return Hasher._finalize()();
}

uint64_t Entity.MetricUtilitiesBase.textureMetrics.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v16 - v7;
  __n128 v9 = (void *)REEntityCopyTextureMetrics();
  swift_getWitnessTable();
  uint64_t v10 = Set.init()();
  uint64_t v18 = v10;
  uint64_t result = REEntityTextureMetricsGetTexturesCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result)
    {
      uint64_t v12 = 0;
      v16[1]  = v1;
      id v17 = v9;
      uint64_t v13 = (void (**)(char *, uint64_t))(v3 + 8);
      do
      {
        uint64_t v14 = result;
        id v15 = v17;
        Entity.MetricUtilitiesBase.TextureMetrics.init(coreMetrics:textureIdx:)(v15, v5);
        type metadata accessor for Set();
        Set.insert(_:)();
        (*v13)(v8, v2);
        uint64_t result = v14;
        ++v12;
      }
      while (v14 != v12);

      return v18;
    }
    else
    {
    }
    return v10;
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.textureCount.getter(uint64_t a1)
{
  return dispatch thunk of BinaryInteger.init<A>(_:)();
}

uint64_t Entity.MetricUtilitiesBase.textureMemorySizes.getter(uint64_t a1)
{
  uint64_t v3 = *v1;
  Entity.MetricUtilitiesBase.textureMetrics.getter(a1);
  type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics();
  swift_getWitnessTable();
  type metadata accessor for Set();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UInt64]);
  swift_getWitnessTable();
  Sequence.reduce<A>(into:_:)();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t closure #1 in Entity.MetricUtilitiesBase.textureMemorySizes.getter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *a1;
  *a1  = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, v3, v4, isUniquelyReferenced_nonNull_native);
  *a1  = v8;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Entity.MetricUtilitiesBase.textureResolutions.getter(uint64_t a1)
{
  uint64_t v3 = *v1;
  Entity.MetricUtilitiesBase.textureMetrics.getter(a1);
  swift_getTupleTypeMetadata2();
  Dictionary.init()();
  type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics();
  swift_getWitnessTable();
  type metadata accessor for Set();
  type metadata accessor for Dictionary();
  swift_getWitnessTable();
  Sequence.reduce<A>(into:_:)();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t closure #1 in Entity.MetricUtilitiesBase.textureResolutions.getter(uint64_t a1, uint64_t *a2)
{
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
  uint64_t v4 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v12 - v5;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  __n128 v9 = (char *)a2 + *(int *)(type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics() + 40);
  uint64_t v10 = *(void *)(TupleTypeMetadata2 - 8);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v6, v9, TupleTypeMetadata2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, TupleTypeMetadata2);
  v12[0]  = v8;
  v12[1]  = v7;
  type metadata accessor for Dictionary();
  swift_bridgeObjectRetain();
  return Dictionary.subscript.setter();
}

uint64_t Entity.MetricUtilitiesBase.videoItemCount.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  REVideoComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REVideoComponentGetVideoAsset();
    REVideoAssetGetFileAssetCount();
    lazy protocol witness table accessor for type Int and conformance Int();
    return dispatch thunk of BinaryInteger.init<A>(_:)();
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  }
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

uint64_t outlined init with take of (key: AnyHashable, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in Entity.MetricUtilitiesBase.textureMemorySizes.getter(uint64_t *a1, uint64_t *a2)
{
  return closure #1 in Entity.MetricUtilitiesBase.textureMemorySizes.getter(a1, a2);
}

uint64_t partial apply for closure #1 in Entity.MetricUtilitiesBase.textureResolutions.getter(uint64_t a1, uint64_t *a2)
{
  return closure #1 in Entity.MetricUtilitiesBase.textureResolutions.getter(a1, a2);
}

uint64_t base witness table accessor for Equatable in Entity.MetricUtilitiesBase<A>.TextureMetrics()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for Entity.MetricUtilitiesBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Entity.MetricUtilitiesBase.TextureMetrics()
{
  uint64_t v3 = &unk_228339970;
  uint64_t v4 = MEMORY[0x263F8CF70] + 64;
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v2;
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Entity.MetricUtilitiesBase.TextureMetrics(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = v7 + v6;
  unint64_t v9 = ((v7 + v6) & ~v6) + v7 + ((v6 + 24) & ~v6);
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v9 > 0x18)
  {
    uint64_t v12 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v12 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = ~v6;
    uint64_t v14 = a2[1];
    *a1  = *a2;
    a1[1]  = v14;
    id v15 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *id v15 = *v16;
    uint64_t v17 = ((unint64_t)v15 + v6 + 8) & ~v6;
    uint64_t v18 = ((unint64_t)v16 + v6 + 8) & ~v6;
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v19(v17, v18, v4);
    v19((v8 + v17) & v13, (v8 + v18) & v13, v4);
  }
  return a1;
}

uint64_t destroy for Entity.MetricUtilitiesBase.TextureMetrics(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = v5 + 8;
  uint64_t v11 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
  v11(v7, v4);
  unint64_t v8 = (*(void *)(v10 + 56) + v6 + v7) & ~v6;

  return ((uint64_t (*)(unint64_t, uint64_t))v11)(v8, v4);
}

void *initializeWithCopy for Entity.MetricUtilitiesBase.TextureMetrics(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1  = *a2;
  a1[1]  = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  swift_bridgeObjectRetain();
  v8(v11, v12, v7);
  v8((*(void *)(v9 + 48) + v10 + v11) & ~v10, (*(void *)(v9 + 48) + v10 + v12) & ~v10, v7);
  return a1;
}

void *assignWithCopy for Entity.MetricUtilitiesBase.TextureMetrics(void *a1, void *a2, uint64_t a3)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24);
  uint64_t v11 = v9 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = ((unint64_t)v6 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v7 + v12 + 8) & ~v12;
  v10(v13, v14, v8);
  v10((*(void *)(v11 + 40) + v12 + v13) & ~v12, (*(void *)(v11 + 40) + v12 + v14) & ~v12, v8);
  return a1;
}

_OWORD *initializeWithTake for Entity.MetricUtilitiesBase.TextureMetrics(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  uint64_t v9 = v7 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = ((unint64_t)v4 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v5 + v10 + 8) & ~v10;
  v8(v11, v12, v6);
  v8((*(void *)(v9 + 32) + v10 + v11) & ~v10, (*(void *)(v9 + 32) + v10 + v12) & ~v10, v6);
  return a1;
}

void *assignWithTake for Entity.MetricUtilitiesBase.TextureMetrics(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  uint64_t v12 = v10 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = ((unint64_t)v7 + v13 + 8) & ~v13;
  uint64_t v15 = ((unint64_t)v8 + v13 + 8) & ~v13;
  v11(v14, v15, v9);
  v11((*(void *)(v12 + 24) + v13 + v14) & ~v13, (*(void *)(v12 + 24) + v13 + v15) & ~v13, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.MetricUtilitiesBase.TextureMetrics(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v10 = ((v7 + v6) & ~v6) + v7 + ((v6 + 24) & ~v6);
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 8) & ~v6);
      unint64_t v16 = *((void *)a1 + 1);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16)  = -1;
      }
      return (v16 + 1);
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10)  = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10)  = *a1;
        break;
      case 3:
        LODWORD(v10)  = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10)  = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10)  = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v10 | v15) + 1;
}

void storeEnumTagSinglePayload for Entity.MetricUtilitiesBase.TextureMetrics(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v9) & ~v9)
      + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = v10 + ((v9 + 24) & ~v9);
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1  = v18;
          a1[2]  = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1  = v18;
        }
        else
        {
          *a1  = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1  = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11]  = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11]  = v16;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v11]  = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x22811E2B8);
    case 4:
      *(_DWORD *)&a1[v11]  = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v19 = (unsigned char *)((((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9);
          if (v7 >= a2)
          {
            uint64_t v23 = *(void (**)(unint64_t))(v6 + 56);
            unint64_t v24 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
            v23(v24);
          }
          else
          {
            if (v10 <= 3) {
              int v20 = ~(-1 << (8 * v10));
            }
            else {
              int v20 = -1;
            }
            if (v10)
            {
              int v21 = v20 & (~v7 + a2);
              if (v10 <= 3) {
                int v22 = v10;
              }
              else {
                int v22 = 4;
              }
              bzero(v19, v10);
              switch(v22)
              {
                case 2:
                  *(_WORD *)uint64_t v19 = v21;
                  break;
                case 3:
                  *(_WORD *)uint64_t v19 = v21;
                  v19[2]  = BYTE2(v21);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v19 = v21;
                  break;
                default:
                  *uint64_t v19 = v21;
                  break;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1  = a2 ^ 0x80000000;
          *((void *)a1 + 1)  = 0;
        }
        else
        {
          *((void *)a1 + 1)  = a2 - 1;
        }
      }
      return;
  }
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result = specialized _NativeDictionary.startIndex.getter(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v5 = specialized Dictionary.Keys.subscript.getter(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t Entity.ConfigurationCatalog.Configuration.init(id:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3  = result;
  a3[1]  = a2;
  return result;
}

uint64_t Entity.ConfigurationCatalog.Configuration.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSet.init(id:configurations:defaultConfigurationId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  BOOL v12 = (void *)specialized Sequence.compactMap<A>(_:)(a3);
  unsigned int v13 = v12;
  if (!v12[2])
  {
    swift_bridgeObjectRelease();
    if (a5)
    {
      if (!*(void *)(a3 + 16)) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v24 = specialized Collection.first.getter(a3);
      if (!v25)
      {
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(_OWORD *)uint64_t v31 = 0u;
        *(_OWORD *)(v31 + 16)  = 0u;
        *(void *)(v31 + 32)  = 0;
        char v32 = 12;
        goto LABEL_14;
      }
      a4  = v24;
      a5  = v25;
      if (!*(void *)(a3 + 16))
      {
LABEL_13:
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(void *)uint64_t v31 = a4;
        *(void *)(v31 + 8)  = a5;
        *(void *)(v31 + 24)  = 0;
        *(void *)(v31 + 32)  = 0;
        *(void *)(v31 + 16)  = 0;
        char v32 = 10;
LABEL_14:
        *(unsigned char *)(v31 + 40)  = v32;
        swift_willThrow();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
    if (v27)
    {
      uint64_t v28 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v26);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease_n();
      *a6  = v30;
      a6[1]  = v29;
      a6[2]  = a1;
      a6[3]  = a2;
      a6[4]  = a3;
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v15 = v12[4];
  uint64_t v14 = v12[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v13[2];
  swift_bridgeObjectRelease();
  if (*(void *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
    if (v18)
    {
      uint64_t v19 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v17);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
      swift_allocError();
      *(void *)uint64_t v22 = v16;
      *(void *)(v22 + 8)  = v15;
      *(void *)(v22 + 16)  = v14;
      *(void *)(v22 + 24)  = v21;
      *(void *)(v22 + 32)  = v20;
      *(unsigned char *)(v22 + 40)  = 7;
      return swift_willThrow();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSet.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSet.configurations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSet.defaultConfiguration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1  = *v1;
  a1[1]  = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSet.init(id:configurations:defaultConfigurationId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v50 = (void *)MEMORY[0x263F8EE80];
  Swift::Int v13 = *(void *)(a3 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.Configuration]);
  Dictionary.reserveCapacity(_:)(v13);
  uint64_t v14 = v50;
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t result = Entity.ConfigurationCatalog.ConfigurationSet.init(id:configurations:defaultConfigurationId:)(a1, a2, (uint64_t)v14, a4, a5, &v47);
    if (!v7)
    {
      uint64_t v38 = v48;
      long long v39 = v49;
      *(_OWORD *)a6  = v47;
      *(void *)(a6 + 16)  = v38;
      *(_OWORD *)(a6 + 24)  = v39;
    }
    return result;
  }
  uint64_t v41 = a4;
  uint64_t v42 = v6;
  uint64_t v43 = a6;
  uint64_t v44 = a2;
  uint64_t v45 = a5;
  swift_bridgeObjectRetain();
  uint64_t v16 = (uint64_t *)(a3 + 40);
  while (1)
  {
    uint64_t v18 = *(v16 - 1);
    uint64_t v19 = *v16;
    uint64_t v20 = v14[2];
    swift_bridgeObjectRetain();
    if (v20)
    {
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
      char v22 = v21;
      swift_bridgeObjectRelease();
      if (v22)
      {
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(void *)uint64_t v40 = v18;
        *(void *)(v40 + 8)  = v19;
        *(void *)(v40 + 24)  = 0;
        *(void *)(v40 + 32)  = 0;
        *(void *)(v40 + 16)  = 0;
        *(unsigned char *)(v40 + 40)  = 5;
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v47 = v14;
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    uint64_t v26 = v14[2];
    BOOL v27 = (v24 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      break;
    }
    char v29 = v24;
    if (v14[3] >= v28)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v14 = (void *)v47;
        if (v24) {
          goto LABEL_3;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v14 = (void *)v47;
        if (v29) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, isUniquelyReferenced_nonNull_native);
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
      if ((v29 & 1) != (v31 & 1)) {
        goto LABEL_25;
      }
      unint64_t v25 = v30;
      uint64_t v14 = (void *)v47;
      if (v29)
      {
LABEL_3:
        unint64_t v17 = (uint64_t *)(v14[7] + 16 * v25);
        swift_bridgeObjectRelease();
        *unint64_t v17 = v18;
        v17[1]  = v19;
        goto LABEL_4;
      }
    }
    v14[(v25 >> 6) + 8] |= 1 << v25;
    char v32 = (uint64_t *)(v14[6] + 16 * v25);
    *char v32 = v18;
    v32[1]  = v19;
    uint64_t v33 = (uint64_t *)(v14[7] + 16 * v25);
    *uint64_t v33 = v18;
    v33[1]  = v19;
    uint64_t v34 = v14[2];
    BOOL v35 = __OFADD__(v34, 1);
    uint64_t v36 = v34 + 1;
    if (v35) {
      goto LABEL_24;
    }
    v14[2]  = v36;
    swift_bridgeObjectRetain();
LABEL_4:
    v16 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v15)
    {
      swift_bridgeObjectRelease();
      a2  = v44;
      a5  = v45;
      uint64_t v7 = v42;
      a6  = v43;
      a4  = v41;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance Entity.ConfigurationCatalog.ConfigurationSet@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1  = *(void *)(v1 + 16);
  a1[1]  = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSetCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationCollectionCache.init(sourcePath:configurationSetCaches:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = a3;
  v3[2]  = a1;
  void v3[3] = a2;
  v3[4]  = a3;
  if (a3 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain_n();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v33 = v3;
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    uint64_t v33 = v3;
    if (v5)
    {
LABEL_3:
      unint64_t v36 = v4 & 0xC000000000000001;
      int v3 = (void *)MEMORY[0x263F8EE80];
      uint64_t v6 = 4;
      uint64_t v34 = v5;
      uint64_t v35 = v4;
      while (1)
      {
        uint64_t v8 = v6 - 4;
        if (v36)
        {
          uint64_t v9 = MEMORY[0x22A689930](v6 - 4, v4);
          uint64_t v10 = v6 - 3;
          if (__OFADD__(v8, 1)) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(v4 + 8 * v6);
          swift_retain();
          uint64_t v10 = v6 - 3;
          if (__OFADD__(v8, 1))
          {
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
        }
        uint64_t v11 = *(void *)(v9 + 40);
        if (v3[2])
        {
          uint64_t v12 = *(void *)(v9 + 32);
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
          char v14 = v13;
          swift_bridgeObjectRelease();
          if (v14)
          {
            uint64_t v29 = *(void *)(v9 + 32);
            uint64_t v28 = *(void *)(v9 + 40);
            lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
            swift_allocError();
            *(void *)uint64_t v30 = v29;
            *(void *)(v30 + 8)  = v28;
            *(void *)(v30 + 24)  = 0;
            *(void *)(v30 + 32)  = 0;
            *(void *)(v30 + 16)  = 0;
            *(unsigned char *)(v30 + 40)  = 6;
            swift_bridgeObjectRetain();
            swift_willThrow();
            swift_bridgeObjectRelease_n();
            swift_release();
            swift_bridgeObjectRelease();
            char v31 = v33;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_deallocPartialClassInstance();
            return (uint64_t)v31;
          }
          uint64_t v11 = *(void *)(v9 + 40);
        }
        uint64_t v4 = *(void *)(v9 + 32);
        swift_bridgeObjectRetain();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v11);
        uint64_t v18 = v3[2];
        BOOL v19 = (v16 & 1) == 0;
        uint64_t v20 = v18 + v19;
        if (__OFADD__(v18, v19)) {
          goto LABEL_27;
        }
        char v21 = v16;
        if (v3[3] >= v20)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v16) {
              goto LABEL_4;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if (v21) {
              goto LABEL_4;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
          unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v11);
          if ((v21 & 1) != (v23 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v17 = v22;
          if (v21)
          {
LABEL_4:
            uint64_t v7 = v3[7];
            swift_release();
            *(void *)(v7 + 8 * v17)  = v9;
            goto LABEL_5;
          }
        }
        v3[(v17 >> 6) + 8] |= 1 << v17;
        char v24 = (uint64_t *)(v3[6] + 16 * v17);
        *char v24 = v4;
        v24[1]  = v11;
        *(void *)(v3[7] + 8 * v17)  = v9;
        uint64_t v25 = v3[2];
        BOOL v26 = __OFADD__(v25, 1);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_28;
        }
        v3[2]  = v27;
        swift_bridgeObjectRetain();
LABEL_5:
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v6;
        uint64_t v4 = v35;
        if (v10 == v34) {
          goto LABEL_31;
        }
      }
    }
  }
  int v3 = (void *)MEMORY[0x263F8EE80];
LABEL_31:
  swift_bridgeObjectRelease_n();
  char v31 = v33;
  v33[5]  = v3;
  return (uint64_t)v31;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationCollectionCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationMapCache.init(configurationCollectionCaches:)(unint64_t a1)
{
  uint64_t v2 = a1;
  v1[2]  = a1;
  if (a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain_n();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    char v31 = v1;
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    char v31 = v1;
    if (v3)
    {
LABEL_3:
      unint64_t v34 = v2 & 0xC000000000000001;
      uint64_t v1 = (void *)MEMORY[0x263F8EE80];
      uint64_t v4 = 4;
      uint64_t v32 = v3;
      uint64_t v33 = v2;
      while (1)
      {
        uint64_t v6 = v4 - 4;
        if (v34)
        {
          uint64_t v7 = MEMORY[0x22A689930](v4 - 4, v2);
          uint64_t v8 = v4 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(v2 + 8 * v4);
          swift_retain();
          uint64_t v8 = v4 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
        }
        uint64_t v9 = *(void *)(v7 + 24);
        if (v1[2])
        {
          uint64_t v10 = *(void *)(v7 + 16);
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
          char v12 = v11;
          swift_bridgeObjectRelease();
          if (v12)
          {
            uint64_t v27 = *(void *)(v7 + 16);
            uint64_t v26 = *(void *)(v7 + 24);
            lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
            swift_allocError();
            *(void *)uint64_t v28 = v27;
            *(void *)(v28 + 8)  = v26;
            *(void *)(v28 + 24)  = 0;
            *(void *)(v28 + 32)  = 0;
            *(void *)(v28 + 16)  = 0;
            *(unsigned char *)(v28 + 40)  = 9;
            swift_bridgeObjectRetain();
            swift_willThrow();
            swift_bridgeObjectRelease_n();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v29 = v31;
            swift_bridgeObjectRelease();
            swift_deallocPartialClassInstance();
            return (uint64_t)v29;
          }
          uint64_t v9 = *(void *)(v7 + 24);
        }
        uint64_t v2 = *(void *)(v7 + 16);
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v9);
        uint64_t v16 = v1[2];
        BOOL v17 = (v14 & 1) == 0;
        uint64_t v18 = v16 + v17;
        if (__OFADD__(v16, v17)) {
          goto LABEL_27;
        }
        char v19 = v14;
        if (v1[3] >= v18)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v14) {
              goto LABEL_4;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if (v19) {
              goto LABEL_4;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
          unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v9);
          if ((v19 & 1) != (v21 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v15 = v20;
          if (v19)
          {
LABEL_4:
            uint64_t v5 = v1[7];
            swift_release();
            *(void *)(v5 + 8 * v15)  = v7;
            goto LABEL_5;
          }
        }
        v1[(v15 >> 6) + 8] |= 1 << v15;
        unint64_t v22 = (uint64_t *)(v1[6] + 16 * v15);
        *unint64_t v22 = v2;
        v22[1]  = v9;
        *(void *)(v1[7] + 8 * v15)  = v7;
        uint64_t v23 = v1[2];
        BOOL v24 = __OFADD__(v23, 1);
        uint64_t v25 = v23 + 1;
        if (v24) {
          goto LABEL_28;
        }
        v1[2]  = v25;
        swift_bridgeObjectRetain();
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v4;
        uint64_t v2 = v33;
        if (v8 == v32) {
          goto LABEL_31;
        }
      }
    }
  }
  uint64_t v1 = (void *)MEMORY[0x263F8EE80];
LABEL_31:
  swift_bridgeObjectRelease_n();
  uint64_t v29 = v31;
  v31[3]  = v1;
  return (uint64_t)v29;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationCombination.init(entity:configurationSpecifications:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3  = result;
  a3[1]  = a2;
  return result;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationCombination.entity.getter()
{
  return swift_retain();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationCombination.configurationSpecifications.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Entity.ConfigurationCatalog.init(configurationSets:combinations:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for Entity.ConfigurationCatalog.CachedEntityReader();
  swift_allocObject();
  uint64_t result = Entity.ConfigurationCatalog.CachedEntityReader.init(configurationSets:combinations:)(a1, a2);
  if (!v3)
  {
    *a3  = 0;
    a3[1]  = result;
    a3[2]  = &protocol witness table for Entity.ConfigurationCatalog.CachedEntityReader;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  Swift::Int v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  long long v38;
  void *v39;

  uint64_t v4 = v3;
  long long v39 = (void *)MEMORY[0x263F8EE80];
  uint64_t v8 = *(void *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.ConfigurationSet]);
  Dictionary.reserveCapacity(_:)(v8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    type metadata accessor for Entity.ConfigurationCatalog.CachedEntityReader();
    swift_allocObject();
    uint64_t result = Entity.ConfigurationCatalog.CachedEntityReader.init(configurationSets:combinations:)((uint64_t)v39, a2);
    if (!v4)
    {
      *a3  = 0;
      a3[1]  = result;
      a3[2]  = &protocol witness table for Entity.ConfigurationCatalog.CachedEntityReader;
    }
    return result;
  }
  uint64_t v35 = v3;
  unint64_t v36 = a2;
  swift_bridgeObjectRetain();
  uint64_t v10 = (_OWORD *)(a1 + 56);
  while (1)
  {
    char v13 = *((void *)v10 - 3);
    char v12 = *((void *)v10 - 2);
    char v14 = *((void *)v10 - 1);
    uint64_t v38 = *v10;
    unint64_t v15 = v39[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15)
    {
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v14, v38);
      BOOL v17 = v16;
      swift_bridgeObjectRelease();
      if (v17)
      {
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(void *)unint64_t v34 = v14;
        *(void *)(v34 + 8)  = v38;
        *(void *)(v34 + 24)  = 0;
        *(void *)(v34 + 32)  = 0;
        *(void *)(v34 + 16)  = 0;
        *(unsigned char *)(v34 + 40)  = 6;
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v37 = v9;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v19 = v14;
    char v21 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v38);
    unint64_t v22 = v39[2];
    uint64_t v23 = (v20 & 1) == 0;
    BOOL v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      break;
    }
    uint64_t v25 = v20;
    if (v39[3] >= v24)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v20) {
          goto LABEL_3;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v25) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v38);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_25;
      }
      char v21 = v26;
      if (v25)
      {
LABEL_3:
        char v11 = v39[7] + 40 * v21;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)char v11 = v13;
        *(void *)(v11 + 8)  = v12;
        *(void *)(v11 + 16)  = v19;
        *(_OWORD *)(v11 + 24)  = v38;
        goto LABEL_4;
      }
    }
    v39[(v21 >> 6) + 8] |= 1 << v21;
    uint64_t v28 = (uint64_t *)(v39[6] + 16 * v21);
    *uint64_t v28 = v19;
    v28[1]  = v38;
    uint64_t v29 = v39[7] + 40 * v21;
    *(void *)uint64_t v29 = v13;
    *(void *)(v29 + 8)  = v12;
    *(void *)(v29 + 16)  = v19;
    *(_OWORD *)(v29 + 24)  = v38;
    uint64_t v30 = v39[2];
    char v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_24;
    }
    v39[2]  = v32;
    swift_bridgeObjectRetain();
LABEL_4:
    uint64_t v10 = (_OWORD *)((char *)v10 + 40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v37 - 1;
    if (v37 == 1)
    {
      swift_bridgeObjectRelease();
      a2  = v36;
      uint64_t v4 = v35;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Entity.ConfigurationCatalog.write(to:)(uint64_t a1)
{
  *(void *)(v2 + 1000)  = a1;
  *(_OWORD *)(v2 + 1008)  = *(_OWORD *)(v1 + 8);
  type metadata accessor for MainActor();
  *(void *)(v2 + 1024)  = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v2 + 1032)  = v4;
  *(void *)(v2 + 1040)  = v3;
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.write(to:), v4, v3);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v3 = (void *)*v2;
  v3[143]  = a1;
  v3[144]  = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?((uint64_t)(v3 + 83), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v3[130];
    uint64_t v5 = v3[129];
    uint64_t v6 = Entity.ConfigurationCatalog.write(to:);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)(v3 + 83), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    swift_bridgeObjectRelease();
    uint64_t v4 = v3[130];
    uint64_t v5 = v3[129];
    uint64_t v6 = Entity.ConfigurationCatalog.write(to:);
  }
  return MEMORY[0x270FA2498](v6, v5, v4);
}

uint64_t Entity.ConfigurationCatalog.write(to:)()
{
  uint64_t v1 = *(void *)(v0 + 1016);
  uint64_t ObjectType = swift_getObjectType();
  *(void *)(v0 + 1048)  = ObjectType;
  uint64_t v3 = (*(uint64_t (**)(void))(v1 + 8))();
  uint64_t v5 = v4;
  *(void *)(v0 + 1056)  = v3;
  *(void *)(v0 + 1064)  = v4;
  uint64_t v6 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1) + 24);
  swift_bridgeObjectRetain();
  swift_release();
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
    if (v8)
    {
      uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
      *(void *)(v0 + 1072)  = v9;
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = *(void *)(v9 + 32);
      *(void *)(v0 + 1080)  = v10;
      *(void *)(v0 + 968)  = MEMORY[0x263F8EE78];
      if (v10 >> 62) {
        goto LABEL_18;
      }
      uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v12 = swift_bridgeObjectRetain_n();
      uint64_t v73 = (void *)v0;
      if (v11)
      {
        while (v11 >= 1)
        {
          uint64_t v15 = 0;
          uint64_t v16 = 1;
          while (1)
          {
            if ((v10 & 0xC000000000000001) != 0)
            {
              uint64_t v17 = MEMORY[0x22A689930](v15, v10);
            }
            else
            {
              uint64_t v17 = *(void *)(v10 + 8 * v15 + 32);
              swift_retain();
            }
            uint64_t v18 = *(void *)(v17 + 48);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v0 = *(void *)(v18 + 16);
            swift_bridgeObjectRelease();
            Swift::Int v19 = v16 * v0;
            if ((unsigned __int128)(v16 * (__int128)v0) >> 64 != (v16 * v0) >> 63) {
              break;
            }
            ++v15;
            v16 *= v0;
            if (v11 == v15) {
              goto LABEL_20;
            }
          }
          __break(1u);
LABEL_18:
          swift_bridgeObjectRetain_n();
          uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t v11 = v12;
          uint64_t v73 = (void *)v0;
          if (!v12) {
            goto LABEL_19;
          }
        }
        __break(1u);
        goto LABEL_94;
      }
LABEL_19:
      Swift::Int v19 = 1;
LABEL_20:
      uint64_t v23 = (uint64_t)v73;
      swift_bridgeObjectRelease();
      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v19, 0);
      specialized Array._endMutation()();
      v73[122]  = MEMORY[0x263F8EE88];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
      Set.reserveCapacity(_:)(v19);
      v73[123]  = MEMORY[0x263F8EE80];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
      Dictionary.reserveCapacity(_:)(v19);
      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v24 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      v73[136]  = v24;
      uint64_t v25 = (void *)MEMORY[0x263F8EE78];
      if (v24)
      {
        uint64_t v77 = (void *)MEMORY[0x263F8EE78];
        uint64_t v12 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24 & ~(v24 >> 63), 0);
        if (v24 < 0)
        {
LABEL_94:
          __break(1u);
          return MEMORY[0x270FA2498](v12, v13, v14);
        }
        uint64_t v26 = 0;
        uint64_t v27 = v77;
        unint64_t v28 = v10 & 0xC000000000000001;
        uint64_t v25 = (void *)MEMORY[0x263F8EE78];
        do
        {
          if (v28)
          {
            MEMORY[0x22A689930](v26, v10);
            swift_unknownObjectRelease();
          }
          unint64_t v30 = v77[2];
          unint64_t v29 = v77[3];
          if (v30 >= v29 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
            uint64_t v25 = (void *)MEMORY[0x263F8EE78];
          }
          ++v26;
          v77[2]  = v30 + 1;
          v77[v30 + 4]  = 0;
        }
        while (v24 != v26);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24 & ~(v24 >> 63), 0);
        uint64_t v31 = 0;
        do
        {
          if (v28)
          {
            MEMORY[0x22A689930](v31, v10);
            swift_unknownObjectRelease();
          }
          unint64_t v33 = v25[2];
          unint64_t v32 = v25[3];
          if (v33 >= v32 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
          }
          ++v31;
          v25[2]  = v33 + 1;
          unint64_t v34 = &v25[2 * v33];
          v34[4]  = 0;
          v34[5]  = 0xE000000000000000;
        }
        while (v24 != v31);
      }
      else
      {
        uint64_t v27 = (void *)MEMORY[0x263F8EE78];
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_92:
      }
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      long long v75 = v25;
      *(void *)(v23 + 1096)  = v27;
      *(void *)(v23 + 1104)  = 0;
      uint64_t v35 = *(void *)(v23 + 1088);
      if (v35)
      {
        unint64_t v36 = 0;
        long long v76 = (void *)(v23 + 992);
        uint64_t v25 = (void *)MEMORY[0x263F8EE80];
        char v72 = 1;
LABEL_42:
        if ((uint64_t)v36 > v35) {
          uint64_t v35 = v36;
        }
        uint64_t v71 = v35;
        uint64_t v37 = 16 * v36;
        while (1)
        {
          if (v71 == v36)
          {
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
            goto LABEL_92;
          }
          uint64_t v38 = *(void *)(v23 + 1080);
          if ((v38 & 0xC000000000000001) != 0)
          {
            uint64_t v27 = (void *)MEMORY[0x22A689930](v36);
          }
          else
          {
            if (v36 >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_91;
            }
            uint64_t v27 = *(void **)(v38 + 8 * v36 + 32);
            swift_retain();
          }
          uint64_t v39 = *(void *)(v23 + 1096);
          if (v36 >= *(void *)(v39 + 16)) {
            goto LABEL_85;
          }
          unint64_t v40 = *(void *)(v39 + 8 * v36 + 32);
          if ((v40 & 0x8000000000000000) != 0) {
            goto LABEL_86;
          }
          uint64_t v41 = v27[7];
          if (v40 >= *(void *)(v41 + 16)) {
            goto LABEL_87;
          }
          uint64_t v74 = v37;
          uint64_t v42 = v41 + 16 * v40;
          uint64_t v44 = *(void *)(v42 + 32);
          uint64_t v43 = *(void *)(v42 + 40);
          uint64_t v23 = v27[4];
          uint64_t v45 = v27[5];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *long long v76 = v25;
          unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v45);
          uint64_t v49 = v25[2];
          BOOL v50 = (v47 & 1) == 0;
          uint64_t v51 = v49 + v50;
          if (__OFADD__(v49, v50)) {
            goto LABEL_88;
          }
          char v52 = v47;
          if (v25[3] >= v51)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, isUniquelyReferenced_nonNull_native);
            unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v45);
            if ((v52 & 1) != (v54 & 1))
            {
              return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            unint64_t v48 = v53;
          }
          uint64_t v25 = (void *)*v76;
          if (v52)
          {
            long long v55 = (void *)(v25[7] + 16 * v48);
            swift_bridgeObjectRelease();
            *long long v55 = v44;
            v55[1]  = v43;
          }
          else
          {
            v25[(v48 >> 6) + 8] |= 1 << v48;
            char v56 = (uint64_t *)(v25[6] + 16 * v48);
            *char v56 = v23;
            v56[1]  = v45;
            Swift::String v57 = (void *)(v25[7] + 16 * v48);
            *Swift::String v57 = v44;
            v57[1]  = v43;
            uint64_t v58 = v25[2];
            BOOL v59 = __OFADD__(v58, 1);
            uint64_t v60 = v58 + 1;
            if (v59) {
              goto LABEL_90;
            }
            v25[2]  = v60;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v23 = (uint64_t)v73;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v75 = specialized _ArrayBuffer._consumeAndCreateNew()(v75);
          }
          if (v36 >= v75[2]) {
            goto LABEL_89;
          }
          uint64_t v61 = (char *)v75 + v74;
          *((void *)v61 + 4)  = v44;
          *((void *)v61 + 5)  = v43;
          swift_bridgeObjectRelease();
          if (v72)
          {
            if (v27[2] == v44 && v27[3] == v43)
            {
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              if ((v62 & 1) == 0)
              {
                char v72 = 0;
                char v63 = 0;
                uint64_t v35 = v73[136];
                if (v35 - 1 == v36++) {
                  goto LABEL_78;
                }
                goto LABEL_42;
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          ++v36;
          uint64_t v37 = v74 + 16;
          if (v36 == v73[136])
          {
            char v63 = v72;
            goto LABEL_78;
          }
        }
      }
      char v63 = 1;
      uint64_t v25 = (void *)MEMORY[0x263F8EE80];
LABEL_78:
      *(void *)(v23 + 1120)  = v75;
      *(unsigned char *)(v23 + 498)  = v63 & 1;
      *(void *)(v23 + 1112)  = v25;
      uint64_t v65 = *(void *)(v23 + 1064);
      uint64_t v66 = *(void *)(v23 + 1056);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : String])>);
      uint64_t v67 = swift_allocObject();
      *(_OWORD *)(v67 + 16)  = xmmword_22830EC60;
      *(void *)(v67 + 32)  = v66;
      *(void *)(v67 + 40)  = v65;
      *(void *)(v67 + 48)  = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v68 = specialized Dictionary.init(dictionaryLiteral:)(v67);
      *(void *)(v23 + 1128)  = v68;
      *(void *)(v23 + 664)  = 1;
      *(_OWORD *)(v23 + 672)  = 0u;
      *(_OWORD *)(v23 + 688)  = 0u;
      *(_OWORD *)(v23 + 704)  = 0u;
      *(_OWORD *)(v23 + 720)  = 0u;
      *(_OWORD *)(v23 + 736)  = 0u;
      uint64_t v69 = (int8x16_t *)swift_task_alloc();
      *(void *)(v23 + 1136)  = v69;
      v69->i64[0]  = v23;
      v69->i64[1]  = (uint64_t)Entity.ConfigurationCatalog.write(to:);
      uint64_t v70 = *(void *)(v23 + 1048);
      v69[8]  = vextq_s8(*(int8x16_t *)(v23 + 1008), *(int8x16_t *)(v23 + 1008), 8uLL);
      v69[7].i64[0]  = v23 + 664;
      v69[7].i64[1]  = v70;
      v69[6].i64[1]  = v68;
      uint64_t v12 = (uint64_t)Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:);
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      return MEMORY[0x270FA2498](v12, v13, v14);
    }
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
  swift_allocError();
  *(void *)uint64_t v20 = v3;
  *(void *)(v20 + 8)  = v5;
  *(void *)(v20 + 24)  = 0;
  *(void *)(v20 + 32)  = 0;
  *(void *)(v20 + 16)  = 0;
  *(unsigned char *)(v20 + 40)  = 0;
  swift_willThrow();
  char v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

{
  uint64_t v0;
  Swift::Int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  Swift::Int v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t *v85;
  uint64_t *v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  uint64_t (*v99)();
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int8x16_t *v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v117  = v0;
  v107  = v0 + 816;
  v108  = v0 + 856;
  v112  = v0 + 976;
  v114  = (uint64_t *)(v0 + 992);
  REEntityGetName();
  uint64_t v1 = String.init(cString:)();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 1104);
  do
  {
    char v8 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      char v8 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v8)
    {
      v115  = (void *)v4;
      uint64_t v9 = *(void *)v112;
      if (!*(void *)(*(void *)v112 + 16)) {
        goto LABEL_23;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      unint64_t v10 = Hasher._finalize()();
      uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
      uint64_t v12 = v10 & ~v11;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v13 = *(void *)(v9 + 48);
      uint64_t v14 = (void *)(v13 + 16 * v12);
      uint64_t v15 = *v14 == v1 && v14[1] == v3;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v16 = ~v11;
        while (1)
        {
          uint64_t v12 = (v12 + 1) & v16;
          if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
            break;
          }
          uint64_t v17 = (void *)(v13 + 16 * v12);
          uint64_t v18 = *v17 == v1 && v17[1] == v3;
          if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_2;
          }
        }
LABEL_22:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_23:
        Swift::Int v19 = *(unsigned __int8 *)(v0 + 498);
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)((Swift::Int *)(v0 + 936), v1, v3);
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        REEntitySetName();
        swift_release();
        RENetworkMarkEntityMetadataDirty();
        uint64_t v6 = *(void *)(v0 + 968);
        uint64_t v4 = (unint64_t)v6 >> 62;
        if (v19 == 1)
        {
          uint64_t v20 = swift_retain();
          uint64_t v23 = 0;
          if (v4) {
            goto LABEL_121;
          }
        }
        else
        {
          if (v4) {
            goto LABEL_120;
          }
          uint64_t v23 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v20 = swift_retain();
        }
        goto LABEL_28;
      }
LABEL_2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = (uint64_t)v115;
    }
    *(void *)(v0 + 920)  = 0x5F656E656353;
    *(void *)(v0 + 928)  = 0xE600000000000000;
    *(void *)(v0 + 960)  = v4;
    v5._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v6 = v0 + 920;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v1 = *(void *)(v0 + 920);
    uint64_t v3 = *(void *)(v0 + 928);
    unint64_t v7 = __OFADD__(v4++, 1);
  }
  while (!v7);
  __break(1u);
  while (1)
  {
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
    do
    {
      __break(1u);
LABEL_120:
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v20 = swift_bridgeObjectRelease();
      if (v4)
      {
LABEL_121:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v20 = swift_bridgeObjectRelease();
        if (v4 < v23)
        {
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
          return MEMORY[0x270FA2498](v20, v21, v22);
        }
      }
      else
      {
LABEL_28:
        uint64_t v4 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v4 < v23) {
          goto LABEL_122;
        }
      }
    }
    while (v23 < 0);
    uint64_t v4 = *(void *)(v0 + 1120);
    uint64_t v24 = *(void *)(v0 + 1096);
    specialized Array.replaceSubrange<A>(_:with:)(v23, v23, *(void *)(v0 + 1144));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v25 = *(void *)(v0 + 984);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v116  = v25;
    *(void *)(v0 + 984)  = 0x8000000000000000;
    uint64_t v6 = (uint64_t)&v116;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, v1, v3, isUniquelyReferenced_nonNull_native);
    *(void *)(v0 + 984)  = v116;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void *)(v24 + 16);
    if (!v27) {
      break;
    }
    unint64_t v28 = v27 + 3;
    while (1)
    {
      unint64_t v29 = *(void *)(v0 + 1096);
      if ((unint64_t)(v28 - 4) >= *(void *)(v29 + 16)) {
        break;
      }
      unint64_t v30 = *(void *)(v29 + 8 * v28);
      uint64_t v1 = v30 + 1;
      if (__OFADD__(v30, 1)) {
        goto LABEL_108;
      }
      uint64_t v31 = *(void *)(v0 + 1080);
      if ((v31 & 0xC000000000000001) != 0)
      {
        unint64_t v32 = MEMORY[0x22A689930]();
      }
      else
      {
        if ((unint64_t)(v28 - 4) >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_116;
        }
        unint64_t v32 = *(void *)(v31 + 8 * v28);
        swift_retain();
      }
      unint64_t v33 = v28 - 3;
      uint64_t v4 = *(void *)(v32 + 40);
      unint64_t v34 = *(void *)(v32 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v6 = *(void *)(v34 + 16);
      uint64_t v20 = swift_bridgeObjectRelease();
      uint64_t v35 = *(void *)(*(void *)(v0 + 1096) + 16);
      if (v1 < v6)
      {
        if (v33 > v35) {
          goto LABEL_124;
        }
        *(void *)(v29 + 8 * v28)  = v1;
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v4 = *(void *)(v0 + 1120);
        uint64_t v6 = *(void *)(v0 + 1112);
        *(void *)(v0 + 1104)  = v115;
        uint64_t v66 = *(void *)(v0 + 1088);
        if (!v66)
        {
          v92  = 1;
LABEL_99:
          *(void *)(v0 + 1120)  = v4;
          *(unsigned char *)(v0 + 498)  = v92 & 1;
          *(void *)(v0 + 1112)  = v6;
          v100  = *(void *)(v0 + 1064);
          v101  = *(void *)(v0 + 1056);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : String])>);
          v102  = swift_allocObject();
          *(_OWORD *)(v102 + 16)  = xmmword_22830EC60;
          *(void *)(v102 + 32)  = v101;
          *(void *)(v102 + 40)  = v100;
          *(void *)(v102 + 48)  = v6;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v103  = specialized Dictionary.init(dictionaryLiteral:)(v102);
          *(void *)(v0 + 1128)  = v103;
          *(void *)(v0 + 664)  = 1;
          *(_OWORD *)(v0 + 672)  = 0u;
          *(_OWORD *)(v0 + 688)  = 0u;
          *(_OWORD *)(v0 + 704)  = 0u;
          *(_OWORD *)(v0 + 720)  = 0u;
          *(_OWORD *)(v0 + 736)  = 0u;
          v104  = (int8x16_t *)swift_task_alloc();
          *(void *)(v0 + 1136)  = v104;
          v104->i64[0]  = v0;
          v104->i64[1]  = (uint64_t)Entity.ConfigurationCatalog.write(to:);
          v105  = *(void *)(v0 + 1048);
          v104[8]  = vextq_s8(*(int8x16_t *)(v0 + 1008), *(int8x16_t *)(v0 + 1008), 8uLL);
          v104[7].i64[0]  = v0 + 664;
          v104[7].i64[1]  = v105;
          v104[6].i64[1]  = v103;
          v99  = Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:);
          goto LABEL_100;
        }
        uint64_t v67 = 0;
        v110  = 1;
LABEL_61:
        if ((uint64_t)v67 > v66) {
          uint64_t v66 = v67;
        }
        v109  = v66;
        unint64_t v68 = 16 * v67;
        while (v109 != v67)
        {
          uint64_t v69 = *(void *)(v0 + 1080);
          if ((v69 & 0xC000000000000001) != 0)
          {
            uint64_t v70 = (void *)MEMORY[0x22A689930](v67);
          }
          else
          {
            if (v67 >= *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_118;
            }
            uint64_t v70 = (void *)swift_retain();
          }
          uint64_t v71 = *(void *)(v0 + 1096);
          if (v67 >= *(void *)(v71 + 16)) {
            goto LABEL_111;
          }
          char v72 = *(void *)(v71 + 8 * v67 + 32);
          if ((v72 & 0x8000000000000000) != 0) {
            goto LABEL_112;
          }
          uint64_t v73 = v70[7];
          if (v72 >= *(void *)(v73 + 16)) {
            goto LABEL_113;
          }
          v111  = v70;
          v113  = v68;
          v115  = (void *)v4;
          uint64_t v74 = v73 + 16 * v72;
          uint64_t v3 = *(void *)(v74 + 32);
          long long v75 = *(void *)(v74 + 40);
          long long v76 = v70[4];
          uint64_t v77 = v70[5];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          uint64_t v78 = swift_isUniquelyReferenced_nonNull_native();
          *v114  = v6;
          uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v77);
          v80  = *(void *)(v6 + 16);
          v81  = (v79 & 1) == 0;
          v82  = v80 + v81;
          if (__OFADD__(v80, v81)) {
            goto LABEL_114;
          }
          uint64_t v1 = v79;
          if (*(void *)(v6 + 24) >= v82)
          {
            if ((v78 & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v82, v78);
            v83  = specialized __RawDictionaryStorage.find<A>(_:)(v76, v77);
            if ((v1 & 1) != (v84 & 1))
            {
              return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            uint64_t v4 = v83;
          }
          uint64_t v6 = *v114;
          if (v1)
          {
            v85  = (unint64_t *)(*(void *)(v6 + 56) + 16 * v4);
            swift_bridgeObjectRelease();
            *v85  = v3;
            v85[1]  = v75;
          }
          else
          {
            *(void *)(v6 + 8 * ((unint64_t)v4 >> 6) + 64) |= 1 << v4;
            v86  = (uint64_t *)(*(void *)(v6 + 48) + 16 * v4);
            *v86  = v76;
            v86[1]  = v77;
            v87  = (unint64_t *)(*(void *)(v6 + 56) + 16 * v4);
            *v87  = v3;
            v87[1]  = v75;
            v88  = *(void *)(v6 + 16);
            unint64_t v7 = __OFADD__(v88, 1);
            v89  = v88 + 1;
            if (v7) {
              goto LABEL_117;
            }
            *(void *)(v6 + 16)  = v89;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v4 = (uint64_t)v115;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v115);
          }
          if (v67 >= *(void *)(v4 + 16)) {
            goto LABEL_115;
          }
          v90  = v4 + v113;
          *(void *)(v90 + 32)  = v3;
          *(void *)(v90 + 40)  = v75;
          swift_bridgeObjectRelease();
          if (v110)
          {
            if (v111[2] == v3 && v111[3] == v75)
            {
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              v91  = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              if ((v91 & 1) == 0)
              {
                v110  = 0;
                v92  = 0;
                uint64_t v66 = *(void *)(v0 + 1088);
                uint64_t v15 = v66 - 1 == v67++;
                if (v15) {
                  goto LABEL_99;
                }
                goto LABEL_61;
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          ++v67;
          unint64_t v68 = v113 + 16;
          if (v67 == *(void *)(v0 + 1088))
          {
            v92  = v110;
            goto LABEL_99;
          }
        }
        goto LABEL_110;
      }
      if (v33 > v35) {
        goto LABEL_109;
      }
      *(void *)(v29 + 8 * v28--)  = 0;
      if (v33 <= 1) {
        goto LABEL_41;
      }
    }
  }
LABEL_41:
  swift_release();
  unint64_t v36 = *(void *)(v0 + 1088);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v37, v107);
  uint64_t v38 = *(void *)(v0 + 968);
  *(void *)(v0 + 952)  = MEMORY[0x263F8EE80];
  uint64_t v39 = swift_task_alloc();
  *(void *)(v39 + 16)  = v107;
  *(void *)(v39 + 24)  = v0 + 952;
  swift_bridgeObjectRetain();
  unint64_t v40 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in static __REAssetBundle.__init(elements:assetService:), v39, v38);
  swift_task_dealloc();
  uint64_t v41 = *(void *)(v0 + 952);
  outlined init with copy of __REAssetService(v107, v108);
  __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v40, v108, v41, 0, (uint64_t *)(v0 + 752));
  swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + 1216)  = 0;
  *(unsigned char *)(v0 + 497)  = 1;
  *(unsigned char *)(v0 + 1208)  = 1;
  uint64_t v42 = *(void *)(v0 + 984);
  *(void *)(v0 + 1160)  = v42;
  if (v36)
  {
    uint64_t v43 = *(void *)(v0 + 1088);
    uint64_t v44 = MEMORY[0x263F8EE78];
    v116  = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    uint64_t v20 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43 & ~(v43 >> 63), 0);
    if (v43 < 1) {
      goto LABEL_123;
    }
    uint64_t v45 = 0;
    char v46 = v116;
    do
    {
      char v47 = *(void *)(v0 + 1080);
      if ((v47 & 0xC000000000000001) != 0)
      {
        unint64_t v48 = MEMORY[0x22A689930](v45);
      }
      else
      {
        unint64_t v48 = *(void *)(v47 + 8 * v45 + 32);
        swift_retain();
      }
      BOOL v50 = *(void *)(v48 + 32);
      uint64_t v49 = *(void *)(v48 + 40);
      swift_bridgeObjectRetain();
      swift_release();
      v116  = v46;
      char v52 = *(void *)(v46 + 16);
      uint64_t v51 = *(void *)(v46 + 24);
      if (v52 >= v51 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
        char v46 = v116;
      }
      unint64_t v53 = *(void *)(v0 + 1088);
      ++v45;
      *(void *)(v46 + 16)  = v52 + 1;
      char v54 = v46 + 16 * v52;
      *(void *)(v54 + 32)  = v50;
      *(void *)(v54 + 40)  = v49;
    }
    while (v45 != v53);
    long long v55 = *(void *)(v0 + 1088);
    v116  = v44;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55, 0);
    char v56 = 0;
    Swift::String v57 = v116;
    do
    {
      uint64_t v58 = *(void *)(v0 + 1080);
      if ((v58 & 0xC000000000000001) != 0)
      {
        BOOL v59 = MEMORY[0x22A689930](v56);
      }
      else
      {
        BOOL v59 = *(void *)(v58 + 8 * v56 + 32);
        swift_retain();
      }
      uint64_t v61 = *(void *)(v59 + 16);
      uint64_t v60 = *(void *)(v59 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      v116  = v57;
      char v63 = *(void *)(v57 + 16);
      char v62 = *(void *)(v57 + 24);
      if (v63 >= v62 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
        Swift::String v57 = v116;
      }
      uint64_t v64 = *(void *)(v0 + 1088);
      ++v56;
      *(void *)(v57 + 16)  = v63 + 1;
      uint64_t v65 = v57 + 16 * v63;
      *(void *)(v65 + 32)  = v61;
      *(void *)(v65 + 40)  = v60;
    }
    while (v56 != v64);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v46 = MEMORY[0x263F8EE78];
    Swift::String v57 = MEMORY[0x263F8EE78];
  }
  *(void *)(v0 + 1176)  = v57;
  *(void *)(v0 + 1168)  = v46;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + 176)  = 1;
  *(void *)(v0 + 184)  = 1;
  *(unsigned char *)(v0 + 192)  = 0;
  *(void *)(v0 + 200)  = 0;
  *(_DWORD *)(v0 + 208)  = 16777217;
  *(_OWORD *)(v0 + 216)  = xmmword_228333C40;
  *(void *)(v0 + 232)  = 0;
  *(unsigned char *)(v0 + 244)  = 0;
  *(_DWORD *)(v0 + 240)  = 0;
  *(void *)(v0 + 248)  = 0;
  *(unsigned char *)(v0 + 256)  = 1;
  *(_WORD *)(v0 + 257)  = 1;
  *(void *)(v0 + 264)  = v46;
  *(void *)(v0 + 272)  = v57;
  *(void *)(v0 + 280)  = v42;
  *(_OWORD *)(v0 + 288)  = 0u;
  *(_OWORD *)(v0 + 304)  = 0u;
  *(void *)(v0 + 320)  = 0;
  *(unsigned char *)(v0 + 328)  = 1;
  v93  = *(_OWORD *)(v0 + 224);
  v94  = *(_OWORD *)(v0 + 256);
  v95  = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 80)  = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 96)  = v94;
  v96  = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 48)  = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 64)  = v93;
  *(_OWORD *)(v0 + 16)  = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 32)  = v96;
  v97  = *(_OWORD *)(v0 + 288);
  v98  = *(_OWORD *)(v0 + 304);
  *(_OWORD *)(v0 + 153)  = *(_OWORD *)(v0 + 313);
  *(_OWORD *)(v0 + 128)  = v97;
  *(_OWORD *)(v0 + 144)  = v98;
  *(_OWORD *)(v0 + 112)  = v95;
  outlined retain of __REAssetBundle.ExportOptions(v0 + 176);
  v99  = Entity.ConfigurationCatalog.write(to:);
LABEL_100:
  uint64_t v20 = (uint64_t)v99;
  char v21 = 0;
  unint64_t v22 = 0;
  return MEMORY[0x270FA2498](v20, v21, v22);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[125];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[148]  = v2;
  v2[2]  = v0 + 94;
  v2[3]  = v1;
  v2[4]  = v0 + 2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[149]  = v3;
  *uint64_t v3 = v0;
  uint64_t v4 = MEMORY[0x263F8EE60];
  v3[1]  = Entity.ConfigurationCatalog.write(to:);
  return MEMORY[0x270FA2360](v3, 0, 0, 0xD000000000000016, 0x8000000228359780, partial apply for closure #1 in static Entity.WriteHelper.write(bundle:to:with:), v2, v4 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1200)  = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Entity.ConfigurationCatalog.write(to:);
  }
  else {
    uint64_t v2 = Entity.ConfigurationCatalog.write(to:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  outlined release of __REAssetBundle.ExportOptions(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 1040);
  uint64_t v2 = *(void *)(v0 + 1032);
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.write(to:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  long long v4;
  uint64_t v5;

  uint64_t v4 = *(_OWORD *)(v0 + 1168);
  uint64_t v1 = *(void *)(v0 + 1160);
  swift_release();
  swift_release();
  outlined destroy of __REAssetBundle(v0 + 752);
  __swift_destroy_boxed_opaque_existential_1(v0 + 816);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + 336)  = 1;
  *(_DWORD *)(v0 + 337)  = *(_DWORD *)(v0 + 169);
  *(_DWORD *)(v0 + 340)  = *(_DWORD *)(v0 + 172);
  *(void *)(v0 + 344)  = 1;
  *(unsigned char *)(v0 + 352)  = *(unsigned char *)(v0 + 1216);
  *(_DWORD *)(v0 + 353)  = *(_DWORD *)(v0 + 329);
  *(_DWORD *)(v0 + 356)  = *(_DWORD *)(v0 + 332);
  *(void *)(v0 + 360)  = 0;
  *(_WORD *)(v0 + 368)  = 1;
  *(unsigned char *)(v0 + 370)  = 0;
  *(unsigned char *)(v0 + 371)  = *(unsigned char *)(v0 + 497);
  *(void *)(v0 + 376)  = 0;
  *(_OWORD *)(v0 + 384)  = xmmword_2283399A0;
  *(unsigned char *)(v0 + 404)  = 0;
  *(_DWORD *)(v0 + 400)  = 0;
  *(_WORD *)(v0 + 405)  = *(_WORD *)(v0 + 494);
  *(unsigned char *)(v0 + 407)  = *(unsigned char *)(v0 + 496);
  *(void *)(v0 + 408)  = 0;
  *(unsigned char *)(v0 + 416)  = *(unsigned char *)(v0 + 1208);
  *(_WORD *)(v0 + 417)  = 1;
  *(_DWORD *)(v0 + 419)  = *(_DWORD *)(v0 + 489);
  *(unsigned char *)(v0 + 423)  = *(unsigned char *)(v0 + 493);
  *(_OWORD *)(v0 + 424)  = v4;
  *(void *)(v0 + 440)  = v1;
  *(_OWORD *)(v0 + 448)  = 0u;
  *(_OWORD *)(v0 + 464)  = 0u;
  *(void *)(v0 + 480)  = 0;
  *(unsigned char *)(v0 + 488)  = 1;
  outlined release of __REAssetBundle.ExportOptions(v0 + 336);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  outlined release of __REAssetBundle.ExportOptions(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 1040);
  uint64_t v2 = *(void *)(v0 + 1032);
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.write(to:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  long long v4;
  uint64_t v5;

  uint64_t v4 = *(_OWORD *)(v0 + 1168);
  uint64_t v1 = *(void *)(v0 + 1160);
  swift_release();
  swift_release();
  outlined destroy of __REAssetBundle(v0 + 752);
  __swift_destroy_boxed_opaque_existential_1(v0 + 816);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + 504)  = 1;
  *(_DWORD *)(v0 + 505)  = *(_DWORD *)(v0 + 169);
  *(_DWORD *)(v0 + 508)  = *(_DWORD *)(v0 + 172);
  *(void *)(v0 + 512)  = 1;
  *(unsigned char *)(v0 + 520)  = *(unsigned char *)(v0 + 1216);
  *(_DWORD *)(v0 + 521)  = *(_DWORD *)(v0 + 329);
  *(_DWORD *)(v0 + 524)  = *(_DWORD *)(v0 + 332);
  *(void *)(v0 + 528)  = 0;
  *(_WORD *)(v0 + 536)  = 1;
  *(unsigned char *)(v0 + 538)  = 0;
  *(unsigned char *)(v0 + 539)  = *(unsigned char *)(v0 + 497);
  *(_OWORD *)(v0 + 544)  = xmmword_228333C40;
  *(void *)(v0 + 560)  = 0;
  *(unsigned char *)(v0 + 572)  = 0;
  *(_DWORD *)(v0 + 568)  = 0;
  *(_WORD *)(v0 + 573)  = *(_WORD *)(v0 + 494);
  *(unsigned char *)(v0 + 575)  = *(unsigned char *)(v0 + 496);
  *(void *)(v0 + 576)  = 0;
  *(unsigned char *)(v0 + 584)  = *(unsigned char *)(v0 + 1208);
  *(_WORD *)(v0 + 585)  = 1;
  *(_DWORD *)(v0 + 587)  = *(_DWORD *)(v0 + 489);
  *(unsigned char *)(v0 + 591)  = *(unsigned char *)(v0 + 493);
  *(_OWORD *)(v0 + 592)  = v4;
  *(void *)(v0 + 608)  = v1;
  *(_OWORD *)(v0 + 616)  = 0u;
  *(_OWORD *)(v0 + 632)  = 0u;
  *(void *)(v0 + 648)  = 0;
  *(unsigned char *)(v0 + 656)  = 1;
  outlined release of __REAssetBundle.ExportOptions(v0 + 504);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[16]  = a4;
  v5[17]  = v4;
  v5[14]  = a2;
  v5[15]  = a3;
  v5[13]  = a1;
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:), 0, 0);
}

uint64_t Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:)()
{
  outlined init with copy of (Int, URL)(*(void *)(v0 + 112), v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(void *)(v0 + 16) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  }
  else
  {
    int v1 = *(unsigned __int8 *)(v0 + 32);
    outlined destroy of Entity.ConfigurationCatalog.LoadOptions(v0 + 16);
    if (v1 == 1)
    {
      type metadata accessor for MainActor();
      *(void *)(v0 + 144)  = static MainActor.shared.getter();
      uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v4 = v3;
      uint64_t v5 = Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:);
      goto LABEL_6;
    }
  }
  type metadata accessor for MainActor();
  *(void *)(v0 + 152)  = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v4 = v6;
  uint64_t v5 = Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:);
LABEL_6:
  return MEMORY[0x270FA2498](v5, v2, v4);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  swift_release();
  type metadata accessor for AnchorEntity();
  uint64_t v9 = v0[16];
  swift_allocObject();
  int v1 = Entity.init()();
  v0[20]  = v1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 24) + **(int **)(v9 + 24));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[21]  = v2;
  *uint64_t v2 = v0;
  v2[1]  = Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:);
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[13];
  return v8(v1, v6, v4, v5, v3);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  swift_release();
  type metadata accessor for Entity();
  uint64_t v9 = v0[16];
  swift_allocObject();
  int v1 = Entity.init()();
  v0[20]  = v1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 24) + **(int **)(v9 + 24));
  uint64_t v2 = (void *)swift_task_alloc();
  v0[21]  = v2;
  *uint64_t v2 = v0;
  v2[1]  = Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:);
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[13];
  return v8(v1, v6, v4, v5, v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[22]  = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:), 0, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v4 = v2[20];
    return v3(v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t key path getter for Entity.ConfigurationCatalog.LoadOptions.preImportCallback : Entity.ConfigurationCatalog.LoadOptions@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16)  = v3;
    *(void *)(v5 + 24)  = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> (@error @owned Error);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2  = v6;
  a2[1]  = v5;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
}

uint64_t key path setter for Entity.ConfigurationCatalog.LoadOptions.preImportCallback : Entity.ConfigurationCatalog.LoadOptions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16)  = v3;
    *(void *)(v5 + 24)  = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Swift.AnyObject) -> (@out (), @error @owned Error);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v7);
  *a2  = (uint64_t)v6;
  a2[1]  = v5;
  return result;
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.preImportCallback.getter()
{
  uint64_t v1 = *v0;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(*v0);
  return v1;
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.preImportCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?(*v2);
  *uint64_t v2 = a1;
  v2[1]  = a2;
  return result;
}

uint64_t (*Entity.ConfigurationCatalog.LoadOptions.preImportCallback.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.requestAnchor.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.requestAnchor.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16)  = result;
  return result;
}

uint64_t (*Entity.ConfigurationCatalog.LoadOptions.requestAnchor.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.entityLoadOptions.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of (Int, URL)(v1 + 24, a1, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.entityLoadOptions.setter(uint64_t a1)
{
  return outlined assign with take of Entity.__LoadOptions?(a1, v1 + 24);
}

uint64_t (*Entity.ConfigurationCatalog.LoadOptions.entityLoadOptions.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double Entity.ConfigurationCatalog.LoadOptions.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(void *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 16)  = 0;
  *(void *)(a1 + 24)  = 0;
  *(void *)(a1 + 32)  = 0;
  *(void *)(a1 + 40)  = 0;
  *(void *)(a1 + 48)  = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 56)  = 0u;
  *(_OWORD *)(a1 + 72)  = 0u;
  return result;
}

uint64_t static Entity.ConfigurationCatalog.resolveRealityFileURL(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v15 - v8;
  type metadata accessor for RealityFileLoadInformationResolver();
  static RealityFileLoadInformationResolver.resolve(url:)(a1, (uint64_t)v9);
  outlined init with take of RealityFileLoadInformation?((uint64_t)v9, (uint64_t)v6);
  Information  = type metadata accessor for RealityFileLoadInformation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(Information - 8) + 48))(v6, 1, Information) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for RealityFileLoadInformation?);
    uint64_t v11 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a2, 1, 1, v11);
  }
  else
  {
    uint64_t v13 = type metadata accessor for URL();
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(a2, v6, v13);
    outlined destroy of RealityFileLoadInformation((uint64_t)v6);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
}

uint64_t Entity.ConfigurationCatalog.init(realityFileUrl:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[14]  = a2;
  v3[15]  = a3;
  v3[13]  = a1;
  uint64_t v4 = type metadata accessor for URL();
  v3[16]  = v4;
  v3[17]  = *(void *)(v4 - 8);
  v3[18]  = swift_task_alloc();
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.init(realityFileUrl:options:), 0, 0);
}

uint64_t Entity.ConfigurationCatalog.init(realityFileUrl:options:)()
{
  uint64_t v1 = v0[15];
  (*(void (**)(void, void, void))(v0[17] + 16))(v0[18], v0[14], v0[16]);
  outlined init with copy of (Int, URL)(v1, (uint64_t)(v0 + 2), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  type metadata accessor for Entity.ConfigurationCatalog.RealityFileConfigurationReader();
  swift_allocObject();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[19]  = v2;
  *uint64_t v2 = v0;
  v2[1]  = Entity.ConfigurationCatalog.init(realityFileUrl:options:);
  uint64_t v3 = v0[18];
  return Entity.ConfigurationCatalog.RealityFileConfigurationReader.init(contentsOf:options:)(v3, (uint64_t)(v0 + 2));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[21];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[16];
  uint64_t v5 = (void *)v0[13];
  uint64_t v4 = v0[14];
  outlined destroy of BodyTrackingComponent?(v0[15], &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  *uint64_t v5 = 0;
  v5[1]  = v1;
  v5[2]  = &protocol witness table for Entity.ConfigurationCatalog.RealityFileConfigurationReader;
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[14];
  outlined destroy of BodyTrackingComponent?(v0[15], &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t Entity.ConfigurationCatalog.init(realityFileUrl:options:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 160)  = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = Entity.ConfigurationCatalog.init(realityFileUrl:options:);
  }
  else
  {
    *(void *)(v4 + 168)  = a1;
    uint64_t v5 = Entity.ConfigurationCatalog.init(realityFileUrl:options:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15]  = a3;
  v4[16]  = a4;
  v4[13]  = a1;
  v4[14]  = a2;
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:), 0, 0);
}

uint64_t Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:)()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = (void *)v0[14];
  outlined init with copy of (Int, URL)(v0[16], (uint64_t)(v0 + 2), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader();
  swift_allocObject();
  id v3 = v2;
  swift_unknownObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[17]  = v4;
  *uint64_t v4 = v0;
  v4[1]  = Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:);
  uint64_t v5 = (void *)v0[14];
  return Entity.ConfigurationCatalog.USDConfigurationReader.init(importSession:importSessionSwiftObject:options:)(v5, v1, (uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 152);
  id v3 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v4 = *(void **)(v0 + 104);

  outlined destroy of BodyTrackingComponent?(v2, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  *uint64_t v4 = v3;
  v4[1]  = v1;
  _OWORD v4[2] = &protocol witness table for Entity.ConfigurationCatalog.USDConfigurationReader;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[16];
  uint64_t v2 = (void *)v0[14];
  swift_unknownObjectRelease();

  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 144)  = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:);
  }
  else
  {
    *(void *)(v4 + 152)  = a1;
    uint64_t v5 = Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t Entity.ConfigurationCatalog.configurationSets.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  uint64_t v6 = *(void *)(v3 + 24);
  if (!*(void *)(v6 + 16) || (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5), (v8 & 1) == 0))
  {
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE80];
  }
  uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v42 = (void *)MEMORY[0x263F8EE80];
  Swift::Int v10 = *(void *)(*(void *)(v9 + 40) + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.ConfigurationSet]);
  Dictionary.reserveCapacity(_:)(v10);
  unint64_t v11 = *(void *)(v9 + 32);
  if (v11 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain_n();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12)
  {
LABEL_30:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v13 = v42;
LABEL_31:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_5:
  unint64_t v38 = v11;
  unint64_t v39 = v11 & 0xC000000000000001;
  uint64_t v13 = v42;
  uint64_t v14 = 4;
  uint64_t v37 = v12;
  while (1)
  {
    uint64_t v16 = v14 - 4;
    if (v39)
    {
      uint64_t v17 = (void *)MEMORY[0x22A689930](v14 - 4, v11);
      uint64_t v18 = v14 - 3;
      if (__OFADD__(v16, 1)) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v17 = *(void **)(v11 + 8 * v14);
      swift_retain();
      uint64_t v18 = v14 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
    uint64_t v40 = v18;
    uint64_t v19 = v17[4];
    unint64_t v11 = v17[5];
    uint64_t v20 = v17[3];
    uint64_t v41 = v17[2];
    uint64_t v21 = v17[6];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v11);
    uint64_t v25 = v42[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      goto LABEL_27;
    }
    char v28 = v23;
    if (v42[3] < v27) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v23) {
        goto LABEL_6;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v28)
      {
LABEL_6:
        uint64_t v15 = (void *)(v42[7] + 40 * v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *uint64_t v15 = v41;
        v15[1]  = v20;
        v15[2]  = v19;
        v15[3]  = v11;
        v15[4]  = v21;
        goto LABEL_7;
      }
    }
LABEL_20:
    v42[(v24 >> 6) + 8] |= 1 << v24;
    uint64_t v31 = (uint64_t *)(v42[6] + 16 * v24);
    *uint64_t v31 = v19;
    v31[1]  = v11;
    unint64_t v32 = (void *)(v42[7] + 40 * v24);
    *unint64_t v32 = v41;
    v32[1]  = v20;
    v32[2]  = v19;
    v32[3]  = v11;
    v32[4]  = v21;
    uint64_t v33 = v42[2];
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_28;
    }
    v42[2]  = v35;
    swift_bridgeObjectRetain();
LABEL_7:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v14;
    unint64_t v11 = v38;
    if (v40 == v37)
    {
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
  unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v11);
  if ((v28 & 1) == (v30 & 1))
  {
    unint64_t v24 = v29;
    if (v28) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 128)  = a1;
  *(void *)(v3 + 136)  = a2;
  *(void *)(v3 + 144)  = *(void *)v2;
  *(_OWORD *)(v3 + 152)  = *(_OWORD *)(v2 + 8);
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:), 0, 0);
}

uint64_t Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:)()
{
  outlined init with copy of (Int, URL)(*(void *)(v0 + 136), v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(void *)(v0 + 16) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  }
  else
  {
    int v1 = *(unsigned __int8 *)(v0 + 32);
    outlined destroy of Entity.ConfigurationCatalog.LoadOptions(v0 + 16);
    if (v1 == 1)
    {
      type metadata accessor for MainActor();
      *(void *)(v0 + 168)  = static MainActor.shared.getter();
      uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v4 = v3;
      uint64_t v5 = Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:);
      goto LABEL_6;
    }
  }
  type metadata accessor for MainActor();
  *(void *)(v0 + 176)  = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v4 = v6;
  uint64_t v5 = Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:);
LABEL_6:
  return MEMORY[0x270FA2498](v5, v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  long long v4;
  long long v5;
  long long v7;
  uint64_t v8;

  swift_release();
  type metadata accessor for AnchorEntity();
  int v1 = *(void *)(v0 + 144);
  swift_allocObject();
  unint64_t v7 = *(_OWORD *)(v0 + 152);
  uint64_t v2 = Entity.init()();
  *(void *)(v0 + 184)  = v2;
  *(void *)(v0 + 104)  = v1;
  *(_OWORD *)(v0 + 112)  = v7;
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 192)  = v3;
  *(void *)uint64_t v3 = v0;
  *(void *)(v3 + 8)  = Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:);
  uint64_t v5 = *(_OWORD *)(v0 + 112);
  uint64_t v4 = *(_OWORD *)(v0 + 128);
  *(void *)(v3 + 184)  = v2;
  *(_OWORD *)(v3 + 192)  = v4;
  *(_OWORD *)(v3 + 208)  = v5;
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  long long v4;
  long long v5;
  long long v7;
  uint64_t v8;

  swift_release();
  type metadata accessor for Entity();
  int v1 = *(void *)(v0 + 144);
  swift_allocObject();
  unint64_t v7 = *(_OWORD *)(v0 + 152);
  uint64_t v2 = Entity.init()();
  *(void *)(v0 + 184)  = v2;
  *(void *)(v0 + 104)  = v1;
  *(_OWORD *)(v0 + 112)  = v7;
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 192)  = v3;
  *(void *)uint64_t v3 = v0;
  *(void *)(v3 + 8)  = Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:);
  uint64_t v5 = *(_OWORD *)(v0 + 112);
  uint64_t v4 = *(_OWORD *)(v0 + 128);
  *(void *)(v3 + 184)  = v2;
  *(_OWORD *)(v3 + 192)  = v4;
  *(_OWORD *)(v3 + 208)  = v5;
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[25]  = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:), 0, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v4 = v2[23];
    return v3(v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  int v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 192)  = a2;
  *(void *)(v4 + 200)  = a3;
  *(void *)(v4 + 184)  = a1;
  *(_OWORD *)(v4 + 208)  = *(_OWORD *)(v3 + 8);
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:), 0, 0);
}

uint64_t Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:)()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  *(void *)(v0 + 224)  = v3;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 24);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6);
    if (v9)
    {
      uint64_t v35 = v4;
      uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
      *(void *)(v0 + 232)  = v10;
      swift_retain();
      swift_bridgeObjectRelease();
      unint64_t v11 = *(void *)(v10 + 32);
      swift_bridgeObjectRetain();
      uint64_t v12 = swift_bridgeObjectRetain();
      uint64_t v13 = specialized Set.init<A>(_:)(v12);
      uint64_t v14 = MEMORY[0x263F8EE80];
      *(void *)(v0 + 160)  = v13;
      *(void *)(v0 + 168)  = v14;
      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        Swift::Int v15 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        Swift::Int v15 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v16 = *(void **)(v0 + 192);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
      Dictionary.reserveCapacity(_:)(v15);
      swift_bridgeObjectRetain();
      uint64_t v17 = (void *)swift_bridgeObjectRetain();
      uint64_t v18 = specialized Sequence.reduce<A>(into:_:)(v17, v11, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 168)  = v18;
      uint64_t v19 = *(void *)(v0 + 160);
      *(void *)(v0 + 240)  = v19;
      if (*(void *)(v19 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 176)  = v19;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
        lazy protocol witness table accessor for type Set<String> and conformance Set<A>();
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v20 = Sequence<>.joined(separator:)();
        uint64_t v22 = v21;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(void *)uint64_t v23 = v20;
        *(void *)(v23 + 8)  = v22;
        *(void *)(v23 + 24)  = 0;
        *(void *)(v23 + 32)  = 0;
        *(void *)(v23 + 16)  = 0;
        *(unsigned char *)(v23 + 40)  = 2;
        swift_willThrow();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_10:
        uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
        return v25();
      }
      uint64_t v38 = *(void *)(v0 + 216);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : String])>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16)  = xmmword_22830EC60;
      *(void *)(inited + 32)  = v35;
      *(void *)(inited + 40)  = v6;
      *(void *)(inited + 48)  = v18;
      unint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      *(void *)(v0 + 248)  = v33;
      unint64_t v36 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 + 24)
                                                                                         + **(int **)(v38 + 24));
      BOOL v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 256)  = v34;
      *BOOL v34 = v0;
      v34[1]  = Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:);
      uint64_t v28 = *(void *)(v0 + 216);
      uint64_t v31 = *(void *)(v0 + 200);
      uint64_t v29 = *(void *)(v0 + 184);
      unint64_t v30 = v33;
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v0 + 192) + 16))
  {
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(void *)uint64_t v24 = v4;
    *(void *)(v24 + 8)  = v6;
    *(void *)(v24 + 24)  = 0;
    *(void *)(v24 + 32)  = 0;
    *(void *)(v24 + 16)  = 0;
    *(unsigned char *)(v24 + 40)  = 0;
    swift_willThrow();
    swift_release();
    goto LABEL_10;
  }
  uint64_t v37 = *(void *)(v0 + 216);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16)  = 1;
  *(_OWORD *)(v0 + 24)  = 0u;
  *(_OWORD *)(v0 + 40)  = 0u;
  *(_OWORD *)(v0 + 56)  = 0u;
  *(_OWORD *)(v0 + 72)  = 0u;
  *(_OWORD *)(v0 + 88)  = 0u;
  unint64_t v36 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 + 24)
                                                                                     + **(int **)(v37 + 24));
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 272)  = v27;
  void *v27 = v0;
  v27[1]  = Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:);
  uint64_t v28 = *(void *)(v0 + 216);
  uint64_t v29 = *(void *)(v0 + 184);
  unint64_t v30 = 0;
  uint64_t v31 = v0 + 16;
LABEL_15:
  return v36(v29, v30, v31, ObjectType, v28);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 264)  = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:);
  }
  else {
    uint64_t v2 = Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 280)  = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:);
  }
  else {
    uint64_t v2 = Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t Entity.ConfigurationCatalog.ConfigurableEntityError.errorDescription.getter()
{
  outlined init with take of Entity.ConfigurationCatalog.ConfigurableEntityError(v0, &v35);
  unint64_t result = 0xD000000000000042;
  switch(v39)
  {
    case 1:
      uint64_t v3 = (void *)*((void *)&v35 + 1);
      uint64_t v2 = v35;
      unint64_t v34 = 0;
      _StringGuts.grow(_:)(67);
      unint64_t v4 = 0xD00000000000003FLL;
      uint64_t v5 = "Expected a configuration specifications mapped to source path '";
      goto LABEL_7;
    case 2:
      uint64_t v3 = (void *)*((void *)&v35 + 1);
      uint64_t v2 = v35;
      unint64_t v34 = 0;
      _StringGuts.grow(_:)(55);
      unint64_t v4 = 0xD000000000000033;
      uint64_t v5 = "These are not registered configuration set names: '";
      goto LABEL_7;
    case 3:
      Swift::String v6 = (Swift::String)v35;
      unint64_t v34 = 0;
      _StringGuts.grow(_:)(60);
      v7._countAndFlagsBits  = 0xD000000000000017;
      v7._object  = (void *)0x8000000228359BE0;
      String.append(_:)(v7);
      String.append(_:)(v6);
      unint64_t v8 = 0xD000000000000023;
      char v9 = "' does not have any configurations.";
      goto LABEL_18;
    case 4:
      uint64_t v3 = (void *)*((void *)&v35 + 1);
      uint64_t v2 = v35;
      unint64_t v34 = 0;
      _StringGuts.grow(_:)(58);
      unint64_t v4 = 0xD000000000000036;
      uint64_t v5 = "No configuration was specified for configuration set '";
LABEL_7:
      unint64_t v10 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      goto LABEL_14;
    case 5:
      uint64_t v12 = (void *)*((void *)&v35 + 1);
      uint64_t v11 = v35;
      unint64_t v34 = 0;
      _StringGuts.grow(_:)(52);
      unint64_t v13 = 0xD000000000000018;
      uint64_t v14 = "The configuration name '";
      goto LABEL_10;
    case 6:
      uint64_t v12 = (void *)*((void *)&v35 + 1);
      uint64_t v11 = v35;
      unint64_t v34 = 0;
      _StringGuts.grow(_:)(56);
      unint64_t v13 = 0xD00000000000001CLL;
      uint64_t v14 = "The configuration set name '";
LABEL_10:
      unint64_t v15 = (unint64_t)(v14 - 32) | 0x8000000000000000;
      String.append(_:)(*(Swift::String *)&v13);
      v16._countAndFlagsBits  = v11;
      v16._object  = v12;
      String.append(_:)(v16);
      unint64_t v8 = 0xD00000000000001ALL;
      char v9 = "' was used more than once.";
      goto LABEL_18;
    case 7:
      uint64_t v17 = *((void *)&v35 + 1);
      uint64_t v18 = v36;
      uint64_t v2 = v37;
      uint64_t v3 = v38;
      unint64_t v34 = 0;
      _StringGuts.grow(_:)(105);
      v19._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      unint64_t v20 = 0xD00000000000004FLL;
      uint64_t v21 = " key(s) map to configurations with ids that don't match those keys, including '";
      goto LABEL_13;
    case 8:
      uint64_t v17 = *((void *)&v35 + 1);
      uint64_t v18 = v36;
      uint64_t v2 = v37;
      uint64_t v3 = v38;
      unint64_t v34 = 0;
      _StringGuts.grow(_:)(109);
      v22._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      unint64_t v20 = 0xD000000000000053;
      uint64_t v21 = " key(s) map to configuration sets with ids that don't match those keys, including '";
LABEL_13:
      unint64_t v23 = (unint64_t)(v21 - 32) | 0x8000000000000000;
      String.append(_:)(*(Swift::String *)&v20);
      v24._countAndFlagsBits  = v17;
      v24._object  = v18;
      String.append(_:)(v24);
      unint64_t v10 = 0x8000000228359B10;
      unint64_t v4 = 0xD000000000000012;
LABEL_14:
      String.append(_:)(*(Swift::String *)&v4);
      goto LABEL_15;
    case 9:
      Swift::String v27 = (Swift::String)v35;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      unint64_t v34 = 0xD000000000000011;
      String.append(_:)(v27);
      unint64_t v8 = 0xD000000000000019;
      char v9 = "' is used multiple times.";
      goto LABEL_18;
    case 10:
      Swift::String v28 = (Swift::String)v35;
      unint64_t v34 = 0;
      _StringGuts.grow(_:)(79);
      v29._countAndFlagsBits  = 0xD000000000000022;
      v29._object  = (void *)0x8000000228359A10;
      String.append(_:)(v29);
      String.append(_:)(v28);
      unint64_t v8 = 0xD00000000000002BLL;
      char v9 = "' does not match any of the configurations.";
LABEL_18:
      unint64_t v26 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      goto LABEL_19;
    case 11:
      unint64_t v34 = 0;
      _StringGuts.grow(_:)(129);
      v30._countAndFlagsBits  = 0xD00000000000002FLL;
      v30._object  = (void *)0x8000000228359940;
      String.append(_:)(v30);
      v31._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._countAndFlagsBits  = 0xD00000000000004DLL;
      v32._object  = (void *)0x8000000228359970;
      String.append(_:)(v32);
      v33._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      unint64_t v8 = 46;
      unint64_t v26 = 0xE100000000000000;
      goto LABEL_19;
    case 12:
      return result;
    default:
      uint64_t v3 = (void *)*((void *)&v35 + 1);
      uint64_t v2 = v35;
      _StringGuts.grow(_:)(49);
      swift_bridgeObjectRelease();
      unint64_t v34 = 0xD00000000000002DLL;
LABEL_15:
      v25._countAndFlagsBits  = v2;
      v25._object  = v3;
      String.append(_:)(v25);
      unint64_t v8 = 11815;
      unint64_t v26 = 0xE200000000000000;
LABEL_19:
      String.append(_:)(*(Swift::String *)&v8);
      return v34;
  }
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance Entity.ConfigurationCatalog.ConfigurableEntityError()
{
  outlined init with take of Entity.ConfigurationCatalog.ConfigurableEntityError(v0, v2);
  return Entity.ConfigurationCatalog.ConfigurableEntityError.errorDescription.getter();
}

uint64_t Entity.init(from:configurations:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 128)  = a2;
  *(void *)(v3 + 136)  = v2;
  *(void *)(v3 + 144)  = *(void *)a1;
  *(_OWORD *)(v3 + 152)  = *(_OWORD *)(a1 + 8);
  type metadata accessor for MainActor();
  *(void *)(v3 + 168)  = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 176)  = v5;
  *(void *)(v3 + 184)  = v4;
  return MEMORY[0x270FA2498](Entity.init(from:configurations:), v5, v4);
}

uint64_t Entity.init(from:configurations:)()
{
  *(void *)(v0 + 104)  = *(void *)(v0 + 144);
  *(_OWORD *)(v0 + 112)  = *(_OWORD *)(v0 + 152);
  *(void *)(v0 + 16)  = 1;
  *(_OWORD *)(v0 + 24)  = 0u;
  *(_OWORD *)(v0 + 40)  = 0u;
  *(_OWORD *)(v0 + 56)  = 0u;
  *(_OWORD *)(v0 + 72)  = 0u;
  *(_OWORD *)(v0 + 88)  = 0u;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 192)  = v1;
  void *v1 = v0;
  v1[1]  = Entity.init(from:configurations:);
  uint64_t v2 = *(void *)(v0 + 128);
  return Entity.init(from:configurations:loadOptions:)((uint64_t *)(v0 + 104), v2, v0 + 16);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 208);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Entity.init(from:configurations:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 200)  = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[22];
    uint64_t v6 = v4[23];
    uint64_t v7 = Entity.init(from:configurations:);
  }
  else
  {
    v4[26]  = a1;
    uint64_t v5 = v4[22];
    uint64_t v6 = v4[23];
    uint64_t v7 = Entity.init(from:configurations:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t Entity.init(from:configurations:loadOptions:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 40)  = a2;
  *(void *)(v4 + 48)  = a3;
  uint64_t v5 = *a1;
  *(void *)(v4 + 56)  = v3;
  *(void *)(v4 + 64)  = v5;
  *(_OWORD *)(v4 + 72)  = *(_OWORD *)(a1 + 1);
  type metadata accessor for MainActor();
  *(void *)(v4 + 88)  = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v4 + 96)  = v7;
  *(void *)(v4 + 104)  = v6;
  return MEMORY[0x270FA2498](Entity.init(from:configurations:loadOptions:), v7, v6);
}

uint64_t Entity.init(from:configurations:loadOptions:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 40);
  long long v8 = *(_OWORD *)(v0 + 72);
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(v0 + 56) + 232))();
  *(void *)(v0 + 112)  = v3;
  *(void *)(v0 + 16)  = v1;
  *(_OWORD *)(v0 + 24)  = v8;
  if (v2)
  {
    unint64_t v4 = *(void *)(v0 + 40);
    swift_retain();
  }
  else
  {
    swift_retain();
    unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  *(void *)(v0 + 120)  = v4;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 128)  = v5;
  *(void *)uint64_t v5 = v0;
  *(void *)(v5 + 8)  = Entity.init(from:configurations:loadOptions:);
  uint64_t v6 = *(void *)(v0 + 48);
  *(void *)(v5 + 192)  = v4;
  *(void *)(v5 + 200)  = v6;
  *(void *)(v5 + 184)  = v3;
  *(_OWORD *)(v5 + 208)  = *(_OWORD *)(v0 + 24);
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:), 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 136)  = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 96);
    unint64_t v4 = *(void *)(v2 + 104);
    uint64_t v5 = Entity.init(from:configurations:loadOptions:);
  }
  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v3 = *(void *)(v2 + 96);
    unint64_t v4 = *(void *)(v2 + 104);
    uint64_t v5 = Entity.init(from:configurations:loadOptions:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = v0[6];
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v3 = v0[14];
  return v2(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t static Entity.load(from:configurations:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 40)  = a2;
  *(void *)(v3 + 48)  = a3;
  *(void *)(v3 + 56)  = *(void *)a1;
  *(_OWORD *)(v3 + 64)  = *(_OWORD *)(a1 + 8);
  type metadata accessor for MainActor();
  *(void *)(v3 + 80)  = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 88)  = v5;
  *(void *)(v3 + 96)  = v4;
  return MEMORY[0x270FA2498](static Entity.load(from:configurations:loadOptions:), v5, v4);
}

uint64_t static Entity.load(from:configurations:loadOptions:)()
{
  unint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 16)  = *(void *)(v0 + 56);
  *(_OWORD *)(v0 + 24)  = *(_OWORD *)(v0 + 64);
  if (v1) {
    unint64_t v2 = v1;
  }
  else {
    unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  *(void *)(v0 + 104)  = v2;
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 112)  = v3;
  *(void *)uint64_t v3 = v0;
  *(void *)(v3 + 8)  = static Entity.load(from:configurations:loadOptions:);
  uint64_t v4 = *(void *)(v0 + 48);
  *(void *)(v3 + 128)  = v2;
  *(void *)(v3 + 136)  = v4;
  *(void *)(v3 + 144)  = *(void *)(v0 + 16);
  *(_OWORD *)(v3 + 152)  = *(_OWORD *)(v0 + 24);
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  unint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 128);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static Entity.load(from:configurations:loadOptions:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 120)  = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[11];
    uint64_t v6 = v4[12];
    uint64_t v7 = static Entity.load(from:configurations:loadOptions:);
  }
  else
  {
    swift_bridgeObjectRelease();
    v4[16]  = a1;
    uint64_t v5 = v4[11];
    uint64_t v6 = v4[12];
    uint64_t v7 = static Entity.load(from:configurations:loadOptions:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t specialized _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  uint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void partial apply for closure #1 in static __REAssetBundle.__init(elements:assetService:)(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  closure #1 in static __REAssetBundle.__init(elements:assetService:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in static Entity.WriteHelper.write(bundle:to:with:)(uint64_t a1)
{
  return closure #1 in static Entity.WriteHelper.write(bundle:to:with:)(a1, *(void *)(v1 + 16), *(char **)(v1 + 24), *(_OWORD **)(v1 + 32));
}

uint64_t outlined assign with take of Entity.__LoadOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.__LoadOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of RealityFileLoadInformation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of RealityFileLoadInformation(uint64_t a1)
{
  Information  = type metadata accessor for RealityFileLoadInformation(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(Information - 8) + 8))(a1, Information);
  return a1;
}

uint64_t destroy for Entity.ConfigurationCatalog()
{
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for Entity.ConfigurationCatalog(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for Entity.ConfigurationCatalog(void *a1, void *a2)
{
  *a1  = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v4 = a2[2];
  a1[1]  = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2]  = v4;
  return a1;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 16)  = v4;
  return a1;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog()
{
  return &type metadata for Entity.ConfigurationCatalog;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.Configuration()
{
  return &type metadata for Entity.ConfigurationCatalog.Configuration;
}

uint64_t destroy for Entity.ConfigurationCatalog.ConfigurationSet()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Entity.ConfigurationCatalog.ConfigurationSet(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  uint64_t v4 = a2[3];
  a1[2]  = a2[2];
  a1[3]  = v4;
  a1[4]  = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Entity.ConfigurationCatalog.ConfigurationSet(void *a1, void *a2)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2]  = a2[2];
  a1[3]  = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4]  = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog.ConfigurationSet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.ConfigurationSet()
{
  return &type metadata for Entity.ConfigurationCatalog.ConfigurationSet;
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.ConfigurationSetCache()
{
  return self;
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.ConfigurationCollectionCache()
{
  return self;
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.ConfigurationMapCache()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for Entity.ConfigurationCatalog.ConfigurationCombination(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Entity.ConfigurationCatalog.ConfigurationCombination(void *a1, void *a2)
{
  *a1  = *a2;
  swift_retain();
  swift_release();
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for Entity.ConfigurationCatalog.ConfigurationCombination(_OWORD *a1, _OWORD *a2)
{
  *a1  = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.ConfigurationCombination()
{
  return &type metadata for Entity.ConfigurationCatalog.ConfigurationCombination;
}

void *destroy for Entity.ConfigurationCatalog.LoadOptions(void *result)
{
  uint64_t v1 = result;
  if (*result) {
    unint64_t result = (void *)swift_release();
  }
  uint64_t v2 = v1[6];
  if (v2)
  {
    if (v2 == 1) {
      return result;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 3));
  }

  return (void *)swift_release();
}

uint64_t initializeWithCopy for Entity.ConfigurationCatalog.LoadOptions(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1  = *(void *)a2;
    *(void *)(a1 + 8)  = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1  = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  char v5 = (_OWORD *)(a1 + 24);
  unsigned int v6 = (_OWORD *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 48);
  if (!v7)
  {
    long long v10 = *(_OWORD *)(a2 + 40);
    *char v5 = *v6;
    *(_OWORD *)(a1 + 40)  = v10;
    *(void *)(a1 + 56)  = *(void *)(a2 + 56);
LABEL_9:
    *(void *)(a1 + 64)  = *(void *)(a2 + 64);
    *(_WORD *)(a1 + 72)  = *(_WORD *)(a2 + 72);
    *(void *)(a1 + 80)  = *(void *)(a2 + 80);
    swift_retain();
    return a1;
  }
  if (v7 != 1)
  {
    uint64_t v11 = *(void *)(a2 + 56);
    *(void *)(a1 + 48)  = v7;
    *(void *)(a1 + 56)  = v11;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
    goto LABEL_9;
  }
  long long v8 = *(_OWORD *)(a2 + 40);
  *char v5 = *v6;
  *(_OWORD *)(a1 + 40)  = v8;
  long long v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72)  = v9;
  return a1;
}

uint64_t assignWithCopy for Entity.ConfigurationCatalog.LoadOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *(void *)a1  = v4;
      *(void *)(a1 + 8)  = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *(void *)a1  = v4;
    *(void *)(a1 + 8)  = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1  = *(_OWORD *)a2;
LABEL_8:
  *(unsigned char *)(a1 + 16)  = *((unsigned char *)a2 + 16);
  uint64_t v7 = (_OWORD *)(a1 + 24);
  long long v8 = (long long *)(a2 + 3);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = a2[6];
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      outlined destroy of Entity.__LoadOptions(a1 + 24);
      long long v14 = *(_OWORD *)(a2 + 9);
      long long v16 = *v8;
      long long v15 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72)  = v14;
      *uint64_t v7 = v16;
      *(_OWORD *)(a1 + 40)  = v15;
      return a1;
    }
    if (v9)
    {
      if (v10)
      {
        __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), a2 + 3);
LABEL_24:
        *(void *)(a1 + 64)  = a2[8];
        *(unsigned char *)(a1 + 72)  = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73)  = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80)  = a2[10];
        swift_retain();
        swift_release();
        return a1;
      }
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    }
    else if (v10)
    {
      *(void *)(a1 + 48)  = v10;
      *(void *)(a1 + 56)  = a2[7];
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 24, (uint64_t)(a2 + 3));
      goto LABEL_24;
    }
    long long v19 = *v8;
    long long v20 = *(_OWORD *)(a2 + 5);
    *(void *)(a1 + 56)  = a2[7];
    *uint64_t v7 = v19;
    *(_OWORD *)(a1 + 40)  = v20;
    goto LABEL_24;
  }
  if (!v10)
  {
    long long v17 = *v8;
    long long v18 = *(_OWORD *)(a2 + 5);
    *(void *)(a1 + 56)  = a2[7];
    *uint64_t v7 = v17;
    *(_OWORD *)(a1 + 40)  = v18;
LABEL_19:
    *(void *)(a1 + 64)  = a2[8];
    *(unsigned char *)(a1 + 72)  = *((unsigned char *)a2 + 72);
    *(unsigned char *)(a1 + 73)  = *((unsigned char *)a2 + 73);
    *(void *)(a1 + 80)  = a2[10];
    swift_retain();
    return a1;
  }
  if (v10 != 1)
  {
    *(void *)(a1 + 48)  = v10;
    *(void *)(a1 + 56)  = a2[7];
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 24, (uint64_t)(a2 + 3));
    goto LABEL_19;
  }
  long long v11 = *v8;
  long long v12 = *(_OWORD *)(a2 + 5);
  long long v13 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 72)  = v13;
  *uint64_t v7 = v11;
  *(_OWORD *)(a1 + 40)  = v12;
  return a1;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog.LoadOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(void *)a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *(void *)a1  = v4;
      *(void *)(a1 + 8)  = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *(void *)a1  = v4;
    *(void *)(a1 + 8)  = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1  = *(_OWORD *)a2;
LABEL_8:
  *(unsigned char *)(a1 + 16)  = *((unsigned char *)a2 + 16);
  uint64_t v7 = (_OWORD *)(a1 + 24);
  long long v8 = a2 + 3;
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9 == 1)
  {
LABEL_11:
    long long v10 = *(_OWORD *)(a2 + 5);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 40)  = v10;
    long long v11 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 72)  = v11;
    return a1;
  }
  if (a2[6] == 1)
  {
    outlined destroy of Entity.__LoadOptions(a1 + 24);
    goto LABEL_11;
  }
  if (v9) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  long long v12 = *(_OWORD *)(a2 + 5);
  *uint64_t v7 = *v8;
  *(_OWORD *)(a1 + 40)  = v12;
  *(void *)(a1 + 56)  = a2[7];
  *(void *)(a1 + 64)  = a2[8];
  *(unsigned char *)(a1 + 72)  = *((unsigned char *)a2 + 72);
  *(unsigned char *)(a1 + 73)  = *((unsigned char *)a2 + 73);
  *(void *)(a1 + 80)  = a2[10];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.ConfigurationCatalog.LoadOptions(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 88)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.ConfigurationCatalog.LoadOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88)  = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.LoadOptions()
{
  return &type metadata for Entity.ConfigurationCatalog.LoadOptions;
}

uint64_t outlined copy of Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a6 <= 0xAu)
  {
    if (((1 << a6) & 0x67F) != 0)
    {
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1)
{
  return outlined consume of Entity.ConfigurationCatalog.ConfigurableEntityError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
}

uint64_t outlined consume of Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a6 <= 0xAu)
  {
    if (((1 << a6) & 0x67F) != 0)
    {
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 40);
  outlined copy of Entity.ConfigurationCatalog.ConfigurableEntityError(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  *(unsigned char *)(a1 + 40)  = v8;
  return a1;
}

uint64_t assignWithCopy for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 40);
  outlined copy of Entity.ConfigurationCatalog.ConfigurableEntityError(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  unsigned __int8 v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40)  = v8;
  outlined consume of Entity.ConfigurationCatalog.ConfigurableEntityError(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v10;
  *(void *)(a1 + 32)  = v3;
  unsigned __int8 v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40)  = v4;
  outlined consume of Entity.ConfigurationCatalog.ConfigurableEntityError(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF4 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 0xC) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 40)  = 0;
    *(void *)uint64_t result = a2 - 244;
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 41)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 41)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40)  = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) <= 0xBu) {
    return *(unsigned __int8 *)(a1 + 40);
  }
  else {
    return (*(_DWORD *)a1 + 12);
  }
}

uint64_t destructiveInjectEnumTag for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(void *)uint64_t result = a2 - 12;
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    LOBYTE(a2)  = 12;
  }
  *(unsigned char *)(result + 40)  = a2;
  return result;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.ConfigurableEntityError()
{
  return &type metadata for Entity.ConfigurationCatalog.ConfigurableEntityError;
}

_OWORD *outlined init with take of Entity.ConfigurationCatalog.ConfigurableEntityError(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25)  = *(long long *)((char *)a1 + 25);
  *a2  = v2;
  a2[1]  = v3;
  return a2;
}

uint64_t sub_2281257F8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Swift.AnyObject) -> (@out (), @error @owned Error)(uint64_t a1)
{
  long long v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> (@error @owned Error)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t specialized Dictionary.Keys.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 48) + 16 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(void *a1, unint64_t a2, void *a3)
{
  unint64_t v4 = a2;
  if (a2 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    return (uint64_t)a1;
  }
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_29;
  }
LABEL_3:
  unint64_t v34 = v4;
  unint64_t v35 = v4 & 0xC000000000000001;
  uint64_t v7 = 4;
  uint64_t v32 = v6;
  Swift::String v33 = a3;
  while (1)
  {
    uint64_t v9 = v7 - 4;
    if (v35)
    {
      long long v10 = (void *)MEMORY[0x22A689930](v7 - 4, v4);
      uint64_t v11 = v7 - 3;
      if (__OFADD__(v9, 1)) {
        goto LABEL_25;
      }
    }
    else
    {
      long long v10 = *(void **)(v4 + 8 * v7);
      swift_retain();
      uint64_t v11 = v7 - 3;
      if (__OFADD__(v9, 1))
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    uint64_t v36 = v11;
    uint64_t v12 = v10[4];
    uint64_t v13 = v10[5];
    uint64_t v14 = a3[2];
    swift_bridgeObjectRetain();
    if (v14)
    {
      swift_bridgeObjectRetain();
      unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
      if (v16)
      {
        long long v17 = (uint64_t *)(a3[7] + 16 * v15);
        uint64_t v37 = v17[1];
        uint64_t v38 = *v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v37 = v10[3];
    uint64_t v38 = v10[2];
    swift_bridgeObjectRetain();
LABEL_16:
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v39 = a1;
    a3  = a1;
    unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
    uint64_t v20 = a1[2];
    BOOL v21 = (v19 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      goto LABEL_26;
    }
    char v23 = v19;
    if (a1[3] < v22) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      a3  = &v39;
      specialized _NativeDictionary.copy()();
    }
LABEL_22:
    a1  = v39;
    if (v23)
    {
      uint64_t v8 = (void *)(v39[7] + 16 * v4);
      swift_bridgeObjectRelease();
      *uint64_t v8 = v38;
      v8[1]  = v37;
    }
    else
    {
      v39[(v4 >> 6) + 8] |= 1 << v4;
      unint64_t v26 = (uint64_t *)(a1[6] + 16 * v4);
      *unint64_t v26 = v12;
      v26[1]  = v13;
      Swift::String v27 = (void *)(a1[7] + 16 * v4);
      void *v27 = v38;
      v27[1]  = v37;
      uint64_t v28 = a1[2];
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29) {
        goto LABEL_27;
      }
      a1[2]  = v30;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Set._Variant.remove(_:)(v12, v13);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v7;
    a3  = v33;
    unint64_t v4 = v34;
    if (v36 == v32) {
      goto LABEL_29;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
  a3  = v39;
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
  if ((v23 & 1) == (v25 & 1))
  {
    unint64_t v4 = v24;
    goto LABEL_22;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Set<String> and conformance Set<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Set<String> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<String> and conformance Set<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Set<String> and conformance Set<A>);
  }
  return result;
}

uint64_t TextureResource.Contents.init(mipmapLevels:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2  = result;
  return result;
}

uint64_t static TextureResource.Contents.Slice.slice(data:bytesPerRow:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x228125CD0);
      }
      uint64_t v8 = HIDWORD(result) - (int)result;
LABEL_6:
      unint64_t result = outlined copy of Data._Representation(result, a2);
LABEL_7:
      *a4  = v6;
      a4[1]  = a2;
      a4[2]  = 0;
      a4[3]  = v8;
      a4[4]  = a3;
      a4[5]  = 0;
      return result;
    case 2uLL:
      uint64_t v10 = *(void *)(result + 16);
      uint64_t v9 = *(void *)(result + 24);
      uint64_t v8 = v9 - v10;
      if (!__OFSUB__(v9, v10)) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t static TextureResource.Contents.Slice.slice(unsafeBuffer:offset:size:bytesPerRow:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5  = a1;
  a5[1]  = 0x2000000000000000;
  a5[2]  = a2;
  a5[3]  = a3;
  a5[4]  = a4;
  a5[5]  = 0;
  return swift_unknownObjectRetain();
}

uint64_t TextureResource.init(dimensions:format:contents:)(_OWORD *a1, uint64_t a2, uint64_t *a3)
{
  *(_OWORD *)(v3 + 16)  = *a1;
  *(unsigned char *)(v3 + 104)  = *(unsigned char *)a2;
  *(unsigned char *)(v3 + 105)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(v3 + 106)  = *(unsigned char *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(v3 + 107)  = *(unsigned char *)(a2 + 18);
  uint64_t v5 = *a3;
  *(void *)(v3 + 32)  = v4;
  *(void *)(v3 + 40)  = v5;
  type metadata accessor for MainActor();
  *(void *)(v3 + 48)  = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 56)  = v7;
  *(void *)(v3 + 64)  = v6;
  return MEMORY[0x270FA2498](TextureResource.init(dimensions:format:contents:), v7, v6);
}

uint64_t TextureResource.init(dimensions:format:contents:)()
{
  uint64_t v17 = v0;
  char v1 = *(unsigned char *)(v0 + 107);
  char v2 = *(unsigned char *)(v0 + 106);
  char v3 = *(unsigned char *)(v0 + 105);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  char v6 = *(unsigned char *)(v0 + 104);
  long long v10 = *(_OWORD *)(v0 + 16);
  v11[0]  = v6;
  uint64_t v12 = v4;
  char v13 = v3;
  char v14 = v2;
  char v15 = v1;
  uint64_t v16 = v5;
  uint64_t v7 = specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)((uint64_t *)&v10, 0, 2, v11, &v16);
  *(void *)(v0 + 72)  = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 80)  = v8;
  *uint64_t v8 = v0;
  v8[1]  = TextureResource.init(dimensions:format:contents:);
  return specialized static TextureResource.createAssetAsync(_:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  char v1 = *(void *)(v0 + 96);
  swift_release();
  type metadata accessor for TextureResource();
  char v2 = swift_allocObject();
  *(void *)(v2 + 16)  = v1;
  *(void *)(v2 + 24)  = 0;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  RERelease();
  char v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  RERelease();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  long long v11;
  char v12[8];
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v18 = v0;
  char v1 = *(void *)(v0 + 40);
  char v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 115);
  uint64_t v4 = *(unsigned char *)(v0 + 114);
  uint64_t v5 = *(unsigned char *)(v0 + 113);
  char v6 = *(unsigned char *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v11 = *(_OWORD *)(v0 + 16);
  v12[0]  = v6;
  char v13 = v1;
  char v14 = v5;
  char v15 = v4;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v8 = specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)((uint64_t *)&v11, v7, 3, v12, &v17);
  *(void *)(v0 + 80)  = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 88)  = v9;
  *uint64_t v9 = v0;
  v9[1]  = TextureResource.init(dimensions:format:contents:);
  return specialized static TextureResource.createAssetAsync(_:)(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v10[2];
  char v11[8];
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = v0;
  char v1 = *(void *)(v0 + 24);
  char v2 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 99);
  uint64_t v4 = *(unsigned char *)(v0 + 98);
  uint64_t v5 = *(unsigned char *)(v0 + 97);
  char v6 = *(unsigned char *)(v0 + 96);
  v10[0]  = *(void *)(v0 + 16);
  v10[1]  = v10[0];
  v11[0]  = v6;
  uint64_t v12 = v1;
  char v13 = v5;
  char v14 = v4;
  char v15 = v3;
  uint64_t v16 = v2;
  uint64_t v7 = specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)(v10, 6, 5, v11, &v16);
  *(void *)(v0 + 64)  = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 72)  = v8;
  *uint64_t v8 = v0;
  v8[1]  = TextureResource.init(dimensions:format:contents:);
  return specialized static TextureResource.createAssetAsync(_:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  char v1 = *(void *)(v0 + 88);
  swift_release();
  type metadata accessor for TextureResource();
  char v2 = swift_allocObject();
  *(void *)(v2 + 16)  = v1;
  *(void *)(v2 + 24)  = 0;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  RERelease();
  char v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  RERelease();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  long long v11;
  char v12[8];
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v18 = v0;
  char v1 = *(void *)(v0 + 40);
  char v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 115);
  uint64_t v4 = *(unsigned char *)(v0 + 114);
  uint64_t v5 = *(unsigned char *)(v0 + 113);
  char v6 = *(unsigned char *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v11 = *(_OWORD *)(v0 + 16);
  v12[0]  = v6;
  char v13 = v1;
  char v14 = v5;
  char v15 = v4;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v8 = specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)((uint64_t *)&v11, v7, 7, v12, &v17);
  *(void *)(v0 + 80)  = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 88)  = v9;
  *uint64_t v9 = v0;
  v9[1]  = TextureResource.init(dimensions:format:contents:);
  return specialized static TextureResource.createAssetAsync(_:)(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  char v1 = *(void *)(v0 + 104);
  swift_release();
  type metadata accessor for TextureResource();
  char v2 = swift_allocObject();
  *(void *)(v2 + 16)  = v1;
  *(void *)(v2 + 24)  = 0;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  RERelease();
  char v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  RERelease();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t TextureResource.init(dimensions:format:contents:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 88)  = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = TextureResource.init(dimensions:format:contents:);
  }
  else
  {
    v4[12]  = a1;
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = TextureResource.init(dimensions:format:contents:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 96)  = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = TextureResource.init(dimensions:format:contents:);
  }
  else
  {
    v4[13]  = a1;
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = TextureResource.init(dimensions:format:contents:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 80)  = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[6];
    uint64_t v6 = v4[7];
    uint64_t v7 = TextureResource.init(dimensions:format:contents:);
  }
  else
  {
    v4[11]  = a1;
    uint64_t v5 = v4[6];
    uint64_t v6 = v4[7];
    uint64_t v7 = TextureResource.init(dimensions:format:contents:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 96)  = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = TextureResource.init(dimensions:format:contents:);
  }
  else
  {
    v4[13]  = a1;
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = TextureResource.init(dimensions:format:contents:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t TextureResource.init(dimensions:format:contents:)(long long *a1, char *a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  char v5 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  char v7 = a2[16];
  char v8 = a2[17];
  char v9 = a2[18];
  uint64_t v10 = *a3;
  long long v17 = *a1;
  LOBYTE(v18[0])  = v5;
  v18[1]  = v6;
  char v19 = v7;
  char v20 = v8;
  char v21 = v9;
  uint64_t v16 = v10;
  specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)((uint64_t *)&v17, 0, 2, (char *)v18, &v16);
  swift_bridgeObjectRelease();
  if (v3) {
    return v4;
  }
  v18[0]  = 0;
  uint64_t result = RETextureBuilderCreateAssetSync();
  if (result)
  {
    uint64_t v12 = result;
    type metadata accessor for TextureResource();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16)  = v12;
    *(void *)(v4 + 24)  = 0;
    RERetain();
    REAssetSetSwiftObject();
    v18[0]  = v4;
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    if (v13) {
      swift_release();
    }
    RERelease();
    RERelease();
    swift_release();
    return v4;
  }
  uint64_t v14 = v18[0];
  if (v18[0])
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *char v15 = v14;
    swift_willThrow();
    RERelease();
    return v4;
  }
  __break(1u);
  return result;
}

{
  return TextureResource.init(dimensions:format:contents:)(a1, a2, a3, 3);
}

{
  return TextureResource.init(dimensions:format:contents:)(a1, a2, a3, 7);
}

void closure #1 in static TextureResource.createAssetAsync(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<OpaquePointer, Error>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __n128 v5 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4]  = partial apply for closure #1 in closure #1 in static TextureResource.createAssetAsync(_:);
  aBlock[5]  = v7;
  aBlock[0]  = MEMORY[0x263EF8330];
  aBlock[1]  = 1107296256;
  aBlock[2]  = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
  aBlock[3]  = &block_descriptor_30;
  char v8 = _Block_copy(aBlock);
  swift_release();
  RETextureBuilderCreateAssetAsync();
  _Block_release(v8);
}

uint64_t closure #1 in closure #1 in static TextureResource.createAssetAsync(_:)(uint64_t a1, void *a2)
{
  if (a1)
  {
    RERetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<OpaquePointer, Error>);
    return CheckedContinuation.resume(returning:)();
  }
  else if (a2)
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *uint64_t v4 = a2;
    id v5 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<OpaquePointer, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TextureResource.init(dimensions:format:contents:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(_OWORD *)(v3 + 16)  = *(_OWORD *)a1;
  uint64_t v4 = *(void *)(a1 + 16);
  *(unsigned char *)(v3 + 112)  = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(v3 + 32)  = v4;
  *(void *)(v3 + 40)  = v5;
  *(unsigned char *)(v3 + 113)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(v3 + 114)  = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(v3 + 115)  = *(unsigned char *)(a2 + 18);
  *(void *)(v3 + 48)  = *a3;
  type metadata accessor for MainActor();
  *(void *)(v3 + 56)  = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 64)  = v7;
  *(void *)(v3 + 72)  = v6;
  return MEMORY[0x270FA2498](TextureResource.init(dimensions:format:contents:), v7, v6);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  *(_OWORD *)(v3 + 16)  = *(_OWORD *)a1;
  uint64_t v4 = *(void *)(a1 + 16);
  *(unsigned char *)(v3 + 112)  = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(v3 + 32)  = v4;
  *(void *)(v3 + 40)  = v5;
  *(unsigned char *)(v3 + 113)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(v3 + 114)  = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(v3 + 115)  = *(unsigned char *)(a2 + 18);
  *(void *)(v3 + 48)  = *a3;
  type metadata accessor for MainActor();
  *(void *)(v3 + 56)  = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 64)  = v7;
  *(void *)(v3 + 72)  = v6;
  return MEMORY[0x270FA2498](TextureResource.init(dimensions:format:contents:), v7, v6);
}

uint64_t TextureResource.init(dimensions:format:contents:)(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a1;
  *(unsigned char *)(v3 + 96)  = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(v3 + 16)  = v4;
  *(void *)(v3 + 24)  = v5;
  *(unsigned char *)(v3 + 97)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(v3 + 98)  = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(v3 + 99)  = *(unsigned char *)(a2 + 18);
  *(void *)(v3 + 32)  = *a3;
  type metadata accessor for MainActor();
  *(void *)(v3 + 40)  = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v3 + 48)  = v7;
  *(void *)(v3 + 56)  = v6;
  return MEMORY[0x270FA2498](TextureResource.init(dimensions:format:contents:), v7, v6);
}

uint64_t TextureResource.init(dimensions:format:contents:)(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  char v5 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  char v7 = a2[16];
  char v8 = a2[17];
  char v9 = a2[18];
  uint64_t v10 = *a3;
  v17[0]  = *a1;
  v17[1]  = v17[0];
  LOBYTE(v18[0])  = v5;
  v18[1]  = v6;
  char v19 = v7;
  char v20 = v8;
  char v21 = v9;
  uint64_t v16 = v10;
  specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)(v17, 6, 5, (char *)v18, &v16);
  swift_bridgeObjectRelease();
  if (v3) {
    return v4;
  }
  v18[0]  = 0;
  uint64_t result = RETextureBuilderCreateAssetSync();
  if (result)
  {
    uint64_t v12 = result;
    type metadata accessor for TextureResource();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16)  = v12;
    *(void *)(v4 + 24)  = 0;
    RERetain();
    REAssetSetSwiftObject();
    v18[0]  = v4;
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    if (v13) {
      swift_release();
    }
    RERelease();
    RERelease();
    swift_release();
    return v4;
  }
  uint64_t v14 = v18[0];
  if (v18[0])
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *char v15 = v14;
    swift_willThrow();
    RERelease();
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t TextureResource.init(dimensions:format:contents:)(long long *a1, char *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)a1 + 2);
  char v7 = *a2;
  uint64_t v8 = *((void *)a2 + 1);
  char v9 = a2[16];
  char v10 = a2[17];
  char v11 = a2[18];
  uint64_t v12 = *a3;
  long long v19 = *a1;
  LOBYTE(v20[0])  = v7;
  v20[1]  = v8;
  char v21 = v9;
  char v22 = v10;
  char v23 = v11;
  uint64_t v18 = v12;
  specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)((uint64_t *)&v19, v6, a4, (char *)v20, &v18);
  swift_bridgeObjectRelease();
  if (v4) {
    return v5;
  }
  v20[0]  = 0;
  uint64_t result = RETextureBuilderCreateAssetSync();
  if (result)
  {
    uint64_t v14 = result;
    type metadata accessor for TextureResource();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16)  = v14;
    *(void *)(v5 + 24)  = 0;
    RERetain();
    REAssetSetSwiftObject();
    v20[0]  = v5;
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    if (v15) {
      swift_release();
    }
    RERelease();
    RERelease();
    swift_release();
    return v5;
  }
  uint64_t v16 = v20[0];
  if (v20[0])
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *long long v17 = v16;
    swift_willThrow();
    RERelease();
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t static TextureResource.Dimensions2D.dimensions(width:height:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3  = result;
  a3[1]  = a2;
  return result;
}

uint64_t static TextureResource.DimensionsCube.dimensions(faceSize:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2  = result;
  return result;
}

uint64_t static TextureResource.Dimensions3D.dimensions(width:height:depth:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4  = result;
  a4[1]  = a2;
  a4[2]  = a3;
  return result;
}

void static TextureResource.Format.color(_:pixelFormat:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2  = 2;
  *(void *)(a2 + 8)  = a1;
  *(_WORD *)(a2 + 16)  = 1;
  *(unsigned char *)(a2 + 18)  = 2;
}

char *static TextureResource.Format.normal(_:pixelFormat:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *result;
  *(unsigned char *)a3  = 4;
  *(void *)(a3 + 8)  = a2;
  *(_WORD *)(a3 + 16)  = 256;
  *(unsigned char *)(a3 + 18)  = v3;
  return result;
}

uint64_t static TextureResource.Format.raw(pixelFormat:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2  = 0;
  *(void *)(a2 + 8)  = result;
  *(_WORD *)(a2 + 16)  = 256;
  *(unsigned char *)(a2 + 18)  = 2;
  return result;
}

uint64_t static TextureResource.Contents.MipmapLevel.mip(data:bytesPerRow:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TextureResource.Contents.Slice>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16)  = xmmword_22830EC60;
  char v9 = (void *)result;
  uint64_t v10 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x22812771CLL);
      }
      uint64_t v10 = HIDWORD(a1) - (int)a1;
LABEL_6:
      uint64_t result = outlined copy of Data._Representation(a1, a2);
LABEL_7:
      v9[4]  = a1;
      v9[5]  = a2;
      v9[6]  = 0;
      v9[7]  = v10;
      v9[8]  = a3;
      v9[9]  = 0;
      *a4  = v9;
      return result;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v10 = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t static TextureResource.Contents.MipmapLevel.mip(buffer:offset:size:bytesPerRow:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TextureResource.Contents.Slice>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16)  = xmmword_22830EC60;
  *(void *)(v10 + 32)  = a1;
  *(void *)(v10 + 40)  = 0x2000000000000000;
  *(void *)(v10 + 48)  = a2;
  *(void *)(v10 + 56)  = a3;
  *(void *)(v10 + 64)  = a4;
  *(void *)(v10 + 72)  = 0;
  *a5  = v10;

  return swift_unknownObjectRetain();
}

uint64_t static TextureResource.Contents.MipmapLevel.mip(slices:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2  = a1;
  return swift_bridgeObjectRetain();
}

uint64_t static TextureResource.Contents.MipmapLevel.mip(data:bytesPerRow:bytesPerImage:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TextureResource.Contents.Slice>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16)  = xmmword_22830EC60;
  uint64_t v11 = (void *)result;
  uint64_t v12 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x2281278A8);
      }
      uint64_t v12 = HIDWORD(a1) - (int)a1;
LABEL_6:
      uint64_t result = outlined copy of Data._Representation(a1, a2);
LABEL_7:
      v11[4]  = a1;
      v11[5]  = a2;
      v11[6]  = 0;
      v11[7]  = v12;
      v11[8]  = a3;
      v11[9]  = a4;
      *a5  = v11;
      return result;
    case 2uLL:
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v13 = *(void *)(a1 + 24);
      uint64_t v12 = v13 - v14;
      if (!__OFSUB__(v13, v14)) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v12 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t static TextureResource.Contents.MipmapLevel.mip(unsafeBuffer:offset:size:bytesPerRow:bytesPerImage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TextureResource.Contents.Slice>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16)  = xmmword_22830EC60;
  *(void *)(v12 + 32)  = a1;
  *(void *)(v12 + 40)  = 0x2000000000000000;
  *(void *)(v12 + 48)  = a2;
  *(void *)(v12 + 56)  = a3;
  *(void *)(v12 + 64)  = a4;
  *(void *)(v12 + 72)  = a5;
  *a6  = v12;

  return swift_unknownObjectRetain();
}

id closure #2 in static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a5 < -64) {
    goto LABEL_2;
  }
  if (a5 <= 64)
  {
    if (a5 < 0)
    {
      if ((unint64_t)a5 <= 0xFFFFFFFFFFFFFFC0)
      {
LABEL_2:
        uint64_t v15 = 1;
        uint64_t v16 = 1;
        uint64_t v17 = 1;
        goto LABEL_21;
      }
      uint64_t v27 = -a5;
      if (a3 << -(char)a5 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = a3 << -(char)a5;
      }
      if (a4 << v27 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = a4 << v27;
      }
      uint64_t v18 = a6 << v27;
    }
    else
    {
      if (a3 >> a5 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = a3 >> a5;
      }
      if (a4 >> a5 <= 1) {
        uint64_t v20 = 1;
      }
      else {
        uint64_t v20 = a4 >> a5;
      }
      uint64_t v18 = a6 >> a5;
      if ((unint64_t)a5 < 0x40)
      {
        uint64_t v16 = v20;
      }
      else
      {
        uint64_t v18 = a6 >> 63;
        uint64_t v16 = 1;
      }
      if ((unint64_t)a5 >= 0x40) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v19;
      }
    }
  }
  else
  {
    uint64_t v18 = a6 >> 63;
    uint64_t v16 = 1;
    uint64_t v17 = 1;
  }
  if (v18 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v18;
  }
LABEL_21:
  MTLSizeMake(v17, v16, v15, &v31);
  long long v28 = v31;
  uint64_t v21 = v32;
  uint64_t v22 = *(void *)(a9 + 32);
  uint64_t v23 = *(void *)(a9 + 40);
  MTLOriginMake(&v31);
  uint64_t v24 = v32;
  long long v25 = v31;
  long long v31 = v28;
  uint64_t v32 = v21;
  long long v29 = v25;
  uint64_t v30 = v24;
  return objc_msgSend(a1, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, a7, a8, v22, v23, &v31, a2, a10, a5, &v29);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed MTLBlitCommandEncoder, @guaranteed MTLTexture) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v5(a2, a3);
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

BOOL static TextureResource.Dimensions2D.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void TextureResource.Dimensions2D.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int TextureResource.Dimensions2D.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextureResource.Dimensions2D(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextureResource.Dimensions2D()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TextureResource.Dimensions2D()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextureResource.Dimensions2D()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL static TextureResource.DimensionsCube.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

void TextureResource.DimensionsCube.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int TextureResource.DimensionsCube.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static TextureResource.Dimensions2DArray.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

void TextureResource.Dimensions2DArray.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int TextureResource.Dimensions2DArray.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextureResource.Dimensions2DArray()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void TextureResource.Format.hash(into:)()
{
  Swift::UInt v1 = *((void *)v0 + 1);
  Swift::UInt8 v2 = v0[16];
  unsigned __int8 v3 = v0[17];
  int v4 = v0[18];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  if (v3) {
    Swift::UInt8 v2 = 0;
  }
  else {
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v2);
  if (v4 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4 & 1);
  }
}

Swift::Int TextureResource.Format.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  unsigned __int8 v4 = v0[17];
  int v5 = v0[18];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v4) {
    Swift::UInt8 v3 = 0;
  }
  else {
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v3);
  if (v5 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 & 1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextureResource.Format()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  unsigned __int8 v4 = v0[17];
  int v5 = v0[18];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v4) {
    Swift::UInt8 v3 = 0;
  }
  else {
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v3);
  if (v5 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 & 1);
  }
  return Hasher._finalize()();
}

uint64_t static TextureResource.Format.ColorSpace.== infix(_:_:)()
{
  return 1;
}

void TextureResource.Format.ColorSpace.hash(into:)()
{
}

Swift::Int TextureResource.Format.ColorSpace.hashValue.getter()
{
  return Hasher._finalize()();
}

BOOL static TextureResource.Format.NormalEncoding.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TextureResource.Format.NormalEncoding.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int TextureResource.Format.NormalEncoding.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized static TextureResource.Format.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || *((void *)a1 + 1) != *((void *)a2 + 1)) {
    return 0;
  }
  int v2 = a1[18];
  char v3 = a2[17];
  int v4 = a2[18];
  if ((a1[17] & 1) == 0)
  {
    if (a1[16] != a2[16]) {
      char v3 = 1;
    }
    if (v3) {
      return 0;
    }
LABEL_9:
    if (v2 == 2)
    {
      if (v4 != 2) {
        return 0;
      }
    }
    else if (v4 == 2 || ((v4 ^ v2) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  if (a2[17]) {
    goto LABEL_9;
  }
  return 0;
}

uint64_t specialized static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v159  = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *a3;
  v140  = a4[1];
  v141  = *a4;
  v153  = 0;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v143  = RETextureBuilderCreateWithDescriptor();
  if (v143)
  {
    RETextureBuilderSetSemantic();
    if ((v5 & 1) == 0) {
      RETextureBuilderSetColorGamut();
    }
    uint64_t v7 = v6 + 32;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = &off_264838000;
    v133  = v6;
LABEL_5:
    unint64_t v11 = *(void *)(v6 + 16);
    if (v9 <= v11) {
      unint64_t v12 = *(void *)(v6 + 16);
    }
    else {
      unint64_t v12 = v9;
    }
    do
    {
      if (v11 == v9)
      {
        swift_bridgeObjectRelease();
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v8);
        return v143;
      }
      if (v12 == v9)
      {
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
      }
      uint64_t v13 = *(void *)(v7 + 8 * v9++);
      uint64_t v14 = *(void *)(v13 + 16);
    }
    while (!v14);
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    uint64_t v16 = 32;
    while (1)
    {
      v144  = v16;
      v145  = v15;
      uint64_t v17 = (long long *)(v13 + v16);
      long long v18 = *v17;
      long long v19 = v17[2];
      v155  = v17[1];
      v156  = v19;
      v154  = v18;
      outlined init with take of TextureResource.CopySourceBuffer(&v154, &v157);
      outlined init with take of TextureResource.CopySourceBuffer(&v157, &v158);
      unint64_t v20 = *((void *)&v158 + 1);
      *((void *)&v158 + 1) &= ~0x2000000000000000uLL;
      if ((v20 & 0x2000000000000000) != 0)
      {
        id v24 = (id)v158;
        outlined retain of TextureResource.Contents.Slice((uint64_t)&v154);
        outlined retain of TextureResource.Contents.Slice((uint64_t)&v154);
      }
      else
      {
        switch(v20 >> 62)
        {
          case 1uLL:
            v136  = v8;
            uint64_t v25 = (int)v158;
            uint64_t v26 = ((uint64_t)v158 >> 32) - (int)v158;
            if ((uint64_t)v158 >> 32 < (int)v158) {
              goto LABEL_168;
            }
            swift_retain_n();
            outlined retain of TextureResource.Contents.Slice((uint64_t)&v154);
            uint64_t v27 = __DataStorage._bytes.getter();
            if (v27)
            {
              uint64_t v28 = v27;
              uint64_t v29 = __DataStorage._offset.getter();
              if (__OFSUB__(v25, v29)) {
                goto LABEL_171;
              }
              uint64_t v30 = v28 + v25 - v29;
            }
            else
            {
              uint64_t v30 = 0;
            }
            v82  = __DataStorage._length.getter();
            if (v82 >= v26) {
              v83  = v26;
            }
            else {
              v83  = v82;
            }
            Shared  = REEngineGetShared();
            if (Shared)
            {
              v85  = Shared;
              if (one-time initialization token for lock != -1) {
                swift_once();
              }
              os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
              uint64_t v10 = &off_264838000;
              if (!static __ServiceLocator.sharedEngine || *((void *)static __ServiceLocator.sharedEngine + 3) != v85)
              {
                type metadata accessor for __Engine();
                swift_allocObject();
                static __ServiceLocator.sharedEngine  = __Engine.init(coreEngine:)(v85);
                swift_release();
                specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
                specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
              }
              os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
              v86  = static __ServiceLocator.sharedEngine;
              if (static __ServiceLocator.sharedEngine) {
                goto LABEL_150;
              }
            }
            else
            {
              static __ServiceLocator.sharedEngine  = 0;
              swift_release();
              uint64_t v10 = &off_264838000;
              v86  = static __ServiceLocator.sharedEngine;
              if (static __ServiceLocator.sharedEngine) {
                goto LABEL_150;
              }
            }
            Default  = REEngineConfigurationCreateDefault();
            type metadata accessor for EngineConfiguration();
            v98  = swift_allocObject();
            *(void *)(v98 + 16)  = Default;
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              v99  = REEngineConfigurationClone();
              v100  = swift_allocObject();
              *(void *)(v100 + 16)  = v99;
              swift_release_n();
              v98  = v100;
            }
            REEngineConfigurationSetClockMode();
            if (one-time initialization token for defaultServices != -1) {
              swift_once();
            }
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              v101  = REEngineConfigurationClone();
              v102  = swift_allocObject();
              *(void *)(v102 + 16)  = v101;
              swift_release_n();
              v98  = v102;
            }
            REEngineConfigurationSetServicesToCreate();
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              v111  = REEngineConfigurationClone();
              v112  = swift_allocObject();
              *(void *)(v112 + 16)  = v111;
              swift_release_n();
              v98  = v112;
            }
            REEngineConfigurationSetServicesToUpdate();
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              v113  = REEngineConfigurationClone();
              v114  = swift_allocObject();
              *(void *)(v114 + 16)  = v113;
              swift_release_n();
              v98  = v114;
            }
            REEngineConfigurationSetStartupOptions();
            if (one-time initialization token for defaultRenderFlags != -1) {
              swift_once();
            }
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              v115  = REEngineConfigurationClone();
              v116  = swift_allocObject();
              *(void *)(v116 + 16)  = v115;
              swift_release_n();
              v98  = v116;
            }
            uint64_t v10 = &off_264838000;
            REEngineConfigurationSetRenderFlags();
            if (!specialized static __ServiceLocator.__sharedEngine.getter())
            {
              aBlock[0]  = v98;
              v117  = specialized static __Engine.makeSharedEngine(_:)(aBlock);
              REEngineSetShared();
              static __ServiceLocator.sharedEngine  = v117;
              swift_release();
              static __ServiceLocator.createdSharedEngine  = 1;
            }
            swift_release();
            specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
            specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
            v86  = static __ServiceLocator.sharedEngine;
            if (!static __ServiceLocator.sharedEngine) {
              goto LABEL_189;
            }
LABEL_150:
            swift_beginAccess();
            v118  = v86[5];
            if (!v118) {
              goto LABEL_182;
            }
            v119  = v118 + 40;
            swift_beginAccess();
            outlined init with copy of __RenderService?(v119, (uint64_t)&v151);
            if (!v152) {
              goto LABEL_183;
            }
            outlined init with take of BindableDataInternal(&v151, (uint64_t)aBlock);
            v120  = v148;
            v121  = v149;
            __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v148);
            v122  = (void *)(*((uint64_t (**)(void *, uint64_t (*)()))v121 + 1))(v120, v121);
            if (!v30) {
              goto LABEL_184;
            }
            id v24 = objc_msgSend(v122, sel_newBufferWithBytes_length_options_, v30, v83, 0);
            swift_unknownObjectRelease();
            uint64_t v8 = v136;
            if (!v24) {
              goto LABEL_185;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
            outlined release of TextureResource.Contents.Slice((uint64_t)&v154);
            goto LABEL_155;
          case 2uLL:
            v137  = v8;
            uint64_t v31 = *(void *)(v158 + 16);
            uint64_t v32 = *(void *)(v158 + 24);
            outlined retain of TextureResource.Contents.Slice((uint64_t)&v154);
            swift_retain_n();
            swift_retain_n();
            uint64_t v33 = __DataStorage._bytes.getter();
            if (v33)
            {
              uint64_t v34 = v33;
              uint64_t v35 = __DataStorage._offset.getter();
              if (__OFSUB__(v31, v35)) {
                goto LABEL_170;
              }
              uint64_t v36 = v34 + v31 - v35;
              uint64_t v37 = v32 - v31;
              if (__OFSUB__(v32, v31)) {
                goto LABEL_169;
              }
            }
            else
            {
              uint64_t v36 = 0;
              uint64_t v37 = v32 - v31;
              if (__OFSUB__(v32, v31)) {
                goto LABEL_169;
              }
            }
            v135  = v36;
            uint64_t v60 = __DataStorage._length.getter();
            if (v60 >= v37) {
              uint64_t v61 = v37;
            }
            else {
              uint64_t v61 = v60;
            }
            v134  = v61;
            uint64_t v62 = REEngineGetShared();
            if (v62)
            {
              uint64_t v63 = v62;
              if (one-time initialization token for lock != -1) {
                swift_once();
              }
              os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
              if (!static __ServiceLocator.sharedEngine || *((void *)static __ServiceLocator.sharedEngine + 3) != v63)
              {
                type metadata accessor for __Engine();
                swift_allocObject();
                static __ServiceLocator.sharedEngine  = __Engine.init(coreEngine:)(v63);
                swift_release();
                specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
                specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
              }
              os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
              uint64_t v64 = static __ServiceLocator.sharedEngine;
              if (static __ServiceLocator.sharedEngine) {
                goto LABEL_133;
              }
            }
            else
            {
              static __ServiceLocator.sharedEngine  = 0;
              swift_release();
              uint64_t v64 = static __ServiceLocator.sharedEngine;
              if (static __ServiceLocator.sharedEngine) {
                goto LABEL_133;
              }
            }
            v87  = REEngineConfigurationCreateDefault();
            type metadata accessor for EngineConfiguration();
            v88  = swift_allocObject();
            *(void *)(v88 + 16)  = v87;
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              v89  = REEngineConfigurationClone();
              v90  = swift_allocObject();
              *(void *)(v90 + 16)  = v89;
              swift_release_n();
              v88  = v90;
            }
            REEngineConfigurationSetClockMode();
            if (one-time initialization token for defaultServices != -1) {
              swift_once();
            }
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              v91  = REEngineConfigurationClone();
              v92  = swift_allocObject();
              *(void *)(v92 + 16)  = v91;
              swift_release_n();
              v88  = v92;
            }
            REEngineConfigurationSetServicesToCreate();
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              v93  = REEngineConfigurationClone();
              v94  = swift_allocObject();
              *(void *)(v94 + 16)  = v93;
              swift_release_n();
              v88  = v94;
            }
            REEngineConfigurationSetServicesToUpdate();
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              v95  = REEngineConfigurationClone();
              v96  = swift_allocObject();
              *(void *)(v96 + 16)  = v95;
              swift_release_n();
              v88  = v96;
            }
            REEngineConfigurationSetStartupOptions();
            if (one-time initialization token for defaultRenderFlags != -1) {
              swift_once();
            }
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              v103  = REEngineConfigurationClone();
              v104  = swift_allocObject();
              *(void *)(v104 + 16)  = v103;
              swift_release_n();
              v88  = v104;
            }
            REEngineConfigurationSetRenderFlags();
            if (!specialized static __ServiceLocator.__sharedEngine.getter())
            {
              aBlock[0]  = v88;
              v105  = specialized static __Engine.makeSharedEngine(_:)(aBlock);
              REEngineSetShared();
              static __ServiceLocator.sharedEngine  = v105;
              swift_release();
              static __ServiceLocator.createdSharedEngine  = 1;
            }
            swift_release();
            specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
            specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
            uint64_t v64 = static __ServiceLocator.sharedEngine;
            if (!static __ServiceLocator.sharedEngine) {
              goto LABEL_188;
            }
LABEL_133:
            swift_beginAccess();
            v106  = v64[5];
            if (!v106) {
              goto LABEL_178;
            }
            v107  = v106 + 40;
            swift_beginAccess();
            outlined init with copy of __RenderService?(v107, (uint64_t)&v151);
            if (!v152) {
              goto LABEL_179;
            }
            outlined init with take of BindableDataInternal(&v151, (uint64_t)aBlock);
            v108  = v148;
            v109  = v149;
            __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v148);
            v110  = (void *)(*((uint64_t (**)(void *, uint64_t (*)()))v109 + 1))(v108, v109);
            if (!v135) {
              goto LABEL_180;
            }
            id v24 = objc_msgSend(v110, sel_newBufferWithBytes_length_options_, v135, v134, 0);
            swift_unknownObjectRelease();
            uint64_t v8 = v137;
            if (!v24) {
              goto LABEL_181;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
            swift_release();
            swift_release();
            outlined release of TextureResource.Contents.Slice((uint64_t)&v154);
            goto LABEL_138;
          case 3uLL:
            memset(v146, 0, 14);
            uint64_t v38 = REEngineGetShared();
            if (v38)
            {
              uint64_t v39 = v38;
              if (one-time initialization token for lock != -1) {
                swift_once();
              }
              os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
              if (!static __ServiceLocator.sharedEngine || *((void *)static __ServiceLocator.sharedEngine + 3) != v39)
              {
                type metadata accessor for __Engine();
                swift_allocObject();
                static __ServiceLocator.sharedEngine  = __Engine.init(coreEngine:)(v39);
                swift_release();
                specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
                specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
              }
              os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
              uint64_t v40 = static __ServiceLocator.sharedEngine;
              if (static __ServiceLocator.sharedEngine) {
                goto LABEL_92;
              }
            }
            else
            {
              static __ServiceLocator.sharedEngine  = 0;
              swift_release();
              uint64_t v40 = static __ServiceLocator.sharedEngine;
              if (static __ServiceLocator.sharedEngine) {
                goto LABEL_92;
              }
            }
            uint64_t v65 = REEngineConfigurationCreateDefault();
            type metadata accessor for EngineConfiguration();
            uint64_t v66 = swift_allocObject();
            *(void *)(v66 + 16)  = v65;
            v139  = v8;
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              uint64_t v67 = REEngineConfigurationClone();
              uint64_t v68 = swift_allocObject();
              *(void *)(v68 + 16)  = v67;
              swift_release_n();
              uint64_t v66 = v68;
            }
            REEngineConfigurationSetClockMode();
            if (one-time initialization token for defaultServices != -1) {
              swift_once();
            }
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              uint64_t v69 = REEngineConfigurationClone();
              uint64_t v70 = swift_allocObject();
              *(void *)(v70 + 16)  = v69;
              swift_release_n();
              uint64_t v66 = v70;
            }
            REEngineConfigurationSetServicesToCreate();
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              uint64_t v71 = REEngineConfigurationClone();
              uint64_t v72 = swift_allocObject();
              *(void *)(v72 + 16)  = v71;
              swift_release_n();
              uint64_t v66 = v72;
            }
            uint64_t v10 = &off_264838000;
            REEngineConfigurationSetServicesToUpdate();
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              uint64_t v73 = REEngineConfigurationClone();
              uint64_t v74 = swift_allocObject();
              *(void *)(v74 + 16)  = v73;
              swift_release_n();
              uint64_t v66 = v74;
            }
            REEngineConfigurationSetStartupOptions();
            if (one-time initialization token for defaultRenderFlags != -1) {
              swift_once();
            }
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              uint64_t v75 = REEngineConfigurationClone();
              uint64_t v76 = swift_allocObject();
              *(void *)(v76 + 16)  = v75;
              swift_release_n();
              uint64_t v66 = v76;
            }
            uint64_t v8 = v139;
            REEngineConfigurationSetRenderFlags();
            if (!specialized static __ServiceLocator.__sharedEngine.getter())
            {
              aBlock[0]  = v66;
              uint64_t v77 = specialized static __Engine.makeSharedEngine(_:)(aBlock);
              REEngineSetShared();
              static __ServiceLocator.sharedEngine  = v77;
              swift_release();
              static __ServiceLocator.createdSharedEngine  = 1;
            }
            swift_release();
            specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
            specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
            uint64_t v40 = static __ServiceLocator.sharedEngine;
            if (!static __ServiceLocator.sharedEngine) {
              goto LABEL_187;
            }
LABEL_92:
            swift_beginAccess();
            uint64_t v78 = v40[5];
            if (!v78) {
              goto LABEL_175;
            }
            uint64_t v79 = v78 + 40;
            swift_beginAccess();
            outlined init with copy of __RenderService?(v79, (uint64_t)&v151);
            if (!v152) {
              goto LABEL_176;
            }
            outlined init with take of BindableDataInternal(&v151, (uint64_t)aBlock);
            v80  = v148;
            v81  = v149;
            __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v148);
            id v24 = objc_msgSend((id)(*((uint64_t (**)(void *, uint64_t (*)()))v81 + 1))(v80, v81), sel_newBufferWithBytes_length_options_, v146, 0, 0);
            swift_unknownObjectRelease();
            if (!v24) {
              goto LABEL_177;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
LABEL_155:
            outlined release of TextureResource.Contents.Slice((uint64_t)&v154);
            break;
          default:
            v146[0]  = v158;
            LOWORD(v146[1])  = v20;
            BYTE2(v146[1])  = BYTE2(v20);
            BYTE3(v146[1])  = BYTE3(v20);
            BYTE4(v146[1])  = BYTE4(v20);
            BYTE5(v146[1])  = BYTE5(v20);
            uint64_t v21 = REEngineGetShared();
            if (v21)
            {
              uint64_t v22 = v21;
              if (one-time initialization token for lock != -1) {
                swift_once();
              }
              os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
              if (!static __ServiceLocator.sharedEngine || *((void *)static __ServiceLocator.sharedEngine + 3) != v22)
              {
                type metadata accessor for __Engine();
                swift_allocObject();
                static __ServiceLocator.sharedEngine  = __Engine.init(coreEngine:)(v22);
                swift_release();
                specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
                specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
              }
              os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
              uint64_t v23 = static __ServiceLocator.sharedEngine;
              if (static __ServiceLocator.sharedEngine) {
                goto LABEL_58;
              }
            }
            else
            {
              static __ServiceLocator.sharedEngine  = 0;
              swift_release();
              uint64_t v23 = static __ServiceLocator.sharedEngine;
              if (static __ServiceLocator.sharedEngine) {
                goto LABEL_58;
              }
            }
            uint64_t v41 = REEngineConfigurationCreateDefault();
            type metadata accessor for EngineConfiguration();
            uint64_t v42 = swift_allocObject();
            *(void *)(v42 + 16)  = v41;
            v138  = v8;
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              uint64_t v43 = REEngineConfigurationClone();
              uint64_t v44 = swift_allocObject();
              *(void *)(v44 + 16)  = v43;
              swift_release_n();
              uint64_t v42 = v44;
            }
            REEngineConfigurationSetClockMode();
            if (one-time initialization token for defaultServices != -1) {
              swift_once();
            }
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              uint64_t v45 = REEngineConfigurationClone();
              uint64_t v46 = swift_allocObject();
              *(void *)(v46 + 16)  = v45;
              swift_release_n();
              uint64_t v42 = v46;
            }
            REEngineConfigurationSetServicesToCreate();
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              uint64_t v47 = REEngineConfigurationClone();
              uint64_t v48 = swift_allocObject();
              *(void *)(v48 + 16)  = v47;
              swift_release_n();
              uint64_t v42 = v48;
            }
            REEngineConfigurationSetServicesToUpdate();
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              uint64_t v49 = REEngineConfigurationClone();
              uint64_t v50 = swift_allocObject();
              *(void *)(v50 + 16)  = v49;
              swift_release_n();
              uint64_t v42 = v50;
            }
            REEngineConfigurationSetStartupOptions();
            if (one-time initialization token for defaultRenderFlags != -1) {
              swift_once();
            }
            if ((int)REGetRetainCount() >= 2)
            {
              swift_retain();
              uint64_t v51 = REEngineConfigurationClone();
              uint64_t v52 = swift_allocObject();
              *(void *)(v52 + 16)  = v51;
              swift_release_n();
              uint64_t v42 = v52;
            }
            uint64_t v8 = v138;
            REEngineConfigurationSetRenderFlags();
            if (!specialized static __ServiceLocator.__sharedEngine.getter())
            {
              aBlock[0]  = v42;
              unint64_t v53 = specialized static __Engine.makeSharedEngine(_:)(aBlock);
              REEngineSetShared();
              static __ServiceLocator.sharedEngine  = v53;
              swift_release();
              static __ServiceLocator.createdSharedEngine  = 1;
            }
            swift_release();
            specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
            specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
            uint64_t v23 = static __ServiceLocator.sharedEngine;
            if (!static __ServiceLocator.sharedEngine) {
              goto LABEL_186;
            }
LABEL_58:
            swift_beginAccess();
            uint64_t v54 = v23[5];
            if (!v54)
            {
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
              JUMPOUT(0x228129BD4);
            }
            long long v55 = v8;
            uint64_t v56 = v54 + 40;
            swift_beginAccess();
            outlined init with copy of __RenderService?(v56, (uint64_t)&v151);
            if (!v152) {
              goto LABEL_173;
            }
            uint64_t v57 = BYTE6(v20);
            outlined init with take of BindableDataInternal(&v151, (uint64_t)aBlock);
            uint64_t v58 = v148;
            BOOL v59 = v149;
            __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v148);
            id v24 = objc_msgSend((id)(*((uint64_t (**)(void *, uint64_t (*)()))v59 + 1))(v58, v59), sel_newBufferWithBytes_length_options_, v146, v57, 0);
            swift_unknownObjectRelease();
            if (!v24) {
              goto LABEL_174;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
            outlined release of TextureResource.Contents.Slice((uint64_t)&v154);
            uint64_t v8 = v55;
LABEL_138:
            uint64_t v10 = &off_264838000;
            break;
        }
      }
      v123  = v155;
      if (__OFADD__((void)v155, *((void *)&v155 + 1))) {
        goto LABEL_166;
      }
      v124  = v155 + *((void *)&v155 + 1);
      if ((uint64_t)[v24 (SEL)v10[253]] < v124) {
        break;
      }
      v125  = swift_allocObject();
      *(void *)(v125 + 16)  = v141;
      *(void *)(v125 + 24)  = v140;
      *(void *)(v125 + 32)  = v9 - 1;
      *(void *)(v125 + 40)  = a5;
      *(void *)(v125 + 48)  = v24;
      *(void *)(v125 + 56)  = v123;
      v126  = v155;
      *(_OWORD *)(v125 + 64)  = v154;
      *(_OWORD *)(v125 + 80)  = v126;
      *(_OWORD *)(v125 + 96)  = v156;
      *(void *)(v125 + 112)  = v145;
      outlined retain of TextureResource.Contents.Slice((uint64_t)&v154);
      swift_unknownObjectRetain();
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v8);
      v127  = swift_allocObject();
      *(void *)(v127 + 16)  = partial apply for closure #2 in static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:);
      *(void *)(v127 + 24)  = v125;
      v149  = partial apply for thunk for @callee_guaranteed (@guaranteed MTLBlitCommandEncoder, @guaranteed MTLTexture) -> ();
      v150  = v127;
      aBlock[0]  = MEMORY[0x263EF8330];
      aBlock[1]  = 1107296256;
      aBlock[2]  = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed MTLBlitCommandEncoder, @guaranteed MTLTexture) -> ();
      v148  = &block_descriptor_52_1;
      v128  = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      RETextureBuilderEncodeBlitCommands();
      swift_unknownObjectRelease();
      outlined release of TextureResource.Contents.Slice((uint64_t)&v154);
      _Block_release(v128);
      isEscapingClosureAtFileLocation  = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        goto LABEL_167;
      }
      uint64_t v15 = v145 + 1;
      uint64_t v16 = v144 + 48;
      uint64_t v8 = partial apply for closure #2 in static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:);
      if (v14 == v145 + 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = partial apply for closure #2 in static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:);
        uint64_t v6 = v133;
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError();
    swift_allocError();
    *(_OWORD *)v130  = xmmword_22831EBE0;
    *(unsigned char *)(v130 + 16)  = 2;
    swift_willThrow();
    swift_unknownObjectRelease();
    outlined release of TextureResource.Contents.Slice((uint64_t)&v154);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v8);
  }
  else
  {
    lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError();
    swift_allocError();
    *(void *)v131  = 0xD000000000000029;
    *(void *)(v131 + 8)  = 0x8000000228359D80;
    *(unsigned char *)(v131 + 16)  = 1;
    swift_willThrow();
  }
  return v143;
}

uint64_t specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t *a5)
{
  uint64_t v7 = *a1;
  uint64_t v34 = a1[1];
  uint64_t v8 = *((void *)a4 + 1);
  char v32 = a4[16];
  char v33 = *a4;
  char v31 = a4[17];
  char v9 = a4[18];
  uint64_t v10 = *a5;
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A50]), sel_init);
  unint64_t v12 = v11;
  switch(a3)
  {
    case 2:
      id v13 = objc_msgSend(self, sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, v8, v7, v34, 1);
      goto LABEL_22;
    case 3:
    case 7:
      id v13 = v11;
      objc_msgSend(v13, sel_setPixelFormat_, v8);
      if (a3 == 7)
      {
        objc_msgSend(v13, sel_setDepth_, a2);
        uint64_t v14 = *(void *)(v10 + 16);
        if (v14)
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            uint64_t v16 = *(void *)(v10 + 32 + 8 * i);
            uint64_t v17 = *(void *)(v16 + 16);
            if (v17)
            {
              long long v18 = (unint64_t *)(v16 + 40);
              do
              {
                if (!v18[4])
                {
                  a2  = *(v18 - 1);
                  unint64_t v27 = *v18;
                  outlined copy of TextureResource.CopySourceBuffer(a2, *v18);

                  lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError();
                  swift_allocError();
                  *(_OWORD *)uint64_t v28 = xmmword_22831EBF0;
                  *(unsigned char *)(v28 + 16)  = 2;
                  swift_willThrow();

                  outlined consume of TextureResource.CopySourceBuffer(a2, v27);
                  return a2;
                }
                v18 += 6;
                --v17;
              }
              while (v17);
            }
          }
        }
      }
      else
      {
        objc_msgSend(v13, sel_setArrayLength_, a2);
        uint64_t v21 = *(void *)(v10 + 16);
        if (v21)
        {
          uint64_t v22 = v10 + 32;
          do
          {
            if (*(void *)(*(void *)v22 + 16) != a2)
            {

              goto LABEL_35;
            }
            v22 += 8;
            --v21;
          }
          while (v21);
        }
      }
      objc_msgSend(v13, sel_setTextureType_, a3);
      objc_msgSend(v13, sel_setWidth_, v7);
      objc_msgSend(v13, sel_setHeight_, v34);
LABEL_22:

      goto LABEL_23;
    case 5:
      id v13 = objc_msgSend(self, sel_textureCubeDescriptorWithPixelFormat_size_mipmapped_, v8, v7, 1);

      uint64_t v19 = *(void *)(v10 + 16);
      if (!v19) {
        goto LABEL_23;
      }
      uint64_t v20 = v10 + 32;
      break;
    default:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x22812A048);
  }
  do
  {
    if (*(void *)(*(void *)v20 + 16) != 6)
    {
LABEL_35:
      lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError();
      swift_allocError();
      *(_OWORD *)uint64_t v29 = xmmword_22830EC70;
      *(unsigned char *)(v29 + 16)  = 2;
      goto LABEL_36;
    }
    v20 += 8;
    --v19;
  }
  while (v19);
LABEL_23:
  objc_msgSend(v13, sel_setUsage_, 17);
  objc_msgSend(v13, sel_setStorageMode_, 2);
  if (v9) {
    uint64_t v23 = 17040133;
  }
  else {
    uint64_t v23 = 84148994;
  }
  objc_msgSend(v13, sel_setSwizzle_, v23);
  uint64_t v24 = *(void *)(v10 + 16);
  objc_msgSend(v13, sel_setMipmapLevelCount_, v24);
  if (!v24 || (uint64_t)objc_msgSend(v13, sel_mipmapLevelCount) < v24)
  {
    lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError();
    swift_allocError();
    *(void *)uint64_t v25 = 0;
    *(void *)(v25 + 8)  = 0;
    *(unsigned char *)(v25 + 16)  = 2;
LABEL_36:
    swift_willThrow();

    return a2;
  }
  v36[0]  = v33;
  uint64_t v37 = v8;
  char v38 = v32;
  char v39 = v31;
  char v40 = v9;
  uint64_t v41 = v10;
  if (a3 == 7) {
    uint64_t v26 = a2;
  }
  else {
    uint64_t v26 = 0;
  }
  v35[0]  = v7;
  v35[1]  = v34;
  a2  = specialized static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:)((uint64_t)v13, (uint64_t)v36, &v41, v35, v26);

  return a2;
}

uint64_t specialized static TextureResource.createAssetAsync(_:)(uint64_t a1)
{
  v1[3]  = a1;
  v1[4]  = type metadata accessor for MainActor();
  v1[5]  = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[6]  = v3;
  v1[7]  = v2;
  return MEMORY[0x270FA2498](specialized static TextureResource.createAssetAsync(_:), v3, v2);
}

uint64_t specialized static TextureResource.createAssetAsync(_:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = static MainActor.shared.getter();
  v0[8]  = v2;
  uint64_t v3 = swift_task_alloc();
  v0[9]  = v3;
  *(void *)(v3 + 16)  = v1;
  int v4 = (void *)swift_task_alloc();
  v0[10]  = v4;
  *int v4 = v0;
  v4[1]  = specialized static TextureResource.createAssetAsync(_:);
  uint64_t v5 = MEMORY[0x263F8F500];
  uint64_t v6 = MEMORY[0x263F8DD08];
  return MEMORY[0x270FA2360](v0 + 2, v2, v5, 0xD000000000000014, 0x8000000228359CE0, partial apply for closure #1 in static TextureResource.createAssetAsync(_:), v3, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 88)  = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    int v4 = *(void *)(v2 + 56);
    uint64_t v5 = TextureResource.copy(to:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 48);
    int v4 = *(void *)(v2 + 56);
    uint64_t v5 = specialized static TextureResource.createAssetAsync(_:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

unint64_t lazy protocol witness table accessor for type TextureResource.Dimensions2D and conformance TextureResource.Dimensions2D()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.Dimensions2D and conformance TextureResource.Dimensions2D;
  if (!lazy protocol witness table cache variable for type TextureResource.Dimensions2D and conformance TextureResource.Dimensions2D)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Dimensions2D and conformance TextureResource.Dimensions2D);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Dimensions2DArray and conformance TextureResource.Dimensions2DArray()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.Dimensions2DArray and conformance TextureResource.Dimensions2DArray;
  if (!lazy protocol witness table cache variable for type TextureResource.Dimensions2DArray and conformance TextureResource.Dimensions2DArray)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Dimensions2DArray and conformance TextureResource.Dimensions2DArray);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.DimensionsCube and conformance TextureResource.DimensionsCube()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.DimensionsCube and conformance TextureResource.DimensionsCube;
  if (!lazy protocol witness table cache variable for type TextureResource.DimensionsCube and conformance TextureResource.DimensionsCube)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.DimensionsCube and conformance TextureResource.DimensionsCube);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Dimensions3D and conformance TextureResource.Dimensions3D()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.Dimensions3D and conformance TextureResource.Dimensions3D;
  if (!lazy protocol witness table cache variable for type TextureResource.Dimensions3D and conformance TextureResource.Dimensions3D)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Dimensions3D and conformance TextureResource.Dimensions3D);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Format and conformance TextureResource.Format()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.Format and conformance TextureResource.Format;
  if (!lazy protocol witness table cache variable for type TextureResource.Format and conformance TextureResource.Format)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Format and conformance TextureResource.Format);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Format.ColorSpace and conformance TextureResource.Format.ColorSpace()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.Format.ColorSpace and conformance TextureResource.Format.ColorSpace;
  if (!lazy protocol witness table cache variable for type TextureResource.Format.ColorSpace and conformance TextureResource.Format.ColorSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Format.ColorSpace and conformance TextureResource.Format.ColorSpace);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Format.NormalEncoding and conformance TextureResource.Format.NormalEncoding()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.Format.NormalEncoding and conformance TextureResource.Format.NormalEncoding;
  if (!lazy protocol witness table cache variable for type TextureResource.Format.NormalEncoding and conformance TextureResource.Format.NormalEncoding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Format.NormalEncoding and conformance TextureResource.Format.NormalEncoding);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Dimensions2DArray()
{
  return &type metadata for TextureResource.Dimensions2DArray;
}

ValueMetadata *type metadata accessor for TextureResource.DimensionsCube()
{
  return &type metadata for TextureResource.DimensionsCube;
}

ValueMetadata *type metadata accessor for TextureResource.Dimensions3D()
{
  return &type metadata for TextureResource.Dimensions3D;
}

ValueMetadata *type metadata accessor for TextureResource.Dimensions2D()
{
  return &type metadata for TextureResource.Dimensions2D;
}

__n128 __swift_memcpy19_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15)  = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1  = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TextureResource.Format(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 19)) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*(unsigned __int8 *)(a1 + 18) <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 18);
  }
  int v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 18) < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureResource.Format(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 18)  = 0;
    *(_WORD *)(result + 16)  = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 19)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 19)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 18)  = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Format()
{
  return &type metadata for TextureResource.Format;
}

ValueMetadata *type metadata accessor for TextureResource.Contents()
{
  return &type metadata for TextureResource.Contents;
}

ValueMetadata *type metadata accessor for TextureResource.Contents.MipmapLevel()
{
  return &type metadata for TextureResource.Contents.MipmapLevel;
}

uint64_t outlined copy of TextureResource.CopySourceBuffer(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    return swift_unknownObjectRetain();
  }
  else {
    return outlined copy of Data._Representation(a1, a2);
  }
}

uint64_t outlined consume of TextureResource.CopySourceBuffer(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    return swift_unknownObjectRelease();
  }
  else {
    return outlined consume of Data._Representation(a1, a2);
  }
}

uint64_t initializeWithCopy for TextureResource.Contents.Slice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of TextureResource.CopySourceBuffer(*(void *)a2, v5);
  *(void *)a1  = v4;
  *(void *)(a1 + 8)  = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32)  = v6;
  return a1;
}

uint64_t *assignWithCopy for TextureResource.Contents.Slice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of TextureResource.CopySourceBuffer(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1  = v4;
  a1[1]  = v5;
  outlined consume of TextureResource.CopySourceBuffer(v6, v7);
  a1[2]  = a2[2];
  a1[3]  = a2[3];
  a1[4]  = a2[4];
  a1[5]  = a2[5];
  return a1;
}

uint64_t assignWithTake for TextureResource.Contents.Slice(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1  = *a2;
  outlined consume of TextureResource.CopySourceBuffer(v4, v5);
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 16)  = a2[1];
  *(_OWORD *)(a1 + 32)  = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureResource.Contents.Slice(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TextureResource.Contents.Slice(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)(result + 40)  = 0;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 - 3;
    if (a3 >= 3) {
      *(unsigned char *)(result + 48)  = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 48)  = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8)  = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Contents.Slice()
{
  return &type metadata for TextureResource.Contents.Slice;
}

unsigned char *storeEnumTagSinglePayload for TextureResource.Format.ColorSpace(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22812A988);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Format.ColorSpace()
{
  return &type metadata for TextureResource.Format.ColorSpace;
}

unsigned char *storeEnumTagSinglePayload for TextureResource.Format.NormalEncoding(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22812AA8CLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Format.NormalEncoding()
{
  return &type metadata for TextureResource.Format.NormalEncoding;
}

uint64_t *initializeBufferWithCopyOfBuffer for TextureResource.CopySourceBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of TextureResource.CopySourceBuffer(*a2, v4);
  *a1  = v3;
  a1[1]  = v4;
  return a1;
}

uint64_t destroy for TextureResource.CopySourceBuffer(uint64_t a1)
{
  return outlined consume of TextureResource.CopySourceBuffer(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for TextureResource.CopySourceBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of TextureResource.CopySourceBuffer(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1  = v3;
  a1[1]  = v4;
  outlined consume of TextureResource.CopySourceBuffer(v5, v6);
  return a1;
}

uint64_t *assignWithTake for TextureResource.CopySourceBuffer(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1  = *a2;
  outlined consume of TextureResource.CopySourceBuffer(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureResource.CopySourceBuffer(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TextureResource.CopySourceBuffer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8)  = 0;
    if (a3 >= 3) {
      *(unsigned char *)(result + 16)  = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 16)  = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8)  = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for TextureResource.CopySourceBuffer(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 61) & 1;
}

uint64_t destructiveProjectEnumData for TextureResource.CopySourceBuffer(uint64_t result)
{
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t destructiveInjectEnumTag for TextureResource.CopySourceBuffer(uint64_t result, char a2)
{
  *(void *)(result + 8)  = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.CopySourceBuffer()
{
  return &type metadata for TextureResource.CopySourceBuffer;
}

void partial apply for closure #1 in static TextureResource.createAssetAsync(_:)(uint64_t a1)
{
}

uint64_t sub_22812AC7C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<OpaquePointer, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in static TextureResource.createAssetAsync(_:)(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<OpaquePointer, Error>);

  return closure #1 in closure #1 in static TextureResource.createAssetAsync(_:)(a1, a2);
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureResource.CreateError and conformance TextureResource.CreateError;
  if (!lazy protocol witness table cache variable for type TextureResource.CreateError and conformance TextureResource.CreateError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.CreateError and conformance TextureResource.CreateError);
  }
  return result;
}

_OWORD *outlined init with take of TextureResource.CopySourceBuffer(_OWORD *a1, _OWORD *a2)
{
  *a2  = *a1;
  return a2;
}

uint64_t outlined retain of TextureResource.Contents.Slice(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of TextureResource.Contents.Slice(uint64_t a1)
{
  return a1;
}

uint64_t sub_22812AE70()
{
  swift_unknownObjectRelease();
  outlined consume of TextureResource.CopySourceBuffer(*(void *)(v0 + 64), *(void *)(v0 + 72));

  return MEMORY[0x270FA0238](v0, 120, 7);
}

id partial apply for closure #2 in static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:)(void *a1, uint64_t a2)
{
  return closure #2 in static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:)(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], (uint64_t)(v2 + 8), v2[14]);
}

uint64_t sub_22812AEE8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed MTLBlitCommandEncoder, @guaranteed MTLTexture) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t MTLSizeMake@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4  = result;
  a4[1]  = a2;
  a4[2]  = a3;
  return result;
}

void MTLOriginMake(void *a1@<X8>)
{
  *a1  = 0;
  a1[1]  = 0;
  a1[2]  = 0;
}

id outlined copy of TextureResource.CreateError(id result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return (id)swift_bridgeObjectRetain();
  }
  if (!a3) {
    return result;
  }
  return result;
}

void destroy for TextureResource.CreateError(uint64_t a1)
{
}

void outlined consume of TextureResource.CreateError(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!a3)
  {
  }
}

uint64_t initializeBufferWithCopyOfBuffer for TextureResource.CreateError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of TextureResource.CreateError(*(id *)a2, v4, v5);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 16)  = v5;
  return a1;
}

uint64_t assignWithCopy for TextureResource.CreateError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of TextureResource.CreateError(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16)  = v5;
  outlined consume of TextureResource.CreateError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for TextureResource.CreateError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16)  = v3;
  outlined consume of TextureResource.CreateError(v4, v5, v6);
  return a1;
}

void *type metadata accessor for TextureResource.CreateError()
{
  return &unk_26DCAC2C8;
}

double ChannelAudioComponent.gain.getter()
{
  return *(double *)v0;
}

void ChannelAudioComponent.gain.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*ChannelAudioComponent.gain.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::ChannelAudioComponent __swiftcall ChannelAudioComponent.init(gain:)(RealityFoundation::ChannelAudioComponent gain)
{
  v1->gain  = gain.gain;
  return gain;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ChannelAudioComponent.CodingKeys()
{
  return 1852399975;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ChannelAudioComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1852399975 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ChannelAudioComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ChannelAudioComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Entity.channelAudio.getter@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);

  return swift_release();
}

uint64_t key path getter for Entity.channelAudio : Entity@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v4);
  uint64_t result = swift_release();
  char v3 = v5;
  *(void *)a1  = v4;
  *(unsigned char *)(a1 + 8)  = v3;
  return result;
}

uint64_t key path setter for Entity.channelAudio : Entity(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);

  return swift_release();
}

uint64_t Entity.channelAudio.setter(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);

  return swift_release();
}

uint64_t (*Entity.channelAudio.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16)  = v1;
  swift_retain();
  uint64_t Component = REEntityGetComponent();
  if (Component)
  {
    REChannelAudioComponentGetDecibelGain();
    float v5 = v4;
    swift_release();
    double v6 = v5;
  }
  else
  {
    swift_release();
    double v6 = 0.0;
  }
  *(double *)a1  = v6;
  *(unsigned char *)(a1 + 8)  = Component == 0;
  return Entity.channelAudio.modify;
}

uint64_t Entity.channelAudio.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);

  return swift_release();
}

double static ChannelAudioComponent.__fromCore(_:)@<D0>(double *a1@<X8>)
{
  REChannelAudioComponentGetDecibelGain();
  double result = v2;
  *a1  = result;
  return result;
}

uint64_t ChannelAudioComponent.__toCore(_:)()
{
  REChannelAudioComponentSetDecibelGain();

  return RENetworkMarkComponentDirty();
}

void static ChannelAudioComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1  = 3008;
}

double protocol witness for static Component.__fromCore(_:) in conformance ChannelAudioComponent@<D0>(double *a1@<X8>)
{
  REChannelAudioComponentGetDecibelGain();
  double result = v2;
  *a1  = result;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance ChannelAudioComponent()
{
  REChannelAudioComponentSetDecibelGain();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ChannelAudioComponent(_DWORD *a1@<X8>)
{
  *a1  = 3008;
}

BOOL static ChannelAudioComponent.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

void ChannelAudioComponent.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t ChannelAudioComponent.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ChannelAudioComponent.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  float v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int ChannelAudioComponent.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t ChannelAudioComponent.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ChannelAudioComponent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2  = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ChannelAudioComponent()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ChannelAudioComponent()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ChannelAudioComponent()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ChannelAudioComponent@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ChannelAudioComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ChannelAudioComponent(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ChannelAudioComponent.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ChannelAudioComponent and conformance ChannelAudioComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type ChannelAudioComponent and conformance ChannelAudioComponent;
  if (!lazy protocol witness table cache variable for type ChannelAudioComponent and conformance ChannelAudioComponent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChannelAudioComponent and conformance ChannelAudioComponent);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChannelAudioComponent()
{
  return &type metadata for ChannelAudioComponent;
}

unsigned char *storeEnumTagSinglePayload for ChannelAudioComponent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22812BBE0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ChannelAudioComponent.CodingKeys()
{
  return &unk_26DCAC3E8;
}

void static ActionEntityResolution.sourceEntity.getter(uint64_t a1@<X8>)
{
  *(void *)a1  = MEMORY[0x263F8EE78];
  *(void *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 16)  = 0;
}

uint64_t ActionEntityResolution.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
    uint64_t v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    if (v5 == 1)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
      uint64_t v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      uint64_t v10 = v13;
      char v11 = 1;
      goto LABEL_11;
    }
    if (!v5)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
      uint64_t v7 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      uint64_t v9 = specialized static InternalBindPath.decomposeStringBySeparator(_:separator:escapeCharacter:)(v7, v8, 46, 0xE100000000000000, 92, 0xE100000000000000);
      static InternalBindPath.entityPathFromParts(_:)((uint64_t *)(v9 + 32), 0, (2 * *(void *)(v9 + 16)) | 1, (unint64_t)&v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = 0;
      char v11 = 0;
      uint64_t v12 = v14;
LABEL_11:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      *(void *)a2  = v12;
      *(void *)(a2 + 8)  = v10;
      *(unsigned char *)(a2 + 16)  = v11;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
    lazy protocol witness table accessor for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t ActionEntityResolution.encode(to:)(void *a1)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  if (v4)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (!v2)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    }
  }
  else
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    swift_bridgeObjectRetain();
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (v2)
    {
      outlined consume of ActionEntityResolution();
    }
    else
    {
      v6[0]  = v3;
      v6[1]  = 0;
      char v7 = 2;
      specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)v6, 1);
      outlined consume of ActionEntityResolution();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      swift_bridgeObjectRelease();
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ActionEntityResolution@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ActionEntityResolution.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ActionEntityResolution(void *a1)
{
  return ActionEntityResolution.encode(to:)(a1);
}

uint64_t specialized static ActionEntityResolution.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a1[2])
  {
    if (a2[2])
    {
      if (*a1 == v2 && a1[1] == a2[1]) {
        char v4 = 1;
      }
      else {
        char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of ActionEntityResolution();
      outlined copy of ActionEntityResolution();
      outlined consume of ActionEntityResolution();
      outlined consume of ActionEntityResolution();
      return v4 & 1;
    }
LABEL_9:
    outlined copy of ActionEntityResolution();
    outlined copy of ActionEntityResolution();
    outlined consume of ActionEntityResolution();
    outlined consume of ActionEntityResolution();
    char v4 = 0;
    return v4 & 1;
  }
  if (a2[2]) {
    goto LABEL_9;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = 0;
  char v12 = 2;
  outlined copy of ActionEntityResolution();
  outlined copy of ActionEntityResolution();
  char v4 = 1;
  unint64_t v5 = specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v10, 1);
  uint64_t v7 = v6;
  uint64_t v10 = v2;
  uint64_t v11 = 0;
  char v12 = 2;
  if (v5 != specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v10, 1) || v7 != v8) {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  outlined consume of ActionEntityResolution();
  outlined consume of ActionEntityResolution();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

unint64_t lazy protocol witness table accessor for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError;
  if (!lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError;
  if (!lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ActionEntityResolution(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 16)  = v5;
  return a1;
}

uint64_t assignWithCopy for ActionEntityResolution(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 16)  = v5;
  outlined consume of ActionEntityResolution();
  return a1;
}

uint64_t assignWithTake for ActionEntityResolution(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16)  = v3;
  outlined consume of ActionEntityResolution();
  return a1;
}

ValueMetadata *type metadata accessor for ActionEntityResolution()
{
  return &type metadata for ActionEntityResolution;
}

unsigned char *storeEnumTagSinglePayload for ActionEntityResolution.CodingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22812C474);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionEntityResolution.CodingError()
{
  return &type metadata for ActionEntityResolution.CodingError;
}

BOOL CameraFieldOfViewOrientation.__toCore()()
{
  return (*v0 & 1) == 0;
}

uint64_t static CameraFieldOfViewOrientation.__fromCore(from:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2  = result == 0;
  return result;
}

BOOL static CameraFieldOfViewOrientation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CameraFieldOfViewOrientation.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int CameraFieldOfViewOrientation.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

float OrthographicCameraComponent.near.getter()
{
  return *(float *)v0;
}

void OrthographicCameraComponent.near.setter(float a1)
{
  float *v1 = a1;
}

uint64_t (*OrthographicCameraComponent.near.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float OrthographicCameraComponent.far.getter()
{
  return *(float *)(v0 + 4);
}

void OrthographicCameraComponent.far.setter(float a1)
{
  *(float *)(v1 + 4)  = a1;
}

uint64_t (*OrthographicCameraComponent.far.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float OrthographicCameraComponent.scale.getter()
{
  return *(float *)(v0 + 8);
}

void OrthographicCameraComponent.scale.setter(float a1)
{
  *(float *)(v1 + 8)  = a1;
}

uint64_t (*OrthographicCameraComponent.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void OrthographicCameraComponent.scaleDirection.getter(unsigned char *a1@<X8>)
{
  *a1  = *(unsigned char *)(v1 + 12);
}

unsigned char *OrthographicCameraComponent.scaleDirection.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 12)  = *result;
  return result;
}

uint64_t (*OrthographicCameraComponent.scaleDirection.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __swiftcall OrthographicCameraComponent.init()(RealityFoundation::OrthographicCameraComponent *__return_ptr retstr)
{
  *(void *)&retstr->near  = 0x447A00003C23D70ALL;
  retstr->scale  = 1.0;
  retstr->scaleDirection  = RealityFoundation_CameraFieldOfViewOrientation_vertical;
}

uint64_t static OrthographicCameraComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  REOrthographicCameraComponentGetNear();
  int v3 = v2;
  REOrthographicCameraComponentGetFar();
  int v5 = v4;
  REOrthographicCameraComponentGetScale();
  int v7 = v6;
  uint64_t result = REOrthographicCameraComponentGetScaleDirection();
  *(_DWORD *)a1  = v3;
  *(_DWORD *)(a1 + 4)  = v5;
  *(_DWORD *)(a1 + 8)  = v7;
  *(unsigned char *)(a1 + 12)  = result == 0;
  return result;
}

uint64_t OrthographicCameraComponent.__toCore(_:)()
{
  REOrthographicCameraComponentSetNear();
  REOrthographicCameraComponentSetFar();
  REOrthographicCameraComponentSetScale();
  REOrthographicCameraComponentSetScaleDirection();

  return RENetworkMarkComponentDirty();
}

void static OrthographicCameraComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1  = 55;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance OrthographicCameraComponent@<X0>(uint64_t a1@<X8>)
{
  REOrthographicCameraComponentGetNear();
  int v3 = v2;
  REOrthographicCameraComponentGetFar();
  int v5 = v4;
  REOrthographicCameraComponentGetScale();
  int v7 = v6;
  uint64_t result = REOrthographicCameraComponentGetScaleDirection();
  *(_DWORD *)a1  = v3;
  *(_DWORD *)(a1 + 4)  = v5;
  *(_DWORD *)(a1 + 8)  = v7;
  *(unsigned char *)(a1 + 12)  = result == 0;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance OrthographicCameraComponent()
{
  REOrthographicCameraComponentSetNear();
  REOrthographicCameraComponentSetFar();
  REOrthographicCameraComponentSetScale();
  REOrthographicCameraComponentSetScaleDirection();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance OrthographicCameraComponent(_DWORD *a1@<X8>)
{
  *a1  = 55;
}

uint64_t specialized static OrthographicCameraComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 == *(float *)a2
    && *(float *)(a1 + 4) == *(float *)(a2 + 4)
    && *(float *)(a1 + 8) == *(float *)(a2 + 8))
  {
    return (*(unsigned __int8 *)(a2 + 12) ^ *(unsigned __int8 *)(a1 + 12) ^ 1) & 1;
  }
  else
  {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type CameraFieldOfViewOrientation and conformance CameraFieldOfViewOrientation()
{
  unint64_t result = lazy protocol witness table cache variable for type CameraFieldOfViewOrientation and conformance CameraFieldOfViewOrientation;
  if (!lazy protocol witness table cache variable for type CameraFieldOfViewOrientation and conformance CameraFieldOfViewOrientation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraFieldOfViewOrientation and conformance CameraFieldOfViewOrientation);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CameraFieldOfViewOrientation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22812C9F4);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraFieldOfViewOrientation()
{
  return &type metadata for CameraFieldOfViewOrientation;
}

uint64_t getEnumTagSinglePayload for OrthographicCameraComponent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OrthographicCameraComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 12)  = 0;
    *(_DWORD *)(result + 8)  = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 13)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 13)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12)  = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OrthographicCameraComponent()
{
  return &type metadata for OrthographicCameraComponent;
}

uint64_t HasPhysicsBody.addForce(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  if (a1)
  {
    swift_retain();
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable) {
      goto LABEL_8;
    }
    uint64_t v4 = SceneNullable;
    id v5 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v5)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v4);
    }
    uint64_t v6 = Scene.physicsOrigin.getter();
    swift_release();
    if (!v6) {
LABEL_8:
    }
      uint64_t v6 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    swift_release();
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(double *)v7.i64  = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v6);
  float32x4_t v15 = v8;
  float32x4_t v16 = v7;
  float32x4_t v14 = v9;
  HasPhysicsBody.physicsBody.getter((uint64_t)v20);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v22);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v23);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v23) == 1)
  {
    outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v19);
    uint64_t v10 = v19;
  }
  else
  {
    *(float32x2_t *)&long long v11 = vadd_f32((float32x2_t)simd_float4x4.transform(force:)(a2, v16, v15, v14).n64_u64[0], *(float32x2_t *)&v21);
    *((float *)&v11 + 2)  = v12 + *((float *)&v21 + 2);
    HIDWORD(v11)  = 0;
    long long v21 = v11;
    outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v19);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v19, (uint64_t)v18);
    uint64_t v10 = v18;
  }
  HasPhysicsBody.physicsBody.setter((uint64_t)v10);
  return swift_release();
}

uint64_t HasPhysicsBody.addForce(_:at:relativeTo:)(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4)
{
  HasPhysicsBody.physicsBody.getter((uint64_t)v53);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v53, (uint64_t)v73);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v73, (uint64_t)v74);
  uint64_t result = _s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v74);
  if (result != 1)
  {
    char v7 = v74[0];
    int v8 = v75;
    long long v47 = v76;
    __n128 v48 = v77;
    long long v46 = v78;
    uint64_t v9 = v79;
    char v10 = v80;
    char v11 = v81;
    char v42 = v83;
    char v43 = v82;
    char v40 = v85;
    char v41 = v84;
    char v38 = v87;
    char v39 = v86;
    float32x4_t v35 = v88;
    long long v36 = v89;
    long long v44 = v91;
    long long v45 = v90;
    char v37 = v92;
    uint64_t v12 = v93;
    if (a1)
    {
      swift_retain();
      outlined retain of PhysicsBodyComponent?((uint64_t)v73);
      uint64_t SceneNullable = REEntityGetSceneNullable();
      if (!SceneNullable) {
        goto LABEL_9;
      }
      uint64_t v14 = SceneNullable;
      id v15 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v15)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v14);
      }
      uint64_t v16 = Scene.physicsOrigin.getter();
      swift_release();
      if (!v16) {
LABEL_9:
      }
        uint64_t v16 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
      swift_release();
    }
    else
    {
      outlined init with take of PhysicsBodyComponent?((uint64_t)v73, (uint64_t)v53);
      swift_retain();
      uint64_t v16 = 0;
    }
    *(double *)v17.i64  = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v16);
    float32x4_t v33 = v18;
    float32x4_t v34 = v17;
    float32x4_t v31 = v20;
    float32x4_t v32 = v19;
    *(__n64 *)v21.f32  = simd_float4x4.transform(force:)(a3, v17, v18, v19);
    float32x4_t v50 = v21;
    HasTransform.convert(position:to:)(v16, a2, (uint64_t)&protocol witness table for Entity, v48);
    float32x4_t v30 = v22;
    *(float32x2_t *)v23.f32  = simd_float4x4.transform(position:)(a4, v34, v33, v32, v31);
    float32x4_t v24 = vsubq_f32(v23, v30);
    float32x4_t v25 = vaddq_f32(v35, v50);
    v25.i32[3]  = 0;
    int8x16_t v26 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v24)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL));
    v27.i32[0]  = vextq_s8(v26, v26, 8uLL).u32[0];
    v27.i32[1]  = v26.i32[0];
    *(float32x2_t *)&long long v28 = vadd_f32(*(float32x2_t *)&v36, v27);
    *((float *)&v28 + 2)  = *((float *)&v36 + 2) + *(float *)&v26.i32[1];
    HIDWORD(v28)  = 0;
    v53[0]  = v7;
    int v54 = v8;
    long long v55 = v47;
    __n128 v56 = v48;
    long long v57 = v46;
    uint64_t v58 = v9;
    char v59 = v10;
    char v60 = v11;
    char v61 = v43;
    char v62 = v42;
    char v63 = v41;
    char v64 = v40;
    char v65 = v39;
    char v66 = v38;
    float32x4_t v67 = v25;
    long long v68 = v28;
    long long v69 = v45;
    long long v70 = v44;
    char v71 = v37;
    uint64_t v72 = v12;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v53, v29);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v53, (uint64_t)v52);
    HasPhysicsBody.physicsBody.setter((uint64_t)v52);
    swift_release();
    return outlined release of PhysicsBodyComponent?((uint64_t)v73);
  }
  return result;
}

uint64_t HasPhysicsBody.addTorque(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  if (a1)
  {
    swift_retain();
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable) {
      goto LABEL_8;
    }
    uint64_t v4 = SceneNullable;
    id v5 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v5)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v4);
    }
    uint64_t v6 = Scene.physicsOrigin.getter();
    swift_release();
    if (!v6) {
LABEL_8:
    }
      uint64_t v6 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    swift_release();
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(double *)v7.i64  = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v6);
  float32x4_t v15 = v8;
  float32x4_t v16 = v7;
  float32x4_t v14 = v9;
  HasPhysicsBody.physicsBody.getter((uint64_t)v20);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v22);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v23);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v23) == 1)
  {
    outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v19);
    char v10 = v19;
  }
  else
  {
    *(float32x2_t *)&long long v11 = vadd_f32((float32x2_t)simd_float4x4.transform(torque:)(a2, v16, v15, v14).n64_u64[0], *(float32x2_t *)&v21);
    *((float *)&v11 + 2)  = v12 + *((float *)&v21 + 2);
    HIDWORD(v11)  = 0;
    long long v21 = v11;
    outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v19);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v19, (uint64_t)v18);
    char v10 = v18;
  }
  HasPhysicsBody.physicsBody.setter((uint64_t)v10);
  return swift_release();
}

Swift::Void __swiftcall HasPhysicsBody.clearForcesAndTorques()()
{
  HasPhysicsBody.physicsBody.getter((uint64_t)v22);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v23);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v23, (uint64_t)v24);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v24) != 1)
  {
    v2[0]  = v24[0];
    int v3 = v25;
    long long v4 = v26;
    long long v5 = v27;
    long long v6 = v28;
    uint64_t v7 = v29;
    char v8 = v30;
    char v9 = v31;
    char v10 = v32;
    char v11 = v33;
    char v12 = v34;
    char v13 = v35;
    char v14 = v36;
    char v15 = v37;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = v38;
    long long v19 = v39;
    char v20 = v40;
    uint64_t v21 = v41;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v2, v0);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v2, (uint64_t)v1);
    swift_retain();
    HasPhysicsBody.physicsBody.setter((uint64_t)v1);
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      if (RERigidBodyComponentGetRigidBody()) {
        RERigidBodyClearForces();
      }
    }
    outlined release of PhysicsBodyComponent?((uint64_t)v23);
  }
}

uint64_t HasPhysicsBody.applyLinearImpulse(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  if (a1)
  {
    swift_retain();
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable) {
      goto LABEL_8;
    }
    uint64_t v4 = SceneNullable;
    id v5 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v5)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v4);
    }
    uint64_t v6 = Scene.physicsOrigin.getter();
    swift_release();
    if (!v6) {
LABEL_8:
    }
      uint64_t v6 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    swift_release();
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(double *)v7.i64  = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v6);
  float32x4_t v15 = v8;
  float32x4_t v16 = v7;
  float32x4_t v14 = v9;
  HasPhysicsBody.physicsBody.getter((uint64_t)v20);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v22);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v23);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v23) == 1)
  {
    outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v19);
    char v10 = v19;
  }
  else
  {
    *(float32x2_t *)&long long v11 = vadd_f32((float32x2_t)simd_float4x4.transform(force:)(a2, v16, v15, v14).n64_u64[0], *(float32x2_t *)&v21);
    *((float *)&v11 + 2)  = v12 + *((float *)&v21 + 2);
    HIDWORD(v11)  = 0;
    long long v21 = v11;
    outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v19);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v19, (uint64_t)v18);
    char v10 = v18;
  }
  HasPhysicsBody.physicsBody.setter((uint64_t)v10);
  return swift_release();
}

uint64_t HasPhysicsBody.applyAngularImpulse(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  if (a1)
  {
    swift_retain();
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable) {
      goto LABEL_8;
    }
    uint64_t v4 = SceneNullable;
    id v5 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v5)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v4);
    }
    uint64_t v6 = Scene.physicsOrigin.getter();
    swift_release();
    if (!v6) {
LABEL_8:
    }
      uint64_t v6 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    swift_release();
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(double *)v7.i64  = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v6);
  float32x4_t v15 = v8;
  float32x4_t v16 = v7;
  float32x4_t v14 = v9;
  HasPhysicsBody.physicsBody.getter((uint64_t)v20);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v22);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v23);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v23) == 1)
  {
    outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v19);
    char v10 = v19;
  }
  else
  {
    *(float32x2_t *)&long long v11 = vadd_f32((float32x2_t)simd_float4x4.transform(torque:)(a2, v16, v15, v14).n64_u64[0], *(float32x2_t *)&v21);
    *((float *)&v11 + 2)  = v12 + *((float *)&v21 + 2);
    HIDWORD(v11)  = 0;
    long long v21 = v11;
    outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v19);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v19, (uint64_t)v18);
    char v10 = v18;
  }
  HasPhysicsBody.physicsBody.setter((uint64_t)v10);
  return swift_release();
}

uint64_t HasPhysicsBody.applyImpulse(_:at:relativeTo:)(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4)
{
  HasPhysicsBody.physicsBody.getter((uint64_t)v53);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v53, (uint64_t)v73);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v73, (uint64_t)v74);
  uint64_t result = _s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v74);
  if (result != 1)
  {
    char v7 = v74[0];
    int v8 = v75;
    long long v47 = v76;
    __n128 v48 = v77;
    uint64_t v9 = v79;
    char v10 = v80;
    char v11 = v81;
    char v42 = v83;
    char v43 = v82;
    char v40 = v85;
    char v41 = v84;
    char v38 = v87;
    char v39 = v86;
    long long v45 = v88;
    long long v46 = v78;
    long long v44 = v89;
    float32x4_t v35 = v90;
    long long v36 = v91;
    char v37 = v92;
    uint64_t v12 = v93;
    if (a1)
    {
      swift_retain();
      outlined retain of PhysicsBodyComponent?((uint64_t)v73);
      uint64_t SceneNullable = REEntityGetSceneNullable();
      if (!SceneNullable) {
        goto LABEL_9;
      }
      uint64_t v14 = SceneNullable;
      id v15 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v15)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v14);
      }
      uint64_t v16 = Scene.physicsOrigin.getter();
      swift_release();
      if (!v16) {
LABEL_9:
      }
        uint64_t v16 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
      swift_release();
    }
    else
    {
      outlined init with take of PhysicsBodyComponent?((uint64_t)v73, (uint64_t)v53);
      swift_retain();
      uint64_t v16 = 0;
    }
    *(double *)v17.i64  = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v16);
    float32x4_t v33 = v18;
    float32x4_t v34 = v17;
    float32x4_t v31 = v20;
    float32x4_t v32 = v19;
    *(__n64 *)v21.f32  = simd_float4x4.transform(force:)(a3, v17, v18, v19);
    float32x4_t v50 = v21;
    HasTransform.convert(position:to:)(v16, a2, (uint64_t)&protocol witness table for Entity, v48);
    float32x4_t v30 = v22;
    *(float32x2_t *)v23.f32  = simd_float4x4.transform(position:)(a4, v34, v33, v32, v31);
    float32x4_t v24 = vsubq_f32(v23, v30);
    float32x4_t v25 = vaddq_f32(v35, v50);
    v25.i32[3]  = 0;
    int8x16_t v26 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v24)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL));
    v27.i32[0]  = vextq_s8(v26, v26, 8uLL).u32[0];
    v27.i32[1]  = v26.i32[0];
    *(float32x2_t *)&long long v28 = vadd_f32(*(float32x2_t *)&v36, v27);
    *((float *)&v28 + 2)  = *((float *)&v36 + 2) + *(float *)&v26.i32[1];
    HIDWORD(v28)  = 0;
    v53[0]  = v7;
    int v54 = v8;
    long long v55 = v47;
    __n128 v56 = v48;
    long long v57 = v46;
    uint64_t v58 = v9;
    char v59 = v10;
    char v60 = v11;
    char v61 = v43;
    char v62 = v42;
    char v63 = v41;
    char v64 = v40;
    char v65 = v39;
    char v66 = v38;
    long long v67 = v45;
    long long v68 = v44;
    float32x4_t v69 = v25;
    long long v70 = v28;
    char v71 = v37;
    uint64_t v72 = v12;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v53, v29);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v53, (uint64_t)v52);
    HasPhysicsBody.physicsBody.setter((uint64_t)v52);
    swift_release();
    return outlined release of PhysicsBodyComponent?((uint64_t)v73);
  }
  return result;
}

Swift::Bool __swiftcall RKChangeSceneActionRuntimeTechnique.switchScenes()()
{
  if ((RKChangeSceneActionRuntimeTechnique.removeAllScenes()() & 1) == 0) {
    return 0;
  }

  return RKChangeSceneActionRuntimeTechnique.loadNextScene()();
}

uint64_t RKChangeSceneActionRuntimeTechnique.removeAllScenes()()
{
  v10[0]  = StaticString.description.getter();
  v10[1]  = v1;
  v2._countAndFlagsBits  = 8250;
  v2._object  = (void *)0xE200000000000000;
  String.append(_:)(v2);
  if (!*(void *)(v0 + 16))
  {
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v6, v10);
    swift_bridgeObjectRelease();
LABEL_6:
    char v4 = 0;
    return v4 & 1;
  }
  swift_retain();
  if ((RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()() & 1) == 0)
  {
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v7, v10);
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_6;
  }
  uint64_t v3 = RKChangeSceneActionRuntimeTechnique.unloadScene()();
  char v4 = v3;
  MEMORY[0x270FA5388](v3);
  v9[16]  = v4 & 1;
  uint64_t v5 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v5, v10, partial apply for implicit closure #3 in RKChangeSceneActionRuntimeTechnique.removeAllScenes(), v9);
  swift_bridgeObjectRelease();
  swift_release();
  return v4 & 1;
}

uint64_t implicit closure #3 in RKChangeSceneActionRuntimeTechnique.removeAllScenes()(char a1)
{
  _StringGuts.grow(_:)(26);
  v2._object  = (void *)0x800000022835A030;
  v2._countAndFlagsBits  = 0xD000000000000018;
  String.append(_:)(v2);
  if (a1) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits  = 0;
  v6._object  = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  uint64_t v36 = StaticString.description.getter();
  uint64_t v37 = v1;
  v2._countAndFlagsBits  = 8250;
  v2._object  = (void *)0xE200000000000000;
  String.append(_:)(v2);
  uint64_t v4 = v36;
  uint64_t v3 = v37;
  uint64_t v41 = *(void *)(v0 + 16);
  float32x4_t v34 = &v41;
  uint64_t v31 = v41;
  uint64_t v32 = v0;
  swift_retain();
  uint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = specialized InteractionsLogger.log(_:_:)(v5, &v36, partial apply for implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique(), v33);
  if (!v41)
  {
LABEL_30:
    MEMORY[0x270FA5388](v6);
    float32x4_t v30 = &v41;
    uint64_t v36 = v4;
    uint64_t v37 = v3;
    uint64_t v22 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v22, &v36, partial apply for implicit closure #4 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique(), v29);
    uint64_t v23 = v41;
    if (v41) {
      goto LABEL_35;
    }
    uint64_t v24 = v31 ? specialized HasHierarchy.parent.getter() : 0;
    uint64_t v41 = v24;
    MEMORY[0x270FA5388](v24);
    float32x4_t v30 = &v41;
    uint64_t v36 = v4;
    uint64_t v37 = v3;
    uint64_t v25 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v25, &v36, partial apply for implicit closure #5 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique(), v29);
    uint64_t v23 = v41;
    if (v41)
    {
LABEL_35:
      *(void *)(v32 + OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity)  = v23;
      swift_retain_n();
      uint64_t v26 = swift_release();
      MEMORY[0x270FA5388](v26);
      float32x4_t v30 = &v41;
      uint64_t v36 = v4;
      uint64_t v37 = v3;
      uint64_t v27 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v27, &v36, partial apply for implicit closure #7 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique(), v29);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return 1;
    }
    else
    {
      uint64_t v36 = v4;
      uint64_t v37 = v3;
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v28, &v36);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  while (1)
  {
    swift_beginAccess();
    char v10 = (void *)swift_retain();
    id v11 = objc_getAssociatedObject(v10, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey);
    swift_endAccess();
    if (v11)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v35, 0, sizeof(v35));
    }
    outlined init with take of Any?((uint64_t)v35, (uint64_t)&v36);
    if (!v38)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v36, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_13:
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_13;
    }
    uint64_t v12 = v40;
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_29;
    }
LABEL_14:
    Parent  = REEntityGetParent();
    if (!Parent)
    {
LABEL_29:
      uint64_t v6 = swift_release();
      goto LABEL_30;
    }
    uint64_t v14 = Parent;
    if ((id)REEntityGetSwiftObject())
    {
      swift_unknownObjectRelease();
      goto LABEL_22;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if (result) {
      break;
    }
    uint64_t v16 = specialized static Entity.entityInfoType(_:)();
    if (v16)
    {
      uint64_t v17 = (*(uint64_t (**)(void))(v16 + 232))();
      MEMORY[0x22A68E750](*(void *)(v17 + 16), 0);
      *(void *)(v17 + 16)  = v14;
      MEMORY[0x22A68E750](v14, v17);
    }
    else
    {
      makeEntity(for:)(v14);
    }
    swift_release();
LABEL_22:
    uint64_t v18 = REEntityGetParent();
    if (v18)
    {
      uint64_t v19 = v18;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        uint64_t v7 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        uint64_t result = REEntityIsBeingDestroyed();
        if (result) {
          goto LABEL_39;
        }
        uint64_t v20 = specialized static Entity.entityInfoType(_:)();
        if (v20)
        {
          uint64_t v7 = (*(uint64_t (**)(void))(v20 + 232))();
          uint64_t v21 = *(void *)(v7 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v21, 0);
          *(void *)(v7 + 16)  = v19;
          MEMORY[0x22A68E750](v19, v7);
          swift_release();
        }
        else
        {
          uint64_t v7 = makeEntity(for:)(v19);
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v8 = swift_release();
    uint64_t v41 = v7;
    MEMORY[0x270FA5388](v8);
    float32x4_t v30 = &v41;
    uint64_t v36 = v4;
    uint64_t v37 = v3;
    uint64_t v9 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v9, &v36, partial apply for implicit closure #3 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique(), v29);
    uint64_t v6 = swift_release();
    if (!v41) {
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(void *a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v7._countAndFlagsBits  = a3;
  v7._object  = a4;
  String.append(_:)(v7);
  if (*a1)
  {
    _print_unlocked<A, B>(_:_:)();
    uint64_t v8 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  else
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v8 = 7104878;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits  = 0;
  v11._object  = (void *)0xE000000000000000;
  String.append(_:)(v11);
  return 0;
}

uint64_t RKChangeSceneActionRuntimeTechnique.unloadScene()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity);
  if (!v1)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    uint64_t v24 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    return v1 != 0;
  }
  swift_retain_n();
  if (REEntityGetChildCount() < 1)
  {
LABEL_38:
    swift_release_n();
    return v1 != 0;
  }
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v2 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_44;
    }
    uint64_t v4 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v5 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result) {
        goto LABEL_43;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        uint64_t Object = RECustomComponentGetObject();
        if (Object)
        {
          Swift::String v7 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8)) {
            BOOL v8 = 1;
          }
          else {
            BOOL v8 = v7 == 0;
          }
          if (v8)
          {
            uint64_t result = swift_retain();
          }
          else
          {
            int v9 = *v7;
            uint64_t v10 = String.init(utf8String:)();
            if (v11) {
              Swift::Int v12 = v10;
            }
            else {
              Swift::Int v12 = 0;
            }
            if (v11) {
              unint64_t v13 = v11;
            }
            else {
              unint64_t v13 = 0xE000000000000000;
            }
            Swift::String v7 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v9 == 42, v12, v13);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            uint64_t result = swift_allocObject();
            *(void *)(result + 16)  = v7;
          }
          if (!v7) {
            goto LABEL_45;
          }
          swift_retain();
          uint64_t v14 = String.init(utf8String:)();
          unint64_t v16 = v15;
          swift_release();
          uint64_t v17 = v16 ? v14 : 0;
          unint64_t v18 = v16 ? v16 : 0xE000000000000000;
          uint64_t v19 = (NSString *)MEMORY[0x22A688A50](v17, v18);
          swift_bridgeObjectRelease();
          Class v20 = NSClassFromString(v19);

          swift_release();
          if (v20)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            uint64_t v21 = swift_dynamicCastMetatype();
            if (v21)
            {
              uint64_t v22 = (*(uint64_t (**)(void))(v21 + 232))();
              uint64_t v23 = *(void *)(v22 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v23, 0);
              *(void *)(v22 + 16)  = v4;
              MEMORY[0x22A68E750](v4, v22);
              swift_release();
              goto LABEL_36;
            }
          }
        }
      }
      uint64_t v5 = makeEntity(for:)(v4);
    }
    uint64_t v22 = v5;
LABEL_36:
    uint64_t result = REEntityGetChildCount();
    if (v2 >= result) {
      goto LABEL_42;
    }
    ++v2;
    MEMORY[0x22A68E700](*(void *)(v22 + 16));
    swift_release();
    if (v2 >= REEntityGetChildCount()) {
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t RKChangeSceneActionRuntimeTechnique.loadNextScene()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent.Target?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for noTargetSceneIdentifier != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for UUID();
  __swift_project_value_buffer(v5, (uint64_t)static __RKChangeSceneAction.noTargetSceneIdentifier);
  if (static UUID.== infix(_:_:)())
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v6 = static __RKActiveSceneManager.shared;
    swift_beginAccess();
    void v6[2] = 0;
    swift_release();
    swift_beginAccess();
    uint64_t v7 = v6[3];
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8)
    {
      uint64_t v30 = v0;
      uint64_t v31 = v4;
      swift_bridgeObjectRetain();
      int v9 = (uint64_t *)(v7 + 40);
      do
      {
        uint64_t v10 = *v9;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v12 = v6[2];
        unint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v10 + 8);
        swift_retain();
        swift_unknownObjectRetain();
        v13(v6, v12, ObjectType, v10);
        swift_unknownObjectRelease();
        swift_release();
        v9 += 2;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      uint64_t v1 = v30;
      uint64_t v4 = v31;
    }
    uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity);
    if (!v14) {
      return 1;
    }
    swift_retain();
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      uint64_t v16 = SceneNullable;
      id v17 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v17)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v16);
      }
      Scene.__interactionService.getter();
      swift_release();
      type metadata accessor for __RKEntityInteractionManager();
      uint64_t v24 = swift_dynamicCastClass();
      if (v24)
      {
        uint64_t v25 = v24;
        swift_beginAccess();
        uint64_t v26 = *(void *)(v25 + 56);
        swift_retain();
        swift_unknownObjectRelease();
        uint64_t v27 = type metadata accessor for AnchoringComponent.Target(0);
        os_log_type_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
        v28(v4, 1, 1, v27);
        swift_retain();
        __RKRuntimeSceneCoordinator.willSwap(fromEntity:toEntity:anchoringTarget:)(v14, 0, (uint64_t)v4);
        swift_release();
        outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnchoringComponent.Target?);
        specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
        if (v26)
        {
          uint64_t v23 = 1;
          v28(v4, 1, 1, v27);
          swift_retain();
          __RKRuntimeSceneCoordinator.didSwap(fromEntity:toEntity:anchoringTarget:)(v14, 0, (uint64_t)v4);
          swift_release();
          swift_release_n();
          outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnchoringComponent.Target?);
          return v23;
        }
        goto LABEL_25;
      }
      swift_unknownObjectRelease();
    }
    specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
LABEL_25:
    swift_release();
    return 1;
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  id v18 = *((id *)static __RKSceneAssetLookupTable.shared + 2);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v20 = objc_msgSend(v18, sel_objectForKey_, isa);

  if (v20)
  {
    char v21 = RKChangeSceneActionRuntimeTechnique.loadScene(_:)((uint64_t)v20);
    swift_release();
    return v21 & 1;
  }
  return 0;
}

uint64_t RKChangeSceneActionRuntimeTechnique.loadScene(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AnchoringComponent(0);
  v94  = *(void **)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  int v9 = (char *)v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent.Target?);
  MEMORY[0x270FA5388](v10 - 8);
  v95  = (uint64_t)v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity;
  uint64_t v13 = *(void *)&v1[OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity];
  v102  = 91;
  v103  = 0xE100000000000000;
  if (v13)
  {
    *(void *)&v100  = 0;
    *((void *)&v100 + 1)  = 0xE000000000000000;
    v98  = v13;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    unint64_t v15 = *((void *)&v100 + 1);
    uint64_t v14 = v100;
  }
  else
  {
    unint64_t v15 = 0xE300000000000000;
    uint64_t v14 = 7104878;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits  = 8285;
  v17._object  = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits  = StaticString.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits  = 8250;
  v19._object  = (void *)0xE200000000000000;
  String.append(_:)(v19);
  swift_release();
  unint64_t v20 = v103;
  uint64_t v21 = *(void *)&v1[v12];
  if (!v21)
  {
    os_log_type_t v33 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v33, &v102);
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  v92  = v9;
  v97  = v102;
  swift_retain();
  Entity.__fetchLoadContext()();
  uint64_t v22 = v102;
  uint64_t v23 = (void *)v103;
  uint64_t v24 = *(void *)(a1 + 16);
  RERetain();
  type metadata accessor for __SceneResource();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16)  = v24;
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
    v96  = 0;
    if (v23) {
      goto LABEL_17;
    }
LABEL_11:
    v102  = v97;
    v103  = v20;
    os_log_type_t v34 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v34, &v102);
    swift_release();
    swift_setDeallocating();
    RERelease();
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  uint64_t v27 = SceneNullable;
  v93  = v23;
  uint64_t v28 = v7;
  uint64_t v29 = v21;
  uint64_t v30 = v22;
  unint64_t v31 = v20;
  id v32 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v32)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v27);
  }
  Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  uint64_t v35 = swift_dynamicCastClass();
  if (v35)
  {
    uint64_t v36 = v35;
    swift_beginAccess();
    v96  = *(void *)(v36 + 56);
    swift_retain();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    v96  = 0;
  }
  unint64_t v20 = v31;
  uint64_t v22 = v30;
  uint64_t v21 = v29;
  uint64_t v7 = v28;
  uint64_t v23 = v93;
  if (!v93) {
    goto LABEL_11;
  }
LABEL_17:
  v93  = v2;
  uint64_t v38 = (void *)__SceneResource.makeAnchorEntity(fileName:)(v22, v23);
  v90[1]  = inited;
  v91  = v20;
  v90[0]  = v22;
  v102  = v22;
  v103  = (unint64_t)v23;
  swift_bridgeObjectRetain_n();
  uint64_t v39 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  swift_beginAccess();
  objc_setAssociatedObject(v38, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v39, (void *)0x301);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v40 = type metadata accessor for AnchoringComponent.Target(0);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56);
  uint64_t v42 = v95;
  v41(v95, 1, 1, v40);
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v6);
  int v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v94[6])(v6, 1, v7);
  if (v43 == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for AnchoringComponent?);
    swift_release();
    unint64_t v44 = v91;
    v102  = v97;
    v103  = v91;
    os_log_type_t v45 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v45, &v102);
  }
  else
  {
    uint64_t v46 = (uint64_t)v92;
    outlined init with take of AnchoringComponent((uint64_t)v6, (uint64_t)v92, type metadata accessor for AnchoringComponent);
    swift_release();
    unint64_t v44 = v91;
    v102  = v97;
    v103  = v91;
    os_log_type_t v47 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v47, &v102);
    outlined destroy of BodyTrackingComponent?(v42, &demangling cache variable for type metadata for AnchoringComponent.Target?);
    outlined init with take of AnchoringComponent(v46, v42, type metadata accessor for AnchoringComponent.Target);
    v41(v42, 0, 1, v40);
  }
  uint64_t v48 = specialized HasHierarchy.parent.getter();
  swift_release();
  uint64_t v49 = v90[0];
  if (v48)
  {
    v102  = v97;
    v103  = v44;
    os_log_type_t v50 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v50, &v102);
    uint64_t v51 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)&v102, 0);
    v102  = v49;
    v103  = (unint64_t)v23;
    swift_bridgeObjectRetain_n();
    uint64_t v52 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v51, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v52, (void *)0x301);
    swift_endAccess();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    uint64_t v38 = v51;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v53 = type metadata accessor for Entity();
  swift_retain();
  RENetworkComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  specialized static Entity.enumerateCore(entity:recursive:block:)((uint64_t)v38, 1, v53);
  static UuidRemapHelper.remapIdentifiersAndInteractions(root:)((uint64_t)v38);
  swift_release();
  swift_retain();
  if (REShadowsGetEnableDefaultShadows()) {
    MEMORY[0x22A691220](v38[2], 1);
  }
  swift_release();
  swift_retain();
  Entity.generateCollisionShapes(recursive:)(1);
  swift_release();
  swift_retain();
  RKChangeSceneActionRuntimeTechnique.stopAnimations(rootEntity:)();
  swift_release();
  uint64_t v54 = specialized HasHierarchy.parent.getter();
  uint64_t v55 = v96;
  if (!v54)
  {
    type metadata accessor for AnchorEntity();
    uint64_t v60 = swift_dynamicCastClass();
    if (v60)
    {
      char v61 = (void *)v60;
      swift_retain();
      uint64_t v62 = specialized HasHierarchy.parent.getter();
      swift_release();
      if (!v62)
      {
        uint64_t v78 = swift_dynamicCastClass();
        if (v78)
        {
          uint64_t v79 = (void *)v78;
          swift_retain();
          v80  = REEntityGetSceneNullable();
          if (v80)
          {
            v81  = v80;
            v82  = (id)RESceneGetSwiftObject();
            type metadata accessor for Scene();
            if (v82)
            {
              v83  = swift_dynamicCastClassUnconditional();
            }
            else
            {
              swift_allocObject();
              v83  = Scene.init(coreScene:)(v81);
            }
            v84  = v83;
            v102  = v97;
            v103  = v44;
            v85  = static os_log_type_t.error.getter();
            specialized InteractionsLogger.log(_:_:)(v85, &v102);
            if (v55)
            {
              swift_retain();
              __RKRuntimeSceneCoordinator.willSwap(fromEntity:toEntity:anchoringTarget:)(v21, (uint64_t)v38, v95);
              swift_release();
            }
            RESceneRemoveEntity();
            swift_retain();
            swift_retain();
            specialized Scene.AnchorCollection.append(_:)((uint64_t)v79, v84);
            swift_release();
            swift_release();
            swift_beginAccess();
            swift_retain();
            v86  = objc_getAssociatedObject(v61, &static __SceneResourceCache.Entry.cacheEntryForEntityKey);
            swift_endAccess();
            swift_release();
            if (v86)
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
            }
            else
            {
              v100  = 0u;
              v101  = 0u;
            }
            outlined init with take of Any?((uint64_t)&v100, (uint64_t)&v102);
            if (v104)
            {
              type metadata accessor for __SceneResourceCache.Entry();
              if (swift_dynamicCast())
              {
                __SceneResourceCache.Entry.attach(toEntity:)(v79);
                swift_release();
LABEL_74:
                swift_retain();
                v88  = REEntityGetSceneNullable();
                if (v88)
                {
                  v89  = v88;
                  if ((id)RESceneGetSwiftObject())
                  {
                    swift_release();
                    swift_release_n();
                    swift_release();
                    uint64_t v68 = swift_dynamicCastClassUnconditional();
                  }
                  else
                  {
                    swift_allocObject();
                    uint64_t v68 = Scene.init(coreScene:)(v89);
                    swift_release();
                    swift_release_n();
                    swift_release();
                  }
                }
                else
                {
                  swift_release();
                  swift_release_n();
                  swift_release();
                  uint64_t v68 = 0;
                }
                uint64_t v42 = v95;
                goto LABEL_47;
              }
            }
            else
            {
              outlined destroy of BodyTrackingComponent?((uint64_t)&v102, (uint64_t *)&demangling cache variable for type metadata for Any?);
            }
            v102  = v97;
            v103  = v44;
            v87  = static os_log_type_t.error.getter();
            specialized InteractionsLogger.log(_:_:)(v87, &v102);
            goto LABEL_74;
          }
          swift_release();
        }
      }
      swift_release();
    }
    v102  = v97;
    v103  = v44;
    os_log_type_t v63 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v63, &v102);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of BodyTrackingComponent?(v42, &demangling cache variable for type metadata for AnchoringComponent.Target?);
    goto LABEL_9;
  }
  uint64_t v56 = v54;
  v102  = v97;
  v103  = v44;
  os_log_type_t v57 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v57, &v102);
  if (v55)
  {
    swift_retain();
    __RKRuntimeSceneCoordinator.willSwap(fromEntity:toEntity:anchoringTarget:)(v21, (uint64_t)v38, v42);
    swift_release();
  }
  specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
  v102  = v56;
  swift_retain();
  swift_retain();
  Entity.ChildCollection.doAppend(_:preservingWorldTransform:)((uint64_t)v38, 0);
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v58 = (void *)swift_retain();
  id v59 = objc_getAssociatedObject(v58, &static __SceneResourceCache.Entry.cacheEntryForEntityKey);
  swift_endAccess();
  swift_release();
  if (v59)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v100  = 0u;
    v101  = 0u;
  }
  outlined init with take of Any?((uint64_t)&v100, (uint64_t)&v102);
  if (v104)
  {
    type metadata accessor for __SceneResourceCache.Entry();
    if (swift_dynamicCast())
    {
      char v64 = (void *)swift_retain();
      __SceneResourceCache.Entry.attach(toEntity:)(v64);
      swift_release();
      swift_release();
      goto LABEL_42;
    }
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v102, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v102  = v97;
  v103  = v44;
  os_log_type_t v65 = static os_log_type_t.error.getter();
  specialized InteractionsLogger.log(_:_:)(v65, &v102);
LABEL_42:
  swift_retain();
  uint64_t v66 = REEntityGetSceneNullable();
  if (v66)
  {
    uint64_t v67 = v66;
    if ((id)RESceneGetSwiftObject())
    {
      swift_release();
      swift_release();
      type metadata accessor for Scene();
      uint64_t v68 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      type metadata accessor for Scene();
      swift_allocObject();
      uint64_t v68 = Scene.init(coreScene:)(v67);
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v68 = 0;
  }
LABEL_47:
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  float32x4_t v69 = static __RKActiveSceneManager.shared;
  swift_beginAccess();
  v69[2]  = v68;
  swift_retain_n();
  swift_release();
  swift_beginAccess();
  uint64_t v70 = *(void *)(v69[3] + 16);
  if (v70)
  {
    v93  = (void *)v68;
    v94  = v38;
    v92  = (char *)swift_bridgeObjectRetain();
    char v71 = (uint64_t *)(v92 + 40);
    do
    {
      uint64_t v72 = *v71;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v74 = v69[2];
      int v75 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v72 + 8);
      swift_retain();
      swift_unknownObjectRetain();
      v75(v69, v74, ObjectType, v72);
      swift_unknownObjectRelease();
      swift_release();
      v71 += 2;
      --v70;
    }
    while (v70);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v42 = v95;
    uint64_t v55 = v96;
    uint64_t v38 = v94;
  }
  else
  {
    swift_release();
  }
  unint64_t v76 = v91;
  if (v55)
  {
    swift_retain();
    __RKRuntimeSceneCoordinator.didSwap(fromEntity:toEntity:anchoringTarget:)(v21, (uint64_t)v38, v42);
    swift_release();
  }
  v99[0]  = v97;
  v99[1]  = v76;
  uint64_t v77 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v77, v99);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v42, &demangling cache variable for type metadata for AnchoringComponent.Target?);
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t implicit closure #3 in RKChangeSceneActionRuntimeTechnique.loadScene(_:)()
{
  _StringGuts.grow(_:)(40);
  v0._object  = (void *)0x8000000228359E80;
  v0._countAndFlagsBits  = 0xD000000000000026;
  String.append(_:)(v0);
  swift_getErrorValue();
  v1._countAndFlagsBits  = Error.localizedDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits  = 0;
  v2._object  = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t RKChangeSceneActionRuntimeTechnique.stopAnimations(rootEntity:)()
{
  REAnimationComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    uint64_t result = REAnimationComponentGetEntryCount();
    if (result < 0) {
      goto LABEL_49;
    }
    uint64_t v1 = result;
    if (result)
    {
      uint64_t v2 = 0;
      do
      {
        uint64_t v3 = v2 + 1;
        REAnimationComponentEntrySetRequest();
        uint64_t v2 = v3;
      }
      while (v1 != v3);
    }
    REAnimationComponentStopAllAnimations();
    RENetworkMarkComponentDirty();
  }
  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
LABEL_43:
    return swift_release();
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v4 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_50;
    }
    uint64_t v5 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v6 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result) {
        goto LABEL_48;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        uint64_t Object = RECustomComponentGetObject();
        if (Object)
        {
          uint64_t v8 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8)) {
            BOOL v9 = 1;
          }
          else {
            BOOL v9 = v8 == 0;
          }
          if (v9)
          {
            uint64_t result = swift_retain();
          }
          else
          {
            int v10 = *v8;
            uint64_t v11 = String.init(utf8String:)();
            if (v12) {
              Swift::Int v13 = v11;
            }
            else {
              Swift::Int v13 = 0;
            }
            if (v12) {
              unint64_t v14 = v12;
            }
            else {
              unint64_t v14 = 0xE000000000000000;
            }
            uint64_t v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            uint64_t result = swift_allocObject();
            *(void *)(result + 16)  = v8;
          }
          if (!v8) {
            goto LABEL_51;
          }
          swift_retain();
          uint64_t v15 = String.init(utf8String:)();
          unint64_t v17 = v16;
          swift_release();
          uint64_t v18 = v17 ? v15 : 0;
          unint64_t v19 = v17 ? v17 : 0xE000000000000000;
          unint64_t v20 = (NSString *)MEMORY[0x22A688A50](v18, v19);
          swift_bridgeObjectRelease();
          Class v21 = NSClassFromString(v20);

          swift_release();
          if (v21)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            uint64_t v22 = swift_dynamicCastMetatype();
            if (v22)
            {
              uint64_t v23 = (*(uint64_t (**)(void))(v22 + 232))();
              uint64_t v24 = *(void *)(v23 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v24, 0);
              *(void *)(v23 + 16)  = v5;
              MEMORY[0x22A68E750](v5, v23);
              swift_release();
              goto LABEL_41;
            }
          }
        }
      }
      uint64_t v6 = makeEntity(for:)(v5);
    }
    uint64_t v23 = v6;
LABEL_41:
    uint64_t result = REEntityGetChildCount();
    if (v4 >= result) {
      goto LABEL_47;
    }
    ++v4;
    RKChangeSceneActionRuntimeTechnique.stopAnimations(rootEntity:)(v23);
    swift_release();
    if (v4 >= REEntityGetChildCount()) {
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t RKChangeSceneActionRuntimeTechnique.__ivar_destroyer()
{
  return swift_release();
}

uint64_t RKChangeSceneActionRuntimeTechnique.__deallocating_deinit()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC17RealityFoundation33RKChangeSceneActionBasicTechnique_targetSceneIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for RKChangeSceneActionRuntimeTechnique()
{
  return type metadata accessor for RKChangeSceneActionRuntimeTechnique();
}

uint64_t type metadata accessor for RKChangeSceneActionRuntimeTechnique()
{
  uint64_t result = type metadata singleton initialization cache for RKChangeSceneActionRuntimeTechnique;
  if (!type metadata singleton initialization cache for RKChangeSceneActionRuntimeTechnique) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RKChangeSceneActionRuntimeTechnique()
{
  return swift_updateClassMetadata2();
}

uint64_t partial apply for implicit closure #3 in RKChangeSceneActionRuntimeTechnique.loadScene(_:)()
{
  return implicit closure #3 in RKChangeSceneActionRuntimeTechnique.loadScene(_:)();
}

uint64_t outlined init with take of AnchoringComponent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  return implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(*(void **)(v0 + 16), 28, 0xD00000000000001ALL, (void *)0x8000000228359FE0);
}

uint64_t partial apply for implicit closure #4 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  return implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(*(void **)(v0 + 16), 26, 0xD000000000000018, (void *)0x8000000228359FC0);
}

uint64_t partial apply for implicit closure #7 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  return implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(*(void **)(v0 + 16), 35, 0xD000000000000021, (void *)0x8000000228359F90);
}

uint64_t partial apply for implicit closure #5 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  return implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(*(void **)(v0 + 16), 41, 0xD000000000000027, (void *)0x8000000228359F60);
}

uint64_t partial apply for implicit closure #3 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  return implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(*(void **)(v0 + 16), 27, 0xD000000000000019, (void *)0x8000000228359F40);
}

uint64_t partial apply for implicit closure #3 in RKChangeSceneActionRuntimeTechnique.removeAllScenes()()
{
  return implicit closure #3 in RKChangeSceneActionRuntimeTechnique.removeAllScenes()(*(unsigned char *)(v0 + 16));
}

uint64_t SceneComponentCollection.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t result = RESceneDereferenceComponentCollectionPosition();
  if (result)
  {
    uint64_t v7 = *(void *)(v3 + 16);
    BOOL v8 = __OFADD__(v7, 1);
    uint64_t v9 = v7 + 1;
    if (v8)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v3 + 16)  = v9;
      uint64_t v10 = *(void *)(a1 + 16);
      v14[3]  = MEMORY[0x263F8DD08];
      v14[0]  = result;
      outlined init with copy of Any((uint64_t)v14, (uint64_t)v13);
      swift_dynamicCast();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)(a1 + 24) + 64))(v12, v10);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 0, 1, v10);
    }
  }
  else
  {
    *(void *)(v3 + 16)  = *(void *)(v3 + 8);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
    return v11(a2, 1, 1);
  }
  return result;
}

uint64_t SceneComponentCollection.startIndex.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t SceneComponentCollection.endIndex.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t SceneComponentCollection.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  long long v10 = *v2;
  if (a1 < 0) {
    __break(1u);
  }
  uint64_t v11 = a1;
  uint64_t v4 = RESceneDereferenceComponentCollectionPosition();
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    v9[3]  = MEMORY[0x263F8DD08];
    v9[0]  = v4;
    outlined init with copy of Any((uint64_t)v9, (uint64_t)v8);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(a2 + 24) + 64))(v7, v5);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

Swift::UInt __swiftcall SceneComponentCollection.index(after:)(Swift::UInt after)
{
  BOOL v1 = __CFADD__(after, 1);
  Swift::UInt result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance SceneComponentCollection<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SceneComponentCollection.startIndex.getter();
  *a1  = result;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance SceneComponentCollection<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SceneComponentCollection.endIndex.getter();
  *a1  = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance SceneComponentCollection<A>(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1  = v6;
  v6[4]  = SceneComponentCollection.subscript.read(v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance IKRig.JointCollection;
}

void (*SceneComponentCollection.subscript.read(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v5 = *(void *)(a3 + 16);
  *a1  = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  a1[1]  = v6;
  a1[2]  = malloc(*(void *)(v6 + 64));
  SceneComponentCollection.subscript.getter(a2, a3);
  return SceneComponentCollection.subscript.read;
}

void SceneComponentCollection.subscript.read(void *a1)
{
  BOOL v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance SceneComponentCollection<A>()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t protocol witness for Collection.indices.getter in conformance SceneComponentCollection<A>()
{
  return MEMORY[0x270F9E1B8]();
}

uint64_t protocol witness for Collection.count.getter in conformance SceneComponentCollection<A>()
{
  return MEMORY[0x270F9E138]();
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance SceneComponentCollection<A>()
{
  return MEMORY[0x270F9E150]();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance SceneComponentCollection<A>()
{
  return MEMORY[0x270F9E148]();
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance SceneComponentCollection<A>()
{
  return MEMORY[0x270F9E180]();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance SceneComponentCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x263F8D870], MEMORY[0x263F8D170]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x263F8D1A0], MEMORY[0x263F8D180]);
}

void *protocol witness for Collection.index(after:) in conformance SceneComponentCollection<A>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result == -1) {
    __break(1u);
  }
  else {
    *a2  = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance SceneComponentCollection<A>(void *result)
{
  if (*result == -1) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance SceneComponentCollection<A>()
{
  return Sequence<>.makeIterator()();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance SceneComponentCollection<A>(uint64_t a1)
{
  WitnessTable  = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SceneComponentCollection<A>()
{
  return specialized Collection._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance SceneComponentCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x22A688D10](a1, a2, a3, a4, a5);
}

uint64_t Scene.SceneComponentTypeTable.deinit()
{
  swift_release();
  return v0;
}

uint64_t Scene.SceneComponentTypeTable.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t Scene.components.getter()
{
  type metadata accessor for Scene.SceneComponentTypeTable();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16)  = v0;
  swift_retain();
  return v1;
}

uint64_t type metadata accessor for Scene.SceneComponentTypeTable()
{
  return self;
}

uint64_t base witness table accessor for Sequence in SceneComponentCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in SceneComponentCollection<A>()
{
  return MEMORY[0x263F8D9E8];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in SceneComponentCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in SceneComponentCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SceneComponentCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for SceneComponentCollection(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SceneComponentCollection(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40)  = v3;
  return result;
}

uint64_t type metadata accessor for SceneComponentCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for Scene.SceneComponentTypeTable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Scene.SceneComponentTypeTable);
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness  = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  BOOL v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v17 - v10;
  v17[1]  = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness)  = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v8, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    unint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v8, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  unint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness  = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t specialized Collection._copyToContiguousArray()()
{
  return MEMORY[0x270F9FA60]();
}

Swift::Int __swiftcall UniqueIDManager.generateNextUnassignedID()()
{
  uint64_t v1 = (void *)v0;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  Swift::Int result = swift_beginAccess();
  uint64_t v5 = v1[3];
  for (i = v1[4]; *(void *)(v5 + 16); uint64_t v5 = v1[3])
  {
    Swift::Int result = static Hasher._hash(seed:_:)();
    uint64_t v6 = -1 << *(unsigned char *)(v5 + 32);
    unint64_t v7 = result & ~v6;
    if (((*(void *)(v5 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
      break;
    }
    uint64_t v8 = *(void *)(v5 + 48);
    if (*(void *)(v8 + 8 * v7) != i)
    {
      uint64_t v9 = ~v6;
      do
      {
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_9;
        }
      }
      while (*(void *)(v8 + 8 * v7) != i);
    }
    uint64_t v10 = v1[4];
    uint64_t i = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    v1[4]  = i;
  }
LABEL_9:
  uint64_t v11 = v1[4];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12)
  {
LABEL_13:
    __break(1u);
  }
  else
  {
    v1[4]  = v13;
    Swift::Int result = specialized Set.contains(_:)(i, v5);
    if ((result & 1) == 0)
    {
      swift_beginAccess();
      specialized Set._Variant.insert(_:)(&v15, i);
      swift_endAccess();
      unint64_t v14 = (os_unfair_lock_s *)v1[2];
      swift_retain();
      os_unfair_lock_unlock(v14 + 4);
      swift_release();
      return i;
    }
  }
  __break(1u);
  return result;
}

uint64_t UniqueIDManager.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UniqueIDManager()
{
  return self;
}

uint64_t HasCollision.collision.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);
  swift_release();
  swift_bridgeObjectRelease();
  return v3(v5, 0);
}

uint64_t HasCollision.collision.getter@<X0>(void *a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);

  return swift_release();
}

uint64_t key path setter for HasCollision.collision : <A>A(long long *a1)
{
  uint64_t v1 = *((void *)a1 + 2);
  long long v3 = *a1;
  uint64_t v4 = v1;
  swift_bridgeObjectRetain();
  return HasCollision.collision.setter((uint64_t *)&v3);
}

void (*HasCollision.collision.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  unint64_t v7 = malloc(0x30uLL);
  *a1  = v7;
  v7[4]  = a3;
  v7[5]  = v3;
  v7[3]  = a2;
  HasCollision.collision.getter(v7);
  return HasCollision.collision.modify;
}

void HasCollision.collision.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  v5[0]  = **a1;
  v5[1]  = v3;
  v5[2]  = v4;
  if (a2)
  {
    swift_bridgeObjectRetain();
    HasCollision.collision.setter(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    HasCollision.collision.setter(v5);
  }

  free(v2);
}

double sub_228131104@<D0>(uint64_t a1@<X8>)
{
  HasCollision.collision.getter(&v4);
  uint64_t v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1  = v4;
  *(void *)(a1 + 16)  = v2;
  return result;
}

uint64_t sub_22813114C()
{
  return 16;
}

__n128 sub_228131158(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2  = *a1;
  return result;
}

uint64_t REAudioGeneratorBlockConfigurationWrapper.__deallocating_deinit()
{
  REAudioGeneratorBlockConfigurationDestroy();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REAudioGeneratorBlockConfigurationWrapper()
{
  return self;
}

uint64_t QuerySelectors.ComponentQueryResult.__allocating_init(entity:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16)  = a1;
  return result;
}

uint64_t QuerySelectors.ComponentQueryResult.entity.getter()
{
  specialized QuerySelectors.ComponentQueryResult.entity.getter();

  return swift_retain();
}

uint64_t QuerySelectors.ComponentQueryResult.entity.setter(uint64_t a1)
{
  specialized QuerySelectors.ComponentQueryResult.entity.setter(a1);

  return swift_release();
}

uint64_t (*QuerySelectors.ComponentQueryResult.entity.modify(void *a1))(void *a1)
{
  a1[1]  = v1;
  uint64_t result = *(uint64_t (**)(void *))(v1 + 16);
  if (result)
  {
    *a1  = result;
    swift_retain();
    return QuerySelectors.ComponentQueryResult.entity.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t QuerySelectors.ComponentQueryResult.entity.modify(void *a1)
{
  *(void *)(a1[1] + 16)  = *a1;
  return swift_release();
}

uint64_t QuerySelectors.ComponentQueryResult._entity.setter(uint64_t a1)
{
  *(void *)(v1 + 16)  = a1;
  return swift_release();
}

uint64_t QuerySelectors.ComponentQueryResult.init(entity:)(uint64_t a1)
{
  *(void *)(v1 + 16)  = a1;
  return v1;
}

void QuerySelectors.ComponentQueryResult.component.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  long long v4 = *(ValueMetadata **)(*v1 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)v9 - v6;
  if (v1[2])
  {
    v9[1]  = v1[2];
    Entity.ComponentSet.subscript.getter(v4, *(void *)(v3 + 88), (uint64_t)v7);
    Description  = (void (**)(void, char *, ValueMetadata *))v4[-1].Description;
    if (((unsigned int (*)(char *, uint64_t, ValueMetadata *))Description[6])(v7, 1, v4) != 1)
    {
      Description[4](a1, v7, v4);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t QuerySelectors.ComponentQueryResult.component.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  specialized QuerySelectors.ComponentQueryResult.component.setter(a1);
  long long v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

void (*QuerySelectors.ComponentQueryResult.component.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1  = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[1]  = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2]  = v5;
  size_t v6 = *(void *)(v5 + 64);
  void v3[3] = malloc(v6);
  unint64_t v7 = malloc(v6);
  v3[4]  = v7;
  QuerySelectors.ComponentQueryResult.component.getter((uint64_t)v7);
  return QuerySelectors.ComponentQueryResult.component.modify;
}

void QuerySelectors.ComponentQueryResult.component.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    specialized QuerySelectors.ComponentQueryResult.component.setter((uint64_t)v3);
    unint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized QuerySelectors.ComponentQueryResult.component.setter(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t QuerySelectors.ComponentQueryResult.deinit()
{
  swift_release();
  return v0;
}

uint64_t QuerySelectors.ComponentQueryResult.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t specialized QuerySelectors.ComponentQueryResult.entity.getter()
{
  uint64_t result = *(void *)(v0 + 16);
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t specialized QuerySelectors.ComponentQueryResult.entity.setter(uint64_t a1)
{
  *(void *)(v1 + 16)  = a1;
  swift_retain();

  return swift_release();
}

void specialized QuerySelectors.ComponentQueryResult.component.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(ValueMetadata **)(*v1 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v13 - v8;
  uint64_t v10 = v1[2];
  if (v10)
  {
    Description  = (void (**)(char *, void, ValueMetadata *, __n128))v4[-1].Description;
    Description[2](v9, a1, v4, v7);
    ((void (*)(char *, void, uint64_t, ValueMetadata *))Description[7])(v9, 0, 1, v4);
    v13[1]  = v10;
    uint64_t v12 = *(void *)(v3 + 88);
    swift_retain();
    specialized Entity.ComponentSet.subscript.setter((uint64_t)v9, (uint64_t)v4, v4, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_2281318D4@<X0>(uint64_t *a1@<X8>)
{
  *a1  = specialized QuerySelectors.ComponentQueryResult.entity.getter();

  return swift_retain();
}

uint64_t sub_228131910()
{
  uint64_t v0 = swift_retain();
  specialized QuerySelectors.ComponentQueryResult.entity.setter(v0);

  return swift_release();
}

uint64_t sub_228131954()
{
  return 16;
}

__n128 sub_228131960(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2  = *a1;
  return result;
}

void sub_22813196C(uint64_t a1@<X8>)
{
}

void sub_228131990(uint64_t a1)
{
}

uint64_t sub_2281319B4()
{
  return 16;
}

__n128 sub_2281319C0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2  = *a1;
  return result;
}

uint64_t type metadata completion function for QuerySelectors.ComponentQueryResult()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for QuerySelectors.ComponentQueryResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for QuerySelectors.ComponentQueryResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for QuerySelectors.ComponentQueryResult);
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.entity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.entity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.entity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.__allocating_init(entity:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.component.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.component.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.component.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t type metadata accessor for QuerySelectors.ComponentTypeSelector()
{
  return __swift_instantiateGenericMetadata();
}

double BillboardComponent.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(void *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 16)  = 1;
  *(_OWORD *)(a1 + 32)  = xmmword_22830ECA0;
  *(unsigned char *)(a1 + 48)  = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64)  = xmmword_22830ECB0;
  *(_DWORD *)(a1 + 80)  = 1065353216;
  return result;
}

uint64_t BillboardComponent.rotationAxis.getter()
{
  return *(void *)v0;
}

uint64_t BillboardComponent.rotationAxis.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t v3 = result;
  *(void *)(v3 + 8)  = a2;
  *(unsigned char *)(v3 + 16)  = a3 & 1;
  return result;
}

uint64_t (*BillboardComponent.rotationAxis.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BillboardComponent.upDirection.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t BillboardComponent.upDirection.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 32)  = result;
  *(void *)(v3 + 40)  = a2;
  *(unsigned char *)(v3 + 48)  = a3 & 1;
  return result;
}

uint64_t (*BillboardComponent.upDirection.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 BillboardComponent.forwardDirection.getter()
{
  return v0[4];
}

void BillboardComponent.forwardDirection.setter(__n128 a1)
{
  v1[4]  = a1;
}

uint64_t (*BillboardComponent.forwardDirection.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float BillboardComponent.blendFactor.getter()
{
  return *(float *)(v0 + 80);
}

void BillboardComponent.blendFactor.setter(float a1)
{
  *(float *)(v1 + 80)  = a1;
}

uint64_t (*BillboardComponent.blendFactor.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double static BillboardComponent.rotateAroundAllAxes.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(void *)(a1 + 8)  = 0;
  *(unsigned char *)(a1 + 16)  = 1;
  *(void *)(a1 + 32)  = 0;
  *(void *)(a1 + 40)  = 0;
  *(unsigned char *)(a1 + 48)  = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 64)  = xmmword_22830ECB0;
  *(_DWORD *)(a1 + 80)  = 1065353216;
  return result;
}

double static BillboardComponent.rotateAroundYAxis.getter@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1  = xmmword_22830ECA0;
  *(unsigned char *)(a1 + 16)  = 0;
  *(void *)(a1 + 32)  = 0;
  *(void *)(a1 + 40)  = 0;
  *(unsigned char *)(a1 + 48)  = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 64)  = xmmword_22830ECB0;
  *(_DWORD *)(a1 + 80)  = 1065353216;
  return result;
}

__n128 protocol witness for static Component.__fromCore(_:) in conformance BillboardComponent@<Q0>(uint64_t a1@<X8>)
{
  REBillboardComponentGetBlendFactor();
  int v3 = v2;
  REBillboardComponentGetForwardDirection();
  __n128 v12 = v4;
  UseUpDirection  = REBillboardComponentGetUseUpDirection();
  long long v6 = 0uLL;
  if (UseUpDirection) {
    REBillboardComponentGetUpDirection();
  }
  long long v11 = v6;
  UseRotationAxis  = REBillboardComponentGetUseRotationAxis();
  char v8 = UseRotationAxis;
  long long v9 = 0uLL;
  if (UseRotationAxis) {
    REBillboardComponentGetRotationAxis();
  }
  *(_OWORD *)a1  = v9;
  *(unsigned char *)(a1 + 16)  = v8 ^ 1;
  *(_OWORD *)(a1 + 32)  = v11;
  *(unsigned char *)(a1 + 48)  = UseUpDirection ^ 1;
  __n128 result = v12;
  *(__n128 *)(a1 + 64)  = v12;
  *(_DWORD *)(a1 + 80)  = v3;
  return result;
}

__n128 static BillboardComponent.__fromCore(_:)@<Q0>(uint64_t a1@<X8>)
{
  REBillboardComponentGetBlendFactor();
  int v3 = v2;
  REBillboardComponentGetForwardDirection();
  __n128 v12 = v4;
  UseUpDirection  = REBillboardComponentGetUseUpDirection();
  long long v6 = 0uLL;
  if (UseUpDirection) {
    REBillboardComponentGetUpDirection();
  }
  long long v11 = v6;
  UseRotationAxis  = REBillboardComponentGetUseRotationAxis();
  char v8 = UseRotationAxis;
  long long v9 = 0uLL;
  if (UseRotationAxis) {
    REBillboardComponentGetRotationAxis();
  }
  *(_OWORD *)a1  = v9;
  *(unsigned char *)(a1 + 16)  = v8 ^ 1;
  *(_OWORD *)(a1 + 32)  = v11;
  *(unsigned char *)(a1 + 48)  = UseUpDirection ^ 1;
  __n128 result = v12;
  *(__n128 *)(a1 + 64)  = v12;
  *(_DWORD *)(a1 + 80)  = v3;
  return result;
}

uint64_t BillboardComponent.__toCore(_:)()
{
  char v1 = *(unsigned char *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 48);
  REBillboardComponentSetBlendFactor();
  REBillboardComponentSetForwardDirection();
  if (v2)
  {
    REBillboardComponentSetUseUpDirection();
    if ((v1 & 1) == 0)
    {
LABEL_3:
      REBillboardComponentSetUseRotationAxis();
      REBillboardComponentSetRotationAxis();
      goto LABEL_6;
    }
  }
  else
  {
    REBillboardComponentSetUseUpDirection();
    REBillboardComponentSetUpDirection();
    if ((v1 & 1) == 0) {
      goto LABEL_3;
    }
  }
  REBillboardComponentSetUseRotationAxis();
LABEL_6:

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance BillboardComponent(_DWORD *a1@<X8>)
{
  *a1  = 5007;
}

void static BillboardComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1  = 5007;
}

__n128 __swift_memcpy84_16(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80)  = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48)  = v4;
  *(_OWORD *)(a1 + 64)  = v5;
  *(__n128 *)(a1 + 32)  = result;
  return result;
}

uint64_t getEnumTagSinglePayload for BillboardComponent(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 84)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BillboardComponent(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 72)  = 0;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_DWORD *)(result + 80)  = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 84)  = v3;
  return result;
}

ValueMetadata *type metadata accessor for BillboardComponent()
{
  return &type metadata for BillboardComponent;
}

uint64_t AudioFileResource.Configuration.init(from:)@<X0>(uint64_t a1@<X8>)
{
  if ((REAssetHandleIsLoaded() & 1) == 0)
  {
    if (one-time initialization token for audio != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.audio);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    __n128 v12 = Logger.logObject.getter();
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_227DD2000, v12, v11, "In order to construct an AudioFileResource.Configuration, the underlying CoreRE AudioFileAsset\nmust be at least partially loaded. Initializing AudioFileResource.Configuration with default\nvalues instead.", v13, 2u);
      MEMORY[0x22A696500](v13, -1, -1);
    }

    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    uint64_t v15 = 0;
    RandomizeStart  = 0;
    BOOL v16 = 0;
    char v17 = 1;
    double v18 = 0.0;
    char v19 = -1;
    char v20 = -1;
    goto LABEL_25;
  }
  Streaming  = REAudioFileAssetGetStreaming();
  LoopCount  = REAudioFileAssetGetLoopCount();
  RandomizeStart  = REAudioFileAssetGetRandomizeStart();
  id v5 = (id)REAudioFileAssetGetMixGroupName();
  if (v5)
  {
    long long v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  char v17 = Streaming ^ 1;
  NormalizationMode  = REAudioFileAssetGetNormalizationMode();
  REAudioFileAssetGetTargetLUFS();
  if (NormalizationMode == 2)
  {
    char v20 = 0;
  }
  else
  {
    double v18 = 0.0;
    if (NormalizationMode != 1)
    {
      char v20 = -1;
      goto LABEL_18;
    }
    if (v22 == *MEMORY[0x263F375A0])
    {
      char v20 = 2;
      goto LABEL_18;
    }
    char v20 = 1;
  }
  double v18 = v22;
LABEL_18:
  BOOL v16 = LoopCount != 0;
  CalibrationMode  = REAudioFileAssetGetCalibrationMode();
  uint64_t result = REAudioFileAssetGetCalibrationLevel();
  switch(CalibrationMode)
  {
    case 0:
      uint64_t v15 = 0;
      char v19 = -1;
LABEL_25:
      *(unsigned char *)a1  = v17;
      *(unsigned char *)(a1 + 1)  = v16;
      *(unsigned char *)(a1 + 2)  = RandomizeStart;
      *(double *)(a1 + 8)  = v18;
      *(unsigned char *)(a1 + 16)  = v20;
      *(void *)(a1 + 24)  = v15;
      *(unsigned char *)(a1 + 32)  = v19;
      *(void *)(a1 + 40)  = v7;
      *(void *)(a1 + 48)  = v9;
      *(_DWORD *)(a1 + 56)  = 0;
      *(unsigned char *)(a1 + 60)  = 1;
      return result;
    case 1:
      char v19 = 0;
LABEL_24:
      uint64_t v15 = v24;
      goto LABEL_25;
    case 2:
      char v19 = 1;
      goto LABEL_24;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char *AudioFileResource.Configuration.init(loadingStrategy:shouldLoop:shouldRandomizeStartTime:normalization:calibration:mixGroupName:)@<X0>(unsigned char *result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8 = *a4;
  char v9 = *((unsigned char *)a4 + 8);
  uint64_t v10 = *a5;
  char v11 = *((unsigned char *)a5 + 8);
  *(unsigned char *)a8  = *result;
  *(unsigned char *)(a8 + 1)  = a2;
  *(unsigned char *)(a8 + 2)  = a3;
  *(void *)(a8 + 8)  = v8;
  *(unsigned char *)(a8 + 16)  = v9;
  *(void *)(a8 + 24)  = v10;
  *(unsigned char *)(a8 + 32)  = v11;
  *(void *)(a8 + 40)  = a6;
  *(void *)(a8 + 48)  = a7;
  *(_DWORD *)(a8 + 56)  = 0;
  *(unsigned char *)(a8 + 60)  = 1;
  return result;
}

void AudioFileResource.Configuration.loadingStrategy.getter(unsigned char *a1@<X8>)
{
  *a1  = *v1;
}

unsigned char *AudioFileResource.Configuration.loadingStrategy.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*AudioFileResource.Configuration.loadingStrategy.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.Configuration.shouldLoop.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AudioFileResource.Configuration.shouldLoop.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1)  = result;
  return result;
}

uint64_t (*AudioFileResource.Configuration.shouldLoop.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.Configuration.shouldRandomizeStartTime.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t AudioFileResource.Configuration.shouldRandomizeStartTime.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2)  = result;
  return result;
}

uint64_t (*AudioFileResource.Configuration.shouldRandomizeStartTime.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.Configuration.normalization.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(void *)a1  = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + 8)  = v2;
}

uint64_t AudioFileResource.Configuration.normalization.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 8)  = *(void *)result;
  *(unsigned char *)(v1 + 16)  = v2;
  return result;
}

uint64_t (*AudioFileResource.Configuration.normalization.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.Configuration.calibration.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  *(void *)a1  = *(void *)(v1 + 24);
  *(unsigned char *)(a1 + 8)  = v2;
}

uint64_t AudioFileResource.Configuration.calibration.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 24)  = *(void *)result;
  *(unsigned char *)(v1 + 32)  = v2;
  return result;
}

uint64_t (*AudioFileResource.Configuration.calibration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.Configuration.mixGroupName.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioFileResource.Configuration.mixGroupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40)  = a1;
  *(void *)(v2 + 48)  = a2;
  return result;
}

uint64_t (*AudioFileResource.Configuration.mixGroupName.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t AudioFileResource.Configuration.layoutTagOverride.getter()
{
  return *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int8 *)(v0 + 60) << 32);
}

uint64_t AudioFileResource.Configuration.layoutTagOverride.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 56)  = result;
  *(unsigned char *)(v1 + 60)  = BYTE4(result) & 1;
  return result;
}

uint64_t (*AudioFileResource.Configuration.layoutTagOverride.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.Configuration.hash(into:)()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 2);
  Swift::UInt64 v3 = *(void *)(v0 + 8);
  int v4 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt64 v5 = *(void *)(v0 + 24);
  int v6 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 48);
  Swift::UInt32 v12 = *(_DWORD *)(v0 + 56);
  int v8 = *(unsigned __int8 *)(v0 + 60);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
    if (v6 != 255) {
      goto LABEL_16;
    }
LABEL_12:
    Hasher._combine(_:)(0);
    if (!v7) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  Hasher._combine(_:)(1u);
  if (v4)
  {
    if (v4 != 1)
    {
      Hasher._combine(_:)(0);
      if (v6 != 255) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
    Swift::UInt v9 = 2;
  }
  else
  {
    Swift::UInt v9 = 1;
  }
  Hasher._combine(_:)(v9);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v3;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if (v6 == 255) {
    goto LABEL_12;
  }
LABEL_16:
  Hasher._combine(_:)(1u);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v5;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)((v6 & 1) != 0);
  Hasher._combine(_:)(v11);
  if (!v7)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    if (!v8) {
      goto LABEL_21;
    }
LABEL_14:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_13:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v8) {
    goto LABEL_14;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v12);
}

Swift::Int AudioFileResource.Configuration.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioFileResource.Configuration()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioFileResource.Configuration()
{
  return Hasher._finalize()();
}

BOOL specialized static AudioFileResource.Configuration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1);
  int v3 = *(unsigned __int8 *)(a1 + 2);
  double v28 = *(double *)(a1 + 8);
  double v25 = *(double *)(a1 + 24);
  int v32 = *(unsigned __int8 *)(a1 + 32);
  int v33 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  int v6 = *(_DWORD *)(a1 + 56);
  char v7 = *(unsigned char *)(a1 + 60);
  int v8 = *(unsigned __int8 *)(a2 + 1);
  int v9 = *(unsigned __int8 *)(a2 + 2);
  double v30 = *(double *)(a2 + 8);
  int v34 = *(unsigned __int8 *)(a2 + 16);
  double v24 = *(double *)(a2 + 24);
  BOOL v10 = *(unsigned char *)a1 == 0;
  int v31 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned char *)a1) {
    uint64_t v11 = 0x64616F6C657270;
  }
  else {
    uint64_t v11 = 0x6D6165727473;
  }
  uint64_t v27 = *(void *)(a2 + 40);
  uint64_t v29 = *(void *)(a2 + 48);
  if (v10) {
    unint64_t v12 = 0xE600000000000000;
  }
  else {
    unint64_t v12 = 0xE700000000000000;
  }
  int v23 = *(_DWORD *)(a2 + 56);
  if (*(unsigned char *)a2) {
    uint64_t v13 = 0x64616F6C657270;
  }
  else {
    uint64_t v13 = 0x6D6165727473;
  }
  if (*(unsigned char *)a2) {
    unint64_t v14 = 0xE700000000000000;
  }
  else {
    unint64_t v14 = 0xE600000000000000;
  }
  char v26 = *(unsigned char *)(a2 + 60);
  if (v11 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease_n();
    BOOL result = 0;
    if (v2 != v8 || ((v3 ^ v9) & 1) != 0) {
      return result;
    }
  }
  else
  {
    uint64_t v22 = v5;
    uint64_t v16 = v4;
    char v17 = v7;
    int v18 = v6;
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v19 & 1) == 0) {
      return result;
    }
    if ((v2 ^ v8)) {
      return result;
    }
    int v6 = v18;
    char v7 = v17;
    uint64_t v4 = v16;
    uint64_t v5 = v22;
    if ((v3 ^ v9)) {
      return result;
    }
  }
  if (v33 != 255)
  {
    if (v34 == 255) {
      return 0;
    }
    if (v33)
    {
      if (v33 != 1)
      {
        BOOL result = 0;
        if (v34 != 2 || v30 != 0.0) {
          return result;
        }
        goto LABEL_34;
      }
      BOOL result = 0;
      if (v34 != 1) {
        return result;
      }
    }
    else
    {
      BOOL result = 0;
      if (v34) {
        return result;
      }
    }
    if (v28 != v30) {
      return result;
    }
    goto LABEL_34;
  }
  if (v34 != 255) {
    return 0;
  }
LABEL_34:
  if (v32 == 255)
  {
    if (v31 != 255) {
      return 0;
    }
  }
  else
  {
    if (v31 == 255) {
      return 0;
    }
    if (v32)
    {
      if ((v31 & 1) == 0) {
        return 0;
      }
    }
    else if (v31)
    {
      return 0;
    }
    if (v25 != v24) {
      return 0;
    }
  }
  if (!v5)
  {
    if (v29) {
      return 0;
    }
LABEL_50:
    if ((v7 & 1) == 0)
    {
      char v21 = v26;
      if (v6 != v23) {
        char v21 = 1;
      }
      return (v21 & 1) == 0;
    }
    return (v26 & 1) != 0;
  }
  if (!v29) {
    return 0;
  }
  if (v4 == v27 && v5 == v29) {
    goto LABEL_50;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v20) {
    goto LABEL_50;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioFileResource.Configuration and conformance AudioFileResource.Configuration()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioFileResource.Configuration and conformance AudioFileResource.Configuration;
  if (!lazy protocol witness table cache variable for type AudioFileResource.Configuration and conformance AudioFileResource.Configuration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileResource.Configuration and conformance AudioFileResource.Configuration);
  }
  return result;
}

uint64_t initializeWithCopy for AudioFileResource.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v3;
  int v4 = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60)  = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 56)  = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioFileResource.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8)  = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24)  = v5;
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v6 = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60)  = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 56)  = v6;
  return a1;
}

uint64_t assignWithTake for AudioFileResource.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60)  = *(unsigned char *)(a2 + 60);
  return a1;
}

ValueMetadata *type metadata accessor for AudioFileResource.Configuration()
{
  return &type metadata for AudioFileResource.Configuration;
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(void))type metadata accessor for __RKEntityInteractionsComponent.Registration, __RKEntityInteractionsComponent.Registration.init(), (uint64_t *)&static __RKEntityInteractionsComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __RKEntityInteractionsComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKSceneUUIDComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(void))type metadata accessor for __RKSceneUUIDComponent.Registration, __RKSceneUUIDComponent.Registration.init(), (uint64_t *)&static __RKSceneUUIDComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKSceneUUIDComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __RKSceneUUIDComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __REAnchoring(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(void))type metadata accessor for __REAnchoring.Registration, __REAnchoring.Registration.init(), (uint64_t *)&static __REAnchoring.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __REAnchoring(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __REAnchoring.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKEntityTagsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(void))type metadata accessor for __RKEntityTagsComponent.Registration, __RKEntityTagsComponent.Registration.init(), (uint64_t *)&static __RKEntityTagsComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityTagsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __RKEntityTagsComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKEntityUUIDComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(void))type metadata accessor for __RKEntityUUIDComponent.Registration, __RKEntityUUIDComponent.Registration.init(), (uint64_t *)&static __RKEntityUUIDComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityUUIDComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __RKEntityUUIDComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKScenePhysics(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(void))type metadata accessor for __RKScenePhysics.Registration, __RKScenePhysics.Registration.init(), (uint64_t *)&static __RKScenePhysics.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(void), uint64_t *a5)
{
  a3(0);
  swift_allocObject();
  uint64_t result = a4();
  if (!v5)
  {
    uint64_t v9 = result;
    swift_beginAccess();
    *a5  = v9;
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKScenePhysics(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __RKScenePhysics.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2, void *a3)
{
  *a3  = 0;
  return swift_release();
}

uint64_t protocol witness for static QuerySelector.project(from:) in conformance QuerySelectors.ComponentTypeSelector<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static QuerySelector.project(from:)(a1, a2);
}

uint64_t static QuerySelector.project(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __n128 v5 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v11 - v6, a1, AssociatedTypeWitness, v5);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  int v9 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, v9 ^ 1u, 1, v8);
}

uint64_t static QuerySelectors.QueryTypeSelector.project(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
  __n128 v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);

  return v5(a3, 0, 1, a2);
}

uint64_t protocol witness for static QuerySelector.project(from:) in conformance QuerySelectors.QueryTypeSelector<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static QuerySelectors.QueryTypeSelector.project(from:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t dispatch thunk of static QuerySelector.project(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for QuerySelectors()
{
  return &type metadata for QuerySelectors;
}

uint64_t type metadata instantiation function for QuerySelectors.QueryTypeSelector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 8);
}

uint64_t type metadata accessor for QuerySelectors.QueryTypeSelector()
{
  return __swift_instantiateGenericMetadata();
}

BOOL static PhotogrammetryFileHelpers.isExistingDirectory(_:)()
{
  return specialized static PhotogrammetryFileHelpers.doesDirectoryExist(directory:)();
}

uint64_t static PhotogrammetryFileHelpers.requiredBytesCheckpointDir(maxNumImagesBytes:)(uint64_t a1)
{
  uint64_t v1 = (unsigned __int128)(a1 * (__int128)3) >> 64;
  uint64_t result = 3 * a1;
  if (v1 != result >> 63) {
    __break(1u);
  }
  return result;
}

uint64_t static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)(uint64_t a1)
{
  return specialized static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)(a1) & 1;
}

uint64_t static PhotogrammetryFileHelpers.bytesPerMegabyte.getter()
{
  return 1000000;
}

id one-time initialization function for byteFormatter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F086F0]), sel_init);
  objc_msgSend(v0, sel_setAllowedUnits_, 0xFFFFLL);
  objc_msgSend(v0, sel_setAdaptive_, 1);
  objc_msgSend(v0, sel_setIncludesUnit_, 1);
  id result = objc_msgSend(v0, sel_setCountStyle_, 0);
  static PhotogrammetryFileHelpers.byteFormatter  = (uint64_t)v0;
  return result;
}

id static PhotogrammetryFileHelpers.byteFormatter.getter()
{
  if (one-time initialization token for byteFormatter != -1) {
    swift_once();
  }
  id v0 = (void *)static PhotogrammetryFileHelpers.byteFormatter;

  return v0;
}

uint64_t one-time initialization function for maxNumImagesForMobileReconstruction()
{
  type metadata accessor for ObjectCaptureSession();
  uint64_t v0 = type metadata accessor for ObjectCaptureSession.HardwareSpecs();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ObjectCaptureSession.hardwareSpecs.getter();
  uint64_t v4 = ObjectCaptureSession.HardwareSpecs.maxNumImages.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  static PhotogrammetryFileHelpers.maxNumImagesForMobileReconstruction  = v4;
  return result;
}

uint64_t one-time initialization function for requiredBytesForImagesCaptureDirectory()
{
  if (one-time initialization token for maxNumImagesForMobileReconstruction != -1) {
    uint64_t result = swift_once();
  }
  if ((unsigned __int128)(static PhotogrammetryFileHelpers.maxNumImagesForMobileReconstruction * (__int128)5000000) >> 64 == (5000000 * static PhotogrammetryFileHelpers.maxNumImagesForMobileReconstruction) >> 63) {
    static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory  = 5000000
  }
                                                                            * static PhotogrammetryFileHelpers.maxNumImagesForMobileReconstruction;
  else {
    __break(1u);
  }
  return result;
}

uint64_t static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory.getter()
{
  if (one-time initialization token for requiredBytesForImagesCaptureDirectory != -1) {
    swift_once();
  }
  return static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory;
}

void one-time initialization function for temporaryDirectory()
{
  uint64_t v0 = type metadata accessor for URL();
  __swift_allocate_value_buffer(v0, static PhotogrammetryFileHelpers.temporaryDirectory);
  __swift_project_value_buffer(v0, (uint64_t)static PhotogrammetryFileHelpers.temporaryDirectory);
  id v1 = objc_msgSend(self, sel_defaultManager);
  id v2 = objc_msgSend(v1, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static PhotogrammetryFileHelpers.temporaryDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for temporaryDirectory != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static PhotogrammetryFileHelpers.temporaryDirectory);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t static PhotogrammetryFileHelpers.getAvailableStorage(ofDir:)(uint64_t a1)
{
  if (one-time initialization token for freeStorageProvider != -1) {
    swift_once();
  }

  return specialized PhotogrammetryFileHelpers.SystemFreeStorageProvider.freeStorageBytes(forDir:)(a1);
}

uint64_t one-time initialization function for freeStorageProvider()
{
  uint64_t v0 = type metadata accessor for PhotogrammetryFileHelpers.SystemFreeStorageProvider();
  uint64_t result = swift_allocObject();
  qword_2681C4120  = v0;
  unk_2681C4128  = &protocol witness table for PhotogrammetryFileHelpers.SystemFreeStorageProvider;
  static PhotogrammetryFileHelpers.freeStorageProvider  = result;
  return result;
}

uint64_t specialized static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)(uint64_t a1)
{
  v44[1]  = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = &off_264838000;
  if (URL.isFileURL.getter())
  {
    LOBYTE(v44[0])  = 0;
    id v8 = objc_msgSend(self, sel_defaultManager);
    uint64_t v9 = a1;
    uint64_t v10 = URL.path.getter();
    uint64_t v11 = (void *)MEMORY[0x22A688A50](v10);
    swift_bridgeObjectRelease();
    unsigned int v12 = objc_msgSend(v8, sel_fileExistsAtPath_isDirectory_, v11, v44);

    if (v12 && ((uint64_t)v44[0] & 1) != 0)
    {
      LOBYTE(v13)  = 1;
      return v13 & 1;
    }
    a1  = v9;
    uint64_t v7 = &off_264838000;
  }
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v42 = v15;
  uint64_t v16 = v3;
  char v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v41 = v1;
    uint64_t v20 = v19;
    char v21 = (void *)swift_slowAlloc();
    uint64_t v39 = v21;
    *(_DWORD *)uint64_t v20 = 141558274;
    uint64_t v43 = 1752392040;
    v44[0]  = v21;
    uint64_t v40 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12)  = 2080;
    lazy protocol witness table accessor for type URL and conformance URL();
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v16);
    _os_log_impl(&dword_227DD2000, v17, v18, "Creating directory: %{mask.hash}s...", (uint8_t *)v20, 0x16u);
    double v24 = v39;
    swift_arrayDestroy();
    double v25 = v24;
    uint64_t v7 = &off_264838000;
    MEMORY[0x22A696500](v25, -1, -1);
    MEMORY[0x22A696500](v20, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v16);
  }

  id v26 = [self (SEL)v7[161]];
  URL._bridgeToObjectiveC()(v27);
  uint64_t v29 = v28;
  v44[0]  = 0;
  unsigned int v13 = objc_msgSend(v26, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v28, 1, 0, v44);

  if (v13)
  {
    id v30 = v44[0];
    LOBYTE(v13)  = specialized static PhotogrammetryFileHelpers.doesDirectoryExist(directory:)();
    int v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      int v33 = (uint8_t *)swift_slowAlloc();
      int v34 = (void *)swift_slowAlloc();
      *(_DWORD *)int v33 = 136315138;
      v44[0]  = v34;
      if (v13) {
        uint64_t v35 = 0x2173736563637553;
      }
      else {
        uint64_t v35 = 0x216572756C696146;
      }
      uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, 0xE800000000000000, (uint64_t *)v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v31, v32, "... %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v34, -1, -1);
      MEMORY[0x22A696500](v33, -1, -1);
    }
  }
  else
  {
    id v36 = v44[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v13 & 1;
}

uint64_t specialized PhotogrammetryFileHelpers.SystemFreeStorageProvider.freeStorageBytes(forDir:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URLResourceValues();
  uint64_t v60 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v55 - v10;
  __n128 v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v55 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
  v16((char *)v55 - v14, a1, v5, v13);
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)logger);
    char v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v23 = 0;
      _os_log_impl(&dword_227DD2000, v21, v22, "Can't compute free storage of a non file URL!", v23, 2u);
      MEMORY[0x22A696500](v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    return 0;
  }
  uint64_t v58 = v2;
  uint64_t v59 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_22830EC60;
  os_log_type_t v18 = (void *)*MEMORY[0x263EFF848];
  *(void *)(inited + 32)  = *MEMORY[0x263EFF848];
  id v19 = v18;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease();
  uint64_t v24 = URLResourceValues.volumeAvailableCapacityForImportantUsage.getter();
  if (v25)
  {
    uint64_t v43 = v59;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)logger);
    ((void (*)(char *, char *, uint64_t))v16)(v8, v15, v43);
    os_log_type_t v45 = Logger.logObject.getter();
    uint64_t v46 = v43;
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      v63[0]  = v57;
      *(_DWORD *)uint64_t v48 = 141558274;
      uint64_t v61 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 12)  = 2080;
      uint64_t v56 = v48 + 14;
      lazy protocol witness table accessor for type URL and conformance URL();
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v51 = *(void (**)(char *, uint64_t))(v6 + 8);
      v51(v8, v46);
      _os_log_impl(&dword_227DD2000, v45, v47, "Can't get storage capacity for %{mask.hash}s so assuming 0!", (uint8_t *)v48, 0x16u);
      uint64_t v52 = v57;
      swift_arrayDestroy();
      MEMORY[0x22A696500](v52, -1, -1);
      MEMORY[0x22A696500](v48, -1, -1);
    }
    else
    {

      uint64_t v51 = *(void (**)(char *, uint64_t))(v6 + 8);
      v51(v8, v43);
    }
    (*(void (**)(char *, uint64_t))(v60 + 8))(v4, v58);
    v51(v15, v46);
    return 0;
  }
  uint64_t v26 = v24;
  uint64_t v27 = v59;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)logger);
  ((void (*)(char *, char *, uint64_t))v16)(v11, v15, v27);
  uint64_t v29 = Logger.logObject.getter();
  int v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, (os_log_type_t)v30))
  {
    v55[0]  = v29;
    LODWORD(v57)  = v30;
    uint64_t v31 = v27;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    v63[0]  = v56;
    *(_DWORD *)uint64_t v32 = 141558530;
    uint64_t v61 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 12)  = 2080;
    lazy protocol witness table accessor for type URL and conformance URL();
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v63);
    v55[1]  = (os_log_t)&v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = v31;
    id v36 = *(void (**)(char *, uint64_t))(v6 + 8);
    v36(v11, v35);
    *(_WORD *)(v32 + 22)  = 2082;
    if (one-time initialization token for byteFormatter != -1) {
      swift_once();
    }
    id v37 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, v26);
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;

    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v41 = v55[0];
    _os_log_impl(&dword_227DD2000, v55[0], (os_log_type_t)v57, "Storage capacity for: %{mask.hash}s == %{public}s", (uint8_t *)v32, 0x20u);
    uint64_t v42 = v56;
    swift_arrayDestroy();
    MEMORY[0x22A696500](v42, -1, -1);
    MEMORY[0x22A696500](v32, -1, -1);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v4, v58);
    v36(v15, v59);
  }
  else
  {

    uint64_t v53 = *(void (**)(char *, uint64_t))(v6 + 8);
    v53(v11, v27);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v4, v58);
    v53(v15, v27);
  }
  return v26;
}

BOOL specialized static PhotogrammetryFileHelpers.checkIfSufficientStorageSpace(requiredBytes:directory:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v46 - v9;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)logger);
  __n128 v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, a2, v4);
  uint64_t v14 = Logger.logObject.getter();
  int v52 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v14, (os_log_type_t)v52);
  uint64_t v54 = v5;
  uint64_t v55 = a1;
  if (v15)
  {
    uint64_t v48 = v13;
    uint64_t v49 = v12;
    uint64_t v50 = a2;
    uint64_t v51 = v7;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v47 = v17;
    *(_DWORD *)uint64_t v16 = 141558530;
    uint64_t v56 = 1752392040;
    uint64_t v57 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12)  = 2080;
    lazy protocol witness table accessor for type URL and conformance URL();
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v53 = *(void (**)(char *, uint64_t))(v5 + 8);
    v53(v10, v4);
    *(_WORD *)(v16 + 22)  = 2082;
    if (one-time initialization token for byteFormatter != -1) {
      swift_once();
    }
    id v20 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, a1);
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;

    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227DD2000, v14, (os_log_type_t)v52, "Checking for reconstruction storage space at url=\"%{mask.hash}s\" Required bytes=%{public}s...", (uint8_t *)v16, 0x20u);
    uint64_t v24 = v47;
    swift_arrayDestroy();
    MEMORY[0x22A696500](v24, -1, -1);
    MEMORY[0x22A696500](v16, -1, -1);

    a2  = v50;
    uint64_t v7 = v51;
    __n128 v13 = v48;
  }
  else
  {
    uint64_t v53 = *(void (**)(char *, uint64_t))(v5 + 8);
    v53(v10, v4);
  }
  if (one-time initialization token for freeStorageProvider != -1) {
    swift_once();
  }
  uint64_t v25 = specialized PhotogrammetryFileHelpers.SystemFreeStorageProvider.freeStorageBytes(forDir:)(a2);
  uint64_t v26 = v55;
  if (v25 < v55)
  {
    v13(v7, a2, v4);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 141558530;
      uint64_t v56 = 1752392040;
      uint64_t v57 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v37 + 12)  = 2080;
      lazy protocol witness table accessor for type URL and conformance URL();
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v53(v7, v4);
      *(_WORD *)(v37 + 22)  = 2082;
      if (one-time initialization token for byteFormatter != -1) {
        swift_once();
      }
      id v41 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, v25);
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;

      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v35, v36, "... Failed!  Not enough storage in %{mask.hash}s.  Only have: %{public}s.", (uint8_t *)v37, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v38, -1, -1);
      MEMORY[0x22A696500](v37, -1, -1);

      uint64_t v26 = v55;
    }
    else
    {
      v53(v7, v4);
    }
  }
  else
  {
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v57 = v30;
      *(_DWORD *)uint64_t v29 = 136446210;
      if (one-time initialization token for byteFormatter != -1) {
        swift_once();
      }
      id v31 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, v25);
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;

      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v27, v28, "... Success.  Have storage space of %{public}s", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v30, -1, -1);
      MEMORY[0x22A696500](v29, -1, -1);

      uint64_t v26 = v55;
    }
    else
    {
    }
  }
  return v25 >= v26;
}

BOOL specialized static PhotogrammetryFileHelpers.isEmptyDirectory(_:)()
{
  v16[1]  = *(id *)MEMORY[0x263EF8340];
  if (URL.isFileURL.getter())
  {
    LOBYTE(v16[0])  = 0;
    uint64_t v0 = self;
    id v1 = objc_msgSend(v0, sel_defaultManager);
    uint64_t v2 = URL.path.getter();
    uint64_t v3 = (void *)MEMORY[0x22A688A50](v2);
    swift_bridgeObjectRelease();
    unsigned int v4 = objc_msgSend(v1, sel_fileExistsAtPath_isDirectory_, v3, v16);

    if (v4)
    {
      if ((uint64_t)v16[0])
      {
        id v5 = objc_msgSend(v0, sel_defaultManager);
        uint64_t v6 = URL.path.getter();
        uint64_t v7 = (void *)MEMORY[0x22A688A50](v6);
        swift_bridgeObjectRelease();
        v16[0]  = 0;
        id v8 = objc_msgSend(v5, sel_contentsOfDirectoryAtPath_error_, v7, v16);

        id v9 = v16[0];
        if (v8)
        {
          uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          id v11 = v9;

          uint64_t v12 = *(void *)(v10 + 16);
          swift_bridgeObjectRelease();
          return v12 == 0;
        }
        id v14 = v16[0];
        BOOL v15 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
  return 0;
}

BOOL specialized static PhotogrammetryFileHelpers.isExistingDirectory(_:)()
{
  return specialized static PhotogrammetryFileHelpers.doesDirectoryExist(directory:)();
}

BOOL specialized static PhotogrammetryFileHelpers.doesDirectoryExist(directory:)()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((URL.isFileURL.getter() & 1) == 0) {
    return 0;
  }
  char v5 = 0;
  id v0 = objc_msgSend(self, sel_defaultManager);
  uint64_t v1 = URL.path.getter();
  uint64_t v2 = (void *)MEMORY[0x22A688A50](v1);
  swift_bridgeObjectRelease();
  unsigned int v3 = objc_msgSend(v0, sel_fileExistsAtPath_isDirectory_, v2, &v5);

  if (!v3) {
    return 0;
  }
  return v5 == 1;
}

ValueMetadata *type metadata accessor for PhotogrammetryFileHelpers()
{
  return &type metadata for PhotogrammetryFileHelpers;
}

uint64_t type metadata accessor for PhotogrammetryFileHelpers.SystemFreeStorageProvider()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t specialized HasHierarchy.parent.getter()
{
  Parent  = REEntityGetParent();
  if (!Parent) {
    return 0;
  }
  uint64_t v1 = Parent;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v5 = specialized static Entity.entityInfoType(_:)(v1);
    if (v5)
    {
      uint64_t v3 = (*(uint64_t (**)(void))(v5 + 232))();
      uint64_t v6 = *(void *)(v3 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v6, 0);
      *(void *)(v3 + 16)  = v1;
      MEMORY[0x22A68E750](v1, v3);
      swift_release();
      return v3;
    }
    return makeEntity(for:)(v1);
  }
  __break(1u);
  return result;
}

uint64_t Entity.anchor.getter()
{
  if (swift_conformsToProtocol2()) {
    Parent  = v0;
  }
  else {
    Parent  = 0;
  }
  if (Parent)
  {
    swift_retain();
    return Parent;
  }
  Parent  = REEntityGetParent();
  if (!Parent) {
    return Parent;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v2 = swift_dynamicCastClassUnconditional();
LABEL_13:
    Parent  = Entity.anchor.getter(v2);
    swift_release();
    return Parent;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v4 = specialized static Entity.entityInfoType(_:)(Parent);
    if (v4)
    {
      uint64_t v5 = (*(uint64_t (**)(void))(v4 + 232))();
      uint64_t v6 = *(void *)(v5 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v6, 0);
      *(void *)(v5 + 16)  = Parent;
      MEMORY[0x22A68E750](Parent, v5);
      uint64_t v2 = swift_release();
    }
    else
    {
      uint64_t v2 = makeEntity(for:)(Parent);
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t HasAnchoring.anchoring.setter(uint64_t a1)
{
  REAnchoringComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  AnchoringComponent.__toCore(_:)();
  HasAnchoring.removeActiveAnchor()();

  return outlined destroy of AnchoringComponent(a1);
}

uint64_t HasAnchoring.anchoring.getter@<X0>(uint64_t a1@<X8>)
{
  REAnchoringComponentGetComponentType();
  REEntityGetOrAddComponentByClass();

  return AnchoringComponent.init(from:)(a1);
}

uint64_t key path setter for HasAnchoring.anchoring : <A>A(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnchoringComponent(a1, (uint64_t)v4, type metadata accessor for AnchoringComponent);
  return HasAnchoring.anchoring.setter((uint64_t)v4);
}

Swift::Void __swiftcall HasAnchoring.removeActiveAnchor()()
{
  REAnchorComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REEntityRemoveComponent();
  }
}

void (*HasAnchoring.anchoring.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1  = v7;
  v7[1]  = a3;
  _OWORD v7[2] = v3;
  *uint64_t v7 = a2;
  size_t v8 = *(void *)(*(void *)(type metadata accessor for AnchoringComponent(0) - 8) + 64);
  v7[3]  = malloc(v8);
  id v9 = malloc(v8);
  v7[4]  = v9;
  REAnchoringComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  AnchoringComponent.init(from:)((uint64_t)v9);
  return HasAnchoring.anchoring.modify;
}

void HasAnchoring.anchoring.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    outlined init with copy of AnchoringComponent(*(void *)(*(void *)a1 + 32), (uint64_t)v3, type metadata accessor for AnchoringComponent);
    HasAnchoring.anchoring.setter((uint64_t)v3);
    outlined destroy of AnchoringComponent((uint64_t)v4);
  }
  else
  {
    HasAnchoring.anchoring.setter(*(void *)(*(void *)a1 + 32));
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t HasAnchoring.anchorIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  REAnchorComponentGetComponentType();
  if (REEntityGetComponentByClass()
    && (AnchorIdentifier  = (const unsigned __int8 *)REAnchorComponentGetAnchorIdentifier(),
        !uuid_is_null(AnchorIdentifier)))
  {
    UUID.init(uuid:)();
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    uint64_t v5 = v8;
    uint64_t v6 = a1;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v3 = type metadata accessor for UUID();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
    uint64_t v5 = v3;
    uint64_t v6 = a1;
    uint64_t v7 = 1;
  }

  return v4(v6, v7, 1, v5);
}

void HasAnchoring.reanchor(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for AnchoringComponent(0);
  uint64_t v6 = (int *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  id v11 = &v20[-v10];
  outlined init with copy of AnchoringComponent(a1, (uint64_t)&v20[-v10], type metadata accessor for AnchoringComponent.Target);
  *(void *)&v11[v6[7]]  = 1;
  *(void *)&v11[v6[8]]  = 1;
  uint64_t v12 = &v11[v6[9]];
  *((_OWORD *)v12 + 2)  = 0u;
  *((_OWORD *)v12 + 3)  = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1)  = 0u;
  v12[64]  = 1;
  if (a2)
  {
    *(double *)&long long v13 = HasTransform.transformMatrix(relativeTo:)(0);
    *(_OWORD *)uint64_t v12 = v13;
    *((_OWORD *)v12 + 1)  = v14;
    *((_OWORD *)v12 + 2)  = v15;
    *((_OWORD *)v12 + 3)  = v16;
    v12[64]  = 0;
  }
  outlined init with copy of AnchoringComponent((uint64_t)v11, (uint64_t)v8, type metadata accessor for AnchoringComponent);
  HasAnchoring.anchoring.setter((uint64_t)v8);
  swift_beginAccess();
  uint64_t v17 = static RealityFusionSession.sharedSession;
  if (static RealityFusionSession.sharedSession)
  {
    swift_beginAccess();
    if (v17[2])
    {
      id v18 = (id)RFServiceManagerGetAnchorManagementService();
      if (v18)
      {
        unint64_t v19 = v18;
        if (!(*(uint64_t (**)(void))(*(void *)v2 + 120))())
        {
          outlined destroy of AnchoringComponent((uint64_t)v11);

          return;
        }
        RFAnchorManagementUpdateAnchoringInScene();
        swift_release();
      }
    }
  }
  outlined destroy of AnchoringComponent((uint64_t)v11);
}

uint64_t outlined destroy of AnchoringComponent(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnchoringComponent(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of AnchoringComponent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_228135A74@<X0>(uint64_t a1@<X8>)
{
  return HasAnchoring.anchoring.getter(a1);
}

uint64_t sub_228135A9C()
{
  return 16;
}

__n128 sub_228135AA8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2  = *a1;
  return result;
}

double AnimationView.init(source:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, int a5@<W4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  int v20 = a4[1].u8[0];
  unsigned int v21 = v20 == 255;
  char v22 = *a6;
  char v23 = *a7;
  if (v20 == 255) {
    LOBYTE(v20)  = 0;
  }
  int32x2_t v24 = vdup_n_s32(v21);
  v25.i64[0]  = v24.u32[0];
  v25.i64[1]  = v24.u32[1];
  int8x16_t v32 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v25, 0x3FuLL)), (int8x16_t)xmmword_22831E960, *a4);
  char v33 = v20;
  char v35 = v22;
  char v34 = v23;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v32.i64, a5, &v35, &v34, a8, a13 & 1, (uint64_t)v36, a10, a11, a12, a14, a15 & 1, a16, a17 & 1);
  outlined init with copy of __REAssetService(a1, (uint64_t)&v32);
  AnimationView.source.setter((uint64_t)&v32);
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v26 = v36[7];
  long long v27 = v36[8];
  long long v28 = v36[5];
  *(_OWORD *)(a9 + 96)  = v36[6];
  *(_OWORD *)(a9 + 112)  = v26;
  *(_OWORD *)(a9 + 128)  = v27;
  *(void *)(a9 + 144)  = v37;
  long long v29 = v36[3];
  *(_OWORD *)(a9 + 32)  = v36[2];
  *(_OWORD *)(a9 + 48)  = v29;
  *(_OWORD *)(a9 + 64)  = v36[4];
  *(_OWORD *)(a9 + 80)  = v28;
  double result = *(double *)v36;
  long long v31 = v36[1];
  *(_OWORD *)a9  = v36[0];
  *(_OWORD *)(a9 + 16)  = v31;
  return result;
}

void *AnimationView.createResource()()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 88);
  if ((TimelineClipProperties.isModified.getter() & 1) == 0) {
    return TimelineDefinition.resource.getter();
  }
  if (v2)
  {
    BOOL v3 = *(void *)(v2 + 16) == 0;
  }
  else if (*(void *)(v1 + 16) && (ClipSourceRef  = RETimelineDefinitionCreateClipSourceRef()) != 0)
  {
    uint64_t v6 = ClipSourceRef;
    type metadata accessor for TimelineDefinition();
    *(void *)(swift_allocObject() + 16)  = v6;
    RERetain();
    RERelease();
    BOOL v3 = 0;
  }
  else
  {
    type metadata accessor for TimelineDefinition();
    *(void *)(swift_allocObject() + 16)  = 0;
    BOOL v3 = 1;
  }
  swift_retain();
  swift_release();
  if (v3) {
    return 0;
  }
  if (TimelineClipProperties.isClipped.getter()) {
    return (void *)TimelineClipProperties.createClip()();
  }
  if (!v2)
  {
    if (*(void *)(v1 + 16) && (uint64_t v7 = RETimelineDefinitionCreateClipSourceRef()) != 0)
    {
      uint64_t v8 = v7;
      type metadata accessor for TimelineDefinition();
      *(void *)(swift_allocObject() + 16)  = v8;
      RERetain();
      RERelease();
    }
    else
    {
      type metadata accessor for TimelineDefinition();
      *(void *)(swift_allocObject() + 16)  = 0;
    }
  }
  swift_retain();
  uint64_t v9 = TimelineDefinition.resource.getter();
  swift_release();
  return v9;
}

uint64_t AnimationView.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 128);
  if (*(void *)(v0 + 104))
  {
    uint64_t v4 = *(void *)(v0 + 96);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v0 + 144) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v0 + 112), *(void *)(v0 + 120), *(unsigned char *)(v0 + 128));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v0 + 112), *(void *)(v0 + 120), *(unsigned char *)(v0 + 128));
    swift_retain();
    uint64_t v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path getter for AnimationView.name : AnimationView@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = v3;
  long long v17 = *(_OWORD *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 144);
  uint64_t v18 = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  v14[2]  = *(_OWORD *)(a1 + 32);
  v14[3]  = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v14[4]  = *(_OWORD *)(a1 + 64);
  v14[5]  = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  v14[0]  = *(_OWORD *)a1;
  v14[1]  = v7;
  unint64_t v8 = *((void *)&v15 + 1);
  long long v9 = v16;
  unsigned __int8 v10 = v17;
  if (*((void *)&v15 + 1))
  {
    uint64_t v11 = v15;
    outlined retain of TimelineClipProperties((uint64_t)v14);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v9, *((uint64_t *)&v9 + 1), v10);
    swift_retain();
  }
  else if (*(void *)(v4 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v14);
    outlined copy of BindTarget?(v9, *((uint64_t *)&v9 + 1), v10);
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v11 = String.init(cString:)();
    unint64_t v8 = v12;
  }
  else
  {
    outlined retain of TimelineClipProperties((uint64_t)v14);
    outlined copy of BindTarget?(v9, *((uint64_t *)&v9 + 1), v10);
    swift_retain();
    uint64_t v11 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v9, *((uint64_t *)&v9 + 1), v10);
  swift_release();
  uint64_t result = outlined release of TimelineClipProperties((uint64_t)v14);
  *a2  = v11;
  a2[1]  = v8;
  return result;
}

uint64_t AnimationView.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 96)  = a1;
  *(void *)(v2 + 104)  = a2;
  return result;
}

uint64_t (*AnimationView.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2]  = v1;
  unint64_t v3 = *(void *)(v1 + 104);
  uint64_t v4 = *(void *)(v1 + 112);
  uint64_t v5 = *(void *)(v1 + 120);
  unsigned __int8 v6 = *(unsigned char *)(v1 + 128);
  if (v3)
  {
    uint64_t v7 = *(void *)(v1 + 96);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v4, v5, v6);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v1 + 144) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v1 + 112), *(void *)(v1 + 120), *(unsigned char *)(v1 + 128));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v7 = String.init(cString:)();
    unint64_t v3 = v8;
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v1 + 112), *(void *)(v1 + 120), *(unsigned char *)(v1 + 128));
    swift_retain();
    uint64_t v7 = 0;
    unint64_t v3 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v4, v5, v6);
  swift_release();
  *a1  = v7;
  a1[1]  = v3;
  return AnimationView.name.modify;
}

uint64_t AnimationView.name.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 96)  = v4;
    *(void *)(v3 + 104)  = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 96)  = v4;
    *(void *)(v3 + 104)  = v2;
  }
  return result;
}

uint64_t AnimationView.blendLayer.getter()
{
  if (*(unsigned char *)(v0 + 136) != 1) {
    return *(unsigned int *)(v0 + 132);
  }
  uint64_t result = *(void *)(*(void *)(v0 + 144) + 16);
  if (result) {
    return RETimelineDefinitionGetAnimationLayer();
  }
  return result;
}

uint64_t AnimationView.blendLayer.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 132)  = result;
  *(unsigned char *)(v1 + 136)  = 0;
  return result;
}

uint64_t *(*AnimationView.blendLayer.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1  = v1;
  if (*(unsigned char *)(v1 + 136) == 1)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 144) + 16);
    if (v3) {
      LODWORD(v3)  = RETimelineDefinitionGetAnimationLayer();
    }
  }
  else
  {
    LODWORD(v3)  = *(_DWORD *)(v1 + 132);
  }
  *(_DWORD *)(a1 + 8)  = v3;
  return AnimationView.blendLayer.modify;
}

uint64_t *AnimationView.blendLayer.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  *(_DWORD *)(v1 + 132)  = *((_DWORD *)result + 2);
  *(unsigned char *)(v1 + 136)  = 0;
  return result;
}

uint64_t AnimationView.fillMode.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 138))
  {
    uint64_t result = *(void *)(*(void *)(v1 + 144) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(v1 + 137);
  }
  *a1  = result;
  return result;
}

unsigned __int8 *AnimationView.fillMode.setter(unsigned __int8 *result)
{
  *(_WORD *)(v1 + 137)  = *result;
  return result;
}

unsigned __int8 *(*AnimationView.fillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1  = v1;
  if (*(unsigned char *)(v1 + 138))
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 144) + 16);
    if (v3) {
      LOBYTE(v3)  = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    LOBYTE(v3)  = *(unsigned char *)(v1 + 137);
  }
  *(unsigned char *)(a1 + 8)  = v3;
  return AnimationView.fillMode.modify;
}

unsigned __int8 *AnimationView.fillMode.modify(unsigned __int8 *result)
{
  *(_WORD *)(*(void *)result + 137)  = result[8];
  return result;
}

uint64_t AnimationView.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v4 = *(void *)(v1 + 120);
  int v5 = *(unsigned __int8 *)(v1 + 128);
  if (v5 == 255)
  {
    if (*(void *)(*(void *)(v1 + 144) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      long long v8 = v11;
      char v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      char v9 = 0;
      long long v8 = xmmword_22831E960;
    }
    *(_OWORD *)a1  = v8;
    *(unsigned char *)(a1 + 16)  = v9;
  }
  else
  {
    *(void *)a1  = v3;
    *(void *)(a1 + 8)  = v4;
    *(unsigned char *)(a1 + 16)  = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);

  return swift_release();
}

uint64_t key path setter for AnimationView.bindTarget : AnimationView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 112);
  uint64_t v6 = *(void *)(a2 + 120);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 128);
  outlined copy of BindTarget(*(void *)a1, v4, v7);
  uint64_t result = outlined consume of BindTarget?(v5, v6, v8);
  *(void *)(a2 + 112)  = v3;
  *(void *)(a2 + 120)  = v4;
  *(unsigned char *)(a2 + 128)  = v7;
  return result;
}

uint64_t AnimationView.bindTarget.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 112), *(void *)(v1 + 120), *(unsigned char *)(v1 + 128));
  *(void *)(v1 + 112)  = v2;
  *(void *)(v1 + 120)  = v3;
  *(unsigned char *)(v1 + 128)  = v4;
  return result;
}

uint64_t (*AnimationView.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24)  = v1;
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v4 = *(void *)(v1 + 120);
  int v5 = *(unsigned __int8 *)(v1 + 128);
  uint64_t v6 = *(void *)(v1 + 144);
  if (v5 == 255)
  {
    if (*(void *)(v6 + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v7 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v7, v8, (uint64_t)&v12);
      swift_bridgeObjectRelease();
      long long v9 = v12;
      char v10 = v13;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      char v10 = 0;
      long long v9 = xmmword_22831E960;
    }
    *(_OWORD *)a1  = v9;
    *(unsigned char *)(a1 + 16)  = v10;
  }
  else
  {
    *(void *)a1  = v3;
    *(void *)(a1 + 8)  = v4;
    *(unsigned char *)(a1 + 16)  = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  swift_release();
  return AnimationView.bindTarget.modify;
}

uint64_t AnimationView.bindTarget.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(v2 + 112);
  uint64_t v7 = *(void *)(v2 + 120);
  unsigned __int8 v8 = *(unsigned char *)(v2 + 128);
  if (a2)
  {
    outlined copy of BindTarget(*(void *)a1, v3, v5);
    outlined consume of BindTarget?(v6, v7, v8);
    *(void *)(v2 + 112)  = v4;
    *(void *)(v2 + 120)  = v3;
    *(unsigned char *)(v2 + 128)  = v5;
    return outlined consume of BindTarget(v4, v3, v5);
  }
  else
  {
    uint64_t result = outlined consume of BindTarget?(*(void *)(v2 + 112), *(void *)(v2 + 120), *(unsigned char *)(v2 + 128));
    *(void *)(v2 + 112)  = v4;
    *(void *)(v2 + 120)  = v3;
    *(unsigned char *)(v2 + 128)  = v5;
  }
  return result;
}

uint64_t AnimationView.trimStart.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  v8[6]  = *(_OWORD *)(v0 + 96);
  v8[7]  = v1;
  v8[8]  = *(_OWORD *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  void v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  void v8[4] = *(_OWORD *)(v0 + 64);
  v8[5]  = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0]  = *(_OWORD *)v0;
  v8[1]  = v4;
  if ((BYTE9(v8[0]) & 1) == 0) {
    return *(void *)&v8[0];
  }
  uint64_t v5 = *(void *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart  = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      uint64_t v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnimationView.trimStart.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8)  = a2 & 1;
  *(unsigned char *)(v2 + 9)  = 0;
  return result;
}

void (*AnimationView.trimStart.modify(void *a1))(uint64_t *a1)
{
  long long v3 = malloc(0xB0uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1  = v3;
  v3[21]  = v1;
  long long v5 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6)  = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7)  = v5;
  *((_OWORD *)v3 + 8)  = *(_OWORD *)(v1 + 128);
  v3[18]  = *(void *)(v1 + 144);
  long long v6 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2)  = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3)  = v6;
  long long v7 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4)  = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5)  = v7;
  long long v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1)  = v8;
  if ((*((unsigned char *)v3 + 9) & 1) == 0)
  {
    uint64_t v10 = *v3;
    char v11 = v3[1] & 1;
    goto LABEL_8;
  }
  if (!*(void *)(v3[18] + 16))
  {
LABEL_7:
    uint64_t v10 = 0;
    char v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipStart  = (uint64_t *)RETimelineDefinitionGetClipStart();
  if (!ClipStart)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  uint64_t v10 = *ClipStart;
  outlined release of TimelineClipProperties(v4);
  char v11 = 0;
LABEL_8:
  *(void *)(v4 + 152)  = v10;
  *(unsigned char *)(v4 + 160)  = v11;
  return AnimationView.trimStart.modify;
}

void AnimationView.trimStart.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 168);
  unsigned __int8 v3 = *(unsigned char *)(v1 + 160);
  *(void *)uint64_t v2 = *(void *)(v1 + 152);
  *(_WORD *)(v2 + 8)  = v3;
  free((void *)v1);
}

uint64_t AnimationView.trimEnd.getter()
{
  long long v1 = v0[7];
  long long v14 = v0[6];
  long long v15 = v1;
  long long v16 = v0[8];
  uint64_t v17 = *((void *)v0 + 18);
  long long v2 = v0[3];
  long long v10 = v0[2];
  long long v11 = v2;
  long long v3 = v0[5];
  long long v12 = v0[4];
  long long v13 = v3;
  long long v4 = v0[1];
  long long v8 = *v0;
  long long v9 = v4;
  if ((BYTE9(v4) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd  = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      uint64_t v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnimationView.trimEnd.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16)  = result;
  *(unsigned char *)(v2 + 24)  = a2 & 1;
  *(unsigned char *)(v2 + 25)  = 0;
  return result;
}

void (*AnimationView.trimEnd.modify(void *a1))(uint64_t *a1)
{
  long long v3 = malloc(0xB0uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1  = v3;
  v3[21]  = v1;
  long long v5 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6)  = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7)  = v5;
  *((_OWORD *)v3 + 8)  = *(_OWORD *)(v1 + 128);
  v3[18]  = *(void *)(v1 + 144);
  long long v6 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2)  = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3)  = v6;
  long long v7 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4)  = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5)  = v7;
  long long v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1)  = v8;
  if ((*((unsigned char *)v3 + 25) & 1) == 0)
  {
    uint64_t v10 = v3[2];
    char v11 = v3[3] & 1;
    goto LABEL_8;
  }
  if (!*(void *)(v3[18] + 16))
  {
LABEL_7:
    uint64_t v10 = 0;
    char v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipEnd  = (uint64_t *)RETimelineDefinitionGetClipEnd();
  if (!ClipEnd)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  uint64_t v10 = *ClipEnd;
  outlined release of TimelineClipProperties(v4);
  char v11 = 0;
LABEL_8:
  *(void *)(v4 + 152)  = v10;
  *(unsigned char *)(v4 + 160)  = v11;
  return AnimationView.trimEnd.modify;
}

void AnimationView.trimEnd.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 168);
  unsigned __int8 v3 = *(unsigned char *)(v1 + 160);
  *(void *)(v2 + 16)  = *(void *)(v1 + 152);
  *(_WORD *)(v2 + 24)  = v3;
  free((void *)v1);
}

uint64_t AnimationView.trimDuration.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v13 = *(_OWORD *)(v0 + 96);
  long long v14 = v1;
  long long v15 = *(_OWORD *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  long long v9 = *(_OWORD *)(v0 + 32);
  long long v10 = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v11 = *(_OWORD *)(v0 + 64);
  long long v12 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0]  = *(_OWORD *)v0;
  v8[1]  = v4;
  if ((BYTE9(v9) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v16 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipDuration  = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      uint64_t v5 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnimationView.trimDuration.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32)  = result;
  *(unsigned char *)(v2 + 40)  = a2 & 1;
  *(unsigned char *)(v2 + 41)  = 0;
  return result;
}

void (*AnimationView.trimDuration.modify(void *a1))(uint64_t *a1)
{
  long long v3 = malloc(0xB0uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1  = v3;
  v3[21]  = v1;
  long long v5 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6)  = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7)  = v5;
  *((_OWORD *)v3 + 8)  = *(_OWORD *)(v1 + 128);
  v3[18]  = *(void *)(v1 + 144);
  long long v6 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2)  = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3)  = v6;
  long long v7 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4)  = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5)  = v7;
  long long v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1)  = v8;
  if ((*((unsigned char *)v3 + 41) & 1) == 0)
  {
    uint64_t v10 = v3[4];
    char v11 = v3[5] & 1;
    goto LABEL_8;
  }
  if (!*(void *)(v3[18] + 16))
  {
LABEL_7:
    uint64_t v10 = 0;
    char v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipDuration  = (uint64_t *)RETimelineDefinitionGetClipDuration();
  if (!ClipDuration)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  uint64_t v10 = *ClipDuration;
  outlined release of TimelineClipProperties(v4);
  char v11 = 0;
LABEL_8:
  *(void *)(v4 + 152)  = v10;
  *(unsigned char *)(v4 + 160)  = v11;
  return AnimationView.trimDuration.modify;
}

void AnimationView.trimDuration.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 168);
  unsigned __int8 v3 = *(unsigned char *)(v1 + 160);
  *(void *)(v2 + 32)  = *(void *)(v1 + 152);
  *(_WORD *)(v2 + 40)  = v3;
  free((void *)v1);
}

double AnimationView.offset.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v12 = *(_OWORD *)(v0 + 96);
  long long v13 = v1;
  long long v14 = *(_OWORD *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  long long v9 = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v10 = *(_OWORD *)(v0 + 64);
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0]  = *(_OWORD *)v0;
  v8[1]  = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationView.offset.setter(double a1)
{
  *(double *)(v1 + 48)  = a1;
  *(unsigned char *)(v1 + 56)  = 0;
}

void (*AnimationView.offset.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1  = v3;
  double v5 = v3 + 19;
  v3[20]  = v1;
  long long v6 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6)  = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7)  = v6;
  *((_OWORD *)v3 + 8)  = *(_OWORD *)(v1 + 128);
  v3[18]  = *(void *)(v1 + 144);
  long long v7 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2)  = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3)  = v7;
  long long v8 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4)  = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5)  = v8;
  long long v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1)  = v9;
  if (v3[7])
  {
    uint64_t v10 = 0;
    if (*(void *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipOffset();
        uint64_t v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    uint64_t v10 = v3[6];
  }
  *double v5 = v10;
  return AnimationView.offset.modify;
}

void AnimationView.offset.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[20];
  *(void *)(v2 + 48)  = v1[19];
  *(unsigned char *)(v2 + 56)  = 0;
  free(v1);
}

double AnimationView.delay.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v11 = *(_OWORD *)(v0 + 96);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v9 = *(_OWORD *)(v0 + 64);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0]  = *(_OWORD *)v0;
  v8[1]  = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationView.delay.setter(double a1)
{
  *(double *)(v1 + 64)  = a1;
  *(unsigned char *)(v1 + 72)  = 0;
}

void (*AnimationView.delay.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1  = v3;
  double v5 = v3 + 19;
  v3[20]  = v1;
  long long v6 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6)  = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7)  = v6;
  *((_OWORD *)v3 + 8)  = *(_OWORD *)(v1 + 128);
  v3[18]  = *(void *)(v1 + 144);
  long long v7 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2)  = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3)  = v7;
  long long v8 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4)  = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5)  = v8;
  long long v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1)  = v9;
  if (v3[9])
  {
    uint64_t v10 = 0;
    if (*(void *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipDelay();
        uint64_t v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    uint64_t v10 = v3[8];
  }
  *double v5 = v10;
  return AnimationView.delay.modify;
}

void AnimationView.delay.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[20];
  *(void *)(v2 + 64)  = v1[19];
  *(unsigned char *)(v2 + 72)  = 0;
  free(v1);
}

float AnimationView.speed.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v11 = *(_OWORD *)(v0 + 96);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v9 = *(_OWORD *)(v0 + 64);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0]  = *(_OWORD *)v0;
  v8[1]  = v4;
  if ((v10 & 1) == 0) {
    return *((float *)&v9 + 3);
  }
  float v5 = 1.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      float v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationView.speed.setter(float a1)
{
  *(float *)(v1 + 76)  = a1;
  *(unsigned char *)(v1 + 80)  = 0;
}

void (*AnimationView.speed.modify(void *a1))(uint64_t *a1)
{
  long long v3 = (char *)malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1  = v3;
  float v5 = (float *)(v3 + 160);
  long long v6 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6)  = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7)  = v6;
  *((_OWORD *)v3 + 8)  = *(_OWORD *)(v1 + 128);
  *((void *)v3 + 18)  = *(void *)(v1 + 144);
  *((void *)v3 + 19)  = v1;
  long long v7 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2)  = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3)  = v7;
  long long v8 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4)  = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5)  = v8;
  long long v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1)  = v9;
  if (v3[80])
  {
    float v10 = 1.0;
    if (*(void *)(*((void *)v3 + 18) + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipSpeed();
        float v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    float v10 = *((float *)v3 + 19);
  }
  *float v5 = v10;
  return AnimationView.speed.modify;
}

void AnimationView.speed.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 152);
  *(_DWORD *)(v2 + 76)  = *(_DWORD *)(v1 + 160);
  *(unsigned char *)(v2 + 80)  = 0;
  free((void *)v1);
}

void AnimationView.repeatMode.getter(unsigned char *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 112);
  long long v11 = *(_OWORD *)(v1 + 96);
  long long v12 = v3;
  long long v13 = *(_OWORD *)(v1 + 128);
  uint64_t v14 = *(void *)(v1 + 144);
  long long v4 = *(_OWORD *)(v1 + 48);
  v9[2]  = *(_OWORD *)(v1 + 32);
  v9[3]  = v4;
  long long v5 = *(_OWORD *)(v1 + 80);
  v9[4]  = *(_OWORD *)(v1 + 64);
  long long v10 = v5;
  long long v6 = *(_OWORD *)(v1 + 16);
  v9[0]  = *(_OWORD *)v1;
  v9[1]  = v6;
  LOBYTE(v7)  = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    uint64_t v7 = *(void *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior  = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7)  = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7)  = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1  = v7;
}

unsigned char *AnimationView.repeatMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 81)  = *result;
  return result;
}

void (*AnimationView.repeatMode.modify(void *a1))(uint64_t *a1)
{
  long long v3 = (unsigned __int8 *)malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1  = v3;
  long long v5 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6)  = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7)  = v5;
  *((_OWORD *)v3 + 8)  = *(_OWORD *)(v1 + 128);
  *((void *)v3 + 18)  = *(void *)(v1 + 144);
  *((void *)v3 + 19)  = v1;
  long long v6 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2)  = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3)  = v6;
  long long v7 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4)  = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5)  = v7;
  long long v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1)  = v8;
  LODWORD(v9)  = v3[81];
  if (v9 == 4)
  {
    uint64_t v9 = *(void *)(*((void *)v3 + 18) + 16);
    if (v9)
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior  = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v9)  = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties(v4);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v9)  = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(unsigned char *)(v4 + 160)  = v9;
  return AnimationView.repeatMode.modify;
}

void AnimationView.repeatMode.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *(unsigned char *)(*(void *)(v1 + 152) + 81)  = *(unsigned char *)(v1 + 160);
  free((void *)v1);
}

double AnimationView.source.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 88);
  if (v3)
  {
    if (*(void *)(v3 + 16)) {
      goto LABEL_3;
    }
LABEL_9:
    swift_retain();
    goto LABEL_10;
  }
  if (!*(void *)(*(void *)(v1 + 144) + 16) || (ClipSourceRef  = RETimelineDefinitionCreateClipSourceRef()) == 0)
  {
    type metadata accessor for TimelineDefinition();
    *(void *)(swift_allocObject() + 16)  = 0;
    goto LABEL_9;
  }
  uint64_t v15 = ClipSourceRef;
  type metadata accessor for TimelineDefinition();
  *(void *)(swift_allocObject() + 16)  = v15;
  RERetain();
  RERelease();
LABEL_3:
  swift_retain();
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v16);
  uint64_t v5 = v17;
  uint64_t v6 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  Timelineuint64_t Asset = RETimelineDefinitionCreateTimelineAsset();
  if (TimelineAsset)
  {
    uint64_t v8 = TimelineAsset;
    RETimelineDefinitionGetName();
    uint64_t v9 = String.init(cString:)();
    uint64_t v11 = v10;
    type metadata accessor for AnimationResource();
    long long v12 = (void *)swift_allocObject();
    void v12[2] = v8;
    v12[3]  = v9;
    void v12[4] = v11;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    swift_release();
    AnimationResource.definition.getter((uint64_t *)a1);
    swift_release();
    return result;
  }
LABEL_10:
  swift_release();
  *(void *)(a1 + 32)  = 0;
  double result = 0.0;
  *(_OWORD *)a1  = 0u;
  *(_OWORD *)(a1 + 16)  = 0u;
  return result;
}

uint64_t key path getter for AnimationView.source : AnimationView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v9[6]  = *(_OWORD *)(a1 + 96);
  v9[7]  = v3;
  v9[8]  = *(_OWORD *)(a1 + 128);
  long long v4 = *(_OWORD *)(a1 + 48);
  v9[2]  = *(_OWORD *)(a1 + 32);
  v9[3]  = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v9[4]  = *(_OWORD *)(a1 + 64);
  v9[5]  = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v9[0]  = *(_OWORD *)a1;
  v9[1]  = v6;
  uint64_t v10 = *(void *)(a1 + 144);
  outlined retain of TimelineClipProperties((uint64_t)v9);
  TimelineClipProperties.source.getter();
  long long v7 = TimelineDefinition.resource.getter();
  swift_release();
  if (v7)
  {
    AnimationResource.definition.getter((uint64_t *)a2);
    swift_release();
  }
  else
  {
    *(void *)(a2 + 32)  = 0;
    *(_OWORD *)a2  = 0u;
    *(_OWORD *)(a2 + 16)  = 0u;
  }
  return outlined release of TimelineClipProperties((uint64_t)v9);
}

uint64_t AnimationView.source.setter(uint64_t a1)
{
  outlined init with copy of AnimationDefinition?(a1, (uint64_t)&v7);
  if (v8)
  {
    outlined init with take of BindableDataInternal(&v7, (uint64_t)v9);
    uint64_t v3 = specialized static AnimationResource.generate(with:)((uint64_t)v9);
    uint64_t v4 = specialized TimelineDefinition.__allocating_init(_:)(v3);
    swift_release();
    *(void *)(v1 + 88)  = v4;
    outlined destroy of AnimationDefinition?(a1);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    outlined destroy of AnimationDefinition?((uint64_t)&v7);
    type metadata accessor for TimelineDefinition();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16)  = 0;
    swift_release();
    *(void *)(v1 + 88)  = v6;
    return outlined destroy of AnimationDefinition?(a1);
  }
}

void (*AnimationView.source.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = (uint64_t *)malloc(0x58uLL);
  *a1  = v3;
  v3[10]  = v1;
  if (!*(void *)(v1 + 88))
  {
    if (*(void *)(*(void *)(v1 + 144) + 16) && (ClipSourceRef  = RETimelineDefinitionCreateClipSourceRef()) != 0)
    {
      uint64_t v5 = ClipSourceRef;
      type metadata accessor for TimelineDefinition();
      *(void *)(swift_allocObject() + 16)  = v5;
      RERetain();
      RERelease();
    }
    else
    {
      type metadata accessor for TimelineDefinition();
      *(void *)(swift_allocObject() + 16)  = 0;
    }
  }
  swift_retain();
  uint64_t v6 = TimelineDefinition.resource.getter();
  swift_release();
  if (v6)
  {
    AnimationResource.definition.getter(v3);
    swift_release();
  }
  else
  {
    v3[4]  = 0;
    *(_OWORD *)uint64_t v3 = 0u;
    *((_OWORD *)v3 + 1)  = 0u;
  }
  return AnimationView.source.modify;
}

void AnimationView.source.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    outlined init with copy of AnimationDefinition?(*a1, (uint64_t)v2 + 40);
    AnimationView.source.setter((uint64_t)v2 + 40);
    outlined destroy of AnimationDefinition?((uint64_t)v2);
  }
  else
  {
    AnimationView.source.setter(*a1);
  }

  free(v2);
}

uint64_t AnimationView.defaultDuration.getter()
{
  long long v1 = v0[7];
  long long v26 = v0[6];
  long long v27 = v1;
  long long v28 = v0[8];
  uint64_t v2 = *((void *)v0 + 18);
  uint64_t v29 = v2;
  long long v3 = v0[3];
  long long v22 = v0[2];
  long long v23 = v3;
  long long v4 = v0[5];
  long long v24 = v0[4];
  long long v25 = v4;
  long long v5 = v0[1];
  long long v20 = *v0;
  long long v21 = v5;
  uint64_t v6 = *((void *)&v25 + 1);
  uint64_t v7 = v2;
  if (*((void *)&v25 + 1))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v20);
    goto LABEL_8;
  }
  if (*(void *)(v2 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v20);
    ClipSourceRef  = RETimelineDefinitionCreateClipSourceRef();
    if (ClipSourceRef)
    {
      uint64_t v9 = ClipSourceRef;
      type metadata accessor for TimelineDefinition();
      *(void *)(swift_allocObject() + 16)  = v9;
      RERetain();
      RERelease();
      goto LABEL_8;
    }
  }
  else
  {
    outlined retain of TimelineClipProperties((uint64_t)&v20);
  }
  type metadata accessor for TimelineDefinition();
  *(void *)(swift_allocObject() + 16)  = 0;
LABEL_8:
  swift_retain();
  uint64_t v10 = TimelineDefinition.resource.getter();
  swift_release();
  if (!v10)
  {
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    outlined release of TimelineClipProperties((uint64_t)&v20);
    return outlined destroy of AnimationDefinition?((uint64_t)&v17);
  }
  AnimationResource.definition.getter((uint64_t *)&v17);
  swift_release();
  outlined release of TimelineClipProperties((uint64_t)&v20);
  if (!*((void *)&v18 + 1)) {
    return outlined destroy of AnimationDefinition?((uint64_t)&v17);
  }
  uint64_t result = outlined destroy of AnimationDefinition?((uint64_t)&v17);
  if (BYTE9(v20))
  {
    if (*(void *)(v7 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v20);
      RETimelineDefinitionGetClipStart();
      uint64_t result = outlined release of TimelineClipProperties((uint64_t)&v20);
    }
  }
  if (BYTE9(v21))
  {
    if (*(void *)(v7 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v20);
      if (RETimelineDefinitionGetClipEnd()) {
        return outlined release of TimelineClipProperties((uint64_t)&v20);
      }
      outlined release of TimelineClipProperties((uint64_t)&v20);
    }
  }
  else if ((BYTE8(v21) & 1) == 0)
  {
    return result;
  }
  if (!v6)
  {
    if (*(void *)(v7 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v20);
      uint64_t v12 = RETimelineDefinitionCreateClipSourceRef();
      if (v12)
      {
        uint64_t v13 = v12;
        type metadata accessor for TimelineDefinition();
        *(void *)(swift_allocObject() + 16)  = v13;
        RERetain();
        RERelease();
        goto LABEL_29;
      }
    }
    else
    {
      outlined retain of TimelineClipProperties((uint64_t)&v20);
    }
    type metadata accessor for TimelineDefinition();
    *(void *)(swift_allocObject() + 16)  = 0;
    goto LABEL_29;
  }
  outlined retain of TimelineClipProperties((uint64_t)&v20);
LABEL_29:
  swift_retain();
  uint64_t v14 = TimelineDefinition.resource.getter();
  swift_release();
  if (v14)
  {
    AnimationResource.definition.getter((uint64_t *)&v17);
    swift_release();
    uint64_t result = outlined release of TimelineClipProperties((uint64_t)&v20);
    uint64_t v15 = *((void *)&v18 + 1);
    if (*((void *)&v18 + 1))
    {
      uint64_t v16 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, *((uint64_t *)&v18 + 1));
      (*(void (**)(uint64_t, uint64_t))(v16 + 272))(v15, v16);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    }
  }
  else
  {
    uint64_t result = outlined release of TimelineClipProperties((uint64_t)&v20);
  }
  __break(1u);
  return result;
}

double AnimationView.duration.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v19 = *(_OWORD *)(v0 + 96);
  long long v20 = v1;
  long long v21 = *(_OWORD *)(v0 + 128);
  uint64_t v22 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  long long v15 = *(_OWORD *)(v0 + 32);
  long long v16 = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v17 = *(_OWORD *)(v0 + 64);
  long long v18 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v14[0]  = *(_OWORD *)v0;
  v14[1]  = v4;
  uint64_t v5 = v22;
  if (BYTE9(v15))
  {
    if (*(void *)(v22 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v14);
      ClipDuration  = (double *)RETimelineDefinitionGetClipDuration();
      if (ClipDuration)
      {
        double v7 = *ClipDuration;
        outlined release of TimelineClipProperties((uint64_t)v14);
        if (BYTE8(v17)) {
          goto LABEL_12;
        }
LABEL_8:
        double v8 = *(double *)&v17;
        outlined retain of TimelineClipProperties((uint64_t)v14);
        if ((v18 & 1) == 0) {
          goto LABEL_21;
        }
        goto LABEL_16;
      }
      outlined release of TimelineClipProperties((uint64_t)v14);
    }
  }
  else if ((BYTE8(v15) & 1) == 0)
  {
    double v7 = *(double *)&v15;
    if ((BYTE8(v17) & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  AnimationView.defaultDuration.getter();
  double v7 = v9;
  if ((BYTE8(v17) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_12:
  if (*(void *)(v5 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v14);
    double v8 = 0.0;
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      double v8 = v10;
    }
    if (v18) {
      goto LABEL_16;
    }
LABEL_21:
    float v11 = *((float *)&v17 + 3);
    goto LABEL_22;
  }
  outlined retain of TimelineClipProperties((uint64_t)v14);
  double v8 = 0.0;
  if ((v18 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_16:
  float v11 = 1.0;
  if (*(void *)(v5 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v14);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      float v11 = v12;
    }
    outlined release of TimelineClipProperties((uint64_t)v14);
  }
LABEL_22:
  outlined release of TimelineClipProperties((uint64_t)v14);
  return v8 + v7 / fabsf(v11);
}

uint64_t AnimationView.init(_:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TimelineDefinition();
  uint64_t v2 = swift_allocObject();
  swift_retain_n();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline  = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      uint64_t v6 = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(void *)(v2 + 16)  = v6;
      if (v6)
      {
        if (RETimelineDefinitionGetTimelineType() == 2)
        {
          uint64_t result = swift_release();
          uint64_t v7 = 0;
          uint64_t v6 = 0;
          unint64_t v8 = 0;
          char v9 = 2;
          char v10 = 1;
LABEL_11:
          *(void *)a1  = 0;
          *(unsigned char *)(a1 + 8)  = 0;
          *(unsigned char *)(a1 + 9)  = 1;
          *(_DWORD *)(a1 + 10)  = v24;
          *(_WORD *)(a1 + 14)  = v25;
          *(void *)(a1 + 16)  = 0;
          *(unsigned char *)(a1 + 24)  = 0;
          *(unsigned char *)(a1 + 25)  = 1;
          *(_DWORD *)(a1 + 26)  = v22;
          *(_WORD *)(a1 + 30)  = v23;
          *(void *)(a1 + 32)  = 0;
          *(unsigned char *)(a1 + 40)  = 0;
          *(unsigned char *)(a1 + 41)  = 1;
          *(_WORD *)(a1 + 46)  = v21;
          *(_DWORD *)(a1 + 42)  = v20;
          *(void *)(a1 + 48)  = 0;
          *(unsigned char *)(a1 + 56)  = 1;
          *(_DWORD *)(a1 + 57)  = *(_DWORD *)v19;
          *(_DWORD *)(a1 + 60)  = *(_DWORD *)&v19[3];
          *(void *)(a1 + 64)  = 0;
          *(unsigned char *)(a1 + 72)  = 1;
          *(_WORD *)(a1 + 73)  = v17;
          *(unsigned char *)(a1 + 75)  = v18;
          *(_DWORD *)(a1 + 76)  = 0;
          *(unsigned char *)(a1 + 80)  = 1;
          *(unsigned char *)(a1 + 81)  = 4;
          *(_WORD *)(a1 + 86)  = v16;
          *(_DWORD *)(a1 + 82)  = v15;
          *(void *)(a1 + 88)  = v7;
          *(void *)(a1 + 96)  = v6;
          *(void *)(a1 + 104)  = v8;
          *(void *)(a1 + 112)  = 0;
          *(void *)(a1 + 120)  = 0;
          *(unsigned char *)(a1 + 128)  = -1;
          *(unsigned char *)(a1 + 131)  = v14;
          *(_WORD *)(a1 + 129)  = v13;
          *(_DWORD *)(a1 + 132)  = 0;
          *(unsigned char *)(a1 + 136)  = v10;
          *(unsigned char *)(a1 + 137)  = 0;
          *(unsigned char *)(a1 + 138)  = v10;
          *(unsigned char *)(a1 + 139)  = v9;
          *(void *)(a1 + 144)  = v2;
          return result;
        }
        RETimelineDefinitionGetName();
        uint64_t v6 = String.init(cString:)();
        unint64_t v8 = v11;
      }
      else
      {
        unint64_t v8 = 0xE000000000000000;
      }
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16)  = 0;
      uint64_t result = swift_release();
      char v10 = 0;
      char v9 = 0;
      uint64_t v7 = v2;
      uint64_t v2 = v12;
      goto LABEL_11;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for AnimationDefinition.name.getter in conformance AnimationView()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 128);
  if (*(void *)(v0 + 104))
  {
    uint64_t v4 = *(void *)(v0 + 96);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v0 + 144) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v0 + 112), *(void *)(v0 + 120), *(unsigned char *)(v0 + 128));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v0 + 112), *(void *)(v0 + 120), *(unsigned char *)(v0 + 128));
    swift_retain();
    uint64_t v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t protocol witness for AnimationDefinition.name.setter in conformance AnimationView(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 96)  = a1;
  *(void *)(v2 + 104)  = a2;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance AnimationView(uint64_t **a1))()
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = (uint64_t)AnimationView.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.getter in conformance AnimationView()
{
  if (*(unsigned char *)(v0 + 136) != 1) {
    return *(unsigned int *)(v0 + 132);
  }
  uint64_t result = *(void *)(*(void *)(v0 + 144) + 16);
  if (result) {
    return RETimelineDefinitionGetAnimationLayer();
  }
  return result;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.setter in conformance AnimationView(uint64_t result)
{
  *(_DWORD *)(v1 + 132)  = result;
  *(unsigned char *)(v1 + 136)  = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance AnimationView(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = AnimationView.blendLayer.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.fillMode.getter in conformance AnimationView@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 138))
  {
    uint64_t result = *(void *)(*(void *)(v1 + 144) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(v1 + 137);
  }
  *a1  = result;
  return result;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance AnimationView(unsigned __int8 *result)
{
  *(_WORD *)(v1 + 137)  = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance AnimationView(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = AnimationView.fillMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.setter in conformance AnimationView(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 112), *(void *)(v1 + 120), *(unsigned char *)(v1 + 128));
  *(void *)(v1 + 112)  = v2;
  *(void *)(v1 + 120)  = v3;
  *(unsigned char *)(v1 + 128)  = v4;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance AnimationView(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = AnimationView.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance AnimationView()
{
  return AnimationView.trimStart.getter();
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance AnimationView(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = AnimationView.trimStart.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance AnimationView()
{
  return AnimationView.trimEnd.getter();
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance AnimationView(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = AnimationView.trimEnd.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance AnimationView()
{
  return AnimationView.trimDuration.getter();
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance AnimationView(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = AnimationView.trimDuration.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance AnimationView(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = AnimationView.offset.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance AnimationView(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = AnimationView.delay.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance AnimationView(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = AnimationView.speed.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance AnimationView(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1  = v2;
  v2[4]  = AnimationView.repeatMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void *protocol witness for AnimationDefinitionInternal.generate() in conformance AnimationView()
{
  uint64_t result = AnimationView.createResource()();
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v1 = 0xD00000000000001CLL;
    *(void *)(v1 + 8)  = 0x800000022834E530;
    *(unsigned char *)(v1 + 16)  = 0;
    return (void *)swift_willThrow();
  }
  return result;
}

uint64_t outlined init with copy of AnimationDefinition?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AnimationDefinition?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22813894C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 96)  = v4;
  *(void *)(a2 + 104)  = v3;
  return result;
}

uint64_t sub_228138990@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 136) == 1)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 144) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetAnimationLayer();
    }
  }
  else
  {
    uint64_t result = *(unsigned int *)(a1 + 132);
  }
  *a2  = result;
  return result;
}

_DWORD *sub_2281389D8(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 132)  = *result;
  *(unsigned char *)(a2 + 136)  = 0;
  return result;
}

uint64_t sub_2281389E8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 138) == 1)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 144) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(a1 + 137);
  }
  *a2  = result;
  return result;
}

unsigned __int8 *sub_228138A30(unsigned __int8 *result, uint64_t a2)
{
  *(_WORD *)(a2 + 137)  = *result;
  return result;
}

double sub_228138A40@<D0>(uint64_t a1@<X8>)
{
  AnimationView.bindTarget.getter((uint64_t)&v4);
  char v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1  = v4;
  *(unsigned char *)(a1 + 16)  = v2;
  return result;
}

uint64_t sub_228138A88@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AnimationView.trimStart.getter();
  *(void *)a1  = result;
  *(unsigned char *)(a1 + 8)  = v3 & 1;
  return result;
}

uint64_t sub_228138ABC(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)a2  = *(void *)result;
  *(_WORD *)(a2 + 8)  = v2;
  return result;
}

uint64_t sub_228138AD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AnimationView.trimEnd.getter();
  *(void *)a1  = result;
  *(unsigned char *)(a1 + 8)  = v3 & 1;
  return result;
}

uint64_t sub_228138B08(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 16)  = *(void *)result;
  *(_WORD *)(a2 + 24)  = v2;
  return result;
}

uint64_t sub_228138B20@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AnimationView.trimDuration.getter();
  *(void *)a1  = result;
  *(unsigned char *)(a1 + 8)  = v3 & 1;
  return result;
}

uint64_t sub_228138B54(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 32)  = *(void *)result;
  *(_WORD *)(a2 + 40)  = v2;
  return result;
}

void sub_228138B6C(double *a1@<X8>)
{
  *a1  = AnimationView.offset.getter();
}

void *sub_228138B98(void *result, uint64_t a2)
{
  *(void *)(a2 + 48)  = *result;
  *(unsigned char *)(a2 + 56)  = 0;
  return result;
}

void sub_228138BA8(double *a1@<X8>)
{
  *a1  = AnimationView.delay.getter();
}

void *sub_228138BD4(void *result, uint64_t a2)
{
  *(void *)(a2 + 64)  = *result;
  *(unsigned char *)(a2 + 72)  = 0;
  return result;
}

void sub_228138BE4(float *a1@<X8>)
{
  *a1  = AnimationView.speed.getter();
}

_DWORD *sub_228138C10(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 76)  = *result;
  *(unsigned char *)(a2 + 80)  = 0;
  return result;
}

void sub_228138C20(unsigned char *a1@<X8>)
{
  AnimationView.repeatMode.getter(&v2);
  *a1  = v2;
}

unsigned char *sub_228138C5C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 81)  = *result;
  return result;
}

uint64_t sub_228138C6C(uint64_t a1)
{
  outlined init with copy of AnimationDefinition?(a1, (uint64_t)v2);
  return AnimationView.source.setter((uint64_t)v2);
}

uint64_t destroy for AnimationView(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 128);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 112), *(void *)(a1 + 120), v2);
  }

  return swift_release();
}

uint64_t initializeWithCopy for AnimationView(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56)  = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64)  = v4;
  *(_DWORD *)(a1 + 76)  = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80)  = *(_WORD *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = v5;
  *(void *)(a1 + 104)  = *(void *)(a2 + 104);
  int v6 = *(unsigned __int8 *)(a2 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
    *(unsigned char *)(a1 + 128)  = *(unsigned char *)(a2 + 128);
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 112);
    uint64_t v8 = *(void *)(a2 + 120);
    outlined copy of BindTarget(v7, v8, v6);
    *(void *)(a1 + 112)  = v7;
    *(void *)(a1 + 120)  = v8;
    *(unsigned char *)(a1 + 128)  = v6;
  }
  *(_DWORD *)(a1 + 132)  = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 136)  = *(unsigned char *)(a2 + 136);
  *(_WORD *)(a1 + 137)  = *(_WORD *)(a2 + 137);
  *(unsigned char *)(a1 + 139)  = *(unsigned char *)(a2 + 139);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimationView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_WORD *)(a1 + 8)  = *((_WORD *)a2 + 4);
  *(void *)a1  = v4;
  uint64_t v5 = a2[2];
  *(_WORD *)(a1 + 24)  = *((_WORD *)a2 + 12);
  *(void *)(a1 + 16)  = v5;
  uint64_t v6 = a2[4];
  *(_WORD *)(a1 + 40)  = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32)  = v6;
  uint64_t v7 = a2[6];
  *(unsigned char *)(a1 + 56)  = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48)  = v7;
  uint64_t v8 = a2[8];
  *(unsigned char *)(a1 + 72)  = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64)  = v8;
  LODWORD(v8)  = *((_DWORD *)a2 + 19);
  *(unsigned char *)(a1 + 80)  = *((unsigned char *)a2 + 80);
  *(_DWORD *)(a1 + 76)  = v8;
  *(unsigned char *)(a1 + 81)  = *((unsigned char *)a2 + 81);
  *(void *)(a1 + 88)  = a2[11];
  swift_retain();
  swift_release();
  *(void *)(a1 + 96)  = a2[12];
  *(void *)(a1 + 104)  = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v9 = (long long *)(a1 + 112);
  char v10 = (long long *)(a2 + 14);
  int v11 = *((unsigned __int8 *)a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v11 == 255)
    {
      long long v20 = *v10;
      *(unsigned char *)(a1 + 128)  = *((unsigned char *)a2 + 128);
      *char v9 = v20;
    }
    else
    {
      uint64_t v17 = a2[14];
      uint64_t v18 = a2[15];
      outlined copy of BindTarget(v17, v18, *((unsigned char *)a2 + 128));
      *(void *)(a1 + 112)  = v17;
      *(void *)(a1 + 120)  = v18;
      *(unsigned char *)(a1 + 128)  = v11;
    }
  }
  else if (v11 == 255)
  {
    outlined destroy of BindTarget(a1 + 112);
    char v19 = *((unsigned char *)a2 + 128);
    *char v9 = *v10;
    *(unsigned char *)(a1 + 128)  = v19;
  }
  else
  {
    uint64_t v12 = a2[14];
    uint64_t v13 = a2[15];
    outlined copy of BindTarget(v12, v13, *((unsigned char *)a2 + 128));
    uint64_t v14 = *(void *)(a1 + 112);
    uint64_t v15 = *(void *)(a1 + 120);
    *(void *)(a1 + 112)  = v12;
    *(void *)(a1 + 120)  = v13;
    unsigned __int8 v16 = *(unsigned char *)(a1 + 128);
    *(unsigned char *)(a1 + 128)  = v11;
    outlined consume of BindTarget(v14, v15, v16);
  }
  int v21 = *((_DWORD *)a2 + 33);
  *(unsigned char *)(a1 + 136)  = *((unsigned char *)a2 + 136);
  *(_DWORD *)(a1 + 132)  = v21;
  *(_WORD *)(a1 + 137)  = *(_WORD *)((char *)a2 + 137);
  *(unsigned char *)(a1 + 139)  = *((unsigned char *)a2 + 139);
  *(void *)(a1 + 144)  = a2[18];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v5;
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)(a1 + 48)  = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112)  = v7;
  *(_OWORD *)(a1 + 128)  = v8;
  *(__n128 *)(a1 + 96)  = result;
  return result;
}

uint64_t assignWithTake for AnimationView(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56)  = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64)  = v4;
  *(_DWORD *)(a1 + 76)  = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80)  = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(void *)(a1 + 104)  = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a2 + 112);
  int v7 = *(unsigned __int8 *)(a1 + 128);
  if (v7 == 255) {
    goto LABEL_5;
  }
  int v8 = *(unsigned __int8 *)(a2 + 128);
  if (v8 == 255)
  {
    outlined destroy of BindTarget(a1 + 112);
LABEL_5:
    *(_OWORD *)(a1 + 112)  = *v6;
    *(unsigned char *)(a1 + 128)  = *(unsigned char *)(a2 + 128);
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112)  = *v6;
  *(unsigned char *)(a1 + 128)  = v8;
  outlined consume of BindTarget(v9, v10, v7);
LABEL_6:
  *(_DWORD *)(a1 + 132)  = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 136)  = *(unsigned char *)(a2 + 136);
  *(_WORD *)(a1 + 137)  = *(_WORD *)(a2 + 137);
  *(unsigned char *)(a1 + 139)  = *(unsigned char *)(a2 + 139);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 144);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 144)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationView()
{
  return &type metadata for AnimationView;
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return outlined release of IKRig.Joint?(a4);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v10 = _StringObject.sharedUTF8.getter();
    }
    closure #1 in closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(v10, a3, a4, a5, a6);
    return outlined release of IKRig.Joint?(a4);
  }
  v12[0]  = a1;
  v12[1]  = a2 & 0xFFFFFFFFFFFFFFLL;
  closure #1 in closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)((uint64_t)v12, a3, a4, a5, a6);
  return outlined release of IKRig.Joint?(a4);
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, uint64_t *a7)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return outlined release of IKRig.Constraint(a4);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v12 = _StringObject.sharedUTF8.getter();
    }
    closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(v12, a3, a4, a5, a6, a7);
    return outlined release of IKRig.Constraint(a4);
  }
  v14[0]  = a1;
  v14[1]  = a2 & 0xFFFFFFFFFFFFFFLL;
  closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)((uint64_t)v14, a3, a4, a5, a6, a7);
  return outlined release of IKRig.Constraint(a4);
}

uint64_t IKResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16)  = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t IKResource.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 16)  = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v1;
}

uint64_t IKResource.deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t IKResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t IKResource.solverDefinitions.getter()
{
  uint64_t result = REIkRigAssetGetDefinitionCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = result;
    swift_retain();
    uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation18IKSolverDefinitionVs5NeverOTg504_s17d49Foundation10IKResourceC17solverDefinitionsSayAA18fG13VGvgAFSiXEfU_AG0K0CTf1cn_nTf4ng_n(0, v1);
    swift_release();
    return v2;
  }
  return result;
}

uint64_t IKResource.__allocating_init(rig:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKSolverDefinition>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_22830EC60;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v5 = StringProtocol.hash.getter();
  *(void *)(inited + 48)  = a1[1];
  long long v6 = *((_OWORD *)a1 + 2);
  *(_OWORD *)(inited + 56)  = *((_OWORD *)a1 + 1);
  *(void *)(inited + 32)  = v5;
  uint64_t v7 = inited + 32;
  *(void *)(inited + 40)  = v3;
  *(_OWORD *)(inited + 72)  = v6;
  *(_OWORD *)(inited + 88)  = xmmword_22830EC70;
  *(unsigned char *)(inited + 104)  = 6;
  *(_OWORD *)(inited + 112)  = xmmword_22830EC70;
  *(unsigned char *)(inited + 128)  = 6;
  uint64_t v8 = specialized static IKResource.createCoreAssetForDefinition(_:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (!v1)
  {
    type metadata accessor for IKResource();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16)  = v8;
    RERetain();
    REAssetSetSwiftObject();
  }
  return v7;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  v17[0]  = a2;
  v17[1]  = a1;
  long long v7 = *(_OWORD *)(a3 + 48);
  long long v18 = *(_OWORD *)(a3 + 64);
  long long v19 = v7;
  char v20 = *(unsigned char *)(a3 + 80);
  int v21 = 65793;
  char v22 = 1;
  int v8 = 1065353216;
  int v23 = 1065353216;
  long long v9 = *(_OWORD *)(a3 + 112);
  long long v24 = *(_OWORD *)(a3 + 96);
  long long v25 = v9;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 0;
  char v30 = 0;
  uint64_t v29 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  int v36 = 0;
  int v39 = 1008981770;
  outlined init with take of Transform?(a3 + 128, (uint64_t)v40, &demangling cache variable for type metadata for IKRig.Joint.LimitsDefinition?);
  outlined init with take of Transform?((uint64_t)v40, (uint64_t)&v41, &demangling cache variable for type metadata for IKRig.Joint.LimitsDefinition?);
  if ((v41 & 0xFF00000000) == 0x300000000)
  {
    char v10 = 0;
    long long v11 = xmmword_22833AA70;
    long long v12 = xmmword_22833AA80;
  }
  else
  {
    int v36 = BYTE4(v41);
    float32x2_t v13 = (float32x2_t)vdup_n_s32(0x42652EE2u);
    *(float32x2_t *)&long long v12 = vmul_f32(*(float32x2_t *)v42.f32, v13);
    *((void *)&v12 + 1)  = COERCE_UNSIGNED_INT(vmuls_lane_f32(57.296, v42, 2));
    *(float32x2_t *)&long long v11 = vmul_f32(*(float32x2_t *)v43.f32, v13);
    *((void *)&v11 + 1)  = COERCE_UNSIGNED_INT(vmuls_lane_f32(57.296, v43, 2));
    char v10 = 1;
    int v8 = v41;
  }
  char v33 = v10;
  char v34 = v10;
  int v35 = v8;
  long long v37 = v12;
  long long v38 = v11;
  uint64_t result = MEMORY[0x22A68A9D0](a4, v17, a5);
  uint64_t v15 = *a5;
  if (v15)
  {
    MEMORY[0x22A68A890](a4);
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *unsigned __int8 v16 = v15;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  v19[0]  = a2;
  v19[1]  = a1;
  outlined init with take of Transform?(a3 + 80, (uint64_t)v31, &demangling cache variable for type metadata for IKRig.Constraint.IKPositionDemand?);
  outlined init with take of Transform?((uint64_t)v31, (uint64_t)v33, &demangling cache variable for type metadata for IKRig.Constraint.IKPositionDemand?);
  if (v33[0] == 2)
  {
    char v10 = 0;
    LODWORD(v11)  = 0;
    int16x8_t v12 = 0uLL;
  }
  else
  {
    int64_t v11 = v34;
    v12.i64[1]  = *((void *)&v35 + 1);
    if (v34 >= 0x7FFFFFFF) {
      int64_t v11 = 0x7FFFFFFFLL;
    }
    if (v11 <= (uint64_t)0xFFFFFFFF80000000) {
      LODWORD(v11)  = 0x80000000;
    }
    long long v26 = v35;
    long long v28 = xmmword_22833AA90;
    *a4  = fmaxf(fmaxf(*(float *)&v35, *((float *)&v35 + 2)), *((float *)&v35 + 1)) + *a4;
    v12.i64[0]  = 0x100010001;
    char v10 = 1;
  }
  char v20 = v10;
  unsigned __int32 v22 = vmovn_s16(v12).u32[0];
  int v24 = v11;
  outlined init with take of Transform?(a3 + 112, (uint64_t)v30, &demangling cache variable for type metadata for IKRig.Constraint.IKOrientationDemand?);
  outlined init with take of Transform?((uint64_t)v30, (uint64_t)v40, &demangling cache variable for type metadata for IKRig.Constraint.IKOrientationDemand?);
  if (v40[16] == 0xFF)
  {
    char v13 = 0;
    LODWORD(v14)  = 0;
    int16x8_t v15 = 0uLL;
  }
  else
  {
    int64_t v14 = v41;
    v15.i64[1]  = *((void *)&v42 + 1);
    if (v41 >= 0x7FFFFFFF) {
      int64_t v14 = 0x7FFFFFFFLL;
    }
    if (v14 <= (uint64_t)0xFFFFFFFF80000000) {
      LODWORD(v14)  = 0x80000000;
    }
    long long v27 = v42;
    long long v29 = xmmword_22833AAA0;
    *a4  = fmaxf(fmaxf(*(float *)&v42, *((float *)&v42 + 2)), *((float *)&v42 + 1)) + *a4;
    v15.i64[0]  = 0x100010001;
    char v13 = 1;
  }
  char v21 = v13;
  unsigned __int32 v23 = vmovn_s16(v15).u32[0];
  int v25 = v14;
  MEMORY[0x22A68A9C0](a5, v19, a6);
  uint64_t v16 = *a6;
  if (v16)
  {
    MEMORY[0x22A68A890](a5);
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *uint64_t v17 = v16;
    return swift_willThrow();
  }
  outlined init with take of Transform?((uint64_t)v31, (uint64_t)v32, &demangling cache variable for type metadata for IKRig.Constraint.IKPositionDemand?);
  if (v32[0] != 2) {
    CoreIKRigConstraintSetPositionAsPoleEnabled();
  }
  uint64_t result = outlined init with take of Transform?((uint64_t)v30, (uint64_t)&v36, &demangling cache variable for type metadata for IKRig.Constraint.IKOrientationDemand?);
  if ((_BYTE)v37 != 0xFF)
  {
    v39[0]  = v36;
    v39[1]  = v37;
    v39[2]  = v38;
    outlined init with take of IKRig.Constraint.IKOrientationDemand.Mode((uint64_t)v39, (uint64_t)v43);
    outlined init with take of IKRig.Constraint.IKOrientationDemand.Mode((uint64_t)v43, (uint64_t)&v44);
    if (!v45)
    {
      CoreIKGenericSolverRigSetLookAtEnabled();
      CoreIKGenericSolverRigSetUsesModelSpaceLookAtAxis();
      return CoreIKGenericSolverRigSetLookAtAxis();
    }
    if (v45 == 1)
    {
      CoreIKGenericSolverRigSetLookAtEnabled();
      CoreIKGenericSolverRigSetUsesLocalSpaceLookAtAxis();
      return CoreIKGenericSolverRigSetLookAtAxis();
    }
    return CoreIKGenericSolverRigSetLookAtEnabled();
  }
  return result;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t specialized static SIMD<>.random<A>(in:using:)(float a1, float a2)
{
  if ((~COERCE_INT(a2 - a1) & 0x7F800000) != 0)
  {
    v5[5]  = v2;
    void v5[6] = v3;
    v5[0]  = 0;
    MEMORY[0x22A696520](v5, 8);
    while ((16777217 * LODWORD(v5[0])) < 0xFFFF01)
    {
      v5[0]  = 0;
      MEMORY[0x22A696520](v5, 8);
    }
    do
    {
      v5[0]  = 0;
      MEMORY[0x22A696520](v5, 8);
    }
    while ((16777217 * LODWORD(v5[0])) < 0xFFFF01);
    do
    {
      v5[0]  = 0;
      uint64_t result = MEMORY[0x22A696520](v5, 8);
    }
    while ((16777217 * LODWORD(v5[0])) < 0xFFFF01);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v6 = result;
    uint64_t v39 = a4;
    swift_bridgeObjectRetain();
    uint64_t v7 = v4 - 1;
    for (uint64_t i = 32; ; i += 176)
    {
      long long v9 = *(_OWORD *)(v6 + i + 128);
      long long v10 = *(_OWORD *)(v6 + i + 144);
      long long v11 = *(_OWORD *)(v6 + i + 96);
      long long v35 = *(_OWORD *)(v6 + i + 112);
      long long v36 = v9;
      long long v12 = *(_OWORD *)(v6 + i + 160);
      long long v37 = v10;
      long long v38 = v12;
      long long v13 = *(_OWORD *)(v6 + i + 80);
      long long v32 = *(_OWORD *)(v6 + i + 64);
      long long v33 = v13;
      long long v34 = v11;
      long long v14 = *(_OWORD *)(v6 + i + 16);
      Swift::String v28 = *(Swift::String *)(v6 + i);
      long long v29 = v14;
      long long v15 = *(_OWORD *)(v6 + i + 48);
      long long v30 = *(_OWORD *)(v6 + i + 32);
      long long v31 = v15;
      Swift::String v16 = v28;
      Swift::String v27 = v28;
      outlined retain of String?((uint64_t)&v28);
      lazy protocol witness table accessor for type String and conformance String();
      Swift::UInt v17 = StringProtocol.hash.getter();
      if ((specialized Set._Variant.insert(_:)((Swift::UInt *)&v27, v17) & 1) == 0)
      {
        v27._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
        v27._object  = v18;
        v19._countAndFlagsBits  = 2108704;
        v19._object  = (void *)0xE300000000000000;
        String.append(_:)(v19);
        swift_bridgeObjectRetain();
        String.append(_:)(v16);
        outlined release of IKRig.Joint?((uint64_t)&v28);
        object  = v27._object;
        countAndFlagsBits  = v27._countAndFlagsBits;
        lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError();
        swift_allocError();
        *(void *)uint64_t v22 = countAndFlagsBits;
        char v23 = 1;
        goto LABEL_11;
      }
      if ((BYTE8(v29) & 1) == 0 && (specialized Set.contains(_:)(v29, *a3) & 1) == 0) {
        break;
      }
      outlined release of IKRig.Joint?((uint64_t)&v28);
      if (!v7) {
        return swift_bridgeObjectRelease();
      }
      --v7;
    }
    v27._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
    v27._object  = v24;
    v25._countAndFlagsBits  = 2108704;
    v25._object  = (void *)0xE300000000000000;
    String.append(_:)(v25);
    swift_bridgeObjectRetain();
    String.append(_:)(v16);
    outlined release of IKRig.Joint?((uint64_t)&v28);
    object  = v27._object;
    uint64_t v26 = v27._countAndFlagsBits;
    lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError();
    swift_allocError();
    *(void *)uint64_t v22 = v26;
    char v23 = 5;
LABEL_11:
    *(void *)(v22 + 8)  = object;
    *(unsigned char *)(v22 + 16)  = v23;
    swift_willThrow();
    outlined release of IKRig.Joint?((uint64_t)&v28);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = v5;
  uint64_t v55 = a5;
  uint64_t v48 = a4;
  uint64_t v7 = *(void *)(result + 16);
  if (!v7) {
    return result;
  }
  uint64_t v8 = result;
  uint64_t v43 = a3;
  char v45 = v51;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = 32;
  v42[1]  = MEMORY[0x263F8EE60] + 8;
  uint64_t v44 = v9;
  while (1)
  {
    long long v11 = *(_OWORD *)(v8 + v10 + 144);
    v51[7]  = *(_OWORD *)(v8 + v10 + 128);
    v51[8]  = v11;
    v51[9]  = *(_OWORD *)(v8 + v10 + 160);
    long long v12 = *(_OWORD *)(v8 + v10 + 80);
    v51[3]  = *(_OWORD *)(v8 + v10 + 64);
    v51[4]  = v12;
    long long v13 = *(_OWORD *)(v8 + v10 + 112);
    v51[5]  = *(_OWORD *)(v8 + v10 + 96);
    v51[6]  = v13;
    long long v14 = *(_OWORD *)(v8 + v10 + 16);
    long long v50 = *(_OWORD *)(v8 + v10);
    v51[0]  = v14;
    long long v15 = *(_OWORD *)(v8 + v10 + 48);
    v51[1]  = *(_OWORD *)(v8 + v10 + 32);
    v51[2]  = v15;
    outlined init with take of Transform?((uint64_t)v45, (uint64_t)v52, &demangling cache variable for type metadata for IKRig.Joint.ID?);
    uint64_t v16 = outlined init with take of Transform?((uint64_t)v52, (uint64_t)&v53, &demangling cache variable for type metadata for IKRig.Joint.ID?);
    uint64_t v47 = v6;
    if ((v54 & 1) != 0
      || (uint64_t v17 = *(void *)(v43 + 24), !*(void *)(v17 + 16))
      || (v18 = *(void *)(v43 + 16), uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v53), (v19 & 1) == 0))
    {
      uint64_t v31 = 0;
      uint64_t v30 = 0xE000000000000000;
      goto LABEL_11;
    }
    unint64_t v20 = *(void *)(*(void *)(v17 + 56) + 8 * v16);
    if ((v20 & 0x8000000000000000) != 0) {
      break;
    }
    if (v20 >= *(void *)(v18 + 16)) {
      goto LABEL_30;
    }
    char v21 = (_OWORD *)(v18 + 176 * v20);
    long long v22 = v21[2];
    long long v23 = v21[4];
    v49[1]  = v21[3];
    _OWORD v49[2] = v23;
    v49[0]  = v22;
    long long v24 = v21[5];
    long long v25 = v21[6];
    long long v26 = v21[8];
    v49[5]  = v21[7];
    v49[6]  = v26;
    v49[3]  = v24;
    v49[4]  = v25;
    long long v27 = v21[9];
    long long v28 = v21[10];
    long long v29 = v21[12];
    v49[9]  = v21[11];
    v49[10]  = v29;
    v49[7]  = v27;
    v49[8]  = v28;
    uint64_t v30 = *((void *)&v49[0] + 1);
    uint64_t v31 = *(void *)&v49[0];
    uint64_t v16 = outlined retain of String?((uint64_t)v49);
LABEL_11:
    uint64_t v33 = *((void *)&v50 + 1);
    uint64_t v32 = v50;
    MEMORY[0x270FA5388](v16);
    v42[-6]  = v31;
    v42[-5]  = v30;
    v42[-4]  = &v50;
    long long v34 = v55;
    v42[-3]  = v48;
    v42[-2]  = v34;
    if ((v33 & 0x1000000000000000) == 0 && v33 & 0x2000000000000000 | v32 & 0x1000000000000000)
    {
      uint64_t v46 = v42;
      if ((v33 & 0x2000000000000000) != 0)
      {
        *(void *)&v49[0]  = v32;
        *((void *)&v49[0] + 1)  = v33 & 0xFFFFFFFFFFFFFFLL;
        outlined retain of String?((uint64_t)&v50);
        outlined retain of String?((uint64_t)&v50);
        outlined retain of String?((uint64_t)&v50);
        swift_bridgeObjectRetain();
        uint64_t v40 = v47;
        specialized String.withCString<A>(_:)(v31, v30, (uint64_t)v49, (uint64_t)&v50, v48, v55);
        uint64_t v6 = v40;
        swift_bridgeObjectRelease();
        outlined release of IKRig.Joint?((uint64_t)&v50);
        swift_bridgeObjectRelease();
        outlined release of IKRig.Joint?((uint64_t)&v50);
        if (v40) {
          return swift_bridgeObjectRelease();
        }
        uint64_t v8 = v44;
        goto LABEL_3;
      }
      if ((v32 & 0x1000000000000000) != 0)
      {
        uint64_t v35 = (v33 & 0xFFFFFFFFFFFFFFFLL) + 32;
        goto LABEL_16;
      }
      uint64_t v35 = _StringObject.sharedUTF8.getter();
      if (v35)
      {
LABEL_16:
        outlined retain of String?((uint64_t)&v50);
        outlined retain of String?((uint64_t)&v50);
        outlined retain of String?((uint64_t)&v50);
        swift_bridgeObjectRetain();
        uint64_t v36 = v31;
        uint64_t v37 = v30;
        uint64_t v38 = v35;
      }
      else
      {
        outlined retain of String?((uint64_t)&v50);
        outlined retain of String?((uint64_t)&v50);
        outlined retain of String?((uint64_t)&v50);
        swift_bridgeObjectRetain();
        uint64_t v36 = v31;
        uint64_t v37 = v30;
        uint64_t v38 = 0;
      }
      uint64_t v39 = v47;
      specialized String.withCString<A>(_:)(v36, v37, v38, (uint64_t)&v50, v48, v55);
      uint64_t v6 = v39;
      if (v39) {
        goto LABEL_31;
      }
      uint64_t v8 = v44;
      swift_bridgeObjectRelease();
      outlined release of IKRig.Joint?((uint64_t)&v50);
      swift_bridgeObjectRelease();
      outlined release of IKRig.Joint?((uint64_t)&v50);
      goto LABEL_3;
    }
    outlined retain of String?((uint64_t)&v50);
    outlined retain of String?((uint64_t)&v50);
    swift_bridgeObjectRetain();
    uint64_t v41 = v47;
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v6 = v41;
    if (v41) {
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    outlined release of IKRig.Joint?((uint64_t)&v50);
    swift_bridgeObjectRelease();
    outlined release of IKRig.Joint?((uint64_t)&v50);
    uint64_t v8 = v44;
LABEL_3:
    v10 += 176;
    if (!--v7) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease();
  outlined release of IKRig.Joint?((uint64_t)&v50);
  swift_bridgeObjectRelease();
  outlined release of IKRig.Joint?((uint64_t)&v50);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  Swift::String v14;
  Swift::String v15;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  void *object;
  uint64_t v24;
  char v25;
  void *v26;
  Swift::String v27;
  uint64_t countAndFlagsBits;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  uint64_t v41;

  uint64_t v41 = a3;
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    uint64_t v6 = result;
    swift_bridgeObjectRetain();
    uint64_t v7 = v5 - 1;
    for (uint64_t i = 32; ; i += 160)
    {
      uint64_t v9 = *(_OWORD *)(v6 + i + 96);
      uint64_t v10 = *(_OWORD *)(v6 + i + 128);
      long long v11 = *(_OWORD *)(v6 + i + 144);
      uint64_t v38 = *(_OWORD *)(v6 + i + 112);
      uint64_t v39 = v10;
      uint64_t v40 = v11;
      long long v12 = *(_OWORD *)(v6 + i + 48);
      uint64_t v33 = *(_OWORD *)(v6 + i + 32);
      long long v34 = v12;
      long long v13 = *(_OWORD *)(v6 + i + 80);
      uint64_t v35 = *(_OWORD *)(v6 + i + 64);
      uint64_t v36 = v13;
      uint64_t v37 = v9;
      long long v14 = *(Swift::String *)(v6 + i + 16);
      uint64_t v31 = *(Swift::String *)(v6 + i);
      uint64_t v32 = v14;
      long long v15 = v31;
      uint64_t v30 = v31;
      outlined retain of IKRig.Constraint((uint64_t)&v31);
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v16 = StringProtocol.hash.getter();
      if ((specialized Set._Variant.insert(_:)((Swift::UInt *)&v30, v16) & 1) == 0) {
        break;
      }
      uint64_t v17 = *a5;
      uint64_t v30 = v32;
      swift_bridgeObjectRetain();
      uint64_t v18 = StringProtocol.hash.getter();
      char v19 = specialized Set.contains(_:)(v18, v17);
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        v30._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
        v30._object  = v26;
        v27._countAndFlagsBits  = 2108704;
        v27._object  = (void *)0xE300000000000000;
        String.append(_:)(v27);
        swift_bridgeObjectRetain();
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        object  = v30._object;
        countAndFlagsBits  = v30._countAndFlagsBits;
        lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError();
        swift_allocError();
        *(void *)long long v24 = countAndFlagsBits;
        long long v25 = 4;
        goto LABEL_9;
      }
      outlined release of IKRig.Constraint((uint64_t)&v31);
      if (!v7) {
        return swift_bridgeObjectRelease();
      }
      --v7;
    }
    v30._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
    v30._object  = v20;
    v21._countAndFlagsBits  = 2108704;
    v21._object  = (void *)0xE300000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRetain();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    object  = v30._object;
    long long v22 = v30._countAndFlagsBits;
    lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError();
    swift_allocError();
    *(void *)long long v24 = v22;
    long long v25 = 3;
LABEL_9:
    *(void *)(v24 + 8)  = object;
    *(unsigned char *)(v24 + 16)  = v25;
    swift_willThrow();
    outlined release of IKRig.Constraint((uint64_t)&v31);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation18IKSolverDefinitionVs5NeverOTg504_s17d49Foundation10IKResourceC17solverDefinitionsSayAA18fG13VGvgAFSiXEfU_AG0K0CTf1cn_nTf4ng_n(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v4 = a2;
  uint64_t v5 = result;
  uint64_t v29 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if (v4 >= v5 && (v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v29;
    uint64_t v22 = v4;
    while (v4 != v5)
    {
      DefinitionSolverID  = REIkRigAssetGetDefinitionSolverID();
      DefinitionRig  = REIkRigAssetGetDefinitionRig();
      int v25 = MEMORY[0x22A68AA20]();
      float v7 = MEMORY[0x22A68AA30](DefinitionRig);
      float v8 = MEMORY[0x22A68AA10](DefinitionRig);
      v9._unint64_t rawValue = (void *)MEMORY[0x263F8EE78];
      IKRig.JointCollection.init(_:)(MEMORY[0x263F8EE78], &v27);
      long long v24 = v27;
      IKRig.ConstraintsCollection.init(_:)(v9);
      long long v23 = v27;
      REIkRigAssetGetDefinitionSourceTarget();
      unint64_t v10 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v10, v11, (uint64_t)&v27);
      swift_bridgeObjectRelease();
      long long v12 = v27;
      char v13 = v28;
      REIkRigAssetGetDefinitionOutputTarget();
      unint64_t v14 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v14, v15, (uint64_t)&v27);
      uint64_t result = swift_bridgeObjectRelease();
      long long v16 = v27;
      char v17 = v28;
      uint64_t v29 = v3;
      unint64_t v19 = *(void *)(v3 + 16);
      unint64_t v18 = *(void *)(v3 + 24);
      if (v19 >= v18 >> 1)
      {
        long long v21 = v27;
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        long long v16 = v21;
        uint64_t v3 = v29;
      }
      *(void *)(v3 + 16)  = v19 + 1;
      uint64_t v20 = v3 + 104 * v19;
      *(void *)(v20 + 32)  = DefinitionSolverID;
      *(void *)(v20 + 40)  = v25;
      *(float *)(v20 + 48)  = v7;
      *(float *)(v20 + 52)  = v8;
      *(_OWORD *)(v20 + 56)  = v24;
      *(_OWORD *)(v20 + 72)  = v23;
      *(_OWORD *)(v20 + 88)  = v12;
      *(unsigned char *)(v20 + 104)  = v13;
      *(_OWORD *)(v20 + 112)  = v16;
      *(unsigned char *)(v20 + 128)  = v17;
      ++v5;
      uint64_t v4 = v22;
      if (v22 == v5) {
        return v3;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized static IKResource.validateSolver(_:)(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  long long v11 = *(_OWORD *)(a1 + 32);
  long long v12 = v2;
  long long v3 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = v3;
  char v15 = *(unsigned char *)(a1 + 96);
  long long v4 = *(_OWORD *)(a1 + 16);
  v10[0]  = *(_OWORD *)a1;
  v10[1]  = v4;
  uint64_t v5 = *((void *)&v4 + 1);
  long long v7 = v11;
  uint64_t v6 = v12;
  uint64_t v16 = MEMORY[0x263F8EE88];
  uint64_t v9 = MEMORY[0x263F8EE88];
  outlined retain of IKSolverDefinition((uint64_t)v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v5, v7, &v16, (uint64_t)v10);
  outlined release of IKSolverDefinition((uint64_t)v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    outlined retain of IKSolverDefinition((uint64_t)v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(*((uint64_t *)&v7 + 1), v6, (uint64_t)&v9, (uint64_t)v10, &v16);
    outlined release of IKSolverDefinition((uint64_t)v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized static IKResource.autotuneRig(_:)(uint64_t a1)
{
  uint64_t v3 = CoreIKGenericSolverCreate();
  ConstraintCount  = CoreIKGenericSolverGetConstraintCount();
  JointCount  = CoreIKGenericSolverGetJointCount();
  if (JointCount < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  int64_t v6 = JointCount;
  if (JointCount)
  {
    long long v26 = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, JointCount, 0);
    uint64_t v7 = 0;
    uint64_t v1 = v26;
    do
    {
      CoreIKGenericSolverGetTargetRestPose();
      long long v10 = v8;
      unint64_t v12 = v26[2];
      unint64_t v11 = v26[3];
      unint64_t v13 = v12 + 1;
      if (v12 >= v11 >> 1)
      {
        long long v23 = v9;
        long long v24 = v8;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        long long v9 = v23;
        long long v10 = v24;
      }
      HIDWORD(v10)  = v25;
      ++v7;
      v26[2]  = v13;
      long long v14 = &v26[4 * v12];
      *((_OWORD *)v14 + 2)  = v10;
      *((_OWORD *)v14 + 3)  = v9;
    }
    while (v6 != v7);
  }
  else
  {
    uint64_t v1 = (void *)MEMORY[0x263F8EE78];
    unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v13) {
      goto LABEL_11;
    }
  }
  float v15 = 0.0;
  uint64_t v16 = 4;
  do
  {
    float32x4_t v17 = vmulq_f32(*(float32x4_t *)&v1[v16], *(float32x4_t *)&v1[v16]);
    float v15 = v15
        + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]);
    v16 += 4;
    --v13;
  }
  while (v13);
LABEL_11:
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native)
  {
    if ((ConstraintCount & 0x8000000000000000) == 0) {
      goto LABEL_13;
    }
LABEL_27:
    __break(1u);
    return MEMORY[0x270F1A5A8](isUniquelyReferenced_nonNull_native);
  }
LABEL_26:
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
  if (ConstraintCount < 0) {
    goto LABEL_27;
  }
LABEL_13:
  uint64_t v19 = 0;
  do
  {
    if (ConstraintCount)
    {
      for (uint64_t i = 0; i != ConstraintCount; ++i)
      {
        MEMORY[0x22A68A910](v3, i);
        MEMORY[0x22A68A8A0]();
        CoreIKGetConstraintTarget();
        specialized static SIMD<>.random<A>(in:using:)(-1.0, 1.0);
        CoreIKGenericConstraintSetTargetParameters();
        if (CoreIKGenericConstraintHasLookAtEnabled())
        {
          CoreIKGenericConstraintGetLookAtTarget();
          specialized static SIMD<>.random<A>(in:using:)(-2.0, 2.0);
          CoreIKGenericConstraintSetLookAtTarget();
        }
      }
    }
    ++v19;
    int v21 = CoreIKGenericSolverSolve();
  }
  while (v19 != 15 && v21 != 2);
  swift_bridgeObjectRelease();
  MEMORY[0x22A68A940](v3);
  MEMORY[0x22A68AA50](a1);
  uint64_t isUniquelyReferenced_nonNull_native = v3;

  return MEMORY[0x270F1A5A8](isUniquelyReferenced_nonNull_native);
}

uint64_t specialized closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v66 = a3;
  v112  = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)a1;
  int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  uint64_t v69 = *(void *)(a1 + 8);
  unint64_t v70 = v9;
  unint64_t v71 = *(void *)(a1 + 56);
  uint64_t v72 = v8;
  uint64_t v68 = *(void *)(a1 + 64);
  int v10 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  int v13 = *(unsigned __int8 *)(a1 + 96);
  if ((specialized Set._Variant.insert(_:)(&v88, v3) & 1) == 0)
  {
    lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError();
    swift_allocError();
    *(void *)uint64_t v15 = v3;
    *(void *)(v15 + 8)  = 0;
    *(unsigned char *)(v15 + 16)  = 0;
    return swift_willThrow();
  }
  v88  = v3;
  v89  = v69;
  v90  = v4;
  v91  = v5;
  v92  = v7;
  v93  = v6;
  v94  = v72;
  v95  = v70;
  v96  = v71;
  v97  = v68;
  v98  = v10;
  v99  = v12;
  v100  = v11;
  v101  = v13;
  uint64_t result = specialized static IKResource.validateSolver(_:)((uint64_t)&v88);
  if (!v67)
  {
    int v60 = v13;
    uint64_t v61 = v11;
    uint64_t v62 = v12;
    uint64_t v63 = v3;
    int v65 = v10;
    v87  = 0;
    uint64_t v16 = MEMORY[0x22A68A9F0](0, &v87);
    uint64_t v17 = v87;
    if (v87)
    {
LABEL_6:
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
      swift_allocError();
      *unint64_t v18 = v17;
      return swift_willThrow();
    }
    uint64_t v19 = v16;
    uint64_t v20 = v69;
    uint64_t v75 = v69;
    int v76 = v4;
    unsigned int v77 = v5;
    uint64_t v78 = v7;
    uint64_t v79 = v6;
    uint64_t v21 = v72;
    v80  = v72;
    v81  = v70;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v7, v6, (uint64_t)&v75, v19, &v87);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    float v74 = 0.0;
    unint64_t v22 = *(void *)(v72 + 16);
    if (!v22)
    {
      unint64_t v48 = v71;
      char v49 = v65;
      uint64_t v50 = v63;
LABEL_33:
      MEMORY[0x22A68AA40](&v82, v19);
      LODWORD(v88)  = v82;
      float v51 = 0.05;
      if (v74 <= 10.0) {
        float v51 = 0.1;
      }
      BYTE4(v88)  = BYTE4(v82);
      LOWORD(v93)  = v86;
      BYTE2(v93)  = 1;
      v89  = __PAIR64__(HIDWORD(v83), LODWORD(v51));
      int64_t v52 = 0x7FFFFFFFLL;
      if (v20 < 0x7FFFFFFF) {
        int64_t v52 = v20;
      }
      if (v52 <= (uint64_t)0xFFFFFFFF80000000) {
        LODWORD(v52)  = 0x80000000;
      }
      v91  = v52;
      v90  = v4;
      v92  = __PAIR64__(v5, v85);
      CoreIKRigUpdateSettings();
      MEMORY[0x22A68AA00](v19, &v87);
      uint64_t v17 = v87;
      uint64_t v53 = v68;
      if (!v87)
      {
        specialized static IKResource.autotuneRig(_:)(v19);
        uint64_t v54 = v50;
        uint64_t v55 = (void *)MEMORY[0x22A68A880](v19);
        uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        v82  = v48;
        v83  = v53;
        v84  = v49;
        unint64_t v71 = specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v82, 1);
        v82  = v62;
        v83  = v61;
        v84  = v60;
        unint64_t v70 = specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v82, 1);
        v82  = 11635;
        v83  = 0xE200000000000000;
        uint64_t v73 = v54;
        v56._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v64 = v19;
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        uint64_t v69 = v82;
        uint64_t v57 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        uint64_t v72 = v57 + 32;
        uint64_t v58 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        unint64_t v71 = v58 + 32;
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REIkRigAssetBuilderAddRig();
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
      }
      MEMORY[0x22A68A890](v19);
      goto LABEL_6;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v23 = swift_bridgeObjectRetain();
    unint64_t v24 = 0;
    uint64_t v25 = 32;
    v59[1]  = MEMORY[0x263F8EE60] + 8;
    uint64_t v64 = v19;
    while (1)
    {
      if (v24 >= v22)
      {
        __break(1u);
        outlined release of IKRig.Constraint(v23);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease_n();
      }
      long long v26 = *(_OWORD *)(v21 + v25 + 16);
      v102  = *(_OWORD *)(v21 + v25);
      v103  = v26;
      long long v27 = *(_OWORD *)(v21 + v25 + 32);
      long long v28 = *(_OWORD *)(v21 + v25 + 48);
      long long v29 = *(_OWORD *)(v21 + v25 + 80);
      v106  = *(_OWORD *)(v21 + v25 + 64);
      v107  = v29;
      v104  = v27;
      v105  = v28;
      long long v30 = *(_OWORD *)(v21 + v25 + 96);
      long long v31 = *(_OWORD *)(v21 + v25 + 112);
      long long v32 = *(_OWORD *)(v21 + v25 + 144);
      v110  = *(_OWORD *)(v21 + v25 + 128);
      v111  = v32;
      v108  = v30;
      v109  = v31;
      long long v33 = v102;
      MEMORY[0x270FA5388](v23);
      v59[-4]  = v35;
      v59[-3]  = v36;
      v59[-2]  = v37;
      v59[-1]  = &v87;
      uint64_t v67 = v38;
      if ((*((void *)&v33 + 1) & 0x1000000000000000) != 0)
      {
LABEL_29:
        outlined retain of IKRig.Constraint((uint64_t)&v102);
        _StringGuts._slowWithCString<A>(_:)();
        uint64_t v23 = outlined release of IKRig.Constraint((uint64_t)&v102);
        uint64_t v19 = v64;
        unint64_t v48 = v71;
        uint64_t v21 = v72;
        goto LABEL_27;
      }
      uint64_t v39 = *((void *)&v103 + 1);
      uint64_t v40 = v103;
      if ((*((void *)&v33 + 1) & 0x2000000000000000) != 0)
      {
        v88  = v33;
        v89  = *((void *)&v33 + 1) & 0xFFFFFFFFFFFFFFLL;
        MEMORY[0x270FA5388](v34);
        v59[-6]  = &v88;
        v59[-5]  = v45;
        uint64_t v19 = v64;
        v59[-4]  = v46;
        v59[-3]  = v19;
        v59[-2]  = &v87;
        if ((v39 & 0x1000000000000000) != 0) {
          goto LABEL_31;
        }
        if ((v39 & 0x2000000000000000) != 0)
        {
          v82  = v40;
          v83  = v39 & 0xFFFFFFFFFFFFFFLL;
          outlined retain of IKRig.Constraint((uint64_t)&v102);
          uint64_t v44 = &v82;
          uint64_t v47 = &v88;
        }
        else
        {
          if ((v40 & 0x1000000000000000) == 0)
          {
LABEL_31:
            outlined retain of IKRig.Constraint((uint64_t)&v102);
            _StringGuts._slowWithCString<A>(_:)();
            goto LABEL_26;
          }
          outlined retain of IKRig.Constraint((uint64_t)&v102);
          uint64_t v47 = &v88;
          uint64_t v44 = (uint64_t *)((v39 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
      }
      else
      {
        if ((v33 & 0x1000000000000000) == 0) {
          goto LABEL_29;
        }
        MEMORY[0x270FA5388](v34);
        v59[-6]  = (*((void *)&v33 + 1) & 0xFFFFFFFFFFFFFFFLL) + 32;
        v59[-5]  = v41;
        uint64_t v42 = v64;
        v59[-4]  = v43;
        v59[-3]  = v42;
        v59[-2]  = &v87;
        if ((v39 & 0x1000000000000000) != 0)
        {
LABEL_30:
          outlined retain of IKRig.Constraint((uint64_t)&v102);
          _StringGuts._slowWithCString<A>(_:)();
          uint64_t v19 = v64;
          goto LABEL_26;
        }
        if ((v39 & 0x2000000000000000) != 0)
        {
          v88  = v40;
          v89  = v39 & 0xFFFFFFFFFFFFFFLL;
          outlined retain of IKRig.Constraint((uint64_t)&v102);
          uint64_t v44 = &v88;
        }
        else
        {
          if ((v40 & 0x1000000000000000) == 0) {
            goto LABEL_30;
          }
          outlined retain of IKRig.Constraint((uint64_t)&v102);
          uint64_t v44 = (uint64_t *)((v39 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        uint64_t v47 = (uint64_t *)((*((void *)&v33 + 1) & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v19 = v64;
      }
      closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)((uint64_t)v44, (uint64_t)v47, (uint64_t)&v102, &v74, v19, &v87);
LABEL_26:
      uint64_t v21 = v72;
      uint64_t v23 = outlined release of IKRig.Constraint((uint64_t)&v102);
      unint64_t v48 = v71;
LABEL_27:
      char v49 = v65;
      ++v24;
      unint64_t v22 = *(void *)(v21 + 16);
      v25 += 160;
      if (v24 == v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v50 = v63;
        uint64_t v20 = v69;
        goto LABEL_33;
      }
    }
  }
  return result;
}

uint64_t specialized static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v30 = MEMORY[0x263F8EE88];
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v31);
  uint64_t v5 = v33;
  uint64_t v6 = v34;
  __swift_project_boxed_opaque_existential_1(&v31, v33);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  uint64_t v43 = 0;
  uint64_t v7 = REIkRigAssetBuilderCreate();
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v25 = v7;
    uint64_t v29 = v2;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    uint64_t v24 = a1;
    while (1)
    {
      uint64_t v26 = v9;
      uint64_t v27 = v8;
      uint64_t v10 = a1 + v9;
      uint64_t v12 = *(void *)(v10 + 56);
      uint64_t v11 = *(void *)(v10 + 64);
      uint64_t v13 = *(void *)(v10 + 72);
      uint64_t v14 = *(void *)(v10 + 80);
      uint64_t v16 = *(void *)(v10 + 88);
      uint64_t v15 = *(void *)(v10 + 96);
      unsigned __int8 v17 = *(unsigned char *)(v10 + 104);
      uint64_t v18 = *(void *)(v10 + 112);
      uint64_t v28 = *(void *)(v10 + 120);
      unsigned __int8 v19 = *(unsigned char *)(v10 + 128);
      long long v31 = *(_OWORD *)(v10 + 32);
      uint64_t v32 = *(void *)(v10 + 48);
      uint64_t v33 = v12;
      uint64_t v34 = v11;
      uint64_t v35 = v13;
      uint64_t v36 = v14;
      uint64_t v37 = v16;
      uint64_t v38 = v15;
      unsigned __int8 v39 = v17;
      uint64_t v40 = v18;
      uint64_t v41 = v28;
      unsigned __int8 v42 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of BindTarget(v16, v15, v17);
      outlined copy of BindTarget(v18, v28, v19);
      specialized closure #1 in static IKResource.createCoreAssetForDefinition(_:)((uint64_t)&v31, (uint64_t)&v30, v25);
      if (v29) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of BindTarget(v16, v15, v17);
      outlined consume of BindTarget(v18, v28, v19);
      uint64_t v9 = v26 + 104;
      --v8;
      a1  = v24;
      if (v27 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of BindTarget(v16, v15, v17);
    outlined consume of BindTarget(v18, v28, v19);
    swift_bridgeObjectRelease();
    RERelease();
    goto LABEL_9;
  }
LABEL_6:
  uint64_t result = REIkRigAssetCreate();
  uint64_t v21 = v43;
  if (v43)
  {
    type metadata accessor for CFErrorRef(0);
    uint64_t v13 = v22;
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *uint64_t v23 = v21;
    swift_willThrow();
    RERelease();
LABEL_9:
    swift_bridgeObjectRelease();
    return v13;
  }
  uint64_t v13 = result;
  if (result)
  {
    RERelease();
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IKResource()
{
  return self;
}

uint64_t method lookup function for IKResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IKResource);
}

uint64_t dispatch thunk of IKResource.__coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of IKResource.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of IKResource.solverDefinitions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

unint64_t lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError()
{
  unint64_t result = lazy protocol witness table cache variable for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError;
  if (!lazy protocol witness table cache variable for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = (float *)v1[3];
  uint64_t v6 = v1[4];
  uint64_t v5 = (uint64_t *)v1[5];
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  outlined retain of IKRig.Constraint(v3);
  return specialized String.withCString<A>(_:)(v7, v8, a1, v3, v4, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(a1);
}

{
  uint64_t v1;

  return closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(float **)(v1 + 32), *(void *)(v1 + 40), *(uint64_t **)(v1 + 48));
}

uint64_t outlined init with take of IKRig.Constraint.IKOrientationDemand.Mode(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = (uint64_t *)v1[6];
  outlined retain of String?(v5);
  return specialized String.withCString<A>(_:)(v3, v4, a1, v5, v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t **)(v1 + 40));
}

uint64_t outlined retain of IKSolverDefinition(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 72);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of BindTarget(v2, v3, v6);
  outlined copy of BindTarget(v4, v5, v7);
  return a1;
}

uint64_t outlined release of IKSolverDefinition(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 72);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget(v2, v3, v6);
  outlined consume of BindTarget(v4, v5, v7);
  return a1;
}

uint64_t outlined copy of IKResource.IKDefinitionError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 <= 5) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for IKResource.IKDefinitionError(uint64_t a1)
{
  return outlined consume of IKResource.IKDefinitionError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of IKResource.IKDefinitionError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 <= 5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IKResource.IKDefinitionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of IKResource.IKDefinitionError(*(void *)a2, v4, v5);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 16)  = v5;
  return a1;
}

uint64_t assignWithCopy for IKResource.IKDefinitionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of IKResource.IKDefinitionError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16)  = v5;
  outlined consume of IKResource.IKDefinitionError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for IKResource.IKDefinitionError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16)  = v3;
  outlined consume of IKResource.IKDefinitionError(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for IKResource.IKDefinitionError()
{
  return &type metadata for IKResource.IKDefinitionError;
}

uint64_t one-time initialization function for VideoLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, VideoLogger);
  __swift_project_value_buffer(v0, (uint64_t)VideoLogger);
  if (one-time initialization token for VideoLog != -1) {
    swift_once();
  }
  id v1 = (id)VideoLog;
  return Logger.init(_:)();
}

uint64_t one-time initialization function for VideoLog()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  VideoLog  = result;
  return result;
}

__n128 LowLevelTexture.descriptor.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)a1  = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 16)  = v2;
  __n128 result = *(__n128 *)(v1 + 56);
  long long v4 = *(_OWORD *)(v1 + 72);
  *(__n128 *)(a1 + 32)  = result;
  *(_OWORD *)(a1 + 48)  = v4;
  *(_DWORD *)(a1 + 64)  = *(_DWORD *)(v1 + 88);
  return result;
}

uint64_t LowLevelTexture.Descriptor.init(textureType:pixelFormat:width:height:depth:mipmapLevelCount:arrayLength:textureUsage:swizzle:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10)
{
  *(void *)a9  = result;
  *(void *)(a9 + 8)  = a2;
  *(void *)(a9 + 16)  = a3;
  *(void *)(a9 + 24)  = a4;
  *(void *)(a9 + 32)  = a5;
  *(void *)(a9 + 40)  = a6;
  *(void *)(a9 + 48)  = a7;
  *(void *)(a9 + 56)  = a8;
  *(_DWORD *)(a9 + 64)  = a10;
  return result;
}

uint64_t LowLevelTexture.Descriptor.textureType.getter()
{
  return *(void *)v0;
}

uint64_t LowLevelTexture.Descriptor.textureType.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.textureType.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.pixelFormat.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t LowLevelTexture.Descriptor.pixelFormat.setter(uint64_t result)
{
  *(void *)(v1 + 8)  = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.pixelFormat.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.width.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t LowLevelTexture.Descriptor.width.setter(uint64_t result)
{
  *(void *)(v1 + 16)  = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.width.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.height.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t LowLevelTexture.Descriptor.height.setter(uint64_t result)
{
  *(void *)(v1 + 24)  = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.height.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.depth.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t LowLevelTexture.Descriptor.depth.setter(uint64_t result)
{
  *(void *)(v1 + 32)  = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.depth.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.mipmapLevelCount.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t LowLevelTexture.Descriptor.mipmapLevelCount.setter(uint64_t result)
{
  *(void *)(v1 + 40)  = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.mipmapLevelCount.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.arrayLength.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t LowLevelTexture.Descriptor.arrayLength.setter(uint64_t result)
{
  *(void *)(v1 + 48)  = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.arrayLength.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.textureUsage.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t LowLevelTexture.Descriptor.textureUsage.setter(uint64_t result)
{
  *(void *)(v1 + 56)  = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.textureUsage.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.swizzle.getter()
{
  return *(unsigned int *)(v0 + 64);
}

uint64_t LowLevelTexture.Descriptor.swizzle.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 64)  = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.swizzle.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.__allocating_init(descriptor:)(uint64_t *a1)
{
  uint64_t v2 = swift_allocObject();
  LowLevelTexture.init(descriptor:)(a1);
  return v2;
}

uint64_t LowLevelTexture.init(descriptor:)(uint64_t *a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  char v32 = *((unsigned char *)a1 + 64);
  char v31 = *((unsigned char *)a1 + 65);
  uint64_t v29 = a1[7];
  char v30 = *((unsigned char *)a1 + 66);
  char v8 = *((unsigned char *)a1 + 67);
  uint64_t v9 = (void *)DRTextureDescriptorCreate();
  DRTextureDescriptorSetTextureType();
  uint64_t v27 = v1;
  uint64_t v10 = v4;
  DRTextureDescriptorSetPixelFormat();
  DRTextureDescriptorSetWidth();
  uint64_t v26 = v3;
  DRTextureDescriptorSetHeight();
  uint64_t v25 = v5;
  DRTextureDescriptorSetDepth();
  uint64_t v24 = v6;
  DRTextureDescriptorSetMipmapLevelCount();
  if (v7 < 0) {
    goto LABEL_12;
  }
  DRTextureDescriptorSetArrayLength();
  uint64_t v11 = v29;
  DRTextureDescriptorSetTextureUsage();
  DRTextureDescriptorSetSwizzle();
  id v38 = 0;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  id v12 = (id)REServiceLocatorGetDirectResourceService();
  if (v12)
  {
    uint64_t v13 = v12;
    Texture  = (void *)DRContextCreateTexture();

LABEL_7:
    uint64_t v17 = v28;
    *(void *)(v28 + 24)  = v2;
    *(void *)(v28 + 32)  = v27;
    *(void *)(v28 + 40)  = v10;
    *(void *)(v28 + 48)  = v26;
    *(void *)(v28 + 56)  = v25;
    *(void *)(v28 + 64)  = v24;
    *(void *)(v28 + 72)  = v7;
    *(void *)(v28 + 80)  = v11;
    *(unsigned char *)(v28 + 88)  = v32;
    *(unsigned char *)(v28 + 89)  = v31;
    *(unsigned char *)(v28 + 90)  = v30;
    *(unsigned char *)(v28 + 91)  = v8;
    if (Texture)
    {

      *(void *)(v28 + 16)  = Texture;
      return v17;
    }
    goto LABEL_11;
  }
  uint64_t v18 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of __RenderService?(v18, (uint64_t)&v33);
  if (v34)
  {
    outlined init with take of BindableDataInternal(&v33, (uint64_t)v35);
    uint64_t v19 = v36;
    uint64_t v20 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    (*(void (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    id v21 = (id)RERenderManagerGetRenderDevice();
    Texture  = (void *)DRTextureCreateUnmanaged();
    swift_unknownObjectRelease();
    uint64_t v11 = v29;
    id v22 = v38;
    if (v38)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
      swift_allocError();
      *uint64_t v15 = v22;
      id v16 = v22;
      swift_willThrow();

      type metadata accessor for LowLevelTexture();
      uint64_t v17 = v28;
      swift_deallocPartialClassInstance();
      return v17;
    }
    goto LABEL_7;
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id LowLevelTexture.read()()
{
  Texture  = (void *)DRTextureReadTexture();

  return Texture;
}

id LowLevelTexture.replace(using:)()
{
  uint64_t v0 = (void *)DRTextureReplaceTexture();

  return v0;
}

uint64_t LowLevelTexture.deinit()
{
  return v0;
}

uint64_t LowLevelTexture.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t TextureResource.init(from:)(uint64_t a1)
{
  v2[11]  = a1;
  v2[12]  = v1;
  type metadata accessor for MainActor();
  v2[13]  = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[14]  = v4;
  v2[15]  = v3;
  return MEMORY[0x270FA2498](TextureResource.init(from:), v4, v3);
}

uint64_t TextureResource.init(from:)()
{
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  TextureAssetWithDirectTexture  = REAssetServiceCreateTextureAssetWithDirectTexture();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  type metadata accessor for TextureResource();
  uint64_t v5 = swift_allocObject();
  v0[16]  = v5;
  *(void *)(v5 + 16)  = TextureAssetWithDirectTexture;
  *(void *)(v5 + 24)  = 0;
  RERetain();
  REAssetSetSwiftObject();
  swift_retain();
  RERelease();
  v0[10]  = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[17]  = v6;
  *uint64_t v6 = v0;
  v6[1]  = MeshResource.init(from:);
  uint64_t v7 = v0[12];
  return RequestLoadable.awaitForResourceSharing()(v7, (uint64_t)&protocol witness table for TextureResource);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TextureAssetWithDirectTexture;
  uint64_t v4;
  uint64_t v5;
  void v7[3];
  uint64_t v8;
  uint64_t v9;

  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v7);
  uint64_t v1 = v8;
  uint64_t v2 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  TextureAssetWithDirectTexture  = REAssetServiceCreateTextureAssetWithDirectTexture();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  type metadata accessor for TextureResource();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16)  = TextureAssetWithDirectTexture;
  *(void *)(v4 + 24)  = 0;
  RERetain();
  REAssetSetSwiftObject();
  swift_retain();
  RERelease();
  v7[0]  = v4;
  RequestLoadable.enforceResourceSharingBeforeECSCommits()();
  swift_release();
  if (v5) {
    swift_release();
  }
  swift_release();
  return v4;
}

uint64_t TextureResource.replace(with:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v4);
  uint64_t v1 = v5;
  uint64_t v2 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return RETextureAssetReplaceAllWithDirectTexture();
}

uint64_t static TextureResource.generate(from:)(uint64_t a1)
{
  v1[2]  = type metadata accessor for MainActor();
  v1[3]  = static MainActor.shared.getter();
  type metadata accessor for TextureResource();
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[4]  = v3;
  *uint64_t v3 = v1;
  v3[1]  = static MeshResource.generate(from:);
  return TextureResource.init(from:)(a1);
}

uint64_t static TextureResource.generate(from:)()
{
  return TextureResource.init(from:)();
}

uint64_t type metadata accessor for LowLevelTexture()
{
  return self;
}

uint64_t method lookup function for LowLevelTexture(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LowLevelTexture);
}

uint64_t dispatch thunk of LowLevelTexture.__allocating_init(descriptor:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of LowLevelTexture.read()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of LowLevelTexture.replace(using:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

__n128 __swift_memcpy68_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)(a1 + 48)  = v4;
  *(__n128 *)(a1 + 16)  = result;
  return result;
}

ValueMetadata *type metadata accessor for LowLevelTexture.Descriptor()
{
  return &type metadata for LowLevelTexture.Descriptor;
}

RealityKit::__RKEntityAudioActionType_optional __swiftcall __RKEntityAudioActionType.init(rawValue:)(Swift::String rawValue)
{
  v2._unint64_t rawValue = &outlined read-only object #0 of __RKEntityAudioActionType.init(rawValue:);
  return (RealityKit::__RKEntityAudioActionType_optional)__RKEntityAudioActionType.init(rawValue:)(rawValue, v2, v1);
}

uint64_t __RKEntityAudioActionType.rawValue.getter()
{
  uint64_t v1 = 0x6573756170;
  if (*v0 != 1) {
    uint64_t v1 = 1886352499;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 2036427888;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityAudioActionType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityAudioActionType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityAudioActionType()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityAudioActionType()
{
  return Hasher._finalize()();
}

RealityKit::__RKEntityAudioActionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityAudioActionType(Swift::String *a1)
{
  return __RKEntityAudioActionType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityAudioActionType(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x6573756170;
  if (v2 != 1)
  {
    uint64_t v5 = 1886352499;
    unint64_t v4 = 0xE400000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 2036427888;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1  = v7;
  a1[1]  = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityAudioActionType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityAudioActionType()
{
  return RawRepresentable<>.encode(to:)();
}

RealityKit::__RKAudioSpatialModeSelection_optional __swiftcall __RKAudioSpatialModeSelection.init(rawValue:)(Swift::String rawValue)
{
  v2._unint64_t rawValue = &outlined read-only object #0 of __RKAudioSpatialModeSelection.init(rawValue:);
  return (RealityKit::__RKAudioSpatialModeSelection_optional)__RKEntityAudioActionType.init(rawValue:)(rawValue, v2, v1);
}

uint64_t __RKEntityAudioActionType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  object  = string._object;
  v4._countAndFlagsBits  = string._countAndFlagsBits;
  v4._object  = object;
  unint64_t v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  char v9 = 3;
  if (v7 < 3) {
    char v9 = v7;
  }
  *a3  = v9;
  return result;
}

void *static __RKAudioSpatialModeSelection.allCases.getter()
{
  return &outlined read-only object #0 of static __RKAudioSpatialModeSelection.allCases.getter;
}

uint64_t __RKAudioSpatialModeSelection.rawValue.getter()
{
  uint64_t v1 = 0x746E6569626D61;
  if (*v0 != 1) {
    uint64_t v1 = 0x636973756DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F7320746E696F70;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKAudioSpatialModeSelection(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKAudioSpatialModeSelection()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKAudioSpatialModeSelection()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKAudioSpatialModeSelection()
{
  return Hasher._finalize()();
}

RealityKit::__RKAudioSpatialModeSelection_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKAudioSpatialModeSelection(Swift::String *a1)
{
  return __RKAudioSpatialModeSelection.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKAudioSpatialModeSelection(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEC00000065637275;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x746E6569626D61;
  if (v2 != 1)
  {
    uint64_t v5 = 0x636973756DLL;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6F7320746E696F70;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1  = v7;
  a1[1]  = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKAudioSpatialModeSelection()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKAudioSpatialModeSelection()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKAudioSpatialModeSelection(void *a1@<X8>)
{
  *a1  = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKAudioSpatialModeSelection;
}

uint64_t __RKEntityAudioAction.type.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 120)  = v2;
  return result;
}

uint64_t (*__RKEntityAudioAction.type.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t key path setter for __RKEntityAudioAction.path : __RKEntityAudioAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 128)  = v3;
  *(void *)(v4 + 136)  = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityAudioAction.path.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __RKEntityAudioAction.path.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 128)  = a1;
  *(void *)(v2 + 136)  = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*__RKEntityAudioAction.path.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

double __RKEntityAudioAction.volume.getter()
{
  swift_beginAccess();
  return *(double *)(v0 + 144);
}

uint64_t __RKEntityAudioAction.volume.setter(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 144)  = a1;
  return result;
}

uint64_t (*__RKEntityAudioAction.volume.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAudioAction.loops.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 152);
}

uint64_t __RKEntityAudioAction.loops.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 152)  = a1;
  return result;
}

uint64_t (*__RKEntityAudioAction.loops.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAudioAction.spatialMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1  = *(unsigned char *)(v1 + 153);
  return result;
}

uint64_t __RKEntityAudioAction.spatialMode.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 153)  = v2;
  return result;
}

uint64_t (*__RKEntityAudioAction.spatialMode.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKEntityAudioAction.__audioAssetRef.getter()
{
  return *(void *)(v0 + 176);
}

uint64_t __RKEntityAudioAction.__allocating_init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5, char *a6, char *a7, double a8)
{
  return __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5, char *a6, char *a7, double a8)
{
  char v10 = *a2;
  char v11 = *a6;
  char v12 = *a7;
  *(void *)(v8 + 112)  = 0x4024000000000000;
  *(void *)(v8 + 160)  = 0;
  *(unsigned char *)(v8 + 168)  = 1;
  *(void *)(v8 + 176)  = 0;
  *(unsigned char *)(v8 + 120)  = v10;
  *(void *)(v8 + 128)  = a3;
  *(void *)(v8 + 136)  = a4;
  *(double *)(v8 + 144)  = a8;
  *(unsigned char *)(v8 + 152)  = a5;
  *(unsigned char *)(v8 + 153)  = v11;
  uint64_t v13 = swift_retain();
  uint64_t v14 = __RKEntityAction.init(targetEntity:)(v13);
  swift_beginAccess();
  *(unsigned char *)(v14 + 105)  = v12;
  swift_beginAccess();
  swift_beginAccess();
  if (!*(void *)(v14 + 16))
  {
    swift_retain();
    goto LABEL_13;
  }
  swift_retain_n();
  swift_bridgeObjectRetain();
  if (!REEntityGetSceneNullable()
    || !RESceneGetECSManagerNullable()
    || (uint64_t ServiceLocator = REECSManagerGetServiceLocator(), !MEMORY[0x22A692220](ServiceLocator)))
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_13:
    *(void *)(v14 + 176)  = 0;
    goto LABEL_14;
  }
  String.utf8CString.getter();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v14 + 176)  = AssetHandle;
  if (AssetHandle)
  {
    REAssetHandleLoadNow();
    if (!a1) {
      goto LABEL_15;
    }
    if (REEntityGetSceneNullable())
    {
      if (RESceneGetECSManagerNullable())
      {
        REECSManagerGetServiceLocator();
        if (REServiceLocatorGetAudioService()) {
          REAudioServiceStartAudioEngine();
        }
      }
    }
  }
LABEL_14:
  swift_release();
LABEL_15:
  swift_release();
  return v14;
}

uint64_t __RKEntityAudioAction.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityAudioAction.deinit()
{
  swift_beginAccess();
  if (*(void *)(v0 + 16))
  {
    if (REEntityGetSceneNullable())
    {
      if (RESceneGetECSManagerNullable())
      {
        REECSManagerGetServiceLocator();
        if (REServiceLocatorGetAudioService()) {
          REAudioServiceStopAudioEngine();
        }
      }
    }
  }
  if (*(void *)(v0 + 176)) {
    RERelease();
  }
  swift_beginAccess();
  *(void *)(v0 + 96)  = 2;
  *(unsigned char *)(v0 + 104)  = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityAudioAction.__deallocating_deinit()
{
  __RKEntityAudioAction.deinit();

  return swift_deallocClassInstance();
}

uint64_t __RKEntityAudioAction.perform(with:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v54 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for DispatchTime();
  uint64_t v53 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  char v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  int64_t v52 = (char *)&v45 - v12;
  swift_beginAccess();
  uint64_t v13 = *(void *)(v1 + 16);
  aBlocuint64_t k = 91;
  unint64_t v59 = 0xE100000000000000;
  uint64_t v55 = v7;
  if (v13)
  {
    uint64_t v65 = 0;
    unint64_t v66 = 0xE000000000000000;
    uint64_t v64 = v13;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v14 = v65;
    unint64_t v15 = v66;
  }
  else
  {
    unint64_t v15 = 0xE300000000000000;
    uint64_t v14 = 7104878;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits  = 8285;
  v17._object  = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits  = StaticString.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits  = 8250;
  v19._object  = (void *)0xE200000000000000;
  String.append(_:)(v19);
  swift_release();
  unint64_t v20 = *(void *)(v1 + 16);
  if (!v20)
  {
    uint64_t v28 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v28, &aBlock);
    swift_bridgeObjectRelease();
    return v20 & 1;
  }
  uint64_t v51 = aBlock;
  unint64_t v57 = v59;
  id v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v3;
  uint64_t v24 = v2;
  swift_beginAccess();
  uint64_t v25 = *(void *)(v1 + 96);
  int v26 = *(unsigned __int8 *)(v1 + 104);
  if (v26 == 1 && v25 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 105))
    {
      if (*(unsigned char *)(v1 + 105) == 1)
      {
        swift_bridgeObjectRelease();
        LOBYTE(v20)  = 0;
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRelease();
        LOBYTE(v20)  = __RKEntityAudioAction.stop()();
        swift_release();
      }
      return v20 & 1;
    }
  }
  if (!*(void *)(v1 + 176))
  {
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)(v1 + 96);
    char v30 = *(unsigned char *)(v1 + 104);
    *(void *)(v1 + 96)  = 4;
    *(unsigned char *)(v1 + 104)  = 1;
    aBlocuint64_t k = v29;
    LOBYTE(v59)  = v30;
    __RKEntityAction.state.didset((uint64_t)&aBlock);
    swift_release();
    LOBYTE(v20)  = 0;
    return v20 & 1;
  }
  *(void *)(v1 + 96)  = 1;
  *(unsigned char *)(v1 + 104)  = 1;
  aBlocuint64_t k = v25;
  LOBYTE(v59)  = v26;
  unint64_t v50 = v20;
  swift_retain();
  __RKEntityAction.state.didset((uint64_t)&aBlock);
  REAudioPlayerComponentGetComponentType();
  ComponentByClass  = REEntityGetComponentByClass();
  if (!ComponentByClass)
  {
    REAudioPlayerComponentGetComponentType();
    ComponentByClass  = REEntityGetOrAddComponentByClass();
    REAudioPlayerComponentRegisterAsset();
    if ((*(unsigned char *)(v1 + 168) & 1) == 0)
    {
      if (*(void *)(v1 + 160))
      {
        swift_beginAccess();
        REAudioPlayerComponentSetLinearGainForToken();
      }
    }
  }
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 120))
  {
    if (*(unsigned char *)(v1 + 120) == 1)
    {
      unint64_t v20 = v57;
      if ((*(unsigned char *)(v1 + 168) & 1) == 0) {
        MEMORY[0x22A68C5B0](ComponentByClass, *(void *)(v1 + 160));
      }
    }
    else
    {
      unint64_t v20 = v57;
      if ((*(unsigned char *)(v1 + 168) & 1) == 0) {
        MEMORY[0x22A68C6D0](ComponentByClass, *(void *)(v1 + 160));
      }
    }
    goto LABEL_26;
  }
  uint64_t v46 = v21;
  uint64_t v47 = v24;
  uint64_t v48 = v23;
  uint64_t v49 = v22;
  *(void *)(v1 + 160)  = REAudioPlayerComponentPrepareAsset();
  *(unsigned char *)(v1 + 168)  = 0;
  swift_beginAccess();
  uint64_t result = REAudioPlayerComponentSetLinearGainForToken();
  if ((*(unsigned char *)(v1 + 168) & 1) == 0)
  {
    REAudioPlayerComponentPlayToken();
    uint64_t v32 = *(void *)(v1 + 96);
    char v33 = *(unsigned char *)(v1 + 104);
    *(void *)(v1 + 96)  = 1;
    *(unsigned char *)(v1 + 104)  = 1;
    aBlocuint64_t k = v32;
    LOBYTE(v59)  = v33;
    uint64_t v45 = ComponentByClass;
    __RKEntityAction.state.didset((uint64_t)&aBlock);
    REAudioFileAssetGetLengthInSeconds();
    double v35 = v34;
    type metadata accessor for OS_dispatch_queue();
    uint64_t v36 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    uint64_t v37 = v52;
    MEMORY[0x22A688820](v10, v35);
    id v38 = *(void (**)(char *, uint64_t))(v53 + 8);
    v38(v10, v56);
    uint64_t v39 = swift_allocObject();
    swift_weakInit();
    uint64_t v62 = partial apply for closure #1 in __RKEntityAudioAction.perform(with:);
    uint64_t v63 = v39;
    aBlocuint64_t k = MEMORY[0x263EF8330];
    unint64_t v59 = 1107296256;
    int v60 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v61 = &block_descriptor_31;
    uint64_t v40 = _Block_copy(&aBlock);
    swift_release();
    uint64_t v41 = v54;
    static DispatchQoS.unspecified.getter();
    aBlocuint64_t k = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unsigned __int8 v42 = v46;
    uint64_t v43 = v47;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A6893E0](v37, v41, v42, v40);
    _Block_release(v40);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v42, v43);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v41, v49);
    v38(v37, v56);
    unint64_t v20 = v57;
LABEL_26:
    RENetworkMarkComponentDirty();
    aBlocuint64_t k = v51;
    unint64_t v59 = v20;
    uint64_t v44 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v44, &aBlock);
    swift_bridgeObjectRelease();
    swift_release();
    LOBYTE(v20)  = 1;
    return v20 & 1;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in __RKEntityAudioAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 96);
    char v3 = *(unsigned char *)(v1 + 104);
    *(void *)(v1 + 96)  = 2;
    *(unsigned char *)(v1 + 104)  = 1;
    uint64_t v4 = v2;
    char v5 = v3;
    swift_retain();
    __RKEntityAction.state.didset((uint64_t)&v4);
    return swift_release_n();
  }
  return result;
}

uint64_t __RKEntityAudioAction.reversed()()
{
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 120))
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v1) {
      char v2 = 2;
    }
    else {
      char v2 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    char v2 = 2;
  }
  swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 16);
  char v11 = v2;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  swift_beginAccess();
  double v6 = *(double *)(v0 + 144);
  swift_beginAccess();
  char v7 = *(unsigned char *)(v0 + 152);
  swift_beginAccess();
  char v10 = *(unsigned char *)(v0 + 153);
  char v9 = 1;
  type metadata accessor for __RKEntityAudioAction();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  return __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(v3, &v11, v4, v5, v7, &v10, &v9, v6);
}

Swift::Bool __swiftcall __RKEntityAudioAction.stop()()
{
  swift_beginAccess();
  if (!*(void *)(v0 + 16)) {
    return 1;
  }
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    MEMORY[0x22A68C6C0]();
    RENetworkMarkComponentDirty();
    Swift::Bool v1 = 1;
    swift_beginAccess();
    uint64_t v2 = *(void *)(v0 + 96);
    char v3 = *(unsigned char *)(v0 + 104);
    *(void *)(v0 + 96)  = 3;
    *(unsigned char *)(v0 + 104)  = 1;
    uint64_t v7 = v2;
    char v8 = v3;
    __RKEntityAction.state.didset((uint64_t)&v7);
    swift_release();
  }
  else
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(v0 + 96);
    char v5 = *(unsigned char *)(v0 + 104);
    *(void *)(v0 + 96)  = 4;
    *(unsigned char *)(v0 + 104)  = 1;
    uint64_t v7 = v4;
    char v8 = v5;
    __RKEntityAction.state.didset((uint64_t)&v7);
    swift_release();
    return 0;
  }
  return v1;
}

Swift::Void __swiftcall __RKEntityAudioAction.preloadAssets()()
{
  swift_beginAccess();
  swift_beginAccess();
  if (*(void *)(v0 + 16))
  {
    swift_bridgeObjectRetain();
    if (REEntityGetSceneNullable()
      && RESceneGetECSManagerNullable()
      && (uint64_t ServiceLocator = REECSManagerGetServiceLocator(), MEMORY[0x22A692220](ServiceLocator)))
    {
      String.utf8CString.getter();
      uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
      swift_bridgeObjectRelease();
      swift_release();
      if (AssetHandle)
      {
        if ((REAssetHandleIsLoaded() & 1) == 0) {
          REAssetHandleLoadAsync();
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t __RKEntityAudioAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  swift_beginAccess();
  char v12 = *(unsigned char *)(v1 + 120);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 128);
  uint64_t v5 = *(void *)(v1 + 136);
  swift_beginAccess();
  double v6 = *(double *)(v1 + 144);
  swift_beginAccess();
  char v7 = *(unsigned char *)(v1 + 152);
  swift_beginAccess();
  char v11 = *(unsigned char *)(v1 + 153);
  char v10 = 1;
  uint64_t v8 = type metadata accessor for __RKEntityAudioAction();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(v3, &v12, v4, v5, v7, &v11, &v10, v6);
  a1[3]  = v8;
  *a1  = result;
  return result;
}

uint64_t __RKEntityAudioAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    swift_beginAccess();
    char v13 = *(unsigned char *)(v1 + 120);
    swift_beginAccess();
    uint64_t v5 = *(void *)(v1 + 128);
    uint64_t v6 = *(void *)(v1 + 136);
    swift_beginAccess();
    double v7 = *(double *)(v1 + 144);
    swift_beginAccess();
    char v8 = *(unsigned char *)(v1 + 152);
    swift_beginAccess();
    char v11 = *(unsigned char *)(v1 + 153);
    char v10 = 1;
    type metadata accessor for __RKEntityAudioAction();
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v9 = swift_retain();
    return __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(v9, &v13, v5, v6, v8, &v11, &v10, v7);
  }
  else
  {
    __RKEntityAudioAction.copy(with:)(v14);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v12;
    }
    else {
      return 0;
    }
  }
}

void __RKEntityAudioAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityAudioAction.init(targetEntity:)()
{
}

uint64_t sub_22813E864()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in __RKEntityAudioAction.perform(with:)()
{
  return closure #1 in __RKEntityAudioAction.perform(with:)();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

uint64_t type metadata accessor for __RKEntityAudioAction()
{
  return self;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKAudioSpatialModeSelection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKAudioSpatialModeSelection] and conformance [A], &demangling cache variable for type metadata for [__RKAudioSpatialModeSelection]);
}

uint64_t sub_22813E9CC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2  = *(unsigned char *)(v3 + 120);
  return result;
}

uint64_t sub_22813EA14(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 120)  = v2;
  return result;
}

uint64_t sub_22813EA58@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 136);
  *a2  = *(void *)(v3 + 128);
  a2[1]  = v4;
  return swift_bridgeObjectRetain();
}

double sub_22813EAA8@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  double result = *(double *)(v3 + 144);
  *a2  = result;
  return result;
}

uint64_t sub_22813EAF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 144)  = v2;
  return result;
}

uint64_t sub_22813EB3C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2  = *(unsigned char *)(v3 + 152);
  return result;
}

uint64_t sub_22813EB84(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 152)  = v2;
  return result;
}

uint64_t sub_22813EBC8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2  = *(unsigned char *)(v3 + 153);
  return result;
}

uint64_t sub_22813EC10(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 153)  = v2;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityAudioActionType()
{
  return &type metadata for __RKEntityAudioActionType;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityAudioActionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22813ED34);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKAudioSpatialModeSelection()
{
  return &type metadata for __RKAudioSpatialModeSelection;
}

uint64_t method lookup function for __RKEntityAudioAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityAudioAction);
}

uint64_t dispatch thunk of __RKEntityAudioAction.type.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.type.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.type.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.path.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.path.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.path.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.volume.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.volume.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.volume.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.loops.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.loops.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.loops.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.spatialMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.spatialMode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.spatialMode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.__audioAssetRef.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.__allocating_init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)()
{
  return (*(uint64_t (**)(void))(v0 + 760))();
}

uint64_t __RKVisibilityShowMoveInAnimation.deinit()
{
  return v0;
}

uint64_t __RKVisibilityShowMoveInAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityShowMoveInAnimation()
{
  return self;
}

uint64_t specialized static __RKVisibilityShowMoveInAnimation.createVisibilityShowMoveInAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(long long *a1, float a2, float a3, float32x4_t a4, uint64_t a5, unsigned char *a6, char a7)
{
  long long v28 = *a1;
  long long v26 = a1[2];
  long long v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._unint64_t rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 117, 0, MEMORY[0x263F8EE78]);
      char v13 = &outlined read-only object #1 of static __RKVisibilityShowMoveInAnimation.createVisibilityShowMoveInAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._unint64_t rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 81, 0, MEMORY[0x263F8EE78]);
      char v13 = &outlined read-only object #2 of static __RKVisibilityShowMoveInAnimation.createVisibilityShowMoveInAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._unint64_t rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 45, 0, MEMORY[0x263F8EE78]);
    char v13 = &outlined read-only object #0 of static __RKVisibilityShowMoveInAnimation.createVisibilityShowMoveInAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  unint64_t rawValue = v33._rawValue;
  if (!*((void *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  char v7 = BYTE1(v31);
  float v9 = (float)v15;
  unsigned int v8 = DWORD2(v31);
  unint64_t v16 = (long long *)&rawValue[6 * v15];
  long long v24 = *v16;
  long long v25 = *(v16 - 1);
  long long v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_15:
  }
    unint64_t rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  unint64_t v18 = rawValue[2];
  unint64_t v17 = rawValue[3];
  float v19 = a2 / v9;
  if (v18 >= v17 >> 1) {
    unint64_t rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, rawValue);
  }
  rawValue[2]  = v18 + 1;
  unint64_t v20 = &rawValue[6 * v18];
  v20[2]  = v25;
  void v20[3] = v24;
  v20[4]  = v23;
  v33._unint64_t rawValue = rawValue;
  long long v30 = v28;
  long long v31 = v27;
  long long v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30)  = 1;
  *((void *)&v30 + 1)  = "Transform.transform";
  LOBYTE(v31)  = a7 & 1;
  BYTE1(v31)  = v7;
  *(void *)((char *)&v31 + 4)  = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3)  = a2;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16)  = xmmword_22830EC60;
    *(void *)(result + 32)  = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static AudioResource.Normalization.dynamic.getter(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(unsigned char *)(a1 + 8)  = 2;
}

void AudioResource.Normalization.Kind.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      Hasher._combine(_:)(0);
      return;
    }
    Swift::UInt v4 = 2;
  }
  else
  {
    Swift::UInt v4 = 1;
  }
  Hasher._combine(_:)(v4);
  if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = a2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AudioResource.Normalization.Kind(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a2;
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a2 + 8)) {
      return 0;
    }
    return *(double *)a1 == v2;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v3 != 1) {
      return 0;
    }
    return *(double *)a1 == v2;
  }
  return v3 == 2 && *(void *)&v2 == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioResource.Normalization.Kind()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  AudioResource.Normalization.Kind.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AudioResource.Normalization.Kind(uint64_t a1)
{
  AudioResource.Normalization.Kind.hash(into:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioResource.Normalization.Kind()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  AudioResource.Normalization.Kind.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

BOOL static AudioResource.Normalization.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) != 1) {
    return v4 == 2 && *(void *)&v3 == 0;
  }
  return v4 == 1 && v2 == v3;
}

void AudioResource.Normalization.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    if (*(unsigned char *)(v0 + 8) != 1)
    {
      Hasher._combine(_:)(0);
      return;
    }
    Swift::UInt v2 = 2;
  }
  else
  {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

Swift::Int AudioResource.Normalization.hashValue.getter()
{
  Swift::UInt64 v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
    Swift::UInt v3 = 2;
  }
  else
  {
    Swift::UInt v3 = 1;
  }
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AudioResource.Normalization(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    return !*(unsigned char *)(a2 + 8) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 8) != 1) {
    return v4 == 2 && *(void *)&v3 == 0;
  }
  return v4 == 1 && v2 == v3;
}

void protocol witness for Hashable.hash(into:) in conformance AudioResource.Normalization()
{
  Swift::UInt64 v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    if (*(unsigned char *)(v0 + 8) != 1)
    {
      Hasher._combine(_:)(0);
      return;
    }
    Swift::UInt v2 = 2;
  }
  else
  {
    Swift::UInt v2 = 1;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioResource.Normalization()
{
  Swift::UInt64 v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
    Swift::UInt v3 = 2;
  }
  else
  {
    Swift::UInt v3 = 1;
  }
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AudioResource.Normalization and conformance AudioResource.Normalization()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioResource.Normalization and conformance AudioResource.Normalization;
  if (!lazy protocol witness table cache variable for type AudioResource.Normalization and conformance AudioResource.Normalization)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Normalization and conformance AudioResource.Normalization);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioResource.Normalization()
{
  return &type metadata for AudioResource.Normalization;
}

ValueMetadata *type metadata accessor for AudioResource.Normalization.Kind()
{
  return &type metadata for AudioResource.Normalization.Kind;
}

unint64_t lazy protocol witness table accessor for type AudioResource.Normalization.Kind and conformance AudioResource.Normalization.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioResource.Normalization.Kind and conformance AudioResource.Normalization.Kind;
  if (!lazy protocol witness table cache variable for type AudioResource.Normalization.Kind and conformance AudioResource.Normalization.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Normalization.Kind and conformance AudioResource.Normalization.Kind);
  }
  return result;
}

uint64_t StateMachineParameter.init(name:bindTarget:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  char v11 = *((unsigned char *)a3 + 16);
  uint64_t v12 = type metadata accessor for StateMachineParameter();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a5 + *(int *)(v12 + 40), 1, 1, a4);
  *(void *)a5  = a1;
  *(void *)(a5 + 8)  = a2;
  *(void *)(a5 + 16)  = v9;
  *(void *)(a5 + 24)  = v10;
  *(unsigned char *)(a5 + 32)  = v11;
  return result;
}

uint64_t type metadata accessor for StateMachineParameter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t StateMachineParameter.value(entity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v48 = a1;
  uint64_t v43 = *(void *)(a2 - 8);
  uint64_t v44 = a2;
  MEMORY[0x270FA5388](a1);
  uint64_t v45 = (uint64_t *)((char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(void *)(v7 + 32);
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v11 = type metadata accessor for BindableValue();
  uint64_t v12 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v16);
  unint64_t v20 = (char *)&v40 - v19;
  int v21 = *(unsigned __int8 *)(v4 + 32);
  if (v21 == 255)
  {
    uint64_t v25 = *(void *)v4;
    uint64_t v26 = *(void *)(v4 + 8);
    uint64_t v27 = v48;
    return static StateMachineUtils.getOrCreateEntityParameter<A>(entity:name:type:)(v27, v25, v26, v8, v8, v9, a3);
  }
  else
  {
    uint64_t v41 = v18;
    uint64_t v42 = v17;
    uint64_t v22 = *(void *)(v4 + 16);
    uint64_t v23 = *(void *)(v4 + 24);
    uint64_t v49 = v48;
    uint64_t v51 = v22;
    unint64_t v52 = v23;
    char v53 = v21;
    uint64_t v46 = v22;
    uint64_t v47 = v23;
    outlined copy of BindTarget?(v22, v23, v21);
    swift_retain();
    BindableValuesReference.subscript.getter((uint64_t)&v51, v8, v10, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v11) == 1)
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v42);
      swift_release();
      long long v28 = v45;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v43 + 16))(v45, v4, v44);
      uint64_t v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      uint64_t v49 = v51;
      unint64_t v50 = v52;
      v29._object  = (void *)0x800000022835A3C0;
      v29._countAndFlagsBits  = 0xD000000000000016;
      String.append(_:)(v29);
      uint64_t v30 = *v28;
      long long v31 = (void *)v28[1];
      swift_bridgeObjectRetain();
      v32._countAndFlagsBits  = v30;
      v32._object  = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._countAndFlagsBits  = 0xD000000000000019;
      v33._object  = (void *)0x800000022835A3E0;
      String.append(_:)(v33);
      uint64_t v35 = v46;
      uint64_t v34 = v47;
      uint64_t v51 = v46;
      unint64_t v52 = v47;
      char v53 = v21;
      unint64_t v36 = specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v51, 1);
      id v38 = v37;
      outlined consume of BindTarget?(v35, v34, v21);
      v39._countAndFlagsBits  = v36;
      v39._object  = v38;
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      outlined consume of BindTarget?(v46, v47, v21);
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v14, v11);
      swift_release();
      BindableValue.value.getter(v11, a3);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v11);
    }
  }
  return result;
}

uint64_t StateMachineParameter.setValue(entity:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v60 = a2;
  uint64_t v53 = *(void *)(a3 - 8);
  uint64_t v54 = a3;
  MEMORY[0x270FA5388](a1);
  uint64_t v55 = (uint64_t *)((char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v59 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v58 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = *(void *)(*(void *)(v11 + 32) + 8);
  uint64_t v12 = type metadata accessor for BindableValue();
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v61 = (char *)&v50 - v17;
  MEMORY[0x270FA5388](v18);
  unint64_t v20 = (char *)&v50 - v19;
  uint64_t v21 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v22);
  long long v24 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  Swift::String v29 = (char *)&v50 - v28;
  int v30 = *(unsigned __int8 *)(v3 + 32);
  if (v30 != 255)
  {
    uint64_t v51 = v27;
    uint64_t v52 = v26;
    long long v24 = *(char **)(v3 + 16);
    uint64_t v31 = *(void *)(v3 + 24);
    uint64_t v63 = a1;
    uint64_t v65 = v24;
    unint64_t v66 = v31;
    char v67 = v30;
    uint64_t v56 = v31;
    int v57 = v30;
    outlined copy of BindTarget?((uint64_t)v24, v31, v30);
    swift_retain();
    BindableValuesReference.subscript.getter((uint64_t)&v65, v8, v62, (uint64_t)v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v12) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v29, v20, v12);
      swift_release();
      Swift::String v32 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v60, v8);
      BindableValue.value.setter(v32, v12);
      uint64_t v33 = (uint64_t)v61;
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v61, v29, v12);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v33, 0, 1, v12);
      uint64_t v65 = v24;
      unint64_t v66 = v56;
      char v67 = v57;
      uint64_t v63 = a1;
      swift_retain();
      BindableValuesReference.subscript.setter(v33, (uint64_t)&v65, v8, v8);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v29, v12);
    }
    goto LABEL_8;
  }
  uint64_t v35 = *(void *)v3;
  uint64_t v4 = *(void *)(v3 + 8);
  static StateMachineUtils.createEntityParameterIfDoesNotExist<A>(entity:name:type:)(a1, *(void *)v3, v4, v8, v8);
  uint64_t v65 = (char *)a1;
  swift_retain();
  Entity.ParameterSet.subscript.getter(v35, v4, v8, v8, v62);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v12) == 1)
  {
    __break(1u);
LABEL_8:
    (*(void (**)(char *, uint64_t))(v51 + 8))(v20, v52);
    swift_release();
    id v38 = v55;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v53 + 16))(v55, v4, v54);
    uint64_t v65 = 0;
    unint64_t v66 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    uint64_t v63 = (uint64_t)v65;
    unint64_t v64 = v66;
    v39._object  = (void *)0x800000022835A3C0;
    v39._countAndFlagsBits  = 0xD000000000000016;
    String.append(_:)(v39);
    uint64_t v40 = *v38;
    uint64_t v41 = (void *)v38[1];
    swift_bridgeObjectRetain();
    v42._countAndFlagsBits  = v40;
    v42._object  = v41;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._countAndFlagsBits  = 0xD000000000000019;
    v43._object  = (void *)0x800000022835A3E0;
    String.append(_:)(v43);
    uint64_t v44 = v56;
    uint64_t v65 = v24;
    unint64_t v66 = v56;
    unsigned __int8 v45 = v57;
    char v67 = v57;
    unint64_t v46 = specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v65, 1);
    uint64_t v48 = v47;
    outlined consume of BindTarget?((uint64_t)v24, v44, v45);
    v49._countAndFlagsBits  = v46;
    v49._object  = v48;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v15, v12);
  unint64_t v36 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v60, v8);
  BindableValue.value.setter(v36, v12);
  uint64_t v37 = v61;
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v61, v24, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v37, 0, 1, v12);
  uint64_t v65 = (char *)a1;
  swift_retain();
  swift_bridgeObjectRetain();
  Entity.ParameterSet.subscript.setter(v37, v35, v4, v8, v8, v62);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v12);
}

uint64_t StateMachineParameter.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *int v2 = a1;
  v2[1]  = a2;
  return result;
}

uint64_t (*StateMachineParameter.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineParameter.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)a1  = v2;
  *(void *)(a1 + 8)  = v3;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(a1 + 16)  = v4;
  return outlined copy of BindTarget?(v2, v3, v4);
}

uint64_t StateMachineParameter.bindTarget.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
  *(void *)(v1 + 16)  = v2;
  *(void *)(v1 + 24)  = v3;
  *(unsigned char *)(v1 + 32)  = v4;
  return result;
}

uint64_t (*StateMachineParameter.bindTarget.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineParameter.resetValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t StateMachineParameter.resetValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*StateMachineParameter.resetValue.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineParameter.id.getter()
{
  uint64_t v0 = specialized StateMachineCommandParameter.id.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t dispatch thunk of StateMachineParameterProtocol.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of StateMachineParameterProtocol.bindTarget.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata completion function for StateMachineParameter()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StateMachineParameter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v7 + 33) & ~(unint64_t)v7) + v9;
  int v11 = v7 & 0x100000;
  if (v8 > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v8;
    uint64_t v16 = a2[1];
    *a1  = *a2;
    a1[1]  = v16;
    unint64_t v17 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v19 = *(unsigned __int8 *)(v18 + 16);
    swift_bridgeObjectRetain();
    if (v19 > 6)
    {
      long long v22 = *(_OWORD *)v18;
      *(unsigned char *)(v17 + 16)  = *(unsigned char *)(v18 + 16);
      *(_OWORD *)unint64_t v17 = v22;
    }
    else
    {
      uint64_t v20 = *(void *)v18;
      uint64_t v21 = *(void *)(v18 + 8);
      outlined copy of BindTarget(*(void *)v18, v21, v19);
      *(void *)unint64_t v17 = v20;
      *(void *)(v17 + 8)  = v21;
      uint64_t v15 = ~v8;
      *(unsigned char *)(v17 + 16)  = v19;
    }
    uint64_t v23 = (void *)((v17 + v8 + 17) & v15);
    long long v24 = (const void *)((v18 + v8 + 17) & v15);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v24, 1, v4))
    {
      memcpy(v23, v24, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v23, v24, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t destroy for StateMachineParameter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  unint64_t v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 <= 6) {
    outlined consume of BindTarget(*(void *)v4, *(void *)(v4 + 8), v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v6 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v10 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v7, 1, v6);
  if (!result)
  {
    size_t v9 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);
    return v9(v7, v6);
  }
  return result;
}

void *initializeWithCopy for StateMachineParameter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1  = *a2;
  a1[1]  = v5;
  unint64_t v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v8 = *(unsigned __int8 *)(v7 + 16);
  swift_bridgeObjectRetain();
  if (v8 > 6)
  {
    long long v11 = *(_OWORD *)v7;
    *(unsigned char *)(v6 + 16)  = *(unsigned char *)(v7 + 16);
    *(_OWORD *)unint64_t v6 = v11;
  }
  else
  {
    uint64_t v9 = *(void *)v7;
    uint64_t v10 = *(void *)(v7 + 8);
    outlined copy of BindTarget(*(void *)v7, v10, v8);
    *(void *)unint64_t v6 = v9;
    *(void *)(v6 + 8)  = v10;
    *(unsigned char *)(v6 + 16)  = v8;
  }
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = (void *)((v6 + v14 + 17) & ~v14);
  uint64_t v16 = (const void *)((v7 + v14 + 17) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12))
  {
    if (*(_DWORD *)(v13 + 84)) {
      size_t v17 = *(void *)(v13 + 64);
    }
    else {
      size_t v17 = *(void *)(v13 + 64) + 1;
    }
    memcpy(v15, v16, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v15, v16, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  return a1;
}

void *assignWithCopy for StateMachineParameter(void *a1, void *a2, uint64_t a3)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v8 = *(unsigned __int8 *)(v6 + 16);
  unsigned int v9 = *(unsigned __int8 *)(v7 + 16);
  if (v8 > 6)
  {
    if (v9 <= 6)
    {
      uint64_t v15 = *(void *)v7;
      uint64_t v16 = *(void *)(v7 + 8);
      outlined copy of BindTarget(*(void *)v7, v16, *(unsigned char *)(v7 + 16));
      *(void *)unint64_t v6 = v15;
      *(void *)(v6 + 8)  = v16;
      *(unsigned char *)(v6 + 16)  = v9;
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 <= 6)
    {
      uint64_t v10 = *(void *)v7;
      uint64_t v11 = *(void *)(v7 + 8);
      outlined copy of BindTarget(*(void *)v7, v11, *(unsigned char *)(v7 + 16));
      uint64_t v12 = *(void *)v6;
      uint64_t v13 = *(void *)(v6 + 8);
      *(void *)unint64_t v6 = v10;
      *(void *)(v6 + 8)  = v11;
      unsigned __int8 v14 = *(unsigned char *)(v6 + 16);
      *(unsigned char *)(v6 + 16)  = v9;
      outlined consume of BindTarget(v12, v13, v14);
      goto LABEL_8;
    }
    outlined consume of BindTarget(*(void *)v6, *(void *)(v6 + 8), v8);
  }
  long long v17 = *(_OWORD *)v7;
  *(unsigned char *)(v6 + 16)  = *(unsigned char *)(v7 + 16);
  *(_OWORD *)unint64_t v6 = v17;
LABEL_8:
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (void *)((v6 + v20 + 17) & ~v20);
  long long v22 = (void *)((v7 + v20 + 17) & ~v20);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v24 = v23(v21, 1, v18);
  int v25 = v23(v22, 1, v18);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v21, v22, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v18);
      return a1;
    }
    int v26 = *(_DWORD *)(v19 + 84);
    size_t v27 = *(void *)(v19 + 64);
  }
  else
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v21, v22, v18);
      return a1;
    }
    Swift::String v29 = *(void (**)(void *, uint64_t))(v19 + 8);
    uint64_t v28 = v19 + 8;
    v29(v21, v18);
    int v26 = *(_DWORD *)(v28 + 76);
    size_t v27 = *(void *)(v28 + 56);
  }
  if (v26) {
    size_t v30 = v27;
  }
  else {
    size_t v30 = v27 + 1;
  }
  memcpy(v21, v22, v30);
  return a1;
}

_OWORD *initializeWithTake for StateMachineParameter(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1  = *a2;
  unint64_t v4 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)v5;
  *(unsigned char *)(v4 + 16)  = *(unsigned char *)(v5 + 16);
  *(_OWORD *)unint64_t v4 = v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (void *)((v4 + v9 + 17) & ~v9);
  uint64_t v11 = (const void *)((v5 + v9 + 17) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7))
  {
    if (*(_DWORD *)(v8 + 84)) {
      size_t v12 = *(void *)(v8 + 64);
    }
    else {
      size_t v12 = *(void *)(v8 + 64) + 1;
    }
    memcpy(v10, v11, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for StateMachineParameter(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  swift_bridgeObjectRelease();
  unint64_t v7 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v9 = *(unsigned __int8 *)(v7 + 16);
  if (v9 <= 6)
  {
    unsigned int v10 = *(unsigned __int8 *)(v8 + 16);
    uint64_t v11 = *(void *)v7;
    uint64_t v12 = *(void *)(v7 + 8);
    if (v10 <= 6)
    {
      *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
      *(unsigned char *)(v7 + 16)  = v10;
      outlined consume of BindTarget(v11, v12, v9);
      goto LABEL_6;
    }
    outlined consume of BindTarget(v11, v12, v9);
  }
  long long v13 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16)  = *(unsigned char *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = v13;
LABEL_6:
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = v8 + v16;
  uint64_t v18 = (void *)((v7 + v16 + 17) & ~v16);
  uint64_t v19 = (void *)((v17 + 17) & ~v16);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v21 = v20(v18, 1, v14);
  int v22 = v20(v19, 1, v14);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v18, v19, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      return a1;
    }
    int v23 = *(_DWORD *)(v15 + 84);
    size_t v24 = *(void *)(v15 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v18, v19, v14);
      return a1;
    }
    int v26 = *(void (**)(void *, uint64_t))(v15 + 8);
    uint64_t v25 = v15 + 8;
    v26(v18, v14);
    int v23 = *(_DWORD *)(v25 + 76);
    size_t v24 = *(void *)(v25 + 56);
  }
  if (v23) {
    size_t v27 = v24;
  }
  else {
    size_t v27 = v24 + 1;
  }
  memcpy(v18, v19, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineParameter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v9 + ((v8 + 33) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                     + v8
                                                                     + 17) & ~v8);
        if (v18 >= 2) {
          return v18 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v17 = *((void *)a1 + 1);
        if (v17 >= 0xFFFFFFFF) {
          LODWORD(v17)  = -1;
        }
        return (v17 + 1);
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11)  = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11)  = *a1;
        break;
      case 3:
        LODWORD(v11)  = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11)  = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11)  = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void storeEnumTagSinglePayload for StateMachineParameter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 33) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1  = v19;
          a1[2]  = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1  = v19;
        }
        else
        {
          *a1  = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1  = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13]  = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13]  = v18;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13]  = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      a1[v13]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v13]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x2281415C8);
    case 4:
      *(_DWORD *)&a1[v13]  = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v20 = (unsigned char *)((((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v11 + 17) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v24 = a2 + 1;
            uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v26 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v11 + 17) & ~v11;
            v25(v26, v24);
          }
          else
          {
            if (v12 <= 3) {
              int v21 = ~(-1 << (8 * v12));
            }
            else {
              int v21 = -1;
            }
            if (v12)
            {
              int v22 = v21 & (~v9 + a2);
              if (v12 <= 3) {
                int v23 = v12;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v12);
              switch(v23)
              {
                case 2:
                  *(_WORD *)uint64_t v20 = v22;
                  break;
                case 3:
                  *(_WORD *)uint64_t v20 = v22;
                  v20[2]  = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v20 = v22;
                  break;
                default:
                  *uint64_t v20 = v22;
                  break;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1  = a2 ^ 0x80000000;
          *((void *)a1 + 1)  = 0;
        }
        else
        {
          *((void *)a1 + 1)  = a2 - 1;
        }
      }
      return;
  }
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_transforms_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_transforms_v1.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*_proto_StereoProjectiveTransformCameraComponent_v1._proto_transforms_v1.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_eyePositions_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_eyePositions_v1.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8)  = a1;
  return result;
}

uint64_t (*_proto_StereoProjectiveTransformCameraComponent_v1._proto_eyePositions_v1.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_eyeOrientations_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_eyeOrientations_v1.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16)  = a1;
  return result;
}

uint64_t (*_proto_StereoProjectiveTransformCameraComponent_v1._proto_eyeOrientations_v1.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double _proto_StereoProjectiveTransformCameraComponent_v1.init(transforms:)@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_quatf>);
  uint64_t v4 = (_OWORD *)swift_allocObject();
  *(void *)&double result = 2;
  v4[1]  = xmmword_22831E350;
  _OWORD v4[2] = *(_OWORD *)&zmmword_22830EC90[48];
  v4[3]  = *(_OWORD *)&zmmword_22830EC90[48];
  *a2  = a1;
  a2[1]  = &outlined read-only object #0 of _proto_StereoProjectiveTransformCameraComponent_v1.init(transforms:);
  a2[2]  = v4;
  return result;
}

uint64_t static _proto_StereoProjectiveTransformCameraComponent_v1.__fromCore(_:)@<X0>(void *a1@<X8>)
{
  RECustomMatrixCameraComponentGetProjectionMatrix();
  long long v27 = v3;
  long long v29 = v2;
  long long v25 = v4;
  long long v23 = v5;
  RECustomMatrixCameraComponentGetProjectionMatrix();
  long long v21 = v7;
  long long v22 = v6;
  long long v19 = v9;
  long long v20 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
  unsigned int v10 = (_OWORD *)swift_allocObject();
  v10[1]  = xmmword_22831E350;
  v10[2]  = v29;
  v10[3]  = v27;
  v10[4]  = v25;
  v10[5]  = v23;
  v10[6]  = v22;
  v10[7]  = v21;
  v10[8]  = v20;
  v10[9]  = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_quatf>);
  uint64_t v11 = (_OWORD *)swift_allocObject();
  v11[1]  = xmmword_22831E350;
  void v11[2] = *(_OWORD *)&zmmword_22830EC90[48];
  void v11[3] = *(_OWORD *)&zmmword_22830EC90[48];
  *a1  = v10;
  RECustomMatrixCameraComponentGetLocalEyePose();
  long long v28 = v13;
  long long v30 = v12;
  RECustomMatrixCameraComponentGetLocalEyePose();
  long long v24 = v14;
  long long v26 = v15;
  unsigned int v16 = outlined read-only object #0 of _proto_StereoProjectiveTransformCameraComponent_v1.init(transforms:);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v18 = qword_26DC3C030;
    if (qword_26DC3C030) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(outlined read-only object #0 of _proto_StereoProjectiveTransformCameraComponent_v1.init(transforms:));
  unsigned int v16 = (_OWORD *)result;
  uint64_t v18 = *(void *)(result + 16);
  if (!v18) {
    goto LABEL_6;
  }
LABEL_3:
  v16[2]  = v30;
  if (v18 != 1)
  {
    void v16[3] = v24;
    void v11[2] = v28;
    void v11[3] = v26;
    a1[1]  = v16;
    a1[2]  = v11;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1.__toCore(_:)()
{
  uint64_t v1 = *v0;
  if (!*(void *)(*v0 + 16))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t result = RECustomMatrixCameraComponentSetProjectionFromMatrix();
  if (*(void *)(v1 + 16) < 2uLL)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = RECustomMatrixCameraComponentSetProjectionFromMatrix();
  if (!*(void *)(v3 + 16))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!*(void *)(v2 + 16))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = RECustomMatrixCameraComponentSetLocalEyePose();
  if (*(void *)(v3 + 16) < 2uLL)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (*(void *)(v2 + 16) < 2uLL)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  RECustomMatrixCameraComponentSetLocalEyePose();
  RECustomMatrixCameraComponentSetAutoFitFullScreenAspect();

  return RENetworkMarkComponentDirty();
}

void static _proto_StereoProjectiveTransformCameraComponent_v1.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1  = 56;
}

BOOL static _proto_StereoProjectiveTransformCameraComponent_v1.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  specialized static Array<A>.== infix(_:_:)(*(float32x4_t **)a1, *(float32x4_t **)a2);
  if ((v6 & 1) == 0 || !specialized static Array<A>.== infix(_:_:)(v2, v4)) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v3, v5);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _proto_StereoProjectiveTransformCameraComponent_v1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  specialized static Array<A>.== infix(_:_:)(*(float32x4_t **)a1, *(float32x4_t **)a2);
  if ((v6 & 1) == 0 || !specialized static Array<A>.== infix(_:_:)(v2, v4)) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v3, v5);
}

uint64_t destroy for _proto_StereoProjectiveTransformCameraComponent_v1()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for _proto_StereoProjectiveTransformCameraComponent_v1(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  a1[2]  = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _proto_StereoProjectiveTransformCameraComponent_v1(void *a1, void *a2)
{
  *a1  = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2]  = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _proto_StereoProjectiveTransformCameraComponent_v1(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _proto_StereoProjectiveTransformCameraComponent_v1()
{
  return &type metadata for _proto_StereoProjectiveTransformCameraComponent_v1;
}

BOOL specialized static SystemDependency.== infix(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  uint64_t v4 = a1[1] >> 62;
  if (!v4)
  {
    if (v3 >> 62) {
      return 0;
    }
    return *a1 == v2;
  }
  if (v4 == 1)
  {
    if (v3 >> 62 != 1) {
      return 0;
    }
    return *a1 == v2;
  }
  return v3 >> 62 == 2 && v2 == 0 && v3 == 0x8000000000000000;
}

uint64_t getEnumTagSinglePayload for SystemDependency(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 16382);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 50) >> 12) | (4
                                                           * ((*(void *)(a1 + 8) >> 50) & 0xC00 | ((*(void *)(a1 + 8) & 7) << 7) | (*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFD) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SystemDependency(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFD)
  {
    *(void *)uint64_t result = a2 - 16382;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0x3FFE) {
      *(unsigned char *)(result + 16)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FFE) {
      *(unsigned char *)(result + 16)  = 0;
    }
    if (a2)
    {
      unint64_t v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 8)  = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for SystemDependency(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    *result &= 0xFFFFFFFFFFFFFF8uLL;
    result[1]  = v2;
  }
  else
  {
    *uint64_t result = 8 * (a2 - 2);
    result[1]  = 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemDependency()
{
  return &type metadata for SystemDependency;
}

void TimelineClipProperties.repeatMode.getter(unsigned char *a1@<X8>)
{
  LODWORD(v3)  = *(unsigned __int8 *)(v1 + 81);
  if (v3 == 4)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 144) + 16);
    if (v3)
    {
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior  = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v3)  = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v3)  = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1  = v3;
}

uint64_t TimelineClipProperties.source.getter()
{
  if (*(void *)(v0 + 88))
  {
    uint64_t v1 = *(void *)(v0 + 88);
  }
  else if (*(void *)(*(void *)(v0 + 144) + 16) {
         && (ClipSourceRef  = RETimelineDefinitionCreateClipSourceRef()) != 0)
  }
  {
    uint64_t v3 = ClipSourceRef;
    type metadata accessor for TimelineDefinition();
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 16)  = v3;
    RERetain();
    RERelease();
  }
  else
  {
    type metadata accessor for TimelineDefinition();
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 16)  = 0;
  }
  swift_retain();
  return v1;
}

uint64_t TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, uint64_t a13, char a14, uint64_t a15, char a16)
{
  int v20 = *((unsigned __int8 *)a3 + 16);
  char v21 = *a5;
  if (v20 == 255) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *a3;
  }
  if (v20 == 255) {
    unint64_t v23 = 0xE000000000000000;
  }
  else {
    unint64_t v23 = a3[1];
  }
  char v28 = *a6;
  if (v20 == 255) {
    char v24 = 0;
  }
  else {
    char v24 = *((unsigned char *)a3 + 16);
  }
  char v25 = a8 & 1;
  type metadata accessor for TimelineDefinition();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16)  = 0;
  *(void *)a9  = a7;
  *(unsigned char *)(a9 + 8)  = v25;
  *(unsigned char *)(a9 + 9)  = 0;
  *(void *)(a9 + 16)  = a13;
  *(unsigned char *)(a9 + 24)  = a14 & 1;
  *(unsigned char *)(a9 + 25)  = 0;
  *(void *)(a9 + 32)  = a15;
  *(unsigned char *)(a9 + 40)  = a16 & 1;
  *(unsigned char *)(a9 + 41)  = 0;
  *(double *)(a9 + 48)  = a10;
  *(unsigned char *)(a9 + 56)  = 0;
  *(double *)(a9 + 64)  = a11;
  *(unsigned char *)(a9 + 72)  = 0;
  *(float *)(a9 + 76)  = a12;
  *(unsigned char *)(a9 + 80)  = 0;
  *(unsigned char *)(a9 + 81)  = v21;
  *(void *)(a9 + 88)  = 0;
  *(void *)(a9 + 96)  = a1;
  *(void *)(a9 + 104)  = a2;
  *(void *)(a9 + 112)  = v22;
  *(void *)(a9 + 120)  = v23;
  *(unsigned char *)(a9 + 128)  = v24;
  *(_DWORD *)(a9 + 132)  = a4;
  *(unsigned char *)(a9 + 136)  = 0;
  *(unsigned char *)(a9 + 137)  = v28;
  *(unsigned char *)(a9 + 138)  = 0;
  *(unsigned char *)(a9 + 139)  = 0;
  *(void *)(a9 + 144)  = result;
  return result;
}

Swift::Void __swiftcall TimelineBaseProperties.writeProperties(_:)(Swift::OpaquePointer a1)
{
  unint64_t v4 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  int v6 = *(unsigned __int8 *)(v1 + 32);
  char v27 = *(unsigned char *)(v1 + 40);
  int v28 = *(unsigned __int8 *)(v1 + 42);
  int v7 = *(unsigned __int8 *)(v1 + 43);
  uint64_t v8 = *(void *)(v1 + 48);
  if (v4)
  {
    uint64_t v9 = *(void *)v1;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    unint64_t v10 = v4;
  }
  else if (*(void *)(v8 + 16))
  {
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v9 = String.init(cString:)();
    unint64_t v10 = v11;
  }
  else
  {
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v3, v5, v6);
  swift_release();
  long long v12 = (void *)MEMORY[0x22A688A50](v9, v10);
  id v13 = objc_msgSend(v12, sel_UTF8String);
  id v14 = v12;
  swift_bridgeObjectRelease();
  if (!v13)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    return;
  }
  MEMORY[0x22A693CE0](a1._rawValue, v13);
  int v26 = v7;
  if (v6 == 255)
  {
    if (*(void *)(v8 + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v5, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v18 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v18, v19, (uint64_t)&v29);
      swift_bridgeObjectRelease();
      uint64_t v15 = v29;
      uint64_t v16 = v30;
      unsigned __int8 v17 = v31;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v5, 0xFFu);
      swift_retain();
      uint64_t v15 = 0;
      unsigned __int8 v17 = 0;
      uint64_t v16 = 0xE000000000000000;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    uint64_t v15 = v3;
    uint64_t v16 = v5;
    unsigned __int8 v17 = v6;
  }
  outlined copy of BindTarget?(v3, v5, v6);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v5, v6);
  swift_release();
  uint64_t v29 = v15;
  uint64_t v30 = v16;
  unsigned __int8 v31 = v17;
  unint64_t v20 = specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v29, 1);
  uint64_t v22 = v21;
  outlined consume of BindTarget(v15, v16, v17);
  unint64_t v23 = (void *)MEMORY[0x22A688A50](v20, v22);
  id v24 = objc_msgSend(v23, sel_UTF8String);
  id v25 = v23;
  swift_bridgeObjectRelease();
  if (!v24) {
    goto LABEL_26;
  }
  RETimelineDefinitionSetTargetPath();
  if ((v27 & 1) != 0 && *(void *)(v8 + 16)) {
    RETimelineDefinitionGetAnimationLayer();
  }
  RETimelineDefinitionSetAnimationLayer();
  if (v28 && *(void *)(v8 + 16)) {
    RETimelineDefinitionGetFillMode();
  }
  RETimelineDefinitionSetFillMode();
  if (v26 == 2 && *(void *)(v8 + 16)) {
    RETimelineDefinitionIsAdditive();
  }

  RETimelineDefinitionSetAdditive();
}

BOOL TimelineClipProperties.isClipped.getter()
{
  long long v1 = v0[7];
  long long v23 = v0[6];
  long long v24 = v1;
  long long v25 = v0[8];
  uint64_t v26 = *((void *)v0 + 18);
  long long v2 = v0[3];
  long long v19 = v0[2];
  long long v20 = v2;
  long long v3 = v0[5];
  long long v21 = v0[4];
  long long v22 = v3;
  long long v4 = v0[1];
  long long v17 = *v0;
  long long v18 = v4;
  uint64_t v5 = v26;
  if (BYTE9(v17))
  {
    if (*(void *)(v26 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v17);
      ClipStart  = RETimelineDefinitionGetClipStart();
      outlined release of TimelineClipProperties((uint64_t)&v17);
      if (ClipStart) {
        return 1;
      }
    }
  }
  else if ((BYTE8(v17) & 1) == 0)
  {
    return 1;
  }
  if (BYTE9(v18))
  {
    if (*(void *)(v5 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v17);
      ClipEnd  = RETimelineDefinitionGetClipEnd();
      outlined release of TimelineClipProperties((uint64_t)&v17);
      if (ClipEnd) {
        return 1;
      }
    }
  }
  else if ((BYTE8(v18) & 1) == 0)
  {
    return 1;
  }
  if (BYTE9(v19))
  {
    if (*(void *)(v5 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v17);
      ClipDuration  = RETimelineDefinitionGetClipDuration();
      outlined release of TimelineClipProperties((uint64_t)&v17);
      if (ClipDuration) {
        return 1;
      }
    }
  }
  else if ((BYTE8(v19) & 1) == 0)
  {
    return 1;
  }
  if ((BYTE8(v20) & 1) == 0)
  {
    if (*(double *)&v20 == 0.0) {
      goto LABEL_22;
    }
    return 1;
  }
  if (*(void *)(v5 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v17);
    if (RETimelineDefinitionGetTimelineType() != 2)
    {
      outlined release of TimelineClipProperties((uint64_t)&v17);
      if (BYTE8(v21)) {
        goto LABEL_23;
      }
LABEL_27:
      double v12 = *(double *)&v21;
      goto LABEL_28;
    }
    RETimelineDefinitionGetClipOffset();
    double v10 = v9;
    outlined release of TimelineClipProperties((uint64_t)&v17);
    if (v10 != 0.0) {
      return 1;
    }
  }
LABEL_22:
  if ((BYTE8(v21) & 1) == 0) {
    goto LABEL_27;
  }
LABEL_23:
  if (!*(void *)(v5 + 16)) {
    goto LABEL_29;
  }
  outlined retain of TimelineClipProperties((uint64_t)&v17);
  if (RETimelineDefinitionGetTimelineType() != 2)
  {
    outlined release of TimelineClipProperties((uint64_t)&v17);
    if (v22) {
      goto LABEL_30;
    }
LABEL_34:
    float v14 = *((float *)&v21 + 3);
    goto LABEL_35;
  }
  RETimelineDefinitionGetClipDelay();
  double v12 = v11;
  outlined release of TimelineClipProperties((uint64_t)&v17);
LABEL_28:
  if (v12 != 0.0) {
    return 1;
  }
LABEL_29:
  if ((v22 & 1) == 0) {
    goto LABEL_34;
  }
LABEL_30:
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  outlined retain of TimelineClipProperties((uint64_t)&v17);
  if (RETimelineDefinitionGetTimelineType() != 2)
  {
    outlined release of TimelineClipProperties((uint64_t)&v17);
    goto LABEL_38;
  }
  RETimelineDefinitionGetClipSpeed();
  float v14 = v13;
  outlined release of TimelineClipProperties((uint64_t)&v17);
LABEL_35:
  if (v14 != 1.0) {
    return 1;
  }
LABEL_38:
  TimelineClipProperties.repeatMode.getter(&v16);
  return v16 != 0;
}

uint64_t TimelineClipProperties.createClip()()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v13 = *(_OWORD *)(v0 + 96);
  long long v14 = v1;
  long long v15 = *(_OWORD *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  void v11[2] = *(_OWORD *)(v0 + 32);
  void v11[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  v11[4]  = *(_OWORD *)(v0 + 64);
  long long v12 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v11[0]  = *(_OWORD *)v0;
  v11[1]  = v4;
  uint64_t v5 = *((void *)&v12 + 1);
  if (*((void *)&v12 + 1))
  {
    outlined retain of TimelineClipProperties((uint64_t)v11);
    uint64_t v6 = v5;
    goto LABEL_8;
  }
  if (*(void *)(v16 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v11);
    ClipSourceRef  = RETimelineDefinitionCreateClipSourceRef();
    if (ClipSourceRef)
    {
      uint64_t v8 = ClipSourceRef;
      type metadata accessor for TimelineDefinition();
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16)  = v8;
      RERetain();
      RERelease();
      goto LABEL_8;
    }
  }
  else
  {
    outlined retain of TimelineClipProperties((uint64_t)v11);
  }
  type metadata accessor for TimelineDefinition();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16)  = 0;
LABEL_8:
  swift_retain();
  outlined release of TimelineClipProperties((uint64_t)v11);
  if (*(void *)(v6 + 16))
  {
    closure #1 in TimelineClipProperties.createClip()((uint64_t)v11, &v10);
    swift_release();
    return v10;
  }
  else
  {
    swift_release();
    return 0;
  }
}

uint64_t TimelineClipProperties.isModified.getter()
{
  if (*(unsigned char *)(v0 + 9) != 1) {
    return 1;
  }
  uint64_t result = 1;
  if (*(unsigned char *)(v0 + 25) == 1
    && *(unsigned char *)(v0 + 41)
    && *(unsigned char *)(v0 + 56)
    && *(unsigned char *)(v0 + 72)
    && *(unsigned char *)(v0 + 80)
    && *(unsigned char *)(v0 + 81) == 4
    && !*(void *)(v0 + 88))
  {
    if (*(void *)(v0 + 104)) {
      BOOL v2 = 0;
    }
    else {
      BOOL v2 = *(unsigned __int8 *)(v0 + 128) == 255;
    }
    int v3 = *(unsigned __int8 *)(v0 + 136) ^ 1;
    if (!v2) {
      int v3 = 1;
    }
    unsigned int v4 = v3 | *(unsigned __int8 *)(v0 + 138) ^ 1;
    if (*(unsigned char *)(v0 + 139) == 2) {
      return v4;
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation17BlendShapeWeightsV_Sfs5NeverOTB504_s17d12Foundation17fgH36V21__rk_animationInverseACvgS2fXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v8;
    unsigned int v4 = (float *)(a1 + 32);
    do
    {
      float v5 = *v4;
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 16);
      unint64_t v6 = *(void *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16)  = v7 + 1;
      *(float *)(result + 4 * v7 + 32)  = -v5;
      ++v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_0D3Kit9TransformVs5NeverOTB504_s17d12Foundation15fg35V21__rk_animationInverseACvg0A3Kit9I8VAGXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v18;
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    uint64_t v4 = a1 + 64;
    do
    {
      RESRTInverse();
      long long v8 = v5;
      unint64_t v10 = *(void *)(v18 + 16);
      unint64_t v9 = *(void *)(v18 + 24);
      if (v10 >= v9 >> 1)
      {
        long long v14 = v7;
        long long v15 = v5;
        long long v13 = v6;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        long long v6 = v13;
        long long v7 = v14;
        long long v8 = v15;
      }
      HIDWORD(v8)  = v16;
      HIDWORD(v7)  = v17;
      *(void *)(v18 + 16)  = v10 + 1;
      double v11 = (_OWORD *)(v18 + 48 * v10);
      void v11[2] = v8;
      void v11[3] = v6;
      v11[4]  = v7;
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void (*specialized MutableCollection<>.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  long long v7 = malloc(0x38uLL);
  *a1  = v7;
  v7[5]  = a3;
  v7[6]  = v3;
  v7[4]  = a2;
  uint64_t v9 = *v3;
  uint64_t result = (void (*)(uint64_t **, char))v3[1];
  uint64_t v10 = *((void *)result + 2);
  if (v10 < *v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v9 > a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v10 >= a3)
  {
    _OWORD v7[2] = v9;
    v7[3]  = result;
    *long long v7 = a2;
    v7[1]  = a3;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
LABEL_7:
  __break(1u);
  return result;
}

void MutableCollection<>.subscript.modifyspecialized (uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v6 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  long long v7 = (void *)(*a1)[5];
  uint64_t v8 = (*a1)[6];
  uint64_t v9 = (void *)(*a1)[4];
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v8, v9, v7, v3, v4, v6, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)((*a1)[6], v9, v7, v3, v4, v6, v5);
  }
  swift_bridgeObjectRelease();

  free(v2);
}

{
  id *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t vars8;

  uint64_t v2 = (id *)*a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  long long v7 = (*a1)[3];
  if (a2)
  {
    uint64_t v8 = (id)(*a1)[2];
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v6, v7, v5, v3, v4);
  }
  else
  {
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)((*a1)[5], v7, v5, v3, v4);
  }

  free(v2);
}

{
  MutableCollection<>.subscript.modifyspecialized (a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _writeBackMutableSlice<A, B>(_:bounds:slice:));
}

{
  MutableCollection<>.subscript.modifyspecialized (a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _writeBackMutableSlice<A, B>(_:bounds:slice:));
}

uint64_t specialized MutableCollection<>.subscript.modify(void *a1, uint64_t a2, uint64_t a3)
{
  long long v7 = malloc(0x30uLL);
  *a1  = v7;
  v7[4]  = a3;
  v7[5]  = v3;
  v7[3]  = a2;
  uint64_t v8 = *v3;
  uint64_t result = DRMeshGetPartCount();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= a3)
  {
    v7[1]  = a3;
    _OWORD v7[2] = v8;
    *long long v7 = a2;
    id v10 = v8;
    return (uint64_t)MutableCollection<>.subscript.modifyspecialized ;
  }
LABEL_7:
  __break(1u);
  return result;
}

void (*specialized MutableCollection<>.subscript.modify(void (**a1)(uint64_t **a1, char a2), uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t result = (void (*)(uint64_t **, char))malloc(0x30uLL);
  *a1  = result;
  *((void *)result + 4)  = a3;
  *((void *)result + 5)  = v3;
  *((void *)result + 3)  = a2;
  if (a2 < 0 || (uint64_t v8 = result, result = *v3, *((void *)*v3 + 2) < a3))
  {
    __break(1u);
  }
  else
  {
    *((void *)v8 + 1)  = a3;
    *((void *)v8 + 2)  = result;
    *(void *)uint64_t v8 = a2;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
  return result;
}

{
  void (**v3)(uint64_t **, char);
  void (*result)(uint64_t **, char);
  void (*v8)(uint64_t **, char);

  uint64_t result = (void (*)(uint64_t **, char))malloc(0x30uLL);
  *a1  = result;
  *((void *)result + 4)  = a3;
  *((void *)result + 5)  = v3;
  *((void *)result + 3)  = a2;
  if (a2 < 0 || (uint64_t v8 = result, result = *v3, *((void *)*v3 + 2) < a3))
  {
    __break(1u);
  }
  else
  {
    *((void *)v8 + 1)  = a3;
    *((void *)v8 + 2)  = result;
    *(void *)uint64_t v8 = a2;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
  return result;
}

void MutableCollection<>.subscript.modifyspecialized (uint64_t **a1, char a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[1];
  uint64_t v7 = (*a1)[4];
  uint64_t v8 = (*a1)[5];
  uint64_t v9 = (*a1)[2];
  uint64_t v10 = (*a1)[3];
  if (a2)
  {
    swift_bridgeObjectRetain();
    a3(v8, v10, v7, v5, v6, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    a3((*a1)[5], v10, v7, v5, v6, v9);
  }
  swift_bridgeObjectRelease();

  free(v4);
}

uint64_t specialized MutableCollection.swapAt(_:_:)(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    DRMeshGetPartAt();
    DRMeshGetPartAt();
    DRMeshSetPartAt();
    return DRMeshSetPartAt();
  }
  return result;
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2)
{
  if (result != a2)
  {
    unint64_t v5 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(void **)(v3 + 8);
      unint64_t v6 = v4[2];
      if (v6 > result)
      {
        unint64_t v2 = a2;
        outlined init with copy of __REAssetService((uint64_t)&v4[5 * result + 4], (uint64_t)v9);
        if (v6 > v2)
        {
          outlined init with copy of __REAssetService((uint64_t)&v4[5 * v2 + 4], (uint64_t)v8);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v3 + 8)  = v4;
          if (isUniquelyReferenced_nonNull_native) {
            goto LABEL_6;
          }
          goto LABEL_14;
        }
LABEL_13:
        __break(1u);
LABEL_14:
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        *(void *)(v3 + 8)  = v4;
LABEL_6:
        if (v4[2] <= v5)
        {
          __break(1u);
        }
        else
        {
          __swift_assign_boxed_opaque_existential_1(&v4[5 * v5 + 4], v8);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
          unint64_t v5 = *(void *)(v3 + 8);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v3 + 8)  = v5;
          if (result) {
            goto LABEL_8;
          }
        }
        uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v5);
        unint64_t v5 = result;
        *(void *)(v3 + 8)  = result;
LABEL_8:
        if (*(void *)(v5 + 16) <= v2)
        {
          __break(1u);
        }
        else
        {
          __swift_assign_boxed_opaque_existential_1((uint64_t *)(v5 + 40 * v2 + 32), v9);
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
        }
        return result;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unint64_t v6;
  long long *v7;
  long long *v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;

  if (result != a2)
  {
    unint64_t v6 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(void **)v3;
      if (*(void *)(*(void *)v3 + 16) > result)
      {
        unint64_t v2 = a2;
        unint64_t v5 = v4 + 4;
        uint64_t v7 = (long long *)&v4[6 * result + 4];
        int v17 = *v7;
        long long v15 = v7[2];
        int v16 = v7[1];
        if (one-time initialization token for identity == -1)
        {
          if ((a2 & 0x8000000000000000) == 0) {
            goto LABEL_6;
          }
          goto LABEL_15;
        }
LABEL_14:
        swift_once();
        if ((v2 & 0x8000000000000000) == 0)
        {
LABEL_6:
          if (v4[2] > v2)
          {
            uint64_t v8 = (long long *)&v5[6 * v2];
            long long v13 = v8[1];
            long long v14 = *v8;
            long long v12 = v8[2];
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if (result) {
              goto LABEL_8;
            }
            goto LABEL_17;
          }
LABEL_16:
          __break(1u);
LABEL_17:
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          uint64_t v4 = (void *)result;
LABEL_8:
          uint64_t v9 = v4[2];
          if (v9 <= v6)
          {
            __break(1u);
          }
          else
          {
            uint64_t v10 = &v4[6 * v6 + 4];
            _OWORD *v10 = v14;
            v10[1]  = v13;
            v10[2]  = v12;
            *(void *)uint64_t v3 = v4;
            if (v9 > v2)
            {
              double v11 = &v4[6 * v2 + 4];
              *double v11 = v17;
              v11[1]  = v16;
              void v11[2] = v15;
              *(void *)uint64_t v3 = v4;
              return result;
            }
          }
          __break(1u);
          return result;
        }
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (result != a2)
  {
    uint64_t v7 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *v3;
      uint64_t v8 = *(void *)(*v3 + 16);
      if (v8 > result)
      {
        unint64_t v2 = a2;
        if (v8 > a2)
        {
          unint64_t v5 = *(_DWORD *)(v4 + 32 + 4 * result);
          unint64_t v6 = *(_DWORD *)(v4 + 32 + 4 * a2);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result) {
            goto LABEL_6;
          }
          goto LABEL_13;
        }
LABEL_12:
        __break(1u);
LABEL_13:
        uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        uint64_t v4 = result;
LABEL_6:
        uint64_t v9 = *(void *)(v4 + 16);
        if (v9 <= v7)
        {
          __break(1u);
        }
        else
        {
          *(_DWORD *)(v4 + 32 + 4 * v7)  = v6;
          *uint64_t v3 = v4;
          if (v9 > v2)
          {
            *(_DWORD *)(v4 + 32 + 4 * v2)  = v5;
            *uint64_t v3 = v4;
            return result;
          }
        }
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI75V24__rk_combineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = a1;
  int64_t v4 = *(void *)(a1 + 16);
  int64_t v5 = *(void *)(a2 + 16);
  if (v5 < v4) {
    int64_t v4 = *(void *)(a2 + 16);
  }
  if (v5) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = 0;
  }
  v97  = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  unint64_t v7 = 0x2681BB000uLL;
  uint64_t v8 = (float32x4_t *)&unk_22831E000;
  v96  = (float32x4_t *)v3;
  if (v6)
  {
    unint64_t v9 = *(void *)(v3 + 16);
    uint64_t v10 = one-time initialization token for identity;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10 != -1) {
      goto LABEL_34;
    }
    while (1)
    {
      uint64_t v11 = *(void *)(v2 + 16);
      long long v12 = (float *)(v2 + 72);
      long long v13 = (float32x4_t *)(v3 + 64);
      float32x4_t v14 = v8[254];
      uint64_t v8 = (float32x4_t *)v6;
      uint64_t v15 = v2;
      unint64_t v7 = 0x2681BB000;
      while (v8)
      {
        if (!v9) {
          goto LABEL_30;
        }
        if (!v11) {
          goto LABEL_31;
        }
        float32x4_t v17 = v13[-1];
        float32x4_t v16 = *v13;
        float32x4_t v18 = v13[-2];
        float32x4_t v19 = *(float32x4_t *)(v12 - 6);
        float32x2_t v20 = *(float32x2_t *)(v12 - 10);
        float v21 = *(v12 - 8);
        float v22 = *(v12 - 2);
        float v23 = *(v12 - 1);
        unint64_t v3 = *(void *)(v97 + 16);
        unint64_t v24 = *(void *)(v97 + 24);
        uint64_t v2 = v3 + 1;
        float v25 = *v12;
        if (v3 >= v24 >> 1)
        {
          v93  = v15;
          v87  = *v13;
          v90  = v14;
          v81  = v13[-2];
          v84  = v13[-1];
          float32x4_t v79 = *(float32x4_t *)(v12 - 6);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v3 + 1, 1);
          float32x4_t v19 = v79;
          float32x4_t v18 = v81;
          float32x4_t v17 = v84;
          float32x4_t v16 = v87;
          float32x4_t v14 = v90;
          unint64_t v7 = 0x2681BB000;
          uint64_t v15 = v93;
        }
        *(float32x2_t *)&long long v26 = vmul_f32(*(float32x2_t *)v18.f32, v20);
        *((void *)&v26 + 1)  = COERCE_UNSIGNED_INT(vmuls_lane_f32(v21, v18, 2));
        int32x4_t v27 = (int32x4_t)vnegq_f32(v19);
        int8x16_t v28 = (int8x16_t)vtrn2q_s32((int32x4_t)v19, vtrn1q_s32((int32x4_t)v19, v27));
        float32x4_t v29 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v27, 8uLL), *(float32x2_t *)v17.f32, 1), (float32x4_t)vextq_s8(v28, v28, 8uLL), v17.f32[0]);
        float32x4_t v30 = (float32x4_t)vrev64q_s32((int32x4_t)v19);
        v30.i32[0]  = v27.i32[1];
        v30.i32[3]  = v27.i32[2];
        float32x4_t v31 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v19, v17, 3), v30, v17, 2), v29);
        float32x4_t v32 = vmulq_f32(v17, v14);
        int32x4_t v33 = (int32x4_t)vnegq_f32(v32);
        int8x16_t v34 = (int8x16_t)vtrn2q_s32((int32x4_t)v32, vtrn1q_s32((int32x4_t)v32, v33));
        float32x4_t v35 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v33, 8uLL), vmuls_lane_f32(v23, *(float32x2_t *)v18.f32, 1));
        float32x4_t v36 = (float32x4_t)vrev64q_s32((int32x4_t)v32);
        v36.i32[0]  = v33.i32[1];
        v36.i32[3]  = v33.i32[2];
        float32x4_t v37 = vmlaq_n_f32(vmlaq_n_f32(v35, (float32x4_t)vextq_s8(v34, v34, 8uLL), v22 * v18.f32[0]), v36, vmuls_lane_f32(v25, v18, 2));
        int32x4_t v38 = (int32x4_t)vnegq_f32(v37);
        int8x16_t v39 = (int8x16_t)vtrn2q_s32((int32x4_t)v37, vtrn1q_s32((int32x4_t)v37, v38));
        float32x4_t v40 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v38, 8uLL), *(float32x2_t *)v17.f32, 1), (float32x4_t)vextq_s8(v39, v39, 8uLL), v17.f32[0]);
        float32x4_t v41 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
        v41.i32[0]  = v38.i32[1];
        v41.i32[3]  = v38.i32[2];
        float32x4_t v42 = vaddq_f32(v16, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v37, v17, 3), v41, v17, 2), v40));
        v42.i32[3]  = 0;
        *(void *)(v97 + 16)  = v2;
        Swift::String v43 = (_OWORD *)(v97 + 48 * v3);
        --v9;
        v43[2]  = v26;
        v43[3]  = v31;
        v43[4]  = v42;
        --v11;
        v12 += 12;
        v13 += 3;
        uint64_t v8 = (float32x4_t *)((char *)v8 - 1);
        if (!v8) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      swift_once();
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = v2;
LABEL_17:
  uint64_t v8 = v96;
  unint64_t v9 = v96[1].u64[0];
  if (v6 != v9)
  {
    uint64_t v2 = 48;
    uint64_t v45 = 48 * v6 + 64;
    unint64_t v46 = (float32x4_t *)(v15 + v45);
    uint64_t v47 = (float32x4_t *)((char *)v96 + v45);
    float32x4_t v48 = (float32x4_t)xmmword_22831EFE0;
    Swift::String v49 = &one-time initialization token for identity;
    while (v6 < v9)
    {
      float32x4_t v50 = v47[-2];
      float32x4_t v51 = v47[-1];
      float32x4_t v52 = *v47;
      if (*(void *)(v7 + 1424) != -1)
      {
        unint64_t v3 = (unint64_t)v49;
        v94  = v15;
        v88  = *v47;
        v91  = v48;
        v82  = v47[-2];
        v85  = v47[-1];
        swift_once();
        float32x4_t v50 = v82;
        float32x4_t v51 = v85;
        float32x4_t v52 = v88;
        float32x4_t v48 = v91;
        Swift::String v49 = (uint64_t *)v3;
        uint64_t v15 = v94;
      }
      unint64_t v53 = *(void *)(v15 + 16);
      if (v6 != v53)
      {
        if (v6 >= v53) {
          goto LABEL_33;
        }
        float32x4_t v55 = v46[-1];
        float32x4_t v54 = *v46;
        float32x2_t v56 = *(float32x2_t *)v46[-2].f32;
        float v57 = v46[-2].f32[2];
        unint64_t v3 = *(void *)(v97 + 16);
        unint64_t v58 = *(void *)(v97 + 24);
        if (v3 >= v58 >> 1)
        {
          v95  = v15;
          v89  = v52;
          v92  = v48;
          v83  = v50;
          v86  = v51;
          float32x4_t v78 = v46[-1];
          v80  = *v46;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v3 + 1, 1);
          float32x4_t v55 = v78;
          float32x4_t v54 = v80;
          float32x4_t v50 = v83;
          float32x4_t v51 = v86;
          float32x4_t v52 = v89;
          float32x4_t v48 = v92;
          Swift::String v49 = &one-time initialization token for identity;
          unint64_t v7 = 0x2681BB000;
          uint64_t v15 = v95;
        }
        ++v6;
        *(float32x2_t *)&long long v59 = vmul_f32(*(float32x2_t *)v50.f32, v56);
        *((void *)&v59 + 1)  = COERCE_UNSIGNED_INT(vmuls_lane_f32(v57, v50, 2));
        int32x4_t v60 = (int32x4_t)vnegq_f32(v55);
        int8x16_t v61 = (int8x16_t)vtrn2q_s32((int32x4_t)v55, vtrn1q_s32((int32x4_t)v55, v60));
        float32x4_t v62 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v60, 8uLL), *(float32x2_t *)v51.f32, 1), (float32x4_t)vextq_s8(v61, v61, 8uLL), v51.f32[0]);
        float32x4_t v63 = (float32x4_t)vrev64q_s32((int32x4_t)v55);
        v63.i32[0]  = v60.i32[1];
        v63.i32[3]  = v60.i32[2];
        float32x4_t v64 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v55, v51, 3), v63, v51, 2), v62);
        float32x4_t v65 = vmulq_f32(v50, v54);
        float32x4_t v66 = vmulq_f32(v51, v48);
        int32x4_t v67 = (int32x4_t)vnegq_f32(v66);
        int8x16_t v68 = (int8x16_t)vtrn2q_s32((int32x4_t)v66, vtrn1q_s32((int32x4_t)v66, v67));
        float32x4_t v69 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v67, 8uLL), *(float32x2_t *)v65.f32, 1);
        float32x4_t v70 = (float32x4_t)vrev64q_s32((int32x4_t)v66);
        v70.i32[0]  = v67.i32[1];
        v70.i32[3]  = v67.i32[2];
        float32x4_t v71 = vmlaq_laneq_f32(vmlaq_n_f32(v69, (float32x4_t)vextq_s8(v68, v68, 8uLL), v65.f32[0]), v70, v65, 2);
        int32x4_t v72 = (int32x4_t)vnegq_f32(v71);
        int8x16_t v73 = (int8x16_t)vtrn2q_s32((int32x4_t)v71, vtrn1q_s32((int32x4_t)v71, v72));
        float32x4_t v74 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 8uLL), *(float32x2_t *)v51.f32, 1), (float32x4_t)vextq_s8(v73, v73, 8uLL), v51.f32[0]);
        float32x4_t v75 = (float32x4_t)vrev64q_s32((int32x4_t)v71);
        v75.i32[0]  = v72.i32[1];
        v75.i32[3]  = v72.i32[2];
        float32x4_t v76 = vaddq_f32(v52, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v71, v51, 3), v75, v51, 2), v74));
        v76.i32[3]  = 0;
        *(void *)(v97 + 16)  = v3 + 1;
        unsigned int v77 = (_OWORD *)(v97 + 48 * v3);
        v77[2]  = v59;
        v77[3]  = v64;
        v77[4]  = v76;
        v46 += 3;
        v47 += 3;
        if (v9 != v6) {
          continue;
        }
      }
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v97;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI84V33__rk_invertAndCombineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n(float32x4_t *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  int64_t v4 = a1;
  int64_t v5 = a1[1].i64[0];
  int64_t v6 = *(void *)(a2 + 16);
  if (v6 < v5) {
    int64_t v5 = *(void *)(a2 + 16);
  }
  if (v6) {
    int64_t v7 = v5;
  }
  else {
    int64_t v7 = 0;
  }
  uint64_t v64 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  float32x4_t v42 = v4;
  unint64_t v43 = v3;
  unint64_t v41 = v7;
  if (v7)
  {
    unint64_t v2 = v4[1].u64[0];
    uint64_t v8 = one-time initialization token for identity;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 != -1) {
      goto LABEL_37;
    }
    while (1)
    {
      uint64_t v9 = *(void *)(v3 + 16);
      v4 += 4;
      uint64_t v10 = (float32x4_t *)(v3 + 64);
      unint64_t v11 = v41;
      while (v11)
      {
        if (!v2) {
          goto LABEL_33;
        }
        if (!v9) {
          goto LABEL_34;
        }
        simd_quatf v44 = (simd_quatf)v4[-2];
        float32x4_t v46 = *v4;
        simd_quatf v48 = (simd_quatf)v10[-1];
        float32x4_t v52 = v10[-2];
        float32x4_t v53 = *v10;
        *(double *)v12.i64  = simd_matrix4x4(v4[-1]);
        simd_float4 v56 = v12;
        simd_float4 v58 = v13;
        simd_float4 v60 = v14;
        float32x4_t v62 = v15;
        simd_float4x4.scale(_:)((float32x4_t)v44);
        v65.columns[2]  = v60;
        v65.columns[3]  = (simd_float4)vaddq_f32(v46, v62);
        v65.columns[3].i32[3]  = v62.i32[3];
        v65.columns[0]  = v56;
        v65.columns[1]  = v58;
        __invert_f4(v65);
        simd_matrix4x4((float32x4_t)v48);
        simd_float4x4.scale(_:)(v52);
        REMakeSRTFromMatrix();
        float32x4_t v19 = v16;
        unint64_t v3 = *(void *)(v64 + 16);
        unint64_t v20 = *(void *)(v64 + 24);
        if (v3 >= v20 >> 1)
        {
          float32x4_t v52 = v18;
          float32x4_t v53 = v16;
          simd_quatf v49 = v17;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v3 + 1, 1);
          simd_quatf v17 = v49;
          float32x4_t v18 = v52;
          float32x4_t v19 = v53;
        }
        v19.i32[3]  = v55.i32[3];
        v18.i32[3]  = v54.i32[3];
        *(void *)(v64 + 16)  = v3 + 1;
        float v21 = (_OWORD *)(v64 + 48 * v3);
        --v2;
        --v9;
        v4 += 3;
        void v21[2] = v19;
        void v21[3] = v17;
        void v21[4] = v18;
        v10 += 3;
        if (!--v11) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      swift_once();
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_17:
  unint64_t v3 = v41;
  unint64_t v22 = v42[1].u64[0];
  if (v41 != v22)
  {
    if (v41 <= v22) {
      unint64_t v24 = v42[1].u64[0];
    }
    else {
      unint64_t v24 = v41;
    }
    uint64_t v25 = 48 * v41 + 64;
    unint64_t v26 = v43;
    int64_t v4 = (float32x4_t *)(v43 + v25);
    int32x4_t v27 = (float32x4_t *)((char *)v42 + v25);
    while (v24 != v3)
    {
      float32x4_t v28 = v27[-1];
      float32x4_t v54 = v27[-2];
      float32x4_t v55 = *v27;
      if (one-time initialization token for identity != -1)
      {
        simd_quatf v50 = (simd_quatf)v27[-1];
        swift_once();
        float32x4_t v28 = (float32x4_t)v50;
      }
      unint64_t v29 = *(void *)(v26 + 16);
      if (v3 != v29)
      {
        if (v3 >= v29) {
          goto LABEL_36;
        }
        simd_quatf v45 = (simd_quatf)v4[-1];
        float32x4_t v47 = v4[-2];
        *(double *)v30.i64  = simd_matrix4x4(v28);
        simd_float4 v57 = v30;
        simd_float4 v59 = v31;
        simd_float4 v61 = v32;
        float32x4_t v63 = v33;
        simd_float4x4.scale(_:)(v54);
        v66.columns[2]  = v61;
        v66.columns[3]  = (simd_float4)vaddq_f32(v55, v63);
        v66.columns[3].i32[3]  = v63.i32[3];
        v66.columns[0]  = v57;
        v66.columns[1]  = v59;
        simd_float4x4 v67 = __invert_f4(v66);
        v54.i32[3]  = v67.columns[2].i32[3];
        v55.i32[3]  = v67.columns[3].i32[3];
        simd_matrix4x4((float32x4_t)v45);
        simd_float4x4.scale(_:)(v47);
        REMakeSRTFromMatrix();
        float32x4_t v37 = v34;
        unint64_t v39 = *(void *)(v64 + 16);
        unint64_t v38 = *(void *)(v64 + 24);
        unint64_t v2 = v39 + 1;
        if (v39 >= v38 >> 1)
        {
          float32x4_t v54 = v36;
          float32x4_t v55 = v34;
          simd_quatf v51 = v35;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          simd_quatf v35 = v51;
          float32x4_t v36 = v54;
          float32x4_t v37 = v55;
        }
        ++v3;
        v37.i32[3]  = v53.i32[3];
        v36.i32[3]  = v52.i32[3];
        *(void *)(v64 + 16)  = v2;
        float32x4_t v40 = (_OWORD *)(v64 + 48 * v39);
        v4 += 3;
        v40[2]  = v37;
        v40[3]  = v35;
        v40[4]  = v36;
        v27 += 3;
        unint64_t v26 = v43;
        if (v22 != v3) {
          continue;
        }
      }
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v64;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ52V24__rk_combineForAnimation4withA2C_tFS2f_Sft_tXEfU_Tf1cn_n(uint64_t a1, uint64_t a2)
{
  int64_t v4 = *(void *)(a1 + 16);
  int64_t v5 = *(void *)(a2 + 16);
  if (v5 < v4) {
    int64_t v4 = *(void *)(a2 + 16);
  }
  if (v5) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t v28 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  uint64_t v27 = a1;
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = (float *)(a1 + 32);
    uint64_t v9 = (float *)(a2 + 32);
    uint64_t v10 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v12 = v6;
    uint64_t v13 = a2;
    while (v7)
    {
      if (!v10) {
        goto LABEL_26;
      }
      float v14 = *v8;
      float v15 = *v9;
      unint64_t v17 = *(void *)(v28 + 16);
      unint64_t v16 = *(void *)(v28 + 24);
      if (v17 >= v16 >> 1)
      {
        uint64_t v26 = v13;
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v13 = v26;
      }
      ++v9;
      *(void *)(v28 + 16)  = v17 + 1;
      *(float *)(v28 + 4 * v17 + 32)  = v14 + v15;
      ++v8;
      --v10;
      --v7;
      if (!--v12) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v13 = a2;
LABEL_15:
    unint64_t v18 = *(void *)(v27 + 16);
    if (v6 == v18)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v28;
    }
    uint64_t v19 = v13 + 32;
    while (v6 < v18)
    {
      unint64_t v20 = *(void *)(v13 + 16);
      if (v6 == v20) {
        goto LABEL_16;
      }
      if (v6 >= v20) {
        goto LABEL_28;
      }
      float v21 = *(float *)(v27 + 32 + 4 * v6);
      float v22 = *(float *)(v19 + 4 * v6);
      unint64_t v24 = *(void *)(v28 + 16);
      unint64_t v23 = *(void *)(v28 + 24);
      if (v24 >= v23 >> 1)
      {
        uint64_t v25 = v13;
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        uint64_t v13 = v25;
      }
      ++v6;
      *(void *)(v28 + 16)  = v24 + 1;
      *(float *)(v28 + 4 * v24 + 32)  = v21 + v22;
      unint64_t v18 = *(void *)(v27 + 16);
      if (v6 == v18) {
        goto LABEL_16;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ62V27__rk_animationInterpolation7towards1tA2C_SdtFS2f_Sft_tXEfU_SfTf1cn_n(uint64_t a1, uint64_t a2, float a3)
{
  int64_t v6 = *(void *)(a1 + 16);
  int64_t v7 = *(void *)(a2 + 16);
  if (v7 < v6) {
    int64_t v6 = *(void *)(a2 + 16);
  }
  if (v7) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v30 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
  uint64_t v29 = a1;
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = (float *)(a1 + 32);
    unint64_t v11 = (float *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v14 = v8;
    uint64_t v15 = a2;
    while (v9)
    {
      if (!v12) {
        goto LABEL_26;
      }
      float v16 = *v10;
      float v17 = *v11;
      unint64_t v19 = *(void *)(v30 + 16);
      unint64_t v18 = *(void *)(v30 + 24);
      if (v19 >= v18 >> 1)
      {
        uint64_t v28 = v15;
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v15 = v28;
      }
      ++v11;
      *(void *)(v30 + 16)  = v19 + 1;
      *(float *)(v30 + 4 * v19 + 32)  = (float)(v16 * a3) + (float)((float)(1.0 - a3) * v17);
      ++v10;
      --v12;
      --v9;
      if (!--v14) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v15 = a2;
LABEL_15:
    unint64_t v20 = *(void *)(v29 + 16);
    if (v8 == v20)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v30;
    }
    uint64_t v21 = v15 + 32;
    while (v8 < v20)
    {
      unint64_t v22 = *(void *)(v15 + 16);
      if (v8 == v22) {
        goto LABEL_16;
      }
      if (v8 >= v22) {
        goto LABEL_28;
      }
      float v23 = *(float *)(v29 + 32 + 4 * v8);
      float v24 = *(float *)(v21 + 4 * v8);
      unint64_t v26 = *(void *)(v30 + 16);
      unint64_t v25 = *(void *)(v30 + 24);
      if (v26 >= v25 >> 1)
      {
        uint64_t v27 = v15;
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        uint64_t v15 = v27;
      }
      ++v8;
      *(void *)(v30 + 16)  = v26 + 1;
      *(float *)(v30 + 4 * v26 + 32)  = (float)(v23 * a3) + (float)((float)(1.0 - a3) * v24);
      unint64_t v20 = *(void *)(v29 + 16);
      if (v8 == v20) {
        goto LABEL_16;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_0F3Kit9TransformVs5NeverOTB504_s17f12Foundation15hi55V27__rk_animationInterpolation7towards1tA2C_SdtF0A3Kit9K14VAI_AIt_tXEfU_SfTf1cn_n(unint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  unint64_t v4 = a1;
  int64_t v5 = *(void *)(a1 + 16);
  int64_t v6 = *(void *)(a2 + 16);
  if (v6 < v5) {
    int64_t v5 = *(void *)(a2 + 16);
  }
  if (v6) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0;
  }
  uint64_t v41 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  unint64_t v37 = v4;
  unint64_t v38 = v3;
  if (v7)
  {
    unint64_t v2 = *(void *)(v4 + 16);
    uint64_t v8 = one-time initialization token for identity;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 != -1) {
      goto LABEL_38;
    }
    while (1)
    {
      uint64_t v9 = *(void *)(v3 + 16);
      unint64_t v10 = v4 + 64;
      unint64_t v11 = v3 + 64;
      unint64_t v3 = v7;
      while (v3)
      {
        if (!v2) {
          goto LABEL_33;
        }
        if (!v9) {
          goto LABEL_34;
        }
        RESRTLerp();
        long long v15 = v12;
        unint64_t v4 = *(void *)(v41 + 16);
        unint64_t v16 = *(void *)(v41 + 24);
        if (v4 >= v16 >> 1)
        {
          long long v33 = v14;
          long long v35 = v12;
          long long v31 = v13;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v4 + 1, 1);
          long long v13 = v31;
          long long v14 = v33;
          long long v15 = v35;
        }
        HIDWORD(v15)  = v40;
        HIDWORD(v14)  = v39;
        *(void *)(v41 + 16)  = v4 + 1;
        float v17 = (_OWORD *)(v41 + 48 * v4);
        --v2;
        --v9;
        v10 += 48;
        v17[2]  = v15;
        v17[3]  = v13;
        v17[4]  = v14;
        v11 += 48;
        if (!--v3) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      swift_once();
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_17:
  unint64_t v18 = *(void *)(v37 + 16);
  if (v7 != v18)
  {
    uint64_t v20 = 48 * v7 + 64;
    unint64_t v21 = v37 + v20;
    unint64_t v3 = v38;
    unint64_t v22 = v38 + v20;
    while (v7 < v18)
    {
      if (one-time initialization token for identity == -1)
      {
        unint64_t v4 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_36;
        }
      }
      else
      {
        swift_once();
        unint64_t v4 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_36;
        }
      }
      unint64_t v23 = *(void *)(v3 + 16);
      if (v7 == v23) {
        goto LABEL_18;
      }
      if (v7 >= v23) {
        goto LABEL_37;
      }
      RESRTLerp();
      long long v27 = v24;
      unint64_t v29 = *(void *)(v41 + 16);
      unint64_t v28 = *(void *)(v41 + 24);
      unint64_t v2 = v29 + 1;
      if (v29 >= v28 >> 1)
      {
        long long v34 = v26;
        long long v36 = v24;
        long long v32 = v25;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        long long v25 = v32;
        long long v26 = v34;
        long long v27 = v36;
      }
      ++v7;
      v21 += 48;
      HIDWORD(v27)  = v40;
      v22 += 48;
      HIDWORD(v26)  = v39;
      *(void *)(v41 + 16)  = v2;
      uint64_t v30 = (_OWORD *)(v41 + 48 * v29);
      v30[2]  = v27;
      v30[3]  = v25;
      v30[4]  = v26;
      unint64_t v18 = *(void *)(v37 + 16);
      unint64_t v3 = v38;
      if (v4 == v18) {
        goto LABEL_18;
      }
    }
    goto LABEL_35;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t AnimationFillMode.rawValue.getter()
{
  return *v0;
}

void static AnimationFillMode.none.getter(unsigned char *a1@<X8>)
{
  *a1  = 0;
}

void one-time initialization function for forwards()
{
  static AnimationFillMode.forwards  = 1;
}

uint64_t AnimationFillMode.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2  = result;
  return result;
}

void *static AnimationFillMode.forwards.getter@<X0>(unsigned char *a1@<X8>)
{
  return static AnimationFillMode.forwards.getter(&one-time initialization token for forwards, &static AnimationFillMode.forwards, a1);
}

void one-time initialization function for backwards()
{
  static AnimationFillMode.backwards  = 2;
}

void *static AnimationFillMode.backwards.getter@<X0>(unsigned char *a1@<X8>)
{
  return static AnimationFillMode.forwards.getter(&one-time initialization token for backwards, &static AnimationFillMode.backwards, a1);
}

uint64_t one-time initialization function for both()
{
  if (one-time initialization token for forwards != -1) {
    uint64_t result = swift_once();
  }
  int v0 = static AnimationFillMode.forwards;
  if (one-time initialization token for backwards != -1) {
    uint64_t result = swift_once();
  }
  char v1 = static AnimationFillMode.backwards;
  if ((static AnimationFillMode.backwards & ~v0) == 0) {
    char v1 = 0;
  }
  static AnimationFillMode.both  = v1 | v0;
  return result;
}

void *static AnimationFillMode.both.getter@<X0>(unsigned char *a1@<X8>)
{
  return static AnimationFillMode.forwards.getter(&one-time initialization token for both, &static AnimationFillMode.both, a1);
}

void *static AnimationFillMode.forwards.getter@<X0>(void *result@<X0>, unsigned char *a2@<X1>, unsigned char *a3@<X8>)
{
  if (*result != -1) {
    uint64_t result = (void *)swift_once();
  }
  *a3  = *a2;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance AnimationFillMode(unsigned char *a1@<X8>)
{
  *a1  = 0;
}

unsigned char *protocol witness for SetAlgebra.union(_:) in conformance AnimationFillMode@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2  = *v2 | *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.intersection(_:) in conformance AnimationFillMode@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2  = *v2 & *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance AnimationFillMode@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2  = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AnimationFillMode(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    *unint64_t v2 = v4 | v3;
  }
  *a1  = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *protocol witness for SetAlgebra.remove(_:) in conformance AnimationFillMode@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *unint64_t v2 = v4 & ~(_BYTE)v3;
  }
  *a2  = v5;
  a2[1]  = v5 == 0;
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.update(with:) in conformance AnimationFillMode@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *unint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2  = v5;
  a2[1]  = v5 == 0;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formUnion(_:) in conformance AnimationFillMode(unsigned char *result)
{
  *v1 |= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formIntersection(_:) in conformance AnimationFillMode(unsigned char *result)
{
  *v1 &= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance AnimationFillMode(unsigned char *result)
{
  *v1 ^= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.subtracting(_:) in conformance AnimationFillMode@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2  = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance AnimationFillMode(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance AnimationFillMode(unsigned char *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance AnimationFillMode(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance AnimationFillMode()
{
  return *v0 == 0;
}

unsigned char *protocol witness for SetAlgebra.subtract(_:) in conformance AnimationFillMode(unsigned char *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t AnimatableData.__rk_animationIdentity.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AnimatableData.__rk_animationIdentity.getter(a1, 38, 0xD000000000000023, 0x800000022835A400, a2);
}

uint64_t AnimatableData.__rk_animationInverse.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AnimatableData.__rk_animationIdentity.getter(a1, 37, 0xD000000000000022, 0x800000022835A430, a2);
}

uint64_t AnimatableData.__rk_animationIdentity.getter@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  _StringGuts.grow(_:)(a2);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits  = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits  = 46;
  v11._object  = (void *)0xE100000000000000;
  String.append(_:)(v11);
  specialized static AnimationLogger.logError(_:)(a3, a4);
  swift_bridgeObjectRelease();
  long long v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v12(a5, v5, a1);
}

uint64_t AnimatableData.__rk_combineForAnimation(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits  = _typeName(_:qualified:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits  = 46;
  v6._object  = (void *)0xE100000000000000;
  String.append(_:)(v6);
  specialized static AnimationLogger.logError(_:)(0xD000000000000025, 0x800000022835A460);
  swift_bridgeObjectRelease();
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v7(a2, v2, a1);
}

uint64_t specialized AnimatableData.__rk_invertAndCombineForAnimation(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v14;
    uint64_t v8 = (float *)(a2 + 32);
    unint64_t v9 = *(void *)(v14 + 16);
    do
    {
      float v10 = *v8;
      unint64_t v11 = *(void *)(v14 + 24);
      if (v9 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v9 + 1, 1);
      }
      *(void *)(v14 + 16)  = v9 + 1;
      *(float *)(v14 + 4 * v9 + 32)  = -v10;
      ++v8;
      ++v9;
      --v5;
    }
    while (v5);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ52V24__rk_combineForAnimation4withA2C_tFS2f_Sft_tXEfU_Tf1cn_n(v6, a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  *a3  = v12;
  return result;
}

float32x2_t specialized AnimatableData.__rk_invertAndCombineForAnimation(with:)(float32x2_t a1, float32x2_t a2)
{
  return vadd_f32(vsub_f32(0, a2), a1);
}

{
  return vadd_f32(a1, vsub_f32(0, a2));
}

uint64_t AnimatableData.__rk_invertAndCombineForAnimation(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v10, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t AnimatableData.__rk_animationInterpolation(towards:t:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits  = _typeName(_:qualified:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits  = 46;
  v6._object  = (void *)0xE100000000000000;
  String.append(_:)(v6);
  specialized static AnimationLogger.logError(_:)(0xD000000000000028, 0x800000022835A490);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v7(a2, v2, a1);
}

double Float.__rk_animationIdentity.getter()
{
  return 0.0;
}

float protocol witness for AnimatableData.__rk_animationInverse.getter in conformance Float@<S0>(float *a1@<X8>)
{
  float result = -*v1;
  *a1  = result;
  return result;
}

float Float.__rk_animationInverse.getter(float a1)
{
  return -a1;
}

float protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance Float@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result = *a1 + *v2;
  *a2  = result;
  return result;
}

Swift::Float __swiftcall Float.__rk_combineForAnimation(with:)(Swift::Float with)
{
  return with + v1;
}

float protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance Float@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result = *a1 - *v2;
  *a2  = result;
  return result;
}

float protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance Float@<S0>(float *a1@<X0>, float *a2@<X8>, double a3@<D0>)
{
  float v4 = a3;
  float result = (float)(*a1 * v4) + (float)((float)(1.0 - v4) * *v3);
  *a2  = result;
  return result;
}

Swift::Float __swiftcall Float.__rk_animationInterpolation(towards:t:)(Swift::Float towards, Swift::Double t)
{
  float v3 = t;
  return (float)(v3 * towards) + (float)((float)(1.0 - v3) * v2);
}

double Double.__rk_animationIdentity.getter()
{
  return 0.0;
}

double protocol witness for AnimatableData.__rk_animationInverse.getter in conformance Double@<D0>(double *a1@<X8>)
{
  double result = -*v1;
  *a1  = result;
  return result;
}

double Double.__rk_animationInverse.getter(double a1)
{
  return -a1;
}

double protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance Double@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 + *v2;
  *a2  = result;
  return result;
}

Swift::Double __swiftcall Double.__rk_combineForAnimation(with:)(Swift::Double with)
{
  return with + v1;
}

double protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance Double@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 - *v2;
  *a2  = result;
  return result;
}

double protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance Double@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result = *a1 * a3 + (1.0 - a3) * *v3;
  *a2  = result;
  return result;
}

Swift::Double __swiftcall Double.__rk_animationInterpolation(towards:t:)(Swift::Double towards, Swift::Double t)
{
  return towards * t + (1.0 - t) * v2;
}

double SIMD2<>.__rk_animationIdentity.getter()
{
  return 0.0;
}

float32x2_t protocol witness for AnimatableData.__rk_animationInverse.getter in conformance <> SIMD2<A>@<D0>(float32x2_t *a1@<X8>)
{
  float32x2_t result = vsub_f32(0, *v1);
  *a1  = result;
  return result;
}

float32x2_t SIMD2<>.__rk_animationInverse.getter(float32x2_t a1)
{
  return vsub_f32(0, a1);
}

float32x2_t protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance <> SIMD2<A>@<D0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>)
{
  float32x2_t result = vadd_f32(*a1, *v2);
  *a2  = result;
  return result;
}

float32x2_t SIMD2<>.__rk_combineForAnimation(with:)(float32x2_t a1, float32x2_t a2)
{
  return vadd_f32(a1, a2);
}

void protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance <> SIMD2<A>(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>)
{
  *a2  = specialized AnimatableData.__rk_invertAndCombineForAnimation(with:)(*a1, *v2);
}

void protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance <> SIMD2<A>(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>, double a3@<D0>)
{
  *(float *)&a3  = a3;
  *a2  = simd_mix(*v3, *a1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
}

float32x2_t SIMD2<>.__rk_animationInterpolation(towards:t:)(float32x2_t a1, double a2, float32x2_t a3)
{
  float v3 = a2;
  return vmla_n_f32(a3, vsub_f32(a1, a3), v3);
}

void protocol witness for AnimatableData.__rk_animationIdentity.getter in conformance <> SIMD3<A>(void *a1@<X8>)
{
  *a1  = 0;
  a1[1]  = 0;
}

double SIMD3<>.__rk_animationIdentity.getter()
{
  return 0.0;
}

float protocol witness for AnimatableData.__rk_animationInverse.getter in conformance <> SIMD3<A>@<S0>(_OWORD *a1@<X8>)
{
  *(float32x2_t *)&long long v2 = vsub_f32(0, *v1);
  *((void *)&v2 + 1)  = COERCE_UNSIGNED_INT(0.0 - v1[1].f32[0]);
  *a1  = v2;
  return *(float *)&v2;
}

float32x2_t SIMD3<>.__rk_animationInverse.getter(float32x2_t a1)
{
  return vsub_f32(0, a1);
}

__n128 protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance <> SIMD3<A>@<Q0>(float32x2_t *a1@<X0>, __n128 *a2@<X8>)
{
  result.n128_u64[0]  = (unint64_t)vadd_f32(*a1, *v2);
  result.n128_f32[2]  = a1[1].f32[0] + v2[1].f32[0];
  result.n128_u32[3]  = 0;
  *a2  = result;
  return result;
}

double SIMD3<>.__rk_combineForAnimation(with:)(float32x4_t a1, float32x4_t a2)
{
  *(void *)&double result = vaddq_f32(a1, a2).u64[0];
  return result;
}

void protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance <> SIMD3<A>(float32x2_t *a1@<X0>, _OWORD *a2@<X8>)
{
  *(float32x2_t *)&long long v4 = specialized AnimatableData.__rk_invertAndCombineForAnimation(with:)(*a1, *v2);
  *a2  = v4;
}

void protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance <> SIMD3<A>(float32x4_t *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  *(float *)&a3  = a3;
  float32x4_t v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  v5.i32[3]  = 0;
  *(double *)&long long v6 = simd_mix(*v3, *a1, v5);
  *a2  = v6;
}

double SIMD3<>.__rk_animationInterpolation(towards:t:)(float32x4_t a1, double a2, float32x4_t a3)
{
  float v3 = a2;
  *(void *)&double result = vmlaq_n_f32(a3, vsubq_f32(a1, a3), v3).u64[0];
  return result;
}

double SIMD4<>.__rk_animationIdentity.getter()
{
  return 0.0;
}

void protocol witness for AnimatableData.__rk_animationInverse.getter in conformance <> SIMD4<A>(_OWORD *a1@<X8>)
{
  *(double *)&long long v3 = SIMD4<>.__rk_animationInverse.getter(*v1);
  *a1  = v3;
}

double SIMD4<>.__rk_animationInverse.getter(float32x4_t a1)
{
  *(void *)&double result = vsubq_f32((float32x4_t)0, a1).u64[0];
  return result;
}

float32x4_t protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance <> SIMD4<A>@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t result = vaddq_f32(*a1, *v2);
  *a2  = result;
  return result;
}

double SIMD4<>.__rk_combineForAnimation(with:)(float32x4_t a1, float32x4_t a2)
{
  *(void *)&double result = vaddq_f32(a1, a2).u64[0];
  return result;
}

float32x4_t protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance <> SIMD4<A>@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  *(double *)v5.i64  = SIMD4<>.__rk_animationInverse.getter(*v2);
  float32x4_t result = vaddq_f32(*a1, v5);
  *a2  = result;
  return result;
}

void protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance <> SIMD4<A>(float32x4_t *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  *(float *)&a3  = a3;
  *(double *)&long long v5 = simd_mix(*v3, *a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0));
  *a2  = v5;
}

double SIMD4<>.__rk_animationInterpolation(towards:t:)(float32x4_t a1, double a2, float32x4_t a3)
{
  float v3 = a2;
  *(void *)&double result = vmlaq_n_f32(a3, vsubq_f32(a1, a3), v3).u64[0];
  return result;
}

double protocol witness for AnimatableData.__rk_animationIdentity.getter in conformance simd_quatf@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  double result = *(double *)&static simd_quatf.identity;
  *a1  = static simd_quatf.identity;
  return result;
}

double simd_quatf.__rk_animationIdentity.getter()
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  return *(double *)&static simd_quatf.identity;
}

void protocol witness for AnimatableData.__rk_animationInverse.getter in conformance simd_quatf(_OWORD *a1@<X8>)
{
  *(double *)&long long v3 = simd_inverse(*v1);
  *a1  = v3;
}

double simd_quatf.__rk_animationInverse.getter(float32x4_t a1)
{
  float32x4_t v1 = vmulq_f32(a1, (float32x4_t)xmmword_22831EFE0);
  int8x16_t v2 = (int8x16_t)vmulq_f32(a1, a1);
  *(float32x2_t *)v2.i8  = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v2.i32[0]  = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).u32[0];
  float32x2_t v3 = vrecpe_f32((float32x2_t)v2.u32[0]);
  float32x2_t v4 = vmul_f32(v3, vrecps_f32((float32x2_t)v2.u32[0], v3));
  *(void *)&double result = vmulq_n_f32(v1, vmul_f32(v4, vrecps_f32((float32x2_t)v2.u32[0], v4)).f32[0]).u64[0];
  return result;
}

void protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance simd_quatf(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  *(double *)&long long v4 = simd_mul(*v2, *a1);
  *a2  = v4;
}

void protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance simd_quatf(simd_quatf *a1@<X0>, _OWORD *a2@<X8>)
{
  simd_quatf v6 = *a1;
  *(double *)v4.i64  = simd_inverse(*v2);
  *(double *)&long long v5 = simd_mul(v4, (float32x4_t)v6);
  *a2  = v5;
}

void protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance simd_quatf(float32x4_t *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  float v5 = a3;
  simd_slerp(*v3, *a1, v5);
  *a2  = v6;
}

void __swiftcall simd_quatf.__rk_animationInterpolation(towards:t:)(simd_quatf *__return_ptr retstr, simd_quatf *towards, Swift::Double t)
{
  float32x4_t v5 = v4;
  float v6 = v3;
  simd_slerp(v5, *(float32x4_t *)&t, v6);
}

double protocol witness for AnimatableData.__rk_animationIdentity.getter in conformance Transform@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  double result = *(double *)&static Transform.identity;
  long long v3 = xmmword_2681C7AB0;
  long long v4 = xmmword_2681C7AC0;
  *a1  = static Transform.identity;
  a1[1]  = v3;
  a1[2]  = v4;
  return result;
}

double Transform.__rk_animationIdentity.getter()
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  return *(double *)&static Transform.identity;
}

uint64_t protocol witness for AnimatableData.__rk_animationInverse.getter in conformance Transform@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result = RESRTInverse();
  if (one-time initialization token for identity != -1)
  {
    long long v7 = v4;
    long long v8 = v3;
    long long v6 = v5;
    uint64_t result = swift_once();
    long long v5 = v6;
    long long v4 = v7;
    long long v3 = v8;
  }
  *a1  = v3;
  a1[1]  = v4;
  a1[2]  = v5;
  return result;
}

__n128 Transform.__rk_animationInverse.getter()
{
  RESRTInverse();
  if (one-time initialization token for identity != -1)
  {
    __n128 v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

void protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance Transform(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  *(double *)&long long v4 = specialized static Transform.* infix(_:_:)(*(float32x4_t *)v2, *(double *)(v2 + 16), *(double *)(v2 + 32), *a1);
  *a2  = v4;
  a2[1]  = v5;
  a2[2]  = v6;
}

double Transform.__rk_combineForAnimation(with:)(float32x4_t a1, double a2, double a3, float32x4_t a4, double a5, double a6)
{
  return specialized static Transform.* infix(_:_:)(a4, a5, a6, a1);
}

uint64_t protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance Transform@<X0>(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  float32x4_t v18 = a1[1];
  float32x4_t v20 = *a1;
  float32x4_t v16 = a1[2];
  *(double *)v22.columns[0].i64  = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)(v2 + 32), *(float32x4_t *)(v2 + 16), COERCE_FLOAT(*(_OWORD *)v2));
  simd_float4x4 v23 = simd_inverse(v22);
  simd_float4 v14 = v23.columns[1];
  simd_float4 v15 = v23.columns[0];
  simd_float4 v12 = v23.columns[3];
  simd_float4 v13 = v23.columns[2];
  *(double *)v4.i64  = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v16.i64, v18, v20.f32[0]);
  v25.columns[0]  = v4;
  v25.columns[1]  = v5;
  v25.columns[2]  = v6;
  v25.columns[3]  = v7;
  v24.columns[1]  = v14;
  v24.columns[0]  = v15;
  v24.columns[3]  = v12;
  v24.columns[2]  = v13;
  simd_mul(v24, v25);
  uint64_t result = REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    long long v19 = v10;
    long long v21 = v9;
    long long v17 = v11;
    uint64_t result = swift_once();
    long long v11 = v17;
    long long v10 = v19;
    long long v9 = v21;
  }
  *a2  = v9;
  a2[1]  = v10;
  a2[2]  = v11;
  return result;
}

__n128 Transform.__rk_invertAndCombineForAnimation(with:)(float a1, float32x4_t a2, double a3, float a4, float32x4_t a5, double a6)
{
  *(double *)v11.columns[0].i64  = specialized simd_float4x4.init(translation:rotation:scale:)(a6, a5, a4);
  __invert_f4(v11);
  specialized simd_float4x4.init(translation:rotation:scale:)(a3, a2, a1);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    __n128 v10 = result;
    swift_once();
    return v10;
  }
  return result;
}

uint64_t protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance Transform@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result = RESRTLerp();
  if (one-time initialization token for identity != -1)
  {
    long long v7 = v4;
    long long v8 = v3;
    long long v6 = v5;
    uint64_t result = swift_once();
    long long v5 = v6;
    long long v4 = v7;
    long long v3 = v8;
  }
  *a1  = v3;
  a1[1]  = v4;
  a1[2]  = v5;
  return result;
}

__n128 Transform.__rk_animationInterpolation(towards:t:)()
{
  RESRTLerp();
  if (one-time initialization token for identity != -1)
  {
    __n128 v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

RealityFoundation::JointTransforms __swiftcall JointTransforms.init()()
{
  void *v0 = MEMORY[0x263F8EE78];
  return result;
}

uint64_t JointTransforms.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, MEMORY[0x263F8EE78]);
  long long v5 = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    unint64_t v7 = v4[2];
    uint64_t v8 = 6 * v7;
    long long v9 = (long long *)(a1 + 64);
    do
    {
      long long v10 = *(v9 - 2);
      long long v11 = *(v9 - 1);
      long long v12 = *v9;
      unint64_t v13 = v5[3];
      unint64_t v14 = v7 + 1;
      if (v7 >= v13 >> 1)
      {
        long long v19 = *(v9 - 1);
        long long v20 = *(v9 - 2);
        long long v18 = *v9;
        float32x4_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v7 + 1, 1, v5);
        long long v12 = v18;
        long long v11 = v19;
        long long v10 = v20;
        long long v5 = v16;
      }
      v5[2]  = v14;
      simd_float4 v15 = &v5[v8];
      v15[2]  = v10;
      v15[3]  = v11;
      v15[4]  = v12;
      v8 += 6;
      v9 += 3;
      unint64_t v7 = v14;
      --v6;
    }
    while (v6);
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v5;
  return result;
}

uint64_t specialized JointTransforms.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    long long v4 = (long long *)(a1 + 64);
    long long v5 = (void *)MEMORY[0x263F8EE78];
    do
    {
      long long v11 = *(v4 - 1);
      long long v12 = *(v4 - 2);
      long long v10 = *v4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v7 = v5[2];
      unint64_t v6 = v5[3];
      if (v7 >= v6 >> 1) {
        long long v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
      }
      v5[2]  = v7 + 1;
      uint64_t v8 = &v5[6 * v7];
      _OWORD v8[2] = v12;
      _OWORD v8[3] = v11;
      _OWORD v8[4] = v10;
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  else
  {
    long long v5 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v5;
  return result;
}

uint64_t JointTransforms.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v28 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  long long v11 = (char *)&v23 - v10;
  uint64_t v25 = v5;
  uint64_t v26 = a1;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, a1, a2, v9);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v27 = a2;
  swift_getAssociatedConformanceWitness();
  unint64_t v29 = v11;
  uint64_t v30 = AssociatedTypeWitness;
  dispatch thunk of IteratorProtocol.next()();
  if (v37)
  {
    long long v12 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v14 = v31;
    uint64_t v15 = v32;
    uint64_t v17 = v33;
    uint64_t v16 = v34;
    uint64_t v18 = v35;
    uint64_t v19 = v36;
    long long v12 = (void *)MEMORY[0x263F8EE78];
    do
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      }
      unint64_t v21 = v12[2];
      unint64_t v20 = v12[3];
      if (v21 >= v20 >> 1) {
        long long v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v12);
      }
      void v12[2] = v21 + 1;
      simd_float4x4 v22 = &v12[6 * v21];
      v22[4]  = v14;
      v22[5]  = v15;
      v22[6]  = v17;
      v22[7]  = v16;
      unsigned __int8 v22[8] = v18;
      v22[9]  = v19;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v14 = v31;
      uint64_t v15 = v32;
      uint64_t v17 = v33;
      uint64_t v16 = v34;
      uint64_t v18 = v35;
      uint64_t v19 = v36;
    }
    while ((v37 & 1) == 0);
  }
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v29, v30);
  *unint64_t v28 = v12;
  return result;
}

__n128 JointTransforms.subscript.getter(unint64_t a1, __n128 result)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(void *)(*(void *)v2 + 16) <= a1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = *(__n128 *)(*(void *)v2 + 48 * a1 + 32);
  if (one-time initialization token for identity != -1)
  {
LABEL_7:
    __n128 v3 = result;
    swift_once();
    return v3;
  }
  return result;
}

uint64_t key path getter for JointTransforms.subscript(_:) : JointTransforms@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>)
{
  unint64_t v7 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v7 >= *(void *)(*(void *)result + 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v8 = (__n128 *)(*(void *)result + 48 * v7);
  a4  = v8[2];
  a5  = v8[3];
  a6  = v8[4];
  if (one-time initialization token for identity != -1)
  {
LABEL_7:
    __n128 v10 = a5;
    __n128 v11 = a4;
    __n128 v9 = a6;
    uint64_t result = swift_once();
    a6  = v9;
    a5  = v10;
    a4  = v11;
  }
  *a3  = a4;
  a3[1]  = a5;
  a3[2]  = a6;
  return result;
}

uint64_t key path setter for JointTransforms.subscript(_:) : JointTransforms(long long *a1, void **a2, unint64_t *a3)
{
  unint64_t v4 = *a3;
  long long v9 = a1[1];
  long long v10 = *a1;
  long long v8 = a1[2];
  uint64_t v5 = *a2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  uint64_t v5 = (void *)result;
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4 < v5[2])
  {
    unint64_t v7 = &v5[6 * v4];
    _OWORD v7[2] = v10;
    v7[3]  = v9;
    v7[4]  = v8;
    *a2  = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t JointTransforms.subscript.setter(unint64_t a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v6 = *v4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  uint64_t v6 = (void *)result;
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v6[2] > a1)
  {
    long long v8 = (__n128 *)&v6[6 * a1];
    _OWORD v8[2] = a2;
    _OWORD v8[3] = a3;
    _OWORD v8[4] = a4;
    *unint64_t v4 = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void (*JointTransforms.subscript.modify(void *a1, unint64_t a2))(long long **a1, char a2)
{
  uint64_t v6 = malloc(0x40uLL);
  *a1  = v6;
  v6[6]  = a2;
  v6[7]  = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(void *)(*(void *)v2 + 16) <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  __n128 v3 = v6;
  long long v10 = (_OWORD *)(*(void *)v2 + 48 * a2);
  long long v7 = v10[2];
  long long v8 = v10[3];
  long long v9 = v10[4];
  if (one-time initialization token for identity != -1)
  {
LABEL_7:
    long long v13 = v8;
    long long v14 = v7;
    long long v12 = v9;
    swift_once();
    long long v9 = v12;
    long long v8 = v13;
    long long v7 = v14;
  }
  *__n128 v3 = v7;
  v3[1]  = v8;
  v3[2]  = v9;
  return JointTransforms.subscript.modify;
}

void JointTransforms.subscript.modify(long long **a1, char a2)
{
  __n128 v3 = *a1;
  long long v9 = **a1;
  long long v10 = (*a1)[1];
  long long v11 = (*a1)[2];
  unint64_t v4 = (void *)**((void **)*a1 + 7);
  LOBYTE(v5)  = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if ((v5 & 1) == 0)
    {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
      unint64_t v4 = v5;
    }
    unint64_t v6 = *((void *)v3 + 6);
    if (v4[2] > v6) {
      goto LABEL_9;
    }
    __break(1u);
  }
  if ((v5 & 1) == 0) {
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  }
  unint64_t v6 = *((void *)v3 + 6);
  if (v4[2] <= v6)
  {
    __break(1u);
    return;
  }
LABEL_9:
  long long v7 = (void *)*((void *)v3 + 7);
  long long v8 = &v4[6 * v6];
  _OWORD v8[2] = v9;
  _OWORD v8[3] = v10;
  _OWORD v8[4] = v11;
  *long long v7 = v4;

  free(v3);
}

uint64_t JointTransforms.startIndex.getter()
{
  return 0;
}

uint64_t JointTransforms.endIndex.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

Swift::Int __swiftcall JointTransforms.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall JointTransforms.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t static JointTransforms.== infix(_:_:)(uint64_t *a1, __n128 **a2)
{
  return specialized Sequence<>.elementsEqual<A>(_:)(*a2, *a1);
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0;
  unint64_t v3 = 0;
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(result + 16);
  uint64_t v6 = result + 32;
  while (1)
  {
    float v7 = 0.0;
    float v8 = 0.0;
    unint64_t v9 = *(void *)(a2 + 16);
    if (v3 == v4) {
      goto LABEL_5;
    }
    if (v3 >= v4) {
      break;
    }
    unint64_t v9 = v3 + 1;
    float v8 = *(float *)(a2 + 32 + 4 * v3);
LABEL_5:
    unint64_t v10 = v5;
    Swift::Int result = v2 == v5;
    if (v2 != v5)
    {
      if (v2 >= v5) {
        goto LABEL_13;
      }
      unint64_t v10 = v2 + 1;
      float v7 = *(float *)(v6 + 4 * v2);
    }
    if (v3 != v4)
    {
      Swift::Int result = 0;
      if (v2 != v5)
      {
        unint64_t v2 = v10;
        unint64_t v3 = v9;
        if (v8 == v7) {
          continue;
        }
      }
    }
    return result;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(__n128 *a1, uint64_t a2)
{
  uint64_t v3 = a1[1].n128_i64[0];
  uint64_t v26 = a2 + 32;
  unint64_t v27 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v5 = 0;
  uint64_t v6 = a1 + 4;
  while (1)
  {
    unint64_t v7 = v27;
    if (v5 != v27) {
      break;
    }
    if (!v3)
    {
      uint64_t v22 = 1;
      goto LABEL_19;
    }
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = v27;
LABEL_9:
    __n128 v16 = v6[-2];
    __n128 v17 = v6[-1];
    __n128 v18 = *v6;
    if (one-time initialization token for identity == -1)
    {
      if (v5 == v7) {
        goto LABEL_17;
      }
    }
    else
    {
      __n128 v24 = v6[-1];
      __n128 v25 = v6[-2];
      __n128 v23 = *v6;
      swift_once();
      __n128 v18 = v23;
      __n128 v17 = v24;
      __n128 v16 = v25;
      if (v5 == v27)
      {
LABEL_17:
        uint64_t v22 = 0;
LABEL_19:
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    v19.n128_u64[0]  = v13;
    v19.n128_u64[1]  = v12;
    v20.n128_u64[0]  = v11;
    v20.n128_u64[1]  = v10;
    v21.n128_u64[0]  = v9;
    v21.n128_u64[1]  = v8;
    uint64_t result = specialized static Transform.== infix(_:_:)(v19, v20, v21, v16, v17, v18);
    --v3;
    v6 += 3;
    unint64_t v5 = v14;
    if ((result & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (v5 < v27)
  {
    uint64_t v15 = (unint64_t *)(v26 + 48 * v5);
    unint64_t v13 = *v15;
    unint64_t v12 = v15[1];
    unint64_t v11 = v15[2];
    unint64_t v10 = v15[3];
    unint64_t v9 = v15[4];
    unint64_t v8 = v15[5];
    if (one-time initialization token for identity == -1)
    {
      if (!v3) {
        goto LABEL_16;
      }
    }
    else
    {
      swift_once();
      unint64_t v7 = v27;
      if (!v3)
      {
LABEL_16:
        swift_bridgeObjectRelease();
        uint64_t v22 = 0;
LABEL_20:
        swift_bridgeObjectRelease();
        return v22;
      }
    }
    unint64_t v14 = v5 + 1;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance JointTransforms@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized BidirectionalCollection.index(_:offsetBy:)(*a1, a2);
  *a3  = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance JointTransforms(uint64_t *a1, uint64_t *a2)
{
  return specialized BidirectionalCollection.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance JointTransforms(long long *a1, unint64_t *a2)
{
  long long v8 = a1[1];
  long long v9 = *a1;
  long long v7 = a1[2];
  unint64_t v3 = *a2;
  unint64_t v4 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  unint64_t v4 = (void *)result;
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v3 < v4[2])
  {
    uint64_t v6 = &v4[6 * v3];
    void v6[2] = v9;
    void v6[3] = v8;
    v6[4]  = v7;
    *unint64_t v2 = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance JointTransforms(void *a1, unint64_t *a2))()
{
  unint64_t v4 = malloc(0x28uLL);
  *a1  = v4;
  v4[4]  = JointTransforms.subscript.modify(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance JointTransforms(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MutableCollection.subscript.setter in conformance JointTransforms(a1, a2, a3, a4, (void (*)(uint64_t, void, void, void, void, void))specialized _writeBackMutableSlice<A, B>(_:bounds:slice:));
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance JointTransforms(void (***a1)(uint64_t **a1, char a2), uint64_t *a2))()
{
  unint64_t v4 = (void (**)(uint64_t **, char))malloc(0x28uLL);
  *a1  = v4;
  v4[4]  = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

int64_t protocol witness for MutableCollection.partition(by:) in conformance JointTransforms@<X0>(uint64_t (*a1)(long long *)@<X0>, int64_t *a2@<X8>)
{
  int64_t result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

unint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance JointTransforms(unint64_t *a1, unint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance JointTransforms(uint64_t *a1, __n128 **a2)
{
  return specialized Sequence<>.elementsEqual<A>(_:)(*a2, *a1);
}

uint64_t protocol witness for AnimatableData.__rk_animationIdentity.getter in conformance JointTransforms@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v4 = specialized Array.init(repeating:count:)(*(void *)(v3 + 16), (__n128)static Transform.identity, (__n128)xmmword_2681C7AB0, (__n128)xmmword_2681C7AC0);

  return specialized JointTransforms.init<A>(_:)(v4, a1);
}

uint64_t JointTransforms.__rk_animationIdentity.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v4 = specialized Array.init(repeating:count:)(*(void *)(v3 + 16), (__n128)static Transform.identity, (__n128)xmmword_2681C7AB0, (__n128)xmmword_2681C7AC0);

  return specialized JointTransforms.init<A>(_:)(v4, a1);
}

uint64_t protocol witness for AnimatableData.__rk_animationInverse.getter in conformance JointTransforms@<X0>(void *a1@<X8>)
{
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_0D3Kit9TransformVs5NeverOTB504_s17d12Foundation15fg35V21__rk_animationInverseACvg0A3Kit9I8VAGXEfU_Tf1cn_n(*v1);
  return specialized JointTransforms.init<A>(_:)(v3, a1);
}

uint64_t JointTransforms.__rk_animationInverse.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  unint64_t v5 = (void *)MEMORY[0x263F8EE78];
  if (!v4) {
    goto LABEL_8;
  }
  __n128 v20 = (void *)MEMORY[0x263F8EE78];
  unint64_t v5 = &v20;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  if ((unint64_t)(v4 - 1) >= *(void *)(v3 + 16))
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v20;
    if (one-time initialization token for identity == -1) {
      goto LABEL_4;
    }
  }
  swift_once();
LABEL_4:
  uint64_t v6 = v3 + 64;
  do
  {
    RESRTInverse();
    long long v10 = v7;
    __n128 v20 = v5;
    unint64_t v12 = v5[2];
    unint64_t v11 = v5[3];
    if (v12 >= v11 >> 1)
    {
      long long v16 = v9;
      long long v17 = v7;
      long long v15 = v8;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      long long v8 = v15;
      long long v9 = v16;
      long long v10 = v17;
      unint64_t v5 = v20;
    }
    HIDWORD(v10)  = v18;
    HIDWORD(v9)  = v19;
    v5[2]  = v12 + 1;
    unint64_t v13 = &v5[6 * v12];
    v13[2]  = v10;
    v13[3]  = v8;
    v13[4]  = v9;
    v6 += 48;
    --v4;
  }
  while (v4);
LABEL_8:

  return specialized JointTransforms.init<A>(_:)((uint64_t)v5, a1);
}

uint64_t protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance JointTransforms@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance JointTransforms(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI75V24__rk_combineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n, a2);
}

RealityFoundation::JointTransforms __swiftcall JointTransforms.__rk_combineForAnimation(with:)(RealityFoundation::JointTransforms with)
{
  return (RealityFoundation::JointTransforms)JointTransforms.__rk_combineForAnimation(with:)((uint64_t *)with.coreTransforms._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI75V24__rk_combineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n, v1);
}

uint64_t protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance JointTransforms@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance JointTransforms(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI84V33__rk_invertAndCombineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n, a2);
}

RealityFoundation::JointTransforms __swiftcall JointTransforms.__rk_invertAndCombineForAnimation(with:)(RealityFoundation::JointTransforms with)
{
  return (RealityFoundation::JointTransforms)JointTransforms.__rk_combineForAnimation(with:)((uint64_t *)with.coreTransforms._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI84V33__rk_invertAndCombineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n, v1);
}

uint64_t protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance JointTransforms@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_0F3Kit9TransformVs5NeverOTB504_s17f12Foundation15hi55V27__rk_animationInterpolation7towards1tA2C_SdtF0A3Kit9K14VAI_AIt_tXEfU_SfTf1cn_n(v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return specialized JointTransforms.init<A>(_:)(v6, a2);
}

RealityFoundation::JointTransforms __swiftcall JointTransforms.__rk_animationInterpolation(towards:t:)(RealityFoundation::JointTransforms towards, Swift::Double t)
{
  unint64_t v4 = v2;
  unint64_t v5 = *(void *)towards.coreTransforms._rawValue;
  unint64_t v6 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_0F3Kit9TransformVs5NeverOTB504_s17f12Foundation15hi55V27__rk_animationInterpolation7towards1tA2C_SdtF0A3Kit9K14VAI_AIt_tXEfU_SfTf1cn_n(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (RealityFoundation::JointTransforms)specialized JointTransforms.init<A>(_:)(v7, v4);
}

void (*protocol witness for Collection.subscript.read in conformance JointTransforms(void *a1, unint64_t *a2))(void **a1)
{
  unint64_t v6 = malloc(0x30uLL);
  *a1  = v6;
  unint64_t v10 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v10 >= *(void *)(*(void *)v2 + 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = v6;
  unint64_t v11 = (_OWORD *)(*(void *)v2 + 48 * v10);
  long long v7 = v11[2];
  long long v8 = v11[3];
  long long v9 = v11[4];
  if (one-time initialization token for identity != -1)
  {
LABEL_7:
    long long v14 = v8;
    long long v15 = v7;
    long long v13 = v9;
    swift_once();
    long long v9 = v13;
    long long v8 = v14;
    long long v7 = v15;
  }
  *uint64_t v3 = v7;
  v3[1]  = v8;
  v3[2]  = v9;
  return LowLevelMesh.PartsCollection.subscript.read;
}

uint64_t protocol witness for Collection.indices.getter in conformance JointTransforms@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1  = *v1;
  a1[1]  = 0;
  a1[2]  = *(void *)(v2 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance JointTransforms@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4  = result;
  *(unsigned char *)(a4 + 8)  = v6 & 1;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance JointTransforms()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance JointTransforms(void *a1, _OWORD *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance JointTransforms.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance JointTransforms.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance JointTransforms.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance JointTransforms.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance JointTransforms.CodingKeys, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance JointTransforms.CodingKeys(char *a1@<X8>)
{
  a1[15]  = -18;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance JointTransforms.CodingKeys()
{
  return 0x6E61725465726F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance JointTransforms.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object  = string._object;
  v3._countAndFlagsBits  = string._countAndFlagsBits;
  v3._object  = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance JointTransforms.CodingKeys, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance JointTransforms.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance JointTransforms.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t JointTransforms.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<JointTransforms.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
    uint64_t v26 = v6;
    long long v17 = a2;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    char v9 = dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter();
    unint64_t v10 = (void *)MEMORY[0x263F8EE78];
    if ((v9 & 1) == 0)
    {
      do
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v24, v25);
        lazy protocol witness table accessor for type Transform and conformance Transform();
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
        long long v19 = v22;
        long long v20 = v21;
        long long v18 = v23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
        }
        unint64_t v13 = v10[2];
        unint64_t v12 = v10[3];
        if (v13 >= v12 >> 1) {
          unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
        }
        v10[2]  = v13 + 1;
        long long v14 = &v10[6 * v13];
        long long v15 = v19;
        v14[2]  = v20;
        v14[3]  = v15;
        v14[4]  = v18;
        __swift_project_boxed_opaque_existential_1(v24, v25);
      }
      while ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0);
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    *long long v17 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t JointTransforms.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<JointTransforms.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  unint64_t v10 = a1;
  unint64_t v11 = *v1;
  __swift_project_boxed_opaque_existential_1(v10, v9);
  lazy protocol witness table accessor for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  Kind  = v11[1].Kind;
  if (Kind)
  {
    long long v21 = v8;
    uint64_t v22 = v6;
    uint64_t v28 = v5;
    uint64_t v13 = one-time initialization token for identity;
    swift_bridgeObjectRetain();
    if (v13 != -1) {
LABEL_12:
    }
      swift_once();
    uint64_t v14 = 0;
    v20[1]  = v11;
    long long v15 = v11 + 4;
    unint64_t v11 = &type metadata for Transform;
    while (1)
    {
      uint64_t v16 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_12;
      }
      ValueMetadata v18 = v15[-1];
      ValueMetadata v17 = *v15;
      ValueMetadata v23 = v15[-2];
      ValueMetadata v24 = v18;
      ValueMetadata v25 = v17;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v26, v27);
      lazy protocol witness table accessor for type Transform and conformance Transform();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v3) {
        break;
      }
      v15 += 3;
      ++v14;
      if (v16 == Kind)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = v28;
        long long v8 = v21;
        uint64_t v6 = v22;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v21, v28);
  }
  else
  {
LABEL_8:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
}

uint64_t protocol witness for Decodable.init(from:) in conformance JointTransforms@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return JointTransforms.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance JointTransforms(void *a1)
{
  return JointTransforms.encode(to:)(a1);
}

uint64_t BlendShapeWeights.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, MEMORY[0x263F8EE78]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = (int *)(a1 + 32);
    unint64_t v8 = *((void *)v4 + 2);
    do
    {
      int v9 = *v7;
      unint64_t v10 = *((void *)v5 + 3);
      if (v8 >= v10 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v8 + 1, 1, v5);
      }
      *((void *)v5 + 2)  = v8 + 1;
      *(_DWORD *)&v5[4 * v8 + 32]  = v9;
      ++v7;
      ++v8;
      --v6;
    }
    while (v6);
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v5;
  return result;
}

uint64_t BlendShapeWeights.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  ValueMetadata v18 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __n128 v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v12 = (char *)&v18 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, a1, a2, v10);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (v20)
  {
    uint64_t v13 = (char *)MEMORY[0x263F8EE78];
  }
  else
  {
    int v15 = v19;
    uint64_t v13 = (char *)MEMORY[0x263F8EE78];
    do
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v13 + 2) + 1, 1, v13);
      }
      unint64_t v17 = *((void *)v13 + 2);
      unint64_t v16 = *((void *)v13 + 3);
      if (v17 >= v16 >> 1) {
        uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v13);
      }
      *((void *)v13 + 2)  = v17 + 1;
      *(_DWORD *)&v13[4 * v17 + 32]  = v15;
      dispatch thunk of IteratorProtocol.next()();
      int v15 = v19;
    }
    while ((v20 & 1) == 0);
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  *ValueMetadata v18 = v13;
  return result;
}

unint64_t BlendShapeWeights.subscript.getter(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(void *)(*(void *)v1 + 16) <= result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t key path setter for BlendShapeWeights.subscript(_:) : BlendShapeWeights(int *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a3;
  int v5 = *a1;
  uint64_t v6 = *a2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  uint64_t v6 = result;
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4 < *(void *)(v6 + 16))
  {
    *(_DWORD *)(v6 + 4 * v4 + 32)  = v5;
    *a2  = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t BlendShapeWeights.subscript.setter(unint64_t a1, float a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  uint64_t v5 = result;
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (*(void *)(v5 + 16) > a1)
  {
    *(float *)(v5 + 4 * a1 + 32)  = a2;
    *uint64_t v2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*BlendShapeWeights.subscript.modify(uint64_t (*result)(uint64_t *a1, char a2), unint64_t a2))(uint64_t *a1, char a2)
{
  *(void *)uint64_t result = a2;
  *((void *)result + 1)  = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    *((_DWORD *)result + 4)  = *(_DWORD *)(*(void *)v2 + 4 * a2 + 32);
    return BlendShapeWeights.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t BlendShapeWeights.subscript.modify(uint64_t *a1, char a2)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v6 = *v5;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      uint64_t v6 = result;
    }
    uint64_t v8 = *a1;
    if (*(void *)(v6 + 16) > (unint64_t)*a1) {
      goto LABEL_9;
    }
    __break(1u);
  }
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    uint64_t v6 = result;
  }
  uint64_t v8 = *a1;
  if (*(void *)(v6 + 16) > (unint64_t)*a1)
  {
LABEL_9:
    *(_DWORD *)(v6 + 4 * v8 + 32)  = v4;
    *uint64_t v5 = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t BlendShapeWeights.startIndex.getter()
{
  return 0;
}

uint64_t static BlendShapeWeights.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized Sequence<>.elementsEqual<A>(_:)(*a2, *a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BlendShapeWeights.CodingKeys()
{
  return 0x6769655765726F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BlendShapeWeights.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6769655765726F63 && a2 == 0xEB00000000737468)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BlendShapeWeights.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BlendShapeWeights.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance BlendShapeWeights(int *a1, unint64_t *a2)
{
  int v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  uint64_t v5 = result;
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4 < *(void *)(v5 + 16))
  {
    *(_DWORD *)(v5 + 4 * v4 + 32)  = v3;
    *unint64_t v2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance BlendShapeWeights(uint64_t (**a1)(uint64_t *a1, char a2), unint64_t *a2))()
{
  unint64_t v4 = (uint64_t (*)(uint64_t *, char))malloc(0x28uLL);
  *a1  = v4;
  *((void *)v4 + 4)  = BlendShapeWeights.subscript.modify(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance BlendShapeWeights(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MutableCollection.subscript.setter in conformance JointTransforms(a1, a2, a3, a4, (void (*)(uint64_t, void, void, void, void, void))specialized _writeBackMutableSlice<A, B>(_:bounds:slice:));
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance JointTransforms(void *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void, void, void, void, void))
{
  a5(v5, *a2, a2[1], *a1, a1[1], a1[2]);

  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance BlendShapeWeights(void (***a1)(uint64_t **a1, char a2), uint64_t *a2))()
{
  unint64_t v4 = (void (**)(uint64_t **, char))malloc(0x28uLL);
  *a1  = v4;
  v4[4]  = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unint64_t protocol witness for MutableCollection.partition(by:) in conformance BlendShapeWeights@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

unint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance BlendShapeWeights(unint64_t *a1, unint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BlendShapeWeights(uint64_t *a1, uint64_t *a2)
{
  return specialized Sequence<>.elementsEqual<A>(_:)(*a2, *a1);
}

void BlendShapeWeights.__rk_animationIdentity.getter(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 16);
  if (v3)
  {
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v5 = v4;
    *(void *)(v4 + 16)  = v3;
    *(_DWORD *)(v4 + 32)  = 0;
    if (v3 != 1) {
      bzero((void *)(v4 + 36), 4 * v3 - 4);
    }
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  *a1  = v5;
}

uint64_t protocol witness for AnimatableData.__rk_animationInverse.getter in conformance BlendShapeWeights@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation17BlendShapeWeightsV_Sfs5NeverOTB504_s17d12Foundation17fgH36V21__rk_animationInverseACvgS2fXEfU_Tf1cn_n(*v1);
  *a1  = result;
  return result;
}

void BlendShapeWeights.__rk_animationInverse.getter(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!v4)
  {
LABEL_7:
    *a1  = v5;
    return;
  }
  uint64_t v10 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  if ((unint64_t)(v4 - 1) < *(void *)(v3 + 16))
  {
    uint64_t v5 = v10;
    uint64_t v6 = (float *)(v3 + 32);
    unint64_t v7 = *(void *)(v10 + 16);
    do
    {
      float v8 = *v6;
      uint64_t v11 = v5;
      unint64_t v9 = *(void *)(v5 + 24);
      if (v7 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7 + 1, 1);
        uint64_t v5 = v11;
      }
      *(void *)(v5 + 16)  = v7 + 1;
      *(float *)(v5 + 4 * v7 + 32)  = -v8;
      ++v6;
      ++v7;
      --v4;
    }
    while (v4);
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance BlendShapeWeights@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance JointTransforms(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ52V24__rk_combineForAnimation4withA2C_tFS2f_Sft_tXEfU_Tf1cn_n, a2);
}

uint64_t protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance JointTransforms@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t *)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = a2(v7, v6, &v10);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3  = v8;
  return result;
}

RealityFoundation::BlendShapeWeights __swiftcall BlendShapeWeights.__rk_combineForAnimation(with:)(RealityFoundation::BlendShapeWeights with)
{
  return (RealityFoundation::BlendShapeWeights)JointTransforms.__rk_combineForAnimation(with:)((uint64_t *)with.coreWeights._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ52V24__rk_combineForAnimation4withA2C_tFS2f_Sft_tXEfU_Tf1cn_n, v1);
}

uint64_t JointTransforms.__rk_combineForAnimation(with:)@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = a2(v7, v6, &v10);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3  = v8;
  return result;
}

uint64_t protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance BlendShapeWeights@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized AnimatableData.__rk_invertAndCombineForAnimation(with:)(*a1, *v2, a2);
}

uint64_t protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance BlendShapeWeights@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *v3;
  float v7 = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ62V27__rk_animationInterpolation7towards1tA2C_SdtFS2f_Sft_tXEfU_SfTf1cn_n(v6, v5, v7);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v8;
  return result;
}

RealityFoundation::BlendShapeWeights __swiftcall BlendShapeWeights.__rk_animationInterpolation(towards:t:)(RealityFoundation::BlendShapeWeights towards, Swift::Double t)
{
  int64_t v4 = v2;
  uint64_t v5 = *(void *)towards.coreWeights._rawValue;
  uint64_t v6 = *v3;
  float v7 = t;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ62V27__rk_animationInterpolation7towards1tA2C_SdtFS2f_Sft_tXEfU_SfTf1cn_n(v6, v5, v7);
  swift_bridgeObjectRelease();
  result.coreWeights._unint64_t rawValue = (void *)swift_bridgeObjectRelease();
  *int64_t v4 = v8;
  return result;
}

_DWORD *protocol witness for Collection.subscript.read in conformance BlendShapeWeights(_DWORD *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)v2 + 16))
  {
    *RealityFoundation::BlendShapeWeights result = *(_DWORD *)(*(void *)v2 + 4 * v3 + 32);
    return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance JointTransforms@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    a2[1]  = v4;
    a2[2]  = result;
    *a2  = v3;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance BlendShapeWeights()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance BlendShapeWeights(void *a1, _DWORD *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t BlendShapeWeights.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BlendShapeWeights.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1]  = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type [Float] and conformance <A> [A](&lazy protocol witness table cache variable for type [Float] and conformance <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}