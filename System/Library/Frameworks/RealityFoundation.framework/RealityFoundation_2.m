uint64_t CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:)()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  long long v9;
  long long v10;
  long long v11;
  unint64_t v12;
  int v13;
  unsigned __int8 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  void *v46;
  unsigned char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unsigned char v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  long long v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _OWORD v64[2];
  uint64_t v65;
  char v66;
  unsigned __int8 v67[17];
  uint64_t v68;
  uint64_t v69;

  v68 = v0;
  v1 = *(unsigned char *)(v0 + 430);
  v2 = *(unsigned char *)(v0 + 429);
  v3 = *(unsigned char *)(v0 + 428);
  v4 = *(void *)(v0 + 288);
  v5 = *(unsigned char *)(v0 + 425);
  v7 = *(void *)(v0 + 240);
  v6 = *(void *)(v0 + 248);
  v8 = *(void *)(v0 + 200);
  v9 = *(_OWORD *)(v0 + 224);
  v10 = *(_OWORD *)(v0 + 256);
  v11 = *(_OWORD *)(v0 + 272);
  *(void *)(v8 + 16) = *(void *)(v0 + 216);
  *(_OWORD *)(v8 + 24) = v9;
  *(void *)(v8 + 40) = v7;
  *(void *)(v8 + 48) = v6;
  *(unsigned char *)(v8 + 56) = v5;
  *(_OWORD *)(v8 + 64) = v10;
  *(_OWORD *)(v8 + 80) = v11;
  *(void *)(v8 + 96) = v4;
  *(unsigned char *)(v8 + 104) = v3;
  *(unsigned char *)(v8 + 105) = v2;
  *(unsigned char *)(v8 + 106) = v1;
  v12 = 0x800020004uLL >> (16 * v2);
  v13 = *(unsigned __int8 *)(v0 + 430);
  if (v13 != 2)
  {
    if (v13) {
      LOWORD(v12) = v12 | 0x2001;
    }
    else {
      LOWORD(v12) = v12 | 1;
    }
  }
  *(_WORD *)(v0 + 426) = v12;
  v14 = *(unsigned char *)(v0 + 429);
  v15 = *(unsigned char *)(v0 + 428);
  v16 = *(void *)(v0 + 288);
  v18 = *(void *)(v0 + 240);
  v17 = *(void *)(v0 + 248);
  v59 = *(void *)(v0 + 216);
  v60 = *(_OWORD *)(v0 + 224);
  v61 = v18;
  v62 = v17;
  v63 = v5;
  v19 = *(_OWORD *)(v0 + 272);
  v64[0] = *(_OWORD *)(v0 + 256);
  v64[1] = v19;
  v65 = v16;
  v66 = v15;
  v67[0] = v14;
  static CustomMaterial.surfaceShaderStructsForInit(surfaceShader:geometryModifier:lightingModel:)((uint64_t)v47, (uint64_t)v53, (uint64_t)&v59, (uint64_t)v64, v67);
  v44 = v47[0];
  v46 = (void *)(v0 + 16);
  *(unsigned char *)(v0 + 431) = v47[0];
  v20 = v49;
  v43 = v48;
  *(void *)(v0 + 296) = v48;
  *(void *)(v0 + 304) = v20;
  v21 = v51;
  v41 = v50;
  *(void *)(v0 + 312) = v50;
  *(void *)(v0 + 320) = v21;
  v22 = v52;
  v38 = v53[0];
  *(unsigned char *)(v0 + 432) = v53[0];
  v23 = v54;
  v24 = v55;
  *(void *)(v0 + 328) = v22;
  *(void *)(v0 + 336) = v23;
  v37 = v23;
  v25 = v56;
  v26 = v57;
  *(void *)(v0 + 344) = v24;
  *(void *)(v0 + 352) = v25;
  v36 = v25;
  v27 = v58;
  *(void *)(v0 + 360) = v26;
  *(void *)(v0 + 368) = v27;
  *(unsigned char *)(v0 + 424) = 1;
  v28 = one-time initialization token for shaderCacheRegistry;
  v42 = v20;
  swift_bridgeObjectRetain();
  v40 = v21;
  swift_bridgeObjectRetain();
  v39 = v22;
  v29 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = v27;
  if (v28 != -1) {
    swift_once();
  }
  v31 = *(unsigned char *)(v0 + 430);
  v32 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v32, v0 + 136);
  *(void *)(v0 + 376) = specialized AssetServiceScopedRegistry.instance(for:)((void *)(v0 + 136));
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  *(_WORD *)(v0 + 16) = v12;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = *(unsigned char *)(v0 + 424);
  *(unsigned char *)(v0 + 33) = v31;
  *(unsigned char *)(v0 + 34) = 1;
  *(void *)(v0 + 40) = v38;
  *(void *)(v0 + 48) = v37;
  *(void *)(v0 + 56) = v24;
  *(void *)(v0 + 64) = v36;
  *(void *)(v0 + 72) = v26;
  *(void *)(v0 + 80) = v27;
  *(void *)(v0 + 88) = v44;
  *(void *)(v0 + 96) = v43;
  *(void *)(v0 + 104) = v42;
  *(void *)(v0 + 112) = v41;
  *(void *)(v0 + 120) = v40;
  *(void *)(v0 + 128) = v39;
  outlined retain of CustomMaterial.CustomShaderParameters(v46, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of __MaterialResource.CoreMaterialFunction?);
  swift_retain();
  v33 = specialized SharedCacheStorage.getResource(forKey:)((uint64_t)v46);
  swift_release();
  if (v33)
  {
    swift_release();
    *(void *)(v0 + 400) = v33;
    outlined retain of CustomMaterial.CustomShaderParameters(v46, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
    return MEMORY[0x270FA2498](CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:), 0, 0);
  }
  else
  {
    v45 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ShaderCacheLoader.loadResource(forKey:)
                                          + async function pointer to specialized ShaderCacheLoader.loadResource(forKey:));
    v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v34;
    *v34 = v0;
    v34[1] = CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:);
    return v45((uint64_t)v46);
  }
}

{
  void *v0;
  void *v1;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  *(void *)(v0[25] + 112) = v0[50];
  v3 = (uint64_t (__cdecl *)())&async function pointer to specialized RequestLoadable.awaitForResourceSharing()[*(int *)async function pointer to specialized RequestLoadable.awaitForResourceSharing()];
  swift_retain();
  v1 = (void *)swift_task_alloc();
  v0[51] = v1;
  *v1 = v0;
  v1[1] = CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:);
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    v2 = CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:);
  }
  else {
    v2 = CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:);
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 368);
  v2 = *(void *)(v0 + 360);
  v4 = *(void *)(v0 + 336);
  v3 = *(void *)(v0 + 344);
  v5 = *(unsigned __int8 *)(v0 + 432);
  v7 = *(void *)(v0 + 320);
  v6 = *(void **)(v0 + 328);
  v8 = *(void *)(v0 + 304);
  v15 = *(void *)(v0 + 352);
  v16 = *(void *)(v0 + 312);
  v13 = *(unsigned __int8 *)(v0 + 431);
  v14 = *(void *)(v0 + 296);
  swift_release();
  outlined retain of CustomMaterial.CustomShaderParameters((void *)(v0 + 16), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of __MaterialResource.CoreMaterialFunction?(v5, v4, v3, v15, v2, v1);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v13, v14, v8, v16, v7, v6);
  v9 = *(void *)(v0 + 200);
  v10 = *(void **)(v9 + 48);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  outlined consume of CustomMaterial.GeometryModifier?(*(void *)(v9 + 64), *(void *)(v9 + 72), *(void *)(v9 + 80), *(void *)(v9 + 88), *(void **)(v9 + 96));
  swift_deallocPartialClassInstance();
  v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;

  v1 = *(void *)(v0 + 360);
  v2 = *(void **)(v0 + 368);
  v3 = *(void *)(v0 + 344);
  v18 = *(void *)(v0 + 352);
  v4 = *(unsigned __int8 *)(v0 + 432);
  v5 = *(void **)(v0 + 328);
  v6 = *(void *)(v0 + 336);
  v7 = *(void *)(v0 + 320);
  v20 = *(void *)(v0 + 312);
  v9 = *(void *)(v0 + 296);
  v8 = *(void *)(v0 + 304);
  v10 = *(unsigned __int8 *)(v0 + 431);
  v11 = *(unsigned char *)(v0 + 430);
  v12 = *(void *)(v0 + 200);
  v13 = *(unsigned char *)(v0 + 424);
  *(_WORD *)(v12 + 120) = *(_WORD *)(v0 + 426);
  *(void *)(v12 + 128) = 0;
  *(unsigned char *)(v12 + 136) = v13;
  *(unsigned char *)(v12 + 137) = v11;
  *(unsigned char *)(v12 + 138) = 1;
  *(void *)(v12 + 144) = v4;
  *(void *)(v12 + 152) = v6;
  *(void *)(v12 + 160) = v3;
  *(void *)(v12 + 168) = v18;
  *(void *)(v12 + 176) = v1;
  *(void *)(v12 + 184) = v2;
  *(void *)(v12 + 192) = v10;
  *(void *)(v12 + 200) = v9;
  v17 = v8;
  *(void *)(v12 + 208) = v8;
  *(void *)(v12 + 216) = v20;
  *(void *)(v12 + 224) = v7;
  *(void *)(v12 + 232) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = v2;
  outlined copy of __MaterialResource.CoreMaterialFunction?(v4, v6, v3, v18, v1, v2);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v10, v9, v17, v20, v7, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  RERelease();
  RERelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of __MaterialResource.CoreMaterialFunction?(v4, v6, v3, v18, v1, v2);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v10, v9, v17, v20, v7, v5);
  v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
  v15 = *(void *)(v0 + 200);
  return v14(v15);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void *)(v0 + 360);
  v2 = *(void **)(v0 + 368);
  v3 = *(void *)(v0 + 344);
  v4 = *(unsigned __int8 *)(v0 + 432);
  v6 = *(void **)(v0 + 328);
  v5 = *(void *)(v0 + 336);
  v7 = *(void *)(v0 + 320);
  v15 = *(void *)(v0 + 352);
  v16 = *(void *)(v0 + 312);
  v8 = *(void *)(v0 + 304);
  v14 = *(void *)(v0 + 296);
  v9 = *(unsigned __int8 *)(v0 + 431);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of __MaterialResource.CoreMaterialFunction?(v4, v5, v3, v15, v1, v2);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v9, v14, v8, v16, v7, v6);
  v10 = *(void *)(v0 + 200);
  v11 = *(void **)(v10 + 48);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  outlined consume of CustomMaterial.GeometryModifier?(*(void *)(v10 + 64), *(void *)(v10 + 72), *(void *)(v10 + 80), *(void *)(v10 + 88), *(void **)(v10 + 96));
  swift_release();
  swift_deallocPartialClassInstance();
  v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 392) = v1;
  swift_task_dealloc();
  if (v1)
  {
    v5 = CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:);
  }
  else
  {
    swift_release();
    *(void *)(v4 + 400) = a1;
    outlined retain of CustomMaterial.CustomShaderParameters((void *)(v4 + 16), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
    v5 = CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

void CustomMaterial.Program.hash(into:)()
{
  v2 = *(void **)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  v3 = *(void **)(v0 + 48);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 56));
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v2, sel_hash));
  if (v1)
  {
    Swift::UInt v4 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
  if (*(void *)(v0 + 72))
  {
    uint64_t v6 = *(void *)(v0 + 88);
    v5 = *(void **)(v0 + 96);
    uint64_t v7 = *(void **)(v0 + 80);
    Swift::UInt8 v8 = *(unsigned char *)(v0 + 104) & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v7, sel_hash));
    if (v6)
    {
      Swift::UInt v9 = OpaquePointer.hashValue.getter();
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v5, sel_hash));
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  int v10 = *(unsigned __int8 *)(v0 + 106);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 105));
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 & 1);
  }
}

uint64_t CustomMaterial.Program.init(resource:shaderParameters:blending:)(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unsigned int v5 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  char v7 = *((unsigned char *)a2 + 16);
  __int16 v8 = *(unsigned __int16 *)((char *)a2 + 17);
  uint64_t v10 = *((void *)a2 + 3);
  uint64_t v9 = *((void *)a2 + 4);
  uint64_t v11 = *((void *)a2 + 5);
  uint64_t v12 = *((void *)a2 + 6);
  uint64_t v13 = *((void *)a2 + 7);
  v14 = (void *)*((void *)a2 + 8);
  uint64_t v15 = *((void *)a2 + 9);
  uint64_t v16 = *((void *)a2 + 10);
  uint64_t v17 = *((void *)a2 + 11);
  uint64_t v18 = *((void *)a2 + 12);
  uint64_t v20 = *((void *)a2 + 13);
  v19 = (void *)*((void *)a2 + 14);
  uint64_t v21 = *(void *)a3;
  uint64_t v22 = *(void *)(a3 + 8);
  unint64_t v23 = *(unsigned int *)(a3 + 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 20) << 32);
  *(void *)(v4 + 112) = a1;
  *(_WORD *)(v4 + 120) = v5;
  *(void *)(v4 + 128) = v6;
  *(unsigned char *)(v4 + 136) = v7;
  *(_WORD *)(v4 + 137) = v8;
  *(void *)(v4 + 144) = v10;
  *(void *)(v4 + 152) = v9;
  *(void *)(v4 + 160) = v11;
  *(void *)(v4 + 168) = v12;
  *(void *)(v4 + 176) = v13;
  *(void *)(v4 + 184) = v14;
  uint64_t v46 = v16;
  uint64_t v47 = v15;
  *(void *)(v4 + 192) = v15;
  *(void *)(v4 + 200) = v16;
  uint64_t v42 = v17;
  v43 = v19;
  *(void *)(v4 + 208) = v17;
  *(void *)(v4 + 216) = v18;
  uint64_t v44 = v20;
  uint64_t v45 = v18;
  *(void *)(v4 + 224) = v20;
  *(void *)(v4 + 232) = v19;
  if (v22 == 1)
  {
    uint64_t v24 = v21;
    swift_retain();
    outlined copy of __MaterialResource.CoreMaterialFunction?(v10, v9, v11, v12, v13, v14);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v47, v46, v42, v45, v44, v43);
    outlined consume of CustomMaterial.Blending?(v24, 1);
LABEL_5:
    LOBYTE(v25) = 2;
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    LOBYTE(v26) = 0;
    goto LABEL_11;
  }
  if (v22 == 2)
  {
    swift_retain();
    outlined copy of __MaterialResource.CoreMaterialFunction?(v10, v9, v11, v12, v13, v14);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v47, v46, v42, v45, v44, v43);
    goto LABEL_5;
  }
  uint64_t v41 = v21;
  swift_retain();
  outlined copy of __MaterialResource.CoreMaterialFunction?(v10, v9, v11, v12, v13, v14);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v47, v46, v42, v45, v44, v43);
  outlined consume of CustomMaterial.Blending?(v41, v22);
  uint64_t v25 = HIDWORD(v23) & 1;
  if ((v5 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_6:
  if ((v5 & 2) != 0) {
    LOBYTE(v26) = 1;
  }
  else {
    int v26 = (v5 >> 2) & 2;
  }
LABEL_11:
  v40 = v14;
  if (v5) {
    LOBYTE(v25) = (v5 & 0x2000) != 0;
  }
  *(unsigned char *)(v4 + 105) = v26;
  *(unsigned char *)(v4 + 106) = v25;
  if (v42
    && (uint64_t v27 = v12,
        uint64_t v28 = v10,
        __MaterialResource.CoreMaterialFunction.getSurfaceShader()((uint64_t)&v48),
        (uint64_t v29 = *((void *)&v48 + 1)) != 0))
  {
    uint64_t v30 = v48;
    long long v31 = v49;
    v32 = v50;
    char v33 = v51;
    *(void *)(v4 + 16) = v48;
    *(void *)(v4 + 24) = v29;
    *(_OWORD *)(v4 + 32) = v31;
    *(void *)(v4 + 48) = v32;
    *(unsigned char *)(v4 + 56) = v33 & 1;
    if (v11)
    {
      uint64_t v39 = v30;
      outlined copy of CustomMaterial.GeometryModifier?(v30, v29, v31, *((uint64_t *)&v31 + 1), v32);
      outlined copy of __MaterialResource.CoreMaterialFunction?(v28, v9, v11, v27, v13, v40);
      __MaterialResource.CoreMaterialFunction.getGeometryModifier()((uint64_t)&v48);
      swift_release();
      outlined consume of __MaterialResource.CoreMaterialFunction?(v28, v9, v11, v27, v13, v40);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v47, v46, v42, v45, v44, v43);
      outlined consume of CustomMaterial.GeometryModifier?(v39, v29, v31, *((uint64_t *)&v31 + 1), v32);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v28, v9, v11, v27, v13, v40);
      long long v34 = v48;
      long long v35 = v49;
      v36 = v50;
      char v37 = v51;
    }
    else
    {
      swift_release();
      outlined consume of __MaterialResource.CoreMaterialFunction?(v28, v9, 0, v27, v13, v40);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v47, v46, v42, v45, v44, v43);
      v36 = 0;
      char v37 = 0;
      long long v34 = 0uLL;
      long long v35 = 0uLL;
    }
    *(_OWORD *)(v4 + 64) = v34;
    *(_OWORD *)(v4 + 80) = v35;
    *(void *)(v4 + 96) = v36;
    *(unsigned char *)(v4 + 104) = v37;
    return v4;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t CustomMaterial.Program.deinit()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of CustomMaterial.GeometryModifier?(*(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void **)(v0 + 96));
  swift_release();
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = *(void **)(v0 + 232);
  outlined consume of __MaterialResource.CoreMaterialFunction?(*(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168), *(void *)(v0 + 176), *(void **)(v0 + 184));
  outlined consume of __MaterialResource.CoreMaterialFunction?(v1, v2, v3, v4, v5, v6);
  return v0;
}

uint64_t CustomMaterial.Program.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of CustomMaterial.GeometryModifier?(*(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void **)(v0 + 96));
  swift_release();
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = *(void **)(v0 + 232);
  outlined consume of __MaterialResource.CoreMaterialFunction?(*(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168), *(void *)(v0 + 176), *(void **)(v0 + 184));
  outlined consume of __MaterialResource.CoreMaterialFunction?(v1, v2, v3, v4, v5, v6);

  return swift_deallocClassInstance();
}

Swift::Int CustomMaterial.Program.hashValue.getter()
{
  Hasher.init(_seed:)();
  uint64_t v2 = *(void **)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 48);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 56));
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v2, sel_hash));
  if (v1)
  {
    Swift::UInt v4 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
  if (*(void *)(v0 + 72))
  {
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v5 = *(void **)(v0 + 96);
    char v7 = *(void **)(v0 + 80);
    Swift::UInt8 v8 = *(unsigned char *)(v0 + 104) & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v7, sel_hash));
    if (v6)
    {
      Swift::UInt v9 = OpaquePointer.hashValue.getter();
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v5, sel_hash));
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  int v10 = *(unsigned __int8 *)(v0 + 106);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 105));
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 & 1);
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CustomMaterial.Program(uint64_t *a1, uint64_t *a2)
{
  return specialized static CustomMaterial.Program.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CustomMaterial.Program()
{
  return CustomMaterial.Program.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CustomMaterial.Program()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomMaterial.Program()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  uint64_t v3 = *(void **)(v1 + 32);
  uint64_t v2 = *(void *)(v1 + 40);
  Swift::UInt v4 = *(void **)(v1 + 48);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 56));
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
  if (v2)
  {
    Swift::UInt v5 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v4, sel_hash));
  if (*(void *)(v1 + 72))
  {
    uint64_t v7 = *(void *)(v1 + 88);
    uint64_t v6 = *(void **)(v1 + 96);
    Swift::UInt8 v8 = *(void **)(v1 + 80);
    Swift::UInt8 v9 = *(unsigned char *)(v1 + 104) & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v8, sel_hash));
    if (v7)
    {
      Swift::UInt v10 = OpaquePointer.hashValue.getter();
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v10);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v6, sel_hash));
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  int v11 = *(unsigned __int8 *)(v1 + 106);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 105));
  if (v11 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11 & 1);
  }
  return Hasher._finalize()();
}

uint64_t CustomMaterial.init(program:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = REMaterialParameterBlockValueCreate();
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) = 1;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 320) = 0;
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 288) = 3;
  *(_WORD *)(a2 + 312) = 0;
  *(_WORD *)(a2 + 328) = 257;
  *(void *)a2 = *(void *)(a1 + 112);
  *(void *)(a2 + 8) = v5;
  uint64_t v6 = *(void *)(a1 + 128);
  char v7 = *(unsigned char *)(a1 + 136);
  __int16 v8 = *(_WORD *)(a1 + 137);
  uint64_t v9 = *(void *)(a1 + 152);
  uint64_t v10 = *(void *)(a1 + 160);
  uint64_t v11 = *(void *)(a1 + 168);
  uint64_t v12 = *(void *)(a1 + 176);
  v19 = *(void **)(a1 + 184);
  uint64_t v20 = *(void *)(a1 + 144);
  uint64_t v25 = *(void *)(a1 + 200);
  uint64_t v26 = *(void *)(a1 + 192);
  uint64_t v23 = *(void *)(a1 + 216);
  uint64_t v24 = *(void *)(a1 + 208);
  uint64_t v21 = *(void **)(a1 + 232);
  uint64_t v22 = *(void *)(a1 + 224);
  *(_WORD *)(a2 + 152) = *(_WORD *)(a1 + 120);
  *(void *)(a2 + 160) = v6;
  *(unsigned char *)(a2 + 168) = v7;
  *(_WORD *)(a2 + 169) = v8;
  *(void *)(a2 + 176) = v20;
  *(void *)(a2 + 184) = v9;
  *(void *)(a2 + 192) = v10;
  *(void *)(a2 + 200) = v11;
  *(void *)(a2 + 208) = v12;
  *(void *)(a2 + 216) = v19;
  *(void *)(a2 + 224) = v26;
  *(void *)(a2 + 232) = v25;
  *(void *)(a2 + 240) = v24;
  *(void *)(a2 + 248) = v23;
  *(void *)(a2 + 256) = v22;
  *(void *)(a2 + 264) = v21;
  LODWORD(v5) = *(unsigned __int8 *)(a1 + 106);
  BOOL v13 = v5 == 2;
  BOOL v14 = v5 == 2;
  char v15 = v5 & 1;
  if (v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = 1065353216;
  }
  *(void *)(a2 + 56) = v16;
  *(void *)(a2 + 64) = v14;
  char v17 = v15;
  *(unsigned char *)(a2 + 76) = v15;
  *(_DWORD *)(a2 + 72) = 0;
  swift_retain();
  outlined copy of __MaterialResource.CoreMaterialFunction?(v20, v9, v10, v11, v12, v19);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v26, v25, v24, v23, v22, v21);
  *(void *)(a2 + 80) = REDirectParameterBufferCreate();
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  v27[0] = v16;
  v27[1] = v14;
  char v29 = v17;
  int v28 = 0;
  outlined copy of CustomMaterial.Blending(v16, v14);
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)v27, 0);
  swift_release();

  return outlined consume of __EntityInfoComponent?(v16, v14);
}

uint64_t CustomMaterial.program.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 160);
  char v3 = *(unsigned char *)(v0 + 168);
  __int16 v4 = *(_WORD *)(v0 + 169);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v8 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 200);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v9 = *(void **)(v0 + 216);
  uint64_t v19 = *(void *)(v0 + 232);
  uint64_t v20 = *(void *)(v0 + 224);
  uint64_t v17 = *(void *)(v0 + 248);
  uint64_t v18 = *(void *)(v0 + 240);
  char v15 = *(void **)(v0 + 264);
  uint64_t v16 = *(void *)(v0 + 256);
  unsigned __int16 v24 = *(_WORD *)(v0 + 152);
  uint64_t v25 = v2;
  char v26 = v3;
  __int16 v27 = v4;
  uint64_t v28 = v5;
  uint64_t v29 = v6;
  uint64_t v30 = v8;
  uint64_t v31 = v7;
  uint64_t v32 = v10;
  char v33 = v9;
  uint64_t v34 = v20;
  uint64_t v35 = v19;
  uint64_t v36 = v18;
  uint64_t v37 = v17;
  uint64_t v38 = v16;
  uint64_t v39 = v15;
  uint64_t v11 = *(void *)(v0 + 64);
  char v12 = *(unsigned char *)(v0 + 76);
  LODWORD(v2) = *(_DWORD *)(v0 + 72);
  v21[0] = *(void *)(v0 + 56);
  v21[1] = v11;
  char v23 = v12;
  int v22 = v2;
  type metadata accessor for CustomMaterial.Program();
  uint64_t v13 = swift_allocObject();
  swift_retain();
  outlined copy of __MaterialResource.CoreMaterialFunction?(v5, v6, v8, v7, v10, v9);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v20, v19, v18, v17, v16, v15);
  outlined copy of CustomMaterial.Blending?(v21[0], v11);
  CustomMaterial.Program.init(resource:shaderParameters:blending:)(v1, &v24, (uint64_t)v21);
  return v13;
}

uint64_t key path getter for CustomMaterial.program : CustomMaterial@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 160);
  char v4 = *(unsigned char *)(a1 + 168);
  __int16 v5 = *(_WORD *)(a1 + 169);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v8 = *(void *)(a1 + 192);
  uint64_t v9 = *(void *)(a1 + 200);
  uint64_t v10 = *(void *)(a1 + 208);
  uint64_t v11 = *(void **)(a1 + 216);
  uint64_t v20 = *(void *)(a1 + 232);
  uint64_t v21 = *(void *)(a1 + 224);
  uint64_t v18 = *(void *)(a1 + 248);
  uint64_t v19 = *(void *)(a1 + 240);
  uint64_t v16 = *(void **)(a1 + 264);
  uint64_t v17 = *(void *)(a1 + 256);
  unsigned __int16 v26 = *(_WORD *)(a1 + 152);
  uint64_t v27 = v3;
  char v28 = v4;
  __int16 v29 = v5;
  uint64_t v30 = v6;
  uint64_t v31 = v7;
  uint64_t v32 = v8;
  uint64_t v33 = v9;
  uint64_t v34 = v10;
  uint64_t v35 = v11;
  uint64_t v36 = v21;
  uint64_t v37 = v20;
  uint64_t v38 = v19;
  uint64_t v39 = v18;
  uint64_t v40 = v17;
  uint64_t v41 = v16;
  uint64_t v12 = *(void *)(a1 + 64);
  char v13 = *(unsigned char *)(a1 + 76);
  LODWORD(v3) = *(_DWORD *)(a1 + 72);
  v23[0] = *(void *)(a1 + 56);
  v23[1] = v12;
  char v25 = v13;
  int v24 = v3;
  type metadata accessor for CustomMaterial.Program();
  uint64_t v14 = swift_allocObject();
  swift_retain();
  outlined copy of __MaterialResource.CoreMaterialFunction?(v6, v7, v8, v9, v10, v11);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v21, v20, v19, v18, v17, v16);
  outlined copy of CustomMaterial.Blending?(v23[0], v12);
  uint64_t result = CustomMaterial.Program.init(resource:shaderParameters:blending:)(v2, &v26, (uint64_t)v23);
  *a2 = v14;
  return result;
}

uint64_t CustomMaterial.program.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  swift_retain();
  swift_release();
  *(void *)uint64_t v1 = v3;
  uint64_t v4 = *(void *)(a1 + 128);
  char v5 = *(unsigned char *)(a1 + 136);
  __int16 v6 = *(_WORD *)(a1 + 137);
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  uint64_t v9 = *(void *)(a1 + 160);
  uint64_t v10 = *(void *)(a1 + 168);
  uint64_t v11 = *(void *)(a1 + 176);
  uint64_t v12 = *(void **)(a1 + 184);
  uint64_t v13 = *(void *)(a1 + 192);
  uint64_t v14 = *(void *)(a1 + 200);
  uint64_t v15 = *(void *)(a1 + 208);
  uint64_t v16 = *(void *)(a1 + 216);
  uint64_t v17 = *(void *)(a1 + 224);
  uint64_t v18 = *(void **)(a1 + 232);
  uint64_t v19 = *(void *)(v1 + 176);
  uint64_t v20 = *(void *)(v1 + 184);
  uint64_t v28 = *(void *)(v1 + 200);
  uint64_t v29 = *(void *)(v1 + 192);
  unsigned __int16 v26 = *(void **)(v1 + 216);
  uint64_t v27 = *(void *)(v1 + 208);
  uint64_t v34 = *(void *)(v1 + 232);
  uint64_t v35 = *(void *)(v1 + 224);
  uint64_t v32 = *(void *)(v1 + 248);
  uint64_t v33 = *(void *)(v1 + 240);
  uint64_t v30 = *(void **)(v1 + 264);
  uint64_t v31 = *(void *)(v1 + 256);
  *(_WORD *)(v1 + 152) = *(_WORD *)(a1 + 120);
  *(void *)(v1 + 160) = v4;
  *(unsigned char *)(v1 + 168) = v5;
  *(_WORD *)(v1 + 169) = v6;
  *(void *)(v1 + 176) = v7;
  *(void *)(v1 + 184) = v8;
  *(void *)(v1 + 192) = v9;
  *(void *)(v1 + 200) = v10;
  *(void *)(v1 + 208) = v11;
  *(void *)(v1 + 216) = v12;
  *(void *)(v1 + 224) = v13;
  *(void *)(v1 + 232) = v14;
  *(void *)(v1 + 240) = v15;
  *(void *)(v1 + 248) = v16;
  *(void *)(v1 + 256) = v17;
  *(void *)(v1 + 264) = v18;
  outlined copy of __MaterialResource.CoreMaterialFunction?(v7, v8, v9, v10, v11, v12);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v13, v14, v15, v16, v17, v18);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v19, v20, v29, v28, v27, v26);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v35, v34, v33, v32, v31, v30);
  int v21 = *(unsigned __int8 *)(a1 + 106);
  if (v21 == 2)
  {
    outlined consume of CustomMaterial.Blending?(*(void *)(v1 + 56), *(void *)(v1 + 64));
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    *(_OWORD *)(v1 + 56) = xmmword_228323FE0;
    *(unsigned char *)(v1 + 76) = 0;
    *(_DWORD *)(v1 + 72) = 0;
    uint64_t v24 = 1;
  }
  else
  {
    outlined consume of CustomMaterial.Blending?(*(void *)(v1 + 56), *(void *)(v1 + 64));
    *(_OWORD *)(v1 + 56) = *(_OWORD *)zmmword_22830EC90;
    uint64_t v24 = 0;
    if (v21)
    {
      *(_DWORD *)(v1 + 72) = 0;
      *(unsigned char *)(v1 + 76) = 1;
      uint64_t v23 = 0x100000000;
    }
    else
    {
      uint64_t v23 = 0;
      *(unsigned char *)(v1 + 76) = 0;
      *(_DWORD *)(v1 + 72) = 0;
    }
    uint64_t v22 = 1065353216;
  }
  v36[0] = v22;
  v36[1] = v24;
  int v37 = v23;
  char v38 = BYTE4(v23);
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)v36, 0);
  swift_release();

  return outlined consume of __EntityInfoComponent?(v22, v24);
}

uint64_t (*CustomMaterial.program.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 160);
  char v5 = *(unsigned char *)(v1 + 168);
  __int16 v6 = *(_WORD *)(v1 + 169);
  uint64_t v7 = *(void *)(v1 + 176);
  uint64_t v8 = *(void *)(v1 + 184);
  uint64_t v9 = *(void *)(v1 + 192);
  uint64_t v16 = *(void *)(v1 + 200);
  uint64_t v10 = *(void *)(v1 + 208);
  uint64_t v11 = *(void **)(v1 + 216);
  uint64_t v21 = *(void *)(v1 + 232);
  uint64_t v22 = *(void *)(v1 + 224);
  uint64_t v19 = *(void *)(v1 + 248);
  uint64_t v20 = *(void *)(v1 + 240);
  uint64_t v17 = *(void **)(v1 + 264);
  uint64_t v18 = *(void *)(v1 + 256);
  unsigned __int16 v26 = *(_WORD *)(v1 + 152);
  uint64_t v27 = v4;
  char v28 = v5;
  __int16 v29 = v6;
  uint64_t v30 = v7;
  uint64_t v31 = v8;
  uint64_t v32 = v9;
  uint64_t v33 = v16;
  uint64_t v34 = v10;
  uint64_t v35 = v11;
  uint64_t v36 = v22;
  uint64_t v37 = v21;
  uint64_t v38 = v20;
  uint64_t v39 = v19;
  uint64_t v40 = v18;
  uint64_t v41 = v17;
  uint64_t v12 = *(void *)(v1 + 64);
  char v13 = *(unsigned char *)(v1 + 76);
  LODWORD(v4) = *(_DWORD *)(v1 + 72);
  v23[0] = *(void *)(v1 + 56);
  v23[1] = v12;
  char v25 = v13;
  int v24 = v4;
  type metadata accessor for CustomMaterial.Program();
  uint64_t v14 = swift_allocObject();
  swift_retain();
  outlined copy of __MaterialResource.CoreMaterialFunction?(v7, v8, v9, v16, v10, v11);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v22, v21, v20, v19, v18, v17);
  outlined copy of CustomMaterial.Blending?(v23[0], v12);
  CustomMaterial.Program.init(resource:shaderParameters:blending:)(v3, &v26, (uint64_t)v23);
  *a1 = v14;
  return CustomMaterial.program.modify;
}

uint64_t CustomMaterial.program.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return CustomMaterial.program.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  CustomMaterial.program.setter(v2);

  return swift_release();
}

uint64_t specialized SharedCacheStorage.getResource(forKey:)(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)(*(void *)(v1 + 24) + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  if (*(void *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
      swift_retain();
    }
    else
    {
      uint64_t v7 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  os_unfair_lock_unlock(v3);
  return v7;
}

uint64_t specialized SharedCacheStorage.addResource(value:forKey:)(uint64_t a1, void *a2)
{
  unint64_t v5 = (os_unfair_lock_s *)(*(void *)(v2 + 24) + 16);
  os_unfair_lock_lock(v5);
  char v6 = (uint64_t *)(v2 + 16);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 16);
  if (!*(void *)(v7 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_beginAccess();
    outlined retain of CustomMaterial.CustomShaderParameters(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of __MaterialResource.CoreMaterialFunction?);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v6;
    *char v6 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, (uint64_t)a2, isUniquelyReferenced_nonNull_native);
    *char v6 = v12;
    swift_bridgeObjectRelease();
    outlined retain of CustomMaterial.CustomShaderParameters(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
    swift_endAccess();
    swift_retain();
    goto LABEL_6;
  }
  a1 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
  swift_retain();
  swift_bridgeObjectRelease();
LABEL_6:
  os_unfair_lock_unlock(v5);
  return a1;
}

uint64_t specialized SharedCacheStorage.addResource(value:forKey:)(uint64_t a1, unsigned int a2)
{
  unint64_t v5 = (os_unfair_lock_s *)(*(void *)(v2 + 24) + 16);
  os_unfair_lock_lock(v5);
  char v6 = (uint64_t *)(v2 + 16);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 16);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v9 & 1) != 0))
  {
    a1 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v6;
    *char v6 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *char v6 = v12;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  swift_retain();
  os_unfair_lock_unlock(v5);
  return a1;
}

uint64_t specialized SharedCacheStorage.addResource(value:forKey:)(uint64_t a1, __int16 a2, Swift::UInt a3, int a4)
{
  char v9 = (os_unfair_lock_s *)(*(void *)(v4 + 24) + 16);
  os_unfair_lock_lock(v9);
  uint64_t v10 = (uint64_t *)(v4 + 16);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v4 + 16);
  if (*(void *)(v11 + 16)
    && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0xFFFF01), (v13 & 1) != 0))
  {
    a1 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v10;
    *uint64_t v10 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4 & 0xFFFF01, isUniquelyReferenced_nonNull_native);
    *uint64_t v10 = v16;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  swift_retain();
  os_unfair_lock_unlock(v9);
  return a1;
}

uint64_t specialized ShaderCacheLoader.loadResource(forKey:)(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[18] = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ShaderCacheLoader.loadResource(forKey:), v1, 0);
}

uint64_t specialized ShaderCacheLoader.loadResource(forKey:)()
{
  uint64_t v1 = v0[17] + 160;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v3 = v0[16];
    swift_bridgeObjectRetain();
    unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8 * v4);
      v0[19] = v6;
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v7 = (void *)swift_task_alloc();
      v0[20] = v7;
      uint64_t v8 = type metadata accessor for __MaterialResource();
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      *uint64_t v7 = v0;
      v7[1] = specialized ShaderCacheLoader.loadResource(forKey:);
      uint64_t v10 = MEMORY[0x263F8E4E0];
      uint64_t v11 = v0 + 15;
      uint64_t v12 = v6;
      uint64_t v13 = v8;
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = v0[17];
  uint64_t v14 = v0[18];
  uint64_t v16 = v0[16];
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v14, 1, 1, v17);
  uint64_t v18 = lazy protocol witness table accessor for type ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters> and conformance ShaderCacheLoader<A>(&lazy protocol witness table cache variable for type ShaderCacheLoader<CustomMaterial.CustomShaderParameters> and conformance ShaderCacheLoader<A>, &demangling cache variable for type metadata for ShaderCacheLoader<CustomMaterial.CustomShaderParameters>);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v15;
  *(void *)(v19 + 24) = v18;
  long long v20 = *(_OWORD *)(v16 + 48);
  long long v22 = *(_OWORD *)v16;
  long long v21 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)(v19 + 64) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(v19 + 80) = v20;
  *(_OWORD *)(v19 + 32) = v22;
  *(_OWORD *)(v19 + 48) = v21;
  long long v23 = *(_OWORD *)(v16 + 64);
  long long v24 = *(_OWORD *)(v16 + 96);
  uint64_t v25 = *(void *)(v16 + 112);
  *(_OWORD *)(v19 + 112) = *(_OWORD *)(v16 + 80);
  *(_OWORD *)(v19 + 128) = v24;
  *(_OWORD *)(v19 + 96) = v23;
  *(void *)(v19 + 144) = v25;
  *(void *)(v19 + 152) = v15;
  swift_retain_n();
  outlined retain of CustomMaterial.CustomShaderParameters((void *)v16, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of __MaterialResource.CoreMaterialFunction?);
  uint64_t v26 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit18__MaterialResourceC_Tgm5(v14, (uint64_t)&async function pointer to partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), v19);
  v0[22] = v26;
  swift_beginAccess();
  outlined retain of CustomMaterial.CustomShaderParameters((void *)v16, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of __MaterialResource.CoreMaterialFunction?);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v31 = *(void *)v1;
  *(void *)uint64_t v1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, v16, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v1 = v31;
  swift_bridgeObjectRelease();
  outlined retain of CustomMaterial.CustomShaderParameters((void *)v16, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
  swift_endAccess();
  char v28 = (void *)swift_task_alloc();
  v0[23] = v28;
  uint64_t v29 = type metadata accessor for __MaterialResource();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v0[24] = v9;
  *char v28 = v0;
  v28[1] = specialized ShaderCacheLoader.loadResource(forKey:);
  uint64_t v10 = MEMORY[0x263F8E4E0];
  uint64_t v11 = v0 + 14;
  uint64_t v12 = v26;
  uint64_t v13 = v29;
LABEL_6:
  return MEMORY[0x270FA1FA8](v11, v12, v13, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    unint64_t v4 = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  else {
    unint64_t v4 = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    unint64_t v4 = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  else {
    unint64_t v4 = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 120);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v0[14];
  swift_beginAccess();
  outlined retain of CustomMaterial.CustomShaderParameters(v1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of __MaterialResource.CoreMaterialFunction?);
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v1);
  swift_endAccess();
  outlined retain of CustomMaterial.CustomShaderParameters(v1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

{
  void *v0;
  void *v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void *)v0[25];
  _StringGuts.grow(_:)(119);
  v0[11] = 0;
  v0[12] = 0xE000000000000000;
  v2._object = (void *)0x80000002283511D0;
  v2._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v2);
  v0[13] = v1;
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0xD000000000000049;
  v3._object = (void *)0x8000000228351200;
  String.append(_:)(v3);
  unint64_t v4 = v0[11];
  char v5 = v0[12];
  lazy protocol witness table accessor for type ShaderCacheError and conformance ShaderCacheError();
  swift_allocError();
  *uint64_t v6 = v4;
  v6[1] = v5;
  swift_willThrow();

  swift_release();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  void *v26;
  uint64_t v27;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v1 = *(void *)(v0 + 136) + 160;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(_DWORD *)(v0 + 208);
  if (*(void *)(*(void *)v1 + 16))
  {
    unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(*(_WORD *)(v0 + 216), *(void *)(v0 + 128), v3 & 0xFFFF01);
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8 * v4);
      *(void *)(v0 + 152) = v6;
      swift_retain();
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 160) = v7;
      uint64_t v8 = type metadata accessor for __MaterialResource();
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      *uint64_t v7 = v0;
      v7[1] = specialized ShaderCacheLoader.loadResource(forKey:);
      uint64_t v10 = MEMORY[0x263F8E4E0];
      uint64_t v11 = v0 + 120;
      uint64_t v12 = v6;
      uint64_t v13 = v8;
      goto LABEL_7;
    }
    uint64_t v14 = v3 & 0xFFFF00;
    uint64_t v3 = *(_DWORD *)(v0 + 208);
  }
  else
  {
    uint64_t v14 = v3 & 0xFFFF00;
  }
  uint64_t v30 = v14;
  *(_DWORD *)(v0 + 212) = v14;
  uint64_t v16 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 144);
  uint64_t v17 = *(void *)(v0 + 128);
  uint64_t v18 = v3 >> 8;
  uint64_t v19 = *(_WORD *)(v0 + 216);
  uint64_t v29 = HIWORD(v3);
  long long v20 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v15, 1, 1, v20);
  long long v21 = v3 & 1;
  long long v22 = lazy protocol witness table accessor for type ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters> and conformance ShaderCacheLoader<A>(&lazy protocol witness table cache variable for type ShaderCacheLoader<PhysicallyBasedMaterial.PBRShaderParameters> and conformance ShaderCacheLoader<A>, &demangling cache variable for type metadata for ShaderCacheLoader<PhysicallyBasedMaterial.PBRShaderParameters>);
  long long v23 = swift_allocObject();
  *(void *)(v23 + 16) = v16;
  *(void *)(v23 + 24) = v22;
  *(_WORD *)(v23 + 32) = v19;
  *(void *)(v23 + 40) = v17;
  *(unsigned char *)(v23 + 48) = v21;
  *(unsigned char *)(v23 + 49) = v18;
  *(unsigned char *)(v23 + 50) = v29;
  *(void *)(v23 + 56) = v16;
  swift_retain_n();
  long long v24 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit18__MaterialResourceC_Tgm5(v15, (uint64_t)&async function pointer to partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), v23);
  *(void *)(v0 + 176) = v24;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v31 = *(void *)v1;
  *(void *)uint64_t v1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v19, v17, v30 | v21, isUniquelyReferenced_nonNull_native);
  *(void *)uint64_t v1 = v31;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v26;
  uint64_t v27 = type metadata accessor for __MaterialResource();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *(void *)(v0 + 192) = v9;
  *uint64_t v26 = v0;
  v26[1] = specialized ShaderCacheLoader.loadResource(forKey:);
  uint64_t v10 = MEMORY[0x263F8E4E0];
  uint64_t v11 = v0 + 112;
  uint64_t v12 = v24;
  uint64_t v13 = v27;
LABEL_7:
  return MEMORY[0x270FA1FA8](v11, v12, v13, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    unint64_t v4 = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  else {
    unint64_t v4 = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  int v1;
  int v2;
  Swift::UInt v3;
  uint64_t v4;
  Swift::UInt16 v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;

  uint64_t v2 = *(_DWORD *)(v0 + 208);
  uint64_t v1 = *(_DWORD *)(v0 + 212);
  uint64_t v3 = *(void *)(v0 + 128);
  unint64_t v4 = *(void *)(v0 + 112);
  char v5 = *(_WORD *)(v0 + 216);
  swift_beginAccess();
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v3, v1 | v2 & 1u);
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(void *)(v0 + 136);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *(void *)(v9 + 160);
    *(void *)(v9 + 160) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
    uint64_t v12 = *(void *)(v0 + 136);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *(void *)(v12 + 160) = v11;
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v13(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  uint64_t v1 = *(void *)(v0 + 128) + 160;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 16)
    && (uint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(v0 + 200)), (v4 & 1) != 0))
  {
    char v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
    *(void *)(v0 + 144) = v5;
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v6;
    uint64_t v7 = type metadata accessor for __MaterialResource();
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *uint64_t v6 = v0;
    v6[1] = specialized ShaderCacheLoader.loadResource(forKey:);
    uint64_t v9 = MEMORY[0x263F8E4E0];
    uint64_t v10 = v0 + 120;
    uint64_t v11 = v5;
    uint64_t v12 = v7;
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 128);
    uint64_t v13 = *(void *)(v0 + 136);
    uint64_t v15 = *(_DWORD *)(v0 + 200);
    uint64_t v16 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v13, 1, 1, v16);
    uint64_t v17 = lazy protocol witness table accessor for type ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters> and conformance ShaderCacheLoader<A>(&lazy protocol witness table cache variable for type ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters> and conformance ShaderCacheLoader<A>, &demangling cache variable for type metadata for ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters>);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v14;
    *(void *)(v18 + 24) = v17;
    *(_DWORD *)(v18 + 32) = v15;
    *(void *)(v18 + 40) = v14;
    swift_retain_n();
    uint64_t v19 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit18__MaterialResourceC_Tgm5(v13, (uint64_t)&async function pointer to partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), v18);
    *(void *)(v0 + 168) = v19;
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    long long v24 = *(void *)v1;
    *(void *)uint64_t v1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, v15, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v1 = v24;
    swift_bridgeObjectRelease();
    swift_endAccess();
    long long v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v21;
    long long v22 = type metadata accessor for __MaterialResource();
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *(void *)(v0 + 184) = v8;
    *long long v21 = v0;
    v21[1] = specialized ShaderCacheLoader.loadResource(forKey:);
    uint64_t v9 = MEMORY[0x263F8E4E0];
    uint64_t v10 = v0 + 112;
    uint64_t v11 = v19;
    uint64_t v12 = v22;
  }
  return MEMORY[0x270FA1FA8](v10, v11, v12, v8, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0) {
    unint64_t v4 = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  else {
    unint64_t v4 = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  if (v0) {
    unint64_t v4 = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  else {
    unint64_t v4 = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  return MEMORY[0x270FA2498](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 120);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v12;

  uint64_t v1 = *(_DWORD *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 112);
  swift_beginAccess();
  uint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1);
  if (v4)
  {
    char v5 = v3;
    uint64_t v6 = *(void *)(v0 + 128);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v6 + 160);
    *(void *)(v6 + 160) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
    uint64_t v9 = *(void *)(v0 + 128);
    specialized _NativeDictionary._delete(at:)(v5, v8);
    *(void *)(v9 + 160) = v8;
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v10(v2);
}

{
  void *v0;
  void *v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void *)v0[24];
  _StringGuts.grow(_:)(119);
  v0[11] = 0;
  v0[12] = 0xE000000000000000;
  v2._object = (void *)0x80000002283511D0;
  v2._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v2);
  v0[13] = v1;
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0xD000000000000049;
  v3._object = (void *)0x8000000228351200;
  String.append(_:)(v3);
  unint64_t v4 = v0[11];
  char v5 = v0[12];
  lazy protocol witness table accessor for type ShaderCacheError and conformance ShaderCacheError();
  swift_allocError();
  *uint64_t v6 = v4;
  v6[1] = v5;
  swift_willThrow();

  swift_release();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t specialized ShaderCacheLoader.loadResource(forKey:)(__int16 a1, uint64_t a2, int a3)
{
  *(_DWORD *)(v4 + 208) = a3;
  *(void *)(v4 + 128) = a2;
  *(void *)(v4 + 136) = v3;
  *(_WORD *)(v4 + 216) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v4 + 144) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ShaderCacheLoader.loadResource(forKey:), v3, 0);
}

uint64_t specialized ShaderCacheLoader.loadResource(forKey:)(int a1)
{
  *(void *)(v2 + 128) = v1;
  *(_DWORD *)(v2 + 200) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v2 + 136) = swift_task_alloc();
  return MEMORY[0x270FA2498](specialized ShaderCacheLoader.loadResource(forKey:), v1, 0);
}

uint64_t specialized ShaderCache.init(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(uint64_t))
{
  outlined init with copy of __REAssetService(a1, v5 + 16);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = MEMORY[0x263F8EE78];
  *(void *)(v11 + 16) = a3(MEMORY[0x263F8EE78]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = 0;
  *(void *)(v11 + 24) = v13;
  *(void *)(v5 + 56) = v11;
  outlined init with copy of __REAssetService(a1, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v14 = swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  *(void *)(v14 + 160) = a5(v12);
  *(void *)(v14 + 112) = v11;
  outlined init with take of BindableDataInternal(v16, v14 + 120);
  __swift_destroy_boxed_opaque_existential_1(a1);
  *(void *)(v5 + 64) = v14;
  return v5;
}

uint64_t specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(uint64_t a1, Swift::UInt a2)
{
  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(a1, a2, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

uint64_t specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(uint64_t a1, Swift::UInt a2, void (*a3)(void), void (*a4)(uint64_t, uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v8 = (uint64_t *)(result + 24);
    swift_beginAccess();
    uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v10)
    {
      uint64_t v11 = v9;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = *v8;
      uint64_t v14 = *v8;
      *uint64_t v8 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        a3();
        uint64_t v13 = v14;
      }
      a4(v11, v13);
      *uint64_t v8 = v13;
      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v7 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 96) = v7;
  *(_OWORD *)(v5 + 112) = *(_OWORD *)(a4 + 96);
  *(void *)(v5 + 128) = *(void *)(a4 + 112);
  *(void *)(v5 + 136) = a1;
  long long v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 32) = v8;
  long long v9 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v5 + 64) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v5 + 144) = v10;
  *(void *)uint64_t v10 = v5;
  *(void *)(v10 + 8) = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  *(void *)(v10 + 400) = a5;
  long long v11 = *(_OWORD *)(v5 + 80);
  long long v12 = *(_OWORD *)(v5 + 96);
  long long v13 = *(_OWORD *)(v5 + 112);
  *(void *)(v10 + 248) = *(void *)(v5 + 128);
  *(_OWORD *)(v10 + 232) = v13;
  *(_OWORD *)(v10 + 216) = v12;
  *(_OWORD *)(v10 + 200) = v11;
  long long v14 = *(_OWORD *)(v5 + 16);
  long long v15 = *(_OWORD *)(v5 + 32);
  long long v16 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v10 + 184) = *(_OWORD *)(v5 + 64);
  *(_OWORD *)(v10 + 168) = v16;
  *(_OWORD *)(v10 + 152) = v15;
  *(_OWORD *)(v10 + 136) = v14;
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), a5, 0);
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 136) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a1;
  __int16 v7 = *a4;
  uint64_t v8 = *((void *)a4 + 1);
  int v9 = *((unsigned __int8 *)a4 + 16);
  int v10 = *((unsigned __int8 *)a4 + 17);
  int v11 = *((unsigned __int8 *)a4 + 18);
  uint64_t v12 = swift_task_alloc();
  *(void *)(v5 + 24) = v12;
  *(void *)uint64_t v12 = v5;
  *(void *)(v12 + 8) = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  *(void *)(v12 + 184) = a5;
  *(_DWORD *)(v12 + 180) = (v10 << 8) | (v11 << 16) | v9;
  *(_WORD *)(v12 + 264) = v7;
  *(_WORD *)(v12 + 160) = v7;
  *(void *)(v12 + 168) = v8;
  *(unsigned char *)(v12 + 176) = v9;
  *(unsigned char *)(v12 + 177) = v10;
  *(unsigned char *)(v12 + 178) = v11;
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), a5, 0);
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a1;
  int v7 = *a4;
  uint64_t v8 = swift_task_alloc();
  *(void *)(v5 + 24) = v8;
  *(void *)uint64_t v8 = v5;
  *(void *)(v8 + 8) = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  *(void *)(v8 + 160) = a5;
  *(_DWORD *)(v8 + 240) = v7;
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), a5, 0);
}

uint64_t specialized static CustomMaterial.Program.Descriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = a1[1];
  int v3 = a2[1];
  if (v2 == 2)
  {
    if (v3 != 2) {
      return 0;
    }
  }
  else
  {
    int v5 = (v3 ^ v2) & 1;
    if (v3 == 2 || v5 != 0) {
      return 0;
    }
  }
  return 1;
}

BOOL specialized static CustomMaterial.Program.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(void **)(a1 + 48);
  char v6 = *(unsigned char *)(a1 + 56);
  uint64_t v40 = *(void *)(a1 + 16);
  long long v41 = *(_OWORD *)(a1 + 24);
  uint64_t v42 = v4;
  id v43 = v5;
  char v44 = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void **)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 56);
  uint64_t v35 = *(void *)(a2 + 16);
  long long v36 = *(_OWORD *)(a2 + 24);
  uint64_t v37 = v7;
  uint64_t v38 = v8;
  char v39 = v9;
  if ((specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(&v40, &v35) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v14 = *(void **)(a1 + 96);
  char v15 = *(unsigned char *)(a1 + 104);
  uint64_t v17 = *(void *)(a2 + 64);
  uint64_t v16 = *(void *)(a2 + 72);
  uint64_t v18 = *(void *)(a2 + 80);
  uint64_t v19 = *(void *)(a2 + 88);
  long long v20 = *(void **)(a2 + 96);
  char v21 = *(unsigned char *)(a2 + 104);
  if (!v11)
  {
    uint64_t v31 = *(void *)(a1 + 64);
    uint64_t v32 = *(void *)(a1 + 88);
    uint64_t v33 = *(void **)(a1 + 96);
    if (!v16) {
      goto LABEL_7;
    }
LABEL_12:
    outlined copy of CustomMaterial.GeometryModifier?(v17, v16, v18, v19, v20);
    outlined consume of CustomMaterial.GeometryModifier?(v31, v11, v13, v32, v33);
    outlined consume of CustomMaterial.GeometryModifier?(v17, v16, v18, v19, v20);
    return 0;
  }
  uint64_t v40 = *(void *)(a1 + 64);
  *(void *)&long long v41 = v11;
  *((void *)&v41 + 1) = v13;
  uint64_t v42 = v12;
  id v43 = v14;
  char v44 = v15;
  if (!v16)
  {
    uint64_t v31 = v10;
    uint64_t v32 = v12;
    char v28 = v14;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v33 = v28;
    id v29 = v28;
    goto LABEL_12;
  }
  uint64_t v35 = v17;
  *(void *)&long long v36 = v16;
  *((void *)&v36 + 1) = v18;
  uint64_t v37 = v19;
  uint64_t v38 = v20;
  char v39 = v21 & 1;
  uint64_t v22 = v10;
  uint64_t v23 = v12;
  long long v24 = v14;
  outlined copy of CustomMaterial.GeometryModifier?(v10, v11, v13, v12, v14);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v25 = v24;
  char v34 = specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(&v40, &v35);

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of CustomMaterial.GeometryModifier?(v22, v11, v13, v23, v24);
  if ((v34 & 1) == 0) {
    return 0;
  }
LABEL_7:
  if (*(unsigned __int8 *)(a1 + 105) != *(unsigned __int8 *)(a2 + 105)) {
    return 0;
  }
  int v26 = *(unsigned __int8 *)(a1 + 106);
  int v27 = *(unsigned __int8 *)(a2 + 106);
  if (v26 == 2) {
    return v27 == 2;
  }
  return v27 != 2 && ((v27 ^ v26) & 1) == 0;
}

void *outlined retain of CustomMaterial.CustomShaderParameters(void *a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[12];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[14];
  a2(a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
  a2(v4, v5, v6, v7, v8, v9);
  return a1;
}

void outlined consume of __MaterialResource.CoreMaterialFunction?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t outlined copy of CustomMaterial.Blending(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for CustomMaterial.Program()
{
  return self;
}

uint64_t outlined copy of CustomMaterial.Blending?(uint64_t a1, uint64_t a2)
{
  if (a2 != 2) {
    return outlined copy of CustomMaterial.Blending(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of CustomMaterial.Blending?(uint64_t a1, uint64_t a2)
{
  if (a2 != 2) {
    return outlined consume of __EntityInfoComponent?(a1, a2);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.Program.Descriptor and conformance CustomMaterial.Program.Descriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.Program.Descriptor and conformance CustomMaterial.Program.Descriptor;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Program.Descriptor and conformance CustomMaterial.Program.Descriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Program.Descriptor and conformance CustomMaterial.Program.Descriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.Program and conformance CustomMaterial.Program()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.Program and conformance CustomMaterial.Program;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Program and conformance CustomMaterial.Program)
  {
    type metadata accessor for CustomMaterial.Program();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Program and conformance CustomMaterial.Program);
  }
  return result;
}

uint64_t sub_227EDBF3C()
{
  uint64_t v0 = swift_retain();
  return CustomMaterial.program.setter(v0);
}

uint64_t method lookup function for CustomMaterial.Program(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CustomMaterial.Program);
}

uint64_t dispatch thunk of CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 120) + **(int **)(v3 + 120));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Program.Descriptor(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Program.Descriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EDC2E0);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Program.Descriptor()
{
  return &type metadata for CustomMaterial.Program.Descriptor;
}

uint64_t sub_227EDC318()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unsigned int v6 = (int *)(v1 + 4);
  uint64_t v7 = v1[5];
  int v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *int v8 = v2;
  v8[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t))((char *)&async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)
                                                                         + async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:));
  return v9(a1, v4, v5, v6, v7);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, __int16 *, uint64_t);
  uint64_t v11;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unsigned int v6 = (__int16 *)(v1 + 4);
  uint64_t v7 = v1[7];
  int v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *int v8 = v2;
  v8[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, __int16 *, uint64_t))((char *)&async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)
                                                                             + async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:));
  return v9(a1, v4, v5, v6, v7);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unsigned int v6 = (uint64_t)(v1 + 4);
  uint64_t v7 = v1[19];
  int v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *int v8 = v2;
  v8[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)
                                                                           + async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:));
  return v9(a1, v4, v5, v6, v7);
}

unint64_t lazy protocol witness table accessor for type ShaderCacheError and conformance ShaderCacheError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShaderCacheError and conformance ShaderCacheError;
  if (!lazy protocol witness table cache variable for type ShaderCacheError and conformance ShaderCacheError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderCacheError and conformance ShaderCacheError);
  }
  return result;
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 216) = v3;
  *(_OWORD *)(v2 + 232) = *(_OWORD *)(a1 + 96);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 152) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 32);
  *(void *)(v2 + 400) = a2;
  *(void *)(v2 + 248) = *(void *)(a1 + 112);
  *(_OWORD *)(v2 + 184) = v5;
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), a2, 0);
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)()
{
  uint64_t v1 = *(void *)(v0 + 400);
  unint64_t v2 = CustomMaterial.CustomShaderParameters.materialPath.getter();
  uint64_t v4 = v3;
  *(void *)(v0 + 408) = CustomMaterial.CustomShaderParameters.functionConstants.getter();
  outlined init with copy of __REAssetService(v1 + 120, v0 + 256);
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v6 = *(void *)(v0 + 288);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 256), v5);
  uint64_t v7 = __REAssetService.asset(_:)(v2, v4, v5, v6);
  *(void *)(v0 + 416) = v7;
  uint64_t v8 = swift_bridgeObjectRelease();
  if (v7)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
    *(void *)(v0 + 424) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 432) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v11);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 440) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v0 + 488) = 1;
    __swift_destroy_boxed_opaque_existential_1(v0 + 256);
    *(unsigned char *)(v0 + 489) = *(unsigned char *)(v0 + 153);
    *(_WORD *)(v0 + 490) = *(_WORD *)(v0 + 136);
    uint64_t v12 = *(void *)(v0 + 176);
    if (v12)
    {
      uint64_t v13 = *(void *)(v0 + 168);
      uint64_t v14 = *(void *)(v0 + 192);
      uint64_t v29 = *(void *)(v0 + 184);
      uint64_t v31 = *(void *)(v0 + 160);
      char v15 = *(void **)(v0 + 200);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v27 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      }
      unint64_t v17 = v11[2];
      unint64_t v16 = v11[3];
      if (v17 >= v16 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v11);
      }
      v11[2] = v17 + 1;
      uint64_t v18 = &v11[6 * v17];
      *((unsigned char *)v18 + 32) = v31;
      v18[5] = v13;
      v18[6] = v12;
      v18[7] = v29;
      v18[8] = v14;
      v18[9] = v27;
      outlined consume of __MaterialResource.CoreMaterialFunction?(v31, v13, v12, v29, v14, v15);
    }
    uint64_t v19 = *(void *)(v0 + 224);
    if (v19)
    {
      uint64_t v30 = *(void *)(v0 + 216);
      uint64_t v32 = *(void *)(v0 + 208);
      uint64_t v20 = *(void *)(v0 + 232);
      uint64_t v21 = *(void *)(v0 + 240);
      uint64_t v22 = *(void **)(v0 + 248);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v28 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      }
      unint64_t v24 = v11[2];
      unint64_t v23 = v11[3];
      if (v24 >= v23 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v11);
      }
      v11[2] = v24 + 1;
      id v25 = &v11[6 * v24];
      *((unsigned char *)v25 + 32) = v32;
      v25[5] = v30;
      v25[6] = v19;
      v25[7] = v20;
      v25[8] = v21;
      v25[9] = v28;
      outlined consume of __MaterialResource.CoreMaterialFunction?(v32, v30, v19, v20, v21, v22);
    }
    *(void *)(v0 + 448) = v11;
    *(void *)(v0 + 456) = type metadata accessor for __MaterialResource();
    *(unsigned char *)(v0 + 492) = *(unsigned char *)(v0 + 488);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v0 + 464) = specialized static __ServiceLocator.shared.getter();
    swift_retain();
    uint64_t v8 = (uint64_t)specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  __int16 v3;
  char v4;
  uint64_t v5;
  long long v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11[3];
  char v12;
  BOOL v13;
  BOOL v14;
  char v15;
  char v16;
  long long v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v19 = v0;
  uint64_t v1 = *(void *)(v0 + 464);
  unint64_t v2 = *(unsigned char *)(v0 + 492);
  uint64_t v3 = *(_WORD *)(v0 + 490);
  uint64_t v4 = *(unsigned char *)(v0 + 489);
  uint64_t v5 = *(void *)(v0 + 408);
  v11[0] = *(void *)(v0 + 416);
  v11[1] = v5;
  v11[2] = 0;
  uint64_t v12 = v2;
  uint64_t v13 = (v3 & 0x400) != 0;
  uint64_t v14 = (v3 & 0x800) != 0;
  char v15 = 2;
  unint64_t v16 = v4;
  uint64_t v6 = *(_OWORD *)(v0 + 440);
  uint64_t v7 = v1 + 120;
  unint64_t v17 = *(_OWORD *)(v0 + 424);
  uint64_t v18 = v6;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, v0 + 336);
  uint64_t v8 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)(v11, (void *)(v0 + 336));
  *(void *)(v0 + 472) = v8;
  __swift_destroy_boxed_opaque_existential_1(v0 + 336);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v9;
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return static __MaterialResource.load(_:)(v0 + 296, v8);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 400);
  RERelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 320);
  unint64_t v2 = *(void *)(v0 + 328);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 296), v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 296);
  uint64_t v4 = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 96) = v4;
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 232);
  *(void *)(v0 + 128) = *(void *)(v0 + 248);
  uint64_t v5 = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 32) = v5;
  uint64_t v6 = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v0 + 64) = v6;
  swift_retain();
  uint64_t v7 = specialized SharedCacheStorage.addResource(value:forKey:)(v3, (void *)(v0 + 16));
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v8(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v1 = 0xD00000000000002ALL;
  unint64_t v2 = *(_WORD *)(v0 + 264);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = 0x800000022834DFE0;
  }
  else if ((v2 & 1) == 0 && *(unsigned __int8 *)(v0 + 181) << 8 == 512)
  {
    uint64_t v1 = 0xD00000000000001FLL;
    uint64_t v3 = 0x80000002283512B0;
  }
  else
  {
    uint64_t v3 = 0x80000002283512D0;
  }
  uint64_t v4 = *(void *)(v0 + 184);
  *(void *)(v0 + 192) = PhysicallyBasedMaterial.PBRShaderParameters.functionConstants.getter();
  outlined init with copy of __REAssetService(v4 + 120, v0 + 16);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v5);
  uint64_t v7 = __REAssetService.asset(_:)(v1, v3, v5, v6);
  *(void *)(v0 + 200) = v7;
  uint64_t v8 = swift_bridgeObjectRelease();
  if (v7)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v11 = MEMORY[0x263F8EE78];
    *(void *)(v0 + 208) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 216) = specialized Dictionary.init(dictionaryLiteral:)(v11);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 224) = specialized Dictionary.init(dictionaryLiteral:)(v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    *(unsigned char *)(v0 + 179) = *(unsigned char *)(v0 + 177);
    *(void *)(v0 + 232) = type metadata accessor for __MaterialResource();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v0 + 240) = specialized static __ServiceLocator.shared.getter();
    swift_retain();
    uint64_t v8 = (uint64_t)specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x270FA2498](v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9[3];
  char v10;
  __int16 v11;
  char v12;
  char v13;
  long long v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  unint64_t v17 = v0;
  uint64_t v1 = *(void *)(v0 + 240);
  unint64_t v2 = *(unsigned char *)(v0 + 179);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 192);
  v9[0] = *(void *)(v0 + 200);
  v9[1] = v4;
  v9[2] = 0;
  uint64_t v10 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 2;
  uint64_t v13 = v2;
  uint64_t v14 = *(_OWORD *)(v0 + 208);
  uint64_t v5 = v1 + 120;
  char v15 = v3;
  unint64_t v16 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, v0 + 96);
  uint64_t v6 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)(v9, (void *)(v0 + 96));
  *(void *)(v0 + 248) = v6;
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return static __MaterialResource.load(_:)(v0 + 56, v6);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 184);
  RERelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 80);
  unint64_t v2 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 176);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 177);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 178);
  LOWORD(v2) = *(_WORD *)(v0 + 160);
  swift_retain();
  uint64_t v8 = specialized SharedCacheStorage.addResource(value:forKey:)(v3, v2, v4, (v6 << 8) | (v7 << 16) | v5);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v9(v8);
}

{
  uint64_t v0;
  int v1;
  unsigned int v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v1 = *(_DWORD *)(v0 + 240);
  unint64_t v2 = (unsigned __int16)v1;
  uint64_t v3 = (v1 & 1) == 0;
  uint64_t v4 = (v1 & 0xFF0000) == 0x20000;
  uint64_t v5 = !v4 || !v3;
  if (v4 && v3) {
    uint64_t v6 = 0xD000000000000021;
  }
  else {
    uint64_t v6 = 0xD00000000000002CLL;
  }
  uint64_t v7 = 0x8000000228351280;
  if (!v5) {
    uint64_t v7 = 0x8000000228351250;
  }
  if ((v1 & 2) != 0) {
    uint64_t v8 = 0xD00000000000002CLL;
  }
  else {
    uint64_t v8 = v6;
  }
  if ((v1 & 2) != 0) {
    uint64_t v9 = 0x800000022834E010;
  }
  else {
    uint64_t v9 = v7;
  }
  uint64_t v10 = *(void *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, __MaterialResource.BuildParameters.Value)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22830EC60;
  *(void *)(v11 + 32) = 0x6C6E55686374614DLL;
  *(void *)(v11 + 40) = 0xEF726F6C6F437469;
  *(void *)(v11 + 48) = (v2 >> 2) & 1;
  *(void *)(v11 + 56) = 0;
  *(unsigned char *)(v11 + 64) = 0;
  *(void *)(v0 + 168) = specialized Dictionary.init(dictionaryLiteral:)(v11);
  outlined init with copy of __REAssetService(v10 + 120, v0 + 16);
  uint64_t v12 = *(void *)(v0 + 40);
  uint64_t v13 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v12);
  uint64_t v14 = __REAssetService.asset(_:)(v8, v9, v12, v13);
  *(void *)(v0 + 176) = v14;
  char v15 = swift_bridgeObjectRelease();
  if (v14)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v18 = MEMORY[0x263F8EE78];
    *(void *)(v0 + 184) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 192) = specialized Dictionary.init(dictionaryLiteral:)(v18);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 200) = specialized Dictionary.init(dictionaryLiteral:)(v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    *(void *)(v0 + 208) = type metadata accessor for __MaterialResource();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v0 + 216) = specialized static __ServiceLocator.shared.getter();
    swift_retain();
    char v15 = (uint64_t)specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
    unint64_t v16 = 0;
    unint64_t v17 = 0;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x270FA2498](v15, v16, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9[3];
  char v10;
  __int16 v11;
  char v12;
  char v13;
  long long v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  unint64_t v17 = v0;
  uint64_t v1 = *(void *)(v0 + 216);
  unint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(_WORD *)(v0 + 242);
  v9[0] = *(void *)(v0 + 176);
  v9[1] = v3;
  v9[2] = 0;
  uint64_t v10 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 2;
  uint64_t v13 = v4;
  uint64_t v14 = *(_OWORD *)(v0 + 184);
  uint64_t v5 = v1 + 120;
  char v15 = v2;
  unint64_t v16 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, v0 + 96);
  uint64_t v6 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)(v9, (void *)(v0 + 96));
  *(void *)(v0 + 224) = v6;
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return static __MaterialResource.load(_:)(v0 + 56, v6);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 160);
  RERelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), v1, 0);
}

{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  uint64_t v1 = *(_DWORD *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 80);
  unint64_t v2 = *(void *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v3);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v3, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_retain();
  uint64_t v5 = specialized SharedCacheStorage.addResource(value:forKey:)(v4, v1);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v6(v5);
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(__int16 a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)(v4 + 184) = a4;
  *(_DWORD *)(v4 + 180) = a3;
  *(_WORD *)(v4 + 264) = a1;
  *(_WORD *)(v4 + 160) = a1;
  *(void *)(v4 + 168) = a2;
  *(unsigned char *)(v4 + 176) = a3 & 1;
  *(unsigned char *)(v4 + 177) = BYTE1(a3);
  *(unsigned char *)(v4 + 178) = BYTE2(a3);
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), a4, 0);
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(int a1, uint64_t a2)
{
  *(void *)(v2 + 160) = a2;
  *(_DWORD *)(v2 + 240) = a1;
  return MEMORY[0x270FA2498](specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), a2, 0);
}

uint64_t sub_227EDDA64()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227EDDA9C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_227EDDBFC()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

void outlined copy of CustomMaterial.GeometryModifier?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    id v5 = a5;
  }
}

void outlined consume of CustomMaterial.GeometryModifier?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
}

uint64_t lazy protocol witness table accessor for type ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters> and conformance ShaderCacheLoader<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_227EDDE50()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 72))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 120))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 160, 7);
}

uint64_t areJointDefinitionsEqual(_:_:)(void *a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t DynamicType = swift_getDynamicType();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  if (DynamicType != swift_getDynamicType()) {
    return 0;
  }
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 16))(v110, v5, v6);
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v100, v7, v8);
  BOOL v9 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v110, (uint64_t)&v100);
  outlined destroy of GeometricPin((uint64_t)&v100);
  outlined destroy of GeometricPin((uint64_t)v110);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v123);
  outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v120);
  if (!v9)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v117);
    outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v114);
    goto LABEL_9;
  }
  uint64_t v10 = v124;
  uint64_t v11 = v125;
  __swift_project_boxed_opaque_existential_1(v123, v124);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 40))(v110, v10, v11);
  uint64_t v12 = v121;
  uint64_t v13 = v122;
  __swift_project_boxed_opaque_existential_1(v120, v121);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v100, v12, v13);
  BOOL v14 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v110, (uint64_t)&v100);
  outlined destroy of GeometricPin((uint64_t)&v100);
  outlined destroy of GeometricPin((uint64_t)v110);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v117);
  outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v114);
  if (!v14)
  {
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
    return 0;
  }
  uint64_t v15 = v118;
  uint64_t v16 = v119;
  __swift_project_boxed_opaque_existential_1(v117, v118);
  LOBYTE(v15) = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 64))(v15, v16);
  uint64_t v17 = v115;
  uint64_t v18 = v116;
  __swift_project_boxed_opaque_existential_1(v114, v115);
  char v19 = v15 ^ (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
  if (v19) {
    return 0;
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v100);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  if (swift_dynamicCast())
  {
    outlined destroy of PhysicsFixedJoint((uint64_t)v110);
    outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v113);
    outlined init with take of BindableDataInternal(v113, (uint64_t)&v100);
    if (swift_dynamicCast())
    {
      outlined destroy of PhysicsFixedJoint((uint64_t)v110);
      return 1;
    }
  }
  else
  {
    outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v113);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v87);
  if ((swift_dynamicCast() & 1) == 0)
  {
    memset(v109, 0, 29);
    long long v108 = 0u;
    long long v107 = 0u;
    long long v106 = 0u;
    long long v105 = 0u;
    long long v104 = 0u;
    long long v103 = 0u;
    long long v102 = 0u;
    long long v101 = 0u;
    long long v100 = 0u;
    uint64_t v22 = &v100;
    goto LABEL_19;
  }
  outlined init with take of PhysicsSphericalJoint((uint64_t)&v100, (uint64_t)v110);
  outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v83);
  if ((swift_dynamicCast() & 1) == 0)
  {
    memset(v96, 0, 29);
    long long v95 = 0u;
    long long v94 = 0u;
    long long v93 = 0u;
    long long v92 = 0u;
    long long v91 = 0u;
    long long v90 = 0u;
    long long v89 = 0u;
    long long v88 = 0u;
    long long v87 = 0u;
    outlined destroy of PhysicsSphericalJoint((uint64_t)v110);
    uint64_t v22 = &v87;
LABEL_19:
    outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for PhysicsSphericalJoint?);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v87);
    if (swift_dynamicCast())
    {
      outlined init with take of PhysicsRevoluteJoint((uint64_t)&v100, (uint64_t)v110);
      outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v83);
      if (swift_dynamicCast())
      {
        outlined init with take of PhysicsRevoluteJoint((uint64_t)&v87, (uint64_t)&v100);
        uint64_t v20 = (v112 & BYTE12(v109[1]));
        if ((v112 & 1) == 0 && (BYTE12(v109[1]) & 1) == 0) {
          uint64_t v20 = *((float *)&v111 + 1) == *((float *)&v109[1] + 2) && *(float *)&v111 == *((float *)&v109[1] + 1);
        }
        outlined destroy of PhysicsRevoluteJoint((uint64_t)&v100);
        outlined destroy of PhysicsRevoluteJoint((uint64_t)v110);
        return v20;
      }
      memset(v96, 0, 29);
      long long v95 = 0u;
      long long v94 = 0u;
      long long v93 = 0u;
      long long v92 = 0u;
      long long v91 = 0u;
      long long v90 = 0u;
      long long v89 = 0u;
      long long v88 = 0u;
      long long v87 = 0u;
      outlined destroy of PhysicsRevoluteJoint((uint64_t)v110);
      unint64_t v23 = &v87;
    }
    else
    {
      memset(v109, 0, 29);
      long long v108 = 0u;
      long long v107 = 0u;
      long long v106 = 0u;
      long long v105 = 0u;
      long long v104 = 0u;
      long long v103 = 0u;
      long long v102 = 0u;
      long long v101 = 0u;
      long long v100 = 0u;
      unint64_t v23 = &v100;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v23, &demangling cache variable for type metadata for PhysicsRevoluteJoint?);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v87);
    if (swift_dynamicCast())
    {
      outlined init with take of PhysicsPrismaticJoint((uint64_t)&v100, (uint64_t)v110);
      outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v83);
      if (swift_dynamicCast())
      {
        outlined init with take of PhysicsPrismaticJoint((uint64_t)&v87, (uint64_t)&v100);
        uint64_t v20 = (v112 & BYTE12(v109[1]));
        if ((v112 & 1) == 0 && (BYTE12(v109[1]) & 1) == 0) {
          uint64_t v20 = *((float *)&v111 + 1) == *((float *)&v109[1] + 2) && *(float *)&v111 == *((float *)&v109[1] + 1);
        }
        outlined destroy of PhysicsPrismaticJoint((uint64_t)&v100);
        outlined destroy of PhysicsPrismaticJoint((uint64_t)v110);
        return v20;
      }
      memset(v96, 0, 29);
      long long v95 = 0u;
      long long v94 = 0u;
      long long v93 = 0u;
      long long v92 = 0u;
      long long v91 = 0u;
      long long v90 = 0u;
      long long v89 = 0u;
      long long v88 = 0u;
      long long v87 = 0u;
      outlined destroy of PhysicsPrismaticJoint((uint64_t)v110);
      unint64_t v24 = &v87;
    }
    else
    {
      memset(v109, 0, 29);
      long long v108 = 0u;
      long long v107 = 0u;
      long long v106 = 0u;
      long long v105 = 0u;
      long long v104 = 0u;
      long long v103 = 0u;
      long long v102 = 0u;
      long long v101 = 0u;
      long long v100 = 0u;
      unint64_t v24 = &v100;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for PhysicsPrismaticJoint?);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v87);
    if (swift_dynamicCast())
    {
      outlined init with take of PhysicsDistanceJoint((uint64_t)&v100, (uint64_t)v110);
      outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v83);
      if (swift_dynamicCast())
      {
        outlined init with take of PhysicsDistanceJoint((uint64_t)&v87, (uint64_t)&v100);
        uint64_t v25 = v111;
        uint64_t v26 = *(void *)((char *)&v109[1] + 4);
        outlined init with take of PhysicsDistanceJoint((uint64_t)v110, (uint64_t)&v87);
        outlined init with take of PhysicsDistanceJoint((uint64_t)&v100, (uint64_t)v83);
        if (*(float *)&v25 == *(float *)&v26 && *((float *)&v25 + 1) == *((float *)&v26 + 1))
        {
          float v27 = *((float *)&v96[1] + 3);
          outlined destroy of PhysicsDistanceJoint((uint64_t)&v87);
          float v28 = v84;
          outlined destroy of PhysicsDistanceJoint((uint64_t)v83);
          return v27 == v28;
        }
        outlined destroy of PhysicsDistanceJoint((uint64_t)v83);
        outlined destroy of PhysicsDistanceJoint((uint64_t)&v87);
        return 0;
      }
      memset(v96, 0, sizeof(v96));
      long long v95 = 0u;
      long long v94 = 0u;
      long long v93 = 0u;
      long long v92 = 0u;
      long long v91 = 0u;
      long long v90 = 0u;
      long long v89 = 0u;
      long long v88 = 0u;
      long long v87 = 0u;
      outlined destroy of PhysicsDistanceJoint((uint64_t)v110);
      uint64_t v29 = &v87;
    }
    else
    {
      memset(v109, 0, 32);
      long long v108 = 0u;
      long long v107 = 0u;
      long long v106 = 0u;
      long long v105 = 0u;
      long long v104 = 0u;
      long long v103 = 0u;
      long long v102 = 0u;
      long long v101 = 0u;
      long long v100 = 0u;
      uint64_t v29 = &v100;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v29, &demangling cache variable for type metadata for PhysicsDistanceJoint?);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v87);
    if (swift_dynamicCast())
    {
      outlined init with take of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v110);
      outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v83);
      if (swift_dynamicCast())
      {
        outlined init with take of PhysicsCustomJoint((uint64_t)&v87, (uint64_t)&v100);
        if (v112 == 1)
        {
          if (v111)
          {
            if (*(void *)((char *)&v109[1] + 4)) {
              char v30 = BYTE12(v109[1]);
            }
            else {
              char v30 = 0;
            }
            if ((v30 & 1) == 0) {
              goto LABEL_79;
            }
          }
          else
          {
            if (*(void *)((char *)&v109[1] + 4)) {
              char v36 = 0;
            }
            else {
              char v36 = BYTE12(v109[1]);
            }
            if ((v36 & 1) == 0) {
              goto LABEL_79;
            }
          }
        }
        else if ((BYTE12(v109[1]) & 1) != 0 {
               || *(float *)&v111 != *((float *)&v109[1] + 1)
        }
               || *((float *)&v111 + 1) != *((float *)&v109[1] + 2))
        {
LABEL_79:
          outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)&v87);
          outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v83);
          outlined destroy of PhysicsCustomJoint((uint64_t)v83);
          outlined destroy of PhysicsCustomJoint((uint64_t)&v87);
LABEL_80:
          outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v80);
          outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v77);
          outlined destroy of PhysicsCustomJoint((uint64_t)v77);
          outlined destroy of PhysicsCustomJoint((uint64_t)v80);
LABEL_81:
          outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v74);
          outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v71);
          outlined destroy of PhysicsCustomJoint((uint64_t)v71);
          outlined destroy of PhysicsCustomJoint((uint64_t)v74);
LABEL_82:
          outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v68);
          outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v65);
          outlined destroy of PhysicsCustomJoint((uint64_t)v65);
          outlined destroy of PhysicsCustomJoint((uint64_t)v68);
LABEL_83:
          outlined init with take of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v62);
          outlined init with take of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v60);
          outlined destroy of PhysicsCustomJoint((uint64_t)v60);
          outlined destroy of PhysicsCustomJoint((uint64_t)v62);
          return 0;
        }
        outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)&v87);
        outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v83);
        uint64_t v31 = v97;
        int v32 = BYTE8(v97);
        outlined destroy of PhysicsCustomJoint((uint64_t)&v87);
        uint64_t v33 = v85;
        char v34 = v86;
        outlined destroy of PhysicsCustomJoint((uint64_t)v83);
        if (v32 == 1)
        {
          if (v31)
          {
            if (v33) {
              char v35 = v34;
            }
            else {
              char v35 = 0;
            }
            if ((v35 & 1) == 0) {
              goto LABEL_80;
            }
          }
          else
          {
            if (v33) {
              char v37 = 0;
            }
            else {
              char v37 = v34;
            }
            if ((v37 & 1) == 0) {
              goto LABEL_80;
            }
          }
        }
        else if ((v34 & 1) != 0 || *(float *)&v31 != *(float *)&v33 || *((float *)&v31 + 1) != *((float *)&v33 + 1))
        {
          goto LABEL_80;
        }
        outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v80);
        outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v77);
        uint64_t v38 = v81;
        int v39 = v82;
        outlined destroy of PhysicsCustomJoint((uint64_t)v80);
        uint64_t v40 = v78;
        char v41 = v79;
        outlined destroy of PhysicsCustomJoint((uint64_t)v77);
        if (v39 == 1)
        {
          if (v38)
          {
            if (v40) {
              char v42 = v41;
            }
            else {
              char v42 = 0;
            }
            if ((v42 & 1) == 0) {
              goto LABEL_81;
            }
          }
          else
          {
            if (v40) {
              char v43 = 0;
            }
            else {
              char v43 = v41;
            }
            if ((v43 & 1) == 0) {
              goto LABEL_81;
            }
          }
        }
        else if ((v41 & 1) != 0 || *(float *)&v38 != *(float *)&v40 || *((float *)&v38 + 1) != *((float *)&v40 + 1))
        {
          goto LABEL_81;
        }
        outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v74);
        outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v71);
        uint64_t v44 = v75;
        int v45 = v76;
        outlined destroy of PhysicsCustomJoint((uint64_t)v74);
        uint64_t v46 = v72;
        char v47 = v73;
        outlined destroy of PhysicsCustomJoint((uint64_t)v71);
        if (v45 == 1)
        {
          if (v44)
          {
            if (v46) {
              char v48 = v47;
            }
            else {
              char v48 = 0;
            }
            if ((v48 & 1) == 0) {
              goto LABEL_82;
            }
          }
          else
          {
            if (v46) {
              char v49 = 0;
            }
            else {
              char v49 = v47;
            }
            if ((v49 & 1) == 0) {
              goto LABEL_82;
            }
          }
        }
        else if ((v47 & 1) != 0 || *(float *)&v44 != *(float *)&v46 || *((float *)&v44 + 1) != *((float *)&v46 + 1))
        {
          goto LABEL_82;
        }
        outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v68);
        outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v65);
        uint64_t v50 = v69;
        int v51 = v70;
        outlined destroy of PhysicsCustomJoint((uint64_t)v68);
        uint64_t v52 = v66;
        char v53 = v67;
        outlined destroy of PhysicsCustomJoint((uint64_t)v65);
        if (v51 == 1)
        {
          if (v50)
          {
            if (v52) {
              char v54 = v53;
            }
            else {
              char v54 = 0;
            }
            if ((v54 & 1) == 0) {
              goto LABEL_83;
            }
          }
          else
          {
            if (v52) {
              char v55 = 0;
            }
            else {
              char v55 = v53;
            }
            if ((v55 & 1) == 0) {
              goto LABEL_83;
            }
          }
        }
        else if ((v53 & 1) != 0 || *(float *)&v50 != *(float *)&v52 || *((float *)&v50 + 1) != *((float *)&v52 + 1))
        {
          goto LABEL_83;
        }
        outlined init with take of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v62);
        outlined init with take of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v60);
        uint64_t v56 = v63;
        int v57 = v64;
        outlined destroy of PhysicsCustomJoint((uint64_t)v62);
        uint64_t v58 = v60[28];
        unsigned int v59 = v61;
        outlined destroy of PhysicsCustomJoint((uint64_t)v60);
        if (v57 == 1)
        {
          if (v56)
          {
            if (v58) {
              return v59;
            }
            else {
              return 0;
            }
          }
          else if (v58)
          {
            return 0;
          }
          else
          {
            return v59;
          }
        }
        if ((v59 & 1) == 0) {
          return *((float *)&v56 + 1) == *((float *)&v58 + 1) && *(float *)&v56 == *(float *)&v58;
        }
      }
      else
      {
        memset(v99, 0, sizeof(v99));
        long long v98 = 0u;
        long long v97 = 0u;
        memset(v96, 0, sizeof(v96));
        long long v95 = 0u;
        long long v94 = 0u;
        long long v93 = 0u;
        long long v92 = 0u;
        long long v91 = 0u;
        long long v90 = 0u;
        long long v89 = 0u;
        long long v88 = 0u;
        long long v87 = 0u;
        outlined destroy of PhysicsCustomJoint((uint64_t)v110);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v87, &demangling cache variable for type metadata for PhysicsCustomJoint?);
      }
    }
    else
    {
      memset(v109, 0, 89);
      long long v108 = 0u;
      long long v107 = 0u;
      long long v106 = 0u;
      long long v105 = 0u;
      long long v104 = 0u;
      long long v103 = 0u;
      long long v102 = 0u;
      long long v101 = 0u;
      long long v100 = 0u;
      outlined destroy of BodyTrackingComponent?((uint64_t)&v100, &demangling cache variable for type metadata for PhysicsCustomJoint?);
    }
    return 0;
  }
  outlined init with take of PhysicsSphericalJoint((uint64_t)&v87, (uint64_t)&v100);
  if (v112)
  {
    outlined destroy of PhysicsSphericalJoint((uint64_t)v110);
    outlined init with take of PhysicsSphericalJoint((uint64_t)&v100, (uint64_t)&v87);
    uint64_t v20 = BYTE12(v96[1]);
LABEL_47:
    outlined destroy of PhysicsSphericalJoint((uint64_t)&v87);
    return v20;
  }
  if (BYTE12(v109[1]))
  {
    outlined destroy of PhysicsSphericalJoint((uint64_t)v110);
    outlined init with take of PhysicsSphericalJoint((uint64_t)&v100, (uint64_t)&v87);
    uint64_t v20 = 0;
    goto LABEL_47;
  }
  uint64_t v20 = *((float *)&v111 + 1) == *((float *)&v109[1] + 2) && *(float *)&v111 == *((float *)&v109[1] + 1);
  outlined destroy of PhysicsSphericalJoint((uint64_t)&v100);
  outlined destroy of PhysicsSphericalJoint((uint64_t)v110);
  return v20;
}

uint64_t static PhysicsJointCreator.createJointDefinition(fromCoreJointDefinition:isActive:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t Entity = REPhysicsJointDefinitionGetEntity();
  if (!Entity || (v5 = Entity, (uint64_t v6 = REPhysicsJointDefinitionGetEntity()) == 0))
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(unsigned char *)(v8 + 32) = 4;
    return swift_willThrow();
  }
  uint64_t v7 = v6;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    if (REEntityIsBeingDestroyed())
    {
      __break(1u);
      goto LABEL_79;
    }
    uint64_t v10 = specialized static Entity.entityInfoType(_:)();
    if (v10)
    {
      uint64_t v11 = (*(uint64_t (**)(void))(v10 + 232))();
      uint64_t v12 = *(void *)(v11 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v12, 0);
      *(void *)(v11 + 16) = v5;
      MEMORY[0x22A68E750](v5, v11);
      swift_release();
    }
    else
    {
      makeEntity(for:)(v5);
    }
  }
  uint64_t v108 = a2;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_14;
  }
  if (REEntityIsBeingDestroyed())
  {
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    JUMPOUT(0x227EDF804);
  }
  uint64_t v13 = specialized static Entity.entityInfoType(_:)();
  if (v13)
  {
    uint64_t v14 = (*(uint64_t (**)(void))(v13 + 232))();
    uint64_t v15 = *(void *)(v14 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v15, 0);
    *(void *)(v14 + 16) = v7;
    MEMORY[0x22A68E750](v7, v14);
    swift_release();
  }
  else
  {
    makeEntity(for:)(v7);
  }
LABEL_14:
  REPhysicsJointDefinitionGetPinName();
  uint64_t v16 = String.init(cString:)();
  uint64_t v18 = v17;
  REPhysicsJointDefinitionGetPinName();
  uint64_t v19 = String.init(cString:)();
  uint64_t v21 = v20;
  REPhysicsJointDefinitionGetOffsetFromPin();
  long long v68 = v23;
  long long v71 = v22;
  REPhysicsJointDefinitionGetOffsetFromPin();
  long long v74 = v25;
  long long v77 = v24;
  swift_weakInit();
  long long v89 = v71;
  long long v90 = v68;
  swift_weakAssign();
  uint64_t v85 = v16;
  uint64_t v86 = v18;
  swift_bridgeObjectRelease();
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  outlined init with take of GeometricPin((uint64_t)v84, (uint64_t)v107);
  swift_weakInit();
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  long long v89 = v77;
  long long v90 = v74;
  swift_weakAssign();
  uint64_t v85 = v19;
  uint64_t v86 = v21;
  swift_bridgeObjectRelease();
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  outlined init with take of GeometricPin((uint64_t)v84, (uint64_t)v106);
  char ChecksForCollisions = REPhysicsJointDefinitionGetChecksForCollisions();
  switch(REPhysicsJointDefinitionGetJointType())
  {
    case 1u:
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      char v92 = 0;
      char v93 = a1 & 1;
      unsigned __int8 v82 = &type metadata for PhysicsFixedJoint;
      unint64_t v83 = lazy protocol witness table accessor for type PhysicsFixedJoint and conformance PhysicsFixedJoint();
      *(void *)&long long v81 = swift_allocObject();
      outlined init with take of PhysicsFixedJoint((uint64_t)v84, v81 + 16);
      goto LABEL_76;
    case 2u:
      REPhysicsJointDefinitionSphericalJointGetAngularLimitYZ();
      if (*(float *)&v28 <= 0.0 || *((float *)&v28 + 1) <= 0.0)
      {
        unint64_t v30 = 0;
        char v29 = 1;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = v28;
      }
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      unint64_t v94 = v30;
      LOBYTE(v95) = v29;
      char v92 = ChecksForCollisions;
      char v93 = a1 & 1;
      unsigned __int8 v82 = &type metadata for PhysicsSphericalJoint;
      unint64_t v83 = lazy protocol witness table accessor for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint();
      *(void *)&long long v81 = swift_allocObject();
      outlined init with take of PhysicsSphericalJoint((uint64_t)v84, v81 + 16);
      goto LABEL_76;
    case 3u:
      REPhysicsJointDefinitionRevoluteJointGetAngularLimitX();
      BOOL v32 = *(float *)&v31 > *((float *)&v31 + 1);
      if (*(float *)&v31 <= *((float *)&v31 + 1)) {
        unint64_t v33 = v31;
      }
      else {
        unint64_t v33 = 0;
      }
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      unint64_t v94 = v33;
      LOBYTE(v95) = v32;
      char v92 = ChecksForCollisions;
      char v93 = a1 & 1;
      unsigned __int8 v82 = &type metadata for PhysicsRevoluteJoint;
      unint64_t v83 = lazy protocol witness table accessor for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint();
      *(void *)&long long v81 = swift_allocObject();
      outlined init with take of PhysicsRevoluteJoint((uint64_t)v84, v81 + 16);
      goto LABEL_76;
    case 4u:
      REPhysicsJointDefinitionPrismaticJointGetLinearLimitX();
      BOOL v35 = *(float *)&v34 > *((float *)&v34 + 1);
      if (*(float *)&v34 <= *((float *)&v34 + 1)) {
        unint64_t v36 = v34;
      }
      else {
        unint64_t v36 = 0;
      }
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      unint64_t v94 = v36;
      LOBYTE(v95) = v35;
      char v92 = ChecksForCollisions;
      char v93 = a1 & 1;
      unsigned __int8 v82 = &type metadata for PhysicsPrismaticJoint;
      unint64_t v83 = lazy protocol witness table accessor for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint();
      *(void *)&long long v81 = swift_allocObject();
      outlined init with take of PhysicsPrismaticJoint((uint64_t)v84, v81 + 16);
      goto LABEL_76;
    case 5u:
      REPhysicsJointDefinitionDistanceJointGetDistanceLimit();
      float32x2_t v78 = v37;
      if (vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32((int32x2_t)v37, 1), v37)).u8[0]) {
        goto LABEL_80;
      }
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      unint64_t v94 = (unint64_t)v78;
      char v92 = ChecksForCollisions;
      REPhysicsJointDefinitionDistanceJointGetTolerance();
      int v95 = v38;
      char v93 = a1 & 1;
      unsigned __int8 v82 = &type metadata for PhysicsDistanceJoint;
      unint64_t v83 = lazy protocol witness table accessor for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint();
      *(void *)&long long v81 = swift_allocObject();
      outlined init with take of PhysicsDistanceJoint((uint64_t)v84, v81 + 16);
      goto LABEL_76;
    case 6u:
      REPhysicsJointDefinitionGetLinearLimit();
      uint64_t v66 = v39;
      char v40 = 1;
      REPhysicsJointDefinitionGetLinearLimit();
      uint64_t v69 = v41;
      REPhysicsJointDefinitionGetLinearLimit();
      uint64_t v72 = v42;
      REPhysicsJointDefinitionGetAngularLimit();
      uint64_t v75 = v43;
      REPhysicsJointDefinitionGetAngularLimit();
      uint64_t v79 = v44;
      REPhysicsJointDefinitionGetAngularLimit();
      if (*(float *)&v66 == 0.0 && *((float *)&v66 + 1) == 0.0)
      {
        unint64_t v46 = 0;
        uint64_t v48 = v75;
        uint64_t v47 = v79;
        uint64_t v50 = v69;
        uint64_t v49 = v72;
      }
      else
      {
        uint64_t v48 = v75;
        uint64_t v47 = v79;
        uint64_t v50 = v69;
        uint64_t v49 = v72;
        if (*((float *)&v66 + 1) >= *(float *)&v66)
        {
          char v40 = 0;
          unint64_t v46 = v66 | ((unint64_t)HIDWORD(v66) << 32);
        }
        else
        {
          unint64_t v46 = 1;
        }
      }
      if (*(float *)&v50 == 0.0 && *((float *)&v50 + 1) == 0.0)
      {
        uint64_t v51 = 0;
LABEL_45:
        char v52 = 1;
        goto LABEL_47;
      }
      if (*((float *)&v50 + 1) < *(float *)&v50)
      {
        uint64_t v51 = 1;
        goto LABEL_45;
      }
      char v52 = 0;
      uint64_t v51 = v50;
LABEL_47:
      if (*(float *)&v49 == 0.0 && *((float *)&v49 + 1) == 0.0)
      {
        uint64_t v53 = 0;
LABEL_52:
        char v54 = 1;
        goto LABEL_54;
      }
      if (*((float *)&v49 + 1) < *(float *)&v49)
      {
        uint64_t v53 = 1;
        goto LABEL_52;
      }
      char v54 = 0;
      uint64_t v53 = v49;
LABEL_54:
      if (*(float *)&v48 == 0.0 && *((float *)&v48 + 1) == 0.0)
      {
        uint64_t v55 = 0;
LABEL_59:
        char v56 = 1;
        goto LABEL_61;
      }
      if (*((float *)&v48 + 1) < *(float *)&v48)
      {
        uint64_t v55 = 1;
        goto LABEL_59;
      }
      char v56 = 0;
      uint64_t v55 = v48;
LABEL_61:
      if (*(float *)&v47 == 0.0 && *((float *)&v47 + 1) == 0.0)
      {
        uint64_t v57 = 0;
LABEL_66:
        char v58 = 1;
        goto LABEL_68;
      }
      if (*((float *)&v47 + 1) < *(float *)&v47)
      {
        uint64_t v57 = 1;
        goto LABEL_66;
      }
      char v58 = 0;
      uint64_t v57 = v47;
LABEL_68:
      char v64 = a1;
      char v65 = ChecksForCollisions;
      char v80 = v54;
      uint64_t v76 = v53;
      char v73 = v56;
      uint64_t v70 = v55;
      char v67 = v58;
      uint64_t v63 = v57;
      if (*(float *)&v45 == 0.0 && *((float *)&v45 + 1) == 0.0)
      {
        uint64_t v59 = v51;
        unint64_t v60 = v46;
        uint64_t v61 = 0;
LABEL_73:
        char v62 = 1;
        goto LABEL_75;
      }
      if (*((float *)&v45 + 1) < *(float *)&v45)
      {
        uint64_t v59 = v51;
        unint64_t v60 = v46;
        uint64_t v61 = 1;
        goto LABEL_73;
      }
      uint64_t v59 = v51;
      unint64_t v60 = v46;
      char v62 = 0;
      uint64_t v61 = v45;
LABEL_75:
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      unint64_t v94 = v60;
      LOBYTE(v95) = v40;
      uint64_t v96 = v59;
      char v97 = v52;
      uint64_t v98 = v76;
      char v99 = v80;
      uint64_t v100 = v70;
      char v101 = v73;
      uint64_t v102 = v63;
      char v103 = v67;
      uint64_t v104 = v61;
      char v105 = v62;
      char v92 = v65;
      char v93 = v64 & 1;
      unsigned __int8 v82 = &type metadata for PhysicsCustomJoint;
      unint64_t v83 = lazy protocol witness table accessor for type PhysicsCustomJoint and conformance PhysicsCustomJoint();
      *(void *)&long long v81 = swift_allocObject();
      outlined init with take of PhysicsCustomJoint((uint64_t)v84, v81 + 16);
LABEL_76:
      swift_release();
      swift_release();
      outlined destroy of GeometricPin((uint64_t)v106);
      outlined destroy of GeometricPin((uint64_t)v107);
      uint64_t result = outlined init with take of BindableDataInternal(&v81, v108);
      break;
    default:
      lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
      swift_allocError();
      *(void *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = 0;
      *(void *)(v27 + 16) = 0;
      *(void *)(v27 + 24) = 0;
      *(unsigned char *)(v27 + 32) = 4;
      swift_willThrow();
      swift_release();
      swift_release();
      outlined destroy of GeometricPin((uint64_t)v106);
      return outlined destroy of GeometricPin((uint64_t)v107);
  }
  return result;
}

uint64_t specialized static PhysicsJointCreator.createCoreJointDefinition(fromDefinition:jointsComponentEntity:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 16))(&v42, v2, v3);
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of GeometricPin((uint64_t)&v42);
  if (!Strong
    || (swift_release(),
        uint64_t v5 = a1[3],
        uint64_t v6 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v5),
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(&v42, v5, v6),
        uint64_t Strong = swift_weakLoadStrong(),
        outlined destroy of GeometricPin((uint64_t)&v42),
        !Strong))
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    uint64_t v18 = v17 + 2;
    *uint64_t v17 = 0u;
    v17[1] = 0u;
LABEL_6:
    *uint64_t v18 = 4;
    swift_willThrow();
    return Strong;
  }
  swift_release();
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v42, v7, v8);
  swift_bridgeObjectRetain();
  outlined destroy of GeometricPin((uint64_t)&v42);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 40))(&v42, v9, v10);
  swift_bridgeObjectRetain();
  outlined destroy of GeometricPin((uint64_t)&v42);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 16))(&v42, v11, v12);
  outlined destroy of GeometricPin((uint64_t)&v42);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 40))(&v42, v13, v14);
  outlined destroy of GeometricPin((uint64_t)&v42);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  (*(void (**)(uint64_t, uint64_t))(v16 + 64))(v15, v16);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v32);
  uint64_t Strong = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  if (swift_dynamicCast())
  {
    outlined destroy of PhysicsFixedJoint((uint64_t)&v42);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t Strong = REPhysicsJointDefinitionCreateFixedJoint();
LABEL_21:
    swift_release();
    swift_release();
    return Strong;
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v52);
  if (swift_dynamicCast())
  {
    outlined init with take of PhysicsSphericalJoint((uint64_t)&v32, (uint64_t)&v42);
    __asm { FMOV            V8.2S, #-1.0 }
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t Strong = REPhysicsJointDefinitionCreateSphericalJoint();
    outlined destroy of PhysicsSphericalJoint((uint64_t)&v42);
    goto LABEL_21;
  }
  long long v40 = 0u;
  memset(v41, 0, 29);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v32, &demangling cache variable for type metadata for PhysicsSphericalJoint?);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v52);
  if (swift_dynamicCast())
  {
    outlined init with take of PhysicsRevoluteJoint((uint64_t)&v32, (uint64_t)&v42);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t Strong = REPhysicsJointDefinitionCreateRevoluteJoint();
    outlined destroy of PhysicsRevoluteJoint((uint64_t)&v42);
    goto LABEL_21;
  }
  long long v40 = 0u;
  memset(v41, 0, 29);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v32, &demangling cache variable for type metadata for PhysicsRevoluteJoint?);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v52);
  if (swift_dynamicCast())
  {
    outlined init with take of PhysicsPrismaticJoint((uint64_t)&v32, (uint64_t)&v42);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t Strong = REPhysicsJointDefinitionCreatePrismaticJoint();
    outlined destroy of PhysicsPrismaticJoint((uint64_t)&v42);
    goto LABEL_21;
  }
  long long v40 = 0u;
  memset(v41, 0, 29);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v32, &demangling cache variable for type metadata for PhysicsPrismaticJoint?);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v52);
  if (swift_dynamicCast())
  {
    outlined init with take of PhysicsDistanceJoint((uint64_t)&v32, (uint64_t)&v42);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t Strong = REPhysicsJointDefinitionCreateDistanceJoint();
    outlined destroy of PhysicsDistanceJoint((uint64_t)&v42);
    goto LABEL_21;
  }
  memset(v41, 0, 32);
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v32 = 0u;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v32, &demangling cache variable for type metadata for PhysicsDistanceJoint?);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v52);
  if ((swift_dynamicCast() & 1) == 0)
  {
    long long v40 = 0u;
    memset(v41, 0, 89);
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v32, &demangling cache variable for type metadata for PhysicsCustomJoint?);
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *long long v25 = 1;
    v25[1] = 0;
    uint64_t v18 = v25 + 4;
    v25[2] = 0;
    v25[3] = 0;
    goto LABEL_6;
  }
  uint64_t result = outlined init with take of PhysicsCustomJoint((uint64_t)&v32, (uint64_t)&v42);
  if (v45 != 1)
  {
    float v26 = v43;
    if (v43 <= v44)
    {
      if (v43 >= -6.2832)
      {
        if (v43 <= 6.2832)
        {
          float v27 = -6.2832;
          if (v44 >= -6.2832)
          {
            float v27 = 6.2832;
            if (v44 <= 6.2832) {
              float v27 = v44;
            }
          }
        }
        else
        {
          if (v44 < -6.2832) {
            goto LABEL_67;
          }
          float v26 = 6.2832;
          float v27 = v44;
          if (v44 > 6.2832) {
            goto LABEL_36;
          }
        }
      }
      else
      {
        if (v44 < -6.2832) {
          goto LABEL_36;
        }
        float v27 = 6.2832;
        if (v44 <= 6.2832) {
          float v27 = v44;
        }
        float v26 = -6.2832;
      }
      if (v26 <= v27) {
        goto LABEL_36;
      }
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
  }
LABEL_36:
  if (v48 != 1)
  {
    float v28 = v46;
    if (v46 <= v47)
    {
      if (v46 >= -6.2832)
      {
        if (v46 <= 6.2832)
        {
          float v29 = -6.2832;
          if (v47 >= -6.2832)
          {
            float v29 = 6.2832;
            if (v47 <= 6.2832) {
              float v29 = v47;
            }
          }
        }
        else
        {
          if (v47 < -6.2832) {
            goto LABEL_68;
          }
          float v28 = 6.2832;
          float v29 = v47;
          if (v47 > 6.2832) {
            goto LABEL_51;
          }
        }
LABEL_50:
        if (v28 <= v29) {
          goto LABEL_51;
        }
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if (v47 >= -6.2832)
      {
        float v29 = 6.2832;
        if (v47 <= 6.2832) {
          float v29 = v47;
        }
        float v28 = -6.2832;
        goto LABEL_50;
      }
    }
  }
LABEL_51:
  if (v51 == 1) {
    goto LABEL_66;
  }
  float v30 = v49;
  if (v49 > v50) {
    goto LABEL_66;
  }
  if (v49 >= -6.2832)
  {
    if (v49 <= 6.2832)
    {
      float v31 = -6.2832;
      if (v50 >= -6.2832)
      {
        float v31 = 6.2832;
        if (v50 <= 6.2832) {
          float v31 = v50;
        }
      }
    }
    else
    {
      if (v50 < -6.2832) {
        goto LABEL_69;
      }
      float v30 = 6.2832;
      float v31 = v50;
      if (v50 > 6.2832) {
        goto LABEL_66;
      }
    }
  }
  else
  {
    if (v50 < -6.2832)
    {
LABEL_66:
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      uint64_t Strong = REPhysicsJointDefinitionCreateCustomJoint();
      outlined destroy of PhysicsCustomJoint((uint64_t)&v42);
      goto LABEL_21;
    }
    float v31 = 6.2832;
    if (v50 <= 6.2832) {
      float v31 = v50;
    }
    float v30 = -6.2832;
  }
  if (v30 <= v31) {
    goto LABEL_66;
  }
LABEL_69:
  __break(1u);
  return result;
}

uint64_t outlined destroy of GeometricPin(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicsJointError and conformance PhysicsJointError;
  if (!lazy protocol witness table cache variable for type PhysicsJointError and conformance PhysicsJointError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJointError and conformance PhysicsJointError);
  }
  return result;
}

uint64_t outlined init with take of PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PhysicsCustomJoint(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of PhysicsDistanceJoint(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PhysicsDistanceJoint(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of PhysicsPrismaticJoint(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PhysicsPrismaticJoint(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of PhysicsRevoluteJoint(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PhysicsRevoluteJoint(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PhysicsFixedJoint(uint64_t a1)
{
  return a1;
}

uint64_t sub_227EE09C4()
{
  return objectdestroyTm_0(249);
}

uint64_t sub_227EE0A20()
{
  return objectdestroyTm_0(192);
}

uint64_t sub_227EE0A7C()
{
  return objectdestroyTm_0(189);
}

uint64_t sub_227EE0AD8()
{
  return objectdestroyTm_0(189);
}

uint64_t sub_227EE0B34()
{
  return objectdestroyTm_0(189);
}

uint64_t sub_227EE0B90()
{
  return objectdestroyTm_0(178);
}

uint64_t objectdestroyTm_0(uint64_t a1)
{
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v1, a1, 15);
}

uint64_t outlined init with take of PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized static PhysicsJointCreator.findNearestOrAddPhysicsJointsComponent(for:)(uint64_t a1)
{
  uint64_t v2 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
  swift_retain_n();
  uint64_t Component = REEntityGetComponent();
  swift_release();
  if (Component)
  {
    uint64_t v4 = a1;
LABEL_3:
    swift_release();
    return v4;
  }
  uint64_t v5 = a1;
  while (1)
  {
    if (v2 && *(void *)(v5 + 16) == *(void *)(v2 + 16)
      || (swift_retain(), uint64_t v8 = REEntityGetComponent(), swift_release(), v8))
    {
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(0, MEMORY[0x263F8EE78]);
      swift_release();
      swift_release();
      return v5;
    }
    uint64_t Parent = REEntityGetParent();
    if (!Parent)
    {
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(0, MEMORY[0x263F8EE78]);
      swift_release();
      swift_release();
      swift_release();
      swift_retain();
      return a1;
    }
    uint64_t v10 = Parent;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release();
      type metadata accessor for Entity();
      uint64_t v4 = swift_dynamicCastClassUnconditional();
      goto LABEL_7;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if (result) {
      break;
    }
    if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v11 & 1) == 0))
    {
      swift_endAccess();
      uint64_t v12 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v29 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypeObjectIdToHandles = v29;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    if (!REEntityGetCustomComponent()) {
      goto LABEL_40;
    }
    uint64_t Object = RECustomComponentGetObject();
    if (!Object) {
      goto LABEL_40;
    }
    uint64_t v15 = *(unsigned __int8 **)Object;
    if (*(void *)(Object + 8) || !v15)
    {
      uint64_t result = swift_retain();
    }
    else
    {
      int v16 = *v15;
      uint64_t v17 = String.init(utf8String:)();
      if (v18) {
        Swift::Int v19 = v17;
      }
      else {
        Swift::Int v19 = 0;
      }
      if (v18) {
        unint64_t v20 = v18;
      }
      else {
        unint64_t v20 = 0xE000000000000000;
      }
      uint64_t v15 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v16 == 42, v19, v20);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v15;
    }
    if (!v15) {
      goto LABEL_45;
    }
    swift_retain();
    uint64_t v21 = String.init(utf8String:)();
    unint64_t v23 = v22;
    swift_release();
    uint64_t v24 = v23 ? v21 : 0;
    if (!v23) {
      unint64_t v23 = 0xE000000000000000;
    }
    long long v25 = (NSString *)MEMORY[0x22A688A50](v24, v23);
    swift_bridgeObjectRelease();
    Class v26 = NSClassFromString(v25);

    swift_release();
    if (!v26) {
      goto LABEL_40;
    }
    swift_getObjCClassMetadata();
    type metadata accessor for Entity();
    uint64_t v27 = swift_dynamicCastMetatype();
    if (v27)
    {
      uint64_t v4 = (*(uint64_t (**)(void))(v27 + 232))();
      uint64_t v28 = *(void *)(v4 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v28, 0);
      *(void *)(v4 + 16) = v10;
      MEMORY[0x22A68E750](v10, v4);
      swift_release();
    }
    else
    {
LABEL_40:
      uint64_t v4 = makeEntity(for:)(v10);
    }
    swift_release();
LABEL_7:
    swift_retain();
    uint64_t v7 = REEntityGetComponent();
    swift_release();
    uint64_t v5 = v4;
    if (v7) {
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t specialized static PhysicsJointCreator.verifyData(_:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 16))(&v60, v2, v3);
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of GeometricPin((uint64_t)&v60);
  if (!Strong)
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(unsigned char *)(v16 + 32) = 4;
    return swift_willThrow();
  }
  swift_retain();
  if (!REEntityGetComponent())
  {
    swift_release();
    REEntityGetName();
    uint64_t v18 = String.init(cString:)();
    uint64_t v20 = v19;
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(void *)uint64_t v14 = v18;
    *(void *)(v14 + 8) = v20;
    *(void *)(v14 + 16) = 0;
    *(void *)(v14 + 24) = 0;
    char v15 = 1;
    goto LABEL_12;
  }
  PhysicsBodyComponent.init(_:)((uint64_t)&v60);
  swift_release();
  swift_release();
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 16))(&v60, v5, v6);
  GeometricPin.pose.getter((uint64_t)v69);
  outlined destroy of GeometricPin((uint64_t)&v60);
  outlined init with take of REPoseF?((uint64_t)v69, (uint64_t)v72);
  if (v72[32])
  {
    REEntityGetName();
    uint64_t v7 = String.init(cString:)();
    uint64_t v9 = v8;
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 16))(&v60, v10, v11);
    uint64_t v13 = v61;
    uint64_t v12 = v62;
    swift_bridgeObjectRetain();
    outlined destroy of GeometricPin((uint64_t)&v60);
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(void *)uint64_t v14 = v7;
    *(void *)(v14 + 8) = v9;
    *(void *)(v14 + 16) = v13;
    *(void *)(v14 + 24) = v12;
    char v15 = 3;
LABEL_12:
    *(unsigned char *)(v14 + 32) = v15;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v21 = a1[3];
  uint64_t v22 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v22 + 40))(&v60, v21, v22);
  uint64_t v23 = swift_weakLoadStrong();
  outlined destroy of GeometricPin((uint64_t)&v60);
  if (!v23)
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    char v15 = 4;
    goto LABEL_12;
  }
  swift_retain();
  if (!REEntityGetComponent())
  {
    swift_release();
    REEntityGetName();
    uint64_t v35 = String.init(cString:)();
    uint64_t v37 = v36;
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(void *)uint64_t v33 = v35;
    *(void *)(v33 + 8) = v37;
    *(void *)(v33 + 16) = 0;
    *(void *)(v33 + 24) = 0;
    char v34 = 1;
    goto LABEL_15;
  }
  PhysicsBodyComponent.init(_:)((uint64_t)&v60);
  swift_release();
  swift_release();
  uint64_t v24 = a1[3];
  uint64_t v25 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v25 + 40))(&v60, v24, v25);
  GeometricPin.pose.getter((uint64_t)v70);
  outlined destroy of GeometricPin((uint64_t)&v60);
  outlined init with take of REPoseF?((uint64_t)v70, (uint64_t)v71);
  if (v71[32])
  {
    REEntityGetName();
    uint64_t v26 = String.init(cString:)();
    uint64_t v28 = v27;
    uint64_t v29 = a1[3];
    uint64_t v30 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v29);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v30 + 40))(&v60, v29, v30);
    uint64_t v32 = v61;
    uint64_t v31 = v62;
    swift_bridgeObjectRetain();
    outlined destroy of GeometricPin((uint64_t)&v60);
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(void *)uint64_t v33 = v26;
    *(void *)(v33 + 8) = v28;
    *(void *)(v33 + 16) = v32;
    *(void *)(v33 + 24) = v31;
    char v34 = 3;
LABEL_15:
    *(unsigned char *)(v33 + 32) = v34;
LABEL_16:
    swift_willThrow();
    swift_release();
    return swift_release();
  }
  if (*(void *)(Strong + 16) == *(void *)(v23 + 16))
  {
    REEntityGetName();
    uint64_t v47 = String.init(cString:)();
    uint64_t v49 = v48;
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(void *)uint64_t v50 = v47;
    *(void *)(v50 + 8) = v49;
    *(void *)(v50 + 16) = 0;
    *(void *)(v50 + 24) = 0;
    *(unsigned char *)(v50 + 32) = 0;
    goto LABEL_16;
  }
  uint64_t v38 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
  uint64_t v39 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
  if (v38)
  {
    if (!v39)
    {
      swift_retain();
      REEntityGetName();
      uint64_t v55 = String.init(cString:)();
      uint64_t v57 = v56;
      lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
      swift_allocError();
      *(void *)uint64_t v58 = v55;
      *(void *)(v58 + 8) = v57;
      *(_OWORD *)(v58 + 16) = xmmword_2283286C0;
      *(unsigned char *)(v58 + 32) = 2;
      swift_willThrow();
      swift_release();
      goto LABEL_28;
    }
    if (*(void *)(v38 + 16) != *(void *)(v39 + 16))
    {
      swift_retain();
      REEntityGetName();
      uint64_t v40 = String.init(cString:)();
      uint64_t v42 = v41;
      REEntityGetName();
      uint64_t v43 = String.init(cString:)();
      uint64_t v45 = v44;
      lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
      swift_allocError();
      *(void *)uint64_t v46 = v40;
      *(void *)(v46 + 8) = v42;
      *(void *)(v46 + 16) = v43;
      *(void *)(v46 + 24) = v45;
      *(unsigned char *)(v46 + 32) = 2;
      swift_willThrow();
      swift_release();
      swift_release();
LABEL_28:
      swift_release();
      return swift_release_n();
    }
  }
  else if (v39)
  {
    REEntityGetName();
    uint64_t v51 = String.init(cString:)();
    uint64_t v53 = v52;
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_OWORD *)uint64_t v54 = xmmword_2283286C0;
    *(void *)(v54 + 16) = v51;
    *(void *)(v54 + 24) = v53;
    *(unsigned char *)(v54 + 32) = 2;
    swift_willThrow();
    swift_release();
    swift_release();
    return swift_release();
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v68);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  if (swift_dynamicCast())
  {
    outlined destroy of PhysicsFixedJoint((uint64_t)&v60);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v68);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
LABEL_31:
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v67);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
LABEL_32:
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v66);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
LABEL_33:
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v65);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
LABEL_34:
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v64);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v68);
  outlined init with take of BindableDataInternal(v68, (uint64_t)v67);
  if (swift_dynamicCast())
  {
    outlined destroy of PhysicsSphericalJoint((uint64_t)&v60);
    goto LABEL_31;
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v67);
  outlined init with take of BindableDataInternal(v67, (uint64_t)v66);
  if (swift_dynamicCast())
  {
    outlined destroy of PhysicsRevoluteJoint((uint64_t)&v60);
    goto LABEL_32;
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v66);
  outlined init with take of BindableDataInternal(v66, (uint64_t)v65);
  if (swift_dynamicCast())
  {
    outlined destroy of PhysicsPrismaticJoint((uint64_t)&v60);
    goto LABEL_33;
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v65);
  outlined init with take of BindableDataInternal(v65, (uint64_t)v64);
  if (swift_dynamicCast())
  {
    outlined destroy of PhysicsDistanceJoint((uint64_t)&v60);
    goto LABEL_34;
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v64);
  outlined init with take of BindableDataInternal(v64, (uint64_t)v63);
  if ((swift_dynamicCast() & 1) == 0)
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(void *)uint64_t v59 = 1;
    *(void *)(v59 + 8) = 0;
    *(void *)(v59 + 16) = 0;
    *(void *)(v59 + 24) = 0;
    *(unsigned char *)(v59 + 32) = 4;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return outlined destroy of PhysicsCustomJoint((uint64_t)&v60);
}

uint64_t specialized static PhysicsJointCreator.addToSimulation(_:)(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 16))(v9, v3, v4);
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of GeometricPin((uint64_t)v9);
  if (Strong)
  {
    uint64_t v3 = specialized static PhysicsJointCreator.findNearestOrAddPhysicsJointsComponent(for:)(Strong);
    specialized static PhysicsJointCreator.verifyData(_:)(a1);
    if (!v1)
    {
      specialized static PhysicsJointCreator.createCoreJointDefinition(fromDefinition:jointsComponentEntity:)(a1);
      REPhysicsJointsComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REPhysicsJointsComponentAddPhysicsJointDefinition();
        RERelease();
        swift_release();
        return v3;
      }
      lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
      swift_allocError();
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(unsigned char *)(v8 + 32) = 4;
      swift_willThrow();
    }
    swift_release();
    swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(unsigned char *)(v6 + 32) = 4;
    swift_willThrow();
  }
  return v3;
}

uint64_t outlined init with take of REPoseF?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for REPoseF?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of PhysicsJointError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 >= 2u)
  {
    if (a5 - 2 > 1) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for PhysicsJointError(uint64_t a1)
{
  return outlined consume of PhysicsJointError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t outlined consume of PhysicsJointError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 >= 2u)
  {
    if (a5 - 2 > 1) {
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhysicsJointError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of PhysicsJointError(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for PhysicsJointError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of PhysicsJointError(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of PhysicsJointError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for PhysicsJointError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of PhysicsJointError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsJointError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsJointError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PhysicsJointError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 3u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t destructiveInjectEnumTag for PhysicsJointError(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)uint64_t result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PhysicsJointError()
{
  return &type metadata for PhysicsJointError;
}

float EnvironmentLightingConfigurationComponent.environmentLightingWeight.getter()
{
  return *(float *)v0;
}

void EnvironmentLightingConfigurationComponent.environmentLightingWeight.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*EnvironmentLightingConfigurationComponent.environmentLightingWeight.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::EnvironmentLightingConfigurationComponent __swiftcall EnvironmentLightingConfigurationComponent.init(environmentLightingWeight:)(RealityFoundation::EnvironmentLightingConfigurationComponent environmentLightingWeight)
{
  v1->environmentLightingWeight = environmentLightingWeight.environmentLightingWeight;
  return environmentLightingWeight;
}

BOOL static EnvironmentLightingConfigurationComponent.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t static EnvironmentLightingConfigurationComponent.__fromCore(_:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEnvironmentLightingConfigurationComponentGetEnvironmentLightingWeight();
  *a1 = v3;
  return result;
}

uint64_t EnvironmentLightingConfigurationComponent.__toCore(_:)()
{
  REEnvironmentLightingConfigurationComponentSetEnvironmentLightingWeight();

  return RENetworkMarkComponentDirty();
}

void static EnvironmentLightingConfigurationComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5003;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance EnvironmentLightingConfigurationComponent@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEnvironmentLightingConfigurationComponentGetEnvironmentLightingWeight();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance EnvironmentLightingConfigurationComponent()
{
  REEnvironmentLightingConfigurationComponentSetEnvironmentLightingWeight();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance EnvironmentLightingConfigurationComponent(_DWORD *a1@<X8>)
{
  *a1 = 5003;
}

ValueMetadata *type metadata accessor for EnvironmentLightingConfigurationComponent()
{
  return &type metadata for EnvironmentLightingConfigurationComponent;
}

void one-time initialization function for playingControllers()
{
  static AudioPlaybackController.playingControllers = MEMORY[0x263F8EE80];
}

uint64_t AudioPlaybackController.entity.getter()
{
  return swift_weakLoadStrong();
}

uint64_t AudioPlaybackController.resource.getter()
{
  return swift_retain();
}

uint64_t AudioPlaybackController.deinit()
{
  MEMORY[0x22A68C660](*(void *)(v0 + 32), *(void *)(v0 + 48));
  RENetworkMarkComponentDirty();
  swift_release();
  swift_weakDestroy();
  swift_release();
  return v0;
}

uint64_t AudioPlaybackController.__deallocating_deinit()
{
  MEMORY[0x22A68C660](*(void *)(v0 + 32), *(void *)(v0 + 48));
  RENetworkMarkComponentDirty();
  swift_release();
  swift_weakDestroy();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t key path getter for AudioPlaybackController.completionHandler : AudioPlaybackController@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  uint64_t v4 = *(void *)(v3 + 112);
  uint64_t v5 = *(void *)(v3 + 120);
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = _sIg_Ieg_TRTA_0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
}

uint64_t key path setter for AudioPlaybackController.completionHandler : AudioPlaybackController(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)a2 + 16);
  uint64_t v8 = *(void *)(v7 + 112);
  *(void *)(v7 + 112) = v6;
  *(void *)(v7 + 120) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);

  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t AudioPlaybackController.completionHandler.getter()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t AudioPlaybackController.completionHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v3 + 112);
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t (*AudioPlaybackController.completionHandler.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(void *)(v1 + 16);
  a1[2] = v3;
  uint64_t v4 = *(void *)(v3 + 112);
  uint64_t v5 = *(void *)(v3 + 120);
  *a1 = v4;
  a1[1] = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
  return AudioPlaybackController.completionHandler.modify;
}

uint64_t AudioPlaybackController.completionHandler.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v2 + 112);
  *(void *)(v2 + 112) = *a1;
  *(void *)(v2 + 120) = v3;
  if (a2)
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v6 = v5;
  }

  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
}

double AudioPlaybackController.speed.getter()
{
  return MEMORY[0x22A68C570](*(void *)(v0 + 32), *(void *)(v0 + 48));
}

uint64_t AudioPlaybackController.speed.setter(double a1)
{
  return AudioPlaybackController.speed.setter(MEMORY[0x263F36E20], MEMORY[0x263F36E50], a1);
}

uint64_t (*AudioPlaybackController.speed.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(a1 + 8) = v1;
  *(void *)(a1 + 16) = v3;
  *(double *)a1 = MEMORY[0x22A68C570]();
  return AudioPlaybackController.speed.modify;
}

uint64_t AudioPlaybackController.speed.modify(uint64_t a1, uint64_t a2)
{
  return AudioPlaybackController.speed.modify(a1, a2, MEMORY[0x263F36E20], MEMORY[0x263F36E50]);
}

double AudioPlaybackController.gain.getter()
{
  REAudioPlayerComponentGetDecibelGainForToken();
  return v0;
}

uint64_t AudioPlaybackController.gain.setter(double a1)
{
  return AudioPlaybackController.speed.setter(MEMORY[0x263F36E18], MEMORY[0x263F36E48], a1);
}

uint64_t (*AudioPlaybackController.gain.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(a1 + 8) = v1;
  *(void *)(a1 + 16) = v3;
  REAudioPlayerComponentGetDecibelGainForToken();
  *(double *)a1 = v4;
  return AudioPlaybackController.gain.modify;
}

uint64_t AudioPlaybackController.gain.modify(uint64_t a1, uint64_t a2)
{
  return AudioPlaybackController.speed.modify(a1, a2, MEMORY[0x263F36E18], MEMORY[0x263F36E48]);
}

Swift::Void __swiftcall AudioPlaybackController.fade(to:duration:)(Swift::Double to, Swift::Double duration)
{
  REAudioPlayerComponentFadeTokenToGainWithDuration();

  RENetworkMarkComponentDirty();
}

double AudioPlaybackController.reverbSendLevel.getter()
{
  return MEMORY[0x22A68C580](*(void *)(v0 + 32), *(void *)(v0 + 48));
}

uint64_t key path setter for AudioPlaybackController.speed : AudioPlaybackController(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4, float (*a5)(uint64_t, void), uint64_t (*a6)(uint64_t, void, float))
{
  double v7 = *a1;
  uint64_t v8 = *a2;
  uint64_t v9 = *(void *)(*a2 + 32);
  double v10 = a5(v9, *(void *)(*a2 + 48));
  float v11 = v7;
  uint64_t result = a6(v9, *(void *)(v8 + 48), v11);
  if (v7 != v10)
  {
    return RENetworkMarkComponentDirty();
  }
  return result;
}

uint64_t AudioPlaybackController.reverbSendLevel.setter(double a1)
{
  return AudioPlaybackController.speed.setter(MEMORY[0x263F36E30], MEMORY[0x263F36E58], a1);
}

uint64_t AudioPlaybackController.speed.setter(float (*a1)(uint64_t, void), uint64_t (*a2)(uint64_t, void, float), double a3)
{
  uint64_t v6 = *(void *)(v3 + 32);
  double v7 = a1(v6, *(void *)(v3 + 48));
  float v8 = a3;
  uint64_t result = a2(v6, *(void *)(v3 + 48), v8);
  if (v7 != a3)
  {
    return RENetworkMarkComponentDirty();
  }
  return result;
}

uint64_t (*AudioPlaybackController.reverbSendLevel.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(a1 + 8) = v1;
  *(void *)(a1 + 16) = v3;
  *(double *)a1 = MEMORY[0x22A68C580]();
  return AudioPlaybackController.reverbSendLevel.modify;
}

uint64_t AudioPlaybackController.reverbSendLevel.modify(uint64_t a1, uint64_t a2)
{
  return AudioPlaybackController.speed.modify(a1, a2, MEMORY[0x263F36E30], MEMORY[0x263F36E58]);
}

uint64_t AudioPlaybackController.speed.modify(uint64_t a1, uint64_t a2, float (*a3)(uint64_t, void), uint64_t (*a4)(uint64_t, void, float))
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  double v7 = *(double *)a1;
  double v8 = a3(v5, *(void *)(v6 + 48));
  float v9 = v7;
  uint64_t result = a4(v5, *(void *)(v6 + 48), v9);
  if (v7 != v8)
  {
    return RENetworkMarkComponentDirty();
  }
  return result;
}

double AudioPlaybackController.directSendLevel.getter()
{
  return MEMORY[0x22A68C560](*(void *)(v0 + 32), *(void *)(v0 + 48));
}

uint64_t key path setter for AudioPlaybackController.directSendLevel : AudioPlaybackController(double *a1, uint64_t a2)
{
  double v2 = *a1;
  double v3 = MEMORY[0x22A68C560](*(void *)(*(void *)a2 + 32), *(void *)(*(void *)a2 + 48));
  uint64_t result = REAudioPlayerComponentSetDirectSendLevelForToken();
  if (v2 != v3)
  {
    return RENetworkMarkComponentDirty();
  }
  return result;
}

uint64_t AudioPlaybackController.directSendLevel.setter(double a1)
{
  double v3 = MEMORY[0x22A68C560](*(void *)(v1 + 32), *(void *)(v1 + 48));
  uint64_t result = REAudioPlayerComponentSetDirectSendLevelForToken();
  if (v3 != a1)
  {
    return RENetworkMarkComponentDirty();
  }
  return result;
}

uint64_t (*AudioPlaybackController.directSendLevel.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(a1 + 8) = v1;
  *(void *)(a1 + 16) = v3;
  *(double *)a1 = MEMORY[0x22A68C560]();
  return AudioPlaybackController.directSendLevel.modify;
}

uint64_t AudioPlaybackController.directSendLevel.modify(uint64_t a1)
{
  double v1 = *(double *)a1;
  double v2 = MEMORY[0x22A68C560](*(void *)(a1 + 16), *(void *)(*(void *)(a1 + 8) + 48));
  uint64_t result = REAudioPlayerComponentSetDirectSendLevelForToken();
  if (v1 != v2)
  {
    return RENetworkMarkComponentDirty();
  }
  return result;
}

uint64_t AudioPlaybackController.isPlaying.getter()
{
  return MEMORY[0x22A68C5A0](*(void *)(v0 + 32), *(void *)(v0 + 48));
}

Swift::Void __swiftcall AudioPlaybackController.play()()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  if (!swift_weakLoadStrong() || (uint64_t v2 = specialized HasHierarchy.parent.getter(), swift_release(), swift_release(), !v2))
  {
    static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log();
    uint64_t v6 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v3 = *(void *)(v1 + 48);
    if (v3) {
      goto LABEL_4;
    }
LABEL_10:
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    double v7 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    return;
  }
  uint64_t v3 = *(void *)(v0 + 48);
  if (!v3) {
    goto LABEL_10;
  }
LABEL_4:
  type metadata accessor for AudioUnitResource();
  if (!swift_dynamicCastClass())
  {
    if (one-time initialization token for playingControllers != -1)
    {
      swift_once();
      uint64_t v3 = *(void *)(v1 + 48);
    }
    uint64_t v4 = *(void *)(v1 + 16);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = static AudioPlaybackController.playingControllers;
    static AudioPlaybackController.playingControllers = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, v3, isUniquelyReferenced_nonNull_native);
    static AudioPlaybackController.playingControllers = v8;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  REAudioPlayerComponentPlayToken();
  RENetworkMarkComponentDirty();
}

Swift::Void __swiftcall AudioPlaybackController.pause()()
{
}

Swift::Void __swiftcall AudioPlaybackController.stop()()
{
}

uint64_t AudioPlaybackController.pause()(void (*a1)(void, void))
{
  a1(*(void *)(v1 + 32), *(void *)(v1 + 48));

  return RENetworkMarkComponentDirty();
}

void AudioPlaybackController.__playbackPosition.getter()
{
}

uint64_t AudioPlaybackController.__playbackPosition.setter()
{
  MEMORY[0x22A68C670](*(void *)(v0 + 32), *(void *)(v0 + 48));

  return RENetworkMarkComponentDirty();
}

uint64_t (*AudioPlaybackController.__playbackPosition.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)(a1 + 8) = v1;
  *(void *)(a1 + 16) = v3;
  *(double *)a1 = MEMORY[0x22A68C5D0]();
  return AudioPlaybackController.__playbackPosition.modify;
}

uint64_t AudioPlaybackController.__playbackPosition.modify(uint64_t a1)
{
  MEMORY[0x22A68C670](*(void *)(a1 + 16), *(void *)(*(void *)(a1 + 8) + 48), *(double *)a1);

  return RENetworkMarkComponentDirty();
}

uint64_t AudioPlaybackController.parentTimebase.getter()
{
  uint64_t v0 = (const void *)REAudioPlayerComponentCopySourceClockOrTimebase();
  CFTypeID v1 = CFGetTypeID(v0);
  if (v1 == CMTimebaseGetTypeID())
  {
    type metadata accessor for CMTimebaseRef(0);
    return swift_dynamicCastUnknownClassUnconditional();
  }
  else
  {
    swift_unknownObjectRelease();
    return 0;
  }
}

uint64_t key path getter for AudioPlaybackController.parentTimebase : AudioPlaybackController@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = (const void *)REAudioPlayerComponentCopySourceClockOrTimebase();
  CFTypeID v3 = CFGetTypeID(v2);
  if (v3 == CMTimebaseGetTypeID())
  {
    type metadata accessor for CMTimebaseRef(0);
    uint64_t result = swift_dynamicCastUnknownClassUnconditional();
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t result = 0;
  }
  *a1 = result;
  return result;
}

void key path setter for AudioPlaybackController.parentTimebase : AudioPlaybackController(id *a1)
{
  if (*a1)
  {
    id v1 = *a1;
    REAudioPlayerComponentSetSourceClockOrTimebase();
    RENetworkMarkComponentDirty();
  }
}

uint64_t AudioPlaybackController.id.getter()
{
  return *(void *)(v0 + 48);
}

void protocol witness for Identifiable.id.getter in conformance AudioPlaybackController(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 48);
}

uint64_t AudioPlaybackController.audioUnit.getter()
{
  if (*(void *)(*(void *)(v0 + 16) + 56))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AUAudioUnit>);
    lazy protocol witness table accessor for type LoadRequest<AUAudioUnit> and conformance LoadRequest<A>();
    return Publisher.eraseToAnyPublisher()();
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL AudioPlaybackController.__audioUnitIsLoaded.getter()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    CFTypeID v3 = (os_unfair_lock_s *)(*(void *)(v2 + 16) + 16);
    swift_retain();
    os_unfair_lock_lock(v3);
    swift_beginAccess();
    uint64_t v4 = *(void **)(v2 + 24);
    int v5 = *(unsigned __int8 *)(v2 + 32);
    outlined copy of Result<AUAudioUnit, Error>?(v4, v5);
    os_unfair_lock_unlock(v3);
    swift_release();
    if (v5 != 255) {
      outlined consume of Result<AUAudioUnit, Error>?(v4, v5);
    }
    return v5 != 255;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AudioPlaybackController.seek(to:)()
{
  double v1 = (double)Duration.components.getter();
  Duration.components.getter();
  MEMORY[0x22A68C670](*(void *)(v0 + 32), *(void *)(v0 + 48), (double)v2 * 1.0e-18 + v1);

  return RENetworkMarkComponentDirty();
}

void *AudioPlaybackController.Internal.createAudioPlaybackController()()
{
  uint64_t v1 = v0;
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v3 = Strong;
  uint64_t v4 = *(void *)(v0 + 32);
  type metadata accessor for AudioPlaybackController();
  int v5 = (void *)swift_allocObject();
  swift_weakInit();
  v5[5] = v4;
  v5[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  uint64_t v6 = REEntityGetOrAddComponentByClass();
  v5[4] = v6;
  RERetain();
  uint64_t v7 = REAudioPlayerComponentPrepareAsset();
  v5[6] = v7;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v8 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v6, v3, v4, v7);
  swift_release();
  swift_release();
  v5[2] = v8;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 48);
  REAudioPlayerComponentGetDecibelGainForToken();
  float v12 = v11;
  uint64_t v13 = v5[4];
  REAudioPlayerComponentGetDecibelGainForToken();
  float v15 = v14;
  REAudioPlayerComponentSetDecibelGainForToken();
  if (v12 != v15) {
    RENetworkMarkComponentDirty();
  }
  float v16 = MEMORY[0x22A68C570](v9, v10);
  float v17 = MEMORY[0x22A68C570](v13, v5[6]);
  REAudioPlayerComponentSetPlaybackRateForToken();
  if (v16 != v17) {
    RENetworkMarkComponentDirty();
  }
  float v18 = MEMORY[0x22A68C580](v9, v10);
  float v19 = MEMORY[0x22A68C580](v13, v5[6]);
  REAudioPlayerComponentSetReverbSendLevelForToken();
  if (v18 != v19) {
    RENetworkMarkComponentDirty();
  }
  float v20 = MEMORY[0x22A68C560](v9, v10);
  float v21 = MEMORY[0x22A68C560](v13, v5[6]);
  REAudioPlayerComponentSetDirectSendLevelForToken();
  if (v20 != v21) {
    RENetworkMarkComponentDirty();
  }
  swift_release();
  return v5;
}

uint64_t closure #1 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(void *)(result + 48) == a2
      && a4 <= 5
      && ((1 << a4) & 0x2D) != 0
      && (REAudioPlayerComponentIsStreamPendingPlay() & 1) == 0)
    {
      if (one-time initialization token for playingControllers != -1) {
        swift_once();
      }
      swift_beginAccess();
      specialized Dictionary._Variant.removeValue(forKey:)(a2);
      swift_endAccess();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned REAudioPlaybackState, @unowned REAudioPlaybackState) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v9(a2, a3, a4, a5);

  return swift_release();
}

void closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(void (*a1)(void **), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  id v7 = (id)REAudioPlayerComponentGetAudioUnitForToken();
  if (v7)
  {
    uint64_t v8 = v7;
    swift_release();
    float v16 = v8;
    LOBYTE(v17) = 0;
    id v9 = v8;
    a1(&v16);
  }
  else
  {
    uint64_t v10 = swift_allocObject();
    swift_weakInit();
    float v11 = (void *)swift_allocObject();
    v11[2] = v10;
    v11[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    v11[4] = v6;
    float v20 = partial apply for closure #1 in closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:);
    float v21 = v11;
    float v16 = (void *)MEMORY[0x263EF8330];
    uint64_t v17 = 1107296256;
    float v18 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @guaranteed AUAudioUnit?, @guaranteed Error?) -> ();
    float v19 = &block_descriptor_76;
    float v12 = _Block_copy(&v16);
    swift_release();
    uint64_t v13 = REAudioPlayerComponentSetDidPrepareAudioUnitCallback();
    uint64_t v15 = v14;
    _Block_release(v12);
    *(void *)(a3 + 88) = v13;
    *(void *)(a3 + 96) = v15;
    *(unsigned char *)(a3 + 104) = 0;
  }
}

uint64_t closure #1 in closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(void *, uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    if (*(void *)(result + 48) == a2)
    {
      float v12 = (void *)(result + 88);
      if ((*(unsigned char *)(result + 104) & 1) == 0)
      {
        if (a4)
        {
          id v13 = a4;
          a6(a4, 1);
          REAudioPlayerComponentRemoveCallback();
        }
        else
        {
          if (!a3)
          {
            uint64_t result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          id v14 = a3;
          a6(a3, 0);
          REAudioPlayerComponentRemoveCallback();
        }
        *float v12 = 0;
        *(void *)(v11 + 96) = 0;
        *(unsigned char *)(v11 + 104) = 1;
      }
    }
    return swift_release();
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @guaranteed AUAudioUnit?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = *(void (**)(uint64_t, uint64_t, void *, void *))(a1 + 32);
  swift_retain();
  id v11 = a4;
  id v10 = a5;
  v9(a2, a3, a4, a5);
  swift_release();
}

uint64_t handler #1 (token:) in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1)
{
  if (one-time initialization token for playingControllers != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static AudioPlaybackController.playingControllers;
  if (!*(void *)(static AudioPlaybackController.playingControllers + 16)) {
    return swift_endAccess();
  }
  uint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return swift_endAccess();
  }
  uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
  uint64_t result = swift_endAccess();
  id v7 = *(void (**)(uint64_t))(v5 + 112);
  if (v7)
  {
    uint64_t v8 = swift_retain();
    v7(v8);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);
  }
  return result;
}

uint64_t removeFromSceneCallback #1 (token:) in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1)
{
  if (one-time initialization token for playingControllers != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v3)
  {
    unint64_t v4 = v2;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = static AudioPlaybackController.playingControllers;
    uint64_t v8 = static AudioPlaybackController.playingControllers;
    static AudioPlaybackController.playingControllers = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v6 = v8;
    }
    specialized _NativeDictionary._delete(at:)(v4, v6);
    static AudioPlaybackController.playingControllers = v6;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return swift_release();
}

uint64_t AudioPlaybackController.Internal.deinit()
{
  if ((*(unsigned char *)(v0 + 80) & 1) == 0) {
    REAudioPlayerComponentRemoveCallback();
  }
  if ((*(unsigned char *)(v0 + 104) & 1) == 0) {
    REAudioPlayerComponentRemoveCallback();
  }
  MEMORY[0x22A68C4F0](*(void *)(v0 + 16), *(void *)(v0 + 48));
  RENetworkMarkComponentDirty();
  RERelease();
  swift_weakDestroy();
  swift_release();
  swift_weakDestroy();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 112));
  return v0;
}

uint64_t AudioPlaybackController.Internal.__deallocating_deinit()
{
  AudioPlaybackController.Internal.deinit();

  return swift_deallocClassInstance();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (uint64_t (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t vars8;

  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  id v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  id v11 = v8[2];
  float v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  id v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    float v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  id v10 = result;
  float v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (uint64_t (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)(unint64_t, uint64_t, uint64_t);
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t vars8;

  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = (void *)*v3;
  id v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  id v14 = v11[2];
  uint64_t v15 = (v12 & 1) == 0;
  float v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v17 = v12;
  float v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
    uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      id v13 = v23;
      float v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v10, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  float v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  float v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v26 + 40);
  float v21 = v19[7] + *(void *)(v26 + 72) * v13;

  return v20(v21, a1, v8);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t vars8;

  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  id v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  id v11 = v8[2];
  float v12 = (v9 & 1) == 0;
  id v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  id v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    float v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  float v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    type metadata accessor for Entity();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  id v10 = v19;
  float v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);

  return swift_retain();
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  id v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  id v11 = v8[2];
  float v12 = (v9 & 1) == 0;
  id v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  id v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    float v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      id v10 = v19;
      float v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  float v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 16 * v10;
    return outlined assign with take of __RKEntityAction.ActionStateObservation(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  id v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  id v11 = v8[2];
  float v12 = (v9 & 1) == 0;
  id v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  id v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    float v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  float v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  id v10 = v19;
  float v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);

  return outlined retain of CustomMaterial.CustomShaderParameters(a2);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  id v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  id v11 = v8[2];
  float v12 = (v9 & 1) == 0;
  id v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  id v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    float v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  float v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  id v10 = v19;
  float v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);

  return outlined retain of CustomMaterial.CustomShaderParameters(a2);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t vars8;

  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  id v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  id v11 = *(void *)(v8 + 16);
  float v12 = (v9 & 1) == 0;
  id v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  id v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    float v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = *(void *)(v16 + 56);
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  float v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  id v10 = v19;
  float v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t vars8;

  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  id v10 = specialized __RawDictionaryStorage.find<A>(_:)();
  id v11 = v8[2];
  float v12 = (v9 & 1) == 0;
  id v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  id v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    float v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  float v19 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    type metadata accessor for __REAsset();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  id v10 = v19;
  float v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);

  return swift_retain();
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  unint64_t v4 = v3;
  uint64_t v8 = *v3;
  id v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  id v11 = *(void *)(v8 + 16);
  float v12 = (v9 & 1) == 0;
  id v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  id v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    float v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = *(void *)(v16 + 56);
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  float v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  id v10 = v19;
  float v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  id v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v12 = (void *)*v3;
  id v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  float v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  float v18 = v13;
  float v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    float v20 = *v4;
    if (v18)
    {
LABEL_8:
      float v21 = v20[7];
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  id v14 = v23;
  float v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  id v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v12 = *v3;
  id v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = *(void *)(v12 + 16);
  float v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  float v18 = v13;
  float v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    float v20 = *v4;
    if (v18)
    {
LABEL_8:
      float v21 = *(void *)(v20 + 56);
      uint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  id v14 = v23;
  float v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, v11, a1, v20);
}

int64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  id v7 = (void **)v6;
  id v14 = (void *)*v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  int64_t result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  int64_t v21 = v14[3];
  if (v21 >= result && (a6 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = (uint64_t *)(v22[7] + 32 * v16);
      *uint64_t v23 = a1;
      v23[1] = a2;
      uint64_t v23[2] = a3;
      v23[3] = a4;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= result && (a6 & 1) == 0)
  {
    int64_t result = (int64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a6 & 1);
  int64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  if ((v20 & 1) != (v24 & 1))
  {
LABEL_15:
    int64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
  uint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v16, a5, a1, a2, a3, a4, v22);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      unint64_t v10 = v18;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    *(void *)(v16[7] + 8 * v10) = a1;
    return swift_bridgeObjectRelease();
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      char v19 = (uint64_t *)(v18[7] + 16 * v12);
      uint64_t *v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  unint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t vars8;

  uint64_t v5 = v4;
  unint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      char v19 = (void *)(*(void *)(v18 + 56) + 16 * v12);
      uint64_t *v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  unint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    char v19 = (void *)(*(void *)(v18 + 56) + 16 * v12);
    void *v19 = a1;
    v19[1] = a2;
    return swift_release();
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      char v19 = (void *)(*(void *)(v18 + 56) + 16 * v12);
      void *v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    char v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    *(void *)(*(void *)(v18 + 56) + 8 * v12) = a1;
    return swift_release();
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      char v19 = (void *)(*(void *)(v18 + 56) + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      void *v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      char v19 = (void *)(*(void *)(v18 + 56) + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      void *v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      char v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      char v19 = v18[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  uint64_t v25 = a1[5];
  uint64_t v26 = a1[6];
  unint64_t v12 = (void *)*v4;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    char v20 = *v5;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 56 * v14);
      *unint64_t v21 = v9;
      v21[1] = v10;
      uint64_t v21[2] = v11;
      v21[3] = v23;
      v21[4] = v24;
      v21[5] = v25;
      v21[6] = v26;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  char v20 = *v5;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v27[0] = v9;
  v27[1] = v10;
  void v27[2] = v11;
  v27[3] = v23;
  v27[4] = v24;
  v27[5] = v25;
  v27[6] = v26;
  specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, (uint64_t)v27, v20);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (uint64_t *)(v20[7] + 16 * v14);
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);

  return swift_bridgeObjectRetain();
}

{
  void *v5;
  void **v6;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t vars8;

  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);

  return swift_bridgeObjectRetain();
}

{
  void *v5;
  void **v6;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t vars8;

  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = v20[7] + 16 * v14;
      uint64_t result = outlined consume of Data._Representation(*(void *)v21, *(void *)(v21 + 8));
      *(void *)unint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 40 * v10;
    __swift_destroy_boxed_opaque_existential_1(v17);
    return outlined init with take of BindableDataInternal(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t vars8;

  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 8 * v10;
    return outlined assign with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(uint64_t, Swift::UInt, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), specialized _NativeDictionary._insert(at:key:value:));
}

int64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  int64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  int64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      unint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      uint64_t *v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    int64_t result = (int64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  int64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v20 & 1))
  {
LABEL_15:
    type metadata accessor for REComponentClassPtr(0);
    int64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, v18);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, Swift::UInt a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for REComponentClassPtr(0);
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 80 * v10;
    return outlined assign with take of ComponentInfo((uint64_t)a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 80 * v10;
    return outlined assign with take of ComponentInfo((uint64_t)a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3, void (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t, Swift::UInt, uint64_t, uint64_t))
{
  char v9 = v6;
  uint64_t v13 = *v6;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v19 = v14;
  uint64_t v20 = *(void *)(v13 + 24);
  if (v20 < v18 || (a3 & 1) == 0)
  {
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      a4();
      goto LABEL_7;
    }
    a5();
    uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v24 & 1))
    {
      uint64_t v15 = v23;
      uint64_t v21 = *v9;
      if (v19) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v21 = *v9;
  if (v19)
  {
LABEL_8:
    *(void *)(*(void *)(v21 + 56) + 8 * v15) = a1;
    return swift_release();
  }
LABEL_13:

  return a6(v15, a2, a1, v21);
}

{
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char v25;
  uint64_t vars8;

  char v9 = v6;
  uint64_t v13 = *v6;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v19 = v14;
  uint64_t v20 = *(void *)(v13 + 24);
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v9;
    if (v19)
    {
LABEL_8:
      char v22 = *(void *)(v21 + 56);
      uint64_t result = swift_release();
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  a5();
  char v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v15 = v24;
  uint64_t v21 = *v9;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:

  return a6(v15, a2, a1, v21);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)a2, a1, v16);
      outlined init with take of String?((uint64_t)(a2 + 3), (uint64_t)v21);
      return (_OWORD *)outlined retain of String?((uint64_t)v21);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  BOOL v17 = (_OWORD *)(v16[7] + 32 * v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);

  return outlined init with take of Any(a1, v17);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 80 * v12;
    return outlined assign with take of AudioMixGroup((uint64_t)a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  char v9 = v6;
  uint64_t v13 = *v6;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v19 = v14;
  uint64_t v20 = *(void *)(v13 + 24);
  if (v20 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v9;
    if (v19)
    {
LABEL_8:
      *(void *)(*(void *)(v21 + 56) + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= result && (a3 & 1) == 0)
  {
    uint64_t result = a4();
    goto LABEL_7;
  }
  a5();
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = result;
  uint64_t v21 = *v9;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:

  return a6(v15, a2, a1, v21);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    char v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type LoadRequest<AUAudioUnit> and conformance LoadRequest<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LoadRequest<AUAudioUnit> and conformance LoadRequest<A>;
  if (!lazy protocol witness table cache variable for type LoadRequest<AUAudioUnit> and conformance LoadRequest<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for LoadRequest<AUAudioUnit>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<AUAudioUnit> and conformance LoadRequest<A>);
  }
  return result;
}

id outlined copy of Result<AUAudioUnit, Error>?(id a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    return outlined copy of Result<AUAudioUnit, Error>(a1);
  }
  return a1;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in AudioPlaybackController()
{
  return MEMORY[0x263F8E980];
}

uint64_t sub_227EE5F64@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_227EE5FB4()
{
  return swift_weakAssign();
}

double sub_227EE600C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return keypath_get_7Tm(a1, MEMORY[0x263F36E20], a2);
}

uint64_t sub_227EE6024(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AudioPlaybackController.speed : AudioPlaybackController(a1, a2, a3, a4, MEMORY[0x263F36E20], MEMORY[0x263F36E50]);
}

double sub_227EE6064@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return keypath_get_7Tm(a1, MEMORY[0x263F36E18], a2);
}

uint64_t sub_227EE607C(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AudioPlaybackController.speed : AudioPlaybackController(a1, a2, a3, a4, MEMORY[0x263F36E18], MEMORY[0x263F36E48]);
}

double sub_227EE60BC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return keypath_get_7Tm(a1, MEMORY[0x263F36E30], a2);
}

double keypath_get_7Tm@<D0>(uint64_t a1@<X0>, float (*a2)(void, void)@<X3>, double *a3@<X8>)
{
  double result = a2(*(void *)(*(void *)a1 + 32), *(void *)(*(void *)a1 + 48));
  *a3 = result;
  return result;
}

uint64_t sub_227EE6110(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AudioPlaybackController.speed : AudioPlaybackController(a1, a2, a3, a4, MEMORY[0x263F36E30], MEMORY[0x263F36E58]);
}

double sub_227EE6150@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = MEMORY[0x22A68C560](*(void *)(*(void *)a1 + 32), *(void *)(*(void *)a1 + 48));
  *a2 = result;
  return result;
}

void sub_227EE618C(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = MEMORY[0x22A68C5D0](*(void *)(*(void *)a1 + 32), *(void *)(*(void *)a1 + 48));
}

uint64_t sub_227EE61C0(double *a1, uint64_t a2)
{
  MEMORY[0x22A68C670](*(void *)(*(void *)a2 + 32), *(void *)(*(void *)a2 + 48), *a1);

  return RENetworkMarkComponentDirty();
}

uint64_t type metadata accessor for AudioPlaybackController()
{
  return self;
}

uint64_t method lookup function for AudioPlaybackController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AudioPlaybackController);
}

uint64_t dispatch thunk of AudioPlaybackController.entity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AudioPlaybackController.completionHandler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of AudioPlaybackController.completionHandler.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of AudioPlaybackController.completionHandler.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t type metadata accessor for AudioPlaybackController.Internal()
{
  return self;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4, a1, v20);

  return swift_bridgeObjectRetain();
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unsigned int a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  BOOL v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  BOOL v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, __int16 a2, Swift::UInt a3, int a4, char a5)
{
  uint64_t v6 = (void **)v5;
  BOOL v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0xFFFF01);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      unint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0xFFFF01);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4 & 0xFFFF01, a1, v20);
}

{
  void *v5;
  void **v6;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t result;
  unint64_t v23;
  char v24;
  uint64_t vars8;

  uint64_t v6 = (void **)v5;
  BOOL v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0xFFFF01);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      unint64_t result = swift_release();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0xFFFF01);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4 & 0xFFFF01, a1, v20);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unsigned int a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = v17 + *(void *)(*(void *)(type metadata accessor for LoadTrace(0) - 8) + 72) * v10;
    return outlined assign with take of LoadTrace(a1, v18);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = *(void *)(v18 + 56);

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v8 = (void *)*v4;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a2 & 1) != 0)
  {
LABEL_7:
    char v16 = *v5;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = (__n128 *)(v16[7] + 32 * v10);
      *uint64_t v17 = a3;
      v17[1] = a4;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v14 & 1) != (v18 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  char v16 = *v5;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a1, v16, a3, a4);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(void), void (*a6)(void), void (*a7)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v10 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t result = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v10;
    if (v21)
    {
LABEL_8:
      *(void *)(*(void *)(v23 + 56) + 8 * v17) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= result && (a4 & 1) == 0)
  {
    uint64_t result = a5();
    goto LABEL_7;
  }
  a6();
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v21 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = result;
  uint64_t v23 = *v10;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  a7(v17, a2, a3, a1, v23);

  return swift_bridgeObjectRetain();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = *(void *)(v20 + 56);

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  specialized _NativeDictionary._insert(at:key:value:)(v14, v11, a1, v20);
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  return a1;
}

uint64_t specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_weakInit();
  swift_weakInit();
  *(void *)(v5 + 56) = 0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(unsigned char *)(v5 + 80) = 1;
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 96) = 0;
  *(unsigned char *)(v5 + 104) = 1;
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 120) = 0;
  *(void *)(v5 + 16) = a1;
  swift_weakAssign();
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 48) = a4;
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  v19[4] = partial apply for closure #1 in AudioPlaybackController.Internal.init(component:entity:resource:token:);
  v19[5] = v9;
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned REAudioPlaybackState, @unowned REAudioPlaybackState) -> ();
  v19[3] = &block_descriptor_4;
  uint64_t v10 = _Block_copy(v19);
  swift_retain();
  swift_release();
  uint64_t v11 = REAudioPlayerComponentAddDidChangeStateCallback();
  uint64_t v13 = v12;
  _Block_release(v10);
  *(void *)(v5 + 64) = v11;
  *(void *)(v5 + 72) = v13;
  *(unsigned char *)(v5 + 80) = 0;
  type metadata accessor for AudioUnitResource();
  if (swift_dynamicCastClass())
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AUAudioUnit>);
    uint64_t v14 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<AUAudioUnit, Error>?>);
    uint64_t v15 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v16 = swift_allocObject();
    *(_DWORD *)(v16 + 16) = 0;
    *(void *)(v15 + 16) = v16;
    *(void *)(v15 + 24) = 0;
    *(unsigned char *)(v15 + 32) = -1;
    *(void *)(v14 + 16) = v15;
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = partial apply for closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:);
    v17[3] = v5;
    v17[4] = v15;
    v17[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<AUAudioUnit, Error>);
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v14 + 24) = Future.init(_:)();
    *(void *)(v5 + 56) = v14;
    swift_release();
  }
  REAudioPlayerComponentSetCompletionHandler();
  REAudioPlayerComponentSetRemoveFromSceneCallback();
  return v5;
}

uint64_t sub_227EE81A8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return thunk for @escaping @callee_guaranteed () -> (@out ())(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t outlined assign with take of ComponentInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of LoadTrace(uint64_t a1, uint64_t a2)
{
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Trace - 8) + 40))(a2, a1, Trace);
  return a2;
}

uint64_t outlined retain of CustomMaterial.CustomShaderParameters(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  id v7 = *(void **)(a1 + 112);
  outlined copy of __MaterialResource.CoreMaterialFunction?(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 64));
  outlined copy of __MaterialResource.CoreMaterialFunction?(v2, v3, v4, v5, v6, v7);
  return a1;
}

uint64_t specialized static AudioPlaybackController.audioPlaybackControllerForToken(token:)(uint64_t a1)
{
  if (one-time initialization token for playingControllers != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (!*(void *)(static AudioPlaybackController.playingControllers + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) == 0))
  {
    swift_endAccess();
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    uint64_t v5 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
LABEL_8:

    return 0;
  }
  swift_endAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_retain();
    id v7 = AudioPlaybackController.Internal.createAudioPlaybackController()();
    if (v7)
    {
      uint64_t v4 = v7;
      swift_release();
      return (uint64_t)v4;
    }
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    uint64_t v5 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_release();
    goto LABEL_8;
  }
  return Strong;
}

uint64_t outlined assign with take of AudioMixGroup(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_227EE8508()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return closure #1 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(a1, a2, a3, a4);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

void partial apply for closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(void (*a1)(void **), uint64_t a2)
{
  closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(a1, a2, v2);
}

uint64_t sub_227EE8568()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_227EE85BC()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return closure #1 in closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(void *, uint64_t))(v4 + 24));
}

uint64_t outlined assign with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of __RKEntityAction.ActionStateObservation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t __ResolvedRealityCoordinateSpace.init(entity:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t __ResolvedRealityCoordinateSpace.entity.getter()
{
  return swift_retain();
}

uint64_t __ResolvedRealityCoordinateSpace.entity.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*__ResolvedRealityCoordinateSpace.entity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*__RealityCoordinateSpaceContext.camera.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __RealityCoordinateSpaceContext.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Entity._resolve(in:)@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

uint64_t protocol witness for RealityCoordinateSpace._resolve(in:) in conformance Entity@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

void SceneRealityCoordinateSpace._resolve(in:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CameraRealityCoordinateSpace._resolve(in:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

void *initializeBufferWithCopyOfBuffer for __ResolvedRealityCoordinateSpace(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

void *assignWithCopy for __ResolvedRealityCoordinateSpace(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for __ResolvedRealityCoordinateSpace(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for __ResolvedRealityCoordinateSpace()
{
  return &type metadata for __ResolvedRealityCoordinateSpace;
}

ValueMetadata *type metadata accessor for __RealityCoordinateSpaceContext()
{
  return &type metadata for __RealityCoordinateSpaceContext;
}

uint64_t dispatch thunk of RealityCoordinateSpace._resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for SceneRealityCoordinateSpace()
{
  return &type metadata for SceneRealityCoordinateSpace;
}

ValueMetadata *type metadata accessor for CameraRealityCoordinateSpace()
{
  return &type metadata for CameraRealityCoordinateSpace;
}

uint64_t LowLevelBuffer.Descriptor.capacity.getter()
{
  return *(void *)v0;
}

uint64_t LowLevelBuffer.Descriptor.capacity.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*LowLevelBuffer.Descriptor.capacity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelBuffer.Descriptor.sizeMultiple.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t LowLevelBuffer.Descriptor.sizeMultiple.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*LowLevelBuffer.Descriptor.sizeMultiple.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::LowLevelBuffer::Descriptor __swiftcall LowLevelBuffer.Descriptor.init(capacity:sizeMultiple:)(Swift::Int capacity, Swift::Int sizeMultiple)
{
  Swift::Int *v2 = capacity;
  v2[1] = sizeMultiple;
  result.sizeMultiple = sizeMultiple;
  result.capacity = capacity;
  return result;
}

__n128 LowLevelBuffer.descriptor.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

uint64_t LowLevelBuffer.bytesUsed.getter()
{
  return DRBufferGetBytesUsed();
}

uint64_t LowLevelBuffer.bytesUsed.setter()
{
  return DRBufferSetBytesUsed();
}

uint64_t (*LowLevelBuffer.bytesUsed.modify(uint64_t *a1))()
{
  a1[1] = v1;
  *a1 = DRBufferGetBytesUsed();
  return LowLevelBuffer.bytesUsed.modify;
}

uint64_t LowLevelBuffer.bytesUsed.modify()
{
  return DRBufferSetBytesUsed();
}

uint64_t LowLevelBuffer.__allocating_init(descriptor:)(uint64_t *a1)
{
  uint64_t v2 = swift_allocObject();
  LowLevelBuffer.init(descriptor:)(a1);
  return v2;
}

uint64_t LowLevelBuffer.init(descriptor:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = DRBufferDescriptorCreate();
  if (v3 < 0) {
    goto LABEL_13;
  }
  uint64_t v6 = (void *)v5;
  DRBufferDescriptorSetCapacity();
  if (v4 < 0) {
    goto LABEL_13;
  }
  DRBufferDescriptorSetSizeMultiple();
  id v23 = 0;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  id v7 = (id)REServiceLocatorGetDirectResourceService();
  if (v7)
  {
    uint64_t v8 = v7;
    Buffer = (void *)DRContextCreateBuffer();

LABEL_8:
    v2[3] = v3;
    v2[4] = v4;
    if (Buffer)
    {

      v2[2] = Buffer;
      return (uint64_t)v2;
    }
    goto LABEL_12;
  }
  uint64_t v12 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of __RenderService?(v12, (uint64_t)&v18);
  if (v19)
  {
    outlined init with take of BindableDataInternal(&v18, (uint64_t)v20);
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    id v15 = (id)RERenderManagerGetRenderDevice();
    Buffer = (void *)DRBufferCreateUnmanaged();
    swift_unknownObjectRelease();
    id v16 = v23;
    if (v23)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
      swift_allocError();
      *uint64_t v10 = v16;
      id v11 = v16;
      swift_willThrow();

      type metadata accessor for LowLevelBuffer();
      swift_deallocPartialClassInstance();
      return (uint64_t)v2;
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t LowLevelBuffer.withUnsafeBytes(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in LowLevelBuffer.withUnsafeBytes(_:);
  *(void *)(v7 + 24) = v6;
  v11[4] = partial apply for thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned UInt) -> ();
  v11[5] = v7;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned UInt) -> ();
  v11[3] = &block_descriptor_5;
  uint64_t v8 = _Block_copy(v11);
  id v9 = v5;
  swift_retain();
  swift_release();
  DRBufferRead();

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v8) {
    __break(1u);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned UInt) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

uint64_t LowLevelBuffer.withUnsafeMutableBytes(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in LowLevelBuffer.withUnsafeMutableBytes(_:);
  *(void *)(v7 + 24) = v6;
  v11[4] = partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v11[5] = v7;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v11[3] = &block_descriptor_13;
  uint64_t v8 = _Block_copy(v11);
  id v9 = v5;
  swift_retain();
  swift_release();
  DRBufferUpdate();

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v8) {
    __break(1u);
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

uint64_t LowLevelBuffer.replaceUnsafeMutableBytes(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in LowLevelBuffer.withUnsafeMutableBytes(_:);
  *(void *)(v7 + 24) = v6;
  v11[4] = thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ()partial apply;
  v11[5] = v7;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v11[3] = &block_descriptor_23;
  uint64_t v8 = _Block_copy(v11);
  id v9 = v5;
  swift_retain();
  swift_release();
  DRBufferReplace();

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v8) {
    __break(1u);
  }
  return result;
}

id LowLevelBuffer.read(using:)()
{
  Using = (void *)DRBufferReadUsing();

  return Using;
}

id LowLevelBuffer.replace(using:)()
{
  uint64_t v0 = (void *)DRBufferReplaceUsing();

  return v0;
}

uint64_t LowLevelBuffer.deinit()
{
  return v0;
}

uint64_t LowLevelBuffer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of __RenderService?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef;
  if (!lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef)
  {
    type metadata accessor for CFErrorRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef);
  }
  return result;
}

uint64_t type metadata accessor for LowLevelBuffer()
{
  return self;
}

uint64_t sub_227EE9288()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in LowLevelBuffer.withUnsafeBytes(_:)(uint64_t result, uint64_t a2)
{
  return partial apply for closure #1 in LowLevelBuffer.withUnsafeBytes(_:)(result, a2);
}

{
  uint64_t v2;

  if ((a2 & 0x8000000000000000) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(result, result + a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_227EE92A0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned UInt) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_227EE92F0()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in LowLevelBuffer.withUnsafeMutableBytes(_:)(uint64_t result, uint64_t a2)
{
  return partial apply for closure #1 in LowLevelBuffer.withUnsafeBytes(_:)(result, a2);
}

uint64_t sub_227EE9308()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_227EE9340()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_227EE9384()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_227EE9394@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DRBufferGetBytesUsed();
  *a1 = result;
  return result;
}

uint64_t sub_227EE93C4()
{
  return DRBufferSetBytesUsed();
}

uint64_t method lookup function for LowLevelBuffer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for LowLevelBuffer);
}

uint64_t dispatch thunk of LowLevelBuffer.bytesUsed.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of LowLevelBuffer.bytesUsed.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of LowLevelBuffer.bytesUsed.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of LowLevelBuffer.__allocating_init(descriptor:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of LowLevelBuffer.withUnsafeBytes(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of LowLevelBuffer.withUnsafeMutableBytes(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of LowLevelBuffer.replaceUnsafeMutableBytes(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of LowLevelBuffer.read(using:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of LowLevelBuffer.replace(using:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

ValueMetadata *type metadata accessor for LowLevelBuffer.Descriptor()
{
  return &type metadata for LowLevelBuffer.Descriptor;
}

uint64_t (*CustomMaterial.GeometryModifier.constantValues.modify(void *a1))()
{
  uint64_t v2 = *(void **)(v1 + 32);
  *a1 = v2;
  a1[1] = v1;
  id v3 = v2;
  return CustomMaterial.GeometryModifier.constantValues.modify;
}

uint64_t CustomMaterial.GeometryModifier.init(named:in:constantValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:constantValues:)(a1, a2, a3, a4, a5);
}

{
  char ServicesToUpdate;
  uint64_t result;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_retain();
  swift_release();
  ServicesToUpdate = REEngineConfigurationGetServicesToUpdate();
  uint64_t result = swift_release();
  if ((ServicesToUpdate & 0x10) != 0)
  {
    *(void *)a5 = a1;
    *(void *)(a5 + 8) = a2;
    *(void *)(a5 + 16) = a3;
    *(void *)(a5 + 24) = 0;
    *(void *)(a5 + 32) = a4;
    *(unsigned char *)(a5 + 40) = 0;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id CustomMaterial.SurfaceShader.constantValues.getter()
{
  return *(id *)(v0 + 32);
}

void CustomMaterial.SurfaceShader.constantValues.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
}

uint64_t (*CustomMaterial.SurfaceShader.constantValues.modify(void *a1))()
{
  uint64_t v2 = *(void **)(v1 + 32);
  *a1 = v2;
  a1[1] = v1;
  id v3 = v2;
  return CustomMaterial.GeometryModifier.constantValues.modify;
}

uint64_t CustomMaterial.SurfaceShader.init(named:in:constantValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:constantValues:)(a1, a2, a3, a4, a5);
}

uint64_t (*protocol witness for MaterialFunction.constantValues.modify in conformance CustomMaterial.GeometryModifier(void *a1))()
{
  uint64_t v2 = *(void **)(v1 + 32);
  *a1 = v2;
  a1[1] = v1;
  id v3 = v2;
  return CustomMaterial.GeometryModifier.constantValues.modify;
}

id protocol witness for MaterialFunction.constantValues.getter in conformance CustomMaterial.SurfaceShader()
{
  return *(id *)(v0 + 32);
}

void protocol witness for MaterialFunction.constantValues.setter in conformance CustomMaterial.SurfaceShader(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
}

void CustomMaterial.GeometryModifier.constantValues.modify(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(v2 + 32);
  if (a2)
  {
    id v5 = v3;

    *(void *)(v2 + 32) = v5;
  }
  else
  {

    *(void *)(v2 + 32) = v3;
  }
}

id sub_227EE9834@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *a2 = v2;
  return v2;
}

void sub_227EE9840(id *a1, uint64_t a2)
{
}

uint64_t PlayAnimationAction.animationName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlayAnimationAction.animationName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PlayAnimationAction.animationName.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double PlayAnimationAction.transitionDuration.getter()
{
  return *(double *)(v0 + 16);
}

void PlayAnimationAction.transitionDuration.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*PlayAnimationAction.transitionDuration.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAnimationAction.blendLayer.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PlayAnimationAction.blendLayer.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*PlayAnimationAction.blendLayer.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAnimationAction.separateAnimatedValue.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t PlayAnimationAction.separateAnimatedValue.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t (*PlayAnimationAction.separateAnimatedValue.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PlayAnimationAction.handoffType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 33);
}

unsigned char *PlayAnimationAction.handoffType.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 33) = *result;
  return result;
}

uint64_t (*PlayAnimationAction.handoffType.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAnimationAction.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  char v3 = *(unsigned char *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 40);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return outlined copy of ActionEntityResolution();
}

uint64_t outlined copy of ActionEntityResolution()
{
  return swift_bridgeObjectRetain();
}

uint64_t PlayAnimationAction.targetEntity.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of ActionEntityResolution();
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  *(unsigned char *)(v1 + 56) = v4;
  return result;
}

uint64_t outlined consume of ActionEntityResolution()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*PlayAnimationAction.targetEntity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAnimationAction.parentControllers.getter()
{
  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t PlayAnimationAction.parentControllers.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 57) = result;
  return result;
}

unsigned char *(*PlayAnimationAction.parentControllers.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 57);
  return PlayAnimationAction.parentControllers.modify;
}

unsigned char *PlayAnimationAction.parentControllers.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 57) = result[8];
  return result;
}

uint64_t (*PlayAnimationAction.useParentedControllers.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAnimationAction.animatedValueType.getter()
{
  return 0;
}

__n128 PlayAnimationAction.init(animationName:targetEntity:transitionDuration:blendLayer:separateAnimatedValue:useParentedControllers:handoffType:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, char *a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  unsigned __int8 v9 = a3[1].n128_u8[0];
  char v10 = *a7;
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(double *)(a8 + 16) = a9;
  *(void *)(a8 + 24) = a4;
  *(unsigned char *)(a8 + 32) = a5;
  *(unsigned char *)(a8 + 33) = v10;
  __n128 result = *a3;
  *(__n128 *)(a8 + 40) = *a3;
  *(unsigned char *)(a8 + 56) = v9;
  *(unsigned char *)(a8 + 57) = a6;
  return result;
}

unint64_t PlayAnimationAction.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6F6974616D696E61;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x79614C646E656C62;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x5466666F646E6168;
      break;
    case 5:
      unint64_t result = 0x6E45746567726174;
      break;
    case 6:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PlayAnimationAction.CodingKeys()
{
  return PlayAnimationAction.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlayAnimationAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PlayAnimationAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlayAnimationAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlayAnimationAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PlayAnimationAction.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PlayAnimationAction.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v1 + 24);
  int v7 = *(unsigned __int8 *)(v1 + 32);
  int v16 = *(unsigned __int8 *)(v1 + 33);
  int v17 = v7;
  uint64_t v15 = *(void *)(v1 + 40);
  uint64_t v13 = *(void *)(v1 + 48);
  int v14 = *(unsigned __int8 *)(v1 + 56);
  v12[1] = *(unsigned __int8 *)(v1 + 57);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20) = 0;
  uint64_t v8 = v19;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v8)
  {
    char v9 = v16;
    uint64_t v10 = v15;
    LOBYTE(v20) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v20) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v20) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v20) = v9;
    char v23 = 4;
    lazy protocol witness table accessor for type AnimationHandoffType and conformance AnimationHandoffType();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v20 = v10;
    uint64_t v21 = v13;
    char v22 = v14;
    char v23 = 5;
    lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v20) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType and conformance AnimationHandoffType()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType and conformance AnimationHandoffType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution;
  if (!lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution;
  if (!lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEntityResolution and conformance ActionEntityResolution);
  }
  return result;
}

uint64_t PlayAnimationAction.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PlayAnimationAction.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlayAnimationAction.CodingKeys and conformance PlayAnimationAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v27) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  LOBYTE(v27) = 1;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  LOBYTE(v27) = 2;
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v27) = 3;
  int v25 = KeyedDecodingContainer.decode(_:forKey:)();
  char v30 = 4;
  lazy protocol witness table accessor for type AnimationHandoffType and conformance AnimationHandoffType();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v24 = v27;
  char v30 = 5;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v27;
  unsigned __int8 v31 = v29;
  LOBYTE(v27) = 6;
  uint64_t v22 = v28;
  uint64_t v23 = v14;
  int v21 = v29;
  outlined copy of ActionEntityResolution();
  char v15 = KeyedDecodingContainer.decode(_:forKey:)();
  v25 &= 1u;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  uint64_t v17 = v22;
  uint64_t v16 = v23;
  char v18 = v21;
  outlined copy of ActionEntityResolution();
  outlined consume of ActionEntityResolution();
  swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v26;
  *(unsigned char *)(a2 + 32) = v25;
  *(unsigned char *)(a2 + 33) = v24;
  *(void *)(a2 + 40) = v16;
  *(void *)(a2 + 48) = v17;
  *(unsigned char *)(a2 + 56) = v18;
  *(unsigned char *)(a2 + 57) = v15 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return outlined consume of ActionEntityResolution();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlayAnimationAction@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PlayAnimationAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlayAnimationAction(void *a1)
{
  return PlayAnimationAction.encode(to:)(a1);
}

uint64_t sub_227EEA51C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 57);
  return result;
}

unsigned char *sub_227EEA528(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 57) = *result;
  return result;
}

uint64_t destroy for PlayAnimationAction()
{
  swift_bridgeObjectRelease();

  return outlined consume of ActionEntityResolution();
}

uint64_t initializeWithCopy for PlayAnimationAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  char v7 = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  outlined copy of ActionEntityResolution();
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t assignWithCopy for PlayAnimationAction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  char v6 = *(unsigned char *)(a2 + 56);
  outlined copy of ActionEntityResolution();
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = v6;
  outlined consume of ActionEntityResolution();
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PlayAnimationAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  char v5 = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = v5;
  outlined consume of ActionEntityResolution();
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayAnimationAction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 58)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayAnimationAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 58) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayAnimationAction()
{
  return &type metadata for PlayAnimationAction;
}

unsigned char *storeEnumTagSinglePayload for PlayAnimationAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EEA8A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PlayAnimationAction.CodingKeys()
{
  return &unk_26DC93D78;
}

uint64_t PlayAnimationActionHandler.triggerAnimation(_:)(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 16);
  double v6 = *(double *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 40);
  char v9 = *(unsigned char *)(a1 + 41);
  int v59 = *(_DWORD *)(a1 + 42);
  __int16 v60 = *(_WORD *)(a1 + 46);
  char v10 = *(unsigned char *)(a1 + 64);
  char v11 = *(unsigned char *)(a1 + 65);
  *(_OWORD *)char v64 = *(_OWORD *)(a1 + 66);
  *(_OWORD *)&v64[14] = *(_OWORD *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 96);
  long long v68 = *(_OWORD *)(a1 + 136);
  long long v67 = *(_OWORD *)(a1 + 120);
  long long v66 = *(_OWORD *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 152);
  char v14 = *(unsigned char *)(a1 + 160);
  uint64_t v52 = (ValueMetadata *)v3;
  unint64_t v53 = v4;
  uint64_t v54 = (uint64_t)v5;
  uint64_t v55 = *(void *)&v6;
  uint64_t v56 = v7;
  char v57 = v8;
  char v58 = v9;
  long long v61 = *(_OWORD *)(a1 + 48);
  char v62 = v10;
  char v46 = v11;
  char v63 = v11;
  uint64_t v65 = v12;
  uint64_t v69 = v13;
  char v70 = v14;
  long long v71 = *(_OWORD *)(a1 + 161);
  long long v72 = *(_OWORD *)(a1 + 177);
  long long v15 = *(_OWORD *)(a1 + 193);
  long long v16 = *(_OWORD *)(a1 + 209);
  long long v17 = *(_OWORD *)(a1 + 225);
  *(_OWORD *)((char *)v75 + 15) = *(_OWORD *)(a1 + 240);
  v75[0] = v17;
  long long v74 = v16;
  long long v73 = v15;
  uint64_t result = specialized PlayAnimationActionHandler.getTargetEntity(event:)((uint64_t)&v52);
  if (result)
  {
    if (REEntityGetComponent())
    {
      uint64_t v42 = v3;
      uint64_t AnimationLibraryAsset = REAnimationLibraryComponentGetAnimationLibraryAsset();
      if (AnimationLibraryAsset)
      {
        uint64_t v20 = AnimationLibraryAsset;
        type metadata accessor for AnimationLibraryResource();
        int v21 = (ValueMetadata *)swift_allocObject();
        v21[2].Kind = 0;
        v21[1].Kind = v20;
        RERetain();
        uint64_t EntryCount = REAnimationLibraryAssetGetEntryCount();
        uint64_t v23 = specialized Array.init(repeating:count:)(0, EntryCount);
        unint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        v21[1].Description = (void *)v23;
        uint64_t v27 = 1;
      }
      else
      {
        specialized AnimationLibraryDefinition.init(_:)(MEMORY[0x263F8EE78], (uint64_t)&v52);
        int v21 = v52;
        unint64_t v24 = v53;
        uint64_t v25 = v54;
        uint64_t v27 = v55;
        uint64_t v26 = v56;
      }
      uint64_t v43 = v24;
      uint64_t v44 = v27;
      uint64_t v45 = v25;
      uint64_t v47 = v21;
      unint64_t v48 = v24;
      uint64_t v49 = v25;
      uint64_t v50 = v27;
      uint64_t v51 = v26;
      uint64_t v33 = AnimationLibraryComponent.animationResource(_:)(v4, v5);
      if (v33)
      {
        LOBYTE(v47) = v9;
        uint64_t v34 = Entity.playAnimation(_:transitionDuration:blendLayerOffset:separateAnimatedValue:startsPaused:clock:handoffType:)(v6, v33, v7, v8 & 1, 0, 0, (unsigned __int8 *)&v47);
        swift_release();
        uint64_t *v2 = v34;
        if ((v14 & 1) == 0)
        {
          swift_beginAccess();
          if (swift_weakLoadStrong())
          {
            REAnimationComponentGetComponentType();
            if (REEntityGetComponentByClass())
            {
              REAnimationComponentSetCurrentPlaybackTime();
              RENetworkMarkComponentDirty();
            }
            swift_release();
          }
        }
        if (v46) {
          AnimationPlaybackController.setParent(parent:)(v42);
        }
        swift_release();
        uint64_t v35 = (uint64_t)v21;
        uint64_t v36 = v43;
      }
      else
      {
        uint64_t v47 = 0;
        unint64_t v48 = 0xE000000000000000;
        _StringGuts.grow(_:)(82);
        v37._countAndFlagsBits = 0x2072656C646E6148;
        v37._object = (void *)0xEC00000020726F66;
        String.append(_:)(v37);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAnimationAction.Type);
        v38._countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        v39._object = (void *)0x8000000228351820;
        v39._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v39);
        v40._countAndFlagsBits = v4;
        v40._object = v5;
        String.append(_:)(v40);
        v41._object = (void *)0x8000000228351850;
        v41._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v41);
        specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
        swift_bridgeObjectRelease();
        uint64_t v35 = (uint64_t)v21;
        uint64_t v36 = v43;
      }
      outlined consume of AnimationLibraryComponent?(v35, v36, v45, v44);
    }
    else
    {
      uint64_t v52 = 0;
      unint64_t v53 = 0xE000000000000000;
      _StringGuts.grow(_:)(80);
      v28._countAndFlagsBits = 0x2072656C646E6148;
      v28._object = (void *)0xEC00000020726F66;
      String.append(_:)(v28);
      uint64_t v47 = &type metadata for PlayAnimationAction;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAnimationAction.Type);
      v29._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = 0xD00000000000003ELL;
      v30._object = (void *)0x80000002283517E0;
      String.append(_:)(v30);
      REEntityGetName();
      v31._countAndFlagsBits = String.init(cString:)();
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._countAndFlagsBits = 11815;
      v32._object = (void *)0xE200000000000000;
      String.append(_:)(v32);
      specialized static AnimationLogger.logError(_:)(v52, v53);
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance PlayAnimationActionHandler(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 65) == 1)
  {
    if (*v1)
    {
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        REAnimationComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REAnimationComponentStopAnimation();
          RENetworkMarkComponentDirty();
        }
        swift_release();
      }
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = 0;
  return result;
}

uint64_t specialized PlayAnimationAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F6974616D696E61 && a2 == 0xED0000656D614E6ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000228351780 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79614C646E656C62 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002283517A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5466666F646E6168 && a2 == 0xEB00000000657079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E45746567726174 && a2 == 0xEC00000079746974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002283517C0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized PlayAnimationActionHandler.getTargetEntity(event:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  char v2 = *(unsigned char *)(a1 + 64);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t SceneNullable = REEntityGetSceneNullable();
      if (SceneNullable)
      {
        id v4 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v4)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          swift_allocObject();
          Scene.init(coreScene:)(SceneNullable);
        }
        uint64_t SceneNullable = Scene.findEntity(named:)();
        swift_release();
      }
      swift_release();
    }
    else
    {
      uint64_t v9 = v1;
      swift_bridgeObjectRetain();
      uint64_t SceneNullable = Entity.subscript.getter(&v9);
      swift_release();
    }
    outlined consume of ActionEntityResolution();
  }
  else
  {
    _StringGuts.grow(_:)(62);
    v5._countAndFlagsBits = 0x2072656C646E6148;
    v5._object = (void *)0xEC00000020726F66;
    String.append(_:)(v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAnimationAction.Type);
    v6._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._object = (void *)0x8000000228351880;
    v7._countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v7);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    return 0;
  }
  return SceneNullable;
}

uint64_t outlined consume of AnimationLibraryComponent?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of String??(a3, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayAnimationActionHandler()
{
  return &type metadata for PlayAnimationActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in PlayAnimationActionHandler()
{
  return &protocol witness table for PlayAnimationAction;
}

uint64_t getEnumTagSinglePayload for AudioFileResource.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AudioFileResource.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AudioFileResource.Error(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for AudioFileResource.Error(void *result, int a2)
{
  if (a2 < 0)
  {
    *uint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioFileResource.Error()
{
  return &type metadata for AudioFileResource.Error;
}

unint64_t lazy protocol witness table accessor for type AudioFileResource.Error and conformance AudioFileResource.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioFileResource.Error and conformance AudioFileResource.Error;
  if (!lazy protocol witness table cache variable for type AudioFileResource.Error and conformance AudioFileResource.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileResource.Error and conformance AudioFileResource.Error);
  }
  return result;
}

uint64_t AudioFileResource.Error.errorDescription.getter(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0x206E776F6E6B6E55;
  }
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000012;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AudioFileResource.Error()
{
  return AudioFileResource.Error.errorDescription.getter(*(void *)v0, *(void **)(v0 + 8));
}

double __REAssetManager.__allocating_init(handle:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(unsigned char *)(v2 + 80) = 2;
  *(_WORD *)(v2 + 96) = 514;
  *(void *)(v2 + 88) = a1;
  return result;
}

uint64_t __AssetLoadRequest.add(asset:)()
{
  return REAssetLoadRequestAddAsset();
}

{
  return REAssetLoadRequestAddAsset();
}

uint64_t static __REAsset.__fromHandleTransfer(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for __REAsset();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

RealityKit::__REAssetIdentifier __swiftcall __REAssetIdentifier.init(stringLiteral:)(RealityKit::__REAssetIdentifier stringLiteral)
{
  *uint64_t v1 = stringLiteral;
  return stringLiteral;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAssetIdentifier.CodingKeys()
{
  return 0x65756C6176;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAssetIdentifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAssetIdentifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAssetIdentifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __REAssetIdentifier.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetIdentifier.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t __REAssetIdentifier.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAssetIdentifier.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance __REAssetIdentifier@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAssetIdentifier@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return __REAssetIdentifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAssetIdentifier(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAssetIdentifier.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t static __REAsset.__fromHandle(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  RERetain();
  type metadata accessor for __REAsset();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t __REAsset.debugDescription.getter()
{
  uint64_t v0 = (void *)REAssetCopyDescription();

  return String.init(_:)(v0)._countAndFlagsBits;
}

uint64_t __REAsset.sanitizedDescription.getter()
{
  uint64_t v0 = (void *)REAssetCopyDescription();

  return String.init(_:)(v0)._countAndFlagsBits;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAsset()
{
  uint64_t v0 = (void *)REAssetCopyDescription();

  return String.init(_:)(v0)._countAndFlagsBits;
}

void __REAsset.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(v0 + 16));
}

BOOL static __REAsset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

Swift::Int __REAsset.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __REAsset()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v1 + 16));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance __REAsset()
{
  Hasher._combine(_:)(*(void *)(*(void *)v0 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __REAsset()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(*(void *)v0 + 16));
  return Hasher._finalize()();
}

uint64_t __REAssetManager.init(handle:)(uint64_t a1)
{
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(unsigned char *)(v1 + 80) = 2;
  *(_WORD *)(v1 + 96) = 514;
  *(void *)(v1 + 88) = a1;
  return v1;
}

uint64_t type metadata accessor for __REAsset()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier.CodingKeys and conformance __REAssetIdentifier.CodingKeys);
  }
  return result;
}

uint64_t __REAssetManager._mainBundle.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = outlined init with copy of __REAssetBundle?(v1 + 16, (uint64_t)&v9);
  if ((void)v9)
  {
    long long v4 = v10;
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v4;
    long long v5 = v12;
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 48) = v5;
  }
  else
  {
    outlined destroy of __REAssetBundle?((uint64_t)&v9);
    *((void *)&v10 + 1) = type metadata accessor for __REAssetManager();
    *(void *)&long long v11 = &protocol witness table for __REAssetManager;
    *(void *)&long long v9 = v1;
    outlined init with copy of __REAssetService((uint64_t)&v9, (uint64_t)v8);
    unint64_t v6 = MEMORY[0x263F8EE78];
    Swift::Int v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_retain();
    __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v6, (uint64_t)v8, v7, 0, (uint64_t *)a1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
    outlined init with copy of __REAssetBundle(a1, (uint64_t)&v9);
    swift_beginAccess();
    outlined assign with take of __REAssetBundle?((uint64_t)&v9, v1 + 16);
    return swift_endAccess();
  }
  return result;
}

id __REAssetManager.engineQueue.getter()
{
  EngineQueue = (void *)REAssetManagerGetEngineQueue();

  return EngineQueue;
}

uint64_t __REAssetManager.syncLoadsShouldWaitForResourceSharing.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 80);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = 0;
  *(unsigned char *)(v0 + 80) = 0;
  return result;
}

uint64_t __REAssetManager.syncLoadsShouldWaitForResourceSharing.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80) = result;
  return result;
}

unsigned char *(*__REAssetManager.syncLoadsShouldWaitForResourceSharing.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = __REAssetManager.syncLoadsShouldWaitForResourceSharing.getter() & 1;
  return __REAssetManager.syncLoadsShouldWaitForResourceSharing.modify;
}

unsigned char *__REAssetManager.syncLoadsShouldWaitForResourceSharing.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 80) = result[8];
  return result;
}

uint64_t __REAssetManager.isFullLoadTracingEnabled.getter()
{
  return _REAssetManagerIsFullLoadTracingEnabled();
}

uint64_t __REAssetManager.loadBundle(at:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v6[3] = type metadata accessor for __REAssetManager();
  v6[4] = &protocol witness table for __REAssetManager;
  v6[0] = v2;
  char v7 = 2;
  swift_retain();
  static __REAssetBundle.__init(url:assetService:materialDefinition:with:)(a1, v6, &v7, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t type metadata accessor for __REAssetManager()
{
  return self;
}

uint64_t __REAssetManager.makeBundle()@<X0>(uint64_t *a1@<X8>)
{
  v7[3] = type metadata accessor for __REAssetManager();
  v7[4] = &protocol witness table for __REAssetManager;
  v7[0] = v1;
  outlined init with copy of __REAssetService((uint64_t)v7, (uint64_t)v6);
  unint64_t v3 = MEMORY[0x263F8EE78];
  Swift::Int v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_retain();
  __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v3, (uint64_t)v6, v4, 0, a1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t __REAssetManager.__getDependencies(asset:)()
{
  REAssetHandleLoadNow();
  REAssetCopyDependencyArray();
  uint64_t result = REAssetDynamicArrayGetSize();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v1 = result;
    uint64_t v2 = MEMORY[0x263F8EE78];
    if (!result)
    {
LABEL_8:
      RERelease();
      return v2;
    }
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v3 = 0;
    while (v1 != v3)
    {
      uint64_t result = REAssetDynamicArrayGetAsset();
      if (!result) {
        goto LABEL_11;
      }
      uint64_t v4 = result;
      ++v3;
      RERetain();
      type metadata accessor for __REAsset();
      *(void *)(swift_allocObject() + 16) = v4;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if (v1 == v3)
      {
        uint64_t v2 = v5;
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t __REAssetManager.__handle.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t __REAssetManager.asyncLoadsShouldWaitForResourceSharing.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 96);
  if (v1 != 2) {
    return v1 & 1;
  }
  id v2 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v3 = (void *)MEMORY[0x22A688A50](0xD00000000000003ALL, 0x80000002283518E0);
  unsigned int v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  uint64_t result = v4 ^ 1;
  *(unsigned char *)(v0 + 96) = v4 ^ 1;
  return result;
}

uint64_t __REAssetManager.asyncLoadsShouldWaitForResourceSharing.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 96) = result;
  return result;
}

unsigned char *(*__REAssetManager.asyncLoadsShouldWaitForResourceSharing.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = __REAssetManager.asyncLoadsShouldWaitForResourceSharing.getter() & 1;
  return __REAssetManager.asyncLoadsShouldWaitForResourceSharing.modify;
}

unsigned char *__REAssetManager.asyncLoadsShouldWaitForResourceSharing.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 96) = result[8];
  return result;
}

uint64_t __REAssetManager.syncLoadsShouldInitiateResourceSharing.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 97);
  if (v1 == 2)
  {
    id v2 = objc_msgSend(self, sel_standardUserDefaults);
    uint64_t v3 = (void *)MEMORY[0x22A688A50](0xD000000000000033, 0x8000000228351920);
    id v4 = objc_msgSend(v2, sel_objectForKey_, v3);

    if (v4)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined init with take of Any(&v7, &v8);
    }
    else
    {
      uint64_t v9 = MEMORY[0x263F8D4F8];
      LOBYTE(v8) = 1;
    }
    char v5 = swift_dynamicCast() ^ 1 | v7;
    *(unsigned char *)(v0 + 97) = v5 & 1;
  }
  else
  {
    char v5 = v1 & 1;
  }
  return v5 & 1;
}

uint64_t __REAssetManager.syncLoadsShouldInitiateResourceSharing.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 97) = result;
  return result;
}

unsigned char *(*__REAssetManager.syncLoadsShouldInitiateResourceSharing.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = __REAssetManager.syncLoadsShouldInitiateResourceSharing.getter() & 1;
  return __REAssetManager.syncLoadsShouldInitiateResourceSharing.modify;
}

unsigned char *__REAssetManager.syncLoadsShouldInitiateResourceSharing.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 97) = result[8];
  return result;
}

uint64_t __REAssetManager.deinit()
{
  outlined destroy of __REAssetBundle?(v0 + 16);
  return v0;
}

uint64_t __REAssetManager.__deallocating_deinit()
{
  outlined destroy of __REAssetBundle?(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for __REAssetService.mainBundle.getter in conformance __REAssetManager@<X0>(uint64_t a1@<X8>)
{
  return __REAssetManager._mainBundle.getter(a1);
}

uint64_t protocol witness for __REAssetService.loadBundle(at:) in conformance __REAssetManager@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *v3;
  v9[3] = type metadata accessor for __REAssetManager();
  v9[4] = a2;
  v9[0] = v7;
  char v10 = 2;
  swift_retain();
  static __REAssetBundle.__init(url:assetService:materialDefinition:with:)(a1, v9, &v10, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t protocol witness for __REAssetService.makeBundle() in conformance __REAssetManager@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  v10[3] = type metadata accessor for __REAssetManager();
  v10[4] = a1;
  v10[0] = v5;
  outlined init with copy of __REAssetService((uint64_t)v10, (uint64_t)v9);
  unint64_t v6 = MEMORY[0x263F8EE78];
  Swift::Int v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_retain();
  __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v6, (uint64_t)v9, v7, 0, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t protocol witness for __REAssetService.__getDependencies(asset:) in conformance __REAssetManager()
{
  return __REAssetManager.__getDependencies(asset:)();
}

uint64_t protocol witness for __REAssetService.syncLoadsShouldWaitForResourceSharing.getter in conformance __REAssetManager()
{
  return __REAssetManager.syncLoadsShouldWaitForResourceSharing.getter() & 1;
}

uint64_t protocol witness for __REAssetService.asyncLoadsShouldWaitForResourceSharing.getter in conformance __REAssetManager()
{
  return __REAssetManager.asyncLoadsShouldWaitForResourceSharing.getter() & 1;
}

uint64_t protocol witness for __REAssetService.syncLoadsShouldInitiateResourceSharing.getter in conformance __REAssetManager()
{
  return __REAssetManager.syncLoadsShouldInitiateResourceSharing.getter() & 1;
}

uint64_t __REAssetService.asset(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  String.utf8CString.getter();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  if (!AssetHandle) {
    return 0;
  }
  type metadata accessor for __REAsset();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = AssetHandle;
  return result;
}

void *__REAssetService.assetRef(named:in:)(uint64_t a1, void *a2, uint64_t a3)
{
  return specialized __REAssetService.assetRef(named:in:)(a1, a2, a3);
}

uint64_t __REAssetService.resource<A>(ofType:at:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v7, a1, a3);
  __REAssetBundle.__resource<A>(ofType:identifier:)(a2, a4);
  return outlined destroy of __REAssetBundle((uint64_t)v7);
}

uint64_t __REAssetBundle.resource<A>(ofType:at:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return __REAssetBundle.resource<A>(ofType:identifier:)(a1, a2);
}

uint64_t __REAssetBundle.__renderGraphEmitter(at:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  String.utf8CString.getter();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  if (!AssetHandle) {
    return 0;
  }
  type metadata accessor for __REAsset();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = AssetHandle;
  type metadata accessor for __RERenderGraphEmitter();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  return result;
}

uint64_t __AssetLoadRequest.deinit()
{
  RERelease();
  return v0;
}

BOOL static __AssetLoadRequest.ResourceSharingSchedulingRequirement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v2 == 3) {
    return v3 == 3;
  }
  if ((v3 & 0xFE) == 2) {
    return 0;
  }
  return (((v2 & 1) == 0) ^ v3) & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __AssetLoadRequest.ResourceSharingSchedulingRequirement(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v2 == 3) {
    return v3 == 3;
  }
  if ((v3 & 0xFE) == 2) {
    return 0;
  }
  return (((v2 & 1) == 0) ^ v3) & 1;
}

uint64_t __AssetLoadRequest.__allocating_init(serviceLocator:)(uint64_t a1)
{
  uint64_t v1 = a1 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)v7);
  uint64_t v2 = v8;
  uint64_t v3 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = AssetRequest;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  swift_release();
  return v5;
}

uint64_t __AssetLoadRequest.__allocating_init(assetService:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v6 = specialized __AssetLoadRequest.__allocating_init(assetService:)(v5, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v6;
}

uint64_t __AssetLoadRequest.__allocating_init(assetService:shouldWaitForPeers:)(void *a1, char a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = AssetRequest;
  if (a2) {
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

uint64_t __AssetLoadRequest.__allocating_init(assetService:shouldLoadOnPeers:shouldWaitForPeers:)(void *a1, char a2, char a3)
{
  return specialized __AssetLoadRequest.__allocating_init(assetService:shouldLoadOnPeers:shouldWaitForPeers:)(a1, a2, a3);
}

uint64_t __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(void *a1)
{
  return specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(a1);
}

void __AssetLoadRequest.add(_:includeDescendants:)()
{
}

uint64_t __AssetLoadRequest.progress.getter()
{
  return MEMORY[0x270F1C490](*(void *)(v0 + 16));
}

uint64_t __AssetLoadRequest.error.getter()
{
  uint64_t result = REAssetLoadRequestCopyError();
  if (result)
  {
    uint64_t v1 = result;
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, 255, type metadata accessor for CFErrorRef);
    uint64_t result = swift_allocError();
    uint64_t *v2 = v1;
  }
  return result;
}

void __AssetLoadRequest.setCompletionHandler(_:)(const void *a1)
{
  uint64_t v1 = _Block_copy(a1);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  v4[4] = _sSbIeyBy_SbIegy_TRTA_0;
  v4[5] = v2;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v4[3] = &block_descriptor_6;
  uint64_t v3 = _Block_copy(v4);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v3);
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, a1 & 1);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

Swift::Void __swiftcall __AssetLoadRequest.waitForCompletion()()
{
}

Swift::Void __swiftcall __AssetLoadRequest.waitForCompletionFromNonEngineQueue()()
{
}

uint64_t closure #1 in __AssetLoadRequest.Statistics.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, double))
{
  REAssetTypeStatsGetTypeName();
  uint64_t v3 = String.init(cString:)();
  uint64_t v5 = v4;
  REAssetTypeStatsGetCumulativeLoadTime();
  double v7 = v6;
  uint64_t CumulativeFileSize = REAssetTypeStatsGetCumulativeFileSize();
  a2(v3, v5, CumulativeFileSize, v7);

  return swift_bridgeObjectRelease();
}

uint64_t specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = AssetRequest;
  if (!REAssetLoadRequestSetLoadAndWaitForResourceSharingClients())
  {
    type metadata accessor for REError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type REError and conformance REError, 255, (void (*)(uint64_t))type metadata accessor for REError);
    swift_allocError();
    double v7 = v13;
    _StringGuts.grow(_:)(25);
    v14._object = (void *)0x8000000228351C60;
    v14._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v14);
    _print_unlocked<A, B>(_:_:)();
    v15._countAndFlagsBits = 2105390;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v11 = 0xD000000000000045;
    long long v12 = "(Failed at REAssetLoadRequestSetLoadAndWaitForResourceSharingClients)";
    goto LABEL_5;
  }
  if ((REAssetLoadRequestSetShouldBlockECSSendsUntilCompleted() & 1) == 0)
  {
    type metadata accessor for REError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type REError and conformance REError, 255, (void (*)(uint64_t))type metadata accessor for REError);
    swift_allocError();
    double v7 = v6;
    _StringGuts.grow(_:)(25);
    v8._object = (void *)0x8000000228351C60;
    v8._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v8);
    _print_unlocked<A, B>(_:_:)();
    v9._countAndFlagsBits = 2105390;
    v9._object = (void *)0xE300000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v11 = 0xD000000000000042;
    long long v12 = "(Failed at REAssetLoadRequestSetShouldBlockECSSendsUntilCompleted)";
LABEL_5:
    unint64_t v17 = (unint64_t)(v12 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v11);
    swift_bridgeObjectRelease();
    *double v7 = 0xD00000000000002DLL;
    v7[1] = 0x8000000228351C30;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v5;
}

uint64_t outlined destroy of __REAssetBundle?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *specialized __REAssetService.assetRef(named:in:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  double v7 = (NSURL *)type metadata accessor for URL();
  reserved = (NSString *)v7[-1]._reserved;
  MEMORY[0x270FA5388](v7);
  Swift::String v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (objc_class *)((char *)&v44 - v12);
  uint64_t v50 = 0;
  uint64_t v45 = a3;
  URL._bridgeToObjectiveC()(&v44);
  Swift::String v15 = v14;
  Swift::String v16 = (void *)RERealityFileCreateByOpeningFileAtURL();

  if (v16)
  {
    v44._baseURL = v7;
    v44._clients = v3;
    v44.super.Class isa = v13;
    v44._urlString = reserved;
    uint64_t v17 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    outlined init with copy of __REAssetService(v17 + 120, (uint64_t)&v46);
    uint64_t v18 = v48;
    uint64_t v19 = v49;
    __swift_project_boxed_opaque_existential_1(&v46, v48);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 32);
    swift_retain();
    Swift::String v15 = (void *)v20(v18, v19);
    String.utf8CString.getter();
    v44._reserved = v16;
    uint64_t AssetDescriptorFromLabel = RERealityFileCreateAssetDescriptorFromLabel();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
    if (AssetDescriptorFromLabel)
    {
      REAssetRegistrationOptionsCreate();
      REAssetRegistrationOptionsSetIsMutable();
      outlined init with copy of __REAssetService(v17 + 120, (uint64_t)&v46);
      uint64_t v22 = v48;
      uint64_t v23 = v49;
      __swift_project_boxed_opaque_existential_1(&v46, v48);
      (*(void (**)(uint64_t, uint64_t))(v23 + 32))(v22, v23);
      uint64_t v24 = REAssetHandleCreateFromAssetRegistrationOptions();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
      type metadata accessor for __REAsset();
      Swift::String v15 = (void *)swift_allocObject();
      v15[2] = v24;
      RERelease();
      RERelease();
      swift_release();
      RERelease();
    }
    else
    {
      uint64_t v29 = v50;
      if (v50)
      {
        type metadata accessor for CFErrorRef(0);
        Swift::String v15 = v30;
        lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, 255, type metadata accessor for CFErrorRef);
        uint64_t v31 = swift_allocError();
        void *v32 = v29;
      }
      else
      {
        uint64_t v31 = 0;
      }
      urlString = v44._urlString;
      baseURL = v44._baseURL;
      Class isa = v44.super.isa;
      (*((void (**)(Class, uint64_t, NSURL *))v44._urlString + 2))(v44.super.isa, v45, v44._baseURL);
      if (!v31)
      {
        uint64_t v46 = a1;
        uint64_t v47 = a2;
        swift_bridgeObjectRetain();
        v39._countAndFlagsBits = 544106784;
        v39._object = (void *)0xE400000000000000;
        String.append(_:)(v39);
        lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, 255, MEMORY[0x263F06EA8]);
        v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
        uint64_t v41 = v46;
        Swift::String v15 = v47;
        lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
        swift_allocError();
        *(void *)uint64_t v42 = v41;
        *(void *)(v42 + 8) = v15;
        *(void *)(v42 + 16) = 0;
        *(void *)(v42 + 24) = 0;
        *(unsigned char *)(v42 + 32) = 2;
      }
      ((void (*)(Class, NSURL *))urlString[1])(isa, baseURL);
      swift_willThrow();
      swift_release();
      RERelease();
    }
  }
  else
  {
    uint64_t v25 = v50;
    if (v50)
    {
      type metadata accessor for CFErrorRef(0);
      Swift::String v15 = v26;
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, 255, type metadata accessor for CFErrorRef);
      uint64_t v27 = swift_allocError();
      *Swift::String v28 = v25;
    }
    else
    {
      uint64_t v27 = 0;
    }
    ((void (*)(char *, uint64_t, NSURL *))reserved[2])(v10, v45, v7);
    if (!v27)
    {
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, 255, MEMORY[0x263F06EA8]);
      Swift::String v15 = (void *)dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v34 = v33;
      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      swift_allocError();
      *(void *)uint64_t v35 = v15;
      *(void *)(v35 + 8) = v34;
      *(void *)(v35 + 16) = 0;
      *(void *)(v35 + 24) = 0;
      *(unsigned char *)(v35 + 32) = 2;
    }
    ((void (*)(char *, NSURL *))reserved[1])(v10, v7);
    swift_willThrow();
  }
  return v15;
}

uint64_t outlined destroy of __REAssetBundle(uint64_t a1)
{
  return a1;
}

uint64_t specialized __AssetLoadRequest.__allocating_init(assetService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = AssetRequest;
  return result;
}

uint64_t specialized __AssetLoadRequest.__allocating_init(assetService:shouldLoadOnPeers:shouldWaitForPeers:)(void *a1, char a2, char a3)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = AssetRequest;
  if ((REAssetLoadRequestSetLoadAndWaitForResourceSharingClients() & 1) == 0)
  {
    type metadata accessor for REError();
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type REError and conformance REError, 255, (void (*)(uint64_t))type metadata accessor for REError);
    swift_allocError();
    uint64_t v11 = v10;
    _StringGuts.grow(_:)(92);
    v12._countAndFlagsBits = 0xD00000000000003FLL;
    v12._object = (void *)0x8000000228351D20;
    String.append(_:)(v12);
    if (a2) {
      uint64_t v13 = 1702195828;
    }
    else {
      uint64_t v13 = 0x65736C6166;
    }
    if (a2) {
      unint64_t v14 = 0xE400000000000000;
    }
    else {
      unint64_t v14 = 0xE500000000000000;
    }
    unint64_t v15 = v14;
    String.append(_:)(*(Swift::String *)&v13);
    swift_bridgeObjectRelease();
    v16._object = (void *)0x8000000228351D60;
    v16._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v16);
    if (a3) {
      uint64_t v17 = 1702195828;
    }
    else {
      uint64_t v17 = 0x65736C6166;
    }
    if (a3) {
      unint64_t v18 = 0xE400000000000000;
    }
    else {
      unint64_t v18 = 0xE500000000000000;
    }
    unint64_t v19 = v18;
    String.append(_:)(*(Swift::String *)&v17);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 46;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    *uint64_t v11 = 0;
    v11[1] = 0xE000000000000000;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

uint64_t sub_227EEDD9C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t _sSbIeyBy_SbIegy_TRTA_0(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type __REAssetIdentifier and conformance __REAssetIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier;
  if (!lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAssetIdentifier and conformance __REAssetIdentifier);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in __REAssetIdentifier()
{
  return MEMORY[0x263F8D388];
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in __REAssetIdentifier()
{
  return MEMORY[0x263F8D398];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in __REAssetIdentifier()
{
  return MEMORY[0x263F8D390];
}

uint64_t base witness table accessor for Equatable in __REAsset(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(&lazy protocol witness table cache variable for type __REAsset and conformance __REAsset, a2, (void (*)(uint64_t))type metadata accessor for __REAsset);
}

uint64_t sub_227EEDF20@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = __REAssetManager.syncLoadsShouldWaitForResourceSharing.getter();
  *a1 = result & 1;
  return result;
}

unsigned char *sub_227EEDF50(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 80) = *result;
  return result;
}

uint64_t sub_227EEDF60@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = __REAssetManager.asyncLoadsShouldWaitForResourceSharing.getter();
  *a1 = result & 1;
  return result;
}

unsigned char *sub_227EEDF90(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 96) = *result;
  return result;
}

uint64_t sub_227EEDFA0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = __REAssetManager.syncLoadsShouldInitiateResourceSharing.getter();
  *a1 = result & 1;
  return result;
}

unsigned char *sub_227EEDFD0(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 97) = *result;
  return result;
}

ValueMetadata *type metadata accessor for __REAssetIdentifier()
{
  return &type metadata for __REAssetIdentifier;
}

uint64_t type metadata accessor for REAssetPathMapping()
{
  return self;
}

uint64_t type metadata accessor for REAssetDeduplicationOperation()
{
  return self;
}

uint64_t method lookup function for __REAsset(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __REAsset);
}

uint64_t dispatch thunk of __REAsset.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of __REAsset.sanitizedDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of __REAsset.__handle.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t type metadata accessor for __REAssetDescriptor()
{
  return self;
}

uint64_t type metadata accessor for RESceneDescriptor()
{
  return self;
}

uint64_t type metadata accessor for RERealityFileHeader()
{
  return self;
}

uint64_t dispatch thunk of __REAssetService.mainBundle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of __REAssetService.loadBundle(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of __REAssetService.makeBundle()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of __REAssetService.__handle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of __REAssetService.__getDependencies(asset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of __REAssetService.syncLoadsShouldWaitForResourceSharing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of __REAssetService.asyncLoadsShouldWaitForResourceSharing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of __REAssetService.syncLoadsShouldInitiateResourceSharing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t method lookup function for __REAssetManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __REAssetManager);
}

uint64_t dispatch thunk of __REAssetManager.__allocating_init(handle:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of __REAssetManager.engineQueue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldWaitForResourceSharing.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldWaitForResourceSharing.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldWaitForResourceSharing.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of __REAssetManager.isFullLoadTracingEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of __REAssetManager.mainBundle.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of __REAssetManager.loadBundle(at:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of __REAssetManager.makeBundle()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of __REAssetManager.__getDependencies(asset:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of __REAssetManager.__handle.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of __REAssetManager.asyncLoadsShouldWaitForResourceSharing.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of __REAssetManager.asyncLoadsShouldWaitForResourceSharing.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of __REAssetManager.asyncLoadsShouldWaitForResourceSharing.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldInitiateResourceSharing.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldInitiateResourceSharing.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of __REAssetManager.syncLoadsShouldInitiateResourceSharing.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t type metadata accessor for __AssetLoadRequest()
{
  return self;
}

uint64_t method lookup function for __AssetLoadRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __AssetLoadRequest);
}

uint64_t getEnumTagSinglePayload for __AssetLoadRequest.ResourceSharingSchedulingRequirement(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 3;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x227EEE560);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 1;
  if (v8 <= 1) {
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for __AssetLoadRequest.ResourceSharingSchedulingRequirement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x227EEE648);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for __AssetLoadRequest.ResourceSharingSchedulingRequirement(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for __AssetLoadRequest.ResourceSharingSchedulingRequirement(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for __AssetLoadRequest.ResourceSharingSchedulingRequirement()
{
  return &type metadata for __AssetLoadRequest.ResourceSharingSchedulingRequirement;
}

uint64_t type metadata accessor for __AssetLoadRequest.Statistics()
{
  return self;
}

uint64_t outlined copy of __REAsset.LoadError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 && a5 != 2)
  {
    if (a5 != 1) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for __REAsset.LoadError(uint64_t a1)
{
  return outlined consume of __REAsset.LoadError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t outlined consume of __REAsset.LoadError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 && a5 != 2)
  {
    if (a5 != 1) {
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __REAsset.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of __REAsset.LoadError(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for __REAsset.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of __REAsset.LoadError(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of __REAsset.LoadError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for __REAsset.LoadError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of __REAsset.LoadError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAsset.LoadError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __REAsset.LoadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for __REAsset.LoadError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for __REAsset.LoadError(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for __REAsset.LoadError()
{
  return &type metadata for __REAsset.LoadError;
}

unsigned char *storeEnumTagSinglePayload for __REAssetIdentifier.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227EEEA2CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for __REAssetIdentifier.CodingKeys()
{
  return &unk_26DC94150;
}

uint64_t type metadata accessor for REError()
{
  uint64_t result = type metadata singleton initialization cache for REError;
  if (!type metadata singleton initialization cache for REError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAsset.LoadError and conformance __REAsset.LoadError;
  if (!lazy protocol witness table cache variable for type __REAsset.LoadError and conformance __REAsset.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAsset.LoadError and conformance __REAsset.LoadError);
  }
  return result;
}

uint64_t outlined init with copy of __REAssetBundle?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of __REAssetBundle(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of __REAssetBundle?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetBundle?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for REError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithCopy for REError(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for REError(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of REError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of REError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *assignWithTake for REError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of REError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for REError()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t Entity.ComponentSet.makeIterator()@<X0>(void *a1@<X8>)
{
  int v3 = specialized static Entity.ComponentSet.Iterator.buildSnapshot(_:)(*v1);
  swift_release();
  *a1 = v3;
  a1[1] = v3;
  a1[2] = 0;

  return swift_bridgeObjectRetain();
}

uint64_t Entity.ComponentSet.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(void *)(v2 + 16);
  if (v3 == v4)
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else if (v3 >= v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = outlined init with copy of __REAssetService(v2 + 40 * v3 + 32, a1);
    *(void *)(v1 + 16) = v3 + 1;
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance Entity.ComponentSet.Iterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(void *)(v2 + 16);
  if (v3 == v4)
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else if (v3 >= v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = outlined init with copy of __REAssetService(v2 + 40 * v3 + 32, a1);
    *(void *)(v1 + 16) = v3 + 1;
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Entity.ComponentSet@<X0>(void *a1@<X8>)
{
  unint64_t v3 = specialized static Entity.ComponentSet.Iterator.buildSnapshot(_:)(*v1);
  swift_release();
  *a1 = v3;
  a1[1] = v3;
  a1[2] = 0;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Entity.ComponentSet()
{
  return Entity.ComponentSet.count.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Entity.ComponentSet()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Entity.ComponentSet(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

BOOL static Entity.ComponentSet.Index.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL static Entity.ComponentSet.Index.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Entity.ComponentSet.Index(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Entity.ComponentSet.Index(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Entity.ComponentSet.Index(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Entity.ComponentSet.Index(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t Entity.ComponentSet.startIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REEntityGetComponentCount();
  if (result < 1)
  {
    uint64_t i = 0;
  }
  else
  {
    for (uint64_t i = 0; i < result; ++i)
    {
      uint64_t result = Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)();
      if (result) {
        break;
      }
      uint64_t result = REEntityGetComponentCount();
    }
  }
  *a1 = i;
  return result;
}

uint64_t Entity.ComponentSet.index(after:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)result + 1;
  if (__OFADD__(*(void *)result, 1))
  {
    __break(1u);
  }
  else
  {
    while (1)
    {
      uint64_t result = REEntityGetComponentCount();
      if (v3 >= result) {
        break;
      }
      uint64_t result = Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)();
      if (result) {
        break;
      }
      ++v3;
    }
    *a2 = v3;
  }
  return result;
}

uint64_t Entity.ComponentSet.endIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REEntityGetComponentCount();
  *a1 = result;
  return result;
}

BOOL Entity.ComponentSet.isEmpty.getter()
{
  if (REEntityGetComponentCount() < 1)
  {
    uint64_t v0 = 0;
  }
  else
  {
    uint64_t v0 = 0;
    do
    {
      if (Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)()) {
        break;
      }
      ++v0;
    }
    while (v0 < REEntityGetComponentCount());
  }
  return v0 == REEntityGetComponentCount();
}

BOOL Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)()
{
  type metadata accessor for __ServiceLocator();
  uint64_t v0 = static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)&v13);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  uint64_t v1 = v15;
  REEntityGetComponentAtIndex();
  Swift::UInt Class = REComponentGetClass();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 24);
  if (*(void *)(v4 + 16))
  {
    uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(Class);
    if (v6)
    {
      int v7 = *(unsigned __int8 *)(*(void *)(v4 + 56) + 80 * v5 + 48);
      swift_release();
      return v7 == 2;
    }
  }
  if (one-time initialization token for handlesToCustomComponentTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v11 & 1) == 0))
  {
    swift_endAccess();
    swift_release();
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 16 * v10);
  swift_endAccess();
  BuiltInComponentRegistry.componentInfo(for:)(v12, (uint64_t)&v13);
  swift_release();
  if (v14)
  {
    outlined consume of ComponentInfo?(v13, v14);
    return 0;
  }
  return 1;
}

uint64_t Entity.ComponentSet.formIndex(after:)(uint64_t result)
{
  uint64_t v1 = *(void *)result + 1;
  if (__OFADD__(*(void *)result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = (void *)result;
    while (1)
    {
      uint64_t result = REEntityGetComponentCount();
      if (v1 >= result) {
        break;
      }
      uint64_t result = Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)();
      if (result) {
        break;
      }
      ++v1;
    }
    void *v2 = v1;
  }
  return result;
}

uint64_t *Entity.ComponentSet.distance(from:to:)(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  if (*a2 < *result) {
    goto LABEL_58;
  }
  uint64_t v37 = *a2;
  if (v2 != *a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *a2;
    while (1)
    {
      BOOL v5 = __OFADD__(v3++, 1);
      if (v5) {
        goto LABEL_56;
      }
      BOOL v5 = __OFADD__(v2++, 1);
      if (v5) {
        break;
      }
      uint64_t result = (uint64_t *)REEntityGetComponentCount();
      if (v2 < (uint64_t)result)
      {
        while (1)
        {
          uint64_t Shared = REEngineGetShared();
          if (Shared)
          {
            uint64_t v7 = Shared;
            if (one-time initialization token for lock != -1) {
              swift_once();
            }
            os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
            if (!static __ServiceLocator.sharedEngine || *((void *)static __ServiceLocator.sharedEngine + 3) != v7)
            {
              type metadata accessor for __Engine();
              swift_allocObject();
              static __ServiceLocator.sharedEngine = __Engine.init(coreEngine:)(v7);
              swift_release();
              specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
              specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
            uint64_t v8 = static __ServiceLocator.sharedEngine;
            if (static __ServiceLocator.sharedEngine) {
              goto LABEL_37;
            }
          }
          else
          {
            static __ServiceLocator.sharedEngine = 0;
            swift_release();
            uint64_t v8 = static __ServiceLocator.sharedEngine;
            if (static __ServiceLocator.sharedEngine) {
              goto LABEL_37;
            }
          }
          uint64_t Default = REEngineConfigurationCreateDefault();
          type metadata accessor for EngineConfiguration();
          uint64_t v10 = swift_allocObject();
          *(void *)(v10 + 16) = Default;
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            uint64_t v11 = REEngineConfigurationClone();
            uint64_t v12 = swift_allocObject();
            *(void *)(v12 + 16) = v11;
            swift_release_n();
            uint64_t v10 = v12;
          }
          REEngineConfigurationSetClockMode();
          if (one-time initialization token for defaultServices != -1) {
            swift_once();
          }
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            uint64_t v13 = REEngineConfigurationClone();
            uint64_t v14 = swift_allocObject();
            *(void *)(v14 + 16) = v13;
            swift_release_n();
            uint64_t v10 = v14;
          }
          REEngineConfigurationSetServicesToCreate();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            uint64_t v15 = REEngineConfigurationClone();
            uint64_t v16 = swift_allocObject();
            *(void *)(v16 + 16) = v15;
            swift_release_n();
            uint64_t v10 = v16;
          }
          REEngineConfigurationSetServicesToUpdate();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            uint64_t v17 = REEngineConfigurationClone();
            uint64_t v18 = swift_allocObject();
            *(void *)(v18 + 16) = v17;
            swift_release_n();
            uint64_t v10 = v18;
          }
          REEngineConfigurationSetStartupOptions();
          if (one-time initialization token for defaultRenderFlags != -1) {
            swift_once();
          }
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            uint64_t v19 = REEngineConfigurationClone();
            uint64_t v20 = swift_allocObject();
            *(void *)(v20 + 16) = v19;
            swift_release_n();
            uint64_t v10 = v20;
          }
          REEngineConfigurationSetRenderFlags();
          if (!specialized static __ServiceLocator.__sharedEngine.getter())
          {
            v39[0] = v10;
            int v21 = specialized static __Engine.makeSharedEngine(_:)(v39);
            REEngineSetShared();
            static __ServiceLocator.sharedEngine = v21;
            swift_release();
            static __ServiceLocator.createdSharedEngine = 1;
          }
          swift_release();
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          uint64_t result = (uint64_t *)specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
          uint64_t v8 = static __ServiceLocator.sharedEngine;
          if (!static __ServiceLocator.sharedEngine) {
            goto LABEL_60;
          }
LABEL_37:
          uint64_t result = (uint64_t *)swift_beginAccess();
          uint64_t v22 = v8[5];
          if (!v22) {
            goto LABEL_59;
          }
          uint64_t v23 = v22 + 80;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v23, (uint64_t)v39);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
          type metadata accessor for SceneManager();
          swift_dynamicCast();
          REEntityGetComponentAtIndex();
          Swift::UInt Class = REComponentGetClass();
          swift_beginAccess();
          uint64_t v25 = *(void *)(v38 + 16);
          swift_beginAccess();
          uint64_t v26 = *(void *)(v25 + 24);
          if (*(void *)(v26 + 16) && (uint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v28 & 1) != 0))
          {
            int v29 = *(unsigned __int8 *)(*(void *)(v26 + 56) + 80 * v27 + 48);
            uint64_t result = (uint64_t *)swift_release();
            if (v29 == 2) {
              goto LABEL_6;
            }
          }
          else
          {
            if (one-time initialization token for handlesToCustomComponentTypes != -1) {
              swift_once();
            }
            swift_beginAccess();
            uint64_t v30 = static SceneManager.handlesToCustomComponentTypes;
            if (*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
              && (uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v32 & 1) != 0))
            {
              uint64_t v33 = *(void *)(*(void *)(v30 + 56) + 16 * v31);
              swift_endAccess();
              uint64_t v34 = *(void *)(v38 + 16);
              swift_beginAccess();
              if (!*(void *)(*(void *)(v34 + 16) + 16)
                || (specialized __RawDictionaryStorage.find<A>(_:)(v33), (v35 & 1) == 0))
              {
                uint64_t result = (uint64_t *)swift_release();
                goto LABEL_6;
              }
            }
            else
            {
              swift_endAccess();
            }
            uint64_t result = (uint64_t *)swift_release();
          }
          uint64_t v36 = v2 + 1;
          if (__OFADD__(v2, 1))
          {
            __break(1u);
LABEL_56:
            __break(1u);
            goto LABEL_57;
          }
          uint64_t result = (uint64_t *)REEntityGetComponentCount();
          ++v2;
          if (v36 >= (uint64_t)result)
          {
            uint64_t v2 = v36;
LABEL_6:
            uint64_t v4 = v37;
            break;
          }
        }
      }
      if (v2 == v4) {
        return (uint64_t *)v3;
      }
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    return result;
  }
  return 0;
}

uint64_t Entity.ComponentSet.subscript.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for __ServiceLocator();
  uint64_t v2 = static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)&v25);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  uint64_t v3 = v27;
  uint64_t ComponentAtIndex = REEntityGetComponentAtIndex();
  Swift::UInt Class = REComponentGetClass();
  swift_beginAccess();
  uint64_t v6 = *(void *)(v3 + 16);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 24);
  if (*(void *)(v7 + 16) && (uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(v7 + 56);
    if (*(unsigned char *)(v10 + 80 * v8 + 48) == 2)
    {
      uint64_t v11 = v10 + 80 * v8;
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = *(void *)(v11 + 24);
      uint64_t v25 = ComponentAtIndex;
      uint64_t v14 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 64);
      a1[3] = v12;
      a1[4] = v13;
      __swift_allocate_boxed_opaque_existential_1(a1);
      v14(&v25, v12, v13);
      return swift_release();
    }
  }
  else
  {
    if (one-time initialization token for handlesToCustomComponentTypes != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v15 = static SceneManager.handlesToCustomComponentTypes;
    if (*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
      && (uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v17 & 1) != 0))
    {
      uint64_t v18 = (uint64_t *)(*(void *)(v15 + 56) + 16 * v16);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      swift_endAccess();
      uint64_t Object = RECustomComponentGetObject();
      if (Object)
      {
        uint64_t v22 = Object;
        double v23 = BuiltInComponentRegistry.componentInfo(for:)(v19, (uint64_t)&v25);
        if (!v26)
        {
          (*(void (**)(uint64_t, void, uint64_t, uint64_t, double))(v20 + 96))(v22, 0, v19, v20, v23);
          return swift_release();
        }
        outlined consume of ComponentInfo?(v25, v26);
      }
    }
    else
    {
      swift_endAccess();
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void Entity.ComponentSet.Indices.startIndex.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void Entity.ComponentSet.Indices.endIndex.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

void *Entity.ComponentSet.Indices.index(after:)@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result + 1;
  if (__OFADD__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    while (v3 < REEntityGetComponentCount() && !Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)())
      ++v3;
    uint64_t result = (void *)swift_release();
    *a2 = v3;
  }
  return result;
}

uint64_t Entity.ComponentSet.Indices.formIndex(after:)(uint64_t result)
{
  uint64_t v1 = *(void *)result + 1;
  if (__OFADD__(*(void *)result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = (void *)result;
    while (1)
    {
      uint64_t result = REEntityGetComponentCount();
      if (v1 >= result) {
        break;
      }
      uint64_t result = Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)();
      if (result) {
        break;
      }
      ++v1;
    }
    void *v2 = v1;
  }
  return result;
}

void *Entity.ComponentSet.Indices.subscript.getter@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t *Entity.ComponentSet.Indices.distance(from:to:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2;
  v7[0] = *a1;
  v7[1] = v4;
  uint64_t v6 = v3;
  return Entity.ComponentSet.distance(from:to:)(v7, &v6);
}

uint64_t *Entity.ComponentSet.Indices.subscript.getter@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  uint64_t v5 = v2[2];
  if (*result >= v2[1])
  {
    BOOL v7 = __OFSUB__(v5, v4);
    BOOL v6 = v5 - v4 < 0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v6 = 1;
  }
  if (v6 != v7)
  {
    __break(1u);
  }
  else
  {
    *a2 = *v2;
    a2[1] = v3;
    a2[2] = v4;
    return (uint64_t *)swift_retain();
  }
  return result;
}

uint64_t Entity.ComponentSet.Indices.indices.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  return swift_retain();
}

void protocol witness for Collection.startIndex.getter in conformance Entity.ComponentSet.Indices(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Entity.ComponentSet.Indices(void *a1, void *a2))()
{
  *a1 = *a2;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Entity.ComponentSet.Indices@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  uint64_t v5 = v2[2];
  if (*result >= v2[1])
  {
    BOOL v7 = __OFSUB__(v5, v4);
    BOOL v6 = v5 - v4 < 0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v6 = 1;
  }
  if (v6 != v7)
  {
    __break(1u);
  }
  else
  {
    *a2 = *v2;
    a2[1] = v3;
    a2[2] = v4;
    return (uint64_t *)swift_retain();
  }
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance Entity.ComponentSet.Indices@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  return swift_retain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Entity.ComponentSet.Indices()
{
  return *(void *)(v0 + 8) == *(void *)(v0 + 16);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance Entity.ComponentSet.Indices@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*a1, a2, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance Entity.ComponentSet.Indices@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, a4);
}

uint64_t *protocol witness for Collection.distance(from:to:) in conformance Entity.ComponentSet.Indices(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2;
  v7[0] = *a1;
  v7[1] = v4;
  uint64_t v6 = v3;
  return Entity.ComponentSet.distance(from:to:)(v7, &v6);
}

__n128 protocol witness for Sequence.makeIterator() in conformance Entity.ComponentSet.Indices@<Q0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = result.n128_u64[0];
  return result;
}

uint64_t *protocol witness for Collection.count.getter in conformance Entity.ComponentSet.Indices()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  v5[0] = v0[1];
  v5[1] = v1;
  uint64_t v4 = v2;
  return Entity.ComponentSet.distance(from:to:)(v5, &v4);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Entity.ComponentSet.Indices()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2]);
  swift_release();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance Entity.ComponentSet.Indices(void *a1, uint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t Entity.ComponentSet.indices.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_retain();
  if (REEntityGetComponentCount() < 1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      if (Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)()) {
        break;
      }
      ++v4;
    }
    while (v4 < REEntityGetComponentCount());
  }
  uint64_t result = REEntityGetComponentCount();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = result;
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance Entity.ComponentSet@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  v4[0] = -1;
  v4[1] = v2;
  return Entity.ComponentSet.index(after:)((uint64_t)v4, a1);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Entity.ComponentSet@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REEntityGetComponentCount();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance Entity.ComponentSet(uint64_t **a1))(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  Entity.ComponentSet.subscript.getter(v2);
  return protocol witness for Collection.subscript.read in conformance PhysicsJoints;
}

uint64_t protocol witness for Collection.subscript.getter in conformance Entity.ComponentSet@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], *v2, a2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance Entity.ComponentSet@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*a1, a2, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance Entity.ComponentSet@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, a4);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance Entity.ComponentSet(void *a1)
{
  uint64_t v3 = *v1;
  v5[0] = *a1;
  v5[1] = v3;
  uint64_t result = Entity.ComponentSet.index(after:)((uint64_t)v5, &v6);
  *a1 = v6;
  return result;
}

void *specialized static Entity.ComponentSet.Iterator.buildSnapshot(_:)(uint64_t a1)
{
  type metadata accessor for __ServiceLocator();
  uint64_t v2 = static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v61);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  uint64_t ComponentCount = REEntityGetComponentCount();
  if (ComponentCount <= 0)
  {
    swift_release();
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v4 = ComponentCount;
  v51[1] = v59;
  uint64_t v5 = (uint64_t *)(v59 + 16);
  swift_beginAccess();
  uint64_t v6 = 0;
  BOOL v7 = (void *)MEMORY[0x263F8EE78];
  unint64_t v8 = 0x2681BB000uLL;
  uint64_t v54 = a1;
  uint64_t v53 = v4;
  uint64_t v52 = (uint64_t *)(v59 + 16);
  do
  {
    uint64_t ComponentAtIndex = REEntityGetComponentAtIndex();
    Swift::UInt Class = REComponentGetClass();
    uint64_t v11 = *v5;
    swift_beginAccess();
    uint64_t v12 = *(void *)(v11 + 24);
    if (*(void *)(v12 + 16))
    {
      uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(Class);
      if (v14)
      {
        uint64_t v15 = *(void *)(v12 + 56);
        uint64_t v16 = v15 + 80 * v13;
        if (*(unsigned char *)(v16 + 48) != 2) {
          goto LABEL_4;
        }
        uint64_t v18 = *(void *)(v16 + 8);
        uint64_t v17 = *(void *)(v16 + 16);
        uint64_t v19 = *(void *)(v16 + 24);
        uint64_t v20 = *(void *)(v15 + 80 * v13 + 72);
        uint64_t v58 = ComponentAtIndex;
        uint64_t v56 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 64);
        uint64_t v62 = v17;
        uint64_t v63 = v19;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v61);
        uint64_t v55 = v20;
        swift_bridgeObjectRetain();
        uint64_t v57 = v18;
        uint64_t v22 = v19;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v56(&v58, v17, v19);
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        __int16 v60 = v7;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
          BOOL v7 = (void *)isUniquelyReferenced_nonNull_native;
          __int16 v60 = (void *)isUniquelyReferenced_nonNull_native;
        }
        unint64_t v25 = v7[2];
        unint64_t v24 = v7[3];
        if (v25 >= v24 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v7);
          __int16 v60 = (void *)isUniquelyReferenced_nonNull_native;
        }
        __n128 v26 = MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
        char v28 = (char *)v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v29 + 16))(v28, boxed_opaque_existential_1, v17, v26);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, (uint64_t)v28, (uint64_t *)&v60, v17, v22);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
        BOOL v7 = v60;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v4 = v53;
        uint64_t v5 = v52;
        goto LABEL_25;
      }
    }
    if (*(void *)(v8 + 1624) != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v30 = static SceneManager.handlesToCustomComponentTypes;
    if (!*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
      || (uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v32 & 1) == 0))
    {
      swift_endAccess();
      goto LABEL_4;
    }
    uint64_t v33 = (uint64_t *)(*(void *)(v30 + 56) + 16 * v31);
    uint64_t v34 = *v33;
    uint64_t v35 = v33[1];
    swift_endAccess();
    uint64_t Object = RECustomComponentGetObject();
    if (Object)
    {
      uint64_t v37 = Object;
      uint64_t v38 = *v5;
      swift_beginAccess();
      if (!*(void *)(*(void *)(v38 + 16) + 16)
        || (specialized __RawDictionaryStorage.find<A>(_:)(v34), (v39 & 1) == 0))
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void, uint64_t, uint64_t))(v35 + 96))(v61, v37, 0, v34, v35);
        char v40 = swift_isUniquelyReferenced_nonNull_native();
        __int16 v60 = v7;
        if ((v40 & 1) == 0)
        {
          BOOL v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
          __int16 v60 = v7;
        }
        unint64_t v42 = v7[2];
        unint64_t v41 = v7[3];
        if (v42 >= v41 >> 1) {
          __int16 v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v7);
        }
        uint64_t v43 = v62;
        uint64_t v44 = v63;
        uint64_t v45 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v61, v62);
        __n128 v46 = MEMORY[0x270FA5388](v45);
        uint64_t v48 = (char *)v51 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, __n128))(v49 + 16))(v48, v46);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v42, (uint64_t)v48, (uint64_t *)&v60, v43, v44);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
        BOOL v7 = v60;
LABEL_25:
        unint64_t v8 = 0x2681BB000;
      }
    }
LABEL_4:
    ++v6;
  }
  while (v4 != v6);
  swift_release();
  return v7;
}

uint64_t outlined consume of ComponentInfo?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.ComponentSet.Iterator and conformance Entity.ComponentSet.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ComponentSet.Iterator and conformance Entity.ComponentSet.Iterator;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet.Iterator and conformance Entity.ComponentSet.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet.Iterator and conformance Entity.ComponentSet.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet.Index and conformance Entity.ComponentSet.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet.Indices and conformance Entity.ComponentSet.Indices);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Entity.ComponentSet.Indices()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<Entity.ComponentSet.Indices> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<Entity.ComponentSet.Indices>);
}

unint64_t lazy protocol witness table accessor for type Entity.ComponentSet and conformance Entity.ComponentSet()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ComponentSet and conformance Entity.ComponentSet;
  if (!lazy protocol witness table cache variable for type Entity.ComponentSet and conformance Entity.ComponentSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ComponentSet and conformance Entity.ComponentSet);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Entity.ComponentSet()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<Entity.ComponentSet> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<Entity.ComponentSet>);
}

void *initializeBufferWithCopyOfBuffer for Entity.ComponentSet.Iterator(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Entity.ComponentSet.Iterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for Entity.ComponentSet.Iterator(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for Entity.ComponentSet.Iterator()
{
  return &type metadata for Entity.ComponentSet.Iterator;
}

ValueMetadata *type metadata accessor for Entity.ComponentSet.Index()
{
  return &type metadata for Entity.ComponentSet.Index;
}

uint64_t initializeBufferWithCopyOfBuffer for Entity.ComponentSet.Indices(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

void *assignWithCopy for Entity.ComponentSet.Indices(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for Entity.ComponentSet.Indices(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.ComponentSet.Iterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.ComponentSet.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Entity.ComponentSet.Indices()
{
  return &type metadata for Entity.ComponentSet.Indices;
}

void one-time initialization function for basicSpinAnimationData()
{
  static EmphasizeAnimations.basicSpinAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicSpinAnimationData;
}

void one-time initialization function for playfulSpinAnimationData()
{
  static EmphasizeAnimations.playfulSpinAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulSpinAnimationData;
}

void one-time initialization function for wildSpinAnimationData()
{
  static EmphasizeAnimations.wildSpinAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildSpinAnimationData;
}

void *specialized static EmphasizeAnimations.createEmphasizeSpinAnimation(style:)(unsigned char *a1)
{
  if (!*a1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 97, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for basicSpinAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 148, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for playfulSpinAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 27, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for wildSpinAnimationData != -1) {
LABEL_9:
  }
    swift_once();
LABEL_8:
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t HasSynchronization.synchronization.setter(uint64_t a1)
{
  outlined init with take of SynchronizationComponent?(a1, (uint64_t)v5);
  uint64_t v2 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v4);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v5);
  swift_release();
  outlined release of SynchronizationComponent?(v5);
  return v2(v4, 0);
}

uint64_t outlined init with take of SynchronizationComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t HasSynchronization.synchronization.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);

  return swift_release();
}

double key path getter for HasSynchronization.synchronization : <A>A@<D0>(uint64_t a1@<X8>)
{
  HasSynchronization.synchronization.getter((uint64_t)v5);
  uint64_t v2 = v6;
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  return result;
}

uint64_t key path setter for HasSynchronization.synchronization : <A>A(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  v6[0] = *a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  outlined copy of SynchronizationComponent?(v6[0], v1, v2, v3);
  return HasSynchronization.synchronization.setter((uint64_t)v6);
}

void (*HasSynchronization.synchronization.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  BOOL v7 = malloc(0x40uLL);
  *a1 = v7;
  v7[6] = a3;
  v7[7] = v3;
  void v7[5] = a2;
  HasSynchronization.synchronization.getter((uint64_t)v7);
  return HasSynchronization.synchronization.modify;
}

void HasSynchronization.synchronization.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  v9[0] = v4;
  v9[1] = v5;
  v9[2] = v6;
  v9[3] = v7;
  v9[4] = v8;
  if (a2)
  {
    outlined copy of SynchronizationComponent?(v4, v5, v6, v7);
    HasSynchronization.synchronization.setter((uint64_t)v9);
    outlined consume of SynchronizationComponent?(*v3, v3[1], v3[2], v3[3]);
  }
  else
  {
    HasSynchronization.synchronization.setter((uint64_t)v9);
  }

  free(v3);
}

uint64_t HasSynchronization.isOwner.getter()
{
  HasSynchronization.synchronization.getter((uint64_t)&v2);
  char v0 = (v5 == 2) | v3;
  outlined consume of SynchronizationComponent?(v2, v3, v4, v5);
  return v0 & 1;
}

uint64_t HasSynchronization.requestOwnership(timeout:_:)(uint64_t (*a1)(long long *), uint64_t a2, double a3)
{
  if (HasSynchronization.isOwner.getter())
  {
    LOBYTE(v13) = 0;
    return a1(&v13);
  }
  else
  {
    HasSynchronization.synchronization.getter((uint64_t)&v13);
    uint64_t v7 = v15;
    if (v15 == 2)
    {
      long long v9 = v13;
      double v10 = v14;
      uint64_t v11 = 2;
      uint64_t v12 = v16;
    }
    else
    {
      uint64_t v8 = *(void *)&v14;
      swift_retain();
      outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v8, v7);
      long long v9 = v13;
      double v10 = a3;
      uint64_t v11 = (uint64_t)a1;
      uint64_t v12 = a2;
    }
    return HasSynchronization.synchronization.setter((uint64_t)&v9);
  }
}

uint64_t HasSynchronization.withUnsynchronized(_:)(uint64_t (*a1)(uint64_t))
{
  void (*v3)(uint64_t *__return_ptr);
  uint64_t ComponentByClass;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = *(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 88);
  v3(&v7);
  RENetworkComponentGetComponentType();
  ComponentBySwift::UInt Class = REEntityGetComponentByClass();
  if (ComponentByClass) {
    ComponentBySwift::UInt Class = RENetworkComponentSetSuppressMarkDirty();
  }
  uint64_t v5 = a1(ComponentByClass);
  ((void (*)(uint64_t *__return_ptr, uint64_t))v3)(&v7, v5);
  RENetworkComponentGetComponentType();
  double result = REEntityGetComponentByClass();
  if (result)
  {
    return RENetworkComponentSetSuppressMarkDirty();
  }
  return result;
}

BOOL static SynchronizationComponent.OwnershipTransferMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SynchronizationComponent.OwnershipTransferMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t SynchronizationComponent.identifier.getter()
{
  return *(void *)v0;
}

uint64_t SynchronizationComponent.isOwner.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

void SynchronizationComponent.ownershipTransferMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 10);
}

unsigned char *SynchronizationComponent.ownershipTransferMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 10) = *result;
  return result;
}

uint64_t (*SynchronizationComponent.ownershipTransferMode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SynchronizationComponent.init()@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 7) = 0;
  *(void *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_228323FE0;
  *(void *)(a1 + 32) = 0;
  return result;
}

double static SynchronizationComponent.__fromCore(_:)@<D0>(uint64_t a1@<X8>)
{
  char IsAuthoritative = RENetworkComponentIsAuthoritative();
  char ShouldAlwaysMigrate = RENetworkComponentShouldAlwaysMigrate();
  uint64_t v4 = RENetworkComponentGuid();
  char IsOwnershipLocked = RENetworkComponentIsOwnershipLocked();
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = IsAuthoritative;
  *(unsigned char *)(a1 + 9) = ShouldAlwaysMigrate;
  *(unsigned char *)(a1 + 10) = IsOwnershipLocked;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_228323FE0;
  *(void *)(a1 + 32) = 0;
  return result;
}

uint64_t SynchronizationComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FirstWhere<Scene.Publisher<SynchronizationEvents.OwnershipResponse>>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  uint64_t v8 = *v1;
  char v9 = *((unsigned char *)v1 + 10);
  uint64_t v11 = v1[2];
  double v10 = (void (*)(long long *))v1[3];
  uint64_t v12 = v1[4];
  RENetworkComponentSetAlwaysMigrate();
  uint64_t result = RENetworkComponentIsOwnershipLocked();
  if (result)
  {
    if ((v9 & 1) == 0) {
      uint64_t result = RENetworkComponentUnlockEntity();
    }
  }
  else if (v9)
  {
    uint64_t result = RENetworkComponentLockEntity();
  }
  if (v10 != (void (*)(long long *))1)
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v10);
    uint64_t result = RENetworkComponentIsAuthoritative();
    if (result)
    {
      if (v10)
      {
        LOBYTE(v24) = 0;
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v10);
        v10(&v24);
        outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
        return outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
      }
    }
    else
    {
      uint64_t IsOwnershipLocked = RENetworkComponentIsOwnershipLocked();
      uint64_t result = MEMORY[0x22A6908B0](v7, IsOwnershipLocked, 0, 0, *(double *)&v11);
      if (v10)
      {
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v10);
        REComponentGetEntity();
        uint64_t SceneNullable = REEntityGetSceneNullable();
        if (SceneNullable)
        {
          uint64_t v16 = SceneNullable;
          type metadata accessor for BoxedSubscription();
          uint64_t v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = 0u;
          uint64_t v22 = v17 + 16;
          *(_OWORD *)(v17 + 32) = 0u;
          *(void *)(v17 + 48) = 0;
          id v18 = (id)RESceneGetSwiftObject();
          type metadata accessor for Scene();
          if (v18)
          {
            swift_dynamicCastClassUnconditional();
          }
          else
          {
            swift_allocObject();
            Scene.init(coreScene:)(v16);
          }
          uint64_t v26 = 0;
          long long v24 = 0u;
          long long v25 = 0u;
          specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)&v24, &v23);
          swift_release();
          outlined destroy of BodyTrackingComponent?((uint64_t)&v24, &demangling cache variable for type metadata for EventSource?);
          *(void *)&long long v24 = v23;
          *(void *)(swift_allocObject() + 16) = v8;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<SynchronizationEvents.OwnershipResponse>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<SynchronizationEvents.OwnershipResponse> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<SynchronizationEvents.OwnershipResponse>);
          Publisher.first(where:)();
          swift_release();
          swift_release();
          uint64_t v19 = (void *)swift_allocObject();
          v19[2] = v17;
          v19[3] = v10;
          v19[4] = v12;
          outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Publishers.FirstWhere<Scene.Publisher<SynchronizationEvents.OwnershipResponse>> and conformance Publishers.FirstWhere<A>, &demangling cache variable for type metadata for Publishers.FirstWhere<Scene.Publisher<SynchronizationEvents.OwnershipResponse>>);
          swift_retain();
          uint64_t v20 = Publisher<>.sink(receiveValue:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
          *((void *)&v25 + 1) = type metadata accessor for AnyCancellable();
          uint64_t v26 = MEMORY[0x263EFDD10];
          outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
          outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
          *(void *)&long long v24 = v20;
          uint64_t v21 = v22;
          swift_beginAccess();
          outlined assign with take of Cancellable?((uint64_t)&v24, v21);
          swift_endAccess();
          return swift_release();
        }
        else
        {
          outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
          return outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v11, (uint64_t)v10);
        }
      }
    }
  }
  return result;
}

BOOL closure #1 in SynchronizationComponent.__toCore(_:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v5);
  swift_release();
  BOOL result = 0;
  if (v6 != 2)
  {
    uint64_t v4 = v5[0];
    outlined consume of SynchronizationComponent?(v5[0], v5[1], v5[2], v6);
    return v4 == a2;
  }
  return result;
}

uint64_t closure #2 in SynchronizationComponent.__toCore(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *))
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t result = outlined init with copy of Cancellable?(v5, (uint64_t)v7);
  if (v8)
  {
    __swift_project_boxed_opaque_existential_1(v7, v8);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    LOBYTE(v7[0]) = *(unsigned char *)(a1 + 48);
    return a3(v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static SynchronizationComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 9;
}

uint64_t static SynchronizationComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8) && *(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 10) ^ *(unsigned __int8 *)(a1 + 10) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

double protocol witness for static Component.__fromCore(_:) in conformance SynchronizationComponent@<D0>(uint64_t a1@<X8>)
{
  char IsAuthoritative = RENetworkComponentIsAuthoritative();
  char ShouldAlwaysMigrate = RENetworkComponentShouldAlwaysMigrate();
  uint64_t v4 = RENetworkComponentGuid();
  char IsOwnershipLocked = RENetworkComponentIsOwnershipLocked();
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = IsAuthoritative;
  *(unsigned char *)(a1 + 9) = ShouldAlwaysMigrate;
  *(unsigned char *)(a1 + 10) = IsOwnershipLocked;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_228323FE0;
  *(void *)(a1 + 32) = 0;
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance SynchronizationComponent(_DWORD *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SynchronizationComponent(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8) && *(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 10) ^ *(unsigned __int8 *)(a1 + 10) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t SynchronizationComponent.shouldMigrateOwnershipWhenAbandoned.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t SynchronizationComponent.shouldMigrateOwnershipWhenAbandoned.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result;
  return result;
}

unsigned char *(*SynchronizationComponent.shouldMigrateOwnershipWhenAbandoned.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 9);
  return SynchronizationComponent.shouldMigrateOwnershipWhenAbandoned.modify;
}

unsigned char *SynchronizationComponent.shouldMigrateOwnershipWhenAbandoned.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 9) = result[8];
  return result;
}

uint64_t SynchronizationComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v19 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  id v18 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *((unsigned char *)v1 + 8);
  LOBYTE(v5) = *((unsigned char *)v1 + 9);
  char v9 = *((unsigned char *)v1 + 10);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v21 = *v1;
  uint64_t v7 = v21;
  char v22 = v8;
  char v23 = v5;
  char v24 = v9;
  uint64_t v25 = v10;
  uint64_t v26 = v11;
  uint64_t v27 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_22831E360;
  *(void *)(v13 + 32) = 0x696669746E656469;
  *(void *)(v13 + 40) = 0xEA00000000007265;
  uint64_t v14 = MEMORY[0x263F8E970];
  *(void *)(v13 + 48) = v7;
  *(void *)(v13 + 72) = v14;
  *(void *)(v13 + 80) = 0x72656E774F7369;
  *(void *)(v13 + 88) = 0xE700000000000000;
  uint64_t v15 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v13 + 96) = v8;
  *(void *)(v13 + 120) = v15;
  *(void *)(v13 + 128) = 0xD000000000000015;
  *(void *)(v13 + 136) = 0x8000000228351E30;
  *(void *)(v13 + 168) = &type metadata for SynchronizationComponent.OwnershipTransferMode;
  *(unsigned char *)(v13 + 144) = v9;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 1, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v18, *MEMORY[0x263F8E830], v19);
  outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v10, v11);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void outlined copy of SynchronizationComponent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 2) {
    outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(a3, a4);
  }
}

uint64_t sub_227EF23E8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

BOOL partial apply for closure #1 in SynchronizationComponent.__toCore(_:)(uint64_t a1)
{
  return closure #1 in SynchronizationComponent.__toCore(_:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_227EF2400()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #2 in SynchronizationComponent.__toCore(_:)(uint64_t a1)
{
  return closure #2 in SynchronizationComponent.__toCore(_:)(a1, *(void *)(v1 + 16), *(uint64_t (**)(void *))(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type SynchronizationComponent.OwnershipTransferMode and conformance SynchronizationComponent.OwnershipTransferMode()
{
  unint64_t result = lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferMode and conformance SynchronizationComponent.OwnershipTransferMode;
  if (!lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferMode and conformance SynchronizationComponent.OwnershipTransferMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferMode and conformance SynchronizationComponent.OwnershipTransferMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SynchronizationComponent.OwnershipTransferCompletionResult and conformance SynchronizationComponent.OwnershipTransferCompletionResult()
{
  unint64_t result = lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferCompletionResult and conformance SynchronizationComponent.OwnershipTransferCompletionResult;
  if (!lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferCompletionResult and conformance SynchronizationComponent.OwnershipTransferCompletionResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SynchronizationComponent.OwnershipTransferCompletionResult and conformance SynchronizationComponent.OwnershipTransferCompletionResult);
  }
  return result;
}

uint64_t sub_227EF2504()
{
  return 16;
}

__n128 sub_227EF2510(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227EF251C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 9);
  return result;
}

unsigned char *sub_227EF2528(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 9) = *result;
  return result;
}

uint64_t destroy for SynchronizationComponent(uint64_t result)
{
  if (*(void *)(result + 24) >= 2uLL) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for SynchronizationComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  uint64_t v3 = (_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v3;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)v3;
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v5;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
  }
  return a1;
}

uint64_t assignWithCopy for SynchronizationComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  uint64_t v4 = (uint64_t *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (long long *)(a2 + 16);
  char v8 = (_OWORD *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7 != 1)
  {
    if (v3 == 1)
    {
      outlined destroy of BodyTrackingComponent?(a1 + 16, &demangling cache variable for type metadata for (Double, (())?));
      uint64_t v10 = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v5 = *v6;
      *(void *)(v5 + 16) = v10;
      return a1;
    }
    *(void *)uint64_t v5 = *(void *)v6;
    uint64_t v11 = *v4;
    if (v7)
    {
      if (v11)
      {
        uint64_t v12 = *(void *)(a2 + 32);
        *(void *)(a1 + 24) = v11;
        *(void *)(a1 + 32) = v12;
        swift_retain();
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v11)
    {
      goto LABEL_12;
    }
LABEL_14:
    *char v8 = *(_OWORD *)v4;
    return a1;
  }
  if (v3 != 1)
  {
    *(void *)uint64_t v5 = *(void *)v6;
    uint64_t v11 = *v4;
    if (!*v4) {
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v13 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v13;
    swift_retain();
    return a1;
  }
  long long v9 = *v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)uint64_t v5 = v9;
  return a1;
}

uint64_t assignWithTake for SynchronizationComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  uint64_t v3 = (void *)(a1 + 16);
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v6 = (_OWORD *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 != 1)
  {
    char v8 = (_OWORD *)(a2 + 24);
    uint64_t v7 = *(void *)(a2 + 24);
    if (v7 != 1)
    {
      void *v3 = *v4;
      if (v5)
      {
        if (v7)
        {
          uint64_t v10 = *(void *)(a2 + 32);
          *(void *)(a1 + 24) = v7;
          *(void *)(a1 + 32) = v10;
          swift_release();
          return a1;
        }
        swift_release();
      }
      else if (v7)
      {
        uint64_t v11 = *(void *)(a2 + 32);
        *(void *)(a1 + 24) = v7;
        *(void *)(a1 + 32) = v11;
        return a1;
      }
      *uint64_t v6 = *v8;
      return a1;
    }
    outlined destroy of BodyTrackingComponent?(a1 + 16, &demangling cache variable for type metadata for (Double, (())?));
  }
  *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
  v3[2] = v4[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for SynchronizationComponent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for SynchronizationComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SynchronizationComponent()
{
  return &type metadata for SynchronizationComponent;
}

ValueMetadata *type metadata accessor for SynchronizationComponent.OwnershipTransferMode()
{
  return &type metadata for SynchronizationComponent.OwnershipTransferMode;
}

unsigned char *storeEnumTagSinglePayload for SynchronizationComponent.OwnershipTransferMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EF2990);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SynchronizationComponent.OwnershipTransferCompletionResult()
{
  return &type metadata for SynchronizationComponent.OwnershipTransferCompletionResult;
}

void Atomic.wrappedValue.getter(uint64_t a1@<X8>)
{
}

uint64_t Atomic.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized Atomic.wrappedValue.setter();
  unsigned int v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

void Atomic.load()(uint64_t a1@<X8>)
{
  uint64_t v3 = **v1;
  uint64_t v4 = (uint64_t)*v1 + *(void *)(*MEMORY[0x263F8DD00] + v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)((char *)*v1 + ((*(unsigned int *)(v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  partial apply for closure #1 in Atomic.load()(v4, a1);
  os_unfair_lock_unlock(v5);
}

void Atomic.store(_:)()
{
  uint64_t v1 = **v0;
  uint64_t v2 = (uint64_t)*v0 + *(void *)(*MEMORY[0x263F8DD00] + v1 + 16);
  uint64_t v3 = (os_unfair_lock_s *)((char *)*v0 + ((*(unsigned int *)(v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  partial apply for closure #1 in Atomic.store(_:)(v2);
  os_unfair_lock_unlock(v3);
}

void (*Atomic.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  _OWORD v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  long long v9 = malloc(v8);
  uint64_t v5[5] = v9;
  Atomic.load()((uint64_t)v9);
  return Atomic.wrappedValue.modify;
}

void Atomic.wrappedValue.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v5);
    Atomic.store(_:)();
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    Atomic.store(_:)();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t Atomic.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = specialized OSAllocatedUnfairLock.init(uncheckedState:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t specialized OSAllocatedUnfairLock.init(uncheckedState:)()
{
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
}

void sub_227EF2E80(uint64_t a1@<X8>)
{
}

uint64_t sub_227EF2ECC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Atomic();
  return specialized Atomic.wrappedValue.setter(a1, v2);
}

uint64_t sub_227EF2F0C()
{
  return 8;
}

void *sub_227EF2F18(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for Atomic()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in Atomic.store(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v3, v4);
}

uint64_t partial apply for closure #1 in OSAllocatedUnfairLock.init(uncheckedState:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(v4 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4 + *MEMORY[0x263F8DD00]) - 8) + 16))(a2, v3);
}

uint64_t partial apply for closure #1 in Atomic.load()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1);
}

uint64_t OrbitEntityAction.pivotEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return outlined copy of ActionEntityResolution();
}

uint64_t OrbitEntityAction.pivotEntity.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of ActionEntityResolution();
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = v4;
  return result;
}

uint64_t (*OrbitEntityAction.pivotEntity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float OrbitEntityAction.revolutions.getter()
{
  return *(float *)(v0 + 20);
}

void OrbitEntityAction.revolutions.setter(float a1)
{
  *(float *)(v1 + 20) = a1;
}

uint64_t (*OrbitEntityAction.revolutions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 OrbitEntityAction.orbitalAxis.getter()
{
  return v0[2];
}

void OrbitEntityAction.orbitalAxis.setter(__n128 a1)
{
  v1[2] = a1;
}

uint64_t (*OrbitEntityAction.orbitalAxis.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t OrbitEntityAction.orientToPath.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t OrbitEntityAction.orientToPath.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

unsigned char *(*OrbitEntityAction.orientToPath.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 48);
  return OrbitEntityAction.orientToPath.modify;
}

unsigned char *OrbitEntityAction.orientToPath.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 48) = result[8];
  return result;
}

uint64_t (*OrbitEntityAction.isOrientedToPath.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

ValueMetadata *OrbitEntityAction.animatedValueType.getter()
{
  return &type metadata for Transform;
}

uint64_t OrbitEntityAction.isAdditive.getter()
{
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t OrbitEntityAction.isAdditive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 49) = result;
  return result;
}

uint64_t (*OrbitEntityAction.isAdditive.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float32x4_t OrbitEntityAction.init(pivotEntity:revolutions:orbitalAxis:isOrientedToPath:isAdditive:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float32x4_t a6@<Q1>)
{
  char v6 = *(unsigned char *)(a1 + 16);
  int32x4_t v7 = (int32x4_t)vmulq_f32(a6, a6);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  float32x2_t v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  float32x2_t v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(unsigned char *)(a4 + 16) = v6;
  *(float *)(a4 + 20) = a5;
  float32x4_t result = vmulq_n_f32(a6, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  *(float32x4_t *)(a4 + 32) = result;
  *(unsigned char *)(a4 + 48) = a2;
  *(unsigned char *)(a4 + 49) = a3;
  return result;
}

float32x4_t OrbitEntityAction.init(pivotEntity:revolutions:orbitalAxis:orientToPath:isAdditive:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float32x4_t a6@<Q1>)
{
  char v6 = *(unsigned char *)(a1 + 16);
  int32x4_t v7 = (int32x4_t)vmulq_f32(a6, a6);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  float32x2_t v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  float32x2_t v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(unsigned char *)(a4 + 16) = v6;
  *(float *)(a4 + 20) = a5;
  float32x4_t result = vmulq_n_f32(a6, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  *(float32x4_t *)(a4 + 32) = result;
  *(unsigned char *)(a4 + 48) = a2;
  *(unsigned char *)(a4 + 49) = a3;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance OrbitEntityAction.CodingKeys()
{
  unint64_t result = 0x746E45746F766970;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6974756C6F766572;
      break;
    case 2:
      unint64_t result = 0x416C61746962726FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x6974696464417369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance OrbitEntityAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized OrbitEntityAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OrbitEntityAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrbitEntityAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t OrbitEntityAction.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OrbitEntityAction.CodingKeys>);
  uint64_t v16 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v6 = v1[1];
  char v8 = *((unsigned char *)v1 + 16);
  long long v13 = *((_OWORD *)v1 + 2);
  int v9 = *((unsigned __int8 *)v1 + 48);
  int v14 = *((unsigned __int8 *)v1 + 49);
  int v15 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&long long v19 = v7;
  *((void *)&v19 + 1) = v6;
  char v20 = v8;
  char v18 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  uint64_t v10 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v10) {
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v5, v3);
  }
  uint64_t v12 = v16;
  LOBYTE(v19) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  long long v19 = v13;
  char v18 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v19) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v19) = 4;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v5, v3);
}

unint64_t lazy protocol witness table accessor for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys);
  }
  return result;
}

uint64_t OrbitEntityAction.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OrbitEntityAction.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type OrbitEntityAction.CodingKeys and conformance OrbitEntityAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v20 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v19 = a2;
  long long v9 = v21;
  char v10 = v22;
  LOBYTE(v21) = 1;
  outlined copy of ActionEntityResolution();
  KeyedDecodingContainer.decode(_:forKey:)();
  int v12 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  char v20 = 2;
  lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v18 = v21;
  LOBYTE(v21) = 3;
  int v17 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v21) = 4;
  char v14 = KeyedDecodingContainer.decode(_:forKey:)();
  v17 &= 1u;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  int v15 = v19;
  _OWORD *v19 = v9;
  *((unsigned char *)v15 + 16) = v10;
  *((_DWORD *)v15 + 5) = v12;
  v15[2] = v18;
  *((unsigned char *)v15 + 48) = v17;
  *((unsigned char *)v15 + 49) = v14 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined consume of ActionEntityResolution();
}

uint64_t protocol witness for EntityAction.isAdditive.getter in conformance OrbitEntityAction()
{
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t protocol witness for Decodable.init(from:) in conformance OrbitEntityAction@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return OrbitEntityAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance OrbitEntityAction(void *a1)
{
  return OrbitEntityAction.encode(to:)(a1);
}

uint64_t sub_227EF3A90@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 48);
  return result;
}

unsigned char *sub_227EF3A9C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 48) = *result;
  return result;
}

uint64_t destroy for OrbitEntityAction()
{
  return outlined consume of ActionEntityResolution();
}

uint64_t initializeWithCopy for OrbitEntityAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  return a1;
}

uint64_t assignWithCopy for OrbitEntityAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of ActionEntityResolution();
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(unsigned char *)(a1 + 49) = *((unsigned char *)a2 + 49);
  return a1;
}

__n128 __swift_memcpy50_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OrbitEntityAction(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of ActionEntityResolution();
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrbitEntityAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 50)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OrbitEntityAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 50) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 50) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OrbitEntityAction()
{
  return &type metadata for OrbitEntityAction;
}

unsigned char *storeEnumTagSinglePayload for OrbitEntityAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227EF3DA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for OrbitEntityAction.CodingKeys()
{
  return &unk_26DC94620;
}

uint64_t OrbitEntityActionHandler.actionStarted(event:)(float32x4_t *a1)
{
  uint64_t v2 = v1;
  float32x4_t v3 = a1[13];
  float32x4_t v112 = a1[12];
  float32x4_t v113 = v3;
  float32x4_t v4 = a1[15];
  float32x4_t v114 = a1[14];
  float32x4_t v115 = v4;
  float32x4_t v5 = a1[9];
  float32x4_t v108 = a1[8];
  float32x4_t v109 = v5;
  float32x4_t v6 = a1[11];
  float32x4_t v110 = a1[10];
  float32x4_t v111 = v6;
  float32x4_t v7 = a1[5];
  float32x4_t v104 = a1[4];
  float32x4_t v105 = v7;
  float32x4_t v8 = a1[7];
  float32x4_t v106 = a1[6];
  float32x4_t v107 = v8;
  long long v9 = (__int128)a1[1];
  float32x4_t v100 = *a1;
  long long v101 = v9;
  float32x4_t v10 = a1[3];
  float32x4_t v102 = a1[2];
  float32x4_t v103 = v10;
  uint64_t v11 = outlined retain of ActionEvent<OrbitEntityAction>((uint64_t)&v100);
  specialized ActionEvent.animationState.getter(&v116, v11);
  outlined release of ActionEvent<OrbitEntityAction>((uint64_t)&v100);
  if (!v117.i64[1]) {
    return outlined destroy of AnimationStateProtocol?((uint64_t)&v116);
  }
  outlined init with take of BindableDataInternal(&v116, (uint64_t)v97);
  uint64_t v12 = v104.i64[1];
  if (!v104.i64[1]) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    *(void *)&long long v116 = 0;
    *((void *)&v116 + 1) = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(69);
    v19._countAndFlagsBits = 0x2072656C646E6148;
    v19._object = (void *)0xEC00000020726F66;
    String.append(_:)(v19);
    *(void *)&long long v91 = &type metadata for OrbitEntityAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
    v20._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 0xD000000000000037;
    v21._object = (void *)0x8000000228351EB0;
    String.append(_:)(v21);
    specialized static AnimationLogger.logError(_:)(v116, *((void *)&v116 + 1));
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  }
  uint64_t v14 = Strong;
  long long v116 = v101;
  float32x4_t v117 = v102;
  float32x4_t v118 = v103;
  __int16 v119 = v104.i16[0];
  outlined init with take of ActionEntityResolution((uint64_t)&v116, (uint64_t)v120);
  outlined init with take of ActionEntityResolution((uint64_t)v120, (uint64_t)&v121);
  if (v122)
  {
    swift_retain();
    outlined retain of OrbitEntityAction((uint64_t)&v116);
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable)
    {
      outlined release of OrbitEntityAction((uint64_t)&v116);
LABEL_22:
      *(void *)&long long v91 = 0;
      *((void *)&v91 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v31._countAndFlagsBits = 0x2072656C646E6148;
      v31._object = (void *)0xEC00000020726F66;
      String.append(_:)(v31);
      v94.i64[0] = (uint64_t)&type metadata for OrbitEntityAction;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
      v32._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._countAndFlagsBits = 0xD000000000000030;
      v33._object = (void *)0x8000000228351EF0;
      String.append(_:)(v33);
      specialized static AnimationLogger.logError(_:)(v91, *((void *)&v91 + 1));
      swift_release();
      goto LABEL_23;
    }
    uint64_t v16 = SceneNullable;
    id v17 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v17)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v16);
    }
    uint64_t v22 = Scene.findEntity(named:)();
    swift_release();
  }
  else
  {
    *(void *)&long long v91 = v121;
    swift_retain();
    outlined retain of OrbitEntityAction((uint64_t)&v116);
    uint64_t v22 = Entity.subscript.getter((uint64_t *)&v91);
  }
  outlined release of OrbitEntityAction((uint64_t)&v116);
  if (!v22) {
    goto LABEL_22;
  }
  swift_retain();
  swift_release();
  uint64_t *v2 = v22;
  uint64_t v23 = specialized HasHierarchy.parent.getter();
  swift_release();
  uint64_t v89 = v14;
  v90.i64[0] = v12;
  uint64_t v86 = v2;
  uint64_t v88 = v22;
  if (!v23)
  {
    specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v22, 0);
    REMakeSRTFromMatrix();
    long long v85 = v34;
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    goto LABEL_26;
  }
  uint64_t result = specialized HasHierarchy.parent.getter();
  if (result)
  {
    uint64_t v24 = result;
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    long long v87 = static Transform.identity;
    long long v85 = xmmword_2681C7AB0;
    long long v82 = xmmword_2681C7AC0;
    uint64_t v25 = swift_retain();
    *(double *)&long long v26 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v25, v24);
    v81[0] = v26;
    v81[1] = v27;
    long long v83 = v28;
    long long v84 = v29;
    specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v82, (float32x4_t)v85, *(float *)&v87);
    REMakeSRTFromMatrix();
    long long v85 = v30;
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    swift_release();
    swift_release();
LABEL_26:
    uint64_t v36 = v98;
    uint64_t v35 = v99;
    __swift_project_boxed_opaque_existential_1(v97, v98);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v35 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v39 = type metadata accessor for Optional();
    *(void *)&long long v87 = v81;
    uint64_t v40 = *(void *)(v39 - 8);
    MEMORY[0x270FA5388](v39);
    unint64_t v42 = (char *)v81 - v41;
    v37(v36, v35);
    uint64_t v43 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v42, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
    }
    else
    {
      uint64_t v95 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v94);
      (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 32))(boxed_opaque_existential_1, v42, AssociatedTypeWitness);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData);
      if (swift_dynamicCast())
      {
        long long v45 = v92;
        float32x4_t v46 = v93;
        uint64_t v47 = v86;
        long long v83 = v92;
        long long v84 = v91;
        *((_OWORD *)v86 + 5) = v91;
        *((_OWORD *)v47 + 6) = v45;
        long long v82 = (__int128)v46;
        float32x4_t v48 = vsubq_f32(v46, (float32x4_t)v85);
        v48.i32[3] = 0;
        long long v85 = (__int128)v48;
        *((float32x4_t *)v47 + 7) = v48;
        uint64_t v49 = specialized HasHierarchy.parent.getter();
        float32x4_t v50 = v118;
        if (v49)
        {
          long long v87 = (__int128)v118;
          *(double *)v51.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(0, v49);
          *(double *)v54.i64 = simd_float4x4.transform(normal:)((float32x4_t)v87, v51, v52, v53);
          long long v87 = (__int128)v54;
          swift_release();
          float32x4_t v50 = (float32x4_t)v87;
        }
        int32x4_t v55 = (int32x4_t)vmulq_f32((float32x4_t)v85, (float32x4_t)v85);
        v55.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v55, 2), vadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1))).u32[0];
        float32x2_t v56 = vrsqrte_f32((float32x2_t)v55.u32[0]);
        float32x2_t v57 = vmul_f32(v56, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v56, v56)));
        float32x4_t v58 = vmulq_n_f32((float32x4_t)v85, vmul_f32(v57, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v57, v57))).f32[0]);
        float32x4_t v59 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL);
        float32x4_t v60 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v58)), v50, v59);
        float32x4_t v61 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), (int8x16_t)v60, 0xCuLL);
        int32x4_t v62 = (int32x4_t)vmulq_f32(v60, v60);
        v62.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v62, 2), *(float32x2_t *)v62.i8)).u32[0];
        float32x2_t v63 = vrsqrte_f32((float32x2_t)v62.u32[0]);
        float32x2_t v64 = vmul_f32(v63, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v63, v63)));
        float32x4_t v65 = vmulq_n_f32(v61, vmul_f32(v64, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v64, v64))).f32[0]);
        float32x4_t v66 = vmulq_f32(v65, v65);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).f32[0] <= 0.00001)
        {
          *(void *)&long long v91 = 0;
          *((void *)&v91 + 1) = 0xE000000000000000;
          long long v87 = (__int128)v50;
          _StringGuts.grow(_:)(140);
          v75._countAndFlagsBits = 0x2072656C646E6148;
          v75._object = (void *)0xEC00000020726F66;
          String.append(_:)(v75);
          v94.i64[0] = (uint64_t)&type metadata for OrbitEntityAction;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
          v76._countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v76);
          swift_bridgeObjectRelease();
          v77._countAndFlagsBits = 0xD00000000000002FLL;
          v77._object = (void *)0x8000000228351F50;
          String.append(_:)(v77);
          float32x4_t v94 = (float32x4_t)v87;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
          lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>);
          v78._countAndFlagsBits = SIMD.description.getter();
          String.append(_:)(v78);
          swift_bridgeObjectRelease();
          v79._countAndFlagsBits = 0xD00000000000004DLL;
          v79._object = (void *)0x8000000228351F80;
          String.append(_:)(v79);
          specialized static AnimationLogger.logError(_:)(v91, *((void *)&v91 + 1));
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          float32x4_t v72 = (float32x4_t)v87;
        }
        else
        {
          float32x4_t v90 = v58;
          long long v87 = (__int128)v59;
          long long v85 = (__int128)v65;
          swift_release();
          swift_release();
          swift_release();
          float32x4_t v67 = vmlaq_f32(vmulq_f32((float32x4_t)v87, vnegq_f32((float32x4_t)v85)), v90, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL));
          float32x4_t v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL);
          int32x4_t v69 = (int32x4_t)vmulq_f32(v67, v67);
          v69.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v69, 2), *(float32x2_t *)v69.i8)).u32[0];
          float32x2_t v70 = vrsqrte_f32((float32x2_t)v69.u32[0]);
          float32x2_t v71 = vmul_f32(v70, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v70, v70)));
          float32x4_t v72 = vmulq_n_f32(v68, vmul_f32(v71, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v71, v71))).f32[0]);
        }
        *((float32x4_t *)v47 + 1) = v72;
        if ((v119 & 0x100) != 0)
        {
          long long v80 = v83;
          *((_OWORD *)v47 + 2) = v84;
          *((_OWORD *)v47 + 3) = v80;
          *((_OWORD *)v47 + 4) = v82;
        }
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
      }
    }
    *(void *)&long long v91 = 0;
    *((void *)&v91 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    strcpy((char *)&v91, "Handler for ");
    BYTE13(v91) = 0;
    HIWORD(v91) = -5120;
    v94.i64[0] = (uint64_t)&type metadata for OrbitEntityAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
    v73._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    v74._object = (void *)0x8000000228351F30;
    v74._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v74);
    specialized static AnimationLogger.logError(_:)(v91, *((void *)&v91 + 1));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  }
  __break(1u);
  return result;
}

uint64_t OrbitEntityActionHandler.actionUpdated(event:)(long long *a1)
{
  long long v2 = a1[13];
  long long v72 = a1[12];
  long long v73 = v2;
  long long v3 = a1[15];
  long long v74 = a1[14];
  long long v75 = v3;
  long long v4 = a1[9];
  long long v68 = a1[8];
  long long v69 = v4;
  long long v5 = a1[11];
  long long v70 = a1[10];
  long long v71 = v5;
  long long v6 = a1[5];
  long long v64 = a1[4];
  long long v65 = v6;
  long long v7 = a1[7];
  long long v66 = a1[6];
  long long v67 = v7;
  long long v8 = a1[1];
  long long v60 = *a1;
  long long v61 = v8;
  long long v9 = a1[3];
  long long v62 = a1[2];
  long long v63 = v9;
  uint64_t v10 = outlined retain of ActionEvent<OrbitEntityAction>((uint64_t)&v60);
  specialized ActionEvent.animationState.getter(&v29, v10);
  outlined release of ActionEvent<OrbitEntityAction>((uint64_t)&v60);
  if (!*((void *)&v30 + 1)) {
    return outlined destroy of AnimationStateProtocol?((uint64_t)&v29);
  }
  outlined init with take of BindableDataInternal(&v29, (uint64_t)v45);
  outlined init with take of Transform?((uint64_t)&v69 + 8, (uint64_t)v76, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v76, (uint64_t)&v77, &demangling cache variable for type metadata for Double?);
  if (v78 != 1)
  {
    double v11 = v77;
    BOOL v12 = fabs(v77 + -1.0) <= 0.0001;
    int v13 = v77 <= 0.0001 || v12;
    if (v13 == 1 && (v1[11] & 1) == 0 && vabdd_f64(*((double *)v1 + 23), v77) <= 0.0001)
    {
      long long v28 = v1[8];
      long long v27 = v1[9];
      long long v26 = v1[10];
    }
    else
    {
      long long v14 = v1[9];
      long long v56 = v1[8];
      long long v57 = v14;
      long long v15 = v1[11];
      long long v58 = v1[10];
      long long v59 = v15;
      long long v16 = v1[5];
      long long v52 = v1[4];
      long long v53 = v16;
      long long v17 = v1[7];
      long long v54 = v1[6];
      long long v55 = v17;
      long long v18 = v1[1];
      long long v48 = *v1;
      long long v49 = v18;
      long long v19 = v1[3];
      long long v50 = v1[2];
      long long v51 = v19;
      long long v41 = v72;
      long long v42 = v73;
      long long v43 = v74;
      long long v44 = v75;
      long long v37 = v68;
      long long v38 = v69;
      long long v39 = v70;
      long long v40 = v71;
      long long v33 = v64;
      long long v34 = v65;
      long long v35 = v66;
      long long v36 = v67;
      long long v29 = v60;
      long long v30 = v61;
      long long v31 = v62;
      long long v32 = v63;
      OrbitEntityActionHandler.computeOrbitTransform(event:normalizedTime:isAdditive:)((uint64_t)&v29, BYTE1(v64) & 1, v77);
      long long v27 = v21;
      long long v28 = v20;
      long long v26 = v22;
      if (v13)
      {
        v1[8] = v20;
        v1[9] = v21;
        v1[10] = v22;
        *((unsigned char *)v1 + 176) = 0;
      }
      else
      {
        v1[9] = 0u;
        v1[10] = 0u;
        v1[8] = 0u;
        *((unsigned char *)v1 + 176) = 1;
      }
    }
    uint64_t v24 = v46;
    uint64_t v25 = v47;
    __swift_project_boxed_opaque_existential_1(v45, v46);
    long long v29 = v28;
    long long v30 = v27;
    long long v31 = v26;
    (*(void (**)(long long *, ValueMetadata *, uint64_t, uint64_t))(v25 + 64))(&v29, &type metadata for Transform, v24, v25);
    *((double *)v1 + 23) = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
}

uint64_t OrbitEntityActionHandler.computeOrbitTransform(event:normalizedTime:isAdditive:)(uint64_t a1, char a2, double a3)
{
  uint64_t v4 = v3;
  float v7 = *(float *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 72);
  int v9 = *(unsigned __int8 *)(a1 + 80);
  outlined init with take of Transform?(v4, (uint64_t)v37, &demangling cache variable for type metadata for Entity?);
  outlined init with take of Transform?((uint64_t)v37, (uint64_t)&v38, &demangling cache variable for type metadata for Entity?);
  uint64_t v10 = v38;
  if (v38)
  {
    if (v8)
    {
      swift_retain();
      outlined retain of OrbitEntityActionHandler(v4);
      uint64_t v11 = specialized HasHierarchy.parent.getter();
      swift_release();
      if (!v11)
      {
        specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v10, 0);
        REMakeSRTFromMatrix();
        double v35 = v20;
        if (one-time initialization token for identity != -1) {
          swift_once();
        }
        BOOL v15 = 1;
LABEL_18:
        float v21 = -v7;
        double v22 = 1.0 - a3;
        if (!v9)
        {
          double v22 = a3;
          float v21 = v7;
        }
        float v23 = v22;
        *(void *)&double v24 = vmulq_n_f32(*(float32x4_t *)(v4 + 16), __sincosf_stret((float)(v21 * (float)(v23 * 6.2832)) * 0.5).__sinval).u64[0];
        if (v15)
        {
          if (a2)
          {
LABEL_22:
            RESRTInverse();
            *(double *)v28.i64 = specialized static Transform.* infix(_:_:)(v25, v26, v27, (float32x4_t)xmmword_22830EC80);
            float32x4_t v30 = *(float32x4_t *)(v4 + 80);
LABEL_25:
            specialized static Transform.* infix(_:_:)(v28, v24, v29, v30);
            outlined release of TimelineDefinition?(v4);
            return swift_release();
          }
        }
        else
        {
          double v33 = v24;
          swift_once();
          double v24 = v33;
          if (a2) {
            goto LABEL_22;
          }
        }
        float32x4_t v30 = *(float32x4_t *)(v4 + 80);
        float32x4_t v28 = (float32x4_t)xmmword_22830EC80;
        double v29 = v35;
        goto LABEL_25;
      }
      uint64_t result = specialized HasHierarchy.parent.getter();
      if (result)
      {
        uint64_t v13 = result;
        if (one-time initialization token for identity != -1) {
          swift_once();
        }
        float32x4_t v32 = (float32x4_t)xmmword_2681C7AB0;
        float v34 = *(float *)&static Transform.identity;
        double v31 = *(double *)&xmmword_2681C7AC0;
        outlined retain of OrbitEntityActionHandler(v4);
        specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v10, v13);
        specialized simd_float4x4.init(translation:rotation:scale:)(v31, v32, v34);
        REMakeSRTFromMatrix();
        double v35 = v14;
        if (one-time initialization token for identity != -1) {
          swift_once();
        }
        outlined release of TimelineDefinition?(v4);
        swift_release();
        BOOL v15 = one-time initialization token for identity == -1;
        goto LABEL_18;
      }
      __break(1u);
    }
    else
    {
      outlined retain of OrbitEntityActionHandler(v4);
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      strcpy((char *)v36, "Handler for ");
      BYTE5(v36[1]) = 0;
      HIWORD(v36[1]) = -5120;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
      v18._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 0xD00000000000001DLL;
      v19._object = (void *)0x8000000228351E90;
      String.append(_:)(v19);
      specialized static AnimationLogger.logError(_:)(v36[0], v36[1]);
      swift_bridgeObjectRelease();
      if (one-time initialization token for identity != -1) {
        swift_once();
      }
      return outlined release of TimelineDefinition?(v4);
    }
  }
  else
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    strcpy((char *)v36, "Handler for ");
    BYTE5(v36[1]) = 0;
    HIWORD(v36[1]) = -5120;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrbitEntityAction.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._object = (void *)0x8000000228351E70;
    v17._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v17);
    specialized static AnimationLogger.logError(_:)(v36[0], v36[1]);
    uint64_t result = swift_bridgeObjectRelease();
    if (one-time initialization token for identity != -1) {
      return swift_once();
    }
  }
  return result;
}

uint64_t specialized OrbitEntityAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E45746F766970 && a2 == 0xEB00000000797469;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974756C6F766572 && a2 == 0xEB00000000736E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x416C61746962726FLL && a2 == 0xEB00000000736978 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000228351E50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6974696464417369 && a2 == 0xEA00000000006576)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t outlined retain of ActionEvent<OrbitEntityAction>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ActionEvent<OrbitEntityAction>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of OrbitEntityActionHandler(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of ActionEntityResolution(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined retain of OrbitEntityAction(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of OrbitEntityAction(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SIMD3<Float>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeWithCopy for OrbitEntityActionHandler(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  long long v7 = *(_OWORD *)(a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = v7;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OrbitEntityActionHandler(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  long long v4 = *(_OWORD *)(a2 + 128);
  long long v5 = *(_OWORD *)(a2 + 144);
  long long v6 = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 160) = v6;
  *(_OWORD *)(a1 + 128) = v4;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  return a1;
}

__n128 __swift_memcpy192_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for OrbitEntityActionHandler(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  long long v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrbitEntityActionHandler(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 192)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OrbitEntityActionHandler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 192) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OrbitEntityActionHandler()
{
  return &type metadata for OrbitEntityActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in OrbitEntityActionHandler()
{
  return &protocol witness table for OrbitEntityAction;
}

uint64_t __RKEntityPlayTimelineAction.__allocating_init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 240) = 0;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(void *)(v7 + 112) = a2;
  *(void *)(v7 + 120) = a3;
  *(void *)(v7 + 128) = a4;
  *(void *)(v7 + 136) = a5;
  *(void *)(v7 + 144) = a6;
  *(void *)(v7 + 152) = a7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v9 = __RKEntityAction.init(targetEntity:)(0);
  swift_beginAccess();
  *(void *)(v9 + 16) = a1;
  swift_release();
  swift_release();
  swift_release();
  swift_beginAccess();
  *(unsigned char *)(v9 + 105) = 0;
  return v9;
}

uint64_t __RKEntityPlayTimelineAction.resolvedAnimationLibraryKey.getter()
{
  if (!v0[17]) {
    goto LABEL_16;
  }
  uint64_t v1 = v0[19];
  if (!v1) {
    goto LABEL_16;
  }
  uint64_t v2 = v0[18];
  swift_retain();
  swift_bridgeObjectRetain();
  REKeyValueComponentGetComponentType();
  ComponentBySwift::UInt Class = REEntityGetComponentByClass();
  if (!ComponentByClass)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_16:
    uint64_t v7 = v0[15];
    swift_bridgeObjectRetain();
    return v7;
  }
  MEMORY[0x270FA5388](ComponentByClass);
  if ((v1 & 0x1000000000000000) != 0 || !(v1 & 0x2000000000000000 | v2 & 0x1000000000000000))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    _StringGuts._slowWithCString<A>(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v7 = v12;
    uint64_t v9 = v13;
  }
  else
  {
    MEMORY[0x270FA5388](v4);
    if ((v1 & 0x2000000000000000) != 0)
    {
      if (REKeyValueComponentGetStringValue())
      {
        uint64_t v7 = String.init(cString:)();
        uint64_t v9 = v10;
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v9 = 0;
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        uint64_t v5 = (v1 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = v2 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v5 = _StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5SSSg_Tg507_sSRys4f5VGxs5E36_pIgyrzo_ACxsAD_pIegyrzr_lTRSSSg_TG5SRyAGGAKsAD_pIgyrzo_Tf1cn_n(v5, v6, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      uint64_t v9 = v8;
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  if (!v9) {
    goto LABEL_16;
  }
  return v7;
}

uint64_t __RKEntityPlayTimelineAction.startAnimations(targetEntity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v35 = 91;
  unint64_t v36 = 0xE100000000000000;
  double v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  uint64_t v34 = a1;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8285;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_release();
  uint64_t v7 = *(void *)(v1 + 112);
  if (!v7)
  {
    uint64_t v35 = 91;
    unint64_t v36 = 0xE100000000000000;
    os_log_type_t v16 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v16, &v35);
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_retain();
  if (!REEntityGetComponent())
  {
    uint64_t v35 = 91;
    unint64_t v36 = 0xE100000000000000;
    os_log_type_t v17 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v17, &v35);
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  uint64_t v27 = 91;
  uint64_t AnimationLibraryAsset = REAnimationLibraryComponentGetAnimationLibraryAsset();
  unint64_t v28 = 0xE100000000000000;
  if (AnimationLibraryAsset)
  {
    uint64_t v9 = AnimationLibraryAsset;
    type metadata accessor for AnimationLibraryResource();
    uint64_t v10 = (void *)swift_allocObject();
    v10[4] = 0;
    v10[2] = v9;
    RERetain();
    uint64_t EntryCount = REAnimationLibraryAssetGetEntryCount();
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    v10[3] = specialized Array.init(repeating:count:)(0, EntryCount);
    uint64_t v15 = 1;
  }
  else
  {
    specialized AnimationLibraryDefinition.init(_:)(MEMORY[0x263F8EE78], (uint64_t)&v35);
    uint64_t v10 = (void *)v35;
    uint64_t v12 = v36;
    uint64_t v13 = v37;
    uint64_t v15 = v38;
    uint64_t v14 = v39;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v13, v15);
  swift_bridgeObjectRetain();
  uint64_t v18 = __RKEntityPlayTimelineAction.resolvedAnimationLibraryKey.getter();
  uint64_t v26 = v2;
  double v29 = v10;
  unint64_t v30 = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v15;
  uint64_t v33 = v14;
  uint64_t v20 = AnimationLibraryComponent.AnimationCollection.subscript.getter(v18, v19);
  swift_bridgeObjectRelease();
  uint64_t v21 = outlined consume of AnimationLibraryComponent?((uint64_t)v10, v12, v13, v15);
  if (!v20)
  {
    MEMORY[0x270FA5388](v21);
    v25[2] = v26;
    v25[3] = v7;
    double v29 = (void *)v27;
    unint64_t v30 = v28;
    uint64_t v23 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v23, &v29, partial apply for implicit closure #3 in __RKEntityPlayTimelineAction.startAnimations(targetEntity:), v25);
    outlined consume of AnimationLibraryComponent?((uint64_t)v10, v12, v13, v15);
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  swift_bridgeObjectRelease();
  LOBYTE(v29) = 0x80;
  uint64_t v22 = Entity.playAnimation(_:transitionDuration:blendLayerOffset:separateAnimatedValue:startsPaused:clock:handoffType:)(0.0, v20, 0, 1, 0, 0, (unsigned __int8 *)&v29);
  outlined consume of AnimationLibraryComponent?((uint64_t)v10, v12, v13, v15);
  swift_release();
  swift_release();
  return v22;
}

uint64_t implicit closure #3 in __RKEntityPlayTimelineAction.startAnimations(targetEntity:)()
{
  _StringGuts.grow(_:)(89);
  v0._object = (void *)0x80000002283520D0;
  v0._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = __RKEntityPlayTimelineAction.resolvedAnimationLibraryKey.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0xD000000000000038;
  v2._object = (void *)0x80000002283520F0;
  String.append(_:)(v2);
  REEntityGetName();
  v3._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t __RKEntityPlayTimelineAction.stopAnimations(targetEntity:)()
{
  uint64_t v7 = 0;
  unint64_t v8 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8285;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  swift_release();
  REAnimationComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    if (REAnimationComponentHasRunningAnimations())
    {
      if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
        || (swift_beginAccess(), *(unsigned char *)(v0 + 104) == 1) && *(void *)(v0 + 96) == 3)
      {
        REAnimationComponentStopAllAnimations();
        RENetworkMarkComponentDirty();
      }
    }
  }
  uint64_t v7 = 91;
  unint64_t v8 = 0xE100000000000000;
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v5, &v7);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 160) = 0;
  return swift_release();
}

uint64_t __RKEntityPlayTimelineAction.perform(with:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v37 = 91;
  unint64_t v38 = 0xE100000000000000;
  if (v2)
  {
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    uint64_t v41 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  uint64_t v10 = (char *)v37;
  unint64_t v9 = v38;
  uint64_t v11 = *(void *)(v0 + 16);
  if (!v11)
  {
    uint64_t v29 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v37);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v12 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v12 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 105))
    {
      if (*(unsigned char *)(v1 + 105) != 1)
      {
        *(void *)(v1 + 96) = 2;
        uint64_t v19 = 1;
        *(unsigned char *)(v1 + 104) = 1;
        uint64_t v37 = 1;
        LOBYTE(v38) = 1;
        swift_retain();
        __RKEntityAction.state.didset((uint64_t)&v37);
        uint64_t v37 = (uint64_t)v10;
        unint64_t v38 = v9;
        os_log_type_t v31 = static os_log_type_t.error.getter();
        specialized InteractionsLogger.log(_:_:)(v31, &v37);
        swift_bridgeObjectRelease();
        swift_release();
        return v19;
      }
      swift_retain();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v13, &v37);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    uint64_t v32 = (char *)v37;
    unint64_t v33 = v38;
    swift_retain();
    __RKEntityPlayTimelineAction.stopAnimations(targetEntity:)();
  }
  else
  {
    uint64_t v32 = (char *)v37;
    unint64_t v33 = v38;
    swift_retain();
  }
  *(void *)(v1 + 160) = __RKEntityPlayTimelineAction.startAnimations(targetEntity:)(v11);
  swift_release();
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = v11;
  uint64_t v16 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = partial apply for closure #1 in __RKEntityPlayTimelineAction.perform(with:);
  *(void *)(v1 + 40) = v15;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
  os_log_type_t v17 = *(char **)(v1 + 96);
  char v18 = *(unsigned char *)(v1 + 104);
  uint64_t v19 = 1;
  *(void *)(v1 + 96) = 1;
  *(unsigned char *)(v1 + 104) = 1;
  uint64_t v37 = (uint64_t)v17;
  LOBYTE(v38) = v18;
  __RKEntityAction.state.didset((uint64_t)&v37);
  uint64_t v20 = type metadata accessor for Entity();
  uint64_t v35 = v20;
  unint64_t v36 = &protocol witness table for Entity;
  v34[0] = v11;
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v34, 0, (char **)&v37);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for closure #2 in __RKEntityPlayTimelineAction.perform(with:);
  *(void *)(v22 + 24) = v21;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
  lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
  uint64_t v23 = (char *)Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v24 = type metadata accessor for AnyCancellable();
  uint64_t v39 = v24;
  uint64_t v40 = MEMORY[0x263EFDD10];
  swift_release();
  uint64_t v37 = (uint64_t)v23;
  outlined destroy of BodyTrackingComponent?((uint64_t)v34, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v37, v1 + 168);
  swift_endAccess();
  uint64_t v35 = v20;
  unint64_t v36 = &protocol witness table for Entity;
  v34[0] = v11;
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v34, 0, (char **)&v37);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for closure #2 in __RKEntityPlayTimelineAction.perform(with:);
  *(void *)(v26 + 24) = v25;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
  lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
  uint64_t v27 = (char *)Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v39 = v24;
  uint64_t v40 = MEMORY[0x263EFDD10];
  swift_release();
  uint64_t v37 = (uint64_t)v27;
  outlined destroy of BodyTrackingComponent?((uint64_t)v34, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v37, v1 + 208);
  swift_endAccess();
  uint64_t v37 = (uint64_t)v32;
  unint64_t v38 = v33;
  uint64_t v28 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v28, &v37);
  swift_bridgeObjectRelease();
  swift_release();
  return v19;
}

uint64_t closure #1 in __RKEntityPlayTimelineAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 168;
    swift_beginAccess();
    if (*(void *)(v1 + 192))
    {
      outlined init with copy of __REAssetService(v2, (uint64_t)&v3);
      __swift_project_boxed_opaque_existential_1(&v3, *((uint64_t *)&v4 + 1));
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
    }
    uint64_t v5 = 0;
    long long v3 = 0u;
    long long v4 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v3, v2);
    swift_endAccess();
    swift_beginAccess();
    if (*(void *)(v1 + 232))
    {
      outlined init with copy of __REAssetService(v1 + 208, (uint64_t)&v3);
      __swift_project_boxed_opaque_existential_1(&v3, *((uint64_t *)&v4 + 1));
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
    }
    uint64_t v5 = 0;
    long long v3 = 0u;
    long long v4 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v3, v1 + 208);
    swift_endAccess();
    __RKEntityPlayTimelineAction.stopAnimations(targetEntity:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityPlayTimelineAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 160);
    if (v4
      && (swift_retain(),
          swift_retain(),
          BOOL v5 = specialized static AnimationPlaybackController.== infix(_:_:)(v1, v4),
          swift_release(),
          swift_release(),
          v5))
    {
      swift_beginAccess();
      uint64_t v6 = *(void *)(v3 + 96);
      char v7 = *(unsigned char *)(v3 + 104);
      *(void *)(v3 + 96) = 2;
      *(unsigned char *)(v3 + 104) = 1;
      uint64_t v8 = v6;
      char v9 = v7;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v8);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t __RKEntityPlayTimelineAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[14];
  uint64_t v6 = v1[15];
  uint64_t v7 = v1[16];
  uint64_t v8 = v1[17];
  uint64_t v10 = v1[18];
  uint64_t v9 = v1[19];
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t result = __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(v4, v5, v6, v7, v8, v10, v9);
  a1[3] = v3;
  *a1 = result;
  return result;
}

uint64_t __RKEntityPlayTimelineAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = v1[2];
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    uint64_t v11 = v1[14];
    uint64_t v12 = v1[15];
    uint64_t v13 = v1[16];
    uint64_t v14 = v1[17];
    uint64_t v16 = v1[18];
    uint64_t v15 = v1[19];
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    return __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(v3, v11, v12, v13, v14, v16, v15);
  }
  else
  {
    uint64_t v4 = v1[14];
    uint64_t v5 = v1[15];
    uint64_t v6 = v1[16];
    uint64_t v7 = v1[17];
    uint64_t v9 = v1[18];
    uint64_t v8 = v1[19];
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    __RKEntityPlayTimelineAction.init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)(v3, v4, v5, v6, v7, v9, v8);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v17;
    }
    else {
      return 0;
    }
  }
}

void __RKEntityPlayTimelineAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityPlayTimelineAction.init(targetEntity:)()
{
}

uint64_t __RKEntityPlayTimelineAction.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 208, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityPlayTimelineAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 208, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityPlayTimelineAction.__deallocating_deinit()
{
  __RKEntityPlayTimelineAction.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_227EF6EE8()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227EF6F20()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in __RKEntityPlayTimelineAction.perform(with:)()
{
  return closure #1 in __RKEntityPlayTimelineAction.perform(with:)();
}

uint64_t partial apply for closure #2 in __RKEntityPlayTimelineAction.perform(with:)(uint64_t *a1)
{
  return closure #2 in __RKEntityPlayTimelineAction.perform(with:)(a1);
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5SSSg_Tg507_sSRys4f5VGxs5E36_pIgyrzo_ACxsAD_pIegyrzr_lTRSSSg_TG5SRyAGGAKsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3) {
    return v5;
  }
  return result;
}

uint64_t _s10RealityKit5SceneC0A10FoundationE9subscribe2to2on13componentType10rootEntity8matching_7Combine11Cancellable_pxm_AA11EventSource_pSgAA9Component_pXpSgAA0K0CSgSSSgyxctAA0O0RzlFyxcfU1_AA15AnimationEventsO17PlaybackCompletedV_TG5TA_0(uint64_t *a1)
{
  return specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_227EF6FD4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t a1)
{
  return specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

{
  uint64_t v1;
  uint64_t (*v2)(_OWORD *);
  int v3;
  long long v4;
  int v5;
  uint64_t v6;
  long long v7;
  _OWORD v9[2];
  int v10;
  long long v11;
  int v12;
  uint64_t v13;

  uint64_t v2 = *(uint64_t (**)(_OWORD *))(v1 + 16);
  uint64_t v3 = *(_DWORD *)(a1 + 32);
  uint64_t v4 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = *(_DWORD *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  uint64_t v12 = v5;
  uint64_t v13 = v6;
  return v2(v9);
}

uint64_t lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for __RKEntityPlayTimelineAction()
{
  return self;
}

uint64_t method lookup function for __RKEntityPlayTimelineAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityPlayTimelineAction);
}

uint64_t dispatch thunk of __RKEntityPlayTimelineAction.__allocating_init(targetEntity:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)()
{
  return (*(uint64_t (**)(void))(v0 + 576))();
}

uint64_t partial apply for implicit closure #3 in __RKEntityPlayTimelineAction.startAnimations(targetEntity:)()
{
  return implicit closure #3 in __RKEntityPlayTimelineAction.startAnimations(targetEntity:)();
}

uint64_t partial apply for closure #1 in __RKEntityPlayTimelineAction.resolvedAnimationLibraryKey.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REKeyValueComponentGetStringValue();
  if (result) {
    uint64_t result = String.init(cString:)();
  }
  else {
    uint64_t v3 = 0;
  }
  *a1 = result;
  a1[1] = v3;
  return result;
}

double partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<D0>(_OWORD *a1@<X8>)
{
  (*(void (**)(long long *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
  {
    double result = *(double *)&v5;
    *a1 = v5;
  }
  return result;
}

void *HasModel.jointNames.getter()
{
  RESkeletalPoseComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  if (!RESkeletalPoseComponentGetSkeletonCount()) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t JointCount = RESkeletalPoseComponentGetJointCount();
  if (!JointCount) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v1 = JointCount;
  double result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, JointCount & ~(JointCount >> 63), 0, MEMORY[0x263F8EE78]);
  if ((v1 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    do
    {
      RESkeletalPoseComponentGetJointName();
      uint64_t v5 = String.init(cString:)();
      uint64_t v7 = v6;
      unint64_t v9 = v3[2];
      unint64_t v8 = v3[3];
      if (v9 >= v8 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v3);
      }
      ++v4;
      v3[2] = v9 + 1;
      uint64_t v10 = &v3[2 * v9];
      v10[4] = v5;
      void v10[5] = v7;
    }
    while (v1 != v4);
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t HasModel.jointTransforms.getter()
{
  RESkeletalPoseComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  if (RESkeletalPoseComponentCanAccessPostUpdatePoses())
  {
    if (RESkeletalPoseComponentPostUpdatePoseCount())
    {
      uint64_t updated = RESkeletalPoseComponentPostUpdatePoseJointCount();
      if (updated)
      {
        uint64_t v1 = updated;
        if ((updated & 0x8000000000000000) == 0)
        {
          uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v2 + 16) = v1;
          uint64_t v3 = (char *)(v2 + 32);
          PostUpdatePoseJoints = (char *)RESkeletalPoseComponentGetPostUpdatePoseJoints();
          if ((unint64_t)PostUpdatePoseJoints < v2 + 32 + 48 * v1 && v3 < &PostUpdatePoseJoints[48 * v1]) {
            goto LABEL_19;
          }
          memcpy(v3, PostUpdatePoseJoints, 48 * v1);
          goto LABEL_15;
        }
        goto LABEL_18;
      }
    }
    return MEMORY[0x263F8EE78];
  }
  RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  if (!RESkeletalPoseComponentGetSkeletonCount()) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t JointCount = RESkeletalPoseComponentGetJointCount();
  if (!JointCount) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v1 = JointCount;
  if ((JointCount & 0x8000000000000000) == 0)
  {
    uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v2 + 16) = v1;
    RESkeletalPoseComponentGetJointTransforms();
LABEL_15:
    *(void *)(v2 + 16) = v1;
    return v2;
  }
LABEL_18:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t HasModel.jointTransforms.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    goto LABEL_17;
  }
  RESkeletalPoseComponentGetComponentType();
  if (!REEntityGetComponentByClass()) {
    goto LABEL_17;
  }
  if (RESkeletalPoseComponentCanAccessPostUpdatePoses())
  {
    if (RESkeletalPoseComponentPostUpdatePoseCount() && v2 == RESkeletalPoseComponentPostUpdatePoseJointCount()) {
      RESkeletalPoseComponentSetPostUpdatePoseJoints();
    }
    goto LABEL_17;
  }
  RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  if (!RESkeletalPoseComponentGetSkeletonCount()
    || ((result = RESkeletalPoseComponentGetJointCount(), v2 >= result) ? (uint64_t v4 = result) : (uint64_t v4 = v2), !v4))
  {
LABEL_17:
    return swift_bridgeObjectRelease();
  }
  if (result <= v2)
  {
    RESkeletalPoseComponentSetJointTransforms();
  }
  else
  {
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 64;
    do
    {
      uint64_t v7 = v5 + 1;
      RESkeletalPoseComponentSetJointTransform();
      v6 += 48;
      uint64_t v5 = v7;
    }
    while (v4 != v7);
  }
  swift_bridgeObjectRelease();

  return RENetworkMarkComponentDirty();
}

uint64_t (*HasModel.jointTransforms.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = HasModel.jointTransforms.getter();
  return HasModel.jointTransforms.modify;
}

uint64_t HasModel.jointTransforms.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return HasModel.jointTransforms.setter(*a1);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  HasModel.jointTransforms.setter(v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_227EF7610@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = HasModel.jointTransforms.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227EF763C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return HasModel.jointTransforms.setter(v0);
}

uint64_t sub_227EF7668()
{
  return 16;
}

__n128 sub_227EF7674(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t static BlendWeight.fromCore(blendTreeCore:nodeIndex:)@<X0>(uint64_t a1@<X8>)
{
  RETimelineDefinitionBlendTreeNodeGetWeight();
  unsigned int v3 = v2;
  uint64_t result = RETimelineDefinitionBlendTreeNodeGetWeightPath();
  if (!result) {
    goto LABEL_8;
  }
  unint64_t v5 = String.init(cString:)();
  uint64_t v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v7 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_8:
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 24) = 0;
    return result;
  }
  static InternalBindPath.targetFromPath(_:)(v5, v6, (uint64_t)v11);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = v11[1];
  if (v12 == 1)
  {
    *(void *)a1 = v11[0];
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v3;
    char v9 = 1;
  }
  else
  {
    unint64_t v10 = v12 | ((unint64_t)v3 << 32);
    *(void *)a1 = v11[0];
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v10;
    char v9 = 2;
  }
  *(unsigned char *)(a1 + 24) = v9;
  return result;
}

Swift::tuple_weight_Float_weightPath_String __swiftcall BlendWeight.toCore()()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(unsigned __int8 *)(v0 + 24);
  if (*(unsigned char *)(v0 + 24))
  {
    uint64_t v3 = *(void *)(v0 + 8);
    unint64_t v4 = *(void *)(v0 + 16);
    if (v2 == 1)
    {
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      unint64_t v5 = (void *)REBindKeyEscape();
      swift_release();
      uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      v8._countAndFlagsBits = v1;
      v8._object = v7;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = 93;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      unint64_t v2 = 0xD000000000000017;
      unint64_t v10 = (void *)0x800000022834E930;
      LODWORD(v1) = v4;
    }
    else
    {
      v12[0] = *(void *)v0;
      v12[1] = v3;
      char v13 = v4;
      unint64_t v2 = specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)v12, 1);
      uint64_t v1 = HIDWORD(v4);
    }
  }
  else
  {
    unint64_t v10 = (void *)0xE000000000000000;
  }
  float v11 = *(float *)&v1;
  result.weightPath._object = v10;
  result.weightPath._countAndFlagsBits = v2;
  result.weight = v11;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BlendTreeNodeInternal.appendToBlendTreeDefinition(blendTreeDefinition:)(Swift::OpaquePointer blendTreeDefinition)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  unint64_t v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v6 = (*(uint64_t (**)(void *, unint64_t *, uint64_t, uint64_t))(v3 + 8))(blendTreeDefinition._rawValue, &v12, v4, v3);
  Swift::String v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = v6;
  unint64_t v10 = v8;
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

uint64_t specialized static BlendTreeNodeInternal.fromCore(blendTreeCore:nodeIndex:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v37 = v4;
  uint64_t v5 = RETimelineDefinitionBlendTreeNodeCount();
  if (v5 < 0) {
    goto LABEL_40;
  }
  uint64_t v6 = v5;
  if (!v5)
  {
LABEL_32:
    specialized static BlendTreeNodeInternal.fromCore(blendTreeCore:nodeIndex:blendNodeNameMap:)(a1, (uint64_t *)&v37, a2);
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = 0;
  while (v6 != v7)
  {
    if (RETimelineDefinitionBlendTreeNodeGetName())
    {
      uint64_t v8 = String.init(cString:)();
      uint64_t v10 = v9;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
      uint64_t v14 = v4[2];
      BOOL v15 = (v12 & 1) == 0;
      uint64_t v16 = v14 + v15;
      if (__OFADD__(v14, v15)) {
        goto LABEL_36;
      }
      char v17 = v12;
      if (v4[3] >= v16)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v12 & 1) == 0) {
            goto LABEL_21;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if ((v17 & 1) == 0) {
            goto LABEL_21;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
        unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
        if ((v17 & 1) != (v19 & 1)) {
          goto LABEL_41;
        }
        unint64_t v13 = v18;
        if ((v17 & 1) == 0)
        {
LABEL_21:
          v4[(v13 >> 6) + 8] |= 1 << v13;
          uint64_t v29 = (uint64_t *)(v4[6] + 16 * v13);
          *uint64_t v29 = v8;
          v29[1] = v10;
          *(void *)(v4[7] + 8 * v13) = v7;
          uint64_t v30 = v4[2];
          BOOL v31 = __OFADD__(v30, 1);
          uint64_t v32 = v30 + 1;
          if (v31) {
            goto LABEL_38;
          }
          void v4[2] = v32;
          swift_bridgeObjectRetain();
          goto LABEL_5;
        }
      }
      *(void *)(v4[7] + 8 * v13) = v7;
LABEL_5:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
    uint64_t v23 = v4[2];
    BOOL v24 = (v21 & 1) == 0;
    uint64_t v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      goto LABEL_37;
    }
    char v26 = v21;
    if (v4[3] >= v25)
    {
      if (v20)
      {
        if (v21) {
          goto LABEL_25;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v26) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v20);
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_41;
      }
      unint64_t v22 = v27;
      if (v26)
      {
LABEL_25:
        *(void *)(v4[7] + 8 * v22) = v7;
        goto LABEL_6;
      }
    }
    v4[(v22 >> 6) + 8] |= 1 << v22;
    unint64_t v33 = (void *)(v4[6] + 16 * v22);
    *unint64_t v33 = 0;
    v33[1] = 0xE000000000000000;
    *(void *)(v4[7] + 8 * v22) = v7;
    uint64_t v34 = v4[2];
    BOOL v31 = __OFADD__(v34, 1);
    uint64_t v35 = v34 + 1;
    if (v31) {
      goto LABEL_39;
    }
    void v4[2] = v35;
LABEL_6:
    swift_bridgeObjectRelease();
    if (v6 == ++v7)
    {
      uint64_t v37 = v4;
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static BlendTreeNodeInternal.fromCore(blendTreeCore:nodeIndex:blendNodeNameMap:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  if (RETimelineDefinitionBlendTreeNodeGetName())
  {
    uint64_t v6 = String.init(cString:)();
    specialized Dictionary._Variant.removeValue(forKey:)(v6, v7);
    char v9 = v8;
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_7;
    }
  }
  if (RETimelineDefinitionBlendTreeNodeIsClipSource())
  {
    a3[3] = (uint64_t)&type metadata for BlendTreeSourceNode;
    a3[4] = (uint64_t)&protocol witness table for BlendTreeSourceNode;
    uint64_t v10 = swift_allocObject();
    *a3 = v10;
    return BlendTreeSourceNode.init(core:nodeIndex:)(v10 + 16);
  }
  if (!RETimelineDefinitionBlendTreeNodeIsBlend())
  {
LABEL_7:
    a3[3] = (uint64_t)&type metadata for BlendTreeInvalidNode;
    a3[4] = (uint64_t)&protocol witness table for BlendTreeInvalidNode;
    uint64_t result = swift_allocObject();
    *a3 = result;
    *(void *)(result + 16) = 0x64696C61766E69;
    *(void *)(result + 24) = 0xE700000000000000;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 32) = 0;
    *(unsigned char *)(result + 56) = 0;
  }
  else
  {
    a3[3] = (uint64_t)&type metadata for BlendTreeBlendNode;
    a3[4] = (uint64_t)&protocol witness table for BlendTreeBlendNode;
    uint64_t v12 = swift_allocObject();
    *a3 = v12;
    return BlendTreeBlendNode.init(core:nodeIndex:blendNodeNameMap:)(a1, a2, v12 + 16);
  }
  return result;
}

uint64_t BlendTreeSourceNode.init(core:nodeIndex:)@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t Name = RETimelineDefinitionBlendTreeNodeGetName();
  if (Name) {
    uint64_t Name = String.init(cString:)();
  }
  else {
    unint64_t v3 = 0xE000000000000000;
  }
  *(void *)(a1 + 40) = Name;
  *(void *)(a1 + 48) = v3;
  static BlendWeight.fromCore(blendTreeCore:nodeIndex:)((uint64_t)&v15);
  uint64_t v4 = v16;
  char v5 = v17;
  *(_OWORD *)(a1 + 56) = v15;
  *(void *)(a1 + 72) = v4;
  *(unsigned char *)(a1 + 80) = v5;
  uint64_t result = RETimelineDefinitionCreateBlendTreeNodeSourceRef();
  if (result)
  {
    uint64_t v7 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v7, (uint64_t)&v15);
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    __swift_project_boxed_opaque_existential_1(&v15, v17);
    (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
    if (TimelineAsset)
    {
      uint64_t v11 = TimelineAsset;
      type metadata accessor for AnimationResource();
      uint64_t v12 = (void *)swift_allocObject();
      void v12[2] = v11;
      if (REAssetHandleAssetType() == 11) {
        REAnimationSceneAssetGetRootTimeline();
      }
      uint64_t v13 = REAnimationAssetGetName();
      if (v13) {
        uint64_t v13 = String.init(cString:)();
      }
      else {
        unint64_t v14 = 0xE000000000000000;
      }
      v12[3] = v13;
      v12[4] = v14;
      RERetain();
      REAssetSetSwiftObject();
      AnimationResource.definition.getter((uint64_t *)&v15);
      swift_release();
      outlined assign with take of AnimationDefinition?((uint64_t)&v15, a1);
      RERelease();
    }
    return RERelease();
  }
  return result;
}

uint64_t BlendTreeBlendNode.init(core:nodeIndex:blendNodeNameMap:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  if (RETimelineDefinitionBlendTreeNodeGetName())
  {
    uint64_t v6 = String.init(cString:)();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  char IsBlendAdditive = RETimelineDefinitionBlendTreeNodeIsBlendAdditive();
  static BlendWeight.fromCore(blendTreeCore:nodeIndex:)((uint64_t)&v42);
  long long v10 = v42;
  uint64_t v11 = v43;
  char v40 = (char)v44;
  uint64_t result = RETimelineDefinitionBlendTreeConnectionCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = result;
    uint64_t v37 = v11;
    char v38 = IsBlendAdditive;
    uint64_t v39 = a3;
    if (result)
    {
      uint64_t v14 = 0;
      long long v15 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        uint64_t result = RETimelineDefinitionBlendTreeConnectionGetTarget();
        if (result)
        {
          swift_bridgeObjectRetain();
          if (v6 == String.init(cString:)() && v8 == v16)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if ((v17 & 1) == 0) {
              goto LABEL_8;
            }
          }
          uint64_t result = RETimelineDefinitionBlendTreeConnectionGetSource();
          if (result)
          {
            uint64_t v18 = String.init(cString:)();
            uint64_t v20 = *a2;
            if (*(void *)(*a2 + 16))
            {
              unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
              if (v22)
              {
                uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
                swift_bridgeObjectRelease();
                if (!RETimelineDefinitionBlendTreeNodeGetName()) {
                  goto LABEL_22;
                }
                uint64_t v41 = v15;
                uint64_t v24 = String.init(cString:)();
                uint64_t v26 = v25;
                swift_bridgeObjectRetain();
                unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v26);
                unint64_t v27 = a2;
                char v29 = v28;
                swift_bridgeObjectRelease();
                if (v29)
                {
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v31 = *v27;
                  *(void *)&long long v42 = *v27;
                  *unint64_t v27 = 0x8000000000000000;
                  a2 = v27;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    specialized _NativeDictionary.copy()();
                    uint64_t v31 = v42;
                  }
                  swift_bridgeObjectRelease();
                  specialized _NativeDictionary._delete(at:)(v36, v31);
                  *unint64_t v27 = v31;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  long long v15 = v41;
LABEL_22:
                  if (RETimelineDefinitionBlendTreeNodeIsClipSource())
                  {
                    long long v44 = &type metadata for BlendTreeSourceNode;
                    long long v45 = &protocol witness table for BlendTreeSourceNode;
                    *(void *)&long long v42 = swift_allocObject();
                    BlendTreeSourceNode.init(core:nodeIndex:)(v42 + 16);
                  }
                  else if (RETimelineDefinitionBlendTreeNodeIsBlend())
                  {
                    long long v44 = &type metadata for BlendTreeBlendNode;
                    long long v45 = &protocol witness table for BlendTreeBlendNode;
                    *(void *)&long long v42 = swift_allocObject();
                    BlendTreeBlendNode.init(core:nodeIndex:blendNodeNameMap:)(a1, v23, a2);
                  }
                  else
                  {
                    long long v44 = &type metadata for BlendTreeInvalidNode;
                    long long v45 = &protocol witness table for BlendTreeInvalidNode;
                    uint64_t v33 = swift_allocObject();
                    *(void *)&long long v42 = v33;
                    *(void *)(v33 + 16) = 0x64696C61766E69;
                    *(void *)(v33 + 24) = 0xE700000000000000;
                    *(void *)(v33 + 32) = 0;
                    *(void *)(v33 + 40) = 0;
                    *(void *)(v33 + 48) = 0;
                    *(unsigned char *)(v33 + 56) = 0;
                  }
                }
                else
                {
                  swift_bridgeObjectRelease();
                  long long v44 = &type metadata for BlendTreeInvalidNode;
                  long long v45 = &protocol witness table for BlendTreeInvalidNode;
                  uint64_t v32 = swift_allocObject();
                  *(void *)&long long v42 = v32;
                  *(void *)(v32 + 16) = 0x64696C61766E69;
                  *(void *)(v32 + 24) = 0xE700000000000000;
                  *(void *)(v32 + 32) = 0;
                  *(void *)(v32 + 40) = 0;
                  *(void *)(v32 + 48) = 0;
                  *(unsigned char *)(v32 + 56) = 0;
                  a2 = v27;
                  long long v15 = v41;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  long long v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
                }
                unint64_t v35 = v15[2];
                unint64_t v34 = v15[3];
                if (v35 >= v34 >> 1) {
                  long long v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v15);
                }
                v15[2] = v35 + 1;
                uint64_t result = outlined init with take of BindableDataInternal(&v42, (uint64_t)&v15[5 * v35 + 4]);
                goto LABEL_8;
              }
            }
            uint64_t result = swift_bridgeObjectRelease();
          }
        }
LABEL_8:
        if (v13 == ++v14) {
          goto LABEL_34;
        }
      }
    }
    long long v15 = (void *)MEMORY[0x263F8EE78];
LABEL_34:
    *(void *)uint64_t v39 = v15;
    *(unsigned char *)(v39 + 8) = v38;
    *(void *)(v39 + 16) = v6;
    *(void *)(v39 + 24) = v8;
    *(_OWORD *)(v39 + 32) = v10;
    *(void *)(v39 + 48) = v37;
    *(unsigned char *)(v39 + 56) = v40;
  }
  return result;
}

__n128 BlendTreeSourceNode.init(source:name:weight:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>)
{
  __n128 v12 = *a4;
  unint64_t v9 = a4[1].n128_u64[0];
  unsigned __int8 v10 = a4[1].n128_u8[8];
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 32) = 0;
  outlined destroy of BodyTrackingComponent?(a5, &demangling cache variable for type metadata for AnimationDefinition?);
  outlined init with take of BindableDataInternal(a1, a5);
  *(void *)(a5 + 40) = a2;
  *(void *)(a5 + 48) = a3;
  __n128 result = v12;
  *(__n128 *)(a5 + 56) = v12;
  *(void *)(a5 + 72) = v9;
  *(unsigned char *)(a5 + 80) = v10;
  return result;
}

uint64_t BlendTreeSourceNode.source.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of (Int, URL)(v1, a1, &demangling cache variable for type metadata for AnimationDefinition?);
}

uint64_t BlendTreeSourceNode.source.setter(uint64_t a1)
{
  return outlined assign with take of AnimationDefinition?(a1, v1);
}

uint64_t (*BlendTreeSourceNode.source.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeSourceNode.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BlendTreeSourceNode.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*BlendTreeSourceNode.name.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeSourceNode.weight.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 72);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  char v5 = *(unsigned char *)(v1 + 80);
  *(unsigned char *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 BlendTreeSourceNode.weight.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int8 v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(unsigned char *)(v1 + 80));
  __n128 result = v5;
  *(__n128 *)(v1 + 56) = v5;
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 80) = v3;
  return result;
}

uint64_t (*BlendTreeSourceNode.weight.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BlendTreeSourceNode.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:)(Swift::OpaquePointer blendTreeDefinition, Swift::OpaquePointer *duplicateNameMap)
{
  uint64_t v4 = v2;
  uint64_t v8 = *(void *)(v2 + 40);
  unint64_t v7 = *(void *)(v2 + 48);
  uint64_t v40 = v8;
  unint64_t v41 = v7;
  uint64_t v9 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v8 = 0x656372756F53;
    unint64_t v7 = 0xE600000000000000;
    uint64_t v40 = 0x656372756F53;
    unint64_t v41 = 0xE600000000000000;
  }
  rawValue = duplicateNameMap->_rawValue;
  if (!*((void *)duplicateNameMap->_rawValue + 2)) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v39[0] = duplicateNameMap->_rawValue;
    duplicateNameMap->_rawValue = (void *)0x8000000000000000;
    uint64_t v18 = 1;
    uint64_t v19 = v8;
    goto LABEL_12;
  }
  uint64_t v13 = *(void *)(rawValue[7] + 8 * v11);
  swift_bridgeObjectRelease();
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  v39[0] = 45;
  v39[1] = 0xE100000000000000;
  *(void *)&long long v35 = v13 + 1;
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 45;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v40;
  unint64_t v7 = v41;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v39[0] = duplicateNameMap->_rawValue;
  duplicateNameMap->_rawValue = (void *)0x8000000000000000;
  uint64_t v18 = v13 + 1;
  uint64_t v19 = v16;
LABEL_12:
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, v19, v7, isUniquelyReferenced_nonNull_native);
  uint64_t v20 = (uint64_t)duplicateNameMap->_rawValue;
  duplicateNameMap->_rawValue = (void *)v39[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of (Int, URL)(v4, (uint64_t)&v35, &demangling cache variable for type metadata for AnimationDefinition?);
  if (!v37)
  {
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v35, &demangling cache variable for type metadata for AnimationDefinition?);
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v22 = 0xD000000000000031;
    *(void *)(v22 + 8) = 0x80000002283521A0;
    *(unsigned char *)(v22 + 16) = 0;
    swift_willThrow();
    goto LABEL_16;
  }
  outlined init with take of BindableDataInternal(&v35, (uint64_t)v39);
  uint64_t v20 = type metadata accessor for AnimationResource();
  uint64_t v21 = static AnimationResource.generate(with:)((uint64_t)v39);
  if (!v3)
  {
    uint64_t v20 = v21;
    swift_retain();
    int v25 = REAssetHandleAssetType();
    if (v25 == 11)
    {
      uint64_t RootTimeline = REAnimationSceneAssetGetRootTimeline();
      uint64_t v23 = swift_release();
      if (RootTimeline)
      {
LABEL_21:
        uint64_t v27 = RETimelineDefinitionCreateFromTimeline();
        swift_release();
        if (v27)
        {
          uint64_t v28 = specialized static __ServiceLocator.shared.getter() + 120;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v28, (uint64_t)&v35);
          uint64_t v29 = v37;
          uint64_t v30 = v38;
          __swift_project_boxed_opaque_existential_1(&v35, v37);
          (*(void (**)(uint64_t, uint64_t))(v30 + 32))(v29, v30);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
          uint64_t v31 = *(void *)(v4 + 72);
          char v32 = *(unsigned char *)(v4 + 80);
          long long v35 = *(_OWORD *)(v4 + 56);
          uint64_t v36 = v31;
          LOBYTE(v37) = v32;
          BlendWeight.toCore()();
          String.utf8CString.getter();
          String.utf8CString.getter();
          RETimelineDefinitionBlendTreeAddTimelineSource();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
          swift_release();
          swift_release();
          blendTreeDefinition._rawValue = (void *)v40;
          uint64_t v20 = v41;
          RERelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
          swift_allocError();
          *(void *)uint64_t v33 = 0xD000000000000038;
          *(void *)(v33 + 8) = 0x80000002283521E0;
          *(unsigned char *)(v33 + 16) = 0;
          swift_willThrow();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
        }
        goto LABEL_16;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v25 == 5)
    {
      swift_release();
      goto LABEL_21;
    }
LABEL_25:
    uint64_t v23 = swift_release();
    __break(1u);
    goto LABEL_26;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v23 = (uint64_t)blendTreeDefinition._rawValue;
  uint64_t v24 = (void *)v20;
LABEL_27:
  result._object = v24;
  result._countAndFlagsBits = v23;
  return result;
}

uint64_t protocol witness for BlendTreeNode.name.getter in conformance BlendTreeSourceNode()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for BlendTreeNode.name.setter in conformance BlendTreeSourceNode(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*protocol witness for BlendTreeNode.name.modify in conformance BlendTreeSourceNode())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for BlendTreeNode.weight.getter in conformance BlendTreeSourceNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 72);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  char v5 = *(unsigned char *)(v1 + 80);
  *(unsigned char *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 protocol witness for BlendTreeNode.weight.setter in conformance BlendTreeSourceNode(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int8 v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(unsigned char *)(v1 + 80));
  __n128 result = v5;
  *(__n128 *)(v1 + 56) = v5;
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 80) = v3;
  return result;
}

uint64_t (*protocol witness for BlendTreeNode.weight.modify in conformance BlendTreeSourceNode())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for BlendTreeNodeInternal.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:) in conformance BlendTreeSourceNode(Swift::OpaquePointer a1, Swift::OpaquePointer *a2)
{
  return BlendTreeSourceNode.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:)(a1, a2)._countAndFlagsBits;
}

double protocol witness for BlendTreeNodeInternal.duration.getter in conformance BlendTreeSourceNode()
{
  outlined init with copy of (Int, URL)(v0, (uint64_t)&v5, &demangling cache variable for type metadata for AnimationDefinition?);
  if (v6)
  {
    outlined init with take of BindableDataInternal(&v5, (uint64_t)v7);
    uint64_t v1 = v8;
    uint64_t v2 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    double v3 = (*(double (**)(uint64_t, uint64_t))(v2 + 272))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for AnimationDefinition?);
    return 0.0;
  }
  return v3;
}

__n128 BlendTreeBlendNode.init(sources:name:weight:isAdditive:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X3>, unsigned __int8 a5@<W4>, __n128 *a6@<X8>)
{
  unint64_t v6 = a4[1].n128_u64[0];
  unsigned __int8 v7 = a4[1].n128_u8[8];
  a6->n128_u64[0] = a1;
  a6->n128_u8[8] = a5;
  a6[1].n128_u64[0] = a2;
  a6[1].n128_u64[1] = a3;
  __n128 result = *a4;
  a6[2] = *a4;
  a6[3].n128_u64[0] = v6;
  a6[3].n128_u8[8] = v7;
  return result;
}

uint64_t BlendTreeBlendNode.sources.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BlendTreeBlendNode.sources.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*BlendTreeBlendNode.sources.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeBlendNode.isAdditive.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t BlendTreeBlendNode.isAdditive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*BlendTreeBlendNode.isAdditive.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeBlendNode.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BlendTreeBlendNode.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*BlendTreeBlendNode.name.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeBlendNode.weight.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  char v5 = *(unsigned char *)(v1 + 56);
  *(unsigned char *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 BlendTreeBlendNode.weight.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int8 v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56));
  __n128 result = v5;
  *(__n128 *)(v1 + 32) = v5;
  *(void *)(v1 + 48) = v2;
  *(unsigned char *)(v1 + 56) = v3;
  return result;
}

uint64_t (*BlendTreeBlendNode.weight.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BlendTreeBlendNode.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:)(Swift::OpaquePointer blendTreeDefinition, Swift::OpaquePointer *duplicateNameMap)
{
  uint64_t v4 = *v2;
  int v5 = *((unsigned __int8 *)v2 + 8);
  uint64_t v7 = v2[2];
  unint64_t v6 = v2[3];
  long long v41 = *((_OWORD *)v2 + 2);
  uint64_t v8 = v2[6];
  char v9 = *((unsigned char *)v2 + 56);
  uint64_t v52 = v7;
  unint64_t v53 = v6;
  uint64_t v10 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = 0x646E656C42;
    unint64_t v6 = 0xE500000000000000;
    uint64_t v52 = 0x646E656C42;
    unint64_t v53 = 0xE500000000000000;
  }
  rawValue = duplicateNameMap->_rawValue;
  if (!*((void *)duplicateNameMap->_rawValue + 2)) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(Swift::OpaquePointer *)&long long v48 = (Swift::OpaquePointer)duplicateNameMap->_rawValue;
    duplicateNameMap->_rawValue = (void *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, v7, v6, isUniquelyReferenced_nonNull_native);
    duplicateNameMap->_rawValue = (void *)v48;
    goto LABEL_12;
  }
  uint64_t v14 = *(void *)(rawValue[7] + 8 * v12);
  uint64_t v15 = swift_bridgeObjectRelease();
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  *(void *)&long long v48 = 45;
  *((void *)&v48 + 1) = 0xE100000000000000;
  v47[0] = v14 + 1;
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 45;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = v52;
  uint64_t v20 = v53;
  swift_bridgeObjectRetain();
  char v21 = swift_isUniquelyReferenced_nonNull_native();
  *(Swift::OpaquePointer *)&long long v48 = (Swift::OpaquePointer)duplicateNameMap->_rawValue;
  duplicateNameMap->_rawValue = (void *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14 + 1, v19, v20, v21);
  duplicateNameMap->_rawValue = (void *)v48;
LABEL_12:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v4;
  uint64_t v24 = *(void *)(v4 + 16);
  if (!v24)
  {
    uint64_t v26 = (void *)MEMORY[0x263F8EE78];
LABEL_25:
    long long v48 = v41;
    uint64_t v49 = v8;
    LOBYTE(v50) = v9;
    BlendWeight.toCore()();
    uint64_t v29 = (void *)v52;
    uint64_t v27 = v53;
    String.utf8CString.getter();
    String.utf8CString.getter();
    if (v5)
    {
      RETimelineDefinitionBlendTreeAddAdditiveBlend();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v37 = v26[2];
      if (!v37) {
        goto LABEL_31;
      }
    }
    else
    {
      RETimelineDefinitionBlendTreeAddBlend();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v37 = v26[2];
      if (!v37)
      {
LABEL_31:
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    uint64_t v38 = v26 + 5;
    do
    {
      String.utf8CString.getter();
      String.utf8CString.getter();
      RETimelineDefinitionBlendTreeAddConnection();
      swift_release();
      swift_release();
      v38 += 2;
      --v37;
    }
    while (v37);
    goto LABEL_31;
  }
  uint64_t v40 = v8;
  uint64_t v25 = v23 + 32;
  swift_bridgeObjectRetain();
  uint64_t v26 = (void *)MEMORY[0x263F8EE78];
  long long v42 = blendTreeDefinition._rawValue;
  while (1)
  {
    outlined init with copy of __REAssetService(v25, (uint64_t)v47);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNode);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNodeInternal);
    if (swift_dynamicCast()) {
      break;
    }
    uint64_t v46 = 0;
    memset(v45, 0, sizeof(v45));
    outlined destroy of BodyTrackingComponent?((uint64_t)v45, &demangling cache variable for type metadata for BlendTreeNodeInternal?);
LABEL_15:
    v25 += 40;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      uint64_t v8 = v40;
      goto LABEL_25;
    }
  }
  outlined init with take of BindableDataInternal(v45, (uint64_t)&v48);
  uint64_t v27 = v50;
  uint64_t v28 = v51;
  uint64_t v29 = __swift_project_boxed_opaque_existential_1(&v48, v50);
  uint64_t v30 = (*(uint64_t (**)(void *, Swift::OpaquePointer *, uint64_t, uint64_t))(v28 + 8))(blendTreeDefinition._rawValue, duplicateNameMap, v27, v28);
  if (!v44)
  {
    uint64_t v32 = v30;
    uint64_t v33 = v31;
    uint64_t v44 = 0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
    }
    unint64_t v35 = v26[2];
    unint64_t v34 = v26[3];
    if (v35 >= v34 >> 1) {
      uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v26);
    }
    v26[2] = v35 + 1;
    uint64_t v36 = &v26[2 * v35];
    v36[4] = v32;
    v36[5] = v33;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
    blendTreeDefinition._rawValue = v42;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
LABEL_33:
  uint64_t v15 = (uint64_t)v29;
  uint64_t v16 = (void *)v27;
LABEL_35:
  result._object = v16;
  result._countAndFlagsBits = v15;
  return result;
}

double BlendTreeBlendNode.duration.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (!v1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)v0 + 32;
  swift_bridgeObjectRetain();
  double v3 = 0.0;
  do
  {
    outlined init with copy of __REAssetService(v2, (uint64_t)v14);
    outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v10);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNode);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNodeInternal);
    if (swift_dynamicCast())
    {
      outlined init with take of BindableDataInternal(v8, (uint64_t)v11);
      uint64_t v4 = v12;
      uint64_t v5 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      double v6 = (*(double (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
      if (v3 <= v6) {
        double v3 = v6;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    }
    else
    {
      uint64_t v9 = 0;
      memset(v8, 0, sizeof(v8));
      outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for BlendTreeNodeInternal?);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v2 += 40;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for BlendTreeNode.name.setter in conformance BlendTreeBlendNode(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*protocol witness for BlendTreeNode.name.modify in conformance BlendTreeBlendNode())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for BlendTreeNode.weight.getter in conformance BlendTreeBlendNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  char v5 = *(unsigned char *)(v1 + 56);
  *(unsigned char *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 protocol witness for BlendTreeNode.weight.setter in conformance BlendTreeBlendNode(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int8 v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56));
  __n128 result = v5;
  *(__n128 *)(v1 + 32) = v5;
  *(void *)(v1 + 48) = v2;
  *(unsigned char *)(v1 + 56) = v3;
  return result;
}

uint64_t (*protocol witness for BlendTreeNode.weight.modify in conformance BlendTreeBlendNode())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for BlendTreeNodeInternal.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:) in conformance BlendTreeBlendNode(Swift::OpaquePointer a1, Swift::OpaquePointer *a2)
{
  return BlendTreeBlendNode.appendToBlendTreeDefinition(blendTreeDefinition:duplicateNameMap:)(a1, a2)._countAndFlagsBits;
}

uint64_t BlendTreeInvalidNode.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BlendTreeInvalidNode.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*BlendTreeInvalidNode.name.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BlendTreeInvalidNode.weight.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  char v5 = *(unsigned char *)(v1 + 40);
  *(unsigned char *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 BlendTreeInvalidNode.weight.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int8 v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
  __n128 result = v5;
  *(__n128 *)(v1 + 16) = v5;
  *(void *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 40) = v3;
  return result;
}

uint64_t (*BlendTreeInvalidNode.weight.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for BlendTreeNode.name.getter in conformance BlendTreeInvalidNode()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for BlendTreeNode.name.setter in conformance BlendTreeInvalidNode(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t protocol witness for BlendTreeNode.weight.getter in conformance BlendTreeInvalidNode@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  char v5 = *(unsigned char *)(v1 + 40);
  *(unsigned char *)(a1 + 24) = v5;
  return outlined copy of BlendWeight(v2, v3, v4, v5);
}

__n128 protocol witness for BlendTreeNode.weight.setter in conformance BlendTreeInvalidNode(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int8 v3 = a1[1].n128_u8[8];
  outlined consume of BlendWeight(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
  __n128 result = v5;
  *(__n128 *)(v1 + 16) = v5;
  *(void *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 40) = v3;
  return result;
}

uint64_t blend(_:_:name:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BlendTreeNode>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_22831E350;
  outlined init with copy of __REAssetService(a1, v12 + 32);
  outlined init with copy of __REAssetService(a2, v12 + 72);
  a6[3] = (uint64_t)&type metadata for BlendTreeBlendNode;
  a6[4] = (uint64_t)&protocol witness table for BlendTreeBlendNode;
  uint64_t v13 = swift_allocObject();
  *a6 = v13;
  *(void *)(v13 + 16) = v12;
  *(unsigned char *)(v13 + 24) = a5;
  *(void *)(v13 + 32) = a3;
  *(void *)(v13 + 40) = a4;
  *(void *)(v13 + 56) = 0;
  *(void *)(v13 + 64) = 0;
  *(void *)(v13 + 48) = 1065353216;
  *(unsigned char *)(v13 + 72) = 0;

  return swift_bridgeObjectRetain();
}

uint64_t blend(sources:name:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  a5[3] = (uint64_t)&type metadata for BlendTreeBlendNode;
  a5[4] = (uint64_t)&protocol witness table for BlendTreeBlendNode;
  uint64_t v10 = swift_allocObject();
  *a5 = v10;
  *(void *)(v10 + 16) = a1;
  *(unsigned char *)(v10 + 24) = a4;
  *(void *)(v10 + 32) = a2;
  *(void *)(v10 + 40) = a3;
  *(void *)(v10 + 56) = 0;
  *(void *)(v10 + 64) = 0;
  *(void *)(v10 + 48) = 1065353216;
  *(unsigned char *)(v10 + 72) = 0;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t BlendTreeAnimation.init(_:name:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, int a6@<W5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  uint64_t v22 = *a5;
  uint64_t v23 = a5[1];
  char v24 = *((unsigned char *)a5 + 16);
  char v25 = *a7;
  char v26 = *a8;
  *(_OWORD *)(a9 + 224) = 0u;
  *(void *)(a9 + 240) = 0;
  *(_OWORD *)(a9 + 208) = 0u;
  v37[0] = 0;
  v37[1] = 0;
  char v38 = -1;
  char v36 = v25;
  char v35 = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v37, 0, &v36, &v35, a13, a14 & 1, (uint64_t)v39, a10, a11, a12, a15, a16 & 1, a17, a18 & 1);
  *(_OWORD *)(a9 + 152) = v39[6];
  long long v27 = v39[8];
  *(_OWORD *)(a9 + 168) = v39[7];
  *(_OWORD *)(a9 + 184) = v27;
  long long v28 = v39[3];
  *(_OWORD *)(a9 + 88) = v39[2];
  *(_OWORD *)(a9 + 104) = v28;
  long long v29 = v39[5];
  *(_OWORD *)(a9 + 120) = v39[4];
  *(_OWORD *)(a9 + 136) = v29;
  long long v30 = v39[1];
  *(_OWORD *)(a9 + 56) = v39[0];
  *(void *)(a9 + 200) = v40;
  *(_OWORD *)(a9 + 72) = v30;
  type metadata accessor for TimelineDefinition();
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = 0;
  *(void *)a9 = a2;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = v22;
  *(void *)(a9 + 24) = v23;
  *(unsigned char *)(a9 + 32) = v24;
  *(_DWORD *)(a9 + 36) = a6;
  *(unsigned char *)(a9 + 40) = 0;
  *(unsigned char *)(a9 + 41) = v26;
  *(unsigned char *)(a9 + 42) = 0;
  *(unsigned char *)(a9 + 43) = a4;
  *(void *)(a9 + 48) = v31;
  swift_bridgeObjectRetain();
  outlined destroy of BodyTrackingComponent?(a9 + 208, &demangling cache variable for type metadata for BlendTreeNode?);

  return outlined init with take of BindableDataInternal(a1, a9 + 208);
}

uint64_t specialized BlendTreeAnimation.root.getter@<X0>(uint64_t *a1@<X8>)
{
  outlined init with copy of (Int, URL)(v1 + 208, (uint64_t)&v50, &demangling cache variable for type metadata for BlendTreeNode?);
  if (v51)
  {
    outlined init with take of BindableDataInternal(&v50, (uint64_t)v52);
    return outlined init with take of BindableDataInternal(v52, (uint64_t)a1);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v50, &demangling cache variable for type metadata for BlendTreeNode?);
  uint64_t v4 = *(void *)(*(void *)(v1 + 48) + 16);
  if (!v4)
  {
LABEL_46:
    a1[3] = (uint64_t)&type metadata for BlendTreeInvalidNode;
    a1[4] = (uint64_t)&protocol witness table for BlendTreeInvalidNode;
    uint64_t result = swift_allocObject();
    *a1 = result;
    *(void *)(result + 16) = 0x64696C61766E69;
    *(void *)(result + 24) = 0xE700000000000000;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 32) = 0;
    *(unsigned char *)(result + 56) = 0;
    return result;
  }
  __n128 v5 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v6 = RETimelineDefinitionBlendTreeNodeCount();
  if (v6 < 0) {
    goto LABEL_52;
  }
  uint64_t v7 = v6;
  if (!v6)
  {
LABEL_34:
    uint64_t v37 = RETimelineDefinitionBlendTreeConnectionCount();
    if (v37 < 0) {
      goto LABEL_53;
    }
    uint64_t v38 = v37;
    if (v37)
    {
      uint64_t v39 = 0;
      do
      {
        if (RETimelineDefinitionBlendTreeConnectionGetSource())
        {
          uint64_t v40 = String.init(cString:)();
          uint64_t v42 = v41;
          swift_bridgeObjectRetain();
          unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v42);
          char v45 = v44;
          swift_bridgeObjectRelease();
          if (v45)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v52[0] = v5;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              __n128 v5 = *(void **)&v52[0];
            }
            swift_bridgeObjectRelease();
            specialized _NativeDictionary._delete(at:)(v43, (uint64_t)v5);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
        ++v39;
      }
      while (v38 != v39);
    }
    uint64_t v47 = swift_bridgeObjectRetain();
    specialized Sequence.min(by:)(v47);
    uint64_t v49 = v48;
    swift_bridgeObjectRelease_n();
    if (v49)
    {
      specialized static BlendTreeNodeInternal.fromCore(blendTreeCore:nodeIndex:)(v4, a1);
      return swift_bridgeObjectRelease();
    }
    goto LABEL_46;
  }
  uint64_t v8 = 0;
  while (v7 != v8)
  {
    if (RETimelineDefinitionBlendTreeNodeGetName())
    {
      uint64_t v9 = String.init(cString:)();
      uint64_t v11 = v10;
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v52[0] = v5;
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
      uint64_t v15 = v5[2];
      BOOL v16 = (v13 & 1) == 0;
      uint64_t v17 = v15 + v16;
      if (__OFADD__(v15, v16)) {
        goto LABEL_48;
      }
      char v18 = v13;
      if (v5[3] >= v17)
      {
        if (v12)
        {
          __n128 v5 = *(void **)&v52[0];
          if ((v13 & 1) == 0) {
            goto LABEL_24;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          __n128 v5 = *(void **)&v52[0];
          if ((v18 & 1) == 0) {
            goto LABEL_24;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v12);
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
        if ((v18 & 1) != (v20 & 1)) {
          goto LABEL_54;
        }
        unint64_t v14 = v19;
        __n128 v5 = *(void **)&v52[0];
        if ((v18 & 1) == 0)
        {
LABEL_24:
          v5[(v14 >> 6) + 8] |= 1 << v14;
          long long v30 = (uint64_t *)(v5[6] + 16 * v14);
          *long long v30 = v9;
          v30[1] = v11;
          *(void *)(v5[7] + 8 * v14) = v8;
          uint64_t v31 = v5[2];
          BOOL v32 = __OFADD__(v31, 1);
          uint64_t v33 = v31 + 1;
          if (v32) {
            goto LABEL_50;
          }
          _OWORD v5[2] = v33;
          swift_bridgeObjectRetain();
          goto LABEL_8;
        }
      }
      *(void *)(v5[7] + 8 * v14) = v8;
LABEL_8:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v52[0] = v5;
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
    uint64_t v24 = v5[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      goto LABEL_49;
    }
    char v27 = v22;
    if (v5[3] >= v26)
    {
      if (v21)
      {
        __n128 v5 = *(void **)&v52[0];
        if (v22) {
          goto LABEL_28;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        __n128 v5 = *(void **)&v52[0];
        if (v27) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v21);
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_54;
      }
      unint64_t v23 = v28;
      __n128 v5 = *(void **)&v52[0];
      if (v27)
      {
LABEL_28:
        *(void *)(v5[7] + 8 * v23) = v8;
        goto LABEL_9;
      }
    }
    v5[(v23 >> 6) + 8] |= 1 << v23;
    unint64_t v34 = (void *)(v5[6] + 16 * v23);
    *unint64_t v34 = 0;
    v34[1] = 0xE000000000000000;
    *(void *)(v5[7] + 8 * v23) = v8;
    uint64_t v35 = v5[2];
    BOOL v32 = __OFADD__(v35, 1);
    uint64_t v36 = v35 + 1;
    if (v32) {
      goto LABEL_51;
    }
    _OWORD v5[2] = v36;
LABEL_9:
    swift_bridgeObjectRelease();
    if (v7 == ++v8) {
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t BlendTreeAnimation.root.getter@<X0>(uint64_t *a1@<X8>)
{
  outlined init with copy of (Int, URL)(v1 + 208, (uint64_t)&v50, &demangling cache variable for type metadata for BlendTreeNode?);
  if (v51)
  {
    outlined init with take of BindableDataInternal(&v50, (uint64_t)v52);
    return outlined init with take of BindableDataInternal(v52, (uint64_t)a1);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v50, &demangling cache variable for type metadata for BlendTreeNode?);
  uint64_t v4 = *(void *)(*(void *)(v1 + 48) + 16);
  if (!v4)
  {
LABEL_46:
    a1[3] = (uint64_t)&type metadata for BlendTreeInvalidNode;
    a1[4] = (uint64_t)&protocol witness table for BlendTreeInvalidNode;
    uint64_t result = swift_allocObject();
    *a1 = result;
    *(void *)(result + 16) = 0x64696C61766E69;
    *(void *)(result + 24) = 0xE700000000000000;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 32) = 0;
    *(unsigned char *)(result + 56) = 0;
    return result;
  }
  __n128 v5 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v6 = RETimelineDefinitionBlendTreeNodeCount();
  if (v6 < 0) {
    goto LABEL_52;
  }
  uint64_t v7 = v6;
  if (!v6)
  {
LABEL_34:
    uint64_t v37 = RETimelineDefinitionBlendTreeConnectionCount();
    if (v37 < 0) {
      goto LABEL_53;
    }
    uint64_t v38 = v37;
    if (v37)
    {
      uint64_t v39 = 0;
      do
      {
        if (RETimelineDefinitionBlendTreeConnectionGetSource())
        {
          uint64_t v40 = String.init(cString:)();
          uint64_t v42 = v41;
          swift_bridgeObjectRetain();
          unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v42);
          char v45 = v44;
          swift_bridgeObjectRelease();
          if (v45)
          {
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v52[0] = v5;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              __n128 v5 = *(void **)&v52[0];
            }
            swift_bridgeObjectRelease();
            specialized _NativeDictionary._delete(at:)(v43, (uint64_t)v5);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
        ++v39;
      }
      while (v38 != v39);
    }
    uint64_t v47 = swift_bridgeObjectRetain();
    specialized Sequence.min(by:)(v47);
    uint64_t v49 = v48;
    swift_bridgeObjectRelease_n();
    if (v49)
    {
      specialized static BlendTreeNodeInternal.fromCore(blendTreeCore:nodeIndex:)(v4, a1);
      return swift_bridgeObjectRelease();
    }
    goto LABEL_46;
  }
  uint64_t v8 = 0;
  while (v7 != v8)
  {
    if (RETimelineDefinitionBlendTreeNodeGetName())
    {
      uint64_t v9 = String.init(cString:)();
      uint64_t v11 = v10;
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v52[0] = v5;
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
      uint64_t v15 = v5[2];
      BOOL v16 = (v13 & 1) == 0;
      uint64_t v17 = v15 + v16;
      if (__OFADD__(v15, v16)) {
        goto LABEL_48;
      }
      char v18 = v13;
      if (v5[3] >= v17)
      {
        if (v12)
        {
          __n128 v5 = *(void **)&v52[0];
          if ((v13 & 1) == 0) {
            goto LABEL_24;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          __n128 v5 = *(void **)&v52[0];
          if ((v18 & 1) == 0) {
            goto LABEL_24;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v12);
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
        if ((v18 & 1) != (v20 & 1)) {
          goto LABEL_54;
        }
        unint64_t v14 = v19;
        __n128 v5 = *(void **)&v52[0];
        if ((v18 & 1) == 0)
        {
LABEL_24:
          v5[(v14 >> 6) + 8] |= 1 << v14;
          long long v30 = (uint64_t *)(v5[6] + 16 * v14);
          *long long v30 = v9;
          v30[1] = v11;
          *(void *)(v5[7] + 8 * v14) = v8;
          uint64_t v31 = v5[2];
          BOOL v32 = __OFADD__(v31, 1);
          uint64_t v33 = v31 + 1;
          if (v32) {
            goto LABEL_50;
          }
          _OWORD v5[2] = v33;
          swift_bridgeObjectRetain();
          goto LABEL_8;
        }
      }
      *(void *)(v5[7] + 8 * v14) = v8;
LABEL_8:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v52[0] = v5;
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
    uint64_t v24 = v5[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      goto LABEL_49;
    }
    char v27 = v22;
    if (v5[3] >= v26)
    {
      if (v21)
      {
        __n128 v5 = *(void **)&v52[0];
        if (v22) {
          goto LABEL_28;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        __n128 v5 = *(void **)&v52[0];
        if (v27) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v21);
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(0, 0xE000000000000000);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_54;
      }
      unint64_t v23 = v28;
      __n128 v5 = *(void **)&v52[0];
      if (v27)
      {
LABEL_28:
        *(void *)(v5[7] + 8 * v23) = v8;
        goto LABEL_9;
      }
    }
    v5[(v23 >> 6) + 8] |= 1 << v23;
    unint64_t v34 = (void *)(v5[6] + 16 * v23);
    *unint64_t v34 = 0;
    v34[1] = 0xE000000000000000;
    *(void *)(v5[7] + 8 * v23) = v8;
    uint64_t v35 = v5[2];
    BOOL v32 = __OFADD__(v35, 1);
    uint64_t v36 = v35 + 1;
    if (v32) {
      goto LABEL_51;
    }
    _OWORD v5[2] = v36;
LABEL_9:
    swift_bridgeObjectRelease();
    if (v7 == ++v8) {
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t key path setter for BlendTreeAnimation.root : <A>BlendTreeAnimation<A>(uint64_t a1)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v2);
  return BlendTreeAnimation.root.setter(v2);
}

uint64_t BlendTreeAnimation.root.setter(long long *a1)
{
  uint64_t v3 = v1 + 208;
  outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for BlendTreeNode?);

  return outlined init with take of BindableDataInternal(a1, v3);
}

uint64_t specialized Sequence.min(by:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = 1 << v3;
  uint64_t v5 = -1;
  if (1 << v3 < 64) {
    uint64_t v5 = ~(-1 << (1 << v3));
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v6));
    unint64_t v9 = (v6 - 1) & v6;
    int64_t v10 = (unint64_t)(v4 + 63) >> 6;
    while (2)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 16 * v8);
      uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_6:
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v15 = v14 | (v7 << 6);
        goto LABEL_7;
      }
      while (1)
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          break;
        }
        if (v17 >= v10) {
          goto LABEL_27;
        }
        unint64_t v18 = *(void *)(v2 + 8 * v17);
        ++v7;
        if (!v18)
        {
          uint64_t v7 = v17 + 1;
          if (v17 + 1 >= v10) {
            goto LABEL_27;
          }
          unint64_t v18 = *(void *)(v2 + 8 * v7);
          if (!v18)
          {
            uint64_t v7 = v17 + 2;
            if (v17 + 2 >= v10) {
              goto LABEL_27;
            }
            unint64_t v18 = *(void *)(v2 + 8 * v7);
            if (!v18)
            {
              uint64_t v7 = v17 + 3;
              if (v17 + 3 >= v10) {
                goto LABEL_27;
              }
              unint64_t v18 = *(void *)(v2 + 8 * v7);
              if (!v18)
              {
                int64_t v19 = v17 + 4;
                if (v19 >= v10)
                {
LABEL_27:
                  swift_release();
                  return v11;
                }
                unint64_t v18 = *(void *)(v2 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    uint64_t v7 = v19 + 1;
                    if (__OFADD__(v19, 1)) {
                      break;
                    }
                    if (v7 >= v10) {
                      goto LABEL_27;
                    }
                    unint64_t v18 = *(void *)(v2 + 8 * v7);
                    ++v19;
                    if (v18) {
                      goto LABEL_24;
                    }
                  }
                  __break(1u);
LABEL_44:
                  uint64_t v21 = 0;
                  uint64_t v22 = 6;
                  if (v10 > 6) {
                    uint64_t v22 = v10;
                  }
                  uint64_t v23 = v22 - 6;
                  while (v23 != v21)
                  {
                    unint64_t v20 = *(void *)(a1 + 112 + 8 * v21++);
                    if (v20)
                    {
                      uint64_t v7 = v21 + 5;
                      goto LABEL_31;
                    }
                  }
                  return 0;
                }
                uint64_t v7 = v19;
              }
            }
          }
        }
LABEL_24:
        unsigned int v13 = v18 - 1;
        unint64_t v9 = (v18 - 1) & v18;
        unint64_t v15 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_7:
        uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v15);
        if (v16 < v12)
        {
          uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 16 * v15);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v12 = v16;
          if (v9) {
            goto LABEL_6;
          }
        }
        else if (v9)
        {
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_38:
      if (v13 >= 9)
      {
        unint64_t v20 = *(void *)(a1 + 96);
        if (v20)
        {
          uint64_t v7 = 4;
        }
        else
        {
          unint64_t v20 = *(void *)(a1 + 104);
          if (!v20) {
            goto LABEL_44;
          }
          uint64_t v7 = 5;
        }
LABEL_31:
        unint64_t v9 = (v20 - 1) & v20;
        unint64_t v8 = __clz(__rbit64(v20)) + (v7 << 6);
        continue;
      }
      break;
    }
  }
  else
  {
    unsigned int v13 = v3 & 0x3F;
    if (v13 > 6)
    {
      int64_t v10 = (unint64_t)(v4 + 63) >> 6;
      unint64_t v20 = *(void *)(a1 + 72);
      if (v20)
      {
        uint64_t v7 = 1;
        goto LABEL_31;
      }
      if (v13 >= 8)
      {
        unint64_t v20 = *(void *)(a1 + 80);
        if (v20)
        {
          uint64_t v7 = 2;
        }
        else
        {
          unint64_t v20 = *(void *)(a1 + 88);
          if (!v20) {
            goto LABEL_38;
          }
          uint64_t v7 = 3;
        }
        goto LABEL_31;
      }
    }
  }
  return 0;
}

void (*BlendTreeAnimation.root.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  char v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  BlendTreeAnimation.root.getter(v3);
  return BlendTreeAnimation.root.modify;
}

void BlendTreeAnimation.root.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = *(void *)(v2 + 80);
    outlined init with copy of __REAssetService(*a1, v2 + 40);
    v3 += 208;
    outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for BlendTreeNode?);
    outlined init with take of BindableDataInternal((long long *)(v2 + 40), v3);
    __swift_destroy_boxed_opaque_existential_1(v2);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 80) + 208;
    outlined destroy of BodyTrackingComponent?(v4, &demangling cache variable for type metadata for BlendTreeNode?);
    outlined init with take of BindableDataInternal((long long *)v2, v4);
  }

  free((void *)v2);
}

unsigned char *BlendTreeAnimation.createResource()(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);
  v5(v17, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Float>);
  if (swift_dynamicCast())
  {
    unint64_t v6 = &demangling cache variable for type metadata for BlendTreeAnimation<Float>;
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<Float>);
    v5(v17, v3, a1);
    swift_dynamicCast();
    uint64_t v7 = BlendTreeAnimation<>.createResource()();
LABEL_10:
    unint64_t v9 = v7;
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, v6);
    return v9;
  }
  v5(v17, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Double>);
  if (swift_dynamicCast())
  {
    unint64_t v6 = &demangling cache variable for type metadata for BlendTreeAnimation<Double>;
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<Double>);
    v5(v17, v3, a1);
    swift_dynamicCast();
    unint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F37390];
LABEL_9:
    uint64_t v7 = BlendTreeAnimation<>.createResource()(v6, v8);
    goto LABEL_10;
  }
  v5(v17, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD2<Float>>);
  if (swift_dynamicCast())
  {
    unint64_t v6 = &demangling cache variable for type metadata for BlendTreeAnimation<SIMD2<Float>>;
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<SIMD2<Float>>);
    v5(v17, v3, a1);
    swift_dynamicCast();
    unint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F37398];
    goto LABEL_9;
  }
  v5(v17, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD3<Float>>);
  if (swift_dynamicCast())
  {
    unint64_t v6 = &demangling cache variable for type metadata for BlendTreeAnimation<SIMD3<Float>>;
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<SIMD3<Float>>);
    v5(v17, v3, a1);
    swift_dynamicCast();
    unint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F373A0];
    goto LABEL_9;
  }
  v5(v17, v3, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD4<Float>>);
  if (swift_dynamicCast())
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<SIMD4<Float>>);
    v5(v17, v3, a1);
    swift_dynamicCast();
    unint64_t v9 = v16;
    uint64_t v11 = BlendTreeAnimation<>.createResource()(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD4<Float>>, MEMORY[0x263F373A8]);
    if (!v2) {
      unint64_t v9 = v11;
    }
    uint64_t v12 = &demangling cache variable for type metadata for BlendTreeAnimation<SIMD4<Float>>;
  }
  else
  {
    v5(v17, v3, a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<simd_quatf>);
    if (swift_dynamicCast())
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<simd_quatf>);
      v5(v17, v3, a1);
      swift_dynamicCast();
      unint64_t v9 = v16;
      unsigned int v13 = BlendTreeAnimation<>.createResource()(&demangling cache variable for type metadata for BlendTreeAnimation<simd_quatf>, MEMORY[0x263F373B0]);
      if (!v2) {
        unint64_t v9 = v13;
      }
      uint64_t v12 = &demangling cache variable for type metadata for BlendTreeAnimation<simd_quatf>;
    }
    else
    {
      v5(v17, v3, a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Transform>);
      if (swift_dynamicCast())
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<Transform>);
        v5(v17, v3, a1);
        swift_dynamicCast();
        unint64_t v9 = v16;
        unint64_t v14 = BlendTreeAnimation<>.createResource()(&demangling cache variable for type metadata for BlendTreeAnimation<Transform>, MEMORY[0x263F373B8]);
        if (!v2) {
          unint64_t v9 = v14;
        }
        uint64_t v12 = &demangling cache variable for type metadata for BlendTreeAnimation<Transform>;
      }
      else
      {
        v5(v17, v3, a1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<JointTransforms>);
        if ((swift_dynamicCast() & 1) == 0) {
          return 0;
        }
        outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for BlendTreeAnimation<JointTransforms>);
        v5(v17, v3, a1);
        swift_dynamicCast();
        unint64_t v9 = v16;
        unint64_t v15 = BlendTreeAnimation<>.createResource()(&demangling cache variable for type metadata for BlendTreeAnimation<JointTransforms>, MEMORY[0x263F373F0]);
        if (!v2) {
          unint64_t v9 = v15;
        }
        uint64_t v12 = &demangling cache variable for type metadata for BlendTreeAnimation<JointTransforms>;
      }
    }
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v16, v12);
  return v9;
}

void *BlendTreeAnimation<>.createResource()()
{
  uint64_t v2 = v0;
  if (specialized BlendTreeAnimation.isModified.getter(&demangling cache variable for type metadata for BlendTreeAnimation<Float>))
  {
    uint64_t v4 = *(void *)(v0 + 8);
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v5 = *(void *)(v2 + 24);
    unsigned __int8 v6 = *(unsigned char *)(v2 + 32);
    if (v4)
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v5, v6);
      swift_retain();
    }
    else if (*(void *)(*(void *)(v2 + 48) + 16))
    {
      outlined copy of BindTarget?(*(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32));
      swift_retain();
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined copy of BindTarget?(*(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32));
      swift_retain();
    }
    outlined consume of BindTarget?(v3, v5, v6);
    swift_release();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    FloatBlendTree = (void *)RETimelineDefinitionCreateFloatBlendTree();
    swift_release();
    v10._rawValue = FloatBlendTree;
    uint64_t v7 = (void *)v2;
    uint64_t v11 = specialized BlendTreeAnimation.createResource(timelineDefinition:)(v10);
    if (!v1) {
      uint64_t v7 = (void *)v11;
    }
    RERelease();
  }
  else
  {
    if (!TimelineClipProperties.isClipped.getter()) {
      return TimelineDefinition.resource.getter();
    }
    if (TimelineClipProperties.isModified.getter())
    {
      return (void *)TimelineClipProperties.createClip()();
    }
    else
    {
      swift_retain();
      uint64_t v7 = TimelineDefinition.resource.getter();
      swift_release();
    }
  }
  return v7;
}

void *BlendTreeAnimation<>.createResource()(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = v2;
  if (specialized BlendTreeAnimation.isModified.getter(a1))
  {
    uint64_t v7 = *(void *)(v2 + 8);
    uint64_t v6 = *(void *)(v2 + 16);
    uint64_t v8 = *(void *)(v5 + 24);
    unsigned __int8 v9 = *(unsigned char *)(v5 + 32);
    if (v7)
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v6, v8, v9);
      swift_retain();
    }
    else if (*(void *)(*(void *)(v5 + 48) + 16))
    {
      outlined copy of BindTarget?(*(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));
      swift_retain();
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined copy of BindTarget?(*(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));
      swift_retain();
    }
    outlined consume of BindTarget?(v6, v8, v9);
    swift_release();
    uint64_t v12 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    unsigned int v13 = (void *)a2(v12 + 32);
    swift_release();
    v14._rawValue = v13;
    Swift::OpaquePointer v10 = (void *)v5;
    uint64_t v15 = specialized BlendTreeAnimation.createResource(timelineDefinition:)(v14);
    if (!v3) {
      Swift::OpaquePointer v10 = (void *)v15;
    }
    RERelease();
  }
  else
  {
    if (!TimelineClipProperties.isClipped.getter()) {
      return TimelineDefinition.resource.getter();
    }
    if (TimelineClipProperties.isModified.getter())
    {
      return (void *)TimelineClipProperties.createClip()();
    }
    else
    {
      swift_retain();
      Swift::OpaquePointer v10 = TimelineDefinition.resource.getter();
      swift_release();
    }
  }
  return v10;
}

uint64_t BlendTreeAnimation.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 32);
  if (*(void *)(v0 + 8))
  {
    uint64_t v4 = *(void *)v0;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v0 + 48) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_retain();
    uint64_t v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path setter for BlendTreeAnimation.name : <A>BlendTreeAnimation<A>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return BlendTreeAnimation.name.setter(v1, v2);
}

uint64_t BlendTreeAnimation.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*BlendTreeAnimation.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = BlendTreeAnimation.name.getter();
  a1[1] = v3;
  return BlendTreeAnimation.name.modify;
}

uint64_t BlendTreeAnimation.name.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void *v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    void *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t BlendTreeAnimation.blendLayer.getter()
{
  if (*(unsigned char *)(v0 + 40) != 1) {
    return *(unsigned int *)(v0 + 36);
  }
  uint64_t result = *(void *)(*(void *)(v0 + 48) + 16);
  if (result) {
    return RETimelineDefinitionGetAnimationLayer();
  }
  return result;
}

uint64_t BlendTreeAnimation.blendLayer.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 36) = result;
  *(unsigned char *)(v1 + 40) = 0;
  return result;
}

uint64_t *(*BlendTreeAnimation.blendLayer.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 48) + 16);
    if (v3) {
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
    }
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 36);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return BlendTreeAnimation.blendLayer.modify;
}

uint64_t *BlendTreeAnimation.blendLayer.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  *(_DWORD *)(v1 + 36) = *((_DWORD *)result + 2);
  *(unsigned char *)(v1 + 40) = 0;
  return result;
}

uint64_t BlendTreeAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  int v5 = *(unsigned __int8 *)(v1 + 32);
  if (v5 == 255)
  {
    if (*(void *)(*(void *)(v1 + 48) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      long long v8 = v11;
      char v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      char v9 = 0;
      long long v8 = xmmword_22831E960;
    }
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = v9;
  }
  else
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);

  return swift_release();
}

double key path getter for BlendTreeAnimation.bindTarget : <A>BlendTreeAnimation<A>@<D0>(uint64_t a1@<X8>)
{
  BlendTreeAnimation.bindTarget.getter((uint64_t)&v4);
  char v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 16) = v2;
  return result;
}

uint64_t key path setter for BlendTreeAnimation.bindTarget : <A>BlendTreeAnimation<A>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unsigned __int8 v2 = *(unsigned char *)(a1 + 16);
  v4[0] = *(void *)a1;
  v4[1] = v1;
  unsigned __int8 v5 = v2;
  outlined copy of BindTarget(v4[0], v1, v2);
  return BlendTreeAnimation.bindTarget.setter(v4);
}

uint64_t BlendTreeAnimation.bindTarget.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = v4;
  return result;
}

uint64_t (*BlendTreeAnimation.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  BlendTreeAnimation.bindTarget.getter(a1);
  return BlendTreeAnimation.bindTarget.modify;
}

uint64_t BlendTreeAnimation.bindTarget.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  if (a2)
  {
    outlined copy of BindTarget(*(void *)a1, v2, v4);
    outlined consume of BindTarget?(*(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v2;
    *(unsigned char *)(v5 + 32) = v4;
    return outlined consume of BindTarget(v3, v2, v4);
  }
  else
  {
    uint64_t result = outlined consume of BindTarget?(*(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v2;
    *(unsigned char *)(v5 + 32) = v4;
  }
  return result;
}

uint64_t BlendTreeAnimation.fillMode.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 42))
  {
    uint64_t result = *(void *)(*(void *)(v1 + 48) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(v1 + 41);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *BlendTreeAnimation.fillMode.setter(unsigned __int8 *result)
{
  *(_WORD *)(v1 + 41) = *result;
  return result;
}

unsigned __int8 *(*BlendTreeAnimation.fillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 42))
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 48) + 16);
    if (v3) {
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    LOBYTE(v3) = *(unsigned char *)(v1 + 41);
  }
  *(unsigned char *)(a1 + 8) = v3;
  return BlendTreeAnimation.fillMode.modify;
}

unsigned __int8 *BlendTreeAnimation.fillMode.modify(unsigned __int8 *result)
{
  *(_WORD *)(*(void *)result + 41) = result[8];
  return result;
}

uint64_t BlendTreeAnimation.isAdditive.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 43);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = *(void *)(*(void *)(v0 + 48) + 16);
  if (result) {
    return RETimelineDefinitionIsAdditive();
  }
  return result;
}

uint64_t BlendTreeAnimation.isAdditive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 43) = result;
  return result;
}

unsigned char *(*BlendTreeAnimation.isAdditive.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 43);
  if (v3 == 2)
  {
    uint64_t v4 = *(void *)(*(void *)(v1 + 48) + 16);
    if (v4) {
      LOBYTE(v4) = RETimelineDefinitionIsAdditive();
    }
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = v4;
  return BlendTreeAnimation.isAdditive.modify;
}

unsigned char *BlendTreeAnimation.isAdditive.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 43) = result[8];
  return result;
}

uint64_t BlendTreeAnimation.trimStart.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  v8[6] = *(_OWORD *)(v0 + 152);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  long long v8[2] = *(_OWORD *)(v0 + 88);
  v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  v8[4] = *(_OWORD *)(v0 + 120);
  v8[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0) {
    return *(void *)&v8[0];
  }
  uint64_t v5 = *(void *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      uint64_t v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t BlendTreeAnimation.trimStart.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 56) = result;
  *(unsigned char *)(v2 + 64) = a2 & 1;
  *(unsigned char *)(v2 + 65) = 0;
  return result;
}

uint64_t (*BlendTreeAnimation.trimStart.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = BlendTreeAnimation.trimStart.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimStart.modify;
}

uint64_t BlendTreeAnimation.trimStart.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 56) = *(void *)result;
  *(_WORD *)(v1 + 64) = v2;
  return result;
}

uint64_t BlendTreeAnimation.trimEnd.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v14 = *(_OWORD *)(v0 + 152);
  long long v15 = v1;
  long long v16 = *(_OWORD *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  long long v10 = *(_OWORD *)(v0 + 88);
  long long v11 = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v12 = *(_OWORD *)(v0 + 120);
  long long v13 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  long long v8 = *(_OWORD *)(v0 + 56);
  long long v9 = v4;
  if ((BYTE9(v4) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      uint64_t v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t BlendTreeAnimation.trimEnd.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  *(unsigned char *)(v2 + 81) = 0;
  return result;
}

uint64_t (*BlendTreeAnimation.trimEnd.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = BlendTreeAnimation.trimEnd.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimEnd.modify;
}

uint64_t BlendTreeAnimation.trimEnd.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 72) = *(void *)result;
  *(_WORD *)(v1 + 80) = v2;
  return result;
}

uint64_t BlendTreeAnimation.trimDuration.getter()
{
  long long v1 = *(_OWORD *)(v0 + 88);
  long long v2 = *(_OWORD *)(v0 + 168);
  long long v14 = *(_OWORD *)(v0 + 152);
  long long v15 = v2;
  long long v16 = *(_OWORD *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 200);
  long long v3 = *(_OWORD *)(v0 + 104);
  long long v10 = v1;
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 136);
  long long v12 = *(_OWORD *)(v0 + 120);
  long long v13 = v4;
  long long v5 = *(_OWORD *)(v0 + 72);
  v9[0] = *(_OWORD *)(v0 + 56);
  v9[1] = v5;
  if ((BYTE9(v1) & 1) == 0) {
    return v10;
  }
  uint64_t v6 = *(void *)(v17 + 16);
  if (v6)
  {
    outlined retain of TimelineClipProperties((uint64_t)v9);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      uint64_t v6 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v9);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v9);
      return 0;
    }
  }
  return v6;
}

uint64_t BlendTreeAnimation.trimDuration.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 88) = result;
  *(unsigned char *)(v2 + 96) = a2 & 1;
  *(unsigned char *)(v2 + 97) = 0;
  return result;
}

uint64_t (*BlendTreeAnimation.trimDuration.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = BlendTreeAnimation.trimDuration.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimDuration.modify;
}

uint64_t BlendTreeAnimation.trimDuration.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 88) = *(void *)result;
  *(_WORD *)(v1 + 96) = v2;
  return result;
}

double BlendTreeAnimation.offset.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v12 = *(_OWORD *)(v0 + 152);
  long long v13 = v1;
  long long v14 = *(_OWORD *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  long long v8[2] = *(_OWORD *)(v0 + 88);
  long long v9 = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v10 = *(_OWORD *)(v0 + 120);
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void BlendTreeAnimation.offset.setter(double a1)
{
  *(double *)(v1 + 104) = a1;
  *(unsigned char *)(v1 + 112) = 0;
}

double (*BlendTreeAnimation.offset.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = BlendTreeAnimation.offset.getter();
  return BlendTreeAnimation.offset.modify;
}

double BlendTreeAnimation.offset.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  double result = *(double *)a1;
  *(void *)(v1 + 104) = *(void *)a1;
  *(unsigned char *)(v1 + 112) = 0;
  return result;
}

double BlendTreeAnimation.delay.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v11 = *(_OWORD *)(v0 + 152);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  long long v8[2] = *(_OWORD *)(v0 + 88);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v9 = *(_OWORD *)(v0 + 120);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void BlendTreeAnimation.delay.setter(double a1)
{
  *(double *)(v1 + 120) = a1;
  *(unsigned char *)(v1 + 128) = 0;
}

double (*BlendTreeAnimation.delay.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = BlendTreeAnimation.delay.getter();
  return BlendTreeAnimation.delay.modify;
}

double BlendTreeAnimation.delay.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  double result = *(double *)a1;
  *(void *)(v1 + 120) = *(void *)a1;
  *(unsigned char *)(v1 + 128) = 0;
  return result;
}

float BlendTreeAnimation.speed.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v11 = *(_OWORD *)(v0 + 152);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  long long v8[2] = *(_OWORD *)(v0 + 88);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v9 = *(_OWORD *)(v0 + 120);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((v10 & 1) == 0) {
    return *((float *)&v9 + 3);
  }
  float v5 = 1.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      float v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void BlendTreeAnimation.speed.setter(float a1)
{
  *(float *)(v1 + 132) = a1;
  *(unsigned char *)(v1 + 136) = 0;
}

float (*BlendTreeAnimation.speed.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  *(float *)(a1 + 8) = BlendTreeAnimation.speed.getter();
  return BlendTreeAnimation.speed.modify;
}

float BlendTreeAnimation.speed.modify(float *a1)
{
  uint64_t v1 = *(void *)a1;
  float result = a1[2];
  *(float *)(v1 + 132) = result;
  *(unsigned char *)(v1 + 136) = 0;
  return result;
}

void BlendTreeAnimation.repeatMode.getter(unsigned char *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 168);
  long long v11 = *(_OWORD *)(v1 + 152);
  long long v12 = v3;
  long long v13 = *(_OWORD *)(v1 + 184);
  uint64_t v14 = *(void *)(v1 + 200);
  long long v4 = *(_OWORD *)(v1 + 104);
  _OWORD v9[2] = *(_OWORD *)(v1 + 88);
  v9[3] = v4;
  long long v5 = *(_OWORD *)(v1 + 136);
  v9[4] = *(_OWORD *)(v1 + 120);
  long long v10 = v5;
  long long v6 = *(_OWORD *)(v1 + 72);
  v9[0] = *(_OWORD *)(v1 + 56);
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    uint64_t v7 = *(void *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        unsigned int ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

unsigned char *BlendTreeAnimation.repeatMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 137) = *result;
  return result;
}

unsigned char *(*BlendTreeAnimation.repeatMode.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  BlendTreeAnimation.repeatMode.getter((unsigned char *)(a1 + 8));
  return BlendTreeAnimation.repeatMode.modify;
}

unsigned char *BlendTreeAnimation.repeatMode.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 137) = result[8];
  return result;
}

double BlendTreeAnimation.duration.getter()
{
  BlendTreeAnimation.root.getter(v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNode);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNodeInternal);
  if (swift_dynamicCast())
  {
    outlined init with take of BindableDataInternal(v4, (uint64_t)v7);
    uint64_t v0 = v8;
    uint64_t v1 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    double v2 = (*(double (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    uint64_t v5 = 0;
    memset(v4, 0, sizeof(v4));
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for BlendTreeNodeInternal?);
    return 0.0;
  }
  return v2;
}

uint64_t specialized BlendTreeAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1)
{
  long long v3 = v1;
  if (a1._rawValue)
  {
    char v5 = *((unsigned char *)v1 + 32);
    int v6 = *((_DWORD *)v1 + 9);
    char v7 = *((unsigned char *)v1 + 40);
    char v8 = *((unsigned char *)v1 + 41);
    char v9 = *((unsigned char *)v1 + 42);
    char v10 = *((unsigned char *)v1 + 43);
    uint64_t v11 = *((void *)v1 + 6);
    long long v12 = v1[1];
    long long v105 = *v1;
    long long v106 = v12;
    LOBYTE(v107) = v5;
    DWORD1(v107) = v6;
    BYTE8(v107) = v7;
    BYTE9(v107) = v8;
    BYTE10(v107) = v9;
    BYTE11(v107) = v10;
    *(void *)&long long v108 = v11;
    TimelineBaseProperties.writeProperties(_:)(a1);
    specialized BlendTreeAnimation.root.getter((uint64_t *)&v105);
    long long v13 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNode);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeNodeInternal);
    if (swift_dynamicCast())
    {
      outlined init with take of BindableDataInternal(&v94, (uint64_t)v104);
      long long v13 = __swift_project_boxed_opaque_existential_1(v104, v104[3]);
      BlendTreeNodeInternal.appendToBlendTreeDefinition(blendTreeDefinition:)(a1);
      if (v14)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
      }
      else
      {
        swift_bridgeObjectRelease();
        long long v50 = *(long long *)((char *)v3 + 168);
        long long v111 = *(long long *)((char *)v3 + 152);
        long long v112 = v50;
        long long v113 = *(long long *)((char *)v3 + 184);
        uint64_t v114 = *((void *)v3 + 25);
        long long v51 = *(long long *)((char *)v3 + 104);
        long long v107 = *(long long *)((char *)v3 + 88);
        long long v108 = v51;
        long long v52 = *(long long *)((char *)v3 + 136);
        long long v109 = *(long long *)((char *)v3 + 120);
        long long v110 = v52;
        long long v53 = *(long long *)((char *)v3 + 72);
        long long v105 = *(long long *)((char *)v3 + 56);
        long long v106 = v53;
        long long v54 = *(long long *)((char *)v3 + 168);
        long long v100 = *(long long *)((char *)v3 + 152);
        long long v101 = v54;
        long long v102 = *(long long *)((char *)v3 + 184);
        uint64_t v103 = *((void *)v3 + 25);
        long long v55 = *(long long *)((char *)v3 + 104);
        long long v96 = *(long long *)((char *)v3 + 88);
        long long v97 = v55;
        long long v56 = *(long long *)((char *)v3 + 136);
        long long v98 = *(long long *)((char *)v3 + 120);
        long long v99 = v56;
        long long v57 = *(long long *)((char *)v3 + 72);
        long long v94 = *(long long *)((char *)v3 + 56);
        long long v95 = v57;
        if (TimelineClipProperties.isClipped.getter())
        {
          uint64_t v90 = v112;
          uint64_t v92 = *((void *)&v111 + 1);
          uint64_t v88 = *((void *)&v112 + 1);
          int v84 = DWORD1(v113);
          char v86 = v113;
          char v82 = BYTE8(v113);
          char v78 = BYTE10(v113);
          char v80 = BYTE9(v113);
          char v77 = BYTE11(v113);
          uint64_t v76 = v114;
          int v74 = HIDWORD(v109);
          char v75 = BYTE1(v110);
          char v73 = v110;
          uint64_t v72 = v109;
          char v71 = BYTE8(v109);
          uint64_t v70 = v108;
          char v69 = BYTE8(v108);
          uint64_t v67 = v107;
          char v65 = BYTE9(v107);
          char v66 = BYTE8(v107);
          uint64_t v58 = v106;
          char v63 = BYTE9(v106);
          char v64 = BYTE8(v106);
          uint64_t v59 = v105;
          uint64_t v117 = 0;
          char v60 = BYTE8(v105);
          char v61 = BYTE9(v105);
          uint64_t v68 = v111;
          type metadata accessor for TimelineDefinition();
          uint64_t v62 = swift_allocObject();
          *(Swift::OpaquePointer *)(v62 + 16) = a1;
          outlined retain of TimelineClipProperties((uint64_t)&v105);
          RERetain();
          swift_release();
          *(void *)&long long v94 = v59;
          BYTE8(v94) = v60;
          BYTE9(v94) = v61;
          *(void *)&long long v95 = v58;
          BYTE8(v95) = v64;
          BYTE9(v95) = v63;
          *(void *)&long long v96 = v67;
          BYTE8(v96) = v66;
          BYTE9(v96) = v65;
          *(void *)&long long v97 = v70;
          BYTE8(v97) = v69;
          *(void *)&long long v98 = v72;
          BYTE8(v98) = v71;
          HIDWORD(v98) = v74;
          LOBYTE(v99) = v73;
          BYTE1(v99) = v75;
          *((void *)&v99 + 1) = v62;
          *(void *)&long long v100 = v68;
          *((void *)&v100 + 1) = v92;
          *(void *)&long long v101 = v90;
          *((void *)&v101 + 1) = v88;
          LOBYTE(v102) = v86;
          DWORD1(v102) = v84;
          BYTE8(v102) = v82;
          BYTE9(v102) = v80;
          BYTE10(v102) = v78;
          BYTE11(v102) = v77;
          uint64_t v103 = v76;
          uint64_t v116 = v76;
          v115[7] = v101;
          v115[8] = v102;
          v115[0] = v94;
          v115[1] = v95;
          v115[5] = v99;
          v115[6] = v100;
          v115[3] = v97;
          v115[4] = v98;
          v115[2] = v96;
          outlined retain of TimelineClipProperties((uint64_t)&v94);
          swift_retain();
          closure #1 in TimelineClipProperties.createClip()((uint64_t)v115, &v93);
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)&v94);
          outlined release of TimelineClipProperties((uint64_t)&v94);
          long long v13 = v93;
        }
        else
        {
          type metadata accessor for TimelineDefinition();
          *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
          RERetain();
          long long v13 = TimelineDefinition.resource.getter();
          swift_setDeallocating();
          RERelease();
          swift_deallocClassInstance();
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
      }
    }
    else
    {
      *(void *)&long long v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      outlined destroy of BodyTrackingComponent?((uint64_t)&v94, &demangling cache variable for type metadata for BlendTreeNodeInternal?);
      lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
      swift_allocError();
      *(void *)uint64_t v40 = 0xD00000000000001DLL;
      *(void *)(v40 + 8) = 0x8000000228352180;
      *(unsigned char *)(v40 + 16) = 0;
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v117 = v2;
    uint64_t v15 = *((void *)v1 + 19);
    uint64_t v16 = *((void *)v1 + 20);
    uint64_t v17 = *((void *)v1 + 21);
    uint64_t v18 = *((void *)v1 + 22);
    char v19 = *((unsigned char *)v1 + 184);
    int v20 = *((_DWORD *)v1 + 47);
    char v21 = *((unsigned char *)v1 + 192);
    char v22 = *((unsigned char *)v1 + 193);
    char v23 = *((unsigned char *)v1 + 194);
    char v24 = *((unsigned char *)v1 + 195);
    int v25 = *((_DWORD *)v1 + 49);
    uint64_t v26 = *((void *)v1 + 25);
    unint64_t v28 = (__int16 *)((char *)v1 + 185);
    __int16 v27 = *(_WORD *)((char *)v1 + 185);
    long long v29 = *(long long *)((char *)v1 + 104);
    long long v107 = *(long long *)((char *)v1 + 88);
    long long v108 = v29;
    long long v30 = *(long long *)((char *)v1 + 136);
    long long v109 = *(long long *)((char *)v1 + 120);
    long long v110 = v30;
    long long v31 = *(long long *)((char *)v1 + 72);
    long long v105 = *(long long *)((char *)v1 + 56);
    long long v106 = v31;
    uint64_t v79 = v15;
    *(void *)&long long v111 = v15;
    *((void *)&v111 + 1) = v16;
    *(void *)&long long v112 = v17;
    *((void *)&v112 + 1) = v18;
    LOBYTE(v113) = v19;
    BYTE3(v113) = *((unsigned char *)v1 + 187);
    *(_WORD *)((char *)&v113 + 1) = v27;
    int v91 = v20;
    DWORD1(v113) = v20;
    char v89 = v21;
    BYTE8(v113) = v21;
    char v85 = v23;
    char v87 = v22;
    BYTE9(v113) = v22;
    BYTE10(v113) = v23;
    int v81 = v25;
    char v83 = v24;
    BYTE11(v113) = v24;
    HIDWORD(v113) = v25;
    uint64_t v114 = v26;
    if (TimelineClipProperties.isClipped.getter())
    {
      long long v32 = *(long long *)((char *)v1 + 104);
      long long v107 = *(long long *)((char *)v1 + 88);
      long long v108 = v32;
      long long v33 = *(long long *)((char *)v1 + 136);
      long long v109 = *(long long *)((char *)v1 + 120);
      long long v110 = v33;
      long long v34 = *(long long *)((char *)v1 + 72);
      long long v105 = *(long long *)((char *)v1 + 56);
      long long v106 = v34;
      *(void *)&long long v111 = v79;
      *((void *)&v111 + 1) = v16;
      *(void *)&long long v112 = v17;
      *((void *)&v112 + 1) = v18;
      LOBYTE(v113) = v19;
      __int16 v35 = *v28;
      BYTE3(v113) = *((unsigned char *)v1 + 187);
      *(_WORD *)((char *)&v113 + 1) = v35;
      DWORD1(v113) = v91;
      BYTE8(v113) = v89;
      BYTE9(v113) = v87;
      BYTE10(v113) = v85;
      BYTE11(v113) = v83;
      HIDWORD(v113) = v81;
      uint64_t v114 = v26;
      if (TimelineClipProperties.isModified.getter())
      {
        long long v36 = *(long long *)((char *)v1 + 104);
        long long v107 = *(long long *)((char *)v1 + 88);
        long long v108 = v36;
        long long v37 = *(long long *)((char *)v1 + 136);
        long long v109 = *(long long *)((char *)v1 + 120);
        long long v110 = v37;
        long long v38 = *(long long *)((char *)v1 + 72);
        long long v105 = *(long long *)((char *)v1 + 56);
        long long v106 = v38;
        *(void *)&long long v111 = v79;
        *((void *)&v111 + 1) = v16;
        *(void *)&long long v112 = v17;
        *((void *)&v112 + 1) = v18;
        LOBYTE(v113) = v19;
        __int16 v39 = *v28;
        BYTE3(v113) = *((unsigned char *)v1 + 187);
        *(_WORD *)((char *)&v113 + 1) = v39;
        DWORD1(v113) = v91;
        BYTE8(v113) = v89;
        BYTE9(v113) = v87;
        BYTE10(v113) = v85;
        BYTE11(v113) = v83;
        HIDWORD(v113) = v81;
        uint64_t v114 = v26;
        return TimelineClipProperties.createClip()();
      }
      else
      {
        swift_retain();
        long long v13 = TimelineDefinition.resource.getter();
        swift_release();
      }
    }
    else
    {
      if (!*(void *)(*((void *)v1 + 6) + 16)) {
        return 0;
      }
      uint64_t v42 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v42, (uint64_t)&v105);
      uint64_t v43 = *((void *)&v106 + 1);
      uint64_t v44 = v107;
      __swift_project_boxed_opaque_existential_1(&v105, *((uint64_t *)&v106 + 1));
      (*(void (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
      uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
      if (TimelineAsset)
      {
        uint64_t v46 = TimelineAsset;
        RETimelineDefinitionGetName();
        uint64_t v47 = String.init(cString:)();
        uint64_t v49 = v48;
        type metadata accessor for AnimationResource();
        long long v13 = (void *)swift_allocObject();
        v13[2] = v46;
        v13[3] = v47;
        v13[4] = v49;
        RERetain();
        REAssetSetSwiftObject();
        RERelease();
      }
      else
      {
        return 0;
      }
    }
  }
  return (uint64_t)v13;
}

unsigned char *BlendTreeAnimation.generate()(uint64_t a1)
{
  float result = BlendTreeAnimation.createResource()(a1);
  if (!v1 && !result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v3 = 0xD00000000000001CLL;
    *(void *)(v3 + 8) = 0x800000022834E530;
    *(unsigned char *)(v3 + 16) = 0;
    return (unsigned char *)swift_willThrow();
  }
  return result;
}

uint64_t specialized BlendTreeAnimation.isModified.getter(uint64_t *a1)
{
  if (*(void *)(v1 + 8)
    || (*(unsigned __int8 *)(v1 + 32) == 255 ? (BOOL v3 = *(unsigned char *)(v1 + 40) == 0) : (BOOL v3 = 1),
        !v3 ? (BOOL v4 = *(unsigned char *)(v1 + 42) == 0) : (BOOL v4 = 1),
        v4))
  {
    outlined init with copy of (Int, URL)(v1, (uint64_t)v9, a1);
    goto LABEL_12;
  }
  int v5 = *(unsigned __int8 *)(v1 + 43);
  outlined init with copy of (Int, URL)(v1, (uint64_t)v9, a1);
  if (v5 != 2)
  {
LABEL_12:
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, a1);
    return 1;
  }
  outlined init with copy of (Int, URL)((uint64_t)&v10, (uint64_t)v8, &demangling cache variable for type metadata for BlendTreeNode?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v9, a1);
  BOOL v6 = v8[3] != 0;
  outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for BlendTreeNode?);
  return v6;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance BlendTreeAnimation<A>(uint64_t **a1))()
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)BlendTreeAnimation.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance BlendTreeAnimation<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.blendLayer.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance BlendTreeAnimation<A>(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return BlendTreeAnimation.fillMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance BlendTreeAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.fillMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance BlendTreeAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance BlendTreeAnimation<A>()
{
  return BlendTreeAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance BlendTreeAnimation<A>(uint64_t a1, char a2)
{
  return BlendTreeAnimation.trimStart.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance BlendTreeAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.trimStart.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance BlendTreeAnimation<A>()
{
  return BlendTreeAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance BlendTreeAnimation<A>(uint64_t a1, char a2)
{
  return BlendTreeAnimation.trimEnd.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance BlendTreeAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.trimEnd.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance BlendTreeAnimation<A>()
{
  return BlendTreeAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance BlendTreeAnimation<A>(uint64_t a1, char a2)
{
  return BlendTreeAnimation.trimDuration.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance BlendTreeAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.trimDuration.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance BlendTreeAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.offset.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance BlendTreeAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.delay.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance BlendTreeAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.speed.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned char *protocol witness for AnimationDefinition.repeatMode.setter in conformance BlendTreeAnimation<A>(char *a1)
{
  char v2 = *a1;
  return BlendTreeAnimation.repeatMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance BlendTreeAnimation<A>(void *a1))()
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = BlendTreeAnimation.repeatMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned char *protocol witness for AnimationDefinitionInternal.generate() in conformance BlendTreeAnimation<A>(uint64_t a1)
{
  return BlendTreeAnimation.generate()(a1);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  char v2 = v1;
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  char v2 = v1;
  swift_bridgeObjectRetain();
  char v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  long long v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  char v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;

  char v2 = v1;
  swift_bridgeObjectRetain();
  char v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v17 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v17;
  }
  uint64_t v8 = *(void *)(v7 + 48) + 120 * v4;
  char v9 = *(void *)(v8 + 72);
  uint64_t v10 = *(void *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 88);
  long long v12 = *(void *)(v8 + 96);
  long long v13 = *(void *)(v8 + 104);
  uint64_t v14 = *(void **)(v8 + 112);
  outlined consume of __MaterialResource.CoreMaterialFunction?(*(void *)(v8 + 24), *(void *)(v8 + 32), *(void *)(v8 + 40), *(void *)(v8 + 48), *(void *)(v8 + 56), *(void **)(v8 + 64));
  outlined consume of __MaterialResource.CoreMaterialFunction?(v9, v10, v11, v12, v13, v14);
  uint64_t v15 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v15;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  char v2 = v1;
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  char v2 = v1;
  swift_bridgeObjectRetain();
  char v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  long long v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  char v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), v12);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    outlined init with take of Any(v12, a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v4;
    uint64_t v25 = *v4;
    *char v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v12 = v25;
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v12 + 56) + 80 * v8;
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    char v16 = *(unsigned char *)(v13 + 16);
    uint64_t v17 = *(void *)(v13 + 24);
    char v18 = *(unsigned char *)(v13 + 32);
    char v19 = *(unsigned char *)(v13 + 33);
    uint64_t v23 = *(void *)(v13 + 48);
    uint64_t v24 = *(void *)(v13 + 40);
    uint64_t v20 = *(void *)(v13 + 56);
    uint64_t v21 = *(void *)(v13 + 64);
    char v22 = *(unsigned char *)(v13 + 72);
    specialized _NativeDictionary._delete(at:)(v8, v12);
    *char v4 = v12;
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = v14;
    *(void *)(a3 + 8) = v15;
    *(unsigned char *)(a3 + 16) = v16;
    *(void *)(a3 + 24) = v17;
    *(unsigned char *)(a3 + 32) = v18;
    *(unsigned char *)(a3 + 33) = v19;
    *(void *)(a3 + 40) = v24;
    *(void *)(a3 + 48) = v23;
    *(void *)(a3 + 56) = v20;
    *(void *)(a3 + 64) = v21;
    *(unsigned char *)(a3 + 72) = v22;
  }
  else
  {
    *(_OWORD *)(a3 + 57) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v20 = v12;
    unint64_t v13 = *(void *)(v12 + 72) * v6;
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10 + v13, v11);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, *(void *)(v9 + 56) + v13, v11);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v11;
  }
  else
  {
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  char v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *char v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *char v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  char v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *char v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    *a3 = *(_OWORD *)(*(void *)(v11 + 56) + 16 * v8);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *char v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = xmmword_2283299E0;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v5 = v4;
  __int16 v9 = a3 & 0x101;
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, v9);
  LOBYTE(a2) = v11;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v5;
    uint64_t v15 = *v5;
    uint64_t *v5 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v13 = v15;
    }
    swift_bridgeObjectRelease();
    outlined init with take of BindableDataInternal((long long *)(*(void *)(v13 + 56) + 40 * v10), a4);
    specialized _NativeDictionary._delete(at:)(v10, v13);
    uint64_t *v5 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(a2 + 48);
        char v11 = (void *)(v10 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1) {
              *uint64_t v15 = *v11;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            uint64_t v17 = (_OWORD *)(v16 + 32 * v3);
            uint64_t v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 2))
            {
              long long v9 = v18[1];
              *uint64_t v17 = *v18;
              v17[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    char v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    char v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  uint64_t *v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        char v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              void *v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    char v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    char v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  BOOL v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        uint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          char v11 = *(void *)(a2 + 48);
          unint64_t v12 = (void *)(v11 + 8 * v3);
          uint64_t v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    char v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  long long *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        char v11 = *(void *)(a2 + 48);
        unint64_t v12 = (void *)(v11 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        uint64_t v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            uint64_t v16 = (void *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1) {
              *uint64_t v16 = *v12;
            }
            uint64_t v17 = *(void *)(a2 + 56);
            uint64_t v18 = v17 + 40 * v3;
            char v19 = (long long *)(v17 + 40 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              long long v9 = *v19;
              uint64_t v10 = v19[1];
              *(void *)(v18 + 32) = *((void *)v19 + 4);
              *(_OWORD *)uint64_t v18 = v9;
              *(_OWORD *)(v18 + 16) = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  BOOL v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        uint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        char v11 = *(void *)(a2 + 48);
        unint64_t v12 = (void *)(v11 + 8 * v3);
        uint64_t v13 = (void *)(v11 + 8 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *unint64_t v12 = *v13;
        }
        if (v3 < (uint64_t)v6 || *(void *)(a2 + 56) + 8 * v3 >= *(void *)(a2 + 56) + 8 * v6 + 8)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v14 = v3 == v6;
          int64_t v3 = v6;
          if (v14) {
            goto LABEL_6;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_19;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v15 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v16 = *v15;
    uint64_t v17 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v15 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v17 = *v15;
    uint64_t v16 = (-1 << result) - 1;
  }
  *uint64_t v15 = v17 & v16;
  uint64_t v18 = *(void *)(a2 + 16);
  char v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v20;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  long long v8;
  Swift::UInt64 *v9;
  Swift::UInt v10;
  Swift::UInt64 v11;
  Swift::UInt v12;
  Swift::UInt64 v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  long long *v18;
  long long v19;
  long long v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  char v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      long long v30 = (result + 1) & v7;
      long long v31 = v2;
      do
      {
        long long v9 = (Swift::UInt64 *)(*(void *)(v2 + 48) + 40 * v6);
        char v11 = *v9;
        uint64_t v10 = v9[1];
        unint64_t v12 = v9[2];
        uint64_t v13 = v9[4];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        if (v10)
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v10);
          if (v12) {
            goto LABEL_8;
          }
        }
        else
        {
          Hasher._combine(_:)(0);
          if (v12)
          {
LABEL_8:
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v12);
            if (v13) {
              goto LABEL_9;
            }
            goto LABEL_12;
          }
        }
        Hasher._combine(_:)(0);
        if (v13)
        {
LABEL_9:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          goto LABEL_13;
        }
LABEL_12:
        Hasher._combine(_:)(0);
LABEL_13:
        uint64_t v14 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        uint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v30)
        {
          char v2 = v31;
          if (v15 < v30) {
            goto LABEL_5;
          }
        }
        else
        {
          char v2 = v31;
          if (v15 >= v30) {
            goto LABEL_18;
          }
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_18:
          uint64_t v16 = *(void *)(v2 + 48);
          uint64_t v17 = v16 + 40 * v3;
          uint64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || v17 >= (unint64_t)v18 + 40)
          {
            char v19 = *v18;
            uint64_t v20 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)uint64_t v17 = v19;
            *(_OWORD *)(v17 + 16) = v20;
          }
          uint64_t v21 = *(void *)(v2 + 56);
          uint64_t v22 = (_OWORD *)(v21 + 32 * v3);
          BOOL v23 = (_OWORD *)(v21 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v22 >= v23 + 2))
          {
            unint64_t v8 = v23[1];
            *uint64_t v22 = *v23;
            v22[1] = v8;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << result) - 1;
  }
  *uint64_t v24 = v26 & v25;
  __int16 v27 = *(void *)(v2 + 16);
  unint64_t v28 = __OFSUB__(v27, 1);
  long long v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v29;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        uint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          char v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    char v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        uint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          char v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          double result = v14 + 80 * v3;
          uint64_t v15 = (const void *)(v14 + 80 * v6);
          if (80 * v3 < (uint64_t)(80 * v6) || result >= (unint64_t)v15 + 80 || (v16 = v3 == v6, int64_t v3 = v6, !v16))
          {
            double result = (unint64_t)memmove((void *)result, v15, 0x50uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    char v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        char v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11) {
            goto LABEL_6;
          }
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        uint64_t v14 = (void *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          void *v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        double result = v15 + 16 * v3;
        if (v3 < (uint64_t)v6 || result >= v15 + 16 * v6 + 16)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v16 = v3 == v6;
          int64_t v3 = v6;
          if (v16) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    char v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v10 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        char v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          unint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    char v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    char v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  BOOL v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  int v12;
  int v13;
  int v14;
  Swift::UInt16 v15;
  Swift::UInt8 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  long long *v20;
  long long v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  char v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      long long v31 = v4;
      long long v32 = (result + 1) & v7;
      long long v33 = v7;
      do
      {
        unint64_t v8 = 24 * v6;
        long long v9 = v2;
        uint64_t v10 = *(void *)(v2 + 48) + 24 * v6;
        char v11 = *(void *)(v10 + 8);
        unint64_t v12 = *(unsigned __int8 *)(v10 + 16);
        uint64_t v13 = *(unsigned __int8 *)(v10 + 17);
        uint64_t v14 = *(unsigned __int8 *)(v10 + 18);
        uint64_t v15 = *(_WORD *)v10;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v15);
        if (v12 == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v11);
        }
        char v2 = v9;
        if (v13 == 2)
        {
          Hasher._combine(_:)(0);
          if (v14 != 2) {
            goto LABEL_11;
          }
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v13 & 1);
          if (v14 != 2)
          {
LABEL_11:
            uint64_t v16 = v14 & 1;
            Hasher._combine(_:)(1u);
            goto LABEL_14;
          }
        }
        uint64_t v16 = 0;
LABEL_14:
        Hasher._combine(_:)(v16);
        double result = Hasher._finalize()();
        uint64_t v17 = result & v33;
        if (v3 >= (uint64_t)v32)
        {
          if (v17 >= v32 && v3 >= (uint64_t)v17)
          {
LABEL_20:
            uint64_t v18 = *(void *)(v9 + 48);
            char v19 = v18 + 24 * v3;
            uint64_t v20 = (long long *)(v18 + v8);
            if (24 * v3 < v8 || v19 >= (unint64_t)v20 + 24 || v3 != v6)
            {
              uint64_t v21 = *v20;
              *(void *)(v19 + 16) = *((void *)v20 + 2);
              *(_OWORD *)char v19 = v21;
            }
            uint64_t v22 = *(void *)(v9 + 56);
            BOOL v23 = (void *)(v22 + 8 * v3);
            uint64_t v24 = (void *)(v22 + 8 * v6);
            uint64_t v4 = v31;
            if (v3 != v6 || (int64_t v3 = v6, v23 >= v24 + 1))
            {
              *BOOL v23 = *v24;
              int64_t v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else if (v17 >= v32 || v3 >= (uint64_t)v17)
        {
          goto LABEL_20;
        }
        uint64_t v4 = v31;
LABEL_5:
        unint64_t v6 = (v6 + 1) & v33;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v26 = *v25;
    __int16 v27 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    __int16 v27 = *v25;
    uint64_t v26 = (-1 << result) - 1;
  }
  *uint64_t v25 = v27 & v26;
  unint64_t v28 = *(void *)(v2 + 16);
  long long v29 = __OFSUB__(v28, 1);
  long long v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v30;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48);
        uint64_t v10 = (_DWORD *)(v9 + 4 * v6);
        double result = MEMORY[0x22A68A330](*(void *)(a2 + 40), *v10, 4);
        char v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11) {
            goto LABEL_6;
          }
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        uint64_t v14 = (_DWORD *)(v9 + 4 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          void *v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(*(void *)(type metadata accessor for LoadTrace(0) - 8) + 72);
        uint64_t v17 = v16 * v3;
        double result = v15 + v16 * v3;
        uint64_t v18 = v16 * v6;
        char v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    BOOL v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        uint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          char v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    char v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        char v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11) {
            goto LABEL_6;
          }
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        uint64_t v14 = (void *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          void *v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(*(void *)(type metadata accessor for URL() - 8) + 72);
        uint64_t v17 = v16 * v3;
        double result = v15 + v16 * v3;
        uint64_t v18 = v16 * v6;
        char v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    BOOL v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  long long *v16;
  long long v17;
  uint64_t v18;
  unint64_t v19;
  long long *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        char v11 = 24 * v6;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        unint64_t v12 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        uint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = v14 + 24 * v3;
          uint64_t v16 = (long long *)(v14 + v11);
          if (24 * v3 < v11 || v15 >= (unint64_t)v16 + 24 || v3 != v6)
          {
            uint64_t v17 = *v16;
            *(void *)(v15 + 16) = *((void *)v16 + 2);
            *(_OWORD *)uint64_t v15 = v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          char v19 = v18 + 40 * v3;
          uint64_t v20 = (long long *)(v18 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= (unint64_t)v20 + 40))
          {
            long long v9 = *v20;
            uint64_t v10 = v20[1];
            *(void *)(v19 + 32) = *((void *)v20 + 4);
            *(_OWORD *)char v19 = v9;
            *(_OWORD *)(v19 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    BOOL v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        uint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          char v11 = *(void *)(a2 + 48);
          unint64_t v12 = (void *)(v11 + 8 * v3);
          uint64_t v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    char v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  long long v11;
  uint64_t v12;
  Swift::UInt64 v13;
  Swift::UInt32 v14;
  Swift::UInt16 v15;
  Swift::UInt64 v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  long long *v20;
  long long *v21;
  long long v22;
  long long v23;
  uint64_t v24;
  long long *v25;
  long long *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  char v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      long long v33 = v2;
      long long v34 = v4;
      do
      {
        unint64_t v12 = *(void *)(v2 + 48) + 48 * v6;
        uint64_t v13 = *(void *)(v12 + 16);
        uint64_t v14 = *(_DWORD *)(v12 + 44);
        uint64_t v15 = *(_WORD *)(v12 + 40);
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          uint64_t v16 = v13;
        }
        else {
          uint64_t v16 = 0;
        }
        Hasher._combine(_:)(v16);
        Hasher._combine(_:)(v15);
        Hasher._combine(_:)(v14);
        uint64_t v17 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        double result = swift_bridgeObjectRelease();
        uint64_t v18 = v17 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v18 < v8)
          {
            char v2 = v33;
            uint64_t v4 = v34;
          }
          else
          {
            char v2 = v33;
            uint64_t v4 = v34;
            if (v3 >= v18) {
              goto LABEL_15;
            }
          }
        }
        else
        {
          char v2 = v33;
          uint64_t v4 = v34;
          if (v18 >= v8 || v3 >= v18)
          {
LABEL_15:
            char v19 = *(void *)(v2 + 48);
            uint64_t v20 = (long long *)(v19 + 48 * v3);
            uint64_t v21 = (long long *)(v19 + 48 * v6);
            if (v3 != v6 || v20 >= v21 + 3)
            {
              uint64_t v22 = *v21;
              BOOL v23 = v21[2];
              v20[1] = v21[1];
              v20[2] = v23;
              *uint64_t v20 = v22;
            }
            uint64_t v24 = *(void *)(v2 + 56);
            uint64_t v25 = (long long *)(v24 + (v3 << 6));
            uint64_t v26 = (long long *)(v24 + (v6 << 6));
            if (v3 != v6 || (int64_t v3 = v6, v25 >= v26 + 4))
            {
              long long v9 = *v26;
              uint64_t v10 = v26[1];
              char v11 = v26[3];
              v25[2] = v26[2];
              v25[3] = v11;
              *uint64_t v25 = v9;
              v25[1] = v10;
              int64_t v3 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    __int16 v27 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v28 = *v27;
    long long v29 = (-1 << v3) - 1;
  }
  else
  {
    __int16 v27 = (uint64_t *)(v4 + 8 * (result >> 6));
    long long v29 = *v27;
    unint64_t v28 = (-1 << result) - 1;
  }
  *__int16 v27 = v29 & v28;
  long long v30 = *(void *)(v2 + 16);
  long long v31 = __OFSUB__(v30, 1);
  long long v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v32;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  Swift::UInt16 v12;
  Swift::UInt8 v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48) + 4 * v6;
        uint64_t v10 = *(unsigned __int8 *)(v9 + 2);
        char v11 = *(unsigned __int8 *)(v9 + 3);
        unint64_t v12 = *(_WORD *)v9;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        if (v10 == 2)
        {
          Hasher._combine(_:)(0);
          if (v11 != 2) {
            goto LABEL_8;
          }
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v10 & 1);
          if (v11 != 2)
          {
LABEL_8:
            uint64_t v13 = v11 & 1;
            Hasher._combine(_:)(1u);
            goto LABEL_11;
          }
        }
        uint64_t v13 = 0;
LABEL_11:
        Hasher._combine(_:)(v13);
        double result = Hasher._finalize()();
        uint64_t v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v8)
        {
          goto LABEL_16;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_16:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_DWORD *)(v15 + 4 * v3);
          uint64_t v17 = (_DWORD *)(v15 + 4 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          char v19 = (void *)(v18 + 8 * v3);
          uint64_t v20 = (void *)(v18 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 1))
          {
            uint64_t *v19 = *v20;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    BOOL v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v32 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v32;
    if ((*(void *)(v32 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v30 = (v11 + 1) & v10;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      long long v29 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v31 = v13;
      uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v9;
        v29(v7, *(void *)(a2 + 48) + v15 * v9, v4);
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v7, v4);
        unint64_t v19 = v18 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v19 < v30 || a1 < (uint64_t)v19) {
            goto LABEL_6;
          }
        }
        else if (v19 < v30 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        int64_t v22 = v15 * a1;
        if (v15 * a1 < v17 || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v17 + v15))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v22 != v17)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        if (v22 < v17 || *(void *)(a2 + 56) + v22 >= (unint64_t)(*(void *)(a2 + 56) + v17 + v15))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v9;
          if (v22 == v17) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v9;
LABEL_6:
        unint64_t v9 = (v9 + 1) & v10;
        uint64_t v12 = v32;
      }
      while (((*(void *)(v32 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    BOOL v23 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v23 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << a1) - 1;
  }
  *BOOL v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            BOOL v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *BOOL v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v48 = v7;
      uint64_t v49 = v2;
      uint64_t v46 = v4;
      unint64_t v47 = (v8 + 1) & v7;
      do
      {
        unint64_t v50 = v6;
        int64_t v51 = v3;
        uint64_t v9 = *(void *)(v2 + 48) + 120 * v6;
        Swift::UInt v10 = *(void *)(v9 + 8);
        int v11 = *(unsigned __int8 *)(v9 + 16);
        int v12 = *(unsigned __int8 *)(v9 + 18);
        uint64_t v52 = *(void *)(v9 + 24);
        uint64_t v53 = *(void *)(v9 + 32);
        uint64_t v56 = *(void *)(v9 + 40);
        uint64_t v57 = *(void *)(v9 + 56);
        uint64_t v13 = *(void *)(v9 + 72);
        uint64_t v58 = *(void **)(v9 + 64);
        uint64_t v14 = *(void *)(v9 + 80);
        uint64_t v54 = *(void *)(v9 + 48);
        uint64_t v55 = *(void *)(v9 + 88);
        uint64_t v16 = *(void *)(v9 + 96);
        uint64_t v15 = *(void *)(v9 + 104);
        uint64_t v17 = *(void **)(v9 + 112);
        Swift::UInt16 v18 = *(_WORD *)v9;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v18);
        if (v11 == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v10);
        }
        uint64_t v19 = v56;
        if (v12 == 2)
        {
          Swift::UInt8 v20 = 0;
        }
        else
        {
          Swift::UInt8 v20 = v12 & 1;
          Hasher._combine(_:)(1u);
        }
        Hasher._combine(_:)(v20);
        if (v56)
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v52);
          outlined copy of __MaterialResource.CoreMaterialFunction?(v52, v53, v56, v54, v57, v58);
          outlined copy of __MaterialResource.CoreMaterialFunction?(v13, v14, v55, v16, v15, v17);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          uint64_t v21 = (void *)REAssetHandleCopyAssetIdentifierString();
          type metadata accessor for CFStringRef(0);
          lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
          _CFObject.hash(into:)();

          Hasher._combine(_:)(*(void *)(v57 + 16));
          uint64_t v22 = *(void *)(v57 + 16);
          if (v22)
          {
            BOOL v23 = (Swift::UInt32 *)(v57 + 32);
            do
            {
              Swift::UInt32 v24 = *v23++;
              Hasher._combine(_:)(v24);
              --v22;
            }
            while (v22);
          }
          id v25 = v58;
          NSObject.hash(into:)();

          uint64_t v26 = v55;
          uint64_t v19 = v56;
          if (!v55)
          {
LABEL_22:
            Hasher._combine(_:)(0);
            goto LABEL_23;
          }
        }
        else
        {
          Hasher._combine(_:)(0);
          outlined copy of __MaterialResource.CoreMaterialFunction?(v52, v53, 0, v54, v57, v58);
          uint64_t v26 = v55;
          outlined copy of __MaterialResource.CoreMaterialFunction?(v13, v14, v55, v16, v15, v17);
          if (!v55) {
            goto LABEL_22;
          }
        }
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v13);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v27 = (void *)REAssetHandleCopyAssetIdentifierString();
        type metadata accessor for CFStringRef(0);
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
        _CFObject.hash(into:)();

        Hasher._combine(_:)(*(void *)(v15 + 16));
        uint64_t v28 = *(void *)(v15 + 16);
        if (v28)
        {
          BOOL v29 = (Swift::UInt32 *)(v15 + 32);
          do
          {
            Swift::UInt32 v30 = *v29++;
            Hasher._combine(_:)(v30);
            --v28;
          }
          while (v28);
        }
        id v31 = v17;
        NSObject.hash(into:)();

        uint64_t v26 = v55;
        uint64_t v19 = v56;
LABEL_23:
        uint64_t v4 = v46;
        Swift::Int v32 = Hasher._finalize()();
        outlined consume of __MaterialResource.CoreMaterialFunction?(v52, v53, v19, v54, v57, v58);
        outlined consume of __MaterialResource.CoreMaterialFunction?(v13, v14, v26, v16, v15, v17);
        unint64_t v33 = v32 & v48;
        unint64_t v3 = v51;
        uint64_t v2 = v49;
        if (v51 >= (uint64_t)v47)
        {
          if (v33 < v47) {
            goto LABEL_5;
          }
        }
        else if (v33 >= v47)
        {
          goto LABEL_28;
        }
        if (v51 >= (uint64_t)v33)
        {
LABEL_28:
          uint64_t v34 = *(void *)(v49 + 48);
          __int16 v35 = (char *)(v34 + 120 * v51);
          long long v36 = (char *)(v34 + 120 * v50);
          if (v51 != v50 || v35 >= v36 + 120) {
            memmove(v35, v36, 0x78uLL);
          }
          uint64_t v37 = *(void *)(v49 + 56);
          long long v38 = (void *)(v37 + 8 * v51);
          __int16 v39 = (void *)(v37 + 8 * v50);
          if (v51 != v50 || (unint64_t v3 = v50, v38 >= v39 + 1))
          {
            *long long v38 = *v39;
            unint64_t v3 = v50;
          }
        }
LABEL_5:
        unint64_t v6 = (v50 + 1) & v48;
      }
      while (((*(void *)(v46 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v40 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    uint64_t v41 = *v40;
    uint64_t v42 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v40 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v42 = *v40;
    uint64_t v41 = (-1 << a1) - 1;
  }
  uint64_t *v40 = v42 & v41;
  uint64_t v43 = *(void *)(v2 + 16);
  BOOL v44 = __OFSUB__(v43, 1);
  uint64_t v45 = v43 - 1;
  if (v44)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v45;
    ++*(_DWORD *)(v2 + 36);
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  *(void *)(a7[6] + 8 * result) = a2;
  uint64_t v7 = (void *)(a7[7] + 32 * result);
  *uint64_t v7 = a3;
  v7[1] = a4;
  uint64_t v7[2] = a5;
  void v7[3] = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

{
  uint64_t v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a4[6] + 120 * result;
  uint64_t v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 80) = v5;
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(v4 + 112) = *(void *)(a2 + 112);
  BOOL v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v6;
  uint64_t v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 48) = v7;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  void *v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  long long v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  uint64_t v5 = *(void *)(a4 + 48);
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a5[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  BOOL v7 = a5[7] + 56 * result;
  uint64_t v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)BOOL v7 = *(_OWORD *)a4;
  *(_OWORD *)(v7 + 16) = v8;
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a4 + 32);
  *(void *)(v7 + 48) = v5;
  BOOL v9 = a5[2];
  uint64_t v10 = __OFADD__(v9, 1);
  int v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a5[2] = v11;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 24 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  v6[2] = a4;
  *(void *)(a6[7] + 8 * result) = a5;
  BOOL v7 = a6[2];
  uint64_t v8 = __OFADD__(v7, 1);
  BOOL v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of BindableDataInternal(a3, a4[7] + 40 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  uint64_t v4 = (_OWORD *)(a4[7] + 80 * result);
  long long v5 = a3[4];
  long long v6 = a3[2];
  v4[3] = a3[3];
  v4[4] = v5;
  long long v7 = a3[1];
  *uint64_t v4 = *a3;
  v4[1] = v7;
  long long v4[2] = v6;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(a3, a4[7] + 8 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  BOOL v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  int v12 = *(void *)(v10 + 72) * a1;
  v11(v8 + v12, a2, v9);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a4[7] + v12, a3, v9);
  uint64_t v14 = a4[2];
  uint64_t v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of __RKEntityAction.ActionStateObservation(a3, a4[7] + 16 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  BOOL v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  int v11 = a4[2];
  int v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  long long v6 = (_OWORD *)(a5[7] + 80 * result);
  *(_OWORD *)((char *)v6 + 57) = *(_OWORD *)((char *)a4 + 57);
  long long v7 = a4[3];
  v6[2] = a4[2];
  v6[3] = v7;
  long long v8 = a4[1];
  *long long v6 = *a4;
  v6[1] = v8;
  uint64_t v9 = a5[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a5[2] = v11;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  *long long v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, __int16 a2, uint64_t a3, int a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(_WORD *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  *(unsigned char *)(v6 + 16) = a4 & 1;
  *(unsigned char *)(v6 + 17) = BYTE1(a4);
  *(unsigned char *)(v6 + 18) = BYTE2(a4);
  *(void *)(a6[7] + 8 * result) = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, int a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_DWORD *)(a4[6] + 4 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  uint64_t result = outlined init with take of LoadTrace(a3, v7 + *(void *)(*(void *)(Trace - 8) + 72) * a1);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, void *a3, __n128 a4, __n128 a5)
{
  a3[(result >> 6) + 8] |= 1 << result;
  *(void *)(a3[6] + 8 * result) = a2;
  BOOL v5 = (__n128 *)(a3[7] + 32 * result);
  __n128 *v5 = a4;
  v5[1] = a5;
  uint64_t v6 = a3[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a3[2] = v8;
  }
  return result;
}

BOOL specialized static BlendWeight.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v7 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(unsigned __int8 *)(a2 + 24);
  if (!*(unsigned char *)(a1 + 24))
  {
    if (!*(unsigned char *)(a2 + 24))
    {
      outlined consume of BlendWeight(*(void *)a1, v2, v4, 0);
      outlined consume of BlendWeight(v7, v6, v8, 0);
      return *(float *)&v3 == *(float *)&v7;
    }
    goto LABEL_17;
  }
  if (v5 == 1)
  {
    if (v9 == 1)
    {
      uint64_t v10 = *(void *)a1;
      if (v3 == v7 && v2 == v6)
      {
        outlined copy of BlendWeight(v10, v2, v8, 1);
        outlined copy of BlendWeight(v3, v2, v4, 1);
        outlined consume of BlendWeight(v3, v2, v4, 1);
        outlined consume of BlendWeight(v3, v2, v8, 1);
      }
      else
      {
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined copy of BlendWeight(v7, v6, v8, 1);
        outlined copy of BlendWeight(v3, v2, v4, 1);
        outlined consume of BlendWeight(v3, v2, v4, 1);
        outlined consume of BlendWeight(v7, v6, v8, 1);
        BOOL result = 0;
        if ((v12 & 1) == 0) {
          return result;
        }
      }
      float v16 = *(float *)&v4;
      float v17 = *(float *)&v8;
      return v16 == v17;
    }
    swift_bridgeObjectRetain();
    goto LABEL_17;
  }
  if (v9 != 2)
  {
    outlined copy of BindTarget(*(void *)a1, v2, v4);
LABEL_17:
    outlined copy of BlendWeight(v7, v6, v8, v9);
    outlined consume of BlendWeight(v3, v2, v4, v5);
    outlined consume of BlendWeight(v7, v6, v8, v9);
    return 0;
  }
  v20[0] = *(void *)a1;
  v20[1] = v2;
  char v21 = v4;
  v18[0] = v7;
  v18[1] = v6;
  char v19 = v8;
  outlined copy of BlendWeight(v7, v6, v8, 2);
  outlined copy of BlendWeight(v3, v2, v4, 2);
  outlined copy of BlendWeight(v7, v6, v8, 2);
  outlined copy of BlendWeight(v3, v2, v4, 2);
  char v15 = specialized static BindTarget.== infix(_:_:)((uint64_t)v20, (uint64_t)v18);
  outlined consume of BlendWeight(v3, v2, v4, 2);
  outlined consume of BlendWeight(v7, v6, v8, 2);
  outlined consume of BlendWeight(v7, v6, v8, 2);
  outlined consume of BlendWeight(v3, v2, v4, 2);
  if ((v15 & 1) == 0) {
    return 0;
  }
  float v16 = *((float *)&v4 + 1);
  float v17 = *((float *)&v8 + 1);
  return v16 == v17;
}

uint64_t outlined assign with take of AnimationDefinition?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of BlendWeight(uint64_t result, uint64_t a2, unsigned __int8 a3, char a4)
{
  if (a4 == 2) {
    return outlined copy of BindTarget(result, a2, a3);
  }
  if (a4 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of BlendWeight(uint64_t result, uint64_t a2, unsigned __int8 a3, char a4)
{
  if (a4 == 2) {
    return outlined consume of BindTarget(result, a2, a3);
  }
  if (a4 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_227F019C8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of BlendWeight(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));

  return MEMORY[0x270FA0238](v0, 73, 7);
}

uint64_t sub_227F01A18()
{
  swift_bridgeObjectRelease();
  outlined consume of BlendWeight(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));

  return MEMORY[0x270FA0238](v0, 57, 7);
}

uint64_t sub_227F01A60@<X0>(uint64_t *a1@<X8>)
{
  return BlendTreeAnimation.root.getter(a1);
}

uint64_t sub_227F01A88()
{
  return 16;
}

__n128 sub_227F01A94(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227F01AA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = BlendTreeAnimation.name.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_227F01AD0()
{
  return 16;
}

__n128 sub_227F01ADC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227F01AE8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = BlendTreeAnimation.blendLayer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227F01B14(unsigned int *a1)
{
  return BlendTreeAnimation.blendLayer.setter(*a1);
}

uint64_t sub_227F01B3C()
{
  return 16;
}

__n128 sub_227F01B48(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227F01B5C()
{
  return 16;
}

__n128 sub_227F01B68(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227F01B74@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = BlendTreeAnimation.fillMode.getter(&v3);
  *a1 = v3;
  return result;
}

unsigned __int8 *sub_227F01BB0(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return BlendTreeAnimation.fillMode.setter(&v2);
}

uint64_t sub_227F01BE8()
{
  return 16;
}

__n128 sub_227F01BF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227F01C00@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = BlendTreeAnimation.isAdditive.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_227F01C30(unsigned __int8 *a1)
{
  return BlendTreeAnimation.isAdditive.setter(*a1);
}

uint64_t sub_227F01C58()
{
  return 16;
}

__n128 sub_227F01C64(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227F01C70@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = BlendTreeAnimation.trimStart.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227F01CA4(uint64_t a1)
{
  return BlendTreeAnimation.trimStart.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_227F01CD4()
{
  return 16;
}

__n128 sub_227F01CE0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227F01CEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = BlendTreeAnimation.trimEnd.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227F01D20(uint64_t a1)
{
  return BlendTreeAnimation.trimEnd.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_227F01D50()
{
  return 16;
}

__n128 sub_227F01D5C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227F01D68@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = BlendTreeAnimation.trimDuration.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227F01D9C(uint64_t a1)
{
  return BlendTreeAnimation.trimDuration.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_227F01DCC()
{
  return 16;
}

__n128 sub_227F01DD8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227F01DE4(double *a1@<X8>)
{
  *a1 = BlendTreeAnimation.offset.getter();
}

void sub_227F01E10(double *a1)
{
}

uint64_t sub_227F01E38()
{
  return 16;
}

__n128 sub_227F01E44(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227F01E50(double *a1@<X8>)
{
  *a1 = BlendTreeAnimation.delay.getter();
}

void sub_227F01E7C(double *a1)
{
}

uint64_t sub_227F01EA4()
{
  return 16;
}

__n128 sub_227F01EB0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227F01EBC(float *a1@<X8>)
{
  *a1 = BlendTreeAnimation.speed.getter();
}

void sub_227F01EE8(float *a1)
{
}

uint64_t sub_227F01F10()
{
  return 16;
}

__n128 sub_227F01F1C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227F01F28(unsigned char *a1@<X8>)
{
  BlendTreeAnimation.repeatMode.getter(&v2);
  *a1 = v2;
}

unsigned char *sub_227F01F64(char *a1)
{
  char v2 = *a1;
  return BlendTreeAnimation.repeatMode.setter(&v2);
}

uint64_t sub_227F01F9C()
{
  return 16;
}

__n128 sub_227F01FA8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t destroy for BlendWeight(uint64_t a1)
{
  return outlined consume of BlendWeight(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for BlendWeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of BlendWeight(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for BlendWeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of BlendWeight(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BlendWeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of BlendWeight(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlendWeight(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BlendWeight(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for BlendWeight(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for BlendWeight(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BlendWeight()
{
  return &type metadata for BlendWeight;
}

uint64_t dispatch thunk of BlendTreeNode.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of BlendTreeNode.name.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of BlendTreeNode.name.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of BlendTreeNode.weight.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of BlendTreeNode.weight.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of BlendTreeNode.weight.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t destroy for BlendTreeSourceNode(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  char v5 = *(unsigned char *)(a1 + 80);

  return outlined consume of BlendWeight(v2, v3, v4, v5);
}

uint64_t initializeWithCopy for BlendTreeSourceNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  char v11 = *(unsigned char *)(a2 + 80);
  swift_bridgeObjectRetain();
  outlined copy of BlendWeight(v8, v9, v10, v11);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 80) = v11;
  return a1;
}

uint64_t assignWithCopy for BlendTreeSourceNode(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)a2 + 7);
  uint64_t v8 = *((void *)a2 + 8);
  uint64_t v9 = *((void *)a2 + 9);
  char v10 = *((unsigned char *)a2 + 80);
  outlined copy of BlendWeight(v7, v8, v9, v10);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v9;
  char v14 = *(unsigned char *)(a1 + 80);
  *(unsigned char *)(a1 + 80) = v10;
  outlined consume of BlendWeight(v11, v12, v13, v14);
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for BlendTreeSourceNode(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 72);
  char v6 = *(unsigned char *)(a2 + 80);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = v5;
  char v10 = *(unsigned char *)(a1 + 80);
  *(unsigned char *)(a1 + 80) = v6;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlendTreeSourceNode(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlendTreeSourceNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlendTreeSourceNode()
{
  return &type metadata for BlendTreeSourceNode;
}

uint64_t destroy for BlendTreeBlendNode(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = *(unsigned char *)(a1 + 56);

  return outlined consume of BlendWeight(v2, v3, v4, v5);
}

uint64_t initializeWithCopy for BlendTreeBlendNode(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  char v7 = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of BlendWeight(v4, v5, v6, v7);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = v7;
  return a1;
}

uint64_t assignWithCopy for BlendTreeBlendNode(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *((unsigned char *)v2 + 8);
  *(void *)(a1 + 16) = v2[2];
  *(void *)(a1 + 24) = v2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = v2[4];
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  LOBYTE(v2) = *((unsigned char *)v2 + 56);
  outlined copy of BlendWeight(v4, v5, v6, (char)v2);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  char v10 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = (_BYTE)v2;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for BlendTreeBlendNode(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  char v6 = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v5;
  char v10 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v6;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlendTreeBlendNode(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlendTreeBlendNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlendTreeBlendNode()
{
  return &type metadata for BlendTreeBlendNode;
}

uint64_t destroy for BlendTreeInvalidNode(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);

  return outlined consume of BlendWeight(v2, v3, v4, v5);
}

uint64_t initializeWithCopy for BlendTreeInvalidNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  outlined copy of BlendWeight(v4, v5, v6, v7);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  return a1;
}

uint64_t assignWithCopy for BlendTreeInvalidNode(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  LOBYTE(v2) = *((unsigned char *)v2 + 40);
  outlined copy of BlendWeight(v4, v5, v6, (char)v2);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  char v10 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = (_BYTE)v2;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for BlendTreeInvalidNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  char v10 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v6;
  outlined consume of BlendWeight(v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlendTreeInvalidNode(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlendTreeInvalidNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlendTreeInvalidNode()
{
  return &type metadata for BlendTreeInvalidNode;
}

uint64_t destroy for BlendTreeAnimation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 32);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 16), *(void *)(a1 + 24), v2);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  int v3 = *(unsigned __int8 *)(a1 + 184);
  if (v3 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 168), *(void *)(a1 + 176), v3);
  }
  uint64_t result = swift_release();
  if (*(void *)(a1 + 232))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 208);
  }
  return result;
}

uint64_t initializeWithCopy for BlendTreeAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  int v5 = *(unsigned __int8 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    outlined copy of BindTarget(v6, v7, v5);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v9;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  int v10 = *(unsigned __int8 *)(a2 + 184);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 168);
    uint64_t v12 = *(void *)(a2 + 176);
    outlined copy of BindTarget(v11, v12, v10);
    *(void *)(a1 + 168) = v11;
    *(void *)(a1 + 176) = v12;
    *(unsigned char *)(a1 + 184) = v10;
  }
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v13 = *(void *)(a2 + 232);
  swift_retain();
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 240);
    *(void *)(a1 + 232) = v13;
    *(void *)(a1 + 240) = v14;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8))(a1 + 208, a2 + 208, v13);
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v15;
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
  }
  return a1;
}

uint64_t assignWithCopy for BlendTreeAnimation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 16);
  int v5 = (long long *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v6 == 255)
    {
      long long v15 = *v5;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *uint64_t v4 = v15;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      outlined copy of BindTarget(v12, v13, *(unsigned char *)(a2 + 32));
      *(void *)(a1 + 16) = v12;
      *(void *)(a1 + 24) = v13;
      *(unsigned char *)(a1 + 32) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of BindTarget(a1 + 16);
    char v14 = *(unsigned char *)(a2 + 32);
    *uint64_t v4 = *v5;
    *(unsigned char *)(a1 + 32) = v14;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 24);
    outlined copy of BindTarget(v7, v8, *(unsigned char *)(a2 + 32));
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    unsigned __int8 v11 = *(unsigned char *)(a1 + 32);
    *(unsigned char *)(a1 + 32) = v6;
    outlined consume of BindTarget(v9, v10, v11);
  }
  int v16 = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v16;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  uint64_t v17 = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 56) = v17;
  uint64_t v18 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = v18;
  uint64_t v19 = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(void *)(a1 + 88) = v19;
  uint64_t v20 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v20;
  uint64_t v21 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = v21;
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = (long long *)(a1 + 168);
  BOOL v23 = (long long *)(a2 + 168);
  int v24 = *(unsigned __int8 *)(a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v24 == 255)
    {
      long long v33 = *v23;
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
      *uint64_t v22 = v33;
    }
    else
    {
      uint64_t v30 = *(void *)(a2 + 168);
      uint64_t v31 = *(void *)(a2 + 176);
      outlined copy of BindTarget(v30, v31, *(unsigned char *)(a2 + 184));
      *(void *)(a1 + 168) = v30;
      *(void *)(a1 + 176) = v31;
      *(unsigned char *)(a1 + 184) = v24;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    char v32 = *(unsigned char *)(a2 + 184);
    *uint64_t v22 = *v23;
    *(unsigned char *)(a1 + 184) = v32;
  }
  else
  {
    uint64_t v25 = *(void *)(a2 + 168);
    uint64_t v26 = *(void *)(a2 + 176);
    outlined copy of BindTarget(v25, v26, *(unsigned char *)(a2 + 184));
    uint64_t v27 = *(void *)(a1 + 168);
    uint64_t v28 = *(void *)(a1 + 176);
    *(void *)(a1 + 168) = v25;
    *(void *)(a1 + 176) = v26;
    unsigned __int8 v29 = *(unsigned char *)(a1 + 184);
    *(unsigned char *)(a1 + 184) = v24;
    outlined consume of BindTarget(v27, v28, v29);
  }
  int v34 = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = v34;
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  swift_release();
  uint64_t v35 = *(void *)(a2 + 232);
  if (!*(void *)(a1 + 232))
  {
    if (v35)
    {
      *(void *)(a1 + 232) = v35;
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      (**(void (***)(uint64_t, uint64_t))(v35 - 8))(a1 + 208, a2 + 208);
      return a1;
    }
LABEL_21:
    long long v36 = *(_OWORD *)(a2 + 208);
    long long v37 = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(_OWORD *)(a1 + 208) = v36;
    *(_OWORD *)(a1 + 224) = v37;
    return a1;
  }
  if (!v35)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 208);
    goto LABEL_21;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  return a1;
}

__n128 __swift_memcpy248_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for BlendTreeAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = (_OWORD *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 != 255)
  {
    int v7 = *(unsigned __int8 *)(a2 + 32);
    if (v7 != 255)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *v5;
      *(unsigned char *)(a1 + 32) = v7;
      outlined consume of BindTarget(v8, v9, v6);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
LABEL_6:
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v10;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  long long v12 = (_OWORD *)(a2 + 168);
  int v13 = *(unsigned __int8 *)(a1 + 184);
  if (v13 != 255)
  {
    int v14 = *(unsigned __int8 *)(a2 + 184);
    if (v14 != 255)
    {
      uint64_t v15 = *(void *)(a1 + 168);
      uint64_t v16 = *(void *)(a1 + 176);
      *(_OWORD *)(a1 + 168) = *v12;
      *(unsigned char *)(a1 + 184) = v14;
      outlined consume of BindTarget(v15, v16, v13);
      goto LABEL_11;
    }
    outlined destroy of BindTarget(a1 + 168);
  }
  *(_OWORD *)(a1 + 168) = *v12;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
LABEL_11:
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_release();
  if (*(void *)(a1 + 232)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 208);
  }
  long long v17 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v17;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  return a1;
}

uint64_t getEnumTagSinglePayload for BlendTreeAnimation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 248)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BlendTreeAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 248) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 248) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for BlendTreeAnimation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_227F03368()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_bridgeObjectRelease();
  outlined consume of BlendWeight(*(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));

  return MEMORY[0x270FA0238](v0, 97, 7);
}

void one-time initialization function for basicFlipAnimationData()
{
  static EmphasizeAnimations.basicFlipAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicFlipAnimationData;
}

void one-time initialization function for playfulFlipAnimationData()
{
  static EmphasizeAnimations.playfulFlipAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulFlipAnimationData;
}

void one-time initialization function for wildFlipAnimationData()
{
  static EmphasizeAnimations.wildFlipAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildFlipAnimationData;
}

void *specialized static EmphasizeAnimations.createEmphasizeFlipAnimation(style:)(unsigned char *a1)
{
  if (!*a1)
  {
    long long v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 63, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for basicFlipAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    long long v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 125, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for playfulFlipAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  long long v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 183, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for wildFlipAnimationData != -1) {
LABEL_9:
  }
    swift_once();
LABEL_8:
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t InputManager.deinit()
{
  return v0;
}

uint64_t InputManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InputManager()
{
  return self;
}

uint64_t method lookup function for InputManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for InputManager);
}

id one-time initialization function for shared()
{
  type metadata accessor for __RKSceneAssetLookupTable();
  uint64_t v0 = swift_allocObject();
  id result = objc_msgSend(self, sel_strongToWeakObjectsMapTable);
  *(void *)(v0 + 16) = result;
  static __RKSceneAssetLookupTable.shared = (_UNKNOWN *)v0;
  return result;
}

uint64_t static __RKSceneAssetLookupTable.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

id __RKSceneAssetLookupTable.reSceneAsset(for:)()
{
  id v1 = *(id *)(v0 + 16);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v3 = objc_msgSend(v1, sel_objectForKey_, isa);

  return v3;
}

void __RKSceneAssetLookupTable.registerRESceneAsset(_:for:)(uint64_t a1)
{
  id v3 = *(id *)(v1 + 16);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, sel_setObject_forKey_, a1, isa);
}

Swift::Void __swiftcall __RKSceneAssetLookupTable.removeAllRESceneAssets()()
{
  objc_msgSend(*(id *)(v0 + 16), sel_removeAllObjects);
}

uint64_t __RKSceneAssetLookupTable.deinit()
{
  return v0;
}

uint64_t __RKSceneAssetLookupTable.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKSceneAssetLookupTable()
{
  return self;
}

uint64_t method lookup function for __RKSceneAssetLookupTable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKSceneAssetLookupTable);
}

uint64_t dispatch thunk of __RKSceneAssetLookupTable.reSceneAsset(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of __RKSceneAssetLookupTable.registerRESceneAsset(_:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of __RKSceneAssetLookupTable.removeAllRESceneAssets()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t QueryResult.init()@<X0>(uint64_t a1@<X8>)
{
  static Array._allocateUninitialized(_:)();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t result = AnySequence.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t QueryResult.init(_:count:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3 & 1;
  return result;
}

uint64_t QueryResult.Iterator.next()()
{
  return AnyIterator.next()();
}

uint64_t QueryResult.makeIterator()@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  uint64_t v2 = dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance QueryResult<A>@<X0>(uint64_t *a1@<X8>)
{
  QueryResult.makeIterator()(a1);

  return swift_release();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance QueryResult<A>()
{
  uint64_t v0 = specialized Sequence._copyToContiguousArray()();
  swift_release();
  return v0;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in QueryResult<A>()
{
  return swift_getWitnessTable();
}

uint64_t initializeBufferWithCopyOfBuffer for QueryResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for QueryResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithTake for QueryResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryResult(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for QueryResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for QueryResult.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __RKVisibilityShowRiseAnimation.deinit()
{
  return v0;
}

uint64_t __RKVisibilityShowRiseAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityShowRiseAnimation()
{
  return self;
}

uint64_t specialized static __RKVisibilityShowRiseAnimation.createVisibilityShowRiseAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(long long *a1, float a2, float a3, float32x4_t a4, uint64_t a5, unsigned char *a6, char a7)
{
  long long v28 = *a1;
  long long v26 = a1[2];
  long long v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 109, 0, MEMORY[0x263F8EE78]);
      int v13 = &outlined read-only object #1 of static __RKVisibilityShowRiseAnimation.createVisibilityShowRiseAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 94, 0, MEMORY[0x263F8EE78]);
      int v13 = &outlined read-only object #2 of static __RKVisibilityShowRiseAnimation.createVisibilityShowRiseAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 109, 0, MEMORY[0x263F8EE78]);
    int v13 = &outlined read-only object #0 of static __RKVisibilityShowRiseAnimation.createVisibilityShowRiseAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((void *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  char v7 = BYTE1(v31);
  float v9 = (float)v15;
  unsigned int v8 = DWORD2(v31);
  uint64_t v16 = (long long *)&rawValue[6 * v15];
  long long v24 = *v16;
  long long v25 = *(v16 - 1);
  long long v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_15:
  }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  unint64_t v18 = rawValue[2];
  unint64_t v17 = rawValue[3];
  float v19 = a2 / v9;
  if (v18 >= v17 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, rawValue);
  }
  rawValue[2] = v18 + 1;
  uint64_t v20 = &rawValue[6 * v18];
  void v20[2] = v25;
  void v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  long long v30 = v28;
  long long v31 = v27;
  long long v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((void *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(void *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_22830EC60;
    *(void *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

float SIMD3<>._xy.setter(__n128 a1)
{
  a1.n128_u64[1] = v1->n128_u32[2];
  *uint64_t v1 = a1;
  return a1.n128_f32[0];
}

float (*SIMD3<>._xy.modify(void *a1))(long long *a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return SIMD3<>._xy.modify;
}

float SIMD3<>._xy.modify(long long *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  long long v2 = *a1;
  *((void *)&v2 + 1) = *(unsigned int *)(v1 + 8);
  *(_OWORD *)uint64_t v1 = v2;
  return *(float *)&v2;
}

__n128 SIMD4<>._xyz.setter(__n128 result)
{
  result.n128_u32[3] = v1->n128_u32[3];
  *uint64_t v1 = result;
  return result;
}

__n128 (*SIMD4<>._xyz.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x18uLL);
  *a1 = v3;
  long long v4 = *v1;
  HIDWORD(v4) = 0;
  v3[2] = v1;
  *(_OWORD *)uint64_t v3 = v4;
  return SIMD4<>._xyz.modify;
}

__n128 SIMD4<>._xyz.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[2];
  long long v3 = *(_OWORD *)v1;
  HIDWORD(v3) = *(_DWORD *)(v2 + 12);
  *(_OWORD *)uint64_t v2 = v3;
  free(v1);
  return result;
}

__n128 sub_227F03F4C@<Q0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = a1->n128_u64[0];
  return result;
}

float sub_227F03F58(void *a1, uint64_t a2)
{
  *(void *)&long long v2 = *a1;
  *((void *)&v2 + 1) = *(unsigned int *)(a2 + 8);
  *(_OWORD *)a2 = v2;
  return *(float *)&v2;
}

uint64_t sub_227F03F70()
{
  return 0;
}

__n128 sub_227F03F80@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

__n128 sub_227F03F90(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  result.n128_u32[3] = a2->n128_u32[3];
  *a2 = result;
  return result;
}

uint64_t sub_227F03FA4()
{
  return 0;
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static ForceEffectLogger.logger);
  __swift_project_value_buffer(v0, (uint64_t)static ForceEffectLogger.logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static AnimationLogger.logger);
  __swift_project_value_buffer(v0, (uint64_t)static AnimationLogger.logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static BlendShapeLogger.logger);
  __swift_project_value_buffer(v0, (uint64_t)static BlendShapeLogger.logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, logger);
  __swift_project_value_buffer(v0, (uint64_t)logger);
  return Logger.init(subsystem:category:)();
}

uint64_t PhotogrammetrySample.id.getter()
{
  return *(void *)v0;
}

{
  return MEMORY[0x270F1AB68]();
}

id PhotogrammetrySample.image.getter()
{
  return *(id *)(v0 + 8);
}

uint64_t PhotogrammetrySample.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return MEMORY[0x270F1ABE8]();
}

uint64_t PhotogrammetrySample.metadata.setter(uint64_t a1)
{
  swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;

  return PhotogrammetrySample.metadata.didset();
}

uint64_t PhotogrammetrySample.metadata.didset()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  uint64_t v2 = *(void *)(*(void *)(v1 - 8) + 64);
  MEMORY[0x270FA5388](v1 - 8);
  long long v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (Int, URL)(v0 + 72, (uint64_t)&v18, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((void *)&v19 + 1))
  {
    uint64_t v4 = type metadata accessor for PhotogrammetrySample();
    swift_bridgeObjectRetain();
    int v5 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))((char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v5 ^ 1u, 1, v4);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v18, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v4 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))((char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v4);
  }
  type metadata accessor for PhotogrammetrySample();
  uint64_t v6 = *(void *)(v4 - 8);
  char v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v7((char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4))
  {
    uint64_t v17 = v0 + 72;
    uint64_t v8 = swift_bridgeObjectRelease();
    uint64_t v16 = (uint64_t)&v16;
    MEMORY[0x270FA5388](v8);
    unint64_t v9 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v10 = outlined init with copy of (Int, URL)((uint64_t)&v16 - v9, (uint64_t)&v16 - v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
    MEMORY[0x270FA5388](v10);
    outlined init with copy of (Int, URL)((uint64_t)&v16 - v9, (uint64_t)&v16 - v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v7((char *)&v16 - v9, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16 - v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16 - v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
      long long v18 = 0u;
      long long v19 = 0u;
    }
    else
    {
      *((void *)&v19 + 1) = v4;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
      (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 32))(boxed_opaque_existential_1, (char *)&v16 - v9, v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16 - v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    outlined assign with take of Any?((uint64_t)&v18, v17);
    return outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for PhotogrammetrySample?);
  }
  else
  {
    uint64_t v11 = PhotogrammetrySample.metadata.setter();
    MEMORY[0x270FA5388](v11);
    long long v12 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of (Int, URL)((uint64_t)v3, (uint64_t)v12, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v7(v12, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for PhotogrammetrySample?);
      long long v18 = 0u;
      long long v19 = 0u;
    }
    else
    {
      *((void *)&v19 + 1) = v4;
      uint64_t v15 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
      (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 32))(v15, v12, v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    return outlined assign with take of Any?((uint64_t)&v18, v0 + 72);
  }
}

uint64_t (*PhotogrammetrySample.metadata.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return PhotogrammetrySample.metadata.modify;
}

uint64_t PhotogrammetrySample.metadata.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return PhotogrammetrySample.metadata.didset();
  }
  return result;
}

void *PhotogrammetrySample.depthDataMap.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void key path setter for PhotogrammetrySample.depthDataMap : PhotogrammetrySample(id *a1, uint64_t a2)
{
  id v3 = *a1;
  uint64_t v4 = *(void **)(a2 + 24);
  id v5 = *a1;

  *(void *)(a2 + 24) = v3;
  PhotogrammetrySample.depthDataMap.didset();
}

void PhotogrammetrySample.depthDataMap.setter(void *a1)
{
  id v3 = *(void **)(v1 + 24);
  id v4 = a1;

  *(void *)(v1 + 24) = a1;
  PhotogrammetrySample.depthDataMap.didset();
}

void PhotogrammetrySample.depthDataMap.didset()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of (Int, URL)(v0 + 72, (uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v22 = v0 + 72;
  if (*((void *)&v24 + 1))
  {
    uint64_t v4 = type metadata accessor for PhotogrammetrySample();
    id v5 = v1;
    int v6 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))((char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 ^ 1u, 1, v4);
  }
  else
  {
    id v7 = v1;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v4 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))((char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v4);
  }
  type metadata accessor for PhotogrammetrySample();
  uint64_t v8 = *(void *)(v4 - 8);
  unint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v10 = v9((char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4);
  if (v10)
  {
    v20[1] = v20;
    uint64_t v21 = v1;
    MEMORY[0x270FA5388](v10);
    unint64_t v11 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v12 = outlined init with copy of (Int, URL)((uint64_t)v20 - v11, (uint64_t)v20 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    MEMORY[0x270FA5388](v12);
    outlined init with copy of (Int, URL)((uint64_t)v20 - v11, (uint64_t)v20 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v9((char *)v20 - v11, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
      long long v23 = 0u;
      long long v24 = 0u;
    }
    else
    {
      *((void *)&v24 + 1) = v4;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 32))(boxed_opaque_existential_1, (char *)v20 - v11, v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    long long v18 = v21;
    outlined assign with take of Any?((uint64_t)&v23, v22);

    outlined destroy of BodyTrackingComponent?((uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
  }
  else
  {
    id v13 = v1;
    uint64_t v14 = PhotogrammetrySample.depthDataMap.setter();
    MEMORY[0x270FA5388](v14);
    outlined init with copy of (Int, URL)((uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
    int v15 = v9((char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4);
    uint64_t v16 = v22;
    if (v15 == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
      long long v23 = 0u;
      long long v24 = 0u;
    }
    else
    {
      *((void *)&v24 + 1) = v4;
      long long v19 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 32))(v19, (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    outlined assign with take of Any?((uint64_t)&v23, v16);
  }
}

void (*PhotogrammetrySample.depthDataMap.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return PhotogrammetrySample.depthDataMap.modify;
}

void PhotogrammetrySample.depthDataMap.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    PhotogrammetrySample.depthDataMap.didset();
  }
}

uint64_t PhotogrammetrySample.gravity.getter()
{
  return *(void *)(v0 + 32);
}

{
  return MEMORY[0x270F1ABD8]();
}

uint64_t PhotogrammetrySample.gravity.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = a3;
  *(unsigned char *)(v4 + 56) = a4 & 1;
  return PhotogrammetrySample.gravity.didset();
}

uint64_t PhotogrammetrySample.gravity.didset()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (Int, URL)(v0 + 72, (uint64_t)&v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v18 = v1;
  if (*((void *)&v20 + 1))
  {
    uint64_t v5 = type metadata accessor for PhotogrammetrySample();
    int v6 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 ^ 1u, 1, v5);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v5 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v5);
  }
  type metadata accessor for PhotogrammetrySample();
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v9 = v8((char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v5);
  if (v9)
  {
    uint64_t v17 = (uint64_t)&v17;
    uint64_t v18 = v0 + 72;
    MEMORY[0x270FA5388](v9);
    unint64_t v10 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v11 = outlined init with copy of (Int, URL)((uint64_t)&v17 - v10, (uint64_t)&v17 - v10, &demangling cache variable for type metadata for PhotogrammetrySample?);
    MEMORY[0x270FA5388](v11);
    outlined init with copy of (Int, URL)((uint64_t)&v17 - v10, (uint64_t)&v17 - v10, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v8((char *)&v17 - v10, 1, v5) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - v10, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - v10, &demangling cache variable for type metadata for PhotogrammetrySample?);
      long long v19 = 0u;
      long long v20 = 0u;
    }
    else
    {
      *((void *)&v20 + 1) = v5;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
      (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 32))(boxed_opaque_existential_1, (char *)&v17 - v10, v5);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v17 - v10, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    outlined assign with take of Any?((uint64_t)&v19, v18);
    return outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for PhotogrammetrySample?);
  }
  else
  {
    uint64_t v12 = PhotogrammetrySample.gravity.setter();
    MEMORY[0x270FA5388](v12);
    id v13 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of (Int, URL)((uint64_t)v4, (uint64_t)v13, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v8(v13, 1, v5) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for PhotogrammetrySample?);
      long long v19 = 0u;
      long long v20 = 0u;
    }
    else
    {
      *((void *)&v20 + 1) = v5;
      uint64_t v16 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
      (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 32))(v16, v13, v5);
      outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    return outlined assign with take of Any?((uint64_t)&v19, v0 + 72);
  }
}

uint64_t (*PhotogrammetrySample.gravity.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return PhotogrammetrySample.gravity.modify;
}

uint64_t PhotogrammetrySample.gravity.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return PhotogrammetrySample.gravity.didset();
  }
  return result;
}

void *PhotogrammetrySample.objectMask.getter()
{
  uint64_t v1 = *(void **)(v0 + 64);
  id v2 = v1;
  return v1;
}

void key path setter for PhotogrammetrySample.objectMask : PhotogrammetrySample(id *a1, uint64_t a2)
{
  id v3 = *a1;
  uint64_t v4 = *(void **)(a2 + 64);
  id v5 = *a1;

  *(void *)(a2 + 64) = v3;
  PhotogrammetrySample.objectMask.didset();
}

void PhotogrammetrySample.objectMask.setter(void *a1)
{
  id v3 = *(void **)(v1 + 64);
  id v4 = a1;

  *(void *)(v1 + 64) = a1;
  PhotogrammetrySample.objectMask.didset();
}

void PhotogrammetrySample.objectMask.didset()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 64);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of (Int, URL)(v0 + 72, (uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v22 = v0 + 72;
  if (*((void *)&v24 + 1))
  {
    uint64_t v4 = type metadata accessor for PhotogrammetrySample();
    id v5 = v1;
    int v6 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))((char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 ^ 1u, 1, v4);
  }
  else
  {
    id v7 = v1;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v4 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))((char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v4);
  }
  type metadata accessor for PhotogrammetrySample();
  uint64_t v8 = *(void *)(v4 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v10 = v9((char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4);
  if (v10)
  {
    v20[1] = v20;
    uint64_t v21 = v1;
    MEMORY[0x270FA5388](v10);
    unint64_t v11 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v12 = outlined init with copy of (Int, URL)((uint64_t)v20 - v11, (uint64_t)v20 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    MEMORY[0x270FA5388](v12);
    outlined init with copy of (Int, URL)((uint64_t)v20 - v11, (uint64_t)v20 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (v9((char *)v20 - v11, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
      long long v23 = 0u;
      long long v24 = 0u;
    }
    else
    {
      *((void *)&v24 + 1) = v4;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 32))(boxed_opaque_existential_1, (char *)v20 - v11, v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - v11, &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    uint64_t v18 = v21;
    outlined assign with take of Any?((uint64_t)&v23, v22);

    outlined destroy of BodyTrackingComponent?((uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
  }
  else
  {
    id v13 = v1;
    uint64_t v14 = PhotogrammetrySample.objectMask.setter();
    MEMORY[0x270FA5388](v14);
    outlined init with copy of (Int, URL)((uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
    int v15 = v9((char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v4);
    uint64_t v16 = v22;
    if (v15 == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
      long long v23 = 0u;
      long long v24 = 0u;
    }
    else
    {
      *((void *)&v24 + 1) = v4;
      long long v19 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 32))(v19, (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      outlined destroy of BodyTrackingComponent?((uint64_t)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PhotogrammetrySample?);
    }
    outlined assign with take of Any?((uint64_t)&v23, v16);
  }
}

void (*PhotogrammetrySample.objectMask.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return PhotogrammetrySample.objectMask.modify;
}

void PhotogrammetrySample.objectMask.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    PhotogrammetrySample.objectMask.didset();
  }
}

double PhotogrammetrySample.init(id:image:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = v6;
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(unsigned char *)(a3 + 56) = 1;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(void *)(a3 + 96) = 0;
  *(void *)a3 = a1;
  return result;
}

uint64_t one-time initialization function for idManager()
{
  type metadata accessor for UniqueIDManager();
  uint64_t v0 = (void *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  uint64_t v2 = MEMORY[0x263F8EE88];
  *(_DWORD *)(result + 16) = 0;
  v0[2] = result;
  v0[3] = v2;
  v0[4] = 0;
  static PhotogrammetrySample.idManager = (uint64_t)v0;
  return result;
}

uint64_t PhotogrammetrySample.description.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = &v36[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x270FA5388](v4);
  unint64_t v6 = &v36[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)&long long v41 = 0;
  *((void *)&v41 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(172);
  long long v39 = v41;
  v7._countAndFlagsBits = 540697705;
  v7._object = (void *)0xE400000000000000;
  String.append(_:)(v7);
  *(void *)&long long v41 = *(void *)v0;
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x3A6567616D690A2CLL;
  v9._object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  *(void *)&long long v41 = *(void *)(v0 + 8);
  type metadata accessor for CVBufferRef(0);
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 0x61646174656D0A2CLL;
  v10._object = (void *)0xEC000000203A6174;
  String.append(_:)(v10);
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._object = (void *)0x80000002283522D0;
  v12._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v12);
  *(void *)&long long v41 = *(void *)(v0 + 24);
  id v13 = (id)v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVBufferRef?);
  v14._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x7469766172670A2CLL;
  v15._object = (void *)0xEB00000000203A79;
  String.append(_:)(v15);
  uint64_t v16 = *(void *)(v0 + 48);
  char v17 = *(unsigned char *)(v0 + 56);
  long long v41 = *(_OWORD *)(v0 + 32);
  uint64_t v42 = v16;
  char v43 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMAcceleration?);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x7463656A626F0A2CLL;
  v19._object = (void *)0xEE00203A6B73614DLL;
  String.append(_:)(v19);
  *(void *)&long long v41 = *(void *)(v0 + 64);
  id v20 = (id)v41;
  v21._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x657275747061630ALL;
  v22._object = (void *)0xEE00203A656D6954;
  String.append(_:)(v22);
  PhotogrammetrySample.captureTime.getter((uint64_t)v6);
  v23._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0xD000000000000015;
  v24._object = (void *)0x80000002283522F0;
  String.append(_:)(v24);
  *(void *)&long long v41 = PhotogrammetrySample.depthConfidenceMap.getter();
  v25._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x6E69646E756F620ALL;
  v26._object = (void *)0xEE00203A786F4267;
  String.append(_:)(v26);
  PhotogrammetrySample.boundingBox.getter((uint64_t)v40);
  outlined init with take of Transform?((uint64_t)v40, (uint64_t)&v41, &demangling cache variable for type metadata for simd_float4x4?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_float4x4?);
  v27._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0x3A6172656D61630ALL;
  v28._object = (void *)0xE900000000000020;
  String.append(_:)(v28);
  PhotogrammetrySample.camera.getter((uint64_t)&v37);
  outlined init with take of Transform?((uint64_t)&v37, (uint64_t)&v41, &demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
  outlined init with take of Transform?((uint64_t)&v41, (uint64_t)v36, &demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
  v29._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x6E6F69737365730ALL;
  v30._object = (void *)0xEC000000203A4449;
  String.append(_:)(v30);
  PhotogrammetrySample.sessionID.getter((uint64_t)v3);
  v31._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0x746E656D6765730ALL;
  v32._object = (void *)0xEC000000203A4449;
  String.append(_:)(v32);
  uint64_t v37 = PhotogrammetrySample.scanPassID.getter();
  char v38 = v33 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  v34._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t PhotogrammetrySample.captureTime.getter@<X0>(uint64_t a1@<X8>)
{
  return PhotogrammetrySample.captureTime.getter(MEMORY[0x270FB26B0], MEMORY[0x263F07490], a1);
}

uint64_t PhotogrammetrySample.depthConfidenceMap.getter()
{
  return PhotogrammetrySample.depthConfidenceMap.getter(MEMORY[0x270FB26C0]);
}

void PhotogrammetrySample.boundingBox.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PhotogrammetrySample();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x270FA5388](v7 - 8);
  Swift::String v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (Int, URL)(v1 + 72, (uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v43)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
    goto LABEL_7;
  }
  int v10 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, v10 ^ 1u, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
LABEL_7:
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)logger);
    Swift::String v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      Swift::String v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v24 = 0;
      _os_log_impl(&dword_227DD2000, v22, v23, "No wrapped CoreOC.PhotogrammetrySample!", v24, 2u);
      MEMORY[0x22A696500](v24, -1, -1);
    }

    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample.Object?);
  MEMORY[0x270FA5388](v11 - 8);
  id v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  PhotogrammetrySample.object.getter();
  uint64_t v14 = type metadata accessor for PhotogrammetrySample.Object();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    PhotogrammetrySample.Object.boundingBox.getter();
    long long v40 = v31;
    long long v41 = v30;
    long long v38 = v33;
    long long v39 = v32;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    long long v29 = v38;
    long long v28 = v39;
    long long v27 = v40;
    long long v25 = v41;
    char v26 = 0;
    goto LABEL_13;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for PhotogrammetrySample.Object?);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample.Scene?);
  MEMORY[0x270FA5388](v16 - 8);
  Swift::String v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  PhotogrammetrySample.scene.getter();
  uint64_t v19 = type metadata accessor for PhotogrammetrySample.Scene();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
  {
    PhotogrammetrySample.Scene.boundingBox.getter();
    long long v40 = v35;
    long long v41 = v34;
    long long v38 = v37;
    long long v39 = v36;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
    long long v29 = v38;
    long long v28 = v39;
    long long v27 = v40;
    long long v25 = v41;
    char v26 = 0;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for PhotogrammetrySample.Scene?);
LABEL_12:
  long long v25 = 0uLL;
  char v26 = 1;
  long long v27 = 0uLL;
  long long v28 = 0uLL;
  long long v29 = 0uLL;
LABEL_13:
  *(_OWORD *)a1 = v25;
  *(_OWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = v28;
  *(_OWORD *)(a1 + 48) = v29;
  *(unsigned char *)(a1 + 64) = v26;
}

uint64_t PhotogrammetrySample.camera.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PhotogrammetrySample.Camera();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
  MEMORY[0x270FA5388](v7 - 8);
  Swift::String v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of (Int, URL)(v1 + 72, (uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!*((void *)&v37 + 1))
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v27 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v12, 1, 1, v27);
    goto LABEL_6;
  }
  uint64_t v13 = type metadata accessor for PhotogrammetrySample();
  int v14 = swift_dynamicCast();
  uint64_t v15 = *(void *)(v13 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, v14 ^ 1u, 1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v13) == 1)
  {
LABEL_6:
    outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for PhotogrammetrySample?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
    goto LABEL_7;
  }
  PhotogrammetrySample.camera.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
LABEL_7:
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
    _s17RealityFoundation20PhotogrammetrySampleV6CameraVSgWOi0_((uint64_t)v36);
    return outlined init with take of Transform?((uint64_t)v36, a1, &demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
  }
  uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v3);
  __n128 v17 = MEMORY[0x270FA5388](v16);
  Swift::String v18 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v4 + 16))(v18, v18, v3, v17);
  int v19 = PhotogrammetrySample.Camera.id.getter();
  PhotogrammetrySample.Camera.intrinsics.getter();
  long long v35 = v45;
  long long v34 = v46;
  long long v33 = v47;
  PhotogrammetrySample.Camera.transform.getter();
  long long v32 = v20;
  long long v31 = v21;
  long long v30 = v22;
  long long v29 = v23;
  uint64_t v24 = PhotogrammetrySample.Camera.calibrationData.getter();
  long long v25 = *(void (**)(char *, uint64_t))(v4 + 8);
  v25(v18, v3);
  v25(v6, v3);
  v36[0] = v19;
  long long v37 = v35;
  long long v38 = v34;
  long long v39 = v33;
  long long v40 = v32;
  long long v41 = v31;
  long long v42 = v30;
  long long v43 = v29;
  uint64_t v44 = v24;
  destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v36, v26);
  return outlined init with take of Transform?((uint64_t)v36, a1, &demangling cache variable for type metadata for PhotogrammetrySample.Camera?);
}

uint64_t PhotogrammetrySample.sessionID.getter@<X0>(uint64_t a1@<X8>)
{
  return PhotogrammetrySample.captureTime.getter(MEMORY[0x270FB26C8], MEMORY[0x263F07508], a1);
}

uint64_t PhotogrammetrySample.captureTime.getter@<X0>(void (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x270FA5388](v7 - 8);
  Swift::String v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of (Int, URL)(v3 + 72, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v17)
  {
    uint64_t v10 = type metadata accessor for PhotogrammetrySample();
    int v11 = swift_dynamicCast();
    uint64_t v12 = *(void *)(v10 - 8);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v9, v11 ^ 1u, 1, v10);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v10) != 1)
    {
      a1();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v9, v10);
    }
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v14 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for PhotogrammetrySample?);
  uint64_t v15 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a3, 1, 1, v15);
}

uint64_t PhotogrammetrySample.scanPassID.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of (Int, URL)(v0 + 72, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v11)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v8 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
    goto LABEL_5;
  }
  uint64_t v4 = type metadata accessor for PhotogrammetrySample();
  int v5 = swift_dynamicCast();
  uint64_t v6 = *(void *)(v4 - 8);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v6 + 56))(v3, v5 ^ 1u, 1, v4);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v3, 1, v4) == 1)
  {
LABEL_5:
    outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for PhotogrammetrySample?);
    return 0;
  }
  uint64_t v7 = PhotogrammetrySample.staticSegmentID.getter();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v3, v4);
  return v7;
}

__n128 PhotogrammetrySample.init(contentsOf:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(unsigned char *)(a2 + 56) = 1;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(void *)(a2 + 96) = 0;
  if (one-time initialization token for idManager != -1) {
    swift_once();
  }
  UniqueIDManager.generateNextUnassignedID()();
  uint64_t v5 = type metadata accessor for PhotogrammetrySample();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ObjectCaptureImageFolderReader();
  static ObjectCaptureImageFolderReader.loadPhotogrammetrySample(id:url:)();
  if (v2)
  {
    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
    swift_bridgeObjectRelease();

    outlined destroy of BodyTrackingComponent?(a2 + 72, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  else
  {
    uint64_t v11 = PhotogrammetrySample.id.getter();
    uint64_t v31 = a2 + 72;
    uint64_t v12 = v11;
    uint64_t v13 = PhotogrammetrySample.image.getter();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v24 = &v22;
    memset(&v30[8], 0, 32);
    long long v23 = &v30[8];
    *(void *)&long long v26 = v12;
    *((void *)&v26 + 1) = v13;
    uint64_t v14 = PhotogrammetrySample.metadata.getter();
    swift_bridgeObjectRelease();
    *(void *)&long long v27 = v14;
    *((void *)&v27 + 1) = PhotogrammetrySample.depthDataMap.getter();
    *(void *)&long long v28 = PhotogrammetrySample.gravity.getter();
    *((void *)&v28 + 1) = v15;
    v29.n128_u64[0] = v16;
    v29.n128_u8[8] = v17 & 1;
    *(void *)long long v30 = PhotogrammetrySample.objectMask.getter();
    v25[3] = v5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
    (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 32))(boxed_opaque_existential_1, v8, v5);
    outlined assign with take of Any?((uint64_t)v25, (uint64_t)v23);
    uint64_t v19 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
    swift_bridgeObjectRelease();

    outlined destroy of BodyTrackingComponent?(v31, (uint64_t *)&demangling cache variable for type metadata for Any?);
    long long v20 = *(_OWORD *)&v30[16];
    *(_OWORD *)(a2 + 64) = *(_OWORD *)v30;
    *(_OWORD *)(a2 + 80) = v20;
    *(void *)(a2 + 96) = *(void *)&v30[32];
    long long v21 = v27;
    *(_OWORD *)a2 = v26;
    *(_OWORD *)(a2 + 16) = v21;
    __n128 result = v29;
    *(_OWORD *)(a2 + 32) = v28;
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t PhotogrammetrySample.init(contentsOf:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = a2;
  return MEMORY[0x270FA2498](PhotogrammetrySample.init(contentsOf:), 0, 0);
}

uint64_t PhotogrammetrySample.init(contentsOf:)()
{
  uint64_t v1 = *(void *)(v0 + 152);
  *(void *)(v1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(unsigned char *)(v1 + 56) = 1;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(void *)(v1 + 96) = 0;
  if (one-time initialization token for idManager != -1) {
    swift_once();
  }
  UniqueIDManager.generateNextUnassignedID()();
  uint64_t v2 = type metadata accessor for PhotogrammetrySample();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = swift_task_alloc();
  type metadata accessor for ObjectCaptureImageFolderReader();
  static ObjectCaptureImageFolderReader.loadPhotogrammetrySample(id:url:)();
  uint64_t v22 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v21 = v3;
  uint64_t v6 = PhotogrammetrySample.id.getter();
  uint64_t v7 = PhotogrammetrySample.image.getter();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(void *)(v0 + 16) = v6;
  *(void *)(v0 + 24) = v7;
  uint64_t v8 = PhotogrammetrySample.metadata.getter();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 32) = v8;
  *(void *)(v0 + 40) = PhotogrammetrySample.depthDataMap.getter();
  *(void *)(v0 + 48) = PhotogrammetrySample.gravity.getter();
  *(void *)(v0 + 56) = v9;
  *(void *)(v0 + 64) = v10;
  *(unsigned char *)(v0 + 72) = v11 & 1;
  *(void *)(v0 + 80) = PhotogrammetrySample.objectMask.getter();
  *(void *)(v0 + 144) = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 120));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 32))(boxed_opaque_existential_1, v4, v2);
  outlined assign with take of Any?(v0 + 120, v0 + 88);
  swift_task_dealloc();
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v22, v13);
  swift_bridgeObjectRelease();

  outlined destroy of BodyTrackingComponent?(v1 + 72, (uint64_t *)&demangling cache variable for type metadata for Any?);
  long long v15 = *(_OWORD *)(v0 + 32);
  long long v14 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v5 + 16) = v15;
  *(_OWORD *)(v5 + 32) = v14;
  long long v17 = *(_OWORD *)(v0 + 80);
  long long v16 = *(_OWORD *)(v0 + 96);
  long long v18 = *(_OWORD *)(v0 + 64);
  *(void *)(v5 + 96) = *(void *)(v0 + 112);
  *(_OWORD *)(v5 + 64) = v17;
  *(_OWORD *)(v5 + 80) = v16;
  *(_OWORD *)(v5 + 48) = v18;
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t PhotogrammetrySample.pointCloudData.getter()
{
  return PhotogrammetrySample.depthConfidenceMap.getter(MEMORY[0x270FB26B8]);
}

uint64_t PhotogrammetrySample.depthConfidenceMap.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhotogrammetrySample?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of (Int, URL)(v1 + 72, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v13)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v10 = type metadata accessor for PhotogrammetrySample();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 1, 1, v10);
    goto LABEL_5;
  }
  uint64_t v6 = type metadata accessor for PhotogrammetrySample();
  int v7 = swift_dynamicCast();
  uint64_t v8 = *(void *)(v6 - 8);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v5, v7 ^ 1u, 1, v6);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
LABEL_5:
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for PhotogrammetrySample?);
    return 0;
  }
  uint64_t v9 = a1();
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v5, v6);
  return v9;
}

uint64_t PhotogrammetrySample.Camera.id.getter()
{
  return *v0;
}

{
  return MEMORY[0x270F1ABA0]();
}

uint64_t PhotogrammetrySample.Camera.id.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*PhotogrammetrySample.Camera.id.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PhotogrammetrySample.Camera.intrinsics.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 16);
  long long v3 = *(_OWORD *)(v1 + 32);
  long long v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

__n128 PhotogrammetrySample.Camera.intrinsics.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 48) = result;
  return result;
}

uint64_t (*PhotogrammetrySample.Camera.intrinsics.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PhotogrammetrySample.Camera.transform.getter()
{
  return v0[4];
}

void PhotogrammetrySample.Camera.transform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  v4[4] = a1;
  v4[5] = a2;
  void v4[6] = a3;
  v4[7] = a4;
}

uint64_t (*PhotogrammetrySample.Camera.transform.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void *PhotogrammetrySample.Camera.calibrationData.getter()
{
  uint64_t v1 = *(void **)(v0 + 128);
  id v2 = v1;
  return v1;
}

void PhotogrammetrySample.Camera.calibrationData.setter(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
}

uint64_t (*PhotogrammetrySample.Camera.calibrationData.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double _s17RealityFoundation20PhotogrammetrySampleV6CameraVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 128) = 1;
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in PhotogrammetrySample()
{
  return MEMORY[0x263F8D6D8];
}

uint64_t sub_227F07120@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_227F0712C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a2 + 16) = v3;
  return PhotogrammetrySample.metadata.didset();
}

id sub_227F07174@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v2 = *(void **)(a1 + 24);
  *a2 = v2;
  return v2;
}

__n128 sub_227F07184@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2 = a1[3].n128_u64[0];
  unsigned __int8 v3 = a1[3].n128_u8[8];
  __n128 result = a1[2];
  *a2 = result;
  a2[1].n128_u64[0] = v2;
  a2[1].n128_u8[8] = v3;
  return result;
}

uint64_t sub_227F071A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)a1;
  *(void *)(a2 + 48) = v2;
  *(unsigned char *)(a2 + 56) = v3;
  return PhotogrammetrySample.gravity.didset();
}

id sub_227F071DC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 64);
  *a2 = v2;
  return v2;
}

void destroy for PhotogrammetrySample(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  }
}

uint64_t initializeWithCopy for PhotogrammetrySample(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  uint64_t v5 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = (_OWORD *)(a1 + 72);
  int v7 = (_OWORD *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 96);
  id v9 = v3;
  swift_bridgeObjectRetain();
  id v10 = v4;
  id v11 = v5;
  if (v8)
  {
    *(void *)(a1 + 96) = v8;
    (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v8 - 8))(v6, v7, v8);
  }
  else
  {
    long long v12 = v7[1];
    *uint64_t v6 = *v7;
    v6[1] = v12;
  }
  return a1;
}

uint64_t assignWithCopy for PhotogrammetrySample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v7 = *(void **)(a1 + 24);
  uint64_t v8 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v8;
  id v9 = v8;

  long long v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 32) = v10;
  id v11 = *(void **)(a1 + 64);
  long long v12 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v12;
  id v13 = v12;

  uint64_t v14 = *(void *)(a2 + 96);
  if (!*(void *)(a1 + 96))
  {
    if (v14)
    {
      *(void *)(a1 + 96) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 72, a2 + 72);
      return a1;
    }
LABEL_7:
    long long v15 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v15;
    return a1;
  }
  if (!v14)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    char v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        __n128 result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        id v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *__n128 result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for PhotogrammetrySample(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  uint64_t v7 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  if (*(void *)(a1 + 96)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  }
  long long v8 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for PhotogrammetrySample(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySample(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySample()
{
  return &type metadata for PhotogrammetrySample;
}

void destroy for PhotogrammetrySample.Camera(uint64_t a1)
{
}

uint64_t initializeWithCopy for PhotogrammetrySample.Camera(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  uint64_t v6 = *(void **)(a2 + 128);
  *(void *)(a1 + 128) = v6;
  id v7 = v6;
  return a1;
}

uint64_t assignWithCopy for PhotogrammetrySample.Camera(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  long long v3 = *(void **)(a1 + 128);
  long long v4 = *(void **)(a2 + 128);
  *(void *)(a1 + 128) = v4;
  id v5 = v4;

  return a1;
}

__n128 __swift_memcpy136_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for PhotogrammetrySample.Camera(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  long long v6 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);

  return a1;
}

uint64_t getEnumTagSinglePayload for PhotogrammetrySample.Camera(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhotogrammetrySample.Camera(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 136) = 0;
    }
    if (a2) {
      *(void *)(result + 128) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhotogrammetrySample.Camera()
{
  return &type metadata for PhotogrammetrySample.Camera;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__REAnchoringType::Name_optional __swiftcall __REAnchoringType.Name.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  int v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __REAnchoringType.Name.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 4;
  if (v5 < 4) {
    char v7 = v5;
  }
  *int v4 = v7;
  return result;
}

void *static __REAnchoringType.Name.allCases.getter()
{
  return &outlined read-only object #0 of static __REAnchoringType.Name.allCases.getter;
}

uint64_t __REAnchoringType.Name.rawValue.getter()
{
  uint64_t result = 0x65636166727573;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6567616D69;
      break;
    case 2:
      uint64_t result = 1701011814;
      break;
    case 3:
      uint64_t result = 0x7463656A626FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __REAnchoringType.Name(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __REAnchoringType.Name()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __REAnchoringType.Name()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __REAnchoringType.Name()
{
  return Hasher._finalize()();
}

RealityKit::__REAnchoringType::Name_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __REAnchoringType.Name(Swift::String *a1)
{
  return __REAnchoringType.Name.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __REAnchoringType.Name(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x65636166727573;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6567616D69;
      goto LABEL_3;
    case 2:
      *a1 = 1701011814;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x7463656A626FLL;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance __REAnchoringType.Name(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __REAnchoringType.Name;
}

uint64_t __REAnchoringType.name.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __REAnchoringType();
  MEMORY[0x270FA5388](v4);
  long long v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAnchoringType(v2, (uint64_t)v6);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      long long v8 = &v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                      + 48)];
      *a1 = 1;
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
      goto LABEL_6;
    case 2:
      *a1 = 2;
      break;
    case 3:
      *a1 = 3;
LABEL_6:
      uint64_t v10 = type metadata accessor for URL();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v6, v10);
      break;
    default:
      *a1 = 0;
      break;
  }
  return result;
}

uint64_t type metadata accessor for __REAnchoringType()
{
  uint64_t result = type metadata singleton initialization cache for __REAnchoringType;
  if (!type metadata singleton initialization cache for __REAnchoringType) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __REAnchoringType.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __REAnchoringType.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __REAnchoringType.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __REAnchoringType.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __REAnchoringType.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized __REAnchoringType.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __REAnchoringType.CodingKeys(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1701667182;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE900000000000074;
      uint64_t v3 = 0x6E656D6E67696C61;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "classification");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 3:
      *(void *)a1 = 7107189;
      *(void *)(a1 + 8) = 0xE300000000000000;
      break;
    case 4:
      strcpy((char *)a1, "physicalWidth");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 5:
      *(void *)a1 = 0x747265566873656DLL;
      *(void *)(a1 + 8) = 0xEA00000000007865;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __REAnchoringType.CodingKeys()
{
  uint64_t result = 1701667182;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E656D6E67696C61;
      break;
    case 2:
      uint64_t result = 0x6966697373616C63;
      break;
    case 3:
      uint64_t result = 7107189;
      break;
    case 4:
      uint64_t result = 0x6C61636973796870;
      break;
    case 5:
      uint64_t result = 0x747265566873656DLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance __REAnchoringType.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized __REAnchoringType.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __REAnchoringType.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __REAnchoringType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __REAnchoringType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __REAnchoringType.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  uint64_t v37 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  long long v39 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for URL();
  uint64_t v38 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__REAnchoringType.CodingKeys>);
  uint64_t v41 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __REAnchoringType();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t *)((char *)&v35 - v13);
  uint64_t v15 = a1[3];
  uint64_t v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys();
  long long v16 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v16)
  {
    long long v35 = v11;
    long long v36 = v14;
    long long v45 = v5;
    uint64_t v17 = v42;
    uint64_t v18 = v43;
    LOBYTE(v47) = 0;
    uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v21 = v20;
    swift_bridgeObjectRetain();
    v22._countAndFlagsBits = v19;
    v22._object = v21;
    __REAnchoringType.Name.init(rawValue:)(v22);
    if (v47 == 4)
    {
      lazy protocol witness table accessor for type __REAnchoringType.AnchoringError and conformance __REAnchoringType.AnchoringError();
      swift_allocError();
      *uint64_t v23 = v19;
      v23[1] = (uint64_t)v21;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v6);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v25 = v18;
      switch((int)v9)
      {
        case 1:
          LOBYTE(v47) = 3;
          lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL);
          uint64_t v29 = v40;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          LOBYTE(v47) = 4;
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Measurement<NSUnitLength> and conformance Measurement<A>, &demangling cache variable for type metadata for Measurement<NSUnitLength>);
          long long v32 = v39;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v6);
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>));
          long long v28 = v36;
          long long v34 = (char *)v36 + *(int *)(v33 + 48);
          (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 32))(v36, v45, v29);
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v32, v17);
          goto LABEL_10;
        case 2:
          LOBYTE(v47) = 5;
          uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v6);
          long long v28 = v36;
          uint64_t *v36 = v30;
          goto LABEL_10;
        case 3:
          LOBYTE(v47) = 3;
          lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL);
          uint64_t v31 = (uint64_t)v35;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v6);
          swift_storeEnumTagMultiPayload();
          long long v28 = v36;
          outlined init with take of __REAnchoringType(v31, (uint64_t)v36);
          goto LABEL_11;
        default:
          char v46 = 1;
          lazy protocol witness table accessor for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v26 = v47;
          char v46 = 2;
          lazy protocol witness table accessor for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v6);
          uint64_t v27 = v47;
          long long v28 = v36;
          uint64_t *v36 = v26;
          v28[1] = v27;
LABEL_10:
          swift_storeEnumTagMultiPayload();
LABEL_11:
          outlined init with take of __REAnchoringType((uint64_t)v28, v25);
          break;
      }
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType.AnchoringError and conformance __REAnchoringType.AnchoringError()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.AnchoringError and conformance __REAnchoringType.AnchoringError;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.AnchoringError and conformance __REAnchoringType.AnchoringError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.AnchoringError and conformance __REAnchoringType.AnchoringError);
  }
  return result;
}

uint64_t outlined init with take of __REAnchoringType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __REAnchoringType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification);
  }
  return result;
}

uint64_t __REAnchoringType.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  uint64_t v42 = v8;
  MEMORY[0x270FA5388](v7);
  long long v36 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v38 = (char *)&v36 - v11;
  uint64_t v12 = type metadata accessor for __REAnchoringType();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__REAnchoringType.CodingKeys>);
  uint64_t v43 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  long long v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __REAnchoringType.CodingKeys and conformance __REAnchoringType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of __REAnchoringType(v2, (uint64_t)v17);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>));
      (*(void (**)(char *, uint64_t))(v40 + 8))(&v17[*(int *)(v21 + 48)], v39);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v41);
      break;
    case 3u:
      (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v41);
      break;
    default:
      break;
  }
  LOBYTE(v46) = 0;
  uint64_t v22 = v44;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v18);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with copy of __REAnchoringType(v2, (uint64_t)v14);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v25 = v42;
    uint64_t v26 = v40;
    long long v28 = v37;
    uint64_t v27 = v38;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v30 = (char *)v14
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                     + 48);
        uint64_t v31 = v27;
        uint64_t v32 = v41;
        (*(void (**)(char *, uint64_t *, uint64_t))(v25 + 32))(v31, v14, v41);
        (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v30, v39);
        LOBYTE(v46) = 3;
        lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        LOBYTE(v46) = 4;
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Measurement<NSUnitLength> and conformance Measurement<A>, &demangling cache variable for type metadata for Measurement<NSUnitLength>);
        uint64_t v35 = v39;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v35);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v38, v32);
        break;
      case 2:
        LOBYTE(v46) = 5;
        KeyedEncodingContainer.encode(_:forKey:)();
        break;
      case 3:
        uint64_t v33 = v36;
        uint64_t v34 = v41;
        (*(void (**)(char *, uint64_t *, uint64_t))(v42 + 32))(v36, v14, v41);
        LOBYTE(v46) = 3;
        lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v33, v34);
        break;
      default:
        uint64_t v29 = v14[1];
        uint64_t v46 = *v14;
        char v45 = 1;
        lazy protocol witness table accessor for type __REAnchoringType.Alignment and conformance __REAnchoringType.Alignment();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v46 = v29;
        char v45 = 2;
        lazy protocol witness table accessor for type __REAnchoringType.Classification and conformance __REAnchoringType.Classification();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        break;
    }
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v20, v18);
  }
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URL();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __REAnchoringType.Alignment.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAnchoringType.Alignment()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAnchoringType.Alignment()
{
  return RawRepresentable<>.encode(to:)();
}

RealityKit::__REAnchoringType::Classification __swiftcall __REAnchoringType.Classification.init(rawValue:)(RealityKit::__REAnchoringType::Classification rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t __REAnchoringType.Classification.rawValue.getter()
{
  return *(void *)v0;
}

void static __REAnchoringType.Classification.wall.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static __REAnchoringType.Classification.floor.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static __REAnchoringType.Classification.ceiling.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static __REAnchoringType.Classification.table.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static __REAnchoringType.Classification.seat.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static __REAnchoringType.Classification.any.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAnchoringType.Classification()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAnchoringType.Classification()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __REAnchoringType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __REAnchoringType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __REAnchoringType(void *a1)
{
  return __REAnchoringType.encode(to:)(a1);
}

uint64_t specialized static __REAnchoringType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v54 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v57 = (char *)&v52 - v7;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v53 = (char *)&v52 - v12;
  uint64_t v13 = type metadata accessor for __REAnchoringType();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char **)((char *)&v52 - v17);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v52 - v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char **)((char *)&v52 - v23);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__REAnchoringType, __REAnchoringType));
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v27 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = &v27[*(int *)(v28 + 56)];
  outlined init with copy of __REAnchoringType(a1, (uint64_t)v27);
  outlined init with copy of __REAnchoringType(a2, (uint64_t)v29);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of __REAnchoringType((uint64_t)v27, (uint64_t)v21);
      uint64_t v32 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                   + 48);
      uint64_t v33 = &v21[v32];
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        (*(void (**)(char *, uint64_t))(v55 + 8))(&v21[v32], v56);
        goto LABEL_18;
      }
      uint64_t v52 = &v29[v32];
      uint64_t v35 = v58;
      uint64_t v34 = v59;
      long long v36 = v53;
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v53, v29, v59);
      uint64_t v38 = v55;
      uint64_t v37 = v56;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
      v39(v57, v33, v56);
      v39(v54, v52, v37);
      char v40 = MEMORY[0x22A687D40](v21, v36);
      uint64_t v41 = *(void (**)(char *, uint64_t))(v35 + 8);
      uint64_t v42 = v21;
      uint64_t v43 = v34;
      v41(v42, v34);
      if (v40)
      {
        type metadata accessor for NSUnitLength();
        uint64_t v44 = v54;
        char v45 = static Measurement.== infix<A, B>(_:_:)();
        uint64_t v46 = *(void (**)(char *, uint64_t))(v38 + 8);
        v46(v44, v37);
        v46(v57, v37);
        v41(v36, v43);
        goto LABEL_15;
      }
      int64_t v51 = *(void (**)(char *, uint64_t))(v38 + 8);
      v51(v54, v37);
      v51(v57, v37);
      v41(v36, v34);
      goto LABEL_23;
    case 2u:
      outlined init with copy of __REAnchoringType((uint64_t)v27, (uint64_t)v18);
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_19;
      }
      BOOL v31 = *v18 == *(void *)v29;
      goto LABEL_10;
    case 3u:
      outlined init with copy of __REAnchoringType((uint64_t)v27, (uint64_t)v15);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v48 = v58;
        uint64_t v47 = v59;
        (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v10, v29, v59);
        char v45 = MEMORY[0x22A687D40](v15, v10);
        uint64_t v49 = *(void (**)(char *, uint64_t))(v48 + 8);
        v49(v10, v47);
        v49(v15, v47);
        goto LABEL_15;
      }
      uint64_t v21 = v15;
LABEL_18:
      (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v59);
LABEL_19:
      outlined destroy of (__REAnchoringType, __REAnchoringType)((uint64_t)v27);
      goto LABEL_20;
    default:
      outlined init with copy of __REAnchoringType((uint64_t)v27, (uint64_t)v24);
      uint64_t v30 = v24[1];
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_19;
      }
      if (*v24 == *(void *)v29)
      {
        BOOL v31 = v30 == *((void *)v29 + 1);
LABEL_10:
        char v45 = v31;
LABEL_15:
        outlined destroy of __REAnchoringType((uint64_t)v27);
      }
      else
      {
LABEL_23:
        outlined destroy of __REAnchoringType((uint64_t)v27);
LABEL_20:
        char v45 = 0;
      }
      return v45 & 1;
  }
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType.Name and conformance __REAnchoringType.Name()
{
  unint64_t result = lazy protocol witness table cache variable for type __REAnchoringType.Name and conformance __REAnchoringType.Name;
  if (!lazy protocol witness table cache variable for type __REAnchoringType.Name and conformance __REAnchoringType.Name)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType.Name and conformance __REAnchoringType.Name);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __REAnchoringType.Name()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__REAnchoringType.Name] and conformance [A], &demangling cache variable for type metadata for [__REAnchoringType.Name]);
}

uint64_t *initializeBufferWithCopyOfBuffer for __REAnchoringType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v14 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                  + 48);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for __REAnchoringType(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 3)
  {
    uint64_t v4 = type metadata accessor for URL();
  }
  else
  {
    if (result != 1) {
      return result;
    }
    uint64_t v3 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                 + 48);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  }
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

char *initializeWithCopy for __REAnchoringType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                + 48);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for __REAnchoringType(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of __REAnchoringType((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                  + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t outlined destroy of __REAnchoringType(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for __REAnchoringType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for __REAnchoringType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                + 48);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for __REAnchoringType(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of __REAnchoringType((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                  + 48);
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for __REAnchoringType()
{
  v4[4] = &unk_22832A308;
  uint64_t v0 = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = *(void *)(v0 - 8);
    type metadata accessor for Measurement<NSUnitLength>();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v4[5] = v4;
      void v4[6] = MEMORY[0x263F8CF70] + 64;
      v4[7] = v2 + 64;
      swift_initEnumMetadataMultiPayload();
    }
  }
}

void type metadata accessor for Measurement<NSUnitLength>()
{
  if (!lazy cache variable for type metadata for Measurement<NSUnitLength>)
  {
    type metadata accessor for NSUnitLength();
    unint64_t v0 = type metadata accessor for Measurement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Measurement<NSUnitLength>);
    }
  }
}

unint64_t type metadata accessor for NSUnitLength()
{
  unint64_t result = lazy cache variable for type metadata for NSUnitLength;
  if (!lazy cache variable for type metadata for NSUnitLength)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUnitLength);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for __REAnchoringType.Name(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227F0B194);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __REAnchoringType.Name()
{
  return &type metadata for __REAnchoringType.Name;
}

ValueMetadata *type metadata accessor for __REAnchoringType.Alignment()
{
  return &type metadata for __REAnchoringType.Alignment;
}

ValueMetadata *type metadata accessor for __REAnchoringType.Classification()
{
  return &type metadata for __REAnchoringType.Classification;
}

void *type metadata accessor for __REAnchoringType.AnchoringError()
{
  return &unk_26DC94F28;
}

unsigned char *storeEnumTagSinglePayload for __REAnchoringType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227F0B2C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for __REAnchoringType.CodingKeys()
{
  return &unk_26DC94FB8;
}

unint64_t specialized __REAnchoringType.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __REAnchoringType.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

uint64_t outlined destroy of (__REAnchoringType, __REAnchoringType)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__REAnchoringType, __REAnchoringType));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CustomMaterial.CustomMaterialTexture.resource.getter()
{
  return swift_retain();
}

uint64_t CustomMaterial.CustomMaterialTexture.resource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*CustomMaterial.CustomMaterialTexture.resource.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.CustomMaterialTexture.swizzle.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t CustomMaterial.CustomMaterialTexture.swizzle.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*CustomMaterial.CustomMaterialTexture.swizzle.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double CustomMaterial.CustomMaterialTexture.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)&double result = 84148994;
  *(_DWORD *)(a2 + 8) = 84148994;
  return result;
}

{
  uint64_t v3;
  double result;

  unint64_t v3 = *(void *)(a1 + 8);

  *(void *)a2 = v3;
  *(void *)&double result = 84148994;
  *(_DWORD *)(a2 + 8) = 84148994;
  return result;
}

uint64_t CustomMaterial.CustomMaterialTexture.init(_:_:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(_DWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t static CustomMaterial.BaseColor.__tintKey.getter()
{
  return 0x6F6C6F4365736162;
}

uint64_t (*CustomMaterial.BaseColor.__tint.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static CustomMaterial.BaseColor.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*CustomMaterial.BaseColor.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.BaseColor.__defaultTexture.getter())(void *a1)
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return partial apply for closure #1 in static TextureResource.builtinTexture(named:);
}

uint64_t sub_227F0B6D0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in static TextureResource.builtinTexture(named:)(void *a1)
{
  return closure #1 in static TextureResource.builtinTexture(named:)(a1);
}

void outlined consume of MaterialParameters.Texture?(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
  }
}

uint64_t CustomMaterial.BaseColor.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.BaseColor.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_22831EB50, a3, a4, 0xD000000000000010, 0x8000000228352310);
}

void CustomMaterial.BaseColor.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (one-time initialization token for linearSRGBWhite != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)static CGColorRef.linearSRGBWhite;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (a3) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = 0x6F6C6F4365736162;
  }
  if (a3) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = (void *)0xED0000746E695472;
  }
  CGColorRef value = v8;
  v12._countAndFlagsBits = v9;
  v12._object = v10;
  v13.CGColorRef value = Material.getColorParameter(key:)(v12).value;
  swift_bridgeObjectRelease();
  if (v13.value)
  {

    CGColorRef value = v13.value;
  }
  uint64_t v14 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  Material.getTextureParameter(key:)(0xD000000000000010, 0x8000000228352310, v14, (uint64_t)&v19);
  uint64_t v15 = v20;
  if (v20)
  {
    uint64_t v16 = v19;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v16, v15);
    int v17 = 84148994;
  }
  else
  {
    int v17 = 0;
  }
  *(void *)a4 = value;
  *(void *)(a4 + 8) = v15;
  *(_DWORD *)(a4 + 16) = v17;
  uint64_t v18 = value;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_release();
}

uint64_t static CustomMaterial.Metallic.__scaleKey.getter()
{
  return 0x63696C6C6174656DLL;
}

float CustomMaterial.Metallic.scale.getter()
{
  return *(float *)v0;
}

uint64_t (*CustomMaterial.Metallic.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CustomMaterial.Metallic.__textureKey.getter()
{
  return 0x4D65727574786574;
}

uint64_t (*CustomMaterial.Metallic.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Metallic.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

id CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_22831EB70, a3, a4, 0x4D65727574786574, 0xEF63696C6C617465);
}

uint64_t CustomMaterial.Metallic.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x63696C6C6174656DLL, (void *)0xED0000656C616353, 0x4D65727574786574, 0xEF63696C6C617465, a2);
}

uint64_t static CustomMaterial.Roughness.__scaleKey.getter()
{
  return 0x73656E6867756F72;
}

float CustomMaterial.Roughness.scale.getter()
{
  return *(float *)v0;
}

uint64_t (*CustomMaterial.Roughness.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static CustomMaterial.Roughness.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*CustomMaterial.Roughness.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Roughness.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

id CustomMaterial.Roughness.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_22831EB60, a3, a4, 0xD000000000000010, 0x8000000228352330);
}

uint64_t CustomMaterial.Roughness.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x73656E6867756F72, (void *)0xEE00656C61635373, 0xD000000000000010, 0x8000000228352330, a2);
}

uint64_t static CustomMaterial.EmissiveColor.__colorKey.getter()
{
  return 0x6576697373696D65;
}

id CustomMaterial.EmissiveColor.__color.getter()
{
  return *v0;
}

void CustomMaterial.EmissiveColor.__color.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*CustomMaterial.EmissiveColor.__color.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CustomMaterial.EmissiveColor.__textureKey.getter()
{
  return 0x4565727574786574;
}

uint64_t CustomMaterial.EmissiveColor.texture.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t (*CustomMaterial.EmissiveColor.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.EmissiveColor.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.black");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

uint64_t CustomMaterial.EmissiveColor.init(color:texture:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

void CustomMaterial.BaseColor.init(_:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = (void *)a1[1];
  uint64_t v5 = a1[2];
  if (v5)
  {
    swift_retain();
    int v6 = 84148994;
  }
  else
  {
    int v6 = 0;
  }
  outlined consume of MaterialParameters.Texture?(v3, v5);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v6;
}

uint64_t CustomMaterial.EmissiveColor.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.BaseColor.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_22831EBB0, a3, a4, 0x4565727574786574, 0xEF6576697373696DLL);
}

uint64_t CustomMaterial.BaseColor.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *v7;
  uint64_t v13 = v7[1];
  if (v13)
  {
    uint64_t v19 = *v7;
    __n128 v18 = a3;
    swift_retain();
    id v14 = (id)REMaterialCreateDefaultSamplerDescriptor();
    a3 = v18;
    uint64_t v12 = v19;
    char v15 = 1;
    uint64_t v16 = 84148994;
  }
  else
  {
    id v14 = 0;
    uint64_t v16 = 0;
    char v15 = -1;
  }
  *(void *)a1 = a6;
  *(void *)(a1 + 8) = a7;
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = v15;
  *(__n128 *)a2 = a3;
  *(void *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 6;

  return MEMORY[0x270F9A8A0]();
}

void CustomMaterial.EmissiveColor.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRelease();
  if (one-time initialization token for linearSRGBWhite != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)static CGColorRef.linearSRGBWhite;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  CGColorRef v5 = v4;
  v6._countAndFlagsBits = 0x6576697373696D65;
  v6._object = (void *)0xED0000726F6C6F43;
  v7.CGColorRef value = Material.getColorParameter(key:)(v6).value;
  if (v7.value)
  {
    CGColorRef value = v7.value;

    CGColorRef v5 = value;
  }
  uint64_t v9 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  Material.getTextureParameter(key:)(0x4565727574786574, 0xEF6576697373696DLL, v9, (uint64_t)&v14);
  uint64_t v10 = v15;
  if (v15)
  {
    uint64_t v11 = v14;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v11, v10);
    int v12 = 84148994;
  }
  else
  {
    int v12 = 0;
  }
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 16) = v12;
  uint64_t v13 = v5;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_release();
}

uint64_t static CustomMaterial.Specular.__scaleKey.getter()
{
  return 0x72616C7563657073;
}

float CustomMaterial.Specular.scale.getter()
{
  return *(float *)v0;
}

uint64_t (*CustomMaterial.Specular.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CustomMaterial.Specular.__textureKey.getter()
{
  return 0x5365727574786574;
}

uint64_t (*CustomMaterial.Specular.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Specular.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

id CustomMaterial.Specular.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_22831EB80, a3, a4, 0x5365727574786574, 0xEF72616C75636570);
}

uint64_t CustomMaterial.Specular.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x72616C7563657073, (void *)0xED0000656C616353, 0x5365727574786574, 0xEF72616C75636570, a2);
}

void CustomMaterial.Blending.init(blending:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = a1[2];
  if (!v5)
  {
    int v8 = 0;
LABEL_6:
    outlined consume of PhysicallyBasedMaterial.Blending(v3, v4, v5);
    uint64_t v6 = v3;
    int v7 = v8;
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    swift_retain();
    int v8 = 84148994;
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  int v7 = 0;
LABEL_7:
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 16) = v7;
}

void CustomMaterial.Opacity.init(_:)(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  uint64_t v5 = (void *)*((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    swift_retain();
    int v6 = 84148994;
    uint64_t v7 = v4;
  }
  else
  {
    uint64_t v7 = 0;
    int v6 = 0;
  }
  outlined consume of MaterialParameters.Texture?(v5, v7);
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 20) = 0;
}

void outlined consume of PhysicallyBasedMaterial.Blending(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3 != 1) {
    outlined consume of MaterialParameters.Texture?(a2, a3);
  }
}

BOOL static CustomMaterial.BlendMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CustomMaterial.BlendMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int CustomMaterial.BlendMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static CustomMaterial.Opacity.__scaleKey.getter()
{
  return 0x537974696361706FLL;
}

float CustomMaterial.Opacity.scale.getter()
{
  return *(float *)v0;
}

void CustomMaterial.Opacity.scale.setter(float a1)
{
  *Swift::UInt v1 = a1;
}

uint64_t (*CustomMaterial.Opacity.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CustomMaterial.Opacity.__textureKey.getter()
{
  return 0x4F65727574786574;
}

uint64_t CustomMaterial.Opacity.texture.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t CustomMaterial.Opacity.texture.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*CustomMaterial.Opacity.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Opacity.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void CustomMaterial.Opacity.blendMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 20);
}

unsigned char *CustomMaterial.Opacity.blendMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 20) = *result;
  return result;
}

uint64_t (*CustomMaterial.Opacity.blendMode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t *CustomMaterial.Opacity.init(scale:texture:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v3 = *result;
  int v4 = *((_DWORD *)result + 2);
  *(float *)a2 = a3;
  *(void *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 20) = 0;
  return result;
}

uint64_t *CustomMaterial.Opacity.init(scale:texture:blendMode:)@<X0>(uint64_t *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v4 = *result;
  int v5 = *((_DWORD *)result + 2);
  char v6 = *a2;
  *(float *)a3 = a4;
  *(void *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 16) = v5;
  *(unsigned char *)(a3 + 20) = v6;
  return result;
}

void CustomMaterial.Opacity.init(floatLiteral:)(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
}

double CustomMaterial.Opacity.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *((void *)v2 + 1);
  if (v6)
  {
    swift_retain();
    id v7 = (id)REMaterialCreateDefaultSamplerDescriptor();
    char v8 = 1;
    uint64_t v9 = 84148994;
  }
  else
  {
    id v7 = 0;
    uint64_t v9 = 0;
    char v8 = -1;
  }
  strcpy((char *)a1, "textureOpacity");
  *(unsigned char *)(a1 + 15) = -18;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = v8;
  int v10 = RELinkedOnOrAfterFall2024OSVersions();
  if (v10) {
    unint64_t v11 = -1;
  }
  else {
    unint64_t v11 = 0;
  }
  *(int8x16_t *)a2 = vandq_s8((int8x16_t)vdupq_n_s64(v11), (int8x16_t)xmmword_22832A510);
  if (v10) {
    uint64_t v12 = v5;
  }
  else {
    uint64_t v12 = 0;
  }
  *(void *)(a2 + 16) = v12;
  if (v10) {
    char v13 = 2;
  }
  else {
    char v13 = 0;
  }
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = v13;
  return result;
}

uint64_t CustomMaterial.Opacity.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRelease();
  if (RELinkedOnOrAfterFall2024OSVersions())
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v4._countAndFlagsBits = 0x537974696361706FLL;
    v4._object = (void *)0xEC000000656C6163;
    Material.getFloatParameter(key:)(v5, v4);
    if ((v6 & 0x100000000) != 0) {
      int v7 = 1065353216;
    }
    else {
      int v7 = v6;
    }
  }
  else
  {
    int v7 = 1065353216;
  }
  uint64_t v8 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, v8, (uint64_t)&v13);
  uint64_t v9 = v14;
  if (v14)
  {
    int v10 = v13;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v10, v9);
    int v11 = 84148994;
  }
  else
  {
    int v11 = 0;
  }
  *(_DWORD *)a2 = v7;
  *(void *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v11;
  *(unsigned char *)(a2 + 20) = 0;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  return swift_release();
}

float protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance CustomMaterial.Opacity@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result = *a1;
  *(float *)a2 = *a1;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = 0;
  return result;
}

uint64_t static CustomMaterial.Clearcoat.__scaleKey.getter()
{
  return 0x616F637261656C63;
}

float CustomMaterial.Clearcoat.scale.getter()
{
  return *(float *)v0;
}

uint64_t (*CustomMaterial.Clearcoat.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static CustomMaterial.Clearcoat.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*CustomMaterial.Clearcoat.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Clearcoat.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

id CustomMaterial.Clearcoat.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(a1, a2, (__n128)xmmword_22831EBA0, a3, a4, 0xD000000000000010, 0x8000000228352350);
}

id CustomMaterial.Metallic.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *v7;
  uint64_t v13 = *((void *)v7 + 1);
  if (v13)
  {
    __n128 v17 = a3;
    swift_retain();
    id result = (id)REMaterialCreateDefaultSamplerDescriptor();
    a3 = v17;
    char v15 = 1;
    uint64_t v16 = 84148994;
  }
  else
  {
    id result = 0;
    uint64_t v16 = 0;
    char v15 = -1;
  }
  *(void *)a1 = a6;
  *(void *)(a1 + 8) = a7;
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = v15;
  *(__n128 *)a2 = a3;
  *(void *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 2;
  return result;
}

uint64_t CustomMaterial.Clearcoat.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Metallic.init(material:alternateTintKey:)(a1, 0x616F637261656C63, (void *)0xEE00656C61635374, 0xD000000000000010, 0x8000000228352350, a2);
}

unint64_t static CustomMaterial.ClearcoatRoughness.__scaleKey.getter()
{
  return 0xD000000000000017;
}

float CustomMaterial.ClearcoatRoughness.scale.getter()
{
  return *(float *)v0;
}

void CustomMaterial.ClearcoatRoughness.scale.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*CustomMaterial.ClearcoatRoughness.scale.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static CustomMaterial.ClearcoatRoughness.__textureKey.getter()
{
  return 0xD000000000000019;
}

uint64_t CustomMaterial.BaseColor.texture.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*CustomMaterial.ClearcoatRoughness.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.ClearcoatRoughness.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

uint64_t *CustomMaterial.ClearcoatRoughness.init(scale:texture:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v3 = *result;
  int v4 = *((_DWORD *)result + 2);
  *(float *)a2 = a3;
  *(void *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

void CustomMaterial.ClearcoatRoughness.init(floatLiteral:)(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

void CustomMaterial.Metallic.init(_:)(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  uint64_t v5 = (void *)*((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    swift_retain();
    int v6 = 84148994;
    uint64_t v7 = v4;
  }
  else
  {
    uint64_t v7 = 0;
    int v6 = 0;
  }
  outlined consume of MaterialParameters.Texture?(v5, v7);
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v6;
}

double CustomMaterial.ClearcoatRoughness.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *((void *)v2 + 1);
  if (v6)
  {
    swift_retain();
    id v7 = (id)REMaterialCreateDefaultSamplerDescriptor();
    char v8 = 1;
    uint64_t v9 = 84148994;
  }
  else
  {
    id v7 = 0;
    uint64_t v9 = 0;
    char v8 = -1;
  }
  *(void *)a1 = 0xD000000000000019;
  *(void *)(a1 + 8) = 0x8000000228352370;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v9;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = v8;
  *(void *)a2 = 0xD000000000000017;
  *(void *)(a2 + 8) = 0x800000022834D9E0;
  *(void *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 2;
  return result;
}

uint64_t CustomMaterial.ClearcoatRoughness.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Metallic.init(material:alternateTintKey:)(a1, 0xD000000000000017, (void *)0x800000022834D9E0, 0xD000000000000019, 0x8000000228352370, a2);
}

uint64_t CustomMaterial.Metallic.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X3>, void *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12._countAndFlagsBits = a2;
  v12._object = a3;
  Material.getFloatParameter(key:)(v13, v12);
  uint64_t v15 = v14;
  uint64_t v16 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  Material.getTextureParameter(key:)(a4, a5, v16, (uint64_t)&v22);
  uint64_t v17 = v23;
  if (v23)
  {
    __n128 v18 = v22;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v18, v17);
    int v19 = 84148994;
  }
  else
  {
    int v19 = 0;
  }
  float v20 = *(float *)&v15;
  if ((v15 & 0x100000000) != 0) {
    float v20 = 1.0;
  }
  *(float *)a6 = v20;
  *(void *)(a6 + 8) = v17;
  *(_DWORD *)(a6 + 16) = v19;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  return swift_release();
}

float protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance CustomMaterial.ClearcoatRoughness@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result = *a1;
  *(float *)a2 = *a1;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t static CustomMaterial.Normal.__textureKey.getter()
{
  return 0x4E65727574786574;
}

uint64_t (*CustomMaterial.Normal.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.Normal.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000012;
  *(void *)(v0 + 24) = 0x8000000228352390;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

uint64_t CustomMaterial.Normal.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Normal.init(material:alternateTintKey:)(a1, 0x4E65727574786574, 0xED00006C616D726FLL, a2);
}

unint64_t static CustomMaterial.AmbientOcclusion.__textureKey.getter()
{
  return 0xD000000000000017;
}

uint64_t (*CustomMaterial.AmbientOcclusion.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static CustomMaterial.AmbientOcclusion.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

double CustomMaterial.AmbientOcclusion.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.AmbientOcclusion.getCurrentValues(alternateTintKey:)(a1, a2, a3, a4, 0xD000000000000017, 0x80000002283523B0);
}

uint64_t CustomMaterial.AmbientOcclusion.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Normal.init(material:alternateTintKey:)(a1, 0xD000000000000017, 0x80000002283523B0, a2);
}

unint64_t static CustomMaterial.ClearcoatNormal.__textureKey.getter()
{
  return 0xD000000000000016;
}

uint64_t CustomMaterial.ClearcoatNormal.texture.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t CustomMaterial.Normal.texture.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = swift_release();
  *(void *)uint64_t v1 = v2;
  *(_DWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*CustomMaterial.ClearcoatNormal.texture.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.ClearcoatNormal.init(texture:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 8);
  *(void *)a2 = *(void *)result;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

void CustomMaterial.Normal.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void **)a1;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v4, v3);
    int v5 = 84148994;
  }
  else
  {
    int v5 = 0;
  }
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v5;
}

uint64_t associated type witness table accessor for ExpressibleByFloatLiteral.FloatLiteralType : _ExpressibleByBuiltinFloatLiteral in CustomMaterial.Metallic()
{
  return MEMORY[0x263F8D640];
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.BlendMode and conformance CustomMaterial.BlendMode()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomMaterial.BlendMode and conformance CustomMaterial.BlendMode;
  if (!lazy protocol witness table cache variable for type CustomMaterial.BlendMode and conformance CustomMaterial.BlendMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.BlendMode and conformance CustomMaterial.BlendMode);
  }
  return result;
}

uint64_t assignWithTake for CustomMaterial.CustomMaterialTexture(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for CustomMaterial.CustomMaterialTexture()
{
  return &type metadata for CustomMaterial.CustomMaterialTexture;
}

ValueMetadata *type metadata accessor for CustomMaterial.BaseColor()
{
  return &type metadata for CustomMaterial.BaseColor;
}

ValueMetadata *type metadata accessor for CustomMaterial.Metallic()
{
  return &type metadata for CustomMaterial.Metallic;
}

ValueMetadata *type metadata accessor for CustomMaterial.Roughness()
{
  return &type metadata for CustomMaterial.Roughness;
}

uint64_t destroy for CustomMaterial.EmissiveColor(id *a1)
{
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for CustomMaterial.BaseColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.BaseColor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  return a1;
}

uint64_t assignWithTake for CustomMaterial.BaseColor(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.BaseColor(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.BaseColor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.EmissiveColor()
{
  return &type metadata for CustomMaterial.EmissiveColor;
}

ValueMetadata *type metadata accessor for CustomMaterial.Specular()
{
  return &type metadata for CustomMaterial.Specular;
}

unint64_t destroy for CustomMaterial.Blending(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_release();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomMaterial.Blending(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if ((int)v4 - 1 < 0)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 13) = *(void *)(a2 + 13);
  }
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.Blending(uint64_t a1, long long *a2)
{
  LODWORD(v4) = -1;
  if (*(void *)(a1 + 8) >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  int v6 = v5 - 1;
  if (*((void *)a2 + 1) < 0xFFFFFFFFuLL) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  int v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
      *(unsigned char *)(a1 + 18) = *((unsigned char *)a2 + 18);
      *(unsigned char *)(a1 + 19) = *((unsigned char *)a2 + 19);
      *(unsigned char *)(a1 + 20) = *((unsigned char *)a2 + 20);
      return a1;
    }
    swift_release();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    long long v8 = *a2;
    *(void *)(a1 + 13) = *(void *)((char *)a2 + 13);
    *(_OWORD *)a1 = v8;
    return a1;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(unsigned char *)(a1 + 20) = *((unsigned char *)a2 + 20);
  swift_retain();
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CustomMaterial.Blending(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = *(void *)(a2 + 8);
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    if ((int)v7 - 1 < 0)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(void *)(a1 + 8) = v6;
      swift_release();
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
      return a1;
    }
    swift_release();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Blending(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  if ((v4 + 1) >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Blending(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 13) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 21) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for CustomMaterial.Blending(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t destructiveInjectEnumTag for CustomMaterial.Blending(uint64_t result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(void *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Blending()
{
  return &type metadata for CustomMaterial.Blending;
}

unsigned char *storeEnumTagSinglePayload for CustomMaterial.BlendMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227F0D838);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.BlendMode()
{
  return &type metadata for CustomMaterial.BlendMode;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomMaterial.Opacity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.Opacity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for CustomMaterial.Opacity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Opacity(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Opacity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 21) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Opacity()
{
  return &type metadata for CustomMaterial.Opacity;
}

ValueMetadata *type metadata accessor for CustomMaterial.Clearcoat()
{
  return &type metadata for CustomMaterial.Clearcoat;
}

uint64_t initializeBufferWithCopyOfBuffer for CustomMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CustomMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  return a1;
}

uint64_t assignWithTake for CustomMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Metallic(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Metallic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 20) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.ClearcoatRoughness()
{
  return &type metadata for CustomMaterial.ClearcoatRoughness;
}

ValueMetadata *type metadata accessor for CustomMaterial.Normal()
{
  return &type metadata for CustomMaterial.Normal;
}

ValueMetadata *type metadata accessor for CustomMaterial.AmbientOcclusion()
{
  return &type metadata for CustomMaterial.AmbientOcclusion;
}

uint64_t assignWithCopy for CustomMaterial.CustomMaterialTexture(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  return a1;
}

ValueMetadata *type metadata accessor for CustomMaterial.ClearcoatNormal()
{
  return &type metadata for CustomMaterial.ClearcoatNormal;
}

double CustomMaterial.ClearcoatNormal.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CustomMaterial.AmbientOcclusion.getCurrentValues(alternateTintKey:)(a1, a2, a3, a4, 0xD000000000000016, 0x80000002283523D0);
}

double CustomMaterial.AmbientOcclusion.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *v6;
  if (*v6)
  {
    swift_retain();
    id v12 = (id)REMaterialCreateDefaultSamplerDescriptor();
    char v13 = 1;
    uint64_t v14 = 84148994;
  }
  else
  {
    id v12 = 0;
    uint64_t v14 = 0;
    char v13 = -1;
  }
  *(void *)a1 = a5;
  *(void *)(a1 + 8) = a6;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v14;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = v13;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(unsigned char *)(a2 + 80) = 0;
  return result;
}

uint64_t CustomMaterial.ClearcoatNormal.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomMaterial.Normal.init(material:alternateTintKey:)(a1, 0xD000000000000016, 0x80000002283523D0, a2);
}

uint64_t CustomMaterial.Normal.init(material:alternateTintKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  swift_bridgeObjectRelease();
  uint64_t v8 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  Material.getTextureParameter(key:)(a2, a3, v8, (uint64_t)&v13);
  uint64_t v9 = v14;
  if (v14)
  {
    int v10 = v13;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v10, v9);
    int v11 = 84148994;
  }
  else
  {
    int v11 = 0;
  }
  *(void *)a4 = v9;
  *(_DWORD *)(a4 + 8) = v11;

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t __RKEmphasisPulseAnimation.deinit()
{
  return v0;
}

uint64_t __RKEmphasisPulseAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisPulseAnimation()
{
  return self;
}

uint64_t specialized static __RKEmphasisPulseAnimation.createPulseAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 107, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for playfulPulseAnimationData == -1) {
        goto LABEL_8;
      }
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 99, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for wildPulseAnimationData == -1) {
        goto LABEL_8;
      }
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 71, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for basicPulseAnimationData != -1) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((void *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v18 = rawValue[2];
  if (v18)
  {
    char v8 = v34;
    float v10 = (float)v18;
    int v9 = v36;
    int v19 = (long long *)&rawValue[6 * v18];
    long long v29 = *v19;
    long long v30 = *(v19 - 1);
    long long v28 = v19[1];
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  unint64_t v21 = rawValue[2];
  unint64_t v20 = rawValue[3];
  float v22 = a5 / v10;
  if (v21 >= v20 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, rawValue);
  }
  rawValue[2] = v21 + 1;
  uint64_t v23 = &rawValue[6 * v21];
  uint64_t v23[2] = v30;
  v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  uint64_t v32 = "Transform.transform";
  char v33 = 1;
  char v34 = v8;
  float v35 = v22;
  int v36 = v9;
  float v37 = a5;
  uint64_t SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation) {
    goto LABEL_15;
  }
  uint64_t v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_22830EC60;
  swift_bridgeObjectRelease();
  *(void *)(v26 + 32) = v25;
  return v26;
}

void CustomComponentProxy.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CustomComponentProxy.init(with:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  CustomComponentProxy.updateJSON(with:)(a1, a2);
  uint64_t result = outlined consume of Data?(a1, a2);
  *a3 = 0;
  return result;
}

uint64_t CustomComponentProxy.updateJSON(with:)(uint64_t a1, unint64_t a2)
{
  uint64_t result = *v2;
  if (*v2)
  {
    uint64_t result = RECIntrospectionFree();
    uint64_t *v2 = 0;
  }
  if (a2 >> 60 != 15)
  {
    unint64_t v6 = a2 >> 62;
    switch(a2 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a1), a1)) {
          goto LABEL_41;
        }
        uint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_10:
        outlined copy of Data._Representation(a1, a2);
        if (v7 < 1) {
          goto LABEL_35;
        }
LABEL_11:
        if (!v6)
        {
          uint64_t v10 = BYTE6(a2);
          goto LABEL_22;
        }
        if (v6 == 1)
        {
          if (__OFSUB__(HIDWORD(a1), a1))
          {
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }
          if (HIDWORD(a1) - a1 == 0x7FFFFFFF) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v12 = *(void *)(a1 + 16);
          uint64_t v11 = *(void *)(a1 + 24);
          BOOL v13 = __OFSUB__(v11, v12);
          uint64_t v10 = v11 - v12;
          if (v13)
          {
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          if (v10 >= 0x7FFFFFFF) {
            goto LABEL_35;
          }
          if (v6 == 2)
          {
LABEL_22:
            uint64_t v14 = v10 + 1;
            if (__OFADD__(v10, 1))
            {
              __break(1u);
            }
            else if (v14 >= (uint64_t)0xFFFFFFFF80000000)
            {
              if (v14 <= 0x7FFFFFFF)
              {
                uint64_t v15 = RECIntrospectionAlloc();
                uint64_t *v2 = v15;
                if (v15)
                {
                  uint64_t v16 = v15;
                  if (!v6)
                  {
                    uint64_t v17 = BYTE6(a2);
                    goto LABEL_31;
                  }
                  if (v6 != 1)
                  {
                    if (!__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16)))
                    {
                      Data.copyBytes(to:count:)();
                      uint64_t v19 = *(void *)(a1 + 16);
                      uint64_t v18 = *(void *)(a1 + 24);
                      uint64_t v17 = v18 - v19;
                      if (!__OFSUB__(v18, v19)) {
                        goto LABEL_34;
                      }
LABEL_48:
                      __break(1u);
                      JUMPOUT(0x227F0E4A8);
                    }
LABEL_47:
                    __break(1u);
                    goto LABEL_48;
                  }
                  if (!__OFSUB__(HIDWORD(a1), a1))
                  {
                    uint64_t v17 = HIDWORD(a1) - (int)a1;
LABEL_31:
                    Data.copyBytes(to:count:)();
LABEL_34:
                    *(unsigned char *)(v16 + v17) = 0;
                    goto LABEL_35;
                  }
LABEL_46:
                  __break(1u);
                  goto LABEL_47;
                }
LABEL_35:
                return outlined consume of Data?(a1, a2);
              }
              goto LABEL_40;
            }
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
            goto LABEL_43;
          }
        }
        LODWORD(v10) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1))
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        uint64_t v10 = (int)v10;
        goto LABEL_22;
      case 2uLL:
        uint64_t v9 = *(void *)(a1 + 16);
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v7 = v8 - v9;
        if (!__OFSUB__(v8, v9)) {
          goto LABEL_10;
        }
        goto LABEL_42;
      case 3uLL:
        goto LABEL_35;
      default:
        if (!BYTE6(a2)) {
          goto LABEL_35;
        }
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t CustomComponentProxy.getJSONData()()
{
  uint64_t v1 = type metadata accessor for Data.Deallocator();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  int v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  if (!*v0) {
    return 0;
  }
  size_t v6 = strlen(*v0);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F06F00], v1);
  Data.Deallocator._deallocator.getter();
  if (v6)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v7 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v8 = specialized Data._Representation.init(_:count:)(v7, v6);
    swift_release();
  }
  else
  {
    uint64_t v9 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
    v9(v5, 0);
    swift_release();
    swift_release();
    uint64_t v8 = 0;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v8;
}

uint64_t CustomComponentProxy.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance CustomComponentProxy(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  return specialized static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)(a1, a2, a4);
}

uint64_t static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  return specialized static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)(a1, a2, a4);
}

void protocol witness for static Component.__free(to:offset:) in conformance CustomComponentProxy(void *a1)
{
  if (*a1)
  {
    RECIntrospectionFree();
    *a1 = 0;
  }

  JUMPOUT(0x22A696500);
}

void static CustomComponentProxy.__free(to:offset:)(void *a1)
{
  if (*a1)
  {
    RECIntrospectionFree();
    *a1 = 0;
  }

  JUMPOUT(0x22A696500);
}

uint64_t protocol witness for static Component.__addIntrospectionData(_:) in conformance CustomComponentProxy(uint64_t result)
{
  if (result) {
    return REStructBuilderAddMemberDataTypeWithTag();
  }
  return result;
}

uint64_t static CustomComponentProxy.__addIntrospectionData(_:)(uint64_t result)
{
  if (result) {
    return REStructBuilderAddMemberDataTypeWithTag();
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CustomComponentProxy@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  *a2 = 0;
  return result;
}

uint64_t CustomComponentProxy.encodeToData(_:)(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.default.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_22830EC60;
  *(void *)(v4 + 56) = MEMORY[0x263F8D310];
  *(void *)(v4 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v4 + 32) = 0xD00000000000001FLL;
  *(void *)(v4 + 40) = 0x8000000228352780;
  type metadata accessor for OS_os_log();
  uint64_t v5 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  if (a1 == 1852797802 && a2 == 0xE400000000000000
    || (char v6 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t result = CustomComponentProxy.getJSONData()();
    if (v8 >> 60 != 15) {
      return result;
    }
    char v6 = 1;
  }
  lazy protocol witness table accessor for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError();
  swift_allocError();
  *uint64_t v9 = v6;
  return swift_willThrow();
}

unint64_t one-time initialization function for customComponentTypesToHandles()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static SceneManager.customComponentTypesToHandles = result;
  return result;
}

unint64_t one-time initialization function for customComponentTypesToKeys()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static SceneManager.customComponentTypesToKeys = result;
  return result;
}

unint64_t one-time initialization function for handlesToCustomComponentTypes()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static SceneManager.handlesToCustomComponentTypes = result;
  return result;
}

unint64_t one-time initialization function for customComponentTypeObjectIdToHandles()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static SceneManager.customComponentTypeObjectIdToHandles = result;
  return result;
}

uint64_t SceneManager.builtinComponentRegistry.getter()
{
  return swift_retain();
}

void SceneManager.coreECSManager.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
}

uint64_t SceneManager.scenes.getter()
{
  return swift_bridgeObjectRetain();
}

void SceneManager.append(scene:)()
{
  swift_beginAccess();
  uint64_t v1 = swift_retain();
  MEMORY[0x22A688E10](v1);
  if (*(void *)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  REECSManagerAddScene();
  swift_beginAccess();
  uint64_t v2 = static RealityFusionSession.sharedSession;
  if (static RealityFusionSession.sharedSession)
  {
    swift_beginAccess();
    if (v2[2])
    {
      id v3 = (id)RFServiceManagerGetAnchorManagementService();
      if (v3)
      {
        uint64_t v4 = v3;
        RFAnchorManagementUpdateAnchoringInScene();
      }
    }
  }
}

uint64_t SceneManager.remove(scene:)(uint64_t a1)
{
  swift_beginAccess();
  swift_retain();
  unint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _ArrayProtocol.filter(_:)(v3, a1);
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v1 + 32) = v4;
  swift_bridgeObjectRelease();
  return REECSManagerRemoveScene();
}

void *SceneManager.init(coreECSManager:)(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  v1[4] = MEMORY[0x263F8EE78];
  v1[5] = specialized Dictionary.init(dictionaryLiteral:)(v3);
  v1[6] = specialized Dictionary.init(dictionaryLiteral:)(v3);
  type metadata accessor for BuiltInComponentRegistry();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v3);
  *(void *)(v4 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v3);
  v1[2] = v4;
  RERetain();
  v1[3] = a1;
  REECSManagerSetSwiftObject();
  if (one-time initialization token for sharedManager != -1) {
    swift_once();
  }
  SceneManager.registerBuiltInComponents()();
  return v1;
}

uint64_t SceneManager.deinit()
{
  uint64_t v1 = (uint64_t *)(v0 + 32);
  swift_beginAccess();
  uint64_t v9 = v0;
  unint64_t v2 = *(void *)(v0 + 32);
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    REECSManagerSetSwiftObject();
    RERelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x22A689930](v5, v2);
      }
      else
      {
        uint64_t v6 = *(void *)(v2 + 8 * v5 + 32);
        swift_retain();
      }
      ++v5;
      swift_retain();
      unint64_t v7 = swift_bridgeObjectRetain();
      uint64_t v8 = specialized _ArrayProtocol.filter(_:)(v7, v6);
      swift_bridgeObjectRelease();
      swift_release();
      *uint64_t v1 = v8;
      swift_bridgeObjectRelease();
      REECSManagerRemoveScene();
      swift_release();
    }
    while (v3 != v5);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t SceneManager.__deallocating_deinit()
{
  uint64_t v1 = (uint64_t *)(v0 + 32);
  swift_beginAccess();
  unint64_t v2 = *(void *)(v0 + 32);
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    REECSManagerSetSwiftObject();
    RERelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_deallocClassInstance();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = MEMORY[0x22A689930](v5, v2);
      }
      else
      {
        uint64_t v6 = *(void *)(v2 + 8 * v5 + 32);
        swift_retain();
      }
      ++v5;
      swift_retain();
      unint64_t v7 = swift_bridgeObjectRetain();
      uint64_t v8 = specialized _ArrayProtocol.filter(_:)(v7, v6);
      swift_bridgeObjectRelease();
      swift_release();
      *uint64_t v1 = v8;
      swift_bridgeObjectRelease();
      REECSManagerRemoveScene();
      swift_release();
    }
    while (v3 != v5);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

Class encodeComponent(_:_:_:)(uint64_t a1, Swift::UInt a2)
{
  uint64_t Object = RECustomComponentGetObject();
  if (!Object) {
    return 0;
  }
  uint64_t v4 = Object;
  if (one-time initialization token for handlesToCustomComponentTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v7 & 1) == 0))
  {
    swift_endAccess();
    return 0;
  }
  long long v19 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v6);
  swift_endAccess();
  uint64_t v8 = *(void (**)(uint64_t))(*((void *)&v19 + 1) + 32);
  long long v25 = v19;
  __swift_allocate_boxed_opaque_existential_1(v24);
  v8(v4);
  outlined init with copy of __REAssetService((uint64_t)v24, (uint64_t)&v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Encodable);
  if (!swift_dynamicCast())
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    outlined destroy of BodyTrackingComponent?((uint64_t)v20, &demangling cache variable for type metadata for Encodable?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return 0;
  }
  outlined init with take of BindableDataInternal(v20, (uint64_t)v23);
  outlined init with copy of __REAssetService((uint64_t)v24, (uint64_t)&v22);
  if (swift_dynamicCast())
  {
    uint64_t v22 = *(void *)&v20[0];
    uint64_t v9 = String.init(cString:)();
    uint64_t v11 = CustomComponentProxy.encodeToData(_:)(v9, v10);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v23, v23[3]);
    uint64_t v16 = String.init(cString:)();
    uint64_t v11 = Encodable.encodeToData(_:)(v16, v17);
  }
  uint64_t v13 = v11;
  unint64_t v14 = v12;
  swift_bridgeObjectRelease();
  v15.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v13, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return v15.super.isa;
}

uint64_t @objc decodeComponent(_:_:_:_:)(uint64_t a1, Swift::UInt a2, void *a3)
{
  id v5 = a3;
  char v6 = decodeComponent(_:_:_:_:)(a1, a2);

  return v6 & 1;
}

uint64_t decodeComponent(_:_:_:_:)(uint64_t a1, Swift::UInt a2)
{
  uint64_t Object = RECustomComponentGetObject();
  if (!Object) {
    return 0;
  }
  uint64_t v4 = Object;
  if (one-time initialization token for handlesToCustomComponentTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v7 & 1) == 0))
  {
    swift_endAccess();
    return 0;
  }
  long long v18 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v6);
  swift_endAccess();
  uint64_t v8 = *(void (**)(uint64_t, void, void))(*((void *)&v18 + 1) + 32);
  long long v22 = v18;
  __swift_allocate_boxed_opaque_existential_1(&v21);
  v8(v4, v18, *((void *)&v18 + 1));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable);
  if (!swift_dynamicCast())
  {
    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for Decodable?);
    return 0;
  }
  outlined init with take of BindableDataInternal(v19, (uint64_t)v23);
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;
  uint64_t v12 = String.init(cString:)();
  uint64_t v14 = v13;
  uint64_t v15 = v24;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v23, v24);
  Decodable.decodeFromData(_:_:)(v9, v11, v12, v14, v15);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v9, v11);
  outlined init with copy of __REAssetService((uint64_t)v23, (uint64_t)&v21);
  swift_dynamicCast();
  uint64_t v17 = 1;
  (*(void (**)(long long *, uint64_t, void, uint64_t, void, void))(*((void *)&v18 + 1) + 40))(v19, v4, 0, 1, v18, *((void *)&v18 + 1));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v17;
}

uint64_t closure #1 in closure #1 in static SceneManager.customComponentTypeHelper(_:typeName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, void *a7@<X6>, char a8@<W7>, Swift::UInt *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  int v36 = 2;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = a2;
  char v40 = @objc deinitComponent(componentTypeHandle:rawPointer:);
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v43 = a3;
  uint64_t v44 = a1;
  uint64_t v18 = MEMORY[0x22A68D880](&v36, a4 & 1);
  if (v18)
  {
    Swift::UInt v19 = v18;
    BOOL v31 = a9;
    REComponentTypeSetCloneCallback();
    if (a5)
    {
      uint64_t v33 = 0x6F436D6F74737543;
      unint64_t v34 = 0xEF746E656E6F706DLL;
      v20._countAndFlagsBits = a6;
      v20._object = a7;
      String.append(_:)(v20);
      uint64_t v21 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      MEMORY[0x22A691740](v21 + 32);
      swift_release();
    }
    if (a8)
    {
      type metadata accessor for SceneManager();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v23 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      id v24 = objc_msgSend(v23, sel_bundleIdentifier);

      if (v24)
      {
        unint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = v26;
      }
      else
      {
        unint64_t v25 = 0xD00000000000001BLL;
        uint64_t v27 = 0x8000000228352640;
      }
      LOBYTE(v32) = 0;
      unint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v33 = MEMORY[0x263F8EE78];
      static Component.registerBuiltin(bundleIdentifier:reComponentClass:access:availability:)(v25, v27, 0, (char *)&v32, &v33, a10, a11);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for customComponentTypesToHandles != -1) {
      swift_once();
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = static SceneManager.customComponentTypesToHandles;
    static SceneManager.customComponentTypesToHandles = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, a12, a13, isUniquelyReferenced_nonNull_native);
    static SceneManager.customComponentTypesToHandles = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (one-time initialization token for handlesToCustomComponentTypes != -1) {
      swift_once();
    }
    swift_beginAccess();
    char v29 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = static SceneManager.handlesToCustomComponentTypes;
    static SceneManager.handlesToCustomComponentTypes = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a10, a11, v19, v29);
    static SceneManager.handlesToCustomComponentTypes = v32;
    swift_bridgeObjectRelease();
    uint64_t result = swift_endAccess();
    *BOOL v31 = v19;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t deinitComponent(componentTypeHandle:rawPointer:)(Swift::UInt a1, uint64_t a2)
{
  if (one-time initialization token for handlesToCustomComponentTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)) {
    return swift_endAccess();
  }
  uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) == 0) {
    return swift_endAccess();
  }
  char v7 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v5);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, v8, v9);
}

Swift::OpaquePointer __swiftcall cloneComponent(_:)(Swift::OpaquePointer a1)
{
  Swift::UInt Class = REComponentGetClass();
  uint64_t v2 = REComponentCreateByClass();
  uint64_t Object = RECustomComponentGetObject();
  if (!Object || (uint64_t v4 = Object, (v5 = RECustomComponentGetObject()) == 0))
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    unint64_t v11 = (void *)static OS_os_log.default.getter();
    goto LABEL_11;
  }
  uint64_t v6 = v5;
  if (one-time initialization token for handlesToCustomComponentTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static SceneManager.handlesToCustomComponentTypes;
  if (!*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
    || (uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v9 & 1) == 0))
  {
    swift_endAccess();
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    unint64_t v11 = (void *)static OS_os_log.default.getter();
LABEL_11:
    os_log(_:dso:log:_:_:)();

    return (Swift::OpaquePointer)v2;
  }
  long long v13 = *(_OWORD *)(*(void *)(v7 + 56) + 16 * v8);
  swift_endAccess();
  unint64_t v10 = *(void (**)(uint64_t, void, void))(*((void *)&v13 + 1) + 32);
  long long v15 = v13;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v10(v4, v13, *((void *)&v13 + 1));
  (*(void (**)(uint64_t *, uint64_t, void, uint64_t, void, void))(*((void *)&v13 + 1) + 40))(v14, v6, 0, 1, v13, *((void *)&v13 + 1));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return (Swift::OpaquePointer)v2;
}

uint64_t SceneManager.registerBuiltInType(_:typeEnum:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = REComponentClassFromType();
  if (result)
  {
    Swift::UInt v6 = result;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void *)(v2 + 40);
    *(void *)(v2 + 40) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, a1, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 40) = v9;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_beginAccess();
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *(void *)(v2 + 48);
    *(void *)(v2 + 48) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, v6, v8);
    *(void *)(v2 + 48) = v10;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SceneManager.componentTypeToComponentClass(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 40);
  if (!*(void *)(v5 + 16) || (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) == 0))
  {
    swift_endAccess();
    uint64_t v9 = specialized static SceneManager.makeComponentTypeHandleKey(_:typeName:)(a1, a2, 0, 0);
    uint64_t v11 = v10;
    if (one-time initialization token for customComponentTypesToHandles != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v12 = static SceneManager.customComponentTypesToHandles;
    if (*(void *)(static SceneManager.customComponentTypesToHandles + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v11);
      if (v14)
      {
        uint64_t v8 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
        swift_endAccess();
        swift_bridgeObjectRelease_n();
        return v8;
      }
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
  swift_endAccess();
  return v8;
}

uint64_t SceneManager.componentClassToComponentType(_:)(Swift::UInt a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 48);
  if (*(void *)(v3 + 16))
  {
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v5) {
      goto LABEL_7;
    }
  }
  swift_endAccess();
  if (one-time initialization token for handlesToCustomComponentTypes != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = static SceneManager.handlesToCustomComponentTypes;
  if (*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
    && (uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
LABEL_7:
    uint64_t v7 = *(void *)(*(void *)(v3 + 56) + 16 * v4);
  }
  else
  {
    uint64_t v7 = 0;
  }
  swift_endAccess();
  return v7;
}

uint64_t protocol witness for __SceneService.scenes.getter in conformance SceneManager()
{
  return swift_bridgeObjectRetain();
}

void protocol witness for __SceneService.append(scene:) in conformance SceneManager()
{
}

uint64_t protocol witness for __SceneService.remove(scene:) in conformance SceneManager(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  swift_retain();
  unint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized _ArrayProtocol.filter(_:)(v4, a1);
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v3 + 32) = v5;
  swift_bridgeObjectRelease();
  return REECSManagerRemoveScene();
}

void protocol witness for __SceneService.coreECSManager.getter in conformance SceneManager(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 24);
}

uint64_t Encodable.encodeToData(_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4 = a1 == 1852797802 && a2 == 0xE400000000000000;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v5 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    swift_release();
  }
  else
  {
    type metadata accessor for REEncoder();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = REEncoderCreate();
    unint64_t v7 = v2;
    uint64_t v5 = inited;
    unint64_t v8 = REEncoder.encode<A>(_:)(v7);
    if (!v3) {
      uint64_t v5 = v8;
    }
    swift_setDeallocating();
    REEncoderDestroy();
  }
  return v5;
}

uint64_t Decodable.decodeFromData(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v13 = (char *)&v19 - v12;
  if (v14 == v15 && v11 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v5) {
      return swift_release();
    }
    uint64_t v17 = v20;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, a5);
    swift_release();
  }
  else
  {
    type metadata accessor for REDecoder();
    uint64_t inited = swift_initStackObject();
    uint64_t v19 = REDecoderCreate();
    *(void *)(inited + 16) = v19;
    REDecoder.decode<A>(_:from:)(a5, (uint64_t)v10);
    if (v5)
    {
      swift_setDeallocating();
      return REDecoderDestroy();
    }
    uint64_t v17 = v20;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, a5);
    swift_setDeallocating();
    REDecoderDestroy();
    unint64_t v13 = v10;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v17, v13, a5);
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
LABEL_16:
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = MEMORY[0x22A689930](i, a1);
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return v9;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          uint64_t v6 = *(void *)(a1 + 8 * i + 32);
          swift_retain();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_13;
          }
        }
        if (v6 == a2)
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        if (v7 == v4) {
          return v9;
        }
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  Swift::UInt v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;

  uint64_t v3 = a1;
  uint64_t v21 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
LABEL_21:
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      uint64_t v5 = 0;
      uint64_t v19 = v3 & 0xC000000000000001;
      uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
      uint64_t v18 = v3;
      unint64_t v7 = (unsigned char *)(v3 + 32);
      uint64_t v8 = a2 + 56;
      while (1)
      {
        if (v19)
        {
          uint64_t v9 = MEMORY[0x22A689930](v5, v18);
          uint64_t v10 = __OFADD__(v5++, 1);
          if (v10)
          {
LABEL_18:
            __break(1u);
            return v21;
          }
        }
        else
        {
          if (v5 >= *(void *)(v6 + 16))
          {
            __break(1u);
            goto LABEL_21;
          }
          uint64_t v9 = *(void *)&v7[8 * v5];
          swift_retain();
          uint64_t v10 = __OFADD__(v5++, 1);
          if (v10) {
            goto LABEL_18;
          }
        }
        if (*(void *)(a2 + 16))
        {
          uint64_t v11 = *(void *)(v9 + 16);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v11);
          uint64_t v3 = (unint64_t)&v20;
          uint64_t v12 = Hasher._finalize()();
          unint64_t v13 = -1 << *(unsigned char *)(a2 + 32);
          uint64_t v14 = v12 & ~v13;
          if ((*(void *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
          {
            uint64_t v15 = *(void *)(a2 + 48);
            if (*(void *)(v15 + 8 * v14) == v11)
            {
LABEL_15:
              swift_release();
              goto LABEL_5;
            }
            uint64_t v16 = ~v13;
            while (1)
            {
              uint64_t v14 = (v14 + 1) & v16;
              if (((*(void *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
                break;
              }
              if (*(void *)(v15 + 8 * v14) == v11) {
                goto LABEL_15;
              }
            }
          }
        }
        uint64_t v3 = (unint64_t)&v21;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_5:
        if (v5 == v4) {
          return v21;
        }
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

uint64_t specialized static SceneManager.makeComponentTypeHandleKey(_:typeName:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = 95;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = a3;
    v8._object = a4;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    return v18;
  }
  else
  {
    if (one-time initialization token for customComponentTypesToKeys != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v10 = static SceneManager.customComponentTypesToKeys;
    if (*(void *)(static SceneManager.customComponentTypesToKeys + 16)
      && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v12 & 1) != 0))
    {
      uint64_t v9 = *(void *)(*(void *)(v10 + 56) + 16 * v11);
      swift_endAccess();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_endAccess();
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v14 = v13;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = static SceneManager.customComponentTypesToKeys;
      static SceneManager.customComponentTypesToKeys = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, v14, a1, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypesToKeys = v17;
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
  }
  return v9;
}

uint64_t specialized static SceneManager.customComponentTypeHelper(_:typeName:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v8 = specialized static SceneManager.makeComponentTypeHandleKey(_:typeName:)(a1, a2, a3, a4);
  uint64_t v10 = v9;
  if (one-time initialization token for customComponentTypesToHandles != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v11 = static SceneManager.customComponentTypesToHandles;
  if (*(void *)(static SceneManager.customComponentTypesToHandles + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
    if (v13)
    {
      uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      return v14;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  if (a4)
  {
    unint64_t v15 = (unint64_t)a4;
  }
  else
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
    unint64_t v15 = v16;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  swift_bridgeObjectRetain();
  uint64_t v18 = v17(a1, a2);
  uint64_t v19 = REStructBuilderCreate();
  if (v18 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v18 > 0x7FFFFFFF)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v20 = v19;
  String.utf8CString.getter();
  int v21 = REStructBuilderInit();
  swift_release();
  if (v21)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 88))(v20, a1, a2);
    if (RECIntrospectionStructRegister())
    {
      uint64_t v37 = v8;
      REStructBuilderDestroy();
      uint64_t v22 = dynamic_cast_existential_2_conditional(a1);
      uint64_t v40 = 48;
      int v41 = 1;
      uint64_t v42 = 0;
      uint64_t v43 = @objc ecsNetSyncWriteSnapshot(_:_:_:_:_:);
      uint64_t v44 = @objc ecsNetSyncReadSnapshot(_:_:_:_:_:_:);
      BOOL v45 = v22 != 0;
      if (v22)
      {
        RERegisterSwiftCodableCallbacks();
      }
      else
      {
        static os_log_type_t.default.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_22830EC60;
        _StringGuts.grow(_:)(55);
        v24._object = (void *)0x80000002283525A0;
        v24._countAndFlagsBits = 0xD000000000000018;
        String.append(_:)(v24);
        v25._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._countAndFlagsBits = 0xD00000000000001DLL;
        v26._object = (void *)0x80000002283525C0;
        String.append(_:)(v26);
        swift_bridgeObjectRetain();
        v27._countAndFlagsBits = 0xD000000000000027;
        v27._object = (void *)0x80000002283525E0;
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        *(void *)(v23 + 56) = MEMORY[0x263F8D310];
        *(void *)(v23 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v23 + 32) = 0;
        *(void *)(v23 + 40) = 0xE000000000000000;
        type metadata accessor for OS_os_log();
        long long v28 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
      }
      if (swift_conformsToProtocol2()) {
        uint64_t v29 = a1;
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = swift_conformsToProtocol2();
      uint64_t v31 = MEMORY[0x270FA5388](v30);
      if ((v15 & 0x1000000000000000) != 0 || !(v15 & 0x2000000000000000 | v5 & 0x1000000000000000))
      {
        _StringGuts._slowWithCString<A>(_:)();
        goto LABEL_26;
      }
      MEMORY[0x270FA5388](v31);
      if ((v15 & 0x2000000000000000) != 0)
      {
        v38[0] = v5;
        v38[1] = v15 & 0xFFFFFFFFFFFFFFLL;
        closure #1 in closure #1 in static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&v40, (uint64_t)v38, v32, v29 != 0, v22 != 0, v5, (void *)v15, v33 != 0, (Swift::UInt *)&v39, a1, a2, v37, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v39;
      }
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v34 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v35 = v5 & 0xFFFFFFFFFFFFLL;
LABEL_25:
        uint64_t v39 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v34, v35, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
LABEL_26:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v39;
      }
LABEL_33:
      uint64_t v34 = _StringObject.sharedUTF8.getter();
      goto LABEL_25;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static SceneManager.customComponentType(_:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static SceneManager.customComponentTypeObjectIdToHandles;
  if (*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
    && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
  }
  else
  {
    swift_endAccess();
    uint64_t v7 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)(a1, a2, 0, 0);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = static SceneManager.customComponentTypeObjectIdToHandles;
    static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a1, isUniquelyReferenced_nonNull_native);
    static SceneManager.customComponentTypeObjectIdToHandles = v10;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return v7;
}

uint64_t specialized static CustomComponentProxy.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t *a2, char a3)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  uint64_t v5 = CustomComponentProxy.getJSONData()();
  unint64_t v7 = v6;
  v10[0] = 0;
  CustomComponentProxy.updateJSON(with:)(v5, v6);
  uint64_t result = outlined consume of Data?(v5, v7);
  uint64_t v9 = v10[0];
  if (a3)
  {
    uint64_t result = *a2;
    if (*a2) {
      uint64_t result = RECIntrospectionFree();
    }
  }
  *a2 = v9;
  return result;
}

uint64_t dispatch thunk of __SceneService.scenes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of __SceneService.append(scene:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of __SceneService.remove(scene:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of __SceneService.coreECSManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for CustomComponentProxy()
{
  return &type metadata for CustomComponentProxy;
}

uint64_t type metadata accessor for SceneManager()
{
  return self;
}

uint64_t method lookup function for SceneManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SceneManager);
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in static SceneManager.customComponentTypeHelper(_:typeName:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = closure #1 in closure #1 in static SceneManager.customComponentTypeHelper(_:typeName:)(*(void *)(v2 + 16), a1, *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), *(unsigned char *)(v2 + 33), *(void *)(v2 + 40), *(void **)(v2 + 48), *(unsigned char *)(v2 + 56), &v5, *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88));
  *a2 = v5;
  return result;
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(void *a1@<X8>)
{
  return specialized closure #1 in _StringGuts.withCString<A>(_:)(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

{
  uint64_t v1;
  uint64_t v2;
  void *result;
  uint64_t v5;

  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError;
  if (!lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError;
  if (!lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomComponentProxy.CustomComponentProxyEncodeError and conformance CustomComponentProxy.CustomComponentProxyEncodeError);
  }
  return result;
}

uint64_t specialized static SceneManager.unregisterCustomComponents()()
{
  if (one-time initialization token for customComponentTypesToHandles != -1) {
LABEL_33:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v0 = static SceneManager.customComponentTypesToHandles + 64;
  uint64_t v1 = 1 << *(unsigned char *)(static SceneManager.customComponentTypesToHandles + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  uint64_t v3 = v2 & *(void *)(static SceneManager.customComponentTypesToHandles + 64);
  int64_t v4 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v5 = 0;
  while (1)
  {
    if (v3)
    {
      v3 &= v3 - 1;
      goto LABEL_6;
    }
    int64_t v6 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v6 >= v4) {
      goto LABEL_24;
    }
    uint64_t v7 = *(void *)(v0 + 8 * v6);
    ++v5;
    if (!v7)
    {
      int64_t v5 = v6 + 1;
      if (v6 + 1 >= v4) {
        goto LABEL_24;
      }
      uint64_t v7 = *(void *)(v0 + 8 * v5);
      if (!v7)
      {
        int64_t v5 = v6 + 2;
        if (v6 + 2 >= v4) {
          goto LABEL_24;
        }
        uint64_t v7 = *(void *)(v0 + 8 * v5);
        if (!v7)
        {
          int64_t v5 = v6 + 3;
          if (v6 + 3 >= v4) {
            goto LABEL_24;
          }
          uint64_t v7 = *(void *)(v0 + 8 * v5);
          if (!v7) {
            break;
          }
        }
      }
    }
LABEL_23:
    uint64_t v3 = (v7 - 1) & v7;
LABEL_6:
    RECustomComponentTypeGetObjectIntrospection();
    RECustomComponentTypeDestroy();
    RECIntrospectionStructUnregister();
  }
  int64_t v8 = v6 + 4;
  if (v8 < v4)
  {
    uint64_t v7 = *(void *)(v0 + 8 * v8);
    if (!v7)
    {
      while (1)
      {
        int64_t v5 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_32;
        }
        if (v5 >= v4) {
          goto LABEL_24;
        }
        uint64_t v7 = *(void *)(v0 + 8 * v5);
        ++v8;
        if (v7) {
          goto LABEL_23;
        }
      }
    }
    int64_t v5 = v8;
    goto LABEL_23;
  }
LABEL_24:
  swift_release();
  if (one-time initialization token for customComponentTypesToKeys != -1) {
    swift_once();
  }
  uint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_beginAccess();
  static SceneManager.customComponentTypesToKeys = v10;
  swift_bridgeObjectRelease();
  static SceneManager.customComponentTypesToHandles = specialized Dictionary.init(dictionaryLiteral:)(v9);
  swift_bridgeObjectRelease();
  if (one-time initialization token for handlesToCustomComponentTypes != -1) {
    swift_once();
  }
  unint64_t v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_beginAccess();
  static SceneManager.handlesToCustomComponentTypes = v11;
  swift_bridgeObjectRelease();
  if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
    swift_once();
  }
  unint64_t v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_beginAccess();
  static SceneManager.customComponentTypeObjectIdToHandles = v12;
  return swift_bridgeObjectRelease();
}

unsigned char *storeEnumTagSinglePayload for CustomComponentProxy.CustomComponentProxyEncodeError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227F1177CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomComponentProxy.CustomComponentProxyEncodeError()
{
  return &type metadata for CustomComponentProxy.CustomComponentProxyEncodeError;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ModelDebugOptionsComponent.VisualizationMode.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))__RKEntityTriggerSpecification.Name.rawValue.getter);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, __RKEntityActionSpecification.Name.rawValue.getter);
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE90000000000006ELL;
  uint64_t v3 = 0x6F6974616D696E61;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6F6974616D696E61;
  unint64_t v6 = 0xE90000000000006ELL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v7 = 1768191329;
      goto LABEL_11;
    case 2:
      unint64_t v5 = 0x6D6E6F7269766E65;
      unint64_t v6 = 0xEB00000000746E65;
      break;
    case 3:
      unint64_t v5 = 0x4D6E49746C697562;
      unint64_t v6 = 0xEF6C616972657461;
      break;
    case 4:
      unint64_t v6 = 0x800000022834DC30;
      unint64_t v5 = 0xD000000000000013;
      break;
    case 5:
      unint64_t v6 = 0xE400000000000000;
      unint64_t v5 = 1752393069;
      break;
    case 6:
      unint64_t v6 = 0xE700000000000000;
      unint64_t v5 = 0x73636973796870;
      break;
    case 7:
      unint64_t v6 = 0xE700000000000000;
      unint64_t v5 = 0x65727574786574;
      break;
    case 8:
      unint64_t v5 = 0x6F4C797469746E65;
      unint64_t v6 = 0xEA00000000006461;
      break;
    case 9:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v7 = 1701079414;
LABEL_11:
      unint64_t v5 = v7 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v8 = 1768191329;
      goto LABEL_31;
    case 2:
      unint64_t v2 = 0xEB00000000746E65;
      if (v5 != 0x6D6E6F7269766E65) {
        goto LABEL_32;
      }
      goto LABEL_28;
    case 3:
      unint64_t v2 = 0xEF6C616972657461;
      if (v5 != 0x4D6E49746C697562) {
        goto LABEL_32;
      }
      goto LABEL_28;
    case 4:
      unint64_t v2 = 0x800000022834DC30;
      if (v5 != 0xD000000000000013) {
        goto LABEL_32;
      }
      goto LABEL_28;
    case 5:
      unint64_t v2 = 0xE400000000000000;
      if (v5 != 1752393069) {
        goto LABEL_32;
      }
      goto LABEL_28;
    case 6:
      unint64_t v2 = 0xE700000000000000;
      if (v5 != 0x73636973796870) {
        goto LABEL_32;
      }
      goto LABEL_28;
    case 7:
      unint64_t v2 = 0xE700000000000000;
      if (v5 != 0x65727574786574) {
        goto LABEL_32;
      }
      goto LABEL_28;
    case 8:
      uint64_t v3 = 0x6F4C797469746E65;
      unint64_t v2 = 0xEA00000000006461;
      goto LABEL_27;
    case 9:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v8 = 1701079414;
LABEL_31:
      if (v5 != (v8 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000)) {
        goto LABEL_32;
      }
      goto LABEL_28;
    default:
LABEL_27:
      if (v5 != v3) {
        goto LABEL_32;
      }
LABEL_28:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_32:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 0x7261656E696CLL;
  uint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7261656E696CLL;
  switch(v4)
  {
    case 1:
      uint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1801675106;
      break;
    case 2:
      unint64_t v5 = 0x65636E756F62;
      break;
    case 3:
      unint64_t v5 = 0x656C63726963;
      break;
    case 4:
      uint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x63697473616C65;
      break;
    case 5:
      unint64_t v5 = 0x746E656E6F707865;
      uint64_t v3 = 0xEB000000006C6169;
      break;
    case 6:
      uint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x6574696D726568;
      break;
    case 7:
      uint64_t v3 = 0xE300000000000000;
      unint64_t v5 = 6778732;
      break;
    case 8:
      uint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x7265776F70;
      break;
    case 9:
      uint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1701734771;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1801675106) {
        goto LABEL_28;
      }
      goto LABEL_31;
    case 2:
      if (v5 != 0x65636E756F62) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 3:
      if (v5 != 0x656C63726963) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x63697473616C65) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 5:
      unint64_t v6 = 0xEB000000006C6169;
      if (v5 != 0x746E656E6F707865) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 6:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x6574696D726568) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 7:
      unint64_t v6 = 0xE300000000000000;
      if (v5 != 6778732) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 8:
      unint64_t v6 = 0xE500000000000000;
      unint64_t v2 = 0x7265776F70;
      goto LABEL_27;
    case 9:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1701734771) {
        goto LABEL_31;
      }
      goto LABEL_28;
    default:
LABEL_27:
      if (v5 != v2) {
        goto LABEL_31;
      }
LABEL_28:
      if (v3 == v6) {
        uint64_t v7 = 1;
      }
      else {
LABEL_31:
      }
        uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 7368560;
  uint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 7368560;
  switch(v4)
  {
    case 1:
      uint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x6B6E696C62;
      break;
    case 2:
      uint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x65636E756F62;
      break;
    case 3:
      uint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1885957222;
      break;
    case 4:
      uint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x74616F6C66;
      break;
    case 5:
      uint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x656C6767696ALL;
      break;
    case 6:
      uint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x65736C7570;
      break;
    case 7:
      uint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1852403827;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x6B6E696C62) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x65636E756F62) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1885957222) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x74616F6C66) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x656C6767696ALL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      unint64_t v6 = 0xE500000000000000;
      unint64_t v2 = 0x65736C7570;
      goto LABEL_21;
    case 7:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1852403827) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v6) {
        uint64_t v7 = 1;
      }
      else {
LABEL_25:
      }
        uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  const char *v10;
  char v11;

  unint64_t v2 = 1701736302;
  uint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 1701736302;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000011;
      unint64_t v6 = "move in from left";
      goto LABEL_6;
    case 2:
      uint64_t v7 = "move in from right";
      goto LABEL_9;
    case 3:
      uint64_t v7 = "move in from front";
      goto LABEL_9;
    case 4:
      unint64_t v5 = 0xD000000000000011;
      unint64_t v6 = "move in from rear";
LABEL_6:
      uint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 5:
      uint64_t v7 = "move in from above";
      goto LABEL_9;
    case 6:
      uint64_t v7 = "move in from below";
LABEL_9:
      uint64_t v3 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 7:
      uint64_t v3 = 0xE300000000000000;
      unint64_t v5 = 7368560;
      break;
    case 8:
      uint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x707520656C616373;
      break;
    case 9:
      unint64_t v5 = 0x6F6420656C616373;
      uint64_t v3 = 0xEA00000000006E77;
      break;
    default:
      break;
  }
  uint64_t v8 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      char v9 = "move in from left";
      goto LABEL_18;
    case 2:
      unint64_t v10 = "move in from right";
      goto LABEL_22;
    case 3:
      unint64_t v10 = "move in from front";
      goto LABEL_22;
    case 4:
      char v9 = "move in from rear";
LABEL_18:
      uint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      if (v5 != 0xD000000000000011) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 5:
      unint64_t v10 = "move in from above";
      goto LABEL_22;
    case 6:
      unint64_t v10 = "move in from below";
LABEL_22:
      uint64_t v8 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      if (v5 != 0xD000000000000012) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 7:
      uint64_t v8 = 0xE300000000000000;
      if (v5 != 7368560) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 8:
      uint64_t v8 = 0xE800000000000000;
      unint64_t v2 = 0x707520656C616373;
      goto LABEL_27;
    case 9:
      uint64_t v8 = 0xEA00000000006E77;
      if (v5 != 0x6F6420656C616373) {
        goto LABEL_31;
      }
      goto LABEL_28;
    default:
LABEL_27:
      if (v5 != v2) {
        goto LABEL_31;
      }
LABEL_28:
      if (v3 == v8) {
        unint64_t v11 = 1;
      }
      else {
LABEL_31:
      }
        unint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v11 & 1;
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  const char *v10;
  char v11;

  unint64_t v2 = 1701736302;
  uint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 1701736302;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000010;
      unint64_t v6 = "move out to left";
      goto LABEL_6;
    case 2:
      uint64_t v7 = "move out to right";
      goto LABEL_9;
    case 3:
      uint64_t v7 = "move out to front";
      goto LABEL_9;
    case 4:
      unint64_t v5 = 0xD000000000000010;
      unint64_t v6 = "move out to rear";
LABEL_6:
      uint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 5:
      uint64_t v7 = "move out to above";
      goto LABEL_9;
    case 6:
      uint64_t v7 = "move out to below";
LABEL_9:
      uint64_t v3 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 7:
      uint64_t v3 = 0xE300000000000000;
      unint64_t v5 = 7368560;
      break;
    case 8:
      unint64_t v5 = 0x6F6420656C616373;
      uint64_t v3 = 0xEA00000000006E77;
      break;
    case 9:
      uint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x707520656C616373;
      break;
    default:
      break;
  }
  uint64_t v8 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      char v9 = "move out to left";
      goto LABEL_18;
    case 2:
      unint64_t v10 = "move out to right";
      goto LABEL_22;
    case 3:
      unint64_t v10 = "move out to front";
      goto LABEL_22;
    case 4:
      char v9 = "move out to rear";
LABEL_18:
      uint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      if (v5 != 0xD000000000000010) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 5:
      unint64_t v10 = "move out to above";
      goto LABEL_22;
    case 6:
      unint64_t v10 = "move out to below";
LABEL_22:
      uint64_t v8 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      if (v5 != 0xD000000000000011) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 7:
      uint64_t v8 = 0xE300000000000000;
      if (v5 != 7368560) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 8:
      unint64_t v2 = 0x6F6420656C616373;
      uint64_t v8 = 0xEA00000000006E77;
      goto LABEL_27;
    case 9:
      uint64_t v8 = 0xE800000000000000;
      if (v5 != 0x707520656C616373) {
        goto LABEL_31;
      }
      goto LABEL_28;
    default:
LABEL_27:
      if (v5 != v2) {
        goto LABEL_31;
      }
LABEL_28:
      if (v3 == v8) {
        unint64_t v11 = 1;
      }
      else {
LABEL_31:
      }
        unint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v11 & 1;
  }
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 0xEB00000000746E65;
  uint64_t v3 = 0x726170736E617254;
  uint64_t v4 = a1;
  unint64_t v5 = 0x726170736E617254;
  unint64_t v6 = 0xEB00000000746E65;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xED00005241746E65;
      break;
    case 2:
      unint64_t v6 = 0x800000022834DCB0;
      unint64_t v5 = 0xD00000000000001ALL;
      break;
    case 3:
      unint64_t v5 = 0xD00000000000001CLL;
      unint64_t v6 = 0x800000022834DCD0;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xED00005241746E65;
      if (v5 == 0x726170736E617254) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0x800000022834DCB0;
      uint64_t v3 = 0xD00000000000001ALL;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0x800000022834DCD0;
      if (v5 == 0xD00000000000001CLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        uint64_t v7 = 1;
      }
      else {
LABEL_14:
      }
        uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 0x65757161704FLL;
  uint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x65757161704FLL;
  switch(v4)
  {
    case 1:
      uint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x524165757161704FLL;
      break;
    case 2:
      uint64_t v3 = 0x800000022834DD00;
      unint64_t v5 = 0xD000000000000015;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000017;
      uint64_t v3 = 0x800000022834DD20;
      break;
    case 4:
      unint64_t v5 = 0x776F64616853;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      if (v5 == 0x524165757161704FLL) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0x800000022834DD00;
      if (v5 != 0xD000000000000015) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v2 = 0xD000000000000017;
      unint64_t v6 = 0x800000022834DD20;
      goto LABEL_12;
    case 4:
      if (v5 != 0x776F64616853) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        uint64_t v7 = 1;
      }
      else {
LABEL_16:
      }
        uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 0x65636166727573;
  uint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x65636166727573;
  switch(v4)
  {
    case 1:
      uint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x6567616D69;
      break;
    case 2:
      uint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1701011814;
      break;
    case 3:
      uint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x7463656A626FLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x6567616D69) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      unint64_t v2 = 1701011814;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x7463656A626FLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        uint64_t v7 = 1;
      }
      else {
LABEL_14:
      }
        uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 1701667182;
  uint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 1701667182;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6E656D6E67696C61;
      uint64_t v3 = 0xE900000000000074;
      break;
    case 2:
      unint64_t v5 = 0x6966697373616C63;
      uint64_t v3 = 0xEE006E6F69746163;
      break;
    case 3:
      uint64_t v3 = 0xE300000000000000;
      unint64_t v5 = 7107189;
      break;
    case 4:
      unint64_t v5 = 0x6C61636973796870;
      uint64_t v3 = 0xED00006874646957;
      break;
    case 5:
      unint64_t v5 = 0x747265566873656DLL;
      uint64_t v3 = 0xEA00000000007865;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE900000000000074;
      if (v5 == 0x6E656D6E67696C61) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0xEE006E6F69746163;
      if (v5 != 0x6966697373616C63) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0xE300000000000000;
      if (v5 != 7107189) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v2 = 0x6C61636973796870;
      unint64_t v6 = 0xED00006874646957;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xEA00000000007865;
      if (v5 != 0x747265566873656DLL) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        uint64_t v7 = 1;
      }
      else {
LABEL_19:
      }
        uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x65636E6575716573;
  }
  else {
    uint64_t v3 = 0x7265646C6F66;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x65636E6575716573;
  }
  else {
    uint64_t v5 = 0x7265646C6F66;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;

  if (a1) {
    BOOL v2 = 0xED000074754F6E6FLL;
  }
  else {
    BOOL v2 = 0xEC0000006E496E6FLL;
  }
  if (a2) {
    uint64_t v3 = 0xED000074754F6E6FLL;
  }
  else {
    uint64_t v3 = 0xEC0000006E496E6FLL;
  }
  if (v2 == v3) {
    unint64_t v4 = 1;
  }
  else {
    unint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0xD000000000000010;
  }
  else {
    uint64_t v3 = 0x7369776B636F6C63;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000065;
  }
  else {
    unint64_t v4 = 0x800000022834DC80;
  }
  if (a2) {
    uint64_t v5 = 0xD000000000000010;
  }
  else {
    uint64_t v5 = 0x7369776B636F6C63;
  }
  if (a2) {
    unint64_t v6 = 0x800000022834DC80;
  }
  else {
    unint64_t v6 = 0xE900000000000065;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;

  if (a1) {
    BOOL v2 = 0x800000022834D820;
  }
  else {
    BOOL v2 = 0x800000022834D800;
  }
  if (a2) {
    uint64_t v3 = 0x800000022834D820;
  }
  else {
    uint64_t v3 = 0x800000022834D800;
  }
  if (v2 == v3) {
    unint64_t v4 = 1;
  }
  else {
    unint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x72416D6F74737563;
  }
  else {
    uint64_t v3 = 0x696669746E656469;
  }
  if (v2) {
    unint64_t v4 = 0xEA00000000007265;
  }
  else {
    unint64_t v4 = 0xEF73746E656D7567;
  }
  if (a2) {
    uint64_t v5 = 0x72416D6F74737563;
  }
  else {
    uint64_t v5 = 0x696669746E656469;
  }
  if (a2) {
    unint64_t v6 = 0xEF73746E656D7567;
  }
  else {
    unint64_t v6 = 0xEA00000000007265;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x65636E6575716573;
  }
  else {
    uint64_t v3 = 0x65727275636E6F63;
  }
  if (v2) {
    unint64_t v4 = 0xEA0000000000746ELL;
  }
  else {
    unint64_t v4 = 0xE900000000000064;
  }
  if (a2) {
    uint64_t v5 = 0x65636E6575716573;
  }
  else {
    uint64_t v5 = 0x65727275636E6F63;
  }
  if (a2) {
    unint64_t v6 = 0xE900000000000064;
  }
  else {
    unint64_t v6 = 0xEA0000000000746ELL;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x746E656D75677261;
  }
  else {
    uint64_t v3 = 1701667182;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE900000000000073;
  }
  if (a2) {
    uint64_t v5 = 0x746E656D75677261;
  }
  else {
    uint64_t v5 = 1701667182;
  }
  if (a2) {
    unint64_t v6 = 0xE900000000000073;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7954797469746E65;
  }
  else {
    uint64_t v3 = 0x616A6E694E7369;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xEE00656D614E6570;
  }
  if (a2) {
    uint64_t v5 = 0x7954797469746E65;
  }
  else {
    uint64_t v5 = 0x616A6E694E7369;
  }
  if (a2) {
    unint64_t v6 = 0xEE00656D614E6570;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x64616F6C657270;
  }
  else {
    uint64_t v3 = 0x6D6165727473;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x64616F6C657270;
  }
  else {
    uint64_t v5 = 0x6D6165727473;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6E6F697461746F72;
    }
    else {
      uint64_t v3 = 0x74616C736E617274;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE800000000000000;
    }
    else {
      unint64_t v4 = 0xEB000000006E6F69;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6E6F697461746F72;
      }
      else {
        uint64_t v6 = 0x74616C736E617274;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0xEB000000006E6F69;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v3 = 0x656C616373;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE500000000000000;
  if (v3 != 0x656C616373)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  int v2 = 0xED00007473657571;
  uint64_t v3 = 0x657220776F6C6C61;
  unint64_t v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      int v5 = 0x722065726F6E6769;
    }
    else {
      int v5 = 0xD000000000000014;
    }
    if (v4 == 1) {
      uint64_t v6 = 0xEE00747365757165;
    }
    else {
      uint64_t v6 = 0x800000022834DAE0;
    }
    unint64_t v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  int v5 = 0x657220776F6C6C61;
  uint64_t v6 = 0xED00007473657571;
  unint64_t v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x722065726F6E6769;
    }
    else {
      uint64_t v3 = 0xD000000000000014;
    }
    if (v7 == 1) {
      int v2 = 0xEE00747365757165;
    }
    else {
      int v2 = 0x800000022834DAE0;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x74756F2065736165;
    }
    else {
      uint64_t v3 = 0xD000000000000010;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE800000000000000;
    }
    else {
      unint64_t v4 = 0x800000022834D880;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x74756F2065736165;
      }
      else {
        uint64_t v6 = 0xD000000000000010;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0x800000022834D880;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    uint64_t v3 = 0x6E692065736165;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE700000000000000;
  if (v3 != 0x6E692065736165)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6C756679616C70;
    }
    else {
      uint64_t v3 = 1684826487;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE700000000000000;
    }
    else {
      unint64_t v4 = 0xE400000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6C756679616C70;
      }
      else {
        uint64_t v6 = 1684826487;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE700000000000000;
      }
      else {
        unint64_t v7 = 0xE400000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v3 = 0x6369736162;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE500000000000000;
  if (v3 != 0x6369736162)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x65636E6174736964;
    }
    else {
      uint64_t v3 = 1701869940;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE800000000000000;
    }
    else {
      unint64_t v4 = 0xE400000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x65636E6174736964;
      }
      else {
        uint64_t v6 = 1701869940;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0xE400000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE600000000000000;
    uint64_t v3 = 0x746567726174;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE600000000000000;
  if (v3 != 0x746567726174)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1936154996;
    }
    else {
      uint64_t v3 = 0xD000000000000011;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0x800000022834D330;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1936154996;
      }
      else {
        uint64_t v6 = 0xD000000000000011;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0x800000022834D330;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE600000000000000;
    uint64_t v3 = 0x746567726174;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE600000000000000;
  if (v3 != 0x746567726174)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x746E656D75677261;
    }
    else {
      uint64_t v3 = 0x6F697469646E6F63;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE900000000000073;
    }
    else {
      unint64_t v4 = 0xEA0000000000736ELL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x746E656D75677261;
      }
      else {
        uint64_t v6 = 0x6F697469646E6F63;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE900000000000073;
      }
      else {
        unint64_t v7 = 0xEA0000000000736ELL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1701667182;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1701667182)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6573756170;
    }
    else {
      uint64_t v3 = 1886352499;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000;
    }
    else {
      unint64_t v4 = 0xE400000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6573756170;
      }
      else {
        uint64_t v6 = 1886352499;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000;
      }
      else {
        unint64_t v7 = 0xE400000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 2036427888;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 2036427888)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  int v2 = 0xEC00000065637275;
  uint64_t v3 = 0x6F7320746E696F70;
  unint64_t v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      int v5 = 0x746E6569626D61;
    }
    else {
      int v5 = 0x636973756DLL;
    }
    if (v4 == 1) {
      uint64_t v6 = 0xE700000000000000;
    }
    else {
      uint64_t v6 = 0xE500000000000000;
    }
    unint64_t v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  int v5 = 0x6F7320746E696F70;
  uint64_t v6 = 0xEC00000065637275;
  unint64_t v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x746E6569626D61;
    }
    else {
      uint64_t v3 = 0x636973756DLL;
    }
    if (v7 == 1) {
      int v2 = 0xE700000000000000;
    }
    else {
      int v2 = 0xE500000000000000;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3();
  uint64_t v6 = v5;
  if (v4 == a3() && v6 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 - 2 >= 3)
  {
    unint64_t v6 = a2;
    if (a2)
    {
      if (a2 == 1)
      {
        unint64_t v6 = 0xE500000000000000;
        uint64_t v7 = 0x534F63616DLL;
      }
      else
      {
        uint64_t v7 = a1;
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      unint64_t v6 = 0xE300000000000000;
      uint64_t v7 = 5459817;
    }
  }
  else
  {
    unint64_t v6 = 0xE800000000000000;
    uint64_t v7 = 0x534F6E6F69736976;
  }
  if (a4 - 2 >= 3)
  {
    if (a4)
    {
      if (a4 == 1)
      {
        a4 = 0xE500000000000000;
        if (v7 != 0x534F63616DLL) {
          goto LABEL_20;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        if (v7 != a3)
        {
LABEL_20:
          char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
          goto LABEL_21;
        }
      }
    }
    else
    {
      a4 = 0xE300000000000000;
      if (v7 != 5459817) {
        goto LABEL_20;
      }
    }
  }
  else
  {
    a4 = 0xE800000000000000;
    if (v7 != 0x534F6E6F69736976) {
      goto LABEL_20;
    }
  }
  if (v6 != a4) {
    goto LABEL_20;
  }
  char v8 = 1;
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

RealityKit::__RKEntityMoveSelection_optional __swiftcall __RKEntityMoveSelection.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveSelection.init(rawValue:), v3);
  result.CGColorRef value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static __RKEntityMoveSelection.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityMoveSelection.allCases.getter;
}

unint64_t __RKEntityMoveSelection.rawValue.getter()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityMoveSelection(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityMoveSelection()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityMoveSelection()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityMoveSelection()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

RealityKit::__RKEntityMoveSelection_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityMoveSelection(Swift::String *a1)
{
  return __RKEntityMoveSelection.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityMoveSelection(void *a1@<X8>)
{
  unint64_t v2 = 0x800000022834D800;
  if (*v1) {
    unint64_t v2 = 0x800000022834D820;
  }
  *a1 = 0xD000000000000010;
  a1[1] = v2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityMoveSelection()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityMoveSelection()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityMoveSelection(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityMoveSelection;
}

RealityKit::__RKEntityMoveEase_optional __swiftcall __RKEntityMoveEase.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveEase.init(rawValue:), v3);
  result.CGColorRef value = swift_bridgeObjectRelease();
  char v7 = 10;
  if (v5 < 0xA) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static __RKEntityMoveEase.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityMoveEase.allCases.getter;
}

uint64_t __RKEntityMoveEase.rawValue.getter()
{
  uint64_t result = 0x7261656E696CLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1801675106;
      break;
    case 2:
      uint64_t result = 0x65636E756F62;
      break;
    case 3:
      uint64_t result = 0x656C63726963;
      break;
    case 4:
      uint64_t result = 0x63697473616C65;
      break;
    case 5:
      uint64_t result = 0x746E656E6F707865;
      break;
    case 6:
      uint64_t result = 0x6574696D726568;
      break;
    case 7:
      uint64_t result = 6778732;
      break;
    case 8:
      uint64_t result = 0x7265776F70;
      break;
    case 9:
      uint64_t result = 1701734771;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityMoveEase(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityMoveEase()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityMoveEase()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityMoveEase()
{
  return Hasher._finalize()();
}

RealityKit::__RKEntityMoveEase_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityMoveEase(Swift::String *a1)
{
  return __RKEntityMoveEase.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityMoveEase@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = __RKEntityMoveEase.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityMoveEase()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityMoveEase()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityMoveEase(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static __RKEntityMoveEase.allCases.getter;
}

RealityKit::__RKEntityMoveEaseType_optional __swiftcall __RKEntityMoveEaseType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveEaseType.init(rawValue:), v3);
  result.CGColorRef value = swift_bridgeObjectRelease();
  char v7 = 3;
  if (v5 < 3) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

void *static __RKEntityMoveEaseType.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityMoveEaseType.allCases.getter;
}

uint64_t __RKEntityMoveEaseType.rawValue.getter()
{
  unint64_t v1 = 0x74756F2065736165;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E692065736165;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityMoveEaseType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityMoveEaseType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityMoveEaseType()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityMoveEaseType()
{
  return Hasher._finalize()();
}

RealityKit::__RKEntityMoveEaseType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityMoveEaseType(Swift::String *a1)
{
  return __RKEntityMoveEaseType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityMoveEaseType(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE800000000000000;
  unint64_t v5 = 0x74756F2065736165;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000010;
    unint64_t v4 = 0x800000022834D880;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6E692065736165;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityMoveEaseType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityMoveEaseType()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityMoveEaseType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityMoveEaseType;
}

uint64_t key path setter for __RKEntityTransformAction.relativeToEntity : __RKEntityTransformAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 192) = v2;
  swift_retain();
  return swift_release();
}

uint64_t __RKEntityTransformAction.relativeToEntity.getter()
{
  return swift_retain();
}

uint64_t __RKEntityTransformAction.relativeToEntity.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 192) = a1;
  return swift_release();
}

uint64_t (*__RKEntityTransformAction.relativeToEntity.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKEntityTransformAction.__allocating_init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, unint64_t a8, float a9, float a10, float a11, char *a12, char *a13, char *a14, char a15)
{
  char v24 = a4 & 1;
  char v25 = a7 & 1;
  char v26 = *a13;
  char v27 = *a14;
  char v31 = *a12;
  char v30 = v26;
  char v29 = v27;
  type metadata accessor for __RKEntityTransformAction();
  swift_allocObject();
  return specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(a1, a2, a3, v24, a5, a6, v25, a8 | ((HIDWORD(a8) & 1) << 32), a9, a10, a11, &v31, &v30, &v29, a15, 0);
}

uint64_t __RKEntityTransformAction.__allocating_init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, unint64_t a8, float a9, float a10, float a11, char *a12, char *a13, char *a14, char a15, uint64_t a16)
{
  char v23 = a4 & 1;
  char v24 = a7 & 1;
  swift_allocObject();
  uint64_t v25 = specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(a1, a2, a3, v23, a5, a6, v24, a8 | ((HIDWORD(a8) & 1) << 32), a9, a10, a11, a12, a13, a14, a15, a16);
  swift_release();
  return v25;
}

uint64_t type metadata accessor for __RKEntityTransformAction()
{
  return self;
}

uint64_t __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, unint64_t a8, float a9, float a10, float a11, char *a12, char *a13, char *a14, char a15, uint64_t a16)
{
  uint64_t v16 = specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(a1, a2, a3, a4 & 1, a5, a6, a7 & 1, a8 | ((HIDWORD(a8) & 1) << 32), a9, a10, a11, a12, a13, a14, a15, a16);
  swift_release();
  return v16;
}

uint64_t __RKEntityTransformAction.perform(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v151 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)&v139[0] = 91;
  *((void *)&v139[0] + 1) = 0xE100000000000000;
  if (v4)
  {
    *(void *)&v138[0] = 0;
    *((void *)&v138[0] + 1) = 0xE000000000000000;
    *(void *)&v137[0] = v4;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  else
  {
    unint64_t v6 = 0xE300000000000000;
    uint64_t v5 = 7104878;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8285;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  swift_release();
  long long v11 = v139[0];
  uint64_t v12 = *(void *)(v1 + 16);
  if (!v12)
  {
    uint64_t v18 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v18, v139);
    swift_bridgeObjectRelease();
    return 0;
  }
  char v13 = (void *)(v1 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v2 + 104) == 1 && *v13 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v2 + 105) == 1)
    {
      swift_retain();
LABEL_15:
      os_log_type_t v19 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v19, (uint64_t *)v139);
LABEL_16:
      swift_bridgeObjectRelease();
LABEL_17:
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_15;
  }
  uint64_t v14 = *(void *)(v12 + 16);
  RERigidBodyComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    float v15 = *(float *)(v2 + 172);
    BOOL v16 = v15 == 0.0;
    if (v15 == 0.0)
    {
      os_log_type_t v17 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v17, (uint64_t *)v139);
      RERigidBodyComponentIncrementVersion();
      LODWORD(v134) = 0;
    }
    else
    {
      int MotionType = RERigidBodyComponentGetMotionType();
      if (MotionType == 1)
      {
        LODWORD(v134) = 1;
      }
      else
      {
        LODWORD(v134) = MotionType;
        os_log_type_t v22 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v22, (uint64_t *)v139);
        RERigidBodyComponentSetMotionType();
      }
    }
    REMotionStateComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      v139[0] = v11;
      os_log_type_t v23 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v23, (uint64_t *)v139);
      REMotionStateComponentSetLinearVelocity();
      REMotionStateComponentSetAngularVelocity();
      RENetworkMarkComponentDirty();
    }
    RENetworkMarkComponentDirty();
  }
  else
  {
    LODWORD(v134) = 0;
    BOOL v16 = 1;
  }
  REAnimationComponentGetComponentType();
  uint64_t v24 = REEntityGetOrAddComponentByClass();
  if (!REEntityGetSceneNullable())
  {
    v139[0] = v11;
    os_log_type_t v29 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v29, (uint64_t *)v139);
LABEL_36:
    swift_bridgeObjectRelease();
    swift_release();
    return 1;
  }
  if (!RESceneGetECSManagerNullable())
  {
    v139[0] = v11;
    os_log_type_t v30 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v30, (uint64_t *)v139);
    goto LABEL_36;
  }
  uint64_t ServiceLocator = REECSManagerGetServiceLocator();
  uint64_t v26 = MEMORY[0x22A692220](ServiceLocator);
  if (!v26)
  {
    v139[0] = v11;
    os_log_type_t v31 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v31, (uint64_t *)v139);
    goto LABEL_36;
  }
  uint64_t v128 = v24;
  char v27 = *(unsigned char *)(v2 + 176);
  unint64_t v133 = (unint64_t)"e";
  unint64_t v129 = (unint64_t)"move by distance";
  uint64_t v130 = v26;
  if ((v27 & 1) != 0 || 0x800000022834D800 == 0x800000022834D820)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0) {
      goto LABEL_41;
    }
  }
  swift_beginAccess();
  uint64_t v33 = *(void *)(v2 + 192);
  if (v33)
  {
    BOOL v125 = v16;
    swift_retain();
    goto LABEL_43;
  }
LABEL_41:
  uint64_t v34 = Entity.rcSceneEntity.getter();
  if (!v34)
  {
    v139[0] = v11;
    os_log_type_t v62 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v62, (uint64_t *)v139);
    goto LABEL_16;
  }
  uint64_t v33 = v34;
  BOOL v125 = v16;
LABEL_43:
  uint64_t v35 = specialized HasHierarchy.parent.getter();
  if (!v35)
  {
    v139[0] = v11;
    os_log_type_t v61 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v61, (uint64_t *)v139);
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_17;
  }
  uint64_t v36 = v35;
  swift_retain();
  *(double *)v37.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v36, v33);
  simd_float4 v118 = (simd_float4)v38;
  simd_float4 v119 = (simd_float4)v37;
  simd_float4 v116 = (simd_float4)v40;
  simd_float4 v117 = (simd_float4)v39;
  swift_release();
  uint64_t v41 = one-time initialization token for identity;
  swift_retain();
  if (v41 != -1) {
    swift_once();
  }
  v126.i32[0] = static Transform.identity;
  long long v121 = xmmword_2681C7AC0;
  long long v122 = xmmword_2681C7AB0;
  *(double *)&long long v42 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v36, v33);
  long long v123 = v42;
  long long v124 = v43;
  float32x4_t v127 = v44;
  uint64_t v132 = v45;
  specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)&v121, (float32x4_t)v122, v126.f32[0]);
  REMakeSRTFromMatrix();
  float32x4_t v126 = v46;
  uint64_t v131 = v36;
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v47 = swift_release();
  MEMORY[0x270FA5388](v47);
  float32x4_t v114 = v126;
  v139[0] = v11;
  uint64_t v48 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v48, v139, partial apply for implicit closure #12 in __RKEntityTransformAction.perform(with:), &v113);
  swift_retain();
  specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v131, v33);
  REMakeSRTFromMatrix();
  float32x4_t v127 = v49;
  uint64_t v50 = swift_release();
  MEMORY[0x270FA5388](v50);
  float32x4_t v114 = v127;
  v139[0] = v11;
  uint64_t v51 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v51, v139, partial apply for implicit closure #13 in __RKEntityTransformAction.perform(with:), &v113);
  RETransformComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    v139[0] = v11;
    os_log_type_t v63 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v63, (uint64_t *)v139);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_17;
  }
  uint64_t v115 = v33;
  RETransformComponentGetLocalUnanimatedSRT();
  long long v121 = v53;
  long long v122 = (__int128)v52;
  *(_OWORD *)(v2 + 224) = v54;
  *(float32x4_t *)(v2 + 240) = v52;
  *(_OWORD *)(v2 + 208) = v53;
  long long v123 = v54;
  v139[0] = v11;
  uint64_t v55 = static os_log_type_t.debug.getter();
  uint64_t v56 = specialized InteractionsLogger.log(_:_:)(v55, v139, partial apply for implicit closure #15 in __RKEntityTransformAction.perform(with:), v2);
  char v57 = *(unsigned char *)(v2 + 128);
  uint64_t v120 = v3;
  if ((v57 & 1) == 0)
  {
    long long v124 = *(_OWORD *)(v2 + 112);
    BOOL v59 = v125;
    unint64_t v58 = v129;
    goto LABEL_60;
  }
  unint64_t v58 = v129;
  BOOL v59 = v125;
  if ((*(unsigned char *)(v2 + 176) & 1) != 0 || (v133 | 0x8000000000000000) == (v129 | 0x8000000000000000))
  {
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
  char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v56 = swift_bridgeObjectRelease();
  long long v124 = 0u;
  if (v60)
  {
LABEL_59:
    *(float32x2_t *)&long long v64 = simd_float4x4.transform(position:)(*(float32x4_t *)(v2 + 208), (float32x4_t)v119, (float32x4_t)v118, (float32x4_t)v117, (float32x4_t)v116);
    long long v124 = v64;
  }
LABEL_60:
  if (*(unsigned char *)(v2 + 160))
  {
    if ((*(unsigned char *)(v2 + 176) & 1) != 0 || (v133 | 0x8000000000000000) == (v58 | 0x8000000000000000))
    {
      uint64_t v56 = swift_bridgeObjectRelease();
    }
    else
    {
      char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v56 = swift_bridgeObjectRelease();
      if ((v65 & 1) == 0)
      {
        float32x4_t v66 = (float32x4_t)static simd_quatf.identity;
        goto LABEL_70;
      }
    }
    float32x4_t v67 = *(float32x4_t *)(v2 + 224);
    int32x4_t v68 = (int32x4_t)vnegq_f32(v67);
    int8x16_t v69 = (int8x16_t)vtrn2q_s32((int32x4_t)v67, vtrn1q_s32((int32x4_t)v67, v68));
    float32x4_t v70 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v68, 8uLL), *(float32x2_t *)v126.f32, 1), (float32x4_t)vextq_s8(v69, v69, 8uLL), v126.f32[0]);
    float32x4_t v71 = (float32x4_t)vrev64q_s32((int32x4_t)v67);
    v71.i32[0] = v68.i32[1];
    v71.i32[3] = v68.i32[2];
    float32x4_t v72 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v67, v126, 3), v71, v126, 2), v70);
    int8x16_t v73 = (int8x16_t)vmulq_f32(v72, v72);
    float32x2_t v74 = vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL));
    if (vaddv_f32(v74) == 0.0)
    {
      float32x4_t v66 = *(float32x4_t *)&zmmword_22830EC90[48];
    }
    else
    {
      unsigned __int32 v75 = vadd_f32(v74, (float32x2_t)vdup_lane_s32((int32x2_t)v74, 1)).u32[0];
      float32x2_t v76 = vrsqrte_f32((float32x2_t)v75);
      float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75, vmul_f32(v76, v76)));
      float32x4_t v66 = vmulq_n_f32(v72, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75, vmul_f32(v77, v77))).f32[0]);
    }
  }
  else
  {
    float32x4_t v66 = *(float32x4_t *)(v2 + 144);
  }
LABEL_70:
  float32x4_t v126 = v66;
  if ((*(unsigned char *)(v2 + 168) & 1) == 0)
  {
    unint64_t v79 = v58;
    int v81 = (const float *)(v2 + 164);
    float32x4_t v80 = vld1q_dup_f32(v81);
LABEL_78:
    v80.i32[3] = 0;
    goto LABEL_79;
  }
  if ((*(unsigned char *)(v2 + 176) & 1) != 0 || (v133 | 0x8000000000000000) == (v58 | 0x8000000000000000))
  {
    uint64_t v56 = swift_bridgeObjectRelease();
    goto LABEL_77;
  }
  char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v56 = swift_bridgeObjectRelease();
  if (v78)
  {
LABEL_77:
    unint64_t v79 = v58;
    *(float32x2_t *)v80.f32 = vmul_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)(v2 + 240));
    v80.f32[2] = v127.f32[2] * *(float *)(v2 + 248);
    goto LABEL_78;
  }
  unint64_t v79 = v58;
  float32x4_t v80 = (float32x4_t)xmmword_22830EC80;
LABEL_79:
  float32x4_t v127 = v80;
  MEMORY[0x270FA5388](v56);
  v112[1] = v124;
  float32x4_t v113 = v126;
  float32x4_t v114 = v82;
  v139[0] = v11;
  uint64_t v83 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v83, v139, partial apply for implicit closure #16 in __RKEntityTransformAction.perform(with:), v112);
  REMakeSRT();
  v138[0] = v84;
  v138[1] = v85;
  v138[2] = v86;
  if ((*(unsigned char *)(v2 + 176) & 1) != 0 || (v133 | 0x8000000000000000) == (v79 | 0x8000000000000000))
  {
    swift_bridgeObjectRelease();
    goto LABEL_84;
  }
  char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v87)
  {
LABEL_84:
    v152.columns[1] = v118;
    v152.columns[0] = v119;
    v152.columns[3] = v116;
    v152.columns[2] = v117;
    __invert_f4(v152);
    REMakeSRTFromMatrix();
    goto LABEL_85;
  }
  REMakeSRT();
LABEL_85:
  v139[0] = v88;
  v139[1] = v89;
  v139[2] = v90;
  specialized static RESRT.* infix(_:_:)((float32x2_t *)v139, (uint64_t)v138, (uint64_t)v136);
  v137[0] = v136[0];
  v137[1] = v136[1];
  v137[2] = v136[2];
  if (*(float *)(v2 + 172) == 0.0)
  {
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      if (RERigidBodyComponentGetRigidBody())
      {
        RERigidBodySleep();
        RENetworkMarkComponentDirty();
      }
    }
  }
  REFromToByAnimationDefaultParameters();
  double v91 = *(float *)(v2 + 172);
  RESRTInverse();
  v150[0] = v92;
  v150[1] = v93;
  v150[2] = v94;
  RESRTIdentity();
  v135[3] = v95;
  v135[4] = v96;
  v135[5] = v97;
  specialized static RESRT.* infix(_:_:)((float32x2_t *)v150, (uint64_t)v137, (uint64_t)v135);
  LOBYTE(v140[0]) = *(unsigned char *)(v2 + 177);
  LOBYTE(v148[0]) = *(unsigned char *)(v2 + 178);
  specialized static __RKEntityTransformAction.reEaseFunction(from:type:)(v140, (uint64_t)v147);
  outlined init with take of REEasingFunction?((uint64_t)v147, (uint64_t)v148);
  if (v149)
  {
    LOBYTE(v144) = 1;
    *((void *)&v144 + 1) = "Transform.transform";
    LOBYTE(v145) = 1;
    *((double *)&v145 + 1) = v91;
    if (REAssetManagerTimelineAssetCreateSRTAnimation())
    {
LABEL_93:
      *(void *)&long long v144 = 5;
      DWORD2(v144) = 4352;
      *(void *)&long long v145 = "SRTFROMTO";
      BYTE8(v145) = 0;
      *(void *)(v2 + 256) = REAnimationComponentPlay();
      *(unsigned char *)(v2 + 264) = 0;
      RERelease();
      if ((REEntityGetSelfEnabled() & 1) == 0)
      {
        MEMORY[0x22A68E740](*(void *)(v12 + 16), 0);
        RENetworkMarkEntityMetadataDirty();
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
        RENetworkMarkComponentDirty();
        MEMORY[0x22A68E740](*(void *)(v12 + 16), 1);
        RENetworkMarkEntityMetadataDirty();
      }
      RERenderOptionsComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      int VisibilityMode = RERenderOptionsComponentGetVisibilityMode();
      uint64_t v20 = 1;
      char v99 = 1;
      if (!VisibilityMode) {
        char v99 = REEntityGetSelfEnabled() ^ 1;
      }
      *(unsigned char *)(v2 + 352) = v99;
      uint64_t v100 = *(void *)(v2 + 96);
      char v101 = *(unsigned char *)(v2 + 104);
      *(void *)(v2 + 96) = 1;
      *(unsigned char *)(v2 + 104) = 1;
      *(void *)&long long v144 = v100;
      BYTE8(v144) = v101;
      __RKEntityAction.state.didset((uint64_t)&v144);
      uint64_t v102 = swift_allocObject();
      swift_weakInit();
      uint64_t v103 = swift_allocObject();
      *(void *)(v103 + 16) = v102;
      *(void *)(v103 + 24) = v14;
      *(_DWORD *)(v103 + 32) = v134;
      *(unsigned char *)(v103 + 36) = v59;
      *(void *)(v103 + 40) = v12;
      uint64_t v104 = *(void *)(v2 + 32);
      *(void *)(v2 + 32) = partial apply for specialized closure #1 in __RKEntityTransformAction.perform(with:);
      *(void *)(v2 + 40) = v103;
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v104);
      uint64_t v134 = type metadata accessor for Entity();
      v143 = &protocol witness table for Entity;
      double v142 = *(double *)&v134;
      v140[0] = v12;
      uint64_t v105 = swift_allocObject();
      swift_weakInit();
      swift_retain();
      specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v140, 0, (char **)&v144);
      uint64_t v106 = swift_allocObject();
      *(void *)(v106 + 16) = partial apply for closure #2 in __RKEntityTransformAction.perform(with:);
      *(void *)(v106 + 24) = v105;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
      unint64_t v133 = (unint64_t)&protocol conformance descriptor for Scene.Publisher<A>;
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
      uint64_t v107 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      uint64_t v130 = type metadata accessor for AnyCancellable();
      *((void *)&v145 + 1) = v130;
      uint64_t v146 = MEMORY[0x263EFDD10];
      swift_release();
      *(void *)&long long v144 = v107;
      outlined destroy of BodyTrackingComponent?((uint64_t)v140, &demangling cache variable for type metadata for EventSource?);
      swift_beginAccess();
      outlined assign with take of Cancellable?((uint64_t)&v144, v2 + 272);
      swift_endAccess();
      v143 = &protocol witness table for Entity;
      double v142 = *(double *)&v134;
      v140[0] = v12;
      uint64_t v108 = swift_allocObject();
      swift_weakInit();
      swift_retain();
      specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v140, 0, (char **)&v144);
      uint64_t v109 = swift_allocObject();
      *(void *)(v109 + 16) = partial apply for closure #2 in __RKEntityTransformAction.perform(with:);
      *(void *)(v109 + 24) = v108;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
      uint64_t v110 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      *((void *)&v145 + 1) = v130;
      uint64_t v146 = MEMORY[0x263EFDD10];
      swift_release();
      *(void *)&long long v144 = v110;
      outlined destroy of BodyTrackingComponent?((uint64_t)v140, &demangling cache variable for type metadata for EventSource?);
      swift_beginAccess();
      outlined assign with take of Cancellable?((uint64_t)&v144, v2 + 312);
      swift_endAccess();
      long long v144 = v11;
      os_log_type_t v111 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v111, (uint64_t *)&v144);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      return v20;
    }
    __break(1u);
  }
  long long v144 = v148[0];
  long long v145 = v148[1];
  LOBYTE(v140[0]) = 1;
  v140[1] = "Transform.transform";
  char v141 = 1;
  double v142 = v91;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTAnimation();
  if (result) {
    goto LABEL_93;
  }
  __break(1u);
  return result;
}

uint64_t implicit closure #12 in __RKEntityTransformAction.perform(with:)()
{
  _StringGuts.grow(_:)(25);
  v0._object = (void *)0x8000000228352970;
  v0._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v0);
  type metadata accessor for simd_quatf(0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t implicit closure #13 in __RKEntityTransformAction.perform(with:)()
{
  _StringGuts.grow(_:)(19);
  v0._object = (void *)0x8000000228352950;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  v1._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t implicit closure #15 in __RKEntityTransformAction.perform(with:)()
{
  _StringGuts.grow(_:)(62);
  v0._object = (void *)0x8000000228352910;
  v0._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  v1._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0xD000000000000015;
  v2._object = (void *)0x8000000228352930;
  String.append(_:)(v2);
  type metadata accessor for simd_quatf(0);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x616E696769726F20;
  v3._object = (void *)0xEF3D656C6163536CLL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  return 0;
}

uint64_t implicit closure #16 in __RKEntityTransformAction.perform(with:)()
{
  _StringGuts.grow(_:)(47);
  v0._countAndFlagsBits = 0x736E61725477656ELL;
  v0._object = (void *)0xEF3D6E6F6974616CLL;
  String.append(_:)(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  v1._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000002283528F0;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  type metadata accessor for simd_quatf(0);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x6C61635377656E20;
  v3._object = (void *)0xEA00000000003D65;
  String.append(_:)(v3);
  v4._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  return 0;
}

uint64_t specialized closure #1 in __RKEntityTransformAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = result + 272;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v8, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v8);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v7 + 312, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v7 + 312);
    swift_endAccess();
    swift_beginAccess();
    if (*(void *)(v7 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(unsigned char *)(v7 + 104) == 1) && *(void *)(v7 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(void *)(v7 + 256) = 0;
      *(unsigned char *)(v7 + 264) = 1;
    }
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a3 & 0x100000000) == 0 && a3 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    if (*(unsigned char *)(v7 + 352) == 1)
    {
      RERenderOptionsComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      if (RERenderOptionsComponentGetVisibilityMode() || (REEntityGetSelfEnabled() & 1) == 0)
      {
        if (REEntityGetSelfEnabled())
        {
          MEMORY[0x22A68E740](*(void *)(a4 + 16), 0);
          RENetworkMarkEntityMetadataDirty();
        }
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityTransformAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if ((*(unsigned char *)(result + 264) & 1) != 0 || *(void *)(v1 + 16) != *(void *)(result + 256))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      uint64_t v4 = *(void *)(v3 + 96);
      char v5 = *(unsigned char *)(v3 + 104);
      *(void *)(v3 + 96) = 2;
      *(unsigned char *)(v3 + 104) = 1;
      uint64_t v6 = v4;
      char v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t __RKEntityTransformAction.reversed()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v5 = *(unsigned int *)(v0 + 240);
  float v6 = *(float *)(v0 + 172);
  char v12 = 1;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v0 + 192);
  __int16 v11 = 0;
  type metadata accessor for __RKEntityTransformAction();
  swift_allocObject();
  swift_retain();
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(v8, v1, v2, 0, v4, v3, 0, v5, v6, 0.0, 0.0, &v12, (char *)&v11 + 1, (char *)&v11, 0, v7);
  swift_release();
  return v9;
}

uint64_t __RKEntityTransformAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v18 = *(void *)(v1 + 120);
  uint64_t v19 = *(void *)(v1 + 112);
  char v17 = *(unsigned char *)(v1 + 128);
  uint64_t v4 = *(void *)(v1 + 152);
  uint64_t v16 = *(void *)(v1 + 144);
  char v5 = *(unsigned char *)(v1 + 160);
  uint64_t v6 = *(unsigned int *)(v1 + 164);
  unsigned __int8 v7 = *(unsigned char *)(v1 + 168);
  float v8 = *(float *)(v1 + 172);
  char v22 = *(unsigned char *)(v1 + 176);
  char v21 = *(unsigned char *)(v1 + 177);
  char v20 = *(unsigned char *)(v1 + 178);
  char v9 = *(unsigned char *)(v1 + 179);
  float v10 = *(float *)(v1 + 180);
  float v11 = *(float *)(v1 + 184);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v1 + 192);
  uint64_t v13 = type metadata accessor for __RKEntityTransformAction();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v14 = specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(v3, v19, v18, v17, v16, v4, v5, v6 | ((unint64_t)v7 << 32), v8, v10, v11, &v22, &v21, &v20, v9, v12);
  uint64_t result = swift_release();
  a1[3] = v13;
  *a1 = v14;
  return result;
}

uint64_t __RKEntityTransformAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    uint64_t v18 = *(void *)(v1 + 120);
    uint64_t v19 = *(void *)(v1 + 112);
    char v5 = *(unsigned char *)(v1 + 128);
    uint64_t v6 = *(void *)(v1 + 144);
    uint64_t v7 = *(void *)(v1 + 152);
    char v8 = *(unsigned char *)(v1 + 160);
    uint64_t v9 = *(unsigned int *)(v1 + 164);
    unsigned __int8 v10 = *(unsigned char *)(v1 + 168);
    float v11 = *(float *)(v1 + 172);
    LOBYTE(v22) = *(unsigned char *)(v1 + 176);
    char v21 = *(unsigned char *)(v1 + 177);
    char v20 = *(unsigned char *)(v1 + 178);
    char v12 = *(unsigned char *)(v1 + 179);
    float v13 = *(float *)(v1 + 180);
    float v14 = *(float *)(v1 + 184);
    swift_beginAccess();
    uint64_t v15 = *(void *)(v1 + 192);
    type metadata accessor for __RKEntityTransformAction();
    swift_allocObject();
    swift_retain();
    uint64_t v16 = swift_retain();
    uint64_t v4 = specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(v16, v19, v18, v5, v6, v7, v8, v9 | ((unint64_t)v10 << 32), v11, v13, v14, (char *)&v22, &v21, &v20, v12, v15);
    swift_release();
  }
  else
  {
    __RKEntityTransformAction.copy(with:)(v23);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v22;
    }
    else {
      return 0;
    }
  }
  return v4;
}

void __RKEntityTransformAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityTransformAction.init(targetEntity:)()
{
}

uint64_t __RKEntityTransformAction.__ivar_destroyer()
{
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 272, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 312, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityTransformAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 272, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 312, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityTransformAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 272, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 312, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

double specialized static HasTransform.conversionMatrix<A, B>(from:to:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2 && a1 == a2)
    {
      *(void *)&double result = 1065353216;
      return result;
    }
    swift_retain();
    RETransformComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      RETransformComponentGetWorldMatrix4x4F();
      float32x4_t v21 = v4;
    }
    else
    {
      uint64_t v5 = specialized HasHierarchy.parent.getter();
      if (!v5)
      {
        swift_release();
        float32x4_t v21 = *(float32x4_t *)zmmword_22830EC90;
        if (a2)
        {
LABEL_12:
          swift_retain();
          RETransformComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            RETransformComponentGetWorldMatrix4x4F();
            simd_float4 v19 = v8;
            simd_float4 v20 = v7;
            simd_float4 v17 = v10;
            simd_float4 v18 = v9;
          }
          else
          {
            uint64_t v11 = specialized HasHierarchy.parent.getter();
            if (!v11)
            {
              swift_release();
              simd_float4x4 v16 = *(simd_float4x4 *)zmmword_22830EC90;
              goto LABEL_20;
            }
            *(double *)v12.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v11, 0);
            simd_float4 v19 = v13;
            simd_float4 v20 = v12;
            simd_float4 v17 = v15;
            simd_float4 v18 = v14;
            swift_release();
          }
          swift_release();
          v16.columns[1] = v19;
          v16.columns[0] = v20;
          v16.columns[3] = v17;
          v16.columns[2] = v18;
LABEL_20:
          simd_float4x4 v22 = __invert_f4(v16);
          *(void *)&double result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v22.columns[0], v21.f32[0]), (float32x4_t)v22.columns[1], *(float32x2_t *)v21.f32, 1), (float32x4_t)v22.columns[2], v21, 2), (float32x4_t)v22.columns[3], v21, 3).u64[0];
          return result;
        }
LABEL_19:
        simd_float4x4 v16 = *(simd_float4x4 *)zmmword_22830EC90;
        goto LABEL_20;
      }
      *(double *)v6.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v5, 0);
      float32x4_t v21 = v6;
      swift_release();
    }
    swift_release();
    if (a2) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
  *(void *)&double result = 1065353216;
  float32x4_t v21 = *(float32x4_t *)zmmword_22830EC90;
  if (a2) {
    goto LABEL_12;
  }
  return result;
}

uint64_t specialized __RKEntityTransformAction.init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, float a9, float a10, float a11, char *a12, char *a13, char *a14, char a15, uint64_t a16)
{
  char v18 = *a12;
  char v19 = *a13;
  char v20 = *a14;
  *(void *)(v16 + 192) = 0;
  *(_OWORD *)(v16 + 208) = 0u;
  *(_OWORD *)(v16 + 224) = 0u;
  *(_OWORD *)(v16 + 240) = xmmword_22830EC80;
  *(void *)(v16 + 256) = 0;
  *(unsigned char *)(v16 + 264) = 1;
  *(_OWORD *)(v16 + 272) = 0u;
  *(_OWORD *)(v16 + 288) = 0u;
  *(_OWORD *)(v16 + 304) = 0u;
  *(_OWORD *)(v16 + 320) = 0u;
  *(_OWORD *)(v16 + 336) = 0u;
  *(unsigned char *)(v16 + 352) = 0;
  *(void *)(v16 + 112) = a2;
  *(void *)(v16 + 120) = a3;
  *(unsigned char *)(v16 + 128) = a4 & 1;
  *(void *)(v16 + 144) = a5;
  *(void *)(v16 + 152) = a6;
  *(unsigned char *)(v16 + 160) = a7 & 1;
  *(_DWORD *)(v16 + 164) = a8;
  *(unsigned char *)(v16 + 168) = BYTE4(a8) & 1;
  *(float *)(v16 + 172) = a9;
  *(unsigned char *)(v16 + 176) = v18;
  *(unsigned char *)(v16 + 177) = v19;
  *(unsigned char *)(v16 + 178) = v20;
  *(float *)(v16 + 180) = a10;
  *(float *)(v16 + 184) = a11;
  *(unsigned char *)(v16 + 179) = a15;
  swift_beginAccess();
  *(void *)(v16 + 192) = a16;
  swift_retain();
  swift_release();
  return __RKEntityAction.init(targetEntity:)(a1);
}

unsigned char *specialized static __RKEntityTransformAction.reEaseFunction(from:type:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  long long v3 = 0uLL;
  char v4 = 1;
  long long v5 = 0uLL;
  switch(*result)
  {
    case 1:
      RECreateBackEase();
      goto LABEL_11;
    case 2:
      RECreateBounceEase();
      goto LABEL_11;
    case 3:
      RECreateCircleEase();
      goto LABEL_11;
    case 4:
      RECreateElasticEase();
      goto LABEL_11;
    case 5:
      RECreateExponentialEase();
      goto LABEL_11;
    case 6:
      RECreateHermiteEase();
      goto LABEL_11;
    case 7:
      RECreateLogarithmicEase();
      goto LABEL_11;
    case 8:
      RECreatePowerEase();
      goto LABEL_11;
    case 9:
      RECreateSineEase();
LABEL_11:
      v6.i32[0] = *(_DWORD *)((char *)&v8 + 9);
      *(_DWORD *)((char *)&v8 + 9) = vmovn_s16((int16x8_t)vmovl_u8(v6)).u32[0];
      double result = (unsigned char *)REEasingFunctionSetMode();
      char v4 = 0;
      long long v3 = v7;
      long long v5 = v8;
      break;
    default:
      break;
  }
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 32) = v4;
  return result;
}

uint64_t partial apply for implicit closure #12 in __RKEntityTransformAction.perform(with:)()
{
  return implicit closure #12 in __RKEntityTransformAction.perform(with:)();
}

uint64_t partial apply for implicit closure #13 in __RKEntityTransformAction.perform(with:)()
{
  return implicit closure #13 in __RKEntityTransformAction.perform(with:)();
}

uint64_t partial apply for implicit closure #15 in __RKEntityTransformAction.perform(with:)()
{
  return implicit closure #15 in __RKEntityTransformAction.perform(with:)();
}

uint64_t partial apply for implicit closure #16 in __RKEntityTransformAction.perform(with:)()
{
  return implicit closure #16 in __RKEntityTransformAction.perform(with:)();
}

__n128 specialized static RESRT.* infix(_:_:)@<Q0>(float32x2_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  result.n128_u64[0] = (unint64_t)vmul_f32(*a1, *(float32x2_t *)a2);
  float v3 = a1[1].f32[0];
  result.n128_f32[2] = v3 * *(float *)(a2 + 8);
  result.n128_u32[3] = 0;
  float32x4_t v5 = *(float32x4_t *)(a2 + 16);
  int32x4_t v6 = (int32x4_t)vnegq_f32(v5);
  int8x16_t v7 = (int8x16_t)vtrn2q_s32((int32x4_t)v5, vtrn1q_s32((int32x4_t)v5, v6));
  float32x4_t v8 = *(float32x4_t *)a1[2].f32;
  float32x4_t v9 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL), *(float32x2_t *)v8.f32, 1), (float32x4_t)vextq_s8(v7, v7, 8uLL), v8.f32[0]);
  float32x4_t v10 = (float32x4_t)vrev64q_s32((int32x4_t)v5);
  v10.i32[0] = v6.i32[1];
  v10.i32[3] = v6.i32[2];
  float32x4_t v11 = vmlaq_laneq_f32(vmulq_laneq_f32(v5, v8, 3), v10, v8, 2);
  float32x4_t v12 = vmulq_f32(v8, (float32x4_t)xmmword_22831EFE0);
  int32x4_t v13 = (int32x4_t)vnegq_f32(v12);
  float32x4_t v14 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v13, 8uLL), vmuls_lane_f32(*(float *)(a2 + 36), *a1, 1));
  int8x16_t v15 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, v13));
  float32x4_t v16 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
  v16.i32[0] = v13.i32[1];
  v16.i32[3] = v13.i32[2];
  float32x4_t v17 = vmlaq_n_f32(vmlaq_n_f32(v14, (float32x4_t)vextq_s8(v15, v15, 8uLL), *(float *)(a2 + 32) * COERCE_FLOAT(*a1)), v16, v3 * *(float *)(a2 + 40));
  int32x4_t v18 = (int32x4_t)vnegq_f32(v17);
  int8x16_t v19 = (int8x16_t)vtrn2q_s32((int32x4_t)v17, vtrn1q_s32((int32x4_t)v17, v18));
  float32x4_t v20 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 8uLL), *(float32x2_t *)v8.f32, 1), (float32x4_t)vextq_s8(v19, v19, 8uLL), v8.f32[0]);
  float32x4_t v21 = (float32x4_t)vrev64q_s32((int32x4_t)v17);
  v21.i32[0] = v18.i32[1];
  v21.i32[3] = v18.i32[2];
  float32x4_t v22 = vaddq_f32(*(float32x4_t *)a1[4].f32, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v17, v8, 3), v21, v8, 2), v20));
  v22.i32[3] = 0;
  *(__n128 *)a3 = result;
  *(float32x4_t *)(a3 + 16) = vaddq_f32(v11, v9);
  *(float32x4_t *)(a3 + 32) = v22;
  return result;
}

uint64_t outlined init with take of REEasingFunction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for REEasingFunction?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_227F17160()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227F17198()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for specialized closure #1 in __RKEntityTransformAction.perform(with:)()
{
  return specialized closure #1 in __RKEntityTransformAction.perform(with:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32), *(void *)(v0 + 40));
}

uint64_t partial apply for closure #2 in __RKEntityTransformAction.perform(with:)(uint64_t *a1)
{
  return closure #2 in __RKEntityTransformAction.perform(with:)(a1);
}

uint64_t sub_227F1721C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityMoveSelection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityMoveSelection] and conformance [A], &demangling cache variable for type metadata for [__RKEntityMoveSelection]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityMoveEase()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityMoveEase] and conformance [A], &demangling cache variable for type metadata for [__RKEntityMoveEase]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityMoveEaseType()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityMoveEaseType] and conformance [A], &demangling cache variable for type metadata for [__RKEntityMoveEaseType]);
}

uint64_t sub_227F17410@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 192);
  return swift_retain();
}

unsigned char *storeEnumTagSinglePayload for __RKEntityMoveSelection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227F1752CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveSelection()
{
  return &type metadata for __RKEntityMoveSelection;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityMoveEase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *__n128 result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227F17630);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEase()
{
  return &type metadata for __RKEntityMoveEase;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityMoveEaseType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227F17734);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEaseType()
{
  return &type metadata for __RKEntityMoveEaseType;
}

uint64_t method lookup function for __RKEntityTransformAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityTransformAction);
}

uint64_t dispatch thunk of __RKEntityTransformAction.relativeToEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of __RKEntityTransformAction.relativeToEntity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of __RKEntityTransformAction.relativeToEntity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of __RKEntityTransformAction.__allocating_init(targetEntity:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:relativeToEntity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, unint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void, unint64_t))(v8 + 1024))(a1, a2, a3, a4 & 1, a5, a6, a7 & 1, a8 | ((HIDWORD(a8) & 1) << 32));
}

unint64_t static AudioFileGroupResource.load(named:from:in:)(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 58;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  unint64_t v11 = specialized static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(a3, a4, a5);
  swift_bridgeObjectRelease();
  if (!v5)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 56) = type metadata accessor for AudioFileGroupResource();
    *(void *)(inited + 64) = &protocol witness table for AudioFileGroupResource;
    *(void *)(inited + 32) = v11;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
  }
  return v11;
}

void AudioFileGroupResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t AudioFileGroupResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

void *AnimationGroup.group.getter()
{
  if (*v0) {
    return (void *)swift_bridgeObjectRetain();
  }
  if (!*(void *)(v0[26] + 16)) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t ChildrenTimelineCount = RETimelineDefinitionGetChildrenTimelineCount();
  __n128 result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, ChildrenTimelineCount & ~(ChildrenTimelineCount >> 63), 0, MEMORY[0x263F8EE78]);
  os_log_type_t v30 = result;
  if (ChildrenTimelineCount < 0)
  {
    __break(1u);
  }
  else if (ChildrenTimelineCount)
  {
    for (uint64_t i = 0; i != ChildrenTimelineCount; ++i)
    {
      if (RETimelineDefinitionCreateChildTimelineRef())
      {
        RERetain();
        uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v4, (uint64_t)v27);
        uint64_t v5 = v28;
        uint64_t v6 = v29;
        __swift_project_boxed_opaque_existential_1(v27, v28);
        (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          uint64_t v8 = TimelineAsset;
          RETimelineDefinitionGetName();
          uint64_t v9 = String.init(cString:)();
          uint64_t v11 = v10;
          type metadata accessor for AnimationResource();
          float32x4_t v12 = (void *)swift_allocObject();
          _OWORD v12[2] = v8;
          v12[3] = v9;
          v12[4] = v11;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
          RERelease();
          AnimationResource.definition.getter((uint64_t *)&v24);
          swift_release();
          outlined init with take of BindableDataInternal(&v24, (uint64_t)v27);
          outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)&v24);
          int32x4_t v13 = v30;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            int32x4_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
            os_log_type_t v30 = v13;
          }
          unint64_t v15 = v13[2];
          unint64_t v14 = v13[3];
          if (v15 >= v14 >> 1) {
            os_log_type_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
          }
          uint64_t v16 = v25;
          uint64_t v17 = v26;
          uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v24, v25);
          __n128 v19 = MEMORY[0x270FA5388](v18);
          float32x4_t v21 = &v23[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
          (*(void (**)(unsigned char *, __n128))(v22 + 16))(v21, v19);
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, (uint64_t)v21, (uint64_t *)&v30, v16, v17);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        }
        else
        {
          RERelease();
        }
        RERelease();
      }
    }
    return v30;
  }
  return result;
}

uint64_t AnimationGroup.group.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AnimationGroup.group.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = AnimationGroup.group.getter();
  return AnimationGroup.group.modify;
}

uint64_t AnimationGroup.group.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  int v3 = (void *)a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void *v3 = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    void *v3 = v2;
  }
  return result;
}

uint64_t AnimationGroup.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 192);
  if (*(void *)(v0 + 168))
  {
    uint64_t v4 = *(void *)(v0 + 160);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v0 + 208) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v0 + 176), *(void *)(v0 + 184), *(unsigned char *)(v0 + 192));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v0 + 176), *(void *)(v0 + 184), *(unsigned char *)(v0 + 192));
    swift_retain();
    uint64_t v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path getter for AnimationGroup.name : AnimationGroup@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 176);
  long long v16 = *(_OWORD *)(a1 + 160);
  long long v17 = v3;
  long long v18 = *(_OWORD *)(a1 + 192);
  uint64_t v19 = *(void *)(a1 + 208);
  long long v4 = *(_OWORD *)(a1 + 112);
  v15[6] = *(_OWORD *)(a1 + 96);
  v15[7] = v4;
  long long v5 = *(_OWORD *)(a1 + 144);
  v15[8] = *(_OWORD *)(a1 + 128);
  v15[9] = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v15[3] = v6;
  long long v7 = *(_OWORD *)(a1 + 80);
  v15[4] = *(_OWORD *)(a1 + 64);
  v15[5] = v7;
  long long v8 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v8;
  unint64_t v9 = *((void *)&v16 + 1);
  long long v10 = v17;
  unsigned __int8 v11 = v18;
  if (*((void *)&v16 + 1))
  {
    uint64_t v12 = v16;
    outlined retain of AnimationGroup((uint64_t)v15);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v10, *((uint64_t *)&v10 + 1), v11);
    swift_retain();
  }
  else if (*(void *)(v19 + 16))
  {
    outlined retain of AnimationGroup((uint64_t)v15);
    outlined copy of BindTarget?(v10, *((uint64_t *)&v10 + 1), v11);
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v12 = String.init(cString:)();
    unint64_t v9 = v13;
  }
  else
  {
    outlined retain of AnimationGroup((uint64_t)v15);
    outlined copy of BindTarget?(v10, *((uint64_t *)&v10 + 1), v11);
    swift_retain();
    uint64_t v12 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v10, *((uint64_t *)&v10 + 1), v11);
  swift_release();
  uint64_t result = outlined release of AnimationGroup((uint64_t)v15);
  *a2 = v12;
  a2[1] = v9;
  return result;
}

uint64_t AnimationGroup.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 160) = a1;
  *(void *)(v2 + 168) = a2;
  return result;
}

uint64_t (*AnimationGroup.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  unint64_t v3 = *(void *)(v1 + 168);
  uint64_t v4 = *(void *)(v1 + 176);
  uint64_t v5 = *(void *)(v1 + 184);
  unsigned __int8 v6 = *(unsigned char *)(v1 + 192);
  if (v3)
  {
    uint64_t v7 = *(void *)(v1 + 160);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v4, v5, v6);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v1 + 208) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v1 + 176), *(void *)(v1 + 184), *(unsigned char *)(v1 + 192));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v7 = String.init(cString:)();
    unint64_t v3 = v8;
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v1 + 176), *(void *)(v1 + 184), *(unsigned char *)(v1 + 192));
    swift_retain();
    uint64_t v7 = 0;
    unint64_t v3 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v4, v5, v6);
  swift_release();
  *a1 = v7;
  a1[1] = v3;
  return AnimationGroup.name.modify;
}

uint64_t AnimationGroup.name.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 160) = v4;
    *(void *)(v3 + 168) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 160) = v4;
    *(void *)(v3 + 168) = v2;
  }
  return result;
}

uint64_t AnimationGroup.blendLayer.getter()
{
  if (*(unsigned char *)(v0 + 200) != 1) {
    return *(unsigned int *)(v0 + 196);
  }
  uint64_t result = *(void *)(*(void *)(v0 + 208) + 16);
  if (result) {
    return RETimelineDefinitionGetAnimationLayer();
  }
  return result;
}

uint64_t AnimationGroup.blendLayer.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 196) = result;
  *(unsigned char *)(v1 + 200) = 0;
  return result;
}

uint64_t *(*AnimationGroup.blendLayer.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 200) == 1)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 208) + 16);
    if (v3) {
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
    }
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 196);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return AnimationGroup.blendLayer.modify;
}

uint64_t *AnimationGroup.blendLayer.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  *(_DWORD *)(v1 + 196) = *((_DWORD *)result + 2);
  *(unsigned char *)(v1 + 200) = 0;
  return result;
}

uint64_t AnimationGroup.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  uint64_t v4 = *(void *)(v1 + 184);
  int v5 = *(unsigned __int8 *)(v1 + 192);
  if (v5 == 255)
  {
    if (*(void *)(*(void *)(v1 + 208) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      long long v8 = v11;
      char v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      char v9 = 0;
      long long v8 = xmmword_22831E960;
    }
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = v9;
  }
  else
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);

  return swift_release();
}

uint64_t key path setter for AnimationGroup.bindTarget : AnimationGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 176);
  uint64_t v6 = *(void *)(a2 + 184);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 192);
  outlined copy of BindTarget(*(void *)a1, v4, v7);
  uint64_t result = outlined consume of BindTarget?(v5, v6, v8);
  *(void *)(a2 + 176) = v3;
  *(void *)(a2 + 184) = v4;
  *(unsigned char *)(a2 + 192) = v7;
  return result;
}

uint64_t AnimationGroup.bindTarget.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 176), *(void *)(v1 + 184), *(unsigned char *)(v1 + 192));
  *(void *)(v1 + 176) = v2;
  *(void *)(v1 + 184) = v3;
  *(unsigned char *)(v1 + 192) = v4;
  return result;
}

uint64_t (*AnimationGroup.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  uint64_t v3 = *(void *)(v1 + 176);
  uint64_t v4 = *(void *)(v1 + 184);
  int v5 = *(unsigned __int8 *)(v1 + 192);
  uint64_t v6 = *(void *)(v1 + 208);
  if (v5 == 255)
  {
    if (*(void *)(v6 + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v7 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v7, v8, (uint64_t)&v12);
      swift_bridgeObjectRelease();
      long long v9 = v12;
      char v10 = v13;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      char v10 = 0;
      long long v9 = xmmword_22831E960;
    }
    *(_OWORD *)a1 = v9;
    *(unsigned char *)(a1 + 16) = v10;
  }
  else
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  swift_release();
  return AnimationGroup.bindTarget.modify;
}

uint64_t AnimationGroup.bindTarget.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(v2 + 176);
  uint64_t v7 = *(void *)(v2 + 184);
  unsigned __int8 v8 = *(unsigned char *)(v2 + 192);
  if (a2)
  {
    outlined copy of BindTarget(*(void *)a1, v3, v5);
    outlined consume of BindTarget?(v6, v7, v8);
    *(void *)(v2 + 176) = v4;
    *(void *)(v2 + 184) = v3;
    *(unsigned char *)(v2 + 192) = v5;
    return outlined consume of BindTarget(v4, v3, v5);
  }
  else
  {
    uint64_t result = outlined consume of BindTarget?(*(void *)(v2 + 176), *(void *)(v2 + 184), *(unsigned char *)(v2 + 192));
    *(void *)(v2 + 176) = v4;
    *(void *)(v2 + 184) = v3;
    *(unsigned char *)(v2 + 192) = v5;
  }
  return result;
}

uint64_t AnimationGroup.fillMode.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 202))
  {
    uint64_t result = *(void *)(*(void *)(v1 + 208) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(v1 + 201);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *AnimationGroup.fillMode.setter(unsigned __int8 *result)
{
  *(_WORD *)(v1 + 201) = *result;
  return result;
}

unsigned __int8 *(*AnimationGroup.fillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 202))
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 208) + 16);
    if (v3) {
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    LOBYTE(v3) = *(unsigned char *)(v1 + 201);
  }
  *(unsigned char *)(a1 + 8) = v3;
  return AnimationGroup.fillMode.modify;
}

unsigned __int8 *AnimationGroup.fillMode.modify(unsigned __int8 *result)
{
  *(_WORD *)(*(void *)result + 201) = result[8];
  return result;
}

uint64_t AnimationGroup.additive.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 203);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = *(void *)(*(void *)(v0 + 208) + 16);
  if (result) {
    return RETimelineDefinitionIsAdditive();
  }
  return result;
}

uint64_t AnimationGroup.additive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 203) = result;
  return result;
}

unsigned char *(*AnimationGroup.additive.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 203);
  if (v3 == 2)
  {
    uint64_t v4 = *(void *)(*(void *)(v1 + 208) + 16);
    if (v4) {
      LOBYTE(v4) = RETimelineDefinitionIsAdditive();
    }
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = v4;
  return AnimationGroup.additive.modify;
}

unsigned char *AnimationGroup.additive.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 203) = result[8];
  return result;
}

uint64_t AnimationGroup.trimStart.getter()
{
  long long v1 = *(_OWORD *)(v0 + 120);
  v8[6] = *(_OWORD *)(v0 + 104);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 152);
  long long v2 = *(_OWORD *)(v0 + 56);
  long long v8[2] = *(_OWORD *)(v0 + 40);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 88);
  _OWORD v8[4] = *(_OWORD *)(v0 + 72);
  void v8[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 24);
  v8[0] = *(_OWORD *)(v0 + 8);
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0) {
    return *(void *)&v8[0];
  }
  uint64_t v5 = *(void *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      uint64_t v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnimationGroup.trimStart.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  *(unsigned char *)(v2 + 17) = 0;
  return result;
}

void (*AnimationGroup.trimStart.modify(void *a1))(uint64_t *a1)
{
  long long v3 = malloc(0xB0uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  long long v5 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  v3[18] = *(void *)(v1 + 152);
  long long v6 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v6;
  long long v7 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v7;
  long long v8 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((unsigned char *)v3 + 9) & 1) == 0)
  {
    uint64_t v10 = *v3;
    char v11 = v3[1] & 1;
    goto LABEL_8;
  }
  if (!*(void *)(v3[18] + 16))
  {
LABEL_7:
    uint64_t v10 = 0;
    char v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
  if (!ClipStart)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  uint64_t v10 = *ClipStart;
  outlined release of TimelineClipProperties(v4);
  char v11 = 0;
LABEL_8:
  *(void *)(v4 + 152) = v10;
  *(unsigned char *)(v4 + 160) = v11;
  return AnimationGroup.trimStart.modify;
}

void AnimationGroup.trimStart.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 168);
  unsigned __int8 v3 = *(unsigned char *)(v1 + 160);
  *(void *)(v2 + 8) = *(void *)(v1 + 152);
  *(_WORD *)(v2 + 16) = v3;
  free((void *)v1);
}

uint64_t AnimationGroup.trimEnd.getter()
{
  long long v1 = *(_OWORD *)(v0 + 120);
  long long v14 = *(_OWORD *)(v0 + 104);
  long long v15 = v1;
  long long v16 = *(_OWORD *)(v0 + 136);
  uint64_t v17 = *(void *)(v0 + 152);
  long long v2 = *(_OWORD *)(v0 + 56);
  long long v10 = *(_OWORD *)(v0 + 40);
  long long v11 = v2;
  long long v3 = *(_OWORD *)(v0 + 88);
  long long v12 = *(_OWORD *)(v0 + 72);
  long long v13 = v3;
  long long v4 = *(_OWORD *)(v0 + 24);
  long long v8 = *(_OWORD *)(v0 + 8);
  long long v9 = v4;
  if ((BYTE9(v4) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      uint64_t v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnimationGroup.trimEnd.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 24) = result;
  *(unsigned char *)(v2 + 32) = a2 & 1;
  *(unsigned char *)(v2 + 33) = 0;
  return result;
}

void (*AnimationGroup.trimEnd.modify(void *a1))(uint64_t *a1)
{
  long long v3 = malloc(0xB0uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  long long v5 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  v3[18] = *(void *)(v1 + 152);
  long long v6 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v6;
  long long v7 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v7;
  long long v8 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((unsigned char *)v3 + 25) & 1) == 0)
  {
    uint64_t v10 = v3[2];
    char v11 = v3[3] & 1;
    goto LABEL_8;
  }
  if (!*(void *)(v3[18] + 16))
  {
LABEL_7:
    uint64_t v10 = 0;
    char v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
  if (!ClipEnd)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  uint64_t v10 = *ClipEnd;
  outlined release of TimelineClipProperties(v4);
  char v11 = 0;
LABEL_8:
  *(void *)(v4 + 152) = v10;
  *(unsigned char *)(v4 + 160) = v11;
  return AnimationGroup.trimEnd.modify;
}

void AnimationGroup.trimEnd.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 168);
  unsigned __int8 v3 = *(unsigned char *)(v1 + 160);
  *(void *)(v2 + 24) = *(void *)(v1 + 152);
  *(_WORD *)(v2 + 32) = v3;
  free((void *)v1);
}

uint64_t AnimationGroup.trimDuration.getter()
{
  long long v1 = *(_OWORD *)(v0 + 40);
  long long v2 = *(_OWORD *)(v0 + 120);
  long long v14 = *(_OWORD *)(v0 + 104);
  long long v15 = v2;
  long long v16 = *(_OWORD *)(v0 + 136);
  uint64_t v17 = *(void *)(v0 + 152);
  long long v3 = *(_OWORD *)(v0 + 56);
  long long v10 = v1;
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 88);
  long long v12 = *(_OWORD *)(v0 + 72);
  long long v13 = v4;
  long long v5 = *(_OWORD *)(v0 + 24);
  v9[0] = *(_OWORD *)(v0 + 8);
  v9[1] = v5;
  if ((BYTE9(v1) & 1) == 0) {
    return v10;
  }
  uint64_t v6 = *(void *)(v17 + 16);
  if (v6)
  {
    outlined retain of TimelineClipProperties((uint64_t)v9);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      uint64_t v6 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v9);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v9);
      return 0;
    }
  }
  return v6;
}

uint64_t AnimationGroup.trimDuration.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 40) = result;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  *(unsigned char *)(v2 + 49) = 0;
  return result;
}

void (*AnimationGroup.trimDuration.modify(void *a1))(uint64_t *a1)
{
  long long v3 = malloc(0xB0uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  long long v5 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  v3[18] = *(void *)(v1 + 152);
  long long v6 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v6;
  long long v7 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v7;
  long long v8 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((unsigned char *)v3 + 41) & 1) == 0)
  {
    uint64_t v10 = v3[4];
    char v11 = v3[5] & 1;
    goto LABEL_8;
  }
  if (!*(void *)(v3[18] + 16))
  {
LABEL_7:
    uint64_t v10 = 0;
    char v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
  if (!ClipDuration)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  uint64_t v10 = *ClipDuration;
  outlined release of TimelineClipProperties(v4);
  char v11 = 0;
LABEL_8:
  *(void *)(v4 + 152) = v10;
  *(unsigned char *)(v4 + 160) = v11;
  return AnimationGroup.trimDuration.modify;
}

void AnimationGroup.trimDuration.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 168);
  unsigned __int8 v3 = *(unsigned char *)(v1 + 160);
  *(void *)(v2 + 40) = *(void *)(v1 + 152);
  *(_WORD *)(v2 + 48) = v3;
  free((void *)v1);
}

double AnimationGroup.offset.getter()
{
  long long v1 = *(_OWORD *)(v0 + 120);
  long long v12 = *(_OWORD *)(v0 + 104);
  long long v13 = v1;
  long long v14 = *(_OWORD *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 152);
  long long v2 = *(_OWORD *)(v0 + 56);
  long long v8[2] = *(_OWORD *)(v0 + 40);
  long long v9 = v2;
  long long v3 = *(_OWORD *)(v0 + 88);
  long long v10 = *(_OWORD *)(v0 + 72);
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 24);
  v8[0] = *(_OWORD *)(v0 + 8);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationGroup.offset.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
  *(unsigned char *)(v1 + 64) = 0;
}

void (*AnimationGroup.offset.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  double v5 = v3 + 19;
  v3[20] = v1;
  long long v6 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  v3[18] = *(void *)(v1 + 152);
  long long v7 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v7;
  long long v8 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v8;
  long long v9 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v9;
  if (v3[7])
  {
    uint64_t v10 = 0;
    if (*(void *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipOffset();
        uint64_t v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    uint64_t v10 = v3[6];
  }
  void *v5 = v10;
  return AnimationGroup.offset.modify;
}

void AnimationGroup.offset.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[20];
  *(void *)(v2 + 56) = v1[19];
  *(unsigned char *)(v2 + 64) = 0;
  free(v1);
}

double AnimationGroup.delay.getter()
{
  long long v1 = *(_OWORD *)(v0 + 120);
  long long v11 = *(_OWORD *)(v0 + 104);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 136);
  uint64_t v14 = *(void *)(v0 + 152);
  long long v2 = *(_OWORD *)(v0 + 56);
  long long v8[2] = *(_OWORD *)(v0 + 40);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 88);
  long long v9 = *(_OWORD *)(v0 + 72);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 24);
  v8[0] = *(_OWORD *)(v0 + 8);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationGroup.delay.setter(double a1)
{
  *(double *)(v1 + 72) = a1;
  *(unsigned char *)(v1 + 80) = 0;
}

void (*AnimationGroup.delay.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  double v5 = v3 + 19;
  v3[20] = v1;
  long long v6 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  v3[18] = *(void *)(v1 + 152);
  long long v7 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v7;
  long long v8 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v8;
  long long v9 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v9;
  if (v3[9])
  {
    uint64_t v10 = 0;
    if (*(void *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipDelay();
        uint64_t v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    uint64_t v10 = v3[8];
  }
  void *v5 = v10;
  return AnimationGroup.delay.modify;
}

void AnimationGroup.delay.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[20];
  *(void *)(v2 + 72) = v1[19];
  *(unsigned char *)(v2 + 80) = 0;
  free(v1);
}

float AnimationGroup.speed.getter()
{
  long long v1 = *(_OWORD *)(v0 + 120);
  long long v11 = *(_OWORD *)(v0 + 104);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 136);
  uint64_t v14 = *(void *)(v0 + 152);
  long long v2 = *(_OWORD *)(v0 + 56);
  long long v8[2] = *(_OWORD *)(v0 + 40);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 88);
  long long v9 = *(_OWORD *)(v0 + 72);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 24);
  v8[0] = *(_OWORD *)(v0 + 8);
  v8[1] = v4;
  if ((v10 & 1) == 0) {
    return *((float *)&v9 + 3);
  }
  float v5 = 1.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      float v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationGroup.speed.setter(float a1)
{
  *(float *)(v1 + 84) = a1;
  *(unsigned char *)(v1 + 88) = 0;
}

void (*AnimationGroup.speed.modify(void *a1))(uint64_t *a1)
{
  long long v3 = (char *)malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  float v5 = (float *)(v3 + 160);
  long long v6 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  *((void *)v3 + 18) = *(void *)(v1 + 152);
  *((void *)v3 + 19) = v1;
  long long v7 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v7;
  long long v8 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v8;
  long long v9 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v9;
  if (v3[80])
  {
    float v10 = 1.0;
    if (*(void *)(*((void *)v3 + 18) + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipSpeed();
        float v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    float v10 = *((float *)v3 + 19);
  }
  float *v5 = v10;
  return AnimationGroup.speed.modify;
}

void AnimationGroup.speed.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 152);
  *(_DWORD *)(v2 + 84) = *(_DWORD *)(v1 + 160);
  *(unsigned char *)(v2 + 88) = 0;
  free((void *)v1);
}

void AnimationGroup.repeatMode.getter(unsigned char *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 120);
  long long v11 = *(_OWORD *)(v1 + 104);
  long long v12 = v3;
  long long v13 = *(_OWORD *)(v1 + 136);
  uint64_t v14 = *(void *)(v1 + 152);
  long long v4 = *(_OWORD *)(v1 + 56);
  _OWORD v9[2] = *(_OWORD *)(v1 + 40);
  void v9[3] = v4;
  long long v5 = *(_OWORD *)(v1 + 88);
  v9[4] = *(_OWORD *)(v1 + 72);
  long long v10 = v5;
  long long v6 = *(_OWORD *)(v1 + 24);
  v9[0] = *(_OWORD *)(v1 + 8);
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    uint64_t v7 = *(void *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        unsigned int ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

unsigned char *AnimationGroup.repeatMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 89) = *result;
  return result;
}

void (*AnimationGroup.repeatMode.modify(void *a1))(uint64_t *a1)
{
  long long v3 = (unsigned __int8 *)malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  long long v5 = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 136);
  *((void *)v3 + 18) = *(void *)(v1 + 152);
  *((void *)v3 + 19) = v1;
  long long v6 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 40);
  *((_OWORD *)v3 + 3) = v6;
  long long v7 = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 72);
  *((_OWORD *)v3 + 5) = v7;
  long long v8 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v8;
  LODWORD(v9) = v3[81];
  if (v9 == 4)
  {
    uint64_t v9 = *(void *)(*((void *)v3 + 18) + 16);
    if (v9)
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        unsigned int ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v9) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties(v4);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v9) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(unsigned char *)(v4 + 160) = v9;
  return AnimationGroup.repeatMode.modify;
}

void AnimationGroup.repeatMode.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *(unsigned char *)(*(void *)(v1 + 152) + 89) = *(unsigned char *)(v1 + 160);
  free((void *)v1);
}

double AnimationGroup.duration.getter()
{
  uint64_t v0 = AnimationGroup.group.getter();
  uint64_t v1 = v0[2];
  if (v1)
  {
    uint64_t v2 = (uint64_t)(v0 + 4);
    double v3 = 0.0;
    do
    {
      outlined init with copy of __REAssetService(v2, (uint64_t)v8);
      uint64_t v4 = v9;
      uint64_t v5 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      double v6 = (*(double (**)(uint64_t, uint64_t))(v5 + 272))(v4, v5);
      if (v3 <= v6) {
        double v3 = v6;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v2 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0.0;
  }
  return v3;
}

uint64_t AnimationGroup.init(group:name:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, char a13, uint64_t a14, char a15)
{
  char v22 = a7 & 1;
  char v23 = *a4;
  char v32 = *a5;
  type metadata accessor for TimelineDefinition();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 0;
  v35[0] = 0;
  v35[1] = 0;
  char v36 = -1;
  v37[0] = v23;
  char v34 = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v35, 0, v37, &v34, a6, v22, (uint64_t)v38, a10, a11, a12, a8, a13 & 1, a14, a15 & 1);
  *(_OWORD *)(a9 + 104) = v38[6];
  long long v25 = v38[8];
  *(_OWORD *)(a9 + 120) = v38[7];
  *(_OWORD *)(a9 + 136) = v25;
  long long v26 = v38[3];
  *(_OWORD *)(a9 + 40) = v38[2];
  *(_OWORD *)(a9 + 56) = v26;
  long long v27 = v38[5];
  *(_OWORD *)(a9 + 72) = v38[4];
  *(_OWORD *)(a9 + 88) = v27;
  long long v28 = v38[1];
  *(_OWORD *)(a9 + 8) = v38[0];
  LOBYTE(v35[0]) = 0;
  v37[0] = 0;
  *(void *)a9 = a1;
  uint64_t v29 = v39;
  *(_OWORD *)(a9 + 24) = v28;
  *(void *)(a9 + 152) = v29;
  *(void *)(a9 + 160) = a2;
  *(void *)(a9 + 176) = 0;
  *(void *)(a9 + 184) = 0;
  *(void *)(a9 + 168) = a3;
  *(unsigned char *)(a9 + 192) = -1;
  *(_DWORD *)(a9 + 196) = 0;
  *(unsigned char *)(a9 + 200) = 0;
  *(unsigned char *)(a9 + 201) = v32;
  *(unsigned char *)(a9 + 202) = 0;
  *(unsigned char *)(a9 + 203) = 0;
  *(void *)(a9 + 208) = v24;

  return swift_bridgeObjectRetain();
}

uint64_t AnimationGroup.init(_:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TimelineDefinition();
  uint64_t v2 = swift_allocObject();
  swift_retain_n();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    uint64_t RootTimeline = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      uint64_t ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(void *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        int TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          uint64_t ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          uint64_t v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(void *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            uint64_t v9 = 0;
            uint64_t ClipSourceRef = 0;
            unint64_t v10 = 0;
          }
          else
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            *(void *)(v8 + 16) = 0;
          }
          char v14 = 2;
          char v13 = 1;
          uint64_t v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        uint64_t ClipSourceRef = String.init(cString:)();
        unint64_t v10 = v11;
      }
      else
      {
        swift_retain();
        unint64_t v10 = 0xE000000000000000;
      }
      uint64_t v12 = swift_allocObject();
      char v13 = 0;
      char v14 = 0;
      *(void *)(v12 + 16) = 0;
      uint64_t v8 = v2;
      uint64_t v9 = v2;
LABEL_14:
      unsigned __int8 v16 = v13;
      char v15 = v13;
      swift_retain();
      swift_release();
      uint64_t result = swift_release();
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 17) = 1;
      *(void *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 33) = 1;
      *(void *)(a1 + 40) = 0;
      *(unsigned char *)(a1 + 48) = 0;
      *(unsigned char *)(a1 + 49) = 1;
      *(void *)(a1 + 56) = 0;
      *(unsigned char *)(a1 + 64) = 1;
      *(void *)(a1 + 72) = 0;
      *(unsigned char *)(a1 + 80) = 1;
      *(_DWORD *)(a1 + 84) = 0;
      *(unsigned char *)(a1 + 88) = 1;
      *(unsigned char *)(a1 + 89) = 4;
      *(void *)(a1 + 96) = v9;
      *(void *)(a1 + 104) = ClipSourceRef;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
      *(void *)(a1 + 112) = v10;
      *(unsigned char *)(a1 + 136) = -1;
      *(_DWORD *)(a1 + 140) = 0;
      *(_WORD *)(a1 + 144) = v16;
      *(unsigned char *)(a1 + 146) = v15;
      *(unsigned char *)(a1 + 147) = v14;
      *(void *)(a1 + 152) = v12;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(unsigned char *)(a1 + 192) = -1;
      *(_DWORD *)(a1 + 196) = 0;
      *(unsigned char *)(a1 + 200) = 1;
      *(unsigned char *)(a1 + 201) = 0;
      *(unsigned char *)(a1 + 202) = 1;
      *(unsigned char *)(a1 + 203) = 2;
      *(void *)(a1 + 208) = v8;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

void *AnimationGroup.createResource()()
{
  long long v1 = *(_OWORD *)(v0 + 176);
  long long v94 = *(_OWORD *)(v0 + 160);
  long long v95 = v1;
  long long v96 = *(_OWORD *)(v0 + 192);
  uint64_t v97 = *(void *)(v0 + 208);
  long long v2 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)&v93[96] = *(_OWORD *)(v0 + 96);
  *(_OWORD *)&v93[112] = v2;
  long long v3 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)&v93[128] = *(_OWORD *)(v0 + 128);
  *(_OWORD *)&v93[144] = v3;
  long long v4 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)&v93[32] = *(_OWORD *)(v0 + 32);
  *(_OWORD *)&v93[48] = v4;
  long long v5 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)&v93[64] = *(_OWORD *)(v0 + 64);
  *(_OWORD *)&v93[80] = v5;
  long long v6 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)long long v93 = *(_OWORD *)v0;
  *(_OWORD *)&v93[16] = v6;
  long long v7 = v94;
  long long v8 = v95;
  unsigned __int8 v9 = v96;
  char v10 = BYTE8(v96);
  uint64_t v11 = v97;
  if (*((void *)&v94 + 1))
  {
    char v58 = BYTE11(v96);
    char v60 = BYTE10(v96);
    char v62 = BYTE9(v96);
    int v64 = DWORD1(v96);
    outlined retain of AnimationGroup((uint64_t)v93);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v8, *((uint64_t *)&v8 + 1), v9);
    swift_retain();
  }
  else
  {
    if (v96 == 255) {
      char v29 = BYTE8(v96);
    }
    else {
      char v29 = 0;
    }
    if ((v29 & BYTE10(v96)) == 1 && BYTE11(v96) == 2 && !*(void *)v93)
    {
      long long v85 = *(_OWORD *)&v93[104];
      long long v86 = *(_OWORD *)&v93[120];
      long long v87 = *(_OWORD *)&v93[136];
      *(void *)&long long v88 = *(void *)&v93[152];
      long long v81 = *(_OWORD *)&v93[40];
      long long v82 = *(_OWORD *)&v93[56];
      long long v83 = *(_OWORD *)&v93[72];
      long long v84 = *(_OWORD *)&v93[88];
      long long v79 = *(_OWORD *)&v93[8];
      long long v80 = *(_OWORD *)&v93[24];
      if (!TimelineClipProperties.isClipped.getter()) {
        return TimelineDefinition.resource.getter();
      }
      long long v85 = *(_OWORD *)&v93[104];
      long long v86 = *(_OWORD *)&v93[120];
      long long v87 = *(_OWORD *)&v93[136];
      *(void *)&long long v88 = *(void *)&v93[152];
      long long v81 = *(_OWORD *)&v93[40];
      long long v82 = *(_OWORD *)&v93[56];
      long long v83 = *(_OWORD *)&v93[72];
      long long v84 = *(_OWORD *)&v93[88];
      long long v79 = *(_OWORD *)&v93[8];
      long long v80 = *(_OWORD *)&v93[24];
      if ((TimelineClipProperties.isModified.getter() & 1) == 0) {
        return TimelineDefinition.resource.getter();
      }
      long long v85 = *(_OWORD *)&v93[104];
      long long v86 = *(_OWORD *)&v93[120];
      long long v87 = *(_OWORD *)&v93[136];
      *(void *)&long long v88 = *(void *)&v93[152];
      long long v81 = *(_OWORD *)&v93[40];
      long long v82 = *(_OWORD *)&v93[56];
      long long v83 = *(_OWORD *)&v93[72];
      long long v84 = *(_OWORD *)&v93[88];
      long long v79 = *(_OWORD *)&v93[8];
      long long v80 = *(_OWORD *)&v93[24];
      return (void *)TimelineClipProperties.createClip()();
    }
    char v58 = BYTE11(v96);
    char v60 = BYTE10(v96);
    char v62 = BYTE9(v96);
    int v64 = DWORD1(v96);
    if (*(void *)(v97 + 16))
    {
      outlined retain of AnimationGroup((uint64_t)v93);
      outlined copy of BindTarget?(v8, *((uint64_t *)&v8 + 1), v9);
      swift_retain();
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of AnimationGroup((uint64_t)v93);
      outlined copy of BindTarget?(v8, *((uint64_t *)&v8 + 1), v9);
      swift_retain();
    }
  }
  outlined consume of BindTarget?(v8, *((uint64_t *)&v8 + 1), v9);
  swift_release();
  outlined release of AnimationGroup((uint64_t)v93);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t TimelineGroup = RETimelineDefinitionCreateTimelineGroup();
  swift_release();
  long long v79 = v7;
  long long v80 = v8;
  LOBYTE(v81) = v9;
  DWORD1(v81) = v64;
  BYTE8(v81) = v10;
  BYTE9(v81) = v62;
  BYTE10(v81) = v60;
  BYTE11(v81) = v58;
  *(void *)&long long v82 = v11;
  uint64_t v65 = TimelineGroup;
  TimelineBaseProperties.writeProperties(_:)((Swift::OpaquePointer)TimelineGroup);
  uint64_t v13 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v13, (uint64_t)&v79);
  uint64_t v14 = *((void *)&v80 + 1);
  uint64_t v15 = v81;
  __swift_project_boxed_opaque_existential_1(&v79, *((uint64_t *)&v80 + 1));
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
  long long v89 = v94;
  long long v90 = v95;
  long long v91 = v96;
  uint64_t v92 = v97;
  long long v85 = *(_OWORD *)&v93[96];
  long long v86 = *(_OWORD *)&v93[112];
  long long v87 = *(_OWORD *)&v93[128];
  long long v88 = *(_OWORD *)&v93[144];
  long long v81 = *(_OWORD *)&v93[32];
  long long v82 = *(_OWORD *)&v93[48];
  long long v83 = *(_OWORD *)&v93[64];
  long long v84 = *(_OWORD *)&v93[80];
  long long v79 = *(_OWORD *)v93;
  long long v80 = *(_OWORD *)&v93[16];
  unsigned __int8 v16 = AnimationGroup.group.getter();
  uint64_t v17 = v16[2];
  if (v17)
  {
    uint64_t v18 = (uint64_t)(v16 + 4);
    while (1)
    {
      outlined init with copy of __REAssetService(v18, (uint64_t)&v79);
      outlined init with copy of __REAssetService((uint64_t)&v79, (uint64_t)v78);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinitionInternal);
      if (!swift_dynamicCast()) {
        break;
      }
      outlined init with take of BindableDataInternal(v76, (uint64_t)&v66);
      uint64_t v19 = *((void *)&v67 + 1);
      uint64_t v20 = v68;
      __swift_project_boxed_opaque_existential_1(&v66, *((uint64_t *)&v67 + 1));
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
      RETimelineDefinitionCreateFromTimeline();
      RETimelineDefinitionAddChildTimeline();
      RERelease();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
      v18 += 40;
      if (!--v17) {
        goto LABEL_7;
      }
    }
    uint64_t v77 = 0;
    memset(v76, 0, sizeof(v76));
    outlined destroy of AnimationDefinitionInternal?((uint64_t)v76);
    swift_bridgeObjectRelease();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    outlined init with copy of __REAssetService((uint64_t)&v79, (uint64_t)&v66);
    type metadata accessor for OS_os_log();
    char v32 = static OS_os_log.default.getter();
    os_log_type_t v33 = v31;
    if (os_log_type_enabled(v32, v31))
    {
      char v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      v78[0] = v35;
      *(_DWORD *)char v34 = 136315138;
      uint64_t v36 = *((void *)&v67 + 1);
      uint64_t v37 = v68;
      __swift_project_boxed_opaque_existential_1(&v66, *((uint64_t *)&v67 + 1));
      uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
      *(void *)&v76[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
      _os_log_impl(&dword_227DD2000, v32, v33, "Animation group could not create resource for timeline %s.", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v35, -1, -1);
      MEMORY[0x22A696500](v34, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v66);
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
    RERelease();
    return 0;
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    long long v85 = *(_OWORD *)&v93[104];
    long long v86 = *(_OWORD *)&v93[120];
    long long v87 = *(_OWORD *)&v93[136];
    *(void *)&long long v88 = *(void *)&v93[152];
    long long v81 = *(_OWORD *)&v93[40];
    long long v82 = *(_OWORD *)&v93[56];
    long long v83 = *(_OWORD *)&v93[72];
    long long v84 = *(_OWORD *)&v93[88];
    long long v79 = *(_OWORD *)&v93[8];
    long long v80 = *(_OWORD *)&v93[24];
    if (TimelineClipProperties.isClipped.getter())
    {
      uint64_t v61 = *(void *)&v93[120];
      uint64_t v63 = *(void *)&v93[112];
      uint64_t v59 = *(void *)&v93[128];
      int v56 = *(_DWORD *)&v93[140];
      char v57 = v93[136];
      char v54 = v93[145];
      char v55 = v93[144];
      char v52 = v93[147];
      char v53 = v93[146];
      uint64_t v51 = *(void *)&v93[152];
      int v49 = *(_DWORD *)&v93[84];
      char v50 = v93[89];
      char v48 = v93[88];
      uint64_t v47 = *(void *)&v93[72];
      char v46 = v93[80];
      uint64_t v45 = *(void *)&v93[56];
      char v44 = v93[64];
      char v40 = v93[49];
      char v41 = v93[48];
      uint64_t v21 = *(void *)&v93[24];
      char v22 = v93[32];
      char v23 = v93[33];
      uint64_t v24 = *(void *)&v93[8];
      char v25 = v93[16];
      char v26 = v93[17];
      uint64_t v42 = *(void *)&v93[40];
      uint64_t v43 = *(void *)&v93[104];
      type metadata accessor for TimelineDefinition();
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v65;
      outlined retain of TimelineClipProperties((uint64_t)&v93[8]);
      RERetain();
      swift_release();
      *(void *)&long long v66 = v24;
      BYTE8(v66) = v25;
      BYTE9(v66) = v26;
      *(void *)&long long v67 = v21;
      BYTE8(v67) = v22;
      BYTE9(v67) = v23;
      *(void *)&long long v68 = v42;
      BYTE8(v68) = v41;
      BYTE9(v68) = v40;
      *(void *)&long long v69 = v45;
      BYTE8(v69) = v44;
      *(void *)&long long v70 = v47;
      BYTE8(v70) = v46;
      HIDWORD(v70) = v49;
      LOBYTE(v71) = v48;
      BYTE1(v71) = v50;
      *((void *)&v71 + 1) = v27;
      *(void *)&long long v72 = v43;
      *((void *)&v72 + 1) = v63;
      *(void *)&long long v73 = v61;
      *((void *)&v73 + 1) = v59;
      LOBYTE(v74) = v57;
      DWORD1(v74) = v56;
      BYTE8(v74) = v55;
      BYTE9(v74) = v54;
      BYTE10(v74) = v53;
      BYTE11(v74) = v52;
      uint64_t v75 = v51;
      *(void *)&long long v88 = v51;
      long long v86 = v73;
      long long v87 = v74;
      long long v79 = v66;
      long long v80 = v67;
      long long v84 = v71;
      long long v85 = v72;
      long long v82 = v69;
      long long v83 = v70;
      long long v81 = v68;
      if (v65)
      {
        outlined retain of TimelineClipProperties((uint64_t)&v66);
        swift_retain();
        closure #1 in TimelineClipProperties.createClip()((uint64_t)&v79, v78);
        swift_release();
        outlined release of TimelineClipProperties((uint64_t)&v66);
        outlined release of TimelineClipProperties((uint64_t)&v66);
        long long v28 = (void *)v78[0];
      }
      else
      {
        outlined release of TimelineClipProperties((uint64_t)&v66);
        long long v28 = 0;
      }
    }
    else
    {
      type metadata accessor for TimelineDefinition();
      *(void *)(swift_allocObject() + 16) = v65;
      RERetain();
      long long v28 = TimelineDefinition.resource.getter();
      swift_setDeallocating();
      RERelease();
      swift_deallocClassInstance();
    }
    RERelease();
    return v28;
  }
}

uint64_t AnimationGroup.group_.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnimationGroup.group_.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *long long v1 = a1;
  return result;
}

uint64_t (*AnimationGroup.group_.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return AnimationGroup.group.modify;
}

uint64_t protocol witness for AnimationDefinition.name.getter in conformance AnimationGroup()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 192);
  if (*(void *)(v0 + 168))
  {
    uint64_t v4 = *(void *)(v0 + 160);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v0 + 208) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v0 + 176), *(void *)(v0 + 184), *(unsigned char *)(v0 + 192));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v0 + 176), *(void *)(v0 + 184), *(unsigned char *)(v0 + 192));
    swift_retain();
    uint64_t v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t protocol witness for AnimationDefinition.name.setter in conformance AnimationGroup(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 160) = a1;
  *(void *)(v2 + 168) = a2;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance AnimationGroup(uint64_t **a1))()
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)AnimationGroup.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.getter in conformance AnimationGroup()
{
  if (*(unsigned char *)(v0 + 200) != 1) {
    return *(unsigned int *)(v0 + 196);
  }
  uint64_t result = *(void *)(*(void *)(v0 + 208) + 16);
  if (result) {
    return RETimelineDefinitionGetAnimationLayer();
  }
  return result;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.setter in conformance AnimationGroup(uint64_t result)
{
  *(_DWORD *)(v1 + 196) = result;
  *(unsigned char *)(v1 + 200) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance AnimationGroup(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.blendLayer.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.fillMode.getter in conformance AnimationGroup@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 202))
  {
    uint64_t result = *(void *)(*(void *)(v1 + 208) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(v1 + 201);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance AnimationGroup(unsigned __int8 *result)
{
  *(_WORD *)(v1 + 201) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance AnimationGroup(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.fillMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.setter in conformance AnimationGroup(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 176), *(void *)(v1 + 184), *(unsigned char *)(v1 + 192));
  *(void *)(v1 + 176) = v2;
  *(void *)(v1 + 184) = v3;
  *(unsigned char *)(v1 + 192) = v4;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance AnimationGroup(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance AnimationGroup()
{
  return AnimationGroup.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance AnimationGroup(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  *(unsigned char *)(v2 + 17) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance AnimationGroup(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.trimStart.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance AnimationGroup()
{
  return AnimationGroup.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance AnimationGroup(uint64_t result, char a2)
{
  *(void *)(v2 + 24) = result;
  *(unsigned char *)(v2 + 32) = a2 & 1;
  *(unsigned char *)(v2 + 33) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance AnimationGroup(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.trimEnd.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance AnimationGroup()
{
  return AnimationGroup.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance AnimationGroup(uint64_t result, char a2)
{
  *(void *)(v2 + 40) = result;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  *(unsigned char *)(v2 + 49) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance AnimationGroup(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.trimDuration.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.offset.setter in conformance AnimationGroup(double a1)
{
  *(double *)(v1 + 56) = a1;
  *(unsigned char *)(v1 + 64) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance AnimationGroup(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.offset.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.delay.setter in conformance AnimationGroup(double a1)
{
  *(double *)(v1 + 72) = a1;
  *(unsigned char *)(v1 + 80) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance AnimationGroup(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.delay.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.speed.setter in conformance AnimationGroup(float a1)
{
  *(float *)(v1 + 84) = a1;
  *(unsigned char *)(v1 + 88) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance AnimationGroup(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.speed.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned char *protocol witness for AnimationDefinition.repeatMode.setter in conformance AnimationGroup(unsigned char *result)
{
  *(unsigned char *)(v1 + 89) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance AnimationGroup(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationGroup.repeatMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void *protocol witness for AnimationDefinitionInternal.generate() in conformance AnimationGroup()
{
  uint64_t result = AnimationGroup.createResource()();
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v1 = 0xD00000000000001CLL;
    *(void *)(v1 + 8) = 0x800000022834E530;
    *(unsigned char *)(v1 + 16) = 0;
    return (void *)swift_willThrow();
  }
  return result;
}

void *sub_227F1AD1C@<X0>(void *a1@<X8>)
{
  uint64_t result = AnimationGroup.group.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227F1AD48(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_227F1AD90(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 160) = v4;
  *(void *)(a2 + 168) = v3;
  return result;
}

uint64_t sub_227F1ADD4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 200) == 1)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 208) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetAnimationLayer();
    }
  }
  else
  {
    uint64_t result = *(unsigned int *)(a1 + 196);
  }
  *a2 = result;
  return result;
}

_DWORD *sub_227F1AE1C(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 196) = *result;
  *(unsigned char *)(a2 + 200) = 0;
  return result;
}

double sub_227F1AE2C@<D0>(uint64_t a1@<X8>)
{
  AnimationGroup.bindTarget.getter((uint64_t)&v4);
  char v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_227F1AE74@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 202) == 1)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 208) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(a1 + 201);
  }
  *a2 = result;
  return result;
}

unsigned __int8 *sub_227F1AEBC(unsigned __int8 *result, uint64_t a2)
{
  *(_WORD *)(a2 + 201) = *result;
  return result;
}

uint64_t sub_227F1AECC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 203);
  if (v3 == 2)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 208) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionIsAdditive();
    }
  }
  else
  {
    uint64_t result = v3 & 1;
  }
  *a2 = result;
  return result;
}

unsigned char *sub_227F1AF14(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 203) = *result;
  return result;
}

uint64_t sub_227F1AF20@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AnimationGroup.trimStart.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227F1AF54(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 8) = *(void *)result;
  *(_WORD *)(a2 + 16) = v2;
  return result;
}

uint64_t sub_227F1AF6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AnimationGroup.trimEnd.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227F1AFA0(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 24) = *(void *)result;
  *(_WORD *)(a2 + 32) = v2;
  return result;
}

uint64_t sub_227F1AFB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AnimationGroup.trimDuration.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227F1AFEC(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 40) = *(void *)result;
  *(_WORD *)(a2 + 48) = v2;
  return result;
}

void sub_227F1B004(double *a1@<X8>)
{
  *a1 = AnimationGroup.offset.getter();
}

void *sub_227F1B030(void *result, uint64_t a2)
{
  *(void *)(a2 + 56) = *result;
  *(unsigned char *)(a2 + 64) = 0;
  return result;
}

void sub_227F1B040(double *a1@<X8>)
{
  *a1 = AnimationGroup.delay.getter();
}

void *sub_227F1B06C(void *result, uint64_t a2)
{
  *(void *)(a2 + 72) = *result;
  *(unsigned char *)(a2 + 80) = 0;
  return result;
}

void sub_227F1B07C(float *a1@<X8>)
{
  *a1 = AnimationGroup.speed.getter();
}

_DWORD *sub_227F1B0A8(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 84) = *result;
  *(unsigned char *)(a2 + 88) = 0;
  return result;
}

void sub_227F1B0B8(unsigned char *a1@<X8>)
{
  AnimationGroup.repeatMode.getter(&v2);
  *a1 = v2;
}

unsigned char *sub_227F1B0F4(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 89) = *result;
  return result;
}

uint64_t sub_227F1B100@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_227F1B10C(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t destroy for AnimationGroup(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 136);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 120), *(void *)(a1 + 128), v2);
  }
  swift_release();
  swift_bridgeObjectRelease();
  int v3 = *(unsigned __int8 *)(a1 + 192);
  if (v3 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 176), *(void *)(a1 + 184), v3);
  }

  return swift_release();
}

uint64_t initializeWithCopy for AnimationGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  int v6 = *(unsigned __int8 *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 120);
    uint64_t v8 = *(void *)(a2 + 128);
    outlined copy of BindTarget(v7, v8, v6);
    *(void *)(a1 + 120) = v7;
    *(void *)(a1 + 128) = v8;
    *(unsigned char *)(a1 + 136) = v6;
  }
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  *(unsigned char *)(a1 + 147) = *(unsigned char *)(a2 + 147);
  uint64_t v9 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v9;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  int v10 = *(unsigned __int8 *)(a2 + 192);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 176);
    uint64_t v12 = *(void *)(a2 + 184);
    outlined copy of BindTarget(v11, v12, v10);
    *(void *)(a1 + 176) = v11;
    *(void *)(a1 + 184) = v12;
    *(unsigned char *)(a1 + 192) = v10;
  }
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
  *(unsigned char *)(a1 + 203) = *(unsigned char *)(a2 + 203);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimationGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = v8;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (long long *)(a1 + 120);
  int v10 = (long long *)(a2 + 120);
  int v11 = *(unsigned __int8 *)(a2 + 136);
  if (*(unsigned __int8 *)(a1 + 136) == 255)
  {
    if (v11 == 255)
    {
      long long v20 = *v10;
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *uint64_t v9 = v20;
    }
    else
    {
      uint64_t v17 = *(void *)(a2 + 120);
      uint64_t v18 = *(void *)(a2 + 128);
      outlined copy of BindTarget(v17, v18, *(unsigned char *)(a2 + 136));
      *(void *)(a1 + 120) = v17;
      *(void *)(a1 + 128) = v18;
      *(unsigned char *)(a1 + 136) = v11;
    }
  }
  else if (v11 == 255)
  {
    outlined destroy of BindTarget(a1 + 120);
    char v19 = *(unsigned char *)(a2 + 136);
    *uint64_t v9 = *v10;
    *(unsigned char *)(a1 + 136) = v19;
  }
  else
  {
    uint64_t v12 = *(void *)(a2 + 120);
    uint64_t v13 = *(void *)(a2 + 128);
    outlined copy of BindTarget(v12, v13, *(unsigned char *)(a2 + 136));
    uint64_t v14 = *(void *)(a1 + 120);
    uint64_t v15 = *(void *)(a1 + 128);
    *(void *)(a1 + 120) = v12;
    *(void *)(a1 + 128) = v13;
    unsigned __int8 v16 = *(unsigned char *)(a1 + 136);
    *(unsigned char *)(a1 + 136) = v11;
    outlined consume of BindTarget(v14, v15, v16);
  }
  int v21 = *(_DWORD *)(a2 + 140);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_DWORD *)(a1 + 140) = v21;
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  *(unsigned char *)(a1 + 147) = *(unsigned char *)(a2 + 147);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_retain();
  swift_release();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v22 = (long long *)(a1 + 176);
  char v23 = (long long *)(a2 + 176);
  int v24 = *(unsigned __int8 *)(a2 + 192);
  if (*(unsigned __int8 *)(a1 + 192) == 255)
  {
    if (v24 == 255)
    {
      long long v33 = *v23;
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      *char v22 = v33;
    }
    else
    {
      uint64_t v30 = *(void *)(a2 + 176);
      uint64_t v31 = *(void *)(a2 + 184);
      outlined copy of BindTarget(v30, v31, *(unsigned char *)(a2 + 192));
      *(void *)(a1 + 176) = v30;
      *(void *)(a1 + 184) = v31;
      *(unsigned char *)(a1 + 192) = v24;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of BindTarget(a1 + 176);
    char v32 = *(unsigned char *)(a2 + 192);
    *char v22 = *v23;
    *(unsigned char *)(a1 + 192) = v32;
  }
  else
  {
    uint64_t v25 = *(void *)(a2 + 176);
    uint64_t v26 = *(void *)(a2 + 184);
    outlined copy of BindTarget(v25, v26, *(unsigned char *)(a2 + 192));
    uint64_t v27 = *(void *)(a1 + 176);
    uint64_t v28 = *(void *)(a1 + 184);
    *(void *)(a1 + 176) = v25;
    *(void *)(a1 + 184) = v26;
    unsigned __int8 v29 = *(unsigned char *)(a1 + 192);
    *(unsigned char *)(a1 + 192) = v24;
    outlined consume of BindTarget(v27, v28, v29);
  }
  int v34 = *(_DWORD *)(a2 + 196);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(_DWORD *)(a1 + 196) = v34;
  *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
  *(unsigned char *)(a1 + 203) = *(unsigned char *)(a2 + 203);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for AnimationGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v4;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v5;
  swift_bridgeObjectRelease();
  long long v6 = (_OWORD *)(a2 + 120);
  int v7 = *(unsigned __int8 *)(a1 + 136);
  if (v7 != 255)
  {
    int v8 = *(unsigned __int8 *)(a2 + 136);
    if (v8 != 255)
    {
      uint64_t v9 = *(void *)(a1 + 120);
      uint64_t v10 = *(void *)(a1 + 128);
      *(_OWORD *)(a1 + 120) = *v6;
      *(unsigned char *)(a1 + 136) = v8;
      outlined consume of BindTarget(v9, v10, v7);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 120);
  }
  *(_OWORD *)(a1 + 120) = *v6;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
LABEL_6:
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  *(unsigned char *)(a1 + 147) = *(unsigned char *)(a2 + 147);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_release();
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = (_OWORD *)(a2 + 176);
  int v13 = *(unsigned __int8 *)(a1 + 192);
  if (v13 == 255)
  {
LABEL_10:
    *(_OWORD *)(a1 + 176) = *v12;
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    goto LABEL_11;
  }
  int v14 = *(unsigned __int8 *)(a2 + 192);
  if (v14 == 255)
  {
    outlined destroy of BindTarget(a1 + 176);
    goto LABEL_10;
  }
  uint64_t v15 = *(void *)(a1 + 176);
  uint64_t v16 = *(void *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *v12;
  *(unsigned char *)(a1 + 192) = v14;
  outlined consume of BindTarget(v15, v16, v13);
LABEL_11:
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
  *(unsigned char *)(a1 + 203) = *(unsigned char *)(a2 + 203);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationGroup(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 216)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 152);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 216) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 152) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 216) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationGroup()
{
  return &type metadata for AnimationGroup;
}

uint64_t outlined retain of AnimationGroup(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 184);
  uint64_t v8 = *(void *)(a1 + 176);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 136);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v5);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v8, v4, v6);
  swift_retain();
  return a1;
}

uint64_t outlined release of AnimationGroup(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 184);
  uint64_t v8 = *(void *)(a1 + 176);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 136);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 192);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v5);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v8, v4, v6);
  swift_release();
  return a1;
}

uint64_t outlined destroy of AnimationDefinitionInternal?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinitionInternal?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AudioBufferResource.Configuration.shouldLoop.getter()
{
  return *v0;
}

uint64_t AudioBufferResource.Configuration.shouldLoop.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.shouldLoop.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.Configuration.shouldRandomizeStartTime.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AudioBufferResource.Configuration.shouldRandomizeStartTime.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.shouldRandomizeStartTime.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioBufferResource.Configuration.normalization.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AudioBufferResource.Configuration.normalization.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 8) = *(void *)result;
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.normalization.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioBufferResource.Configuration.calibration.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)(v1 + 24);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t AudioBufferResource.Configuration.calibration.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 24) = *(void *)result;
  *(unsigned char *)(v1 + 32) = v2;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.calibration.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.Configuration.mixGroupName.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioBufferResource.Configuration.mixGroupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.mixGroupName.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t AudioBufferResource.Configuration.layoutTagOverride.getter()
{
  return *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int8 *)(v0 + 60) << 32);
}

uint64_t AudioBufferResource.Configuration.layoutTagOverride.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 56) = result;
  *(unsigned char *)(v1 + 60) = BYTE4(result) & 1;
  return result;
}

uint64_t (*AudioBufferResource.Configuration.layoutTagOverride.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioBufferResource.Configuration.init(shouldLoop:shouldRandomizeStartTime:normalization:calibration:mixGroupName:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *a3;
  char v8 = *((unsigned char *)a3 + 8);
  uint64_t v9 = *a4;
  char v10 = *((unsigned char *)a4 + 8);
  *(unsigned char *)a7 = result;
  *(unsigned char *)(a7 + 1) = a2;
  *(void *)(a7 + 8) = v7;
  *(unsigned char *)(a7 + 16) = v8;
  *(void *)(a7 + 24) = v9;
  *(unsigned char *)(a7 + 32) = v10;
  *(void *)(a7 + 40) = a5;
  *(void *)(a7 + 48) = a6;
  *(_DWORD *)(a7 + 56) = 0;
  *(unsigned char *)(a7 + 60) = 1;
  return result;
}

void AudioBufferResource.Configuration.hash(into:)()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt64 v4 = *(void *)(v0 + 24);
  int v5 = *(unsigned __int8 *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 48);
  Swift::UInt32 v7 = *(_DWORD *)(v0 + 56);
  int v8 = *(unsigned __int8 *)(v0 + 60);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
    if (v5 != 255) {
      goto LABEL_16;
    }
LABEL_12:
    Hasher._combine(_:)(0);
    if (!v6) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  Hasher._combine(_:)(1u);
  if (v3)
  {
    if (v3 != 1)
    {
      Hasher._combine(_:)(0);
      if (v5 != 255) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
    Swift::UInt v9 = 2;
  }
  else
  {
    Swift::UInt v9 = 1;
  }
  Hasher._combine(_:)(v9);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v2;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if (v5 == 255) {
    goto LABEL_12;
  }
LABEL_16:
  Hasher._combine(_:)(1u);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v4;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)((v5 & 1) != 0);
  Hasher._combine(_:)(v11);
  if (!v6)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    if (!v8) {
      goto LABEL_21;
    }
LABEL_14:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_13:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v8) {
    goto LABEL_14;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v7);
}

Swift::Int AudioBufferResource.Configuration.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioBufferResource.Configuration()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioBufferResource.Configuration()
{
  return Hasher._finalize()();
}

BOOL specialized static AudioBufferResource.Configuration.== infix(_:_:)(double *a1, double *a2)
{
  uint64_t v2 = 0;
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2
    || ((*((unsigned __int8 *)a1 + 1) ^ *((unsigned __int8 *)a2 + 1)) & 1) != 0)
  {
    return v2;
  }
  uint64_t v2 = *((unsigned __int8 *)a1 + 16);
  double v5 = a1[3];
  int v6 = *((unsigned __int8 *)a1 + 32);
  uint64_t v7 = *((void *)a1 + 5);
  uint64_t v8 = *((void *)a1 + 6);
  int v9 = *((_DWORD *)a1 + 14);
  unsigned __int8 v10 = *((unsigned char *)a1 + 60);
  int v11 = *((unsigned __int8 *)a2 + 16);
  double v12 = a2[3];
  int v13 = *((unsigned __int8 *)a2 + 32);
  uint64_t v14 = *((void *)a2 + 5);
  uint64_t v15 = *((void *)a2 + 6);
  int v16 = *((_DWORD *)a2 + 14);
  char v17 = *((unsigned char *)a2 + 60);
  if (v2 == 255)
  {
    if (v11 != 255) {
      return 0;
    }
    goto LABEL_16;
  }
  if (v11 == 255) {
    return 0;
  }
  double v18 = a1[1];
  double v19 = a2[1];
  if (!v2)
  {
    if (v11) {
      return v2;
    }
    goto LABEL_12;
  }
  if (v2 == 1)
  {
    uint64_t v2 = 0;
    if (v11 != 1) {
      return v2;
    }
LABEL_12:
    if (v18 != v19) {
      return v2;
    }
    goto LABEL_16;
  }
  uint64_t v2 = 0;
  if (v11 != 2 || v19 != 0.0) {
    return v2;
  }
LABEL_16:
  if (v6 == 255)
  {
    if (v13 != 255) {
      return 0;
    }
  }
  else
  {
    if (v13 == 255) {
      return 0;
    }
    if (v6)
    {
      if ((v13 & 1) == 0) {
        return 0;
      }
    }
    else if (v13)
    {
      return 0;
    }
    if (v5 != v12) {
      return 0;
    }
  }
  if (!v8)
  {
    if (v15) {
      return 0;
    }
LABEL_32:
    if ((v10 & 1) == 0)
    {
      if (v9 == v16) {
        char v21 = v17;
      }
      else {
        char v21 = 1;
      }
      return (v21 & 1) == 0;
    }
    return (v17 & 1) != 0;
  }
  if (!v15) {
    return 0;
  }
  if (v7 == v14 && v8 == v15) {
    goto LABEL_32;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v2 = 0;
  if (v20) {
    goto LABEL_32;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type AudioBufferResource.Configuration and conformance AudioBufferResource.Configuration()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioBufferResource.Configuration and conformance AudioBufferResource.Configuration;
  if (!lazy protocol witness table cache variable for type AudioBufferResource.Configuration and conformance AudioBufferResource.Configuration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioBufferResource.Configuration and conformance AudioBufferResource.Configuration);
  }
  return result;
}

uint64_t destroy for AudioBufferResource.Configuration()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AudioBufferResource.Configuration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioBufferResource.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v6 = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v6;
  return a1;
}

__n128 __swift_memcpy61_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AudioBufferResource.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioBufferResource.Configuration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 61)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioBufferResource.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 60) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 61) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 61) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioBufferResource.Configuration()
{
  return &type metadata for AudioBufferResource.Configuration;
}

uint64_t RERenderFrameSettings.deinit()
{
  RERelease();
  return v0;
}

uint64_t RERenderFrameSettings.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall RERenderFrameSettings.setTotalTime(_:)(Swift::Float a1)
{
}

uint64_t type metadata accessor for RERenderFrameSettings()
{
  return self;
}

uint64_t method lookup function for RERenderFrameSettings(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RERenderFrameSettings);
}

uint64_t dispatch thunk of RERenderFrameSettings.setTotalTime(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t __RKVisibilityHideMoveOutAnimation.deinit()
{
  return v0;
}

uint64_t __RKVisibilityHideMoveOutAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityHideMoveOutAnimation()
{
  return self;
}

uint64_t specialized static __RKVisibilityHideMoveOutAnimation.createVisibilityHideMoveOutAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(long long *a1, float a2, float a3, float32x4_t a4, uint64_t a5, unsigned char *a6, char a7)
{
  long long v28 = *a1;
  long long v26 = a1[2];
  long long v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 123, 0, MEMORY[0x263F8EE78]);
      int v13 = &outlined read-only object #1 of static __RKVisibilityHideMoveOutAnimation.createVisibilityHideMoveOutAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 71, 0, MEMORY[0x263F8EE78]);
      int v13 = &outlined read-only object #2 of static __RKVisibilityHideMoveOutAnimation.createVisibilityHideMoveOutAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 52, 0, MEMORY[0x263F8EE78]);
    int v13 = &outlined read-only object #0 of static __RKVisibilityHideMoveOutAnimation.createVisibilityHideMoveOutAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((void *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  char v7 = BYTE1(v31);
  float v9 = (float)v15;
  unsigned int v8 = DWORD2(v31);
  int v16 = (long long *)&rawValue[6 * v15];
  long long v24 = *v16;
  long long v25 = *(v16 - 1);
  long long v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_15:
  }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  unint64_t v18 = rawValue[2];
  unint64_t v17 = rawValue[3];
  float v19 = a2 / v9;
  if (v18 >= v17 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, rawValue);
  }
  rawValue[2] = v18 + 1;
  char v20 = &rawValue[6 * v18];
  long long v20[2] = v25;
  void v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  long long v30 = v28;
  long long v31 = v27;
  long long v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t *)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((void *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(void *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_22830EC60;
    *(void *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized __RKEntityTriggerSpecification.remapUUIDs(entityIdentifierMapping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  char v55 = a3;
  uint64_t v54 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  char v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v51 - v13;
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (char *)&v51 - v16;
  MEMORY[0x270FA5388](v18);
  char v20 = (unint64_t *)((char *)&v51 - v19);
  outlined init with copy of __RKEntityInteractionSpecification(a1, (uint64_t)&v51 - v19, type metadata accessor for __RKEntityTriggerSpecification);
  uint64_t v53 = v8;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v31 = v5;
      long long v32 = *(void (**)(char *, unint64_t *, uint64_t))(v5 + 32);
      uint64_t v33 = v54;
      v32(v7, v20, v54);
      swift_beginAccess();
      static UuidRemapHelper.getOrAddUuidMapping(_:_:)((uint64_t)v7, (uint64_t *)(a2 + 16), (uint64_t)v55);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v33);
      goto LABEL_8;
    case 2u:
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      uint64_t v35 = *(unint64_t *)((char *)v20 + *(int *)(v34 + 48));
      unint64_t v52 = *(unint64_t *)((char *)v20 + *(int *)(v34 + 64));
      uint64_t v36 = v5;
      uint64_t v37 = *(void (**)(char *, unint64_t *, uint64_t))(v5 + 32);
      uint64_t v38 = v54;
      v37(v7, v20, v54);
      uint64_t v39 = *(int *)(v34 + 48);
      uint64_t v40 = *(int *)(v34 + 64);
      swift_beginAccess();
      swift_retain_n();
      char v41 = v55;
      static UuidRemapHelper.getOrAddUuidMapping(_:_:)((uint64_t)v7, (uint64_t *)(a2 + 16), (uint64_t)v55);
      swift_endAccess();
      swift_retain();
      uint64_t v42 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_AHs5NeverOTg5051_s10RealityKit30__RKEntityTriggerSpecificationO0A10D64E10remapUUIDs23entityIdentifierMappingAC0F04UUIDVAIXE_tFA2IXEfU_A2HIgnr_Tf1cn_n04_s17h91Foundation15UuidRemapHelperO31remapIdentifiersAndInteractions4rooty0A3Kit6EntityC_tFZAF34__j11InteractionL24VAJXEfU0_0B04UUIDVAMcfU_0hD00Z11RemapHelperOXMtSDyA2HGz_XxTf1nc_nTf4ndg_n(v35, a2);
      swift_release();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v38);
      swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v41 + v39) = v42;
      *(unint64_t *)((char *)v41 + v40) = v52;
      goto LABEL_23;
    case 3u:
      swift_retain_n();
      goto LABEL_12;
    case 4u:
      swift_retain_n();
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 5u:
      unint64_t v43 = *v20;
      uint64_t v44 = *(void *)(v43 + 16);
      if (v44)
      {
        unint64_t v45 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        unint64_t v52 = v43;
        uint64_t v54 = v45;
        uint64_t v46 = v43 + v45;
        uint64_t v47 = *(void *)(v9 + 72);
        swift_retain_n();
        unint64_t v48 = MEMORY[0x263F8EE78];
        do
        {
          outlined init with copy of __RKEntityInteractionSpecification(v46, (uint64_t)v17, type metadata accessor for __RKEntityTriggerSpecification);
          swift_retain();
          specialized __RKEntityTriggerSpecification.remapUUIDs(entityIdentifierMapping:)(v17, a2);
          outlined init with copy of __RKEntityInteractionSpecification((uint64_t)v14, (uint64_t)v11, type metadata accessor for __RKEntityTriggerSpecification);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v48 + 16) + 1, 1, v48);
          }
          unint64_t v50 = *(void *)(v48 + 16);
          unint64_t v49 = *(void *)(v48 + 24);
          if (v50 >= v49 >> 1) {
            unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1, v48);
          }
          *(void *)(v48 + 16) = v50 + 1;
          outlined init with take of __RKEntityInteractionSpecification((uint64_t)v11, v48 + v54 + v50 * v47, type metadata accessor for __RKEntityTriggerSpecification);
          outlined destroy of __RKEntityInteractionSpecification((uint64_t)v14, type metadata accessor for __RKEntityTriggerSpecification);
          outlined destroy of __RKEntityInteractionSpecification((uint64_t)v17, type metadata accessor for __RKEntityTriggerSpecification);
          v46 += v47;
          --v44;
        }
        while (v44);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_retain_n();
        swift_bridgeObjectRelease();
        unint64_t v48 = MEMORY[0x263F8EE78];
      }
      *char v55 = v48;
LABEL_23:
      swift_storeEnumTagMultiPayload();
      goto LABEL_4;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
      swift_retain_n();
LABEL_3:
      outlined init with copy of __RKEntityInteractionSpecification(a1, (uint64_t)v55, type metadata accessor for __RKEntityTriggerSpecification);
LABEL_4:
      swift_release_n();
      break;
    default:
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      int v23 = *(_DWORD *)((char *)v20 + *(int *)(v22 + 48));
      char v24 = *((unsigned char *)v20 + *(int *)(v22 + 64));
      uint64_t v25 = v5;
      long long v26 = *(void (**)(char *, unint64_t *, uint64_t))(v5 + 32);
      uint64_t v27 = v54;
      v26(v7, v20, v54);
      uint64_t v28 = *(int *)(v22 + 48);
      uint64_t v29 = *(int *)(v22 + 64);
      swift_beginAccess();
      long long v30 = v55;
      static UuidRemapHelper.getOrAddUuidMapping(_:_:)((uint64_t)v7, (uint64_t *)(a2 + 16), (uint64_t)v55);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v27);
      *(_DWORD *)((char *)v30 + v28) = v23;
      *((unsigned char *)v30 + v29) = v24;
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
  }
  return swift_release();
}

uint64_t __RKEntityTriggerSpecification.remapUUIDs(entityIdentifierMapping:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v49 = a2;
  unint64_t v50 = a1;
  unint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v45 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v45 - v17;
  MEMORY[0x270FA5388](v19);
  char v21 = (char *)&v45 - v20;
  outlined init with copy of __RKEntityInteractionSpecification(v4, (uint64_t)&v45 - v20, type metadata accessor for __RKEntityTriggerSpecification);
  uint64_t v47 = v9;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v21, v5);
      v50((uint64_t)v8);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return swift_storeEnumTagMultiPayload();
    case 2u:
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      uint64_t v30 = *(void *)&v21[*(int *)(v29 + 48)];
      unint64_t v46 = *(void *)&v21[*(int *)(v29 + 64)];
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v21, v5);
      uint64_t v31 = *(int *)(v29 + 48);
      uint64_t v32 = *(int *)(v29 + 64);
      uint64_t v34 = v48;
      uint64_t v33 = v49;
      uint64_t v35 = v50;
      v50((uint64_t)v8);
      uint64_t v36 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_AHs5NeverOTg5051_s10RealityKit30__RKEntityTriggerSpecificationO0A10D64E10remapUUIDs23entityIdentifierMappingAC0F04UUIDVAIXE_tFA2IXEfU_A2HIgnr_Tf1cn_nTf4ng_n(v30, v35, v33);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v34 + v31) = v36;
      *(unint64_t *)((char *)v34 + v32) = v46;
      return swift_storeEnumTagMultiPayload();
    case 3u:
      goto LABEL_8;
    case 4u:
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      goto LABEL_2;
    case 5u:
      unint64_t v37 = *(void *)v21;
      uint64_t v38 = *(void *)(*(void *)v21 + 16);
      if (v38)
      {
        unint64_t v39 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        unint64_t v46 = v37;
        uint64_t v40 = v37 + v39;
        uint64_t v41 = *(void *)(v10 + 72);
        unint64_t v42 = MEMORY[0x263F8EE78];
        do
        {
          outlined init with copy of __RKEntityInteractionSpecification(v40, (uint64_t)v18, type metadata accessor for __RKEntityTriggerSpecification);
          __RKEntityTriggerSpecification.remapUUIDs(entityIdentifierMapping:)(v50, v49);
          outlined init with copy of __RKEntityInteractionSpecification((uint64_t)v15, (uint64_t)v12, type metadata accessor for __RKEntityTriggerSpecification);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1, v42);
          }
          unint64_t v44 = *(void *)(v42 + 16);
          unint64_t v43 = *(void *)(v42 + 24);
          if (v44 >= v43 >> 1) {
            unint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v42);
          }
          *(void *)(v42 + 16) = v44 + 1;
          outlined init with take of __RKEntityInteractionSpecification((uint64_t)v12, v42 + v39 + v44 * v41, type metadata accessor for __RKEntityTriggerSpecification);
          outlined destroy of __RKEntityInteractionSpecification((uint64_t)v15, type metadata accessor for __RKEntityTriggerSpecification);
          outlined destroy of __RKEntityInteractionSpecification((uint64_t)v18, type metadata accessor for __RKEntityTriggerSpecification);
          v40 += v41;
          --v38;
        }
        while (v38);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v42 = MEMORY[0x263F8EE78];
      }
      *unint64_t v48 = v42;
      return swift_storeEnumTagMultiPayload();
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
LABEL_2:
      uint64_t result = outlined init with copy of __RKEntityInteractionSpecification(v4, (uint64_t)v48, type metadata accessor for __RKEntityTriggerSpecification);
      break;
    default:
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      int v24 = *(_DWORD *)&v21[*(int *)(v23 + 48)];
      char v25 = v21[*(int *)(v23 + 64)];
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v21, v5);
      uint64_t v26 = *(int *)(v23 + 48);
      uint64_t v27 = *(int *)(v23 + 64);
      uint64_t v28 = v48;
      v50((uint64_t)v8);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      *(_DWORD *)((char *)v28 + v26) = v24;
      *((unsigned char *)v28 + v27) = v25;
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
  }
  return result;
}

uint64_t __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X8>)
{
  v212 = a5;
  uint64_t v208 = a3;
  uint64_t v209 = a4;
  v210 = (void (*)(char *))a1;
  uint64_t v211 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v199 = (uint64_t)&v167 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v201 = (char *)&v167 - v8;
  uint64_t v198 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x270FA5388](v198);
  uint64_t v200 = (uint64_t)&v167 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v204 = (uint64_t)&v167 - v11;
  uint64_t v12 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v197 = (uint64_t)&v167 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v196 = (uint64_t)&v167 - v15;
  uint64_t v16 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v175 = (uint64_t)&v167 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v174 = (uint64_t)&v167 - v19;
  uint64_t v176 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x270FA5388](v176);
  uint64_t v178 = (uint64_t)&v167 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v179 = (uint64_t)&v167 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v177 = (uint64_t)&v167 - v24;
  uint64_t v25 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v195 = (uint64_t)&v167 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v194 = (uint64_t)&v167 - v28;
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v206 = *(void *)(v29 - 8);
  uint64_t v207 = v29;
  MEMORY[0x270FA5388](v29);
  v205 = (char *)&v167 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x270FA5388](v191);
  uint64_t v192 = (uint64_t)&v167 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v193 = (uint64_t)&v167 - v33;
  MEMORY[0x270FA5388](v34);
  uint64_t v190 = (uint64_t)&v167 - v35;
  uint64_t v36 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x270FA5388](v36 - 8);
  uint64_t v189 = (uint64_t)&v167 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  uint64_t v188 = (uint64_t)&v167 - v39;
  uint64_t v40 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x270FA5388](v40 - 8);
  uint64_t v173 = (uint64_t)&v167 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  uint64_t v172 = (uint64_t)&v167 - v43;
  uint64_t v44 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x270FA5388](v44 - 8);
  uint64_t v187 = (uint64_t)&v167 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v46);
  uint64_t v186 = (uint64_t)&v167 - v47;
  uint64_t v48 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x270FA5388](v48 - 8);
  uint64_t v185 = (uint64_t)&v167 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v50);
  uint64_t v184 = (uint64_t)&v167 - v51;
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x270FA5388](started - 8);
  uint64_t v171 = (uint64_t)&v167 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v54);
  uint64_t v170 = (uint64_t)&v167 - v55;
  uint64_t v56 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x270FA5388](v56 - 8);
  uint64_t v183 = (uint64_t)&v167 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v58);
  uint64_t v203 = (uint64_t)&v167 - v59;
  uint64_t v60 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x270FA5388](v60 - 8);
  uint64_t v169 = (uint64_t)&v167 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v62);
  uint64_t v168 = (uint64_t)&v167 - v63;
  uint64_t v64 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x270FA5388](v64 - 8);
  uint64_t v182 = (uint64_t)&v167 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v66);
  uint64_t v202 = (uint64_t)&v167 - v67;
  uint64_t v68 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x270FA5388](v68 - 8);
  uint64_t v181 = (uint64_t)&v167 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v70);
  uint64_t v180 = (uint64_t)&v167 - v71;
  uint64_t v72 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x270FA5388](v72 - 8);
  long long v74 = (char *)&v167 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v75);
  uint64_t v77 = (char *)&v167 - v76;
  uint64_t v78 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x270FA5388](v78 - 8);
  long long v80 = (char *)&v167 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v81);
  long long v83 = (char *)&v167 - v82;
  uint64_t v84 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x270FA5388](v84 - 8);
  long long v86 = (char *)&v167 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v87);
  long long v89 = (char *)&v167 - v88;
  uint64_t v90 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v90 - 8);
  uint64_t v92 = (char *)&v167 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v93);
  long long v95 = (char *)&v167 - v94;
  uint64_t v96 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v96);
  long long v98 = (char *)&v167 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityInteractionSpecification(v213, (uint64_t)v98, type metadata accessor for __RKEntityActionSpecification);
  uint64_t v213 = v96;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, (uint64_t)v89, type metadata accessor for __RKChangeSceneActionArguments);
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)((uint64_t)v89, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKChangeSceneActionArguments, (uint64_t)&protocol witness table for __RKChangeSceneActionArguments, type metadata accessor for __RKChangeSceneActionArguments, (uint64_t)v86);
      outlined destroy of __RKEntityInteractionSpecification((uint64_t)v89, type metadata accessor for __RKChangeSceneActionArguments);
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v86, (uint64_t)v212, type metadata accessor for __RKChangeSceneActionArguments);
      break;
    case 2u:
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, (uint64_t)v83, type metadata accessor for __RKEntityCustomActionArguments);
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)((uint64_t)v83, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityCustomActionArguments, (uint64_t)&protocol witness table for __RKEntityCustomActionArguments, type metadata accessor for __RKEntityCustomActionArguments, (uint64_t)v80);
      outlined destroy of __RKEntityInteractionSpecification((uint64_t)v83, type metadata accessor for __RKEntityCustomActionArguments);
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v80, (uint64_t)v212, type metadata accessor for __RKEntityCustomActionArguments);
      break;
    case 3u:
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, (uint64_t)v77, type metadata accessor for __RKEntityEmphasisActionArguments);
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)((uint64_t)v77, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityEmphasisActionArguments, (uint64_t)&protocol witness table for __RKEntityEmphasisActionArguments, type metadata accessor for __RKEntityEmphasisActionArguments, (uint64_t)v74);
      outlined destroy of __RKEntityInteractionSpecification((uint64_t)v77, type metadata accessor for __RKEntityEmphasisActionArguments);
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v74, (uint64_t)v212, type metadata accessor for __RKEntityEmphasisActionArguments);
      break;
    case 4u:
      uint64_t v99 = v180;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v180, type metadata accessor for __RKEntityFadeActionArguments);
      uint64_t v100 = v181;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v99, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityFadeActionArguments, (uint64_t)&protocol witness table for __RKEntityFadeActionArguments, type metadata accessor for __RKEntityFadeActionArguments, v181);
      outlined destroy of __RKEntityInteractionSpecification(v99, type metadata accessor for __RKEntityFadeActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v100, (uint64_t)v212, type metadata accessor for __RKEntityFadeActionArguments);
      break;
    case 5u:
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(*((_DWORD *)v98 + 1), v98[8], v210, (uint64_t)v214, *(float *)v98);
      float v101 = v214[1];
      char v102 = v215;
      uint64_t v103 = v212;
      float *v212 = v214[0];
      v103[1] = v101;
      *((unsigned char *)v103 + 8) = v102;
      break;
    case 6u:
      char v138 = *v98;
      char v139 = v98[16];
      uint64_t v140 = *((void *)v98 + 3);
      char v141 = v98[32];
      char v142 = v98[33];
      uint64_t v143 = v211;
      swift_retain();
      uint64_t v144 = v209;
      swift_retain();
      uint64_t v145 = swift_bridgeObjectRetain();
      uint64_t v146 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit29__RKEntityActionSpecificationOG_AHs5NeverOTg504_s10d7Kit29__fgH116O0A10FoundationE10remapUUIDs23entityIdentifierMapping010identifierK0AC0F04UUIDVAJc_A2JctF0G9ArgumentsL_yxxlFA2CXEfU_0N04UUIDVAOIegnr_A2OIegnr_Tf1cn_nTf4ngg_n(v145, (uint64_t)v210, v143, v208, v144);
      swift_bridgeObjectRelease_n();
      swift_release();
      swift_release();
      v147 = v212;
      *(unsigned char *)v212 = v138;
      *((void *)v147 + 1) = v146;
      *((unsigned char *)v147 + 16) = v139;
      *((void *)v147 + 3) = v140;
      *((unsigned char *)v147 + 32) = v141;
      *((unsigned char *)v147 + 33) = v142;
      break;
    case 7u:
      uint64_t v104 = v202;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v202, type metadata accessor for __RKEntityHideActionArguments);
      uint64_t v105 = v182;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v104, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityHideActionArguments, (uint64_t)&protocol witness table for __RKEntityHideActionArguments, type metadata accessor for __RKEntityHideActionArguments, v182);
      outlined destroy of __RKEntityInteractionSpecification(v104, type metadata accessor for __RKEntityHideActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v105, (uint64_t)v212, type metadata accessor for __RKEntityHideActionArguments);
      break;
    case 8u:
      uint64_t v148 = v168;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v168, type metadata accessor for __RKEntityForceActionArguments);
      uint64_t v149 = v169;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v148, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityForceActionArguments, (uint64_t)&protocol witness table for __RKEntityForceActionArguments, type metadata accessor for __RKEntityForceActionArguments, v169);
      outlined destroy of __RKEntityInteractionSpecification(v148, type metadata accessor for __RKEntityForceActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v149, (uint64_t)v212, type metadata accessor for __RKEntityForceActionArguments);
      break;
    case 9u:
      uint64_t v106 = v203;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v203, type metadata accessor for __RKEntityShowActionArguments);
      uint64_t v107 = v183;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v106, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityShowActionArguments, (uint64_t)&protocol witness table for __RKEntityShowActionArguments, type metadata accessor for __RKEntityShowActionArguments, v183);
      outlined destroy of __RKEntityInteractionSpecification(v106, type metadata accessor for __RKEntityShowActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v107, (uint64_t)v212, type metadata accessor for __RKEntityShowActionArguments);
      break;
    case 0xAu:
      uint64_t v150 = v170;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v170, type metadata accessor for __RKEntityStartAnimateActionArguments);
      uint64_t v151 = v171;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v150, (void (*)(uint64_t))v210, v171);
      outlined destroy of __RKEntityInteractionSpecification(v150, type metadata accessor for __RKEntityStartAnimateActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v151, (uint64_t)v212, type metadata accessor for __RKEntityStartAnimateActionArguments);
      break;
    case 0xBu:
      uint64_t v108 = v184;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v184, type metadata accessor for __RKEntityStopAnimateActionArguments);
      uint64_t v109 = v185;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v108, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityStopAnimateActionArguments, (uint64_t)&protocol witness table for __RKEntityStopAnimateActionArguments, type metadata accessor for __RKEntityStopAnimateActionArguments, v185);
      outlined destroy of __RKEntityInteractionSpecification(v108, type metadata accessor for __RKEntityStopAnimateActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v109, (uint64_t)v212, type metadata accessor for __RKEntityStopAnimateActionArguments);
      break;
    case 0xCu:
      uint64_t v110 = v186;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v186, type metadata accessor for __RKEntityToggleAnimateActionArguments);
      uint64_t v111 = v187;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v110, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityToggleAnimateActionArguments, (uint64_t)&protocol witness table for __RKEntityToggleAnimateActionArguments, type metadata accessor for __RKEntityToggleAnimateActionArguments, v187);
      outlined destroy of __RKEntityInteractionSpecification(v110, type metadata accessor for __RKEntityToggleAnimateActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v111, (uint64_t)v212, type metadata accessor for __RKEntityToggleAnimateActionArguments);
      break;
    case 0xDu:
      uint64_t v152 = v172;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v172, type metadata accessor for __RKEntityToggleVisibilityActionArguments);
      uint64_t v153 = v173;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v152, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityToggleVisibilityActionArguments, (uint64_t)&protocol witness table for __RKEntityToggleVisibilityActionArguments, type metadata accessor for __RKEntityToggleVisibilityActionArguments, v173);
      outlined destroy of __RKEntityInteractionSpecification(v152, type metadata accessor for __RKEntityToggleVisibilityActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v153, (uint64_t)v212, type metadata accessor for __RKEntityToggleVisibilityActionArguments);
      break;
    case 0xEu:
      uint64_t v112 = v188;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v188, type metadata accessor for __RKEntityTransformActionArguments);
      uint64_t v113 = v189;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v112, v210, v211, v189);
      outlined destroy of __RKEntityInteractionSpecification(v112, type metadata accessor for __RKEntityTransformActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v113, (uint64_t)v212, type metadata accessor for __RKEntityTransformActionArguments);
      break;
    case 0xFu:
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v210, v214, *(float *)v98);
      float *v212 = v214[0];
      break;
    case 0x10u:
      uint64_t v114 = v190;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v190, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      uint64_t v115 = v192;
      outlined init with copy of __RKEntityInteractionSpecification(v114, v192, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      simd_float4 v116 = v205;
      simd_float4 v117 = (void (*)(uint64_t))v210;
      v210((char *)v115);
      uint64_t v118 = v207;
      simd_float4 v119 = *(void (**)(uint64_t, char *, uint64_t))(v206 + 40);
      v119(v115, v116, v207);
      uint64_t v120 = v115 + *(int *)(v191 + 20);
      v117(v120);
      v119(v120, v116, v118);
      uint64_t v121 = v193;
      outlined init with take of __RKEntityInteractionSpecification(v115, v193, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      outlined destroy of __RKEntityInteractionSpecification(v114, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v121, (uint64_t)v212, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      break;
    case 0x11u:
      uint64_t v122 = v194;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v194, type metadata accessor for __RKEntityLookAtCameraActionArguments);
      uint64_t v123 = v195;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v122, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityLookAtCameraActionArguments, (uint64_t)&protocol witness table for __RKEntityLookAtCameraActionArguments, type metadata accessor for __RKEntityLookAtCameraActionArguments, v195);
      outlined destroy of __RKEntityInteractionSpecification(v122, type metadata accessor for __RKEntityLookAtCameraActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v123, (uint64_t)v212, type metadata accessor for __RKEntityLookAtCameraActionArguments);
      break;
    case 0x12u:
      uint64_t v154 = v177;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v177, type metadata accessor for __RKEntitySwapEntityActionArguments);
      uint64_t v155 = v178;
      outlined init with copy of __RKEntityInteractionSpecification(v154, v178, type metadata accessor for __RKEntitySwapEntityActionArguments);
      v156 = v205;
      v157 = v210;
      v210((char *)v155);
      (*(void (**)(uint64_t, char *, uint64_t))(v206 + 40))(v155, v156, v207);
      uint64_t v158 = v176;
      uint64_t v159 = v155 + *(int *)(v176 + 24);
      uint64_t v160 = v202;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v159, v157, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityHideActionArguments, (uint64_t)&protocol witness table for __RKEntityHideActionArguments, type metadata accessor for __RKEntityHideActionArguments, v202);
      _s10RealityKit29__RKEntityHideActionArgumentsVWOdTm_0(v160, v159, type metadata accessor for __RKEntityHideActionArguments);
      uint64_t v161 = v155 + *(int *)(v158 + 28);
      uint64_t v162 = v203;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v161, v157, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityShowActionArguments, (uint64_t)&protocol witness table for __RKEntityShowActionArguments, type metadata accessor for __RKEntityShowActionArguments, v203);
      _s10RealityKit29__RKEntityHideActionArgumentsVWOdTm_0(v162, v161, type metadata accessor for __RKEntityShowActionArguments);
      uint64_t v163 = v179;
      outlined init with take of __RKEntityInteractionSpecification(v155, v179, type metadata accessor for __RKEntitySwapEntityActionArguments);
      outlined destroy of __RKEntityInteractionSpecification(v154, type metadata accessor for __RKEntitySwapEntityActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v163, (uint64_t)v212, type metadata accessor for __RKEntitySwapEntityActionArguments);
      break;
    case 0x13u:
      uint64_t v164 = v174;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v174, type metadata accessor for __RKEntitySpinActionArguments);
      uint64_t v165 = v175;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v164, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntitySpinActionArguments, (uint64_t)&protocol witness table for __RKEntitySpinActionArguments, type metadata accessor for __RKEntitySpinActionArguments, v175);
      outlined destroy of __RKEntityInteractionSpecification(v164, type metadata accessor for __RKEntitySpinActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v165, (uint64_t)v212, type metadata accessor for __RKEntitySpinActionArguments);
      break;
    case 0x14u:
      uint64_t v124 = v196;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v196, type metadata accessor for __RKEntitySetOpacityActionArguments);
      uint64_t v125 = v197;
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v124, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntitySetOpacityActionArguments, (uint64_t)&protocol witness table for __RKEntitySetOpacityActionArguments, type metadata accessor for __RKEntitySetOpacityActionArguments, v197);
      outlined destroy of __RKEntityInteractionSpecification(v124, type metadata accessor for __RKEntitySetOpacityActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v125, (uint64_t)v212, type metadata accessor for __RKEntitySetOpacityActionArguments);
      break;
    case 0x15u:
      uint64_t v126 = v204;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, v204, type metadata accessor for __RKEntityPlayTimelineActionArguments);
      uint64_t v127 = v200;
      outlined init with copy of __RKEntityInteractionSpecification(v126, v200, type metadata accessor for __RKEntityPlayTimelineActionArguments);
      uint64_t v128 = v205;
      unint64_t v129 = (void (*)(uint64_t))v210;
      v210((char *)v127);
      uint64_t v131 = v206;
      uint64_t v130 = v207;
      uint64_t v132 = *(void (**)(uint64_t, char *, uint64_t))(v206 + 40);
      v132(v127, v128, v207);
      uint64_t v133 = v198;
      uint64_t v134 = v127 + *(int *)(v198 + 20);
      v129(v134);
      v132(v134, v128, v130);
      uint64_t v135 = v127 + *(int *)(v133 + 28);
      uint64_t v136 = v199;
      outlined init with copy of UUID?(v135, v199);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v136, 1, v130) == 1)
      {
        uint64_t v137 = (uint64_t)v201;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v131 + 56))(v201, 1, 1, v130);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v131 + 32))(v128, v136, v130);
        swift_retain();
        uint64_t v137 = (uint64_t)v201;
        v129((uint64_t)v128);
        (*(void (**)(char *, uint64_t))(v131 + 8))(v128, v130);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v131 + 56))(v137, 0, 1, v130);
        swift_release();
      }
      outlined assign with take of UUID?(v137, v135);
      outlined destroy of __RKEntityInteractionSpecification(v204, type metadata accessor for __RKEntityPlayTimelineActionArguments);
      outlined init with take of __RKEntityInteractionSpecification(v127, (uint64_t)v212, type metadata accessor for __RKEntityPlayTimelineActionArguments);
      break;
    default:
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v98, (uint64_t)v95, type metadata accessor for __RKEntityAudioActionArguments);
      specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)((uint64_t)v95, v210, (uint64_t (*)(void, __n128))type metadata accessor for __RKEntityAudioActionArguments, (uint64_t)&protocol witness table for __RKEntityAudioActionArguments, type metadata accessor for __RKEntityAudioActionArguments, (uint64_t)v92);
      outlined destroy of __RKEntityInteractionSpecification((uint64_t)v95, type metadata accessor for __RKEntityAudioActionArguments);
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v92, (uint64_t)v212, type metadata accessor for __RKEntityAudioActionArguments);
      break;
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t (*a3)(void, __n128)@<X5>, uint64_t a4@<X6>, uint64_t (*a5)(void)@<X7>, uint64_t a6@<X8>)
{
  uint64_t v23 = a6;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __n128 v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = &v24[-v17 - 8];
  uint64_t v28 = a3(0, v16);
  uint64_t v29 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
  outlined init with copy of __RKEntityInteractionSpecification(a1, (uint64_t)boxed_opaque_existential_1, a5);
  outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)v25);
  uint64_t v20 = __swift_project_boxed_opaque_existential_1(v27, v28);
  (*(void (**)(char *, void *, uint64_t))(v12 + 16))(v14, v20, v11);
  a2(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v21 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v25, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 40))(v21, v18, v11);
  outlined init with copy of __REAssetService((uint64_t)v25, (uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKSpecificationHasTarget);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)@<X0>(int a1@<W0>, char a2@<W1>, void (*a3)(char *)@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v24[-2] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  __n128 v16 = (char *)&v24[-2] - v15;
  *(float *)uint64_t v24 = a5;
  v24[1] = a1;
  char v25 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKSpecificationHasTarget);
  if (swift_dynamicCast())
  {
    outlined init with take of BindableDataInternal(&v26, (uint64_t)v29);
    outlined init with copy of __REAssetService((uint64_t)v29, (uint64_t)&v26);
    uint64_t v23 = a4;
    uint64_t v17 = a3;
    uint64_t v18 = v30;
    uint64_t v19 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
    v17(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v20 = *((void *)&v27 + 1);
    uint64_t v21 = v28;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v26, *((uint64_t *)&v27 + 1));
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v16, v20, v21);
    outlined init with copy of __REAssetService((uint64_t)&v26, (uint64_t)v24);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  else
  {
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t result = outlined destroy of BodyTrackingComponent?((uint64_t)&v26, &demangling cache variable for type metadata for __RKSpecificationHasTarget?);
    *(float *)a4 = a5;
    *(_DWORD *)(a4 + 4) = a1;
    *(unsigned char *)(a4 + 8) = a2 & 1;
  }
  return result;
}

uint64_t specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v21 - v17;
  outlined init with copy of __RKEntityInteractionSpecification(a1, a3, type metadata accessor for __RKEntityStartAnimateActionArguments);
  a2(a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(a3, v18, v12);
  uint64_t v19 = a3 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 56);
  outlined init with copy of UUID?(v19, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  a2((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  return outlined assign with take of UUID?((uint64_t)v8, v19);
}

uint64_t specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v30[1] = a3;
  uint64_t v31 = a2;
  uint64_t v32 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  v30[0] = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v30 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v30 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v30 - v18;
  uint64_t v20 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityInteractionSpecification(a1, (uint64_t)v22, type metadata accessor for __RKEntityTransformActionArguments);
  uint64_t v23 = (uint64_t)&v22[*(int *)(v20 + 60)];
  outlined init with copy of UUID?(v23, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
    outlined destroy of __RKEntityInteractionSpecification((uint64_t)v22, type metadata accessor for __RKEntityTransformActionArguments);
    uint64_t v37 = v20;
    uint64_t v38 = &protocol witness table for __RKEntityTransformActionArguments;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v36);
    outlined init with copy of __RKEntityInteractionSpecification(a1, (uint64_t)boxed_opaque_existential_1, type metadata accessor for __RKEntityTransformActionArguments);
    outlined init with copy of __REAssetService((uint64_t)v36, (uint64_t)v34);
    char v25 = __swift_project_boxed_opaque_existential_1(v36, v37);
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v13, v25, v10);
    v31(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v26 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v35);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v26, v16, v10);
    outlined init with copy of __REAssetService((uint64_t)v34, (uint64_t)v33);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKSpecificationHasTarget);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v9, v10);
    uint64_t v28 = v31;
    v31(v22);
    (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v22, v16, v10);
    uint64_t v29 = v30[0];
    v28(v19);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, v10);
    outlined assign with take of UUID?(v29, v23);
    outlined init with copy of __RKEntityInteractionSpecification((uint64_t)v22, v32, type metadata accessor for __RKEntityTransformActionArguments);
    return outlined destroy of __RKEntityInteractionSpecification((uint64_t)v22, type metadata accessor for __RKEntityTransformActionArguments);
  }
}

uint64_t specialized remapArguments #1 <A>(_:) in __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)@<X0>(void (*a1)(char *)@<X0>, float *a2@<X8>, float a3@<S0>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v20[-2] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v20[-2] - v11;
  v20[0] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKSpecificationHasTarget);
  if (swift_dynamicCast())
  {
    outlined init with take of BindableDataInternal(&v21, (uint64_t)v24);
    outlined init with copy of __REAssetService((uint64_t)v24, (uint64_t)&v21);
    uint64_t v13 = v25;
    uint64_t v14 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    uint64_t v19 = a2;
    v15(v13, v14);
    a1(v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v16 = *((void *)&v22 + 1);
    uint64_t v17 = v23;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v21, *((uint64_t *)&v22 + 1));
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v12, v16, v17);
    outlined init with copy of __REAssetService((uint64_t)&v21, (uint64_t)v20);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t result = outlined destroy of BodyTrackingComponent?((uint64_t)&v21, &demangling cache variable for type metadata for __RKSpecificationHasTarget?);
    *a2 = a3;
  }
  return result;
}

uint64_t Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v50 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v42 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (void *)((char *)v41 - v8);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  gatherInteractionSpecifications #1 (from:) in Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(v4, v10);
  v41[1] = v10;
  specialized enumerateCore #1 (entity:recursive:block:) in Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(v4, 1, v10);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v43 = v11 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v44 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v45 = v11;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (v15) {
    goto LABEL_6;
  }
LABEL_7:
  while (2)
  {
    int64_t v20 = v17 + 1;
    if (!__OFADD__(v17, 1))
    {
      if (v20 < v44)
      {
        unint64_t v21 = *(void *)(v43 + 8 * v20);
        ++v17;
        if (v21) {
          goto LABEL_20;
        }
        int64_t v17 = v20 + 1;
        if (v20 + 1 >= v44) {
          goto LABEL_40;
        }
        unint64_t v21 = *(void *)(v43 + 8 * v17);
        if (v21) {
          goto LABEL_20;
        }
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v44) {
          goto LABEL_40;
        }
        unint64_t v21 = *(void *)(v43 + 8 * v17);
        if (v21)
        {
LABEL_20:
          unint64_t v15 = (v21 - 1) & v21;
          for (unint64_t i = __clz(__rbit64(v21)) + (v17 << 6); ; unint64_t i = v18 | (v17 << 6))
          {
            uint64_t v23 = 8 * i;
            uint64_t v24 = *(void *)(*(void *)(v45 + 48) + v23);
            uint64_t v25 = *(void *)(*(void *)(v45 + 56) + v23);
            int64_t v26 = *(void *)(v25 + 16);
            if (v26)
            {
              unint64_t v48 = v15;
              int64_t v49 = v17;
              uint64_t v56 = MEMORY[0x263F8EE78];
              uint64_t v47 = v24;
              swift_retain();
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
              uint64_t v27 = *(unsigned __int8 *)(v42 + 80);
              uint64_t v46 = v25;
              uint64_t v55 = (v27 + 32) & ~v27;
              uint64_t v28 = v25 + v55;
              uint64_t v29 = *(void *)(v42 + 72);
              uint64_t v30 = v56;
              do
              {
                outlined init with copy of __RKEntityInteractionSpecification(v28, (uint64_t)v6, type metadata accessor for __RKEntityInteractionSpecification);
                uint64_t v32 = v51;
                uint64_t v31 = v52;
                __RKEntityTriggerSpecification.remapUUIDs(entityIdentifierMapping:)(v51, v52, v9);
                uint64_t v33 = v50;
                __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v32, v31, v53, v54, (float *)((char *)v9 + *(int *)(v50 + 20)));
                uint64_t v34 = *(int *)(v33 + 24);
                uint64_t v36 = *(void *)&v6[v34];
                uint64_t v35 = *(void *)&v6[v34 + 8];
                uint64_t v37 = (unint64_t *)((char *)v9 + v34);
                *uint64_t v37 = v36;
                v37[1] = v35;
                swift_bridgeObjectRetain();
                outlined destroy of __RKEntityInteractionSpecification((uint64_t)v6, type metadata accessor for __RKEntityInteractionSpecification);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1);
                  uint64_t v30 = v56;
                }
                unint64_t v39 = *(void *)(v30 + 16);
                unint64_t v38 = *(void *)(v30 + 24);
                if (v39 >= v38 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
                  uint64_t v30 = v56;
                }
                *(void *)(v30 + 16) = v39 + 1;
                outlined init with take of __RKEntityInteractionSpecification((uint64_t)v9, v30 + v55 + v39 * v29, type metadata accessor for __RKEntityInteractionSpecification);
                v28 += v29;
                --v26;
              }
              while (v26);
              swift_bridgeObjectRelease();
              unint64_t v15 = v48;
              int64_t v17 = v49;
              uint64_t v24 = v47;
            }
            else
            {
              swift_retain();
              uint64_t v30 = MEMORY[0x263F8EE78];
            }
            swift_beginAccess();
            if (!static __RKEntityInteractionsComponent.registration) {
              break;
            }
            uint64_t v40 = *((void *)static __RKEntityInteractionsComponent.registration + 3);
            if (*(void *)(v30 + 16))
            {
              if (!REEntityGetCustomComponent() && !MEMORY[0x22A68E460](*(void *)(v24 + 16), v40)
                || !RECustomComponentGetObject())
              {
                break;
              }
              __RKEntityInteractionsComponent.specifications.setter(v30);
            }
            else
            {
              swift_bridgeObjectRelease();
              if (REEntityGetCustomComponent()) {
                REEntityRemoveComponentByClass();
              }
            }
            uint64_t result = swift_release();
            if (!v15) {
              goto LABEL_7;
            }
LABEL_6:
            unint64_t v18 = __clz(__rbit64(v15));
            v15 &= v15 - 1;
          }
          swift_release();
          uint64_t result = swift_bridgeObjectRelease();
          if (!v15) {
            continue;
          }
          goto LABEL_6;
        }
        int64_t v22 = v20 + 3;
        if (v22 < v44)
        {
          unint64_t v21 = *(void *)(v43 + 8 * v22);
          if (v21)
          {
            int64_t v17 = v22;
            goto LABEL_20;
          }
          while (1)
          {
            int64_t v17 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_42;
            }
            if (v17 >= v44) {
              break;
            }
            unint64_t v21 = *(void *)(v43 + 8 * v17);
            ++v22;
            if (v21) {
              goto LABEL_20;
            }
          }
        }
      }
LABEL_40:
      swift_release();
      return swift_release();
    }
    break;
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_227F20164()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t gatherInteractionSpecifications #1 (from:) in Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration)
  {
    if (REEntityGetCustomComponent())
    {
      uint64_t Object = RECustomComponentGetObject();
      if (Object)
      {
        uint64_t v5 = *(void *)(Object + 16);
        outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v10);
        if (v5) {
          uint64_t v6 = v5;
        }
        else {
          uint64_t v6 = __RKEntityInteractionsComponent.decodedJSON()();
        }
        swift_bridgeObjectRetain();
        outlined destroy of __RKEntityInteractionsComponent((uint64_t)v10);
        if (!*(void *)(v6 + 16)) {
          return swift_bridgeObjectRelease();
        }
LABEL_7:
        uint64_t v7 = (uint64_t *)(a2 + 16);
        swift_beginAccess();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v11 = *v7;
        *uint64_t v7 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, a1, isUniquelyReferenced_nonNull_native);
        *uint64_t v7 = v11;
        swift_release();
        swift_bridgeObjectRelease();
        return swift_endAccess();
      }
    }
  }
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    goto LABEL_7;
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Transform>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RESRT>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(IKComponent.Solver.ID, Int)>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  unsigned __int8 *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AcousticModelComponent.SoundReductionMaterial>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AcousticModelComponent.ScatteringMaterial>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AcousticModelComponent.AbsorptionMaterial>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  unsigned __int8 *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID?>, &demangling cache variable for type metadata for UUID?);
  unsigned __int8 *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityInteractionSpecification>, type metadata accessor for __RKEntityInteractionSpecification);
  unsigned __int8 *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer?>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<REMeshAttributeDescriptorRef>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__Downsampling.Factor>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt64]>, &demangling cache variable for type metadata for [UInt64]);
  unsigned __int8 *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  unsigned __int8 *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x263F07508]);
  unsigned __int8 *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>, type metadata accessor for __RKEntityActionSpecification);
  unsigned __int8 *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(IKRig.Joint.ID, Int)>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(IKRig.Constraint.ID, Int)>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  unsigned __int8 *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__SceneImportOperation.ImportedScene>, type metadata accessor for __SceneImportOperation.ImportedScene);
  unsigned __int8 *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  unsigned __int8 *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x263F06EA8]);
  unsigned __int8 *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(URL, Date)>, &demangling cache variable for type metadata for (URL, Date));
  unsigned __int8 *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PhotogrammetrySession.Request>, MEMORY[0x270FB2730]);
  unsigned __int8 *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int16>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int8>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[__RKEntityActionSpecification]>, &demangling cache variable for type metadata for [__RKEntityActionSpecification]);
  unsigned __int8 *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>, type metadata accessor for __RKEntityTriggerSpecification);
  unsigned __int8 *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[__RKEntityTriggerSpecification]>, &demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
  unsigned __int8 *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<REMeshInstanceDefinitionRef>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<REMeshModelDefinitionRef>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  unsigned __int8 *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  unsigned __int8 *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NetworkSendBlockingCategory>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<geom_bbox_2d>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeMutablePointer<Int8>?>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<__SceneImportOperation.__ImportedScene>, type metadata accessor for __SceneImportOperation.__ImportedScene);
  unsigned __int8 *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CurveExtruder.ShapePoint>);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CollisionPlane_v1>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[80 * v8] || v12 >= &v13[80 * v8])
  {
    memcpy(v12, v13, 80 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AudioMixGroup>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 80 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SkeletalPose>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(size: UInt64, offset: Int)>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKRig.Joint>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 176);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[176 * v8]) {
      memmove(v12, v13, 176 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[176 * v8] || v12 >= &v13[176 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    memcpy(v13, v14, v8 << 6);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SceneResourceLoadResult>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 40 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MTLTextureLevelInfo>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[104 * v8] || v12 >= &v13[104 * v8])
  {
    memcpy(v12, v13, 104 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PhotogrammetrySession.PointCloud.Point>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  unint64_t v15 = 32 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource._Proto_Level_v1>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Part>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  unint64_t v15 = v8 << 6;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_Proto_SkeletonDefinition_v1.Joint>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[80 * v8] || v12 >= &v13[80 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LowLevelMesh.Attribute>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LowLevelMesh.Layout>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKSolverDefinition>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 104 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CoreIKTransform>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PiecewiseBezierCurve>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PathSpan>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 80 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtrudedShapeDescriptor>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 520);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[520 * v8]) {
      memmove(v12, v13, 520 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[520 * v8] || v12 >= &v13[520 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CollisionCastHit>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 96 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(pass: __RKMaterialParameterBlock.TransparentPass, techniqueHash: Int)>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Double>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RESystemDependency>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ComponentInfo>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[80 * v8] || v12 >= &v13[80 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[48 * v9]) {
      memmove(v13, v14, 48 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[48 * v9] || v13 >= &v14[48 * v9])
  {
    memcpy(v13, v14, 48 * v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v9] || v14 >= &v15[32 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    memcpy(v14, v15, 16 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    memcpy(v14, v15, 16 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9]) {
      memmove(v14, v15, 4 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v9] || v14 >= &v15[4 * v9])
  {
    memcpy(v14, v15, 4 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 31;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[2 * v9]) {
      memmove(v14, v15, 2 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v9] || v14 >= &v15[2 * v9])
  {
    memcpy(v14, v15, 2 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v9]) {
      memmove(v13, v14, v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v9] || v14 >= &v15[32 * v9])
  {
    memcpy(v14, v15, 32 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String, UInt)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String, UInt));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any, Any)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 96 * v8) {
      memmove(v10 + 4, a4 + 4, 96 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 96 * v8 || v12 >= v13 + 96 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, Any, Any));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(__REAsset, [__REAssetDescriptor], RESceneDescriptor)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__REAsset, [__REAssetDescriptor], RESceneDescriptor));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<Entity.LoadStatistics.Observer>>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  uint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 < a4 || v13 >= v14 + 8 * v8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineParameterProtocol>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameterProtocol);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(URL, Date)>, &demangling cache variable for type metadata for (URL, Date));
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Int)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Int));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: _Proto_SkeletonDefinition_v1.Joint)>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 96 * v8) {
      memmove(v10 + 4, a4 + 4, 96 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 96 * v8 || v12 >= v13 + 96 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: _Proto_SkeletonDefinition_v1.Joint));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  long long v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v16 + v20;
  int64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    uint64_t v14 = _swift_stdlib_malloc_size(v13);
    unint64_t v15 = v14 - 32;
    if (v14 < 32) {
      unint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v16 = (unint64_t)(v13 + 4);
  size_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  long long v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v16 + v20;
  int64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_AHs5NeverOTg5051_s10RealityKit30__RKEntityTriggerSpecificationO0A10D64E10remapUUIDs23entityIdentifierMappingAC0F04UUIDVAIXE_tFA2IXEfU_A2HIgnr_Tf1cn_n04_s17h91Foundation15UuidRemapHelperO31remapIdentifiersAndInteractions4rooty0A3Kit6EntityC_tFZAF34__j11InteractionL24VAJXEfU0_0B04UUIDVAMcfU_0hD00Z11RemapHelperOXMtSDyA2HGz_XxTf1nc_nTf4ndg_n(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v73 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v77 = (char *)v70 - v8;
  MEMORY[0x270FA5388](v9);
  long long v80 = (char *)v70 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v76 = (char *)v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v85 = (char *)v70 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v88 = (char *)v70 - v17;
  int64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = MEMORY[0x263F8EE78];
  if (!v18) {
    return v19;
  }
  v70[1] = v2;
  uint64_t v91 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
  unint64_t v78 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = a1 + v78;
  unint64_t v21 = (void *)(a2 + 16);
  uint64_t v22 = *(void *)(v12 + 72);
  uint64_t v79 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v81 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v82 = (void (**)(char *, unint64_t, uint64_t))(v12 + 16);
  uint64_t v86 = v22;
  uint64_t v87 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
  uint64_t v71 = (void (**)(unint64_t, char *, uint64_t))(v12 + 40);
  uint64_t v74 = a2;
  uint64_t v75 = (void (**)(uint64_t, uint64_t))(v12 + 8);
  uint64_t v84 = (void *)(a2 + 16);
  while (1)
  {
    swift_beginAccess();
    uint64_t v23 = *v21;
    if (!*(void *)(*v21 + 16))
    {
      int64_t v83 = v18;
      uint64_t v89 = v20;
      uint64_t v28 = (uint64_t)v80;
      uint64_t v29 = *v79;
      (*v79)(v80, 1, 1, v11);
      swift_retain();
      goto LABEL_9;
    }
    swift_retain();
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
    if ((v25 & 1) == 0) {
      break;
    }
    int64_t v26 = v79;
    unint64_t v27 = *(void *)(v23 + 56) + v24 * v86;
    uint64_t v28 = (uint64_t)v80;
    (*v82)(v80, v27, v11);
    uint64_t v29 = *v26;
    (*v26)((char *)v28, 0, 1, v11);
    if ((*v81)(v28, 1, v11) == 1)
    {
      int64_t v83 = v18;
      uint64_t v89 = v20;
      goto LABEL_9;
    }
    (*v87)(v88, v28, v11);
    unint64_t v21 = v84;
LABEL_30:
    swift_endAccess();
    swift_release();
    uint64_t v19 = v91;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
      uint64_t v19 = v91;
    }
    unint64_t v67 = *(void *)(v19 + 16);
    unint64_t v66 = *(void *)(v19 + 24);
    if (v67 >= v66 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
      uint64_t v19 = v91;
    }
    *(void *)(v19 + 16) = v67 + 1;
    uint64_t v68 = v86;
    (*v87)((char *)(v19 + v78 + v67 * v86), (uint64_t)v88, v11);
    uint64_t v91 = v19;
    v20 += v68;
    if (!--v18) {
      return v19;
    }
  }
  int64_t v83 = v18;
  uint64_t v89 = v20;
  uint64_t v29 = *v79;
  uint64_t v28 = (uint64_t)v80;
  (*v79)(v80, 1, 1, v11);
LABEL_9:
  uint64_t v30 = (uint64_t)v77;
  outlined destroy of BodyTrackingComponent?(v28, &demangling cache variable for type metadata for UUID?);
  uint64_t v31 = v88;
  UUID.init()();
  uint64_t v32 = *v82;
  uint64_t v33 = (uint64_t)v85;
  (*v82)(v85, v89, v11);
  v32((char *)v30, (unint64_t)v31, v11);
  v29((char *)v30, 0, 1, v11);
  if ((*v81)(v30, 1, v11) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v30, &demangling cache variable for type metadata for UUID?);
    uint64_t v34 = v84;
    swift_bridgeObjectRetain();
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
    char v37 = v36;
    swift_bridgeObjectRelease();
    unint64_t v38 = v75;
    if (v37)
    {
      uint64_t v72 = v29;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v40 = (void *)*v34;
      uint64_t v90 = (void *)*v34;
      *uint64_t v34 = 0x8000000000000000;
      uint64_t v20 = v89;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        unint64_t v38 = v75;
        uint64_t v40 = v90;
      }
      int64_t v41 = v35;
      unint64_t v42 = v35 * v86;
      uint64_t v43 = *v38;
      (*v38)(v40[6] + v42, v11);
      uint64_t v44 = (uint64_t)v90;
      unint64_t v45 = v90[7] + v42;
      uint64_t v46 = (uint64_t)v73;
      (*v87)(v73, v45, v11);
      specialized _NativeDictionary._delete(at:)(v41, v44);
      *uint64_t v34 = v44;
      swift_bridgeObjectRelease();
      v72((char *)v46, 0, 1, v11);
    }
    else
    {
      uint64_t v46 = (uint64_t)v73;
      v29(v73, 1, 1, v11);
      uint64_t v43 = *v38;
      uint64_t v20 = v89;
    }
    v43((uint64_t)v85, v11);
    outlined destroy of BodyTrackingComponent?(v46, &demangling cache variable for type metadata for UUID?);
    unint64_t v21 = v84;
    goto LABEL_29;
  }
  uint64_t v47 = *v87;
  (*v87)(v76, v30, v11);
  unint64_t v48 = v84;
  int v49 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v90 = (void *)*v48;
  uint64_t v50 = v90;
  *unint64_t v48 = 0x8000000000000000;
  unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
  uint64_t v53 = v50[2];
  BOOL v54 = (v51 & 1) == 0;
  uint64_t v55 = v53 + v54;
  if (!__OFADD__(v53, v54))
  {
    char v56 = v51;
    if (v50[3] < v55)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, v49);
      unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v85);
      uint64_t v20 = v89;
      if ((v56 & 1) != (v58 & 1)) {
        goto LABEL_38;
      }
      unint64_t v52 = v57;
      uint64_t v59 = v90;
      if ((v56 & 1) == 0) {
        goto LABEL_26;
      }
LABEL_23:
      (*v71)(v59[7] + v52 * v86, v76, v11);
      uint64_t v60 = (uint64_t)v85;
LABEL_28:
      unint64_t v21 = v84;
      *uint64_t v84 = v90;
      swift_bridgeObjectRelease();
      (*v75)(v60, v11);
LABEL_29:
      int64_t v18 = v83;
      goto LABEL_30;
    }
    uint64_t v20 = v89;
    if (v49)
    {
      uint64_t v59 = v90;
      if (v51) {
        goto LABEL_23;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v59 = v90;
      if (v56) {
        goto LABEL_23;
      }
    }
LABEL_26:
    v59[(v52 >> 6) + 8] |= 1 << v52;
    unint64_t v61 = v52 * v86;
    unint64_t v62 = v59[6] + v52 * v86;
    uint64_t v60 = (uint64_t)v85;
    v32((char *)v62, (unint64_t)v85, v11);
    v47((char *)(v59[7] + v61), (uint64_t)v76, v11);
    uint64_t v63 = v59[2];
    BOOL v64 = __OFADD__(v63, 1);
    uint64_t v65 = v63 + 1;
    if (v64) {
      goto LABEL_37;
    }
    v59[2] = v65;
    goto LABEL_28;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit29__RKEntityActionSpecificationOG_AHs5NeverOTg504_s10d7Kit29__fgH116O0A10FoundationE10remapUUIDs23entityIdentifierMapping010identifierK0AC0F04UUIDVAJc_A2JctF0G9ArgumentsL_yxxlFA2CXEfU_0N04UUIDVAOIegnr_A2OIegnr_Tf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v7 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v11)
  {
    v19[1] = v5;
    uint64_t v24 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v12 = v24;
    unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = *(void *)(v8 + 72);
    do
    {
      __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)(v20, v21, v22, v23);
      uint64_t v24 = v12;
      unint64_t v17 = *(void *)(v12 + 16);
      unint64_t v16 = *(void *)(v12 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v12 = v24;
      }
      *(void *)(v12 + 16) = v17 + 1;
      outlined init with take of __RKEntityInteractionSpecification((uint64_t)v10, v12 + v13 + v17 * v15, type metadata accessor for __RKEntityActionSpecification);
      v14 += v15;
      --v11;
    }
    while (v11);
  }
  return v12;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_AHs5NeverOTg5051_s10RealityKit30__RKEntityTriggerSpecificationO0A10D64E10remapUUIDs23entityIdentifierMappingAC0F04UUIDVAIXE_tFA2IXEfU_A2HIgnr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  int64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (v8)
  {
    v15[1] = v3;
    uint64_t v20 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v9 = v20;
    unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v10 = a1 + v16;
    uint64_t v11 = *(void *)(v5 + 72);
    do
    {
      v18(v10);
      uint64_t v20 = v9;
      unint64_t v13 = *(void *)(v9 + 16);
      unint64_t v12 = *(void *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v9 = v20;
      }
      *(void *)(v9 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v16 + v13 * v11, v7, v17);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t specialized enumerateCore #1 (entity:recursive:block:) in Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(uint64_t a1, int a2, uint64_t a3)
{
  int v68 = a2;
  uint64_t v66 = type metadata accessor for Data.Deallocator();
  uint64_t v4 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v6 = (char *)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
    swift_release();
    return swift_release();
  }
  BOOL v64 = v6;
  uint64_t v7 = 0;
  uint64_t v67 = a3;
  int64_t v8 = (void *)(a3 + 16);
  unsigned int v63 = *MEMORY[0x263F06F00];
  unint64_t v61 = (void (**)(char *, uint64_t))(v4 + 8);
  unint64_t v62 = (void (**)(char *, void, uint64_t))(v4 + 104);
  while (v7 < REEntityGetChildCount())
  {
    uint64_t Child = REEntityGetChild();
    if (!Child) {
      goto LABEL_75;
    }
    uint64_t v10 = Child;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v11 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if (REEntityIsBeingDestroyed()) {
        goto LABEL_73;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        uint64_t Object = RECustomComponentGetObject();
        if (Object)
        {
          unint64_t v13 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8)) {
            BOOL v14 = 1;
          }
          else {
            BOOL v14 = v13 == 0;
          }
          if (v14)
          {
            swift_retain();
          }
          else
          {
            int v15 = *v13;
            uint64_t v16 = String.init(utf8String:)();
            if (v17) {
              Swift::Int v18 = v16;
            }
            else {
              Swift::Int v18 = 0;
            }
            if (v17) {
              unint64_t v19 = v17;
            }
            else {
              unint64_t v19 = 0xE000000000000000;
            }
            unint64_t v13 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v15 == 42, v18, v19);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(void *)(swift_allocObject() + 16) = v13;
          }
          if (!v13) {
            goto LABEL_76;
          }
          swift_retain();
          uint64_t v20 = String.init(utf8String:)();
          unint64_t v22 = v21;
          swift_release();
          if (v22) {
            uint64_t v23 = v20;
          }
          else {
            uint64_t v23 = 0;
          }
          if (!v22) {
            unint64_t v22 = 0xE000000000000000;
          }
          uint64_t v24 = (NSString *)MEMORY[0x22A688A50](v23, v22);
          swift_bridgeObjectRelease();
          Class v25 = NSClassFromString(v24);

          swift_release();
          if (v25)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            uint64_t v26 = swift_dynamicCastMetatype();
            if (v26)
            {
              uint64_t v27 = (*(uint64_t (**)(void))(v26 + 232))();
              uint64_t v28 = *(void *)(v27 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v28, 0);
              *(void *)(v27 + 16) = v10;
              MEMORY[0x22A68E750](v10, v27);
              swift_release();
              goto LABEL_35;
            }
          }
        }
      }
      uint64_t v11 = makeEntity(for:)(v10);
    }
    uint64_t v27 = v11;
LABEL_35:
    if (v7 >= REEntityGetChildCount()) {
      goto LABEL_71;
    }
    swift_beginAccess();
    if (!static __RKEntityInteractionsComponent.registration
      || !REEntityGetCustomComponent()
      || (uint64_t v29 = RECustomComponentGetObject()) == 0)
    {
      uint64_t v31 = (void *)MEMORY[0x263F8EE78];
      if (!*(void *)(MEMORY[0x263F8EE78] + 16)) {
        goto LABEL_59;
      }
      goto LABEL_42;
    }
    uint64_t v30 = *(void **)(v29 + 16);
    outlined init with copy of __RKEntityInteractionsComponent(v29, (uint64_t)v69);
    if (v30)
    {
      uint64_t v31 = v30;
      goto LABEL_58;
    }
    uint64_t v44 = v69[0];
    if (!v69[0]) {
      goto LABEL_56;
    }
    uint64_t v65 = 0;
    size_t v45 = strlen(v69[0]);
    uint64_t v46 = v64;
    (*v62)(v64, v63, v66);
    uint64_t v47 = Data.Deallocator._deallocator.getter();
    if (v45)
    {
      v60[1] = v47;
      type metadata accessor for __DataStorage();
      swift_allocObject();
      swift_retain();
      uint64_t v48 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      uint64_t v49 = specialized Data._Representation.init(_:count:)(v48, v45);
      unint64_t v51 = v50;
      swift_release();
    }
    else
    {
      unint64_t v52 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
      v52(v44, 0);
      swift_release();
      swift_release();
      uint64_t v49 = 0;
      unint64_t v51 = 0xC000000000000000;
    }
    (*v61)(v46, v66);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
    lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]();
    uint64_t v53 = v65;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v53)
    {
      swift_release();
      outlined consume of Data._Representation(v49, v51);

LABEL_56:
      uint64_t v31 = (void *)MEMORY[0x263F8EE78];
      goto LABEL_58;
    }
    swift_release();
    outlined consume of Data._Representation(v49, v51);
    uint64_t v31 = v70;
LABEL_58:
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)v69);
    if (!v31[2])
    {
LABEL_59:
      swift_bridgeObjectRelease();
      if (v68) {
        goto LABEL_65;
      }
      goto LABEL_3;
    }
LABEL_42:
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v70 = (void *)*v8;
    uint64_t v33 = v70;
    *int64_t v8 = 0x8000000000000000;
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
    uint64_t v36 = v33[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      goto LABEL_72;
    }
    char v39 = v34;
    if (v33[3] >= v38)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v42 = v70;
        if (v34) {
          goto LABEL_49;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        unint64_t v42 = v70;
        if (v39) {
          goto LABEL_49;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
      uint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_77;
      }
      unint64_t v35 = v40;
      unint64_t v42 = v70;
      if (v39)
      {
LABEL_49:
        uint64_t v43 = v42[7];
        swift_bridgeObjectRelease();
        *(void *)(v43 + 8 * v35) = v31;
        goto LABEL_64;
      }
    }
    v42[(v35 >> 6) + 8] |= 1 << v35;
    uint64_t v54 = 8 * v35;
    *(void *)(v42[6] + v54) = v27;
    *(void *)(v42[7] + v54) = v31;
    uint64_t v55 = v42[2];
    BOOL v56 = __OFADD__(v55, 1);
    uint64_t v57 = v55 + 1;
    if (v56) {
      goto LABEL_74;
    }
    v42[2] = v57;
    swift_retain();
LABEL_64:
    *int64_t v8 = v42;
    swift_release();
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (v68)
    {
LABEL_65:
      uint64_t v58 = v67;
      swift_retain();
      specialized enumerateCore #1 (entity:recursive:block:) in Entity.__remapUUIDs(entityIdentifierMapping:interactionIdentifierMapping:)(v27, 1, v58);
      swift_release();
    }
LABEL_3:
    ++v7;
    swift_release();
    if (v7 >= REEntityGetChildCount())
    {
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  swift_release();
  __break(1u);
LABEL_76:
  swift_release();
  __break(1u);
LABEL_77:
  type metadata accessor for Entity();
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _s10RealityKit29__RKEntityHideActionArgumentsVWOdTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of __RKEntityInteractionSpecification(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of __RKEntityInteractionSpecification(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of __RKEntityInteractionSpecification(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
    lazy protocol witness table accessor for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification)
  {
    type metadata accessor for __RKEntityInteractionSpecification(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification);
  }
  return result;
}

uint64_t static __RERenderGraphEmitter.firstUsedEmitter()()
{
  uint64_t v8 = 0;
  if (one-time initialization token for dispatchQueue != -1) {
    swift_once();
  }
  Swift::UInt8 v1 = static __RERenderGraphEmitter.dispatchQueue;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = &v8;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in static __RERenderGraphEmitter.firstUsedEmitter();
  *(void *)(v3 + 24) = v2;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_28;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

uint64_t __RERenderGraphEmitter.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t one-time initialization function for dispatchQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v5 - 8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v7[1] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F8F130], v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static __RERenderGraphEmitter.dispatchQueue = result;
  return result;
}

void *one-time initialization function for activeEmitters()
{
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static __RERenderGraphEmitter.activeEmitters = result;
  return result;
}

unint64_t __RERenderGraphEmitter.LoadError.errorDescription.getter(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x6E7562206E692022;
  v5._object = (void *)0xEB00000000656C64;
  String.append(_:)(v5);
  return 0xD000000000000023;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance __RERenderGraphEmitter.LoadError()
{
  return __RERenderGraphEmitter.LoadError.errorDescription.getter(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t static __RERenderGraphEmitter.__load(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3) {
    id v6 = a3;
  }
  else {
    id v6 = objc_msgSend(self, sel_mainBundle);
  }
  id v7 = a3;
  uint64_t v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v18);
  uint64_t v9 = v19;
  uint64_t v10 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 32);
  swift_retain();
  v11(v9, v10);
  unint64_t v12 = (void *)MEMORY[0x22A688A50](a1, a2);
  unint64_t v13 = (void *)MEMORY[0x22A688A50](0xD000000000000014, 0x8000000228352A20);
  uint64_t v14 = REAssetManagerAssetHandleCreateWithBundleResource();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  if (v14)
  {
    type metadata accessor for __RERenderGraphEmitter();
    a2 = swift_allocObject();
    RERetain();
    type metadata accessor for __REAsset();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v14;
    *(void *)(a2 + 16) = v15;
    RERelease();
  }
  else
  {
    lazy protocol witness table accessor for type __RERenderGraphEmitter.LoadError and conformance __RERenderGraphEmitter.LoadError();
    swift_allocError();
    *uint64_t v16 = a1;
    v16[1] = a2;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }

  swift_release();
  return a2;
}

uint64_t __RERenderGraphEmitter.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t closure #1 in static __RERenderGraphEmitter.firstUsedEmitter()(uint64_t a1, uint64_t *a2)
{
  if (one-time initialization token for activeEmitters != -1) {
LABEL_28:
  }
    swift_once();
  unint64_t v22 = (char *)static __RERenderGraphEmitter.activeEmitters + 64;
  uint64_t v2 = 1 << *((unsigned char *)static __RERenderGraphEmitter.activeEmitters + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *((void *)static __RERenderGraphEmitter.activeEmitters + 8);
  int64_t v23 = (unint64_t)(v2 + 63) >> 6;
  uint64_t v5 = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    do
    {
      if (v4)
      {
        unint64_t v7 = __clz(__rbit64(v4));
        v4 &= v4 - 1;
        unint64_t v8 = v7 | (v6 << 6);
      }
      else
      {
        int64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        if (v9 >= v23) {
          return swift_release();
        }
        unint64_t v10 = *(void *)&v22[8 * v9];
        ++v6;
        if (!v10)
        {
          int64_t v6 = v9 + 1;
          if (v9 + 1 >= v23) {
            return swift_release();
          }
          unint64_t v10 = *(void *)&v22[8 * v6];
          if (!v10)
          {
            int64_t v6 = v9 + 2;
            if (v9 + 2 >= v23) {
              return swift_release();
            }
            unint64_t v10 = *(void *)&v22[8 * v6];
            if (!v10)
            {
              int64_t v11 = v9 + 3;
              if (v11 >= v23) {
                return swift_release();
              }
              unint64_t v10 = *(void *)&v22[8 * v11];
              if (!v10)
              {
                while (1)
                {
                  int64_t v6 = v11 + 1;
                  if (__OFADD__(v11, 1)) {
                    goto LABEL_27;
                  }
                  if (v6 >= v23) {
                    return swift_release();
                  }
                  unint64_t v10 = *(void *)&v22[8 * v6];
                  ++v11;
                  if (v10) {
                    goto LABEL_20;
                  }
                }
              }
              int64_t v6 = v11;
            }
          }
        }
LABEL_20:
        unint64_t v4 = (v10 - 1) & v10;
        unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
      }
    }
    while (*(uint64_t *)(*(void *)(v5 + 56) + 8 * v8) < 1);
    swift_bridgeObjectRetain();
    uint64_t v12 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v12, (uint64_t)v24);
    uint64_t v13 = v25;
    uint64_t v14 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 32);
    swift_retain();
    v15(v13, v14);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    if (AssetHandle) {
      break;
    }
    swift_release();
  }
  type metadata accessor for __RERenderGraphEmitter();
  uint64_t v17 = swift_allocObject();
  RERetain();
  type metadata accessor for __REAsset();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = AssetHandle;
  *(void *)(v17 + 16) = v18;
  swift_release();
  swift_release();
  *a2 = v17;
  return swift_release();
}

uint64_t __RERenderGraphEmitter.unsetup(mgr:)(uint64_t a1)
{
  if (one-time initialization token for dispatchQueue != -1) {
    swift_once();
  }
  uint64_t v3 = static __RERenderGraphEmitter.dispatchQueue;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in __RERenderGraphEmitter.unsetup(mgr:);
  *(void *)(v5 + 24) = v4;
  v9[4] = _sIg_Ieg_TRTA_0;
  _OWORD v9[5] = v5;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  _OWORD v9[2] = thunk for @escaping @callee_guaranteed () -> ();
  void v9[3] = &block_descriptor_7;
  int64_t v6 = _Block_copy(v9);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in __RERenderGraphEmitter.unsetup(mgr:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (void *)((char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33[0] = *(void *)(a2 + 16);
  swift_retain();
  id v8 = (id)REAssetHandleCopyAssetIdentifierString();
  Swift::String v9 = String.init(_:)(v8);
  uint64_t countAndFlagsBits = v9._countAndFlagsBits;
  Swift::UInt v35 = OpaquePointer.hashValue.getter();

  v33[1] = a1;
  swift_release();
  if (one-time initialization token for activeEmitters != -1) {
    swift_once();
  }
  unint64_t v10 = static __RERenderGraphEmitter.activeEmitters;
  uint64_t v11 = one-time initialization token for dispatchQueue;
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)static __RERenderGraphEmitter.dispatchQueue;
  *unint64_t v7 = static __RERenderGraphEmitter.dispatchQueue;
  uint64_t v13 = *MEMORY[0x263F8F0E0];
  char v34 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  v34(v7, v13, v4);
  id v14 = v12;
  char v15 = _dispatchPreconditionTest(_:)();
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t))(v5 + 8);
  uint64_t result = v16(v7, v4);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v10[2])
  {
    swift_bridgeObjectRetain();
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v35, countAndFlagsBits, (uint64_t)v9._object);
    if (v19)
    {
      uint64_t v20 = *(void *)(v10[7] + 8 * v18);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v20 = 0;
LABEL_12:
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v23 = static __RERenderGraphEmitter.activeEmitters;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  BOOL v37 = v23;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, v35, countAndFlagsBits, (uint64_t)v9._object, isUniquelyReferenced_nonNull_native);
  uint64_t v25 = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static __RERenderGraphEmitter.activeEmitters = v25;
  swift_bridgeObjectRelease();
  uint64_t v26 = static __RERenderGraphEmitter.activeEmitters;
  uint64_t v27 = (void *)static __RERenderGraphEmitter.dispatchQueue;
  *unint64_t v7 = static __RERenderGraphEmitter.dispatchQueue;
  v34(v7, v13, v4);
  swift_bridgeObjectRetain();
  id v28 = v27;
  char v29 = _dispatchPreconditionTest(_:)();
  uint64_t result = v16(v7, v4);
  if ((v29 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  if (v26[2])
  {
    swift_bridgeObjectRetain();
    unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v35, countAndFlagsBits, (uint64_t)v9._object);
    if (v31)
    {
      uint64_t v32 = *(void *)(v26[7] + 8 * v30);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease_n();
      if (v32 > 0) {
        return result;
      }
      return RERenderGraphEmitterAssetUnregisterProviders();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return RERenderGraphEmitterAssetUnregisterProviders();
}

uint64_t __RERenderGraphEmitter.setup(mgr:)(uint64_t a1)
{
  if (one-time initialization token for dispatchQueue != -1) {
    swift_once();
  }
  uint64_t v3 = static __RERenderGraphEmitter.dispatchQueue;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in __RERenderGraphEmitter.setup(mgr:);
  *(void *)(v5 + 24) = v4;
  v9[4] = thunk for @callee_guaranteed () -> ()partial apply;
  _OWORD v9[5] = v5;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  _OWORD v9[2] = thunk for @escaping @callee_guaranteed () -> ();
  void v9[3] = &block_descriptor_13_0;
  uint64_t v6 = _Block_copy(v9);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in __RERenderGraphEmitter.setup(mgr:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (void *)((char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32[1] = *(void *)(a2 + 16);
  swift_retain();
  id v8 = (id)REAssetHandleCopyAssetIdentifierString();
  Swift::String v9 = String.init(_:)(v8);
  uint64_t countAndFlagsBits = v9._countAndFlagsBits;
  Swift::UInt v33 = OpaquePointer.hashValue.getter();

  v32[2] = a1;
  swift_release();
  if (one-time initialization token for activeEmitters != -1) {
    swift_once();
  }
  unint64_t v10 = static __RERenderGraphEmitter.activeEmitters;
  uint64_t v11 = one-time initialization token for dispatchQueue;
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)static __RERenderGraphEmitter.dispatchQueue;
  *unint64_t v7 = static __RERenderGraphEmitter.dispatchQueue;
  uint64_t v13 = *MEMORY[0x263F8F0E0];
  id v14 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  v14(v7, v13, v4);
  id v15 = v12;
  char v16 = _dispatchPreconditionTest(_:)();
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t))(v5 + 8);
  uint64_t result = v17(v7, v4);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v10[2])
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v33, countAndFlagsBits, (uint64_t)v9._object);
    if (v20)
    {
      uint64_t v21 = *(void *)(v10[7] + 8 * v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_13:
  RERenderGraphEmitterAssetRegisterProviders();
LABEL_14:
  uint64_t v22 = static __RERenderGraphEmitter.activeEmitters;
  int64_t v23 = (void *)static __RERenderGraphEmitter.dispatchQueue;
  *unint64_t v7 = static __RERenderGraphEmitter.dispatchQueue;
  v14(v7, v13, v4);
  swift_bridgeObjectRetain();
  id v24 = v23;
  char v25 = _dispatchPreconditionTest(_:)();
  uint64_t result = v17(v7, v4);
  if ((v25 & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v22[2])
  {
    swift_bridgeObjectRetain();
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v33, countAndFlagsBits, (uint64_t)v9._object);
    if (v27)
    {
      uint64_t v28 = *(void *)(v22[7] + 8 * v26);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v28 = 0;
LABEL_21:
  if (!__OFADD__(v28, 1))
  {
    char v29 = static __RERenderGraphEmitter.activeEmitters;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::UInt v35 = v29;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28 + 1, v33, countAndFlagsBits, (uint64_t)v9._object, isUniquelyReferenced_nonNull_native);
    char v31 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static __RERenderGraphEmitter.activeEmitters = v31;
    return swift_bridgeObjectRelease();
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t __RERenderGraphEmitter.execute(mgr:)()
{
  return RERenderGraphEmitterAssetExecute();
}

Swift::Void __swiftcall __RERenderGraphEmitter.setWireframeMode(displayWireframe:)(Swift::Bool displayWireframe)
{
  MEMORY[0x270F1F998](*(void *)(*(void *)(v1 + 16) + 16), displayWireframe);
}

void __RERenderGraphEmitter.__handle.getter(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 16) + 16);
}

uint64_t __RERenderGraphEmitter.deinit()
{
  swift_release();
  return v0;
}

uint64_t __RERenderGraphEmitter.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EmitterAssetKey()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EmitterAssetKey()
{
  Swift::UInt v1 = *v0;
  String.hash(into:)();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EmitterAssetKey()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EmitterAssetKey(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[1] == a2[1] && a1[2] == a2[2]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

unint64_t lazy protocol witness table accessor for type __RERenderGraphEmitter.LoadError and conformance __RERenderGraphEmitter.LoadError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RERenderGraphEmitter.LoadError and conformance __RERenderGraphEmitter.LoadError;
  if (!lazy protocol witness table cache variable for type __RERenderGraphEmitter.LoadError and conformance __RERenderGraphEmitter.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RERenderGraphEmitter.LoadError and conformance __RERenderGraphEmitter.LoadError);
  }
  return result;
}

uint64_t type metadata accessor for __RERenderGraphEmitter()
{
  return self;
}

uint64_t sub_227F280DC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_227F28108()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t method lookup function for __RERenderGraphEmitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RERenderGraphEmitter);
}

uint64_t dispatch thunk of __RERenderGraphEmitter.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.setup(mgr:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.execute(mgr:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.setWireframeMode(displayWireframe:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.__handle.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

void *type metadata accessor for __RERenderGraphEmitter.LoadError()
{
  return &unk_26DC96118;
}

uint64_t sub_227F2820C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in static __RERenderGraphEmitter.firstUsedEmitter()()
{
  return closure #1 in static __RERenderGraphEmitter.firstUsedEmitter()(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_227F28224()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for EmitterAssetKey(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for EmitterAssetKey()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for EmitterAssetKey(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EmitterAssetKey(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EmitterAssetKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmitterAssetKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmitterAssetKey()
{
  return &type metadata for EmitterAssetKey;
}

unint64_t lazy protocol witness table accessor for type EmitterAssetKey and conformance EmitterAssetKey()
{
  unint64_t result = lazy protocol witness table cache variable for type EmitterAssetKey and conformance EmitterAssetKey;
  if (!lazy protocol witness table cache variable for type EmitterAssetKey and conformance EmitterAssetKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmitterAssetKey and conformance EmitterAssetKey);
  }
  return result;
}

uint64_t Material.name.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 8))();
  swift_beginAccess();
  swift_release();
  uint64_t result = REMaterialAssetGetSourceName();
  if (result) {
    return String.init(cString:)();
  }
  return result;
}

void SimpleMaterial.color.getter(uint64_t a1@<X8>)
{
  uint64_t v5[3] = &type metadata for SimpleMaterial;
  v5[4] = &protocol witness table for SimpleMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of SimpleMaterial(v1, v5[0] + 16);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v3 = *(void **)(v1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v5, v4, v3, a1);
}

void SimpleMaterial.metallic.getter(unint64_t *a1@<X8>)
{
  unint64_t v3 = (unint64_t)specialized Material.getTexture(_:)(9);
  if (!v3)
  {
    uint64_t v5 = *(void **)(v1 + 72);
    swift_bridgeObjectRetain_n();
    id v6 = v5;
    swift_bridgeObjectRetain_n();
    id v7 = v6;
    specialized String.withCString<A>(_:)(0x63696C6C6174656DLL, 0xED0000656C616353, v7, (uint64_t)v8);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9 != 255)
    {
      if (v9 == 2)
      {
        unint64_t v4 = LODWORD(v8[0]);
        goto LABEL_8;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v8[0], (uint64_t)v8[1], (uint64_t)v8[2], (uint64_t)v8[3], (uint64_t)v8[4], (uint64_t)v8[5], (uint64_t)v8[6], (uint64_t)v8[7], v9);
    }
    unint64_t v4 = 0;
    goto LABEL_8;
  }
  unint64_t v4 = v3 | 0x8000000000000000;
LABEL_8:
  *a1 = v4;
}

void SimpleMaterial.roughness.getter(unint64_t *a1@<X8>)
{
  unint64_t v3 = (unint64_t)specialized Material.getTexture(_:)(10);
  if (!v3)
  {
    uint64_t v5 = *(void **)(v1 + 72);
    swift_bridgeObjectRetain_n();
    id v6 = v5;
    swift_bridgeObjectRetain_n();
    id v7 = v6;
    specialized String.withCString<A>(_:)(0x73656E6867756F72, 0xEE00656C61635373, v7, (uint64_t)v8);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9 != 255)
    {
      if (v9 == 2)
      {
        unint64_t v4 = LODWORD(v8[0]);
        goto LABEL_8;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v8[0], (uint64_t)v8[1], (uint64_t)v8[2], (uint64_t)v8[3], (uint64_t)v8[4], (uint64_t)v8[5], (uint64_t)v8[6], (uint64_t)v8[7], v9);
    }
    unint64_t v4 = 1065353216;
    goto LABEL_8;
  }
  unint64_t v4 = v3 | 0x8000000000000000;
LABEL_8:
  *a1 = v4;
}

void SimpleMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  *a1 = *(void *)(v1 + 120) == 1;
}

void PortalMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  *a1 = *(void *)(v1 + 40) == 1;
}

void VideoMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  *a1 = *(void *)(v1 + 56) == 1;
}

uint64_t static __MaterialResource.createMaterial(assetPath:in:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized static __MaterialResource.createAssetRef(named:in:)(a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = result;
    REAssetHandleLoadNow();
    if (REAssetHandleLoadFailed())
    {
      swift_bridgeObjectRetain();
      FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
      swift_allocError();
      *(void *)uint64_t v14 = a1;
      *(void *)(v14 + 8) = a2;
      *(void *)(v14 + 16) = v11;
      *(void *)(v14 + 24) = v13;
      *(unsigned char *)(v14 + 32) = 1;
      swift_willThrow();
    }
    else
    {
      id v15 = (void *)REMaterialParameterBlockValueCreate();
      uint64_t v16 = MEMORY[0x263F8EE78];
      char v17 = 0;
      uint64_t v18 = 0;
      unint64_t v19 = v15;
      static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v9, &v16, 0, 0, 255, a4);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return RERelease();
  }
  return result;
}

void __MaterialResource.CoreMaterialFunction.getSurfaceShader()(uint64_t a1@<X8>)
{
  uint64_t v4 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v5 = v1[4];
  id v7 = (void *)v1[5];
  uint64_t v18 = v6;
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    goto LABEL_5;
  }
  if (*(_DWORD *)(v5 + 32) == 2)
  {
    char v9 = 1;
LABEL_13:
    swift_bridgeObjectRetain();
    CustomMaterial.SurfaceShader.init(named:in:linkSPI:)(v4, v3, &v18, v9, (uint64_t)&v19);
    uint64_t v14 = v20;
    if (v20)
    {
      id v15 = v22;
      id v16 = v7;
    }
    else
    {
      id v16 = v22;
    }
    char v17 = v23;
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = v14;
    *(_OWORD *)(a1 + 16) = v21;
    *(void *)(a1 + 32) = v16;
    *(unsigned char *)(a1 + 40) = v17;
    return;
  }
  if (v8 == 1)
  {
LABEL_5:
    char v9 = 0;
    goto LABEL_13;
  }
  uint64_t v10 = 9;
  while (1)
  {
    uint64_t v11 = v10 - 7;
    if (__OFADD__(v10 - 8, 1)) {
      break;
    }
    int v12 = *(_DWORD *)(v5 + 4 * v10);
    char v9 = v12 == 2;
    ++v10;
    if (v12 == 2 || v11 == v8) {
      goto LABEL_13;
    }
  }
  __break(1u);
}

void __MaterialResource.CoreMaterialFunction.getGeometryModifier()(uint64_t a1@<X8>)
{
  uint64_t v4 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v5 = v1[4];
  id v7 = (void *)v1[5];
  uint64_t v18 = v6;
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    goto LABEL_5;
  }
  if (*(_DWORD *)(v5 + 32) == 8)
  {
    char v9 = 1;
LABEL_13:
    swift_bridgeObjectRetain();
    CustomMaterial.GeometryModifier.init(named:in:linkSPI:)(v4, v3, &v18, v9, (uint64_t)&v19);
    uint64_t v14 = v20;
    if (v20)
    {
      id v15 = v22;
      id v16 = v7;
    }
    else
    {
      id v16 = v22;
    }
    char v17 = v23;
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = v14;
    *(_OWORD *)(a1 + 16) = v21;
    *(void *)(a1 + 32) = v16;
    *(unsigned char *)(a1 + 40) = v17;
    return;
  }
  if (v8 == 1)
  {
LABEL_5:
    char v9 = 0;
    goto LABEL_13;
  }
  uint64_t v10 = 9;
  while (1)
  {
    uint64_t v11 = v10 - 7;
    if (__OFADD__(v10 - 8, 1)) {
      break;
    }
    int v12 = *(_DWORD *)(v5 + 4 * v10);
    char v9 = v12 == 8;
    ++v10;
    if (v12 == 8 || v11 == v8) {
      goto LABEL_13;
    }
  }
  __break(1u);
}

uint64_t specialized SIMD4<>.cgColor.getter(__n128 a1)
{
  uint64_t v19 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
  uint64_t v1 = v19;
  unint64_t v3 = *(void *)(v19 + 16);
  unint64_t v2 = *(void *)(v19 + 24);
  int64_t v4 = v2 >> 1;
  unint64_t v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, v3 + 1, 1);
    uint64_t v1 = v19;
    unint64_t v2 = *(void *)(v19 + 24);
    int64_t v4 = v2 >> 1;
  }
  unint64_t v6 = a1.n128_u64[1];
  *(void *)(v1 + 16) = v5;
  *(double *)(v1 + 8 * v3 + 32) = a1.n128_f32[0];
  int64_t v7 = v3 + 2;
  if (v4 < v7)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, v7, 1);
    unint64_t v6 = a1.n128_u64[1];
    uint64_t v1 = v19;
  }
  float v8 = *(float *)&v6;
  *(void *)(v1 + 16) = v7;
  *(double *)(v1 + 8 * v5 + 32) = a1.n128_f32[1];
  unint64_t v10 = *(void *)(v1 + 16);
  unint64_t v9 = *(void *)(v1 + 24);
  unint64_t v11 = v10 + 1;
  if (v10 >= v9 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
    HIDWORD(v6) = a1.n128_u32[3];
  }
  float v12 = *((float *)&v6 + 1);
  uint64_t v13 = v19;
  *(void *)(v19 + 16) = v11;
  *(double *)(v19 + 8 * v10 + 32) = v8;
  unint64_t v14 = *(void *)(v19 + 24);
  int64_t v15 = v10 + 2;
  if (v15 > (uint64_t)(v14 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15, 1);
    uint64_t v13 = v19;
  }
  *(void *)(v13 + 16) = v15;
  *(double *)(v13 + 32 + 8 * v11) = v12;
  if (one-time initialization token for linearSRGBColorSpace != -1) {
    swift_once();
  }
  CGColorRef v16 = CGColorCreate((CGColorSpaceRef)static CGColorSpaceRef.linearSRGBColorSpace, (const CGFloat *)(v13 + 32));
  swift_release();
  if (v16) {
    return (uint64_t)v16;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

CGColorRef_optional __swiftcall Material.getColorParameter(key:)(Swift::String key)
{
  Material.subscript.getter(key._countAndFlagsBits, (uint64_t)key._object, v1, (uint64_t)&v12);
  if (v19 == 255) {
    return 0;
  }
  unint64_t v2 = (void *)v12.n128_u64[0];
  if (v19 != 6)
  {
    uint64_t v3 = v12.n128_i64[1];
    uint64_t v4 = v13;
    uint64_t v5 = v14;
    uint64_t v6 = v15;
    uint64_t v7 = v16;
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    if (v19 == 5)
    {
      uint64_t v10 = specialized SIMD4<>.cgColor.getter(v12);
      outlined consume of __RKMaterialParameterBlock.Parameter?(v2, v3, v4, v5, v6, v7, v8, v9, 5u);
      return (CGColorRef_optional)v10;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?((void *)v12.n128_u64[0], v12.n128_i64[1], v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  return (CGColorRef_optional)v2;
}

void Material.getTextureParameter(key:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  Material.subscript.getter(a1, a2, a3, (uint64_t)&v8);
  if (v16 != 255)
  {
    uint64_t v5 = v9;
    uint64_t v6 = v10;
    int v7 = v11;
    if (v16 == 1)
    {
      *(void *)a4 = v8;
      *(void *)(a4 + 8) = v5;
      *(void *)(a4 + 16) = v6;
      *(_DWORD *)(a4 + 24) = v7;
      return;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v8, v9, v10, v11, v12, v13, v14, v15, v16);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(void *)(a4 + 16) = 0;
}

void __swiftcall Material.getFloatParameter(key:)(Swift::Float_optional *__return_ptr retstr, Swift::String key)
{
  Material.subscript.getter(key._countAndFlagsBits, (uint64_t)key._object, v2, (uint64_t)v3);
  if (v4 != 255 && v4 != 2) {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v3[0], (uint64_t)v3[1], (uint64_t)v3[2], (uint64_t)v3[3], (uint64_t)v3[4], (uint64_t)v3[5], (uint64_t)v3[6], (uint64_t)v3[7], v4);
  }
}

uint64_t Material.__triangleFillMode.getter()
{
  return 0;
}

uint64_t Material.__triangleFillMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a2, a3);
}

{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a2, a3);
}

uint64_t (*Material.__triangleFillMode.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Material.__triangleFillMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*Material.__triangleFillMode.modify(void *a1))(void, void)
{
  *a1 = 0;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Material.__writesDepthInternal.getter()
{
  return 1;
}

uint64_t (*Material.__writesDepthInternal.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Material.__writesDepthInternal.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*Material.__writesDepthInternal.modify(unsigned char *a1))(void, void)
{
  *a1 = 1;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Material.__readsDepthInternal.getter()
{
  return 1;
}

uint64_t Material.__readsDepthInternal.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a2, a3);
}

uint64_t (*Material.__readsDepthInternal.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Material.__readsDepthInternal.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*Material.__readsDepthInternal.modify(unsigned char *a1))(void, void)
{
  *a1 = 1;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Material.__faceCullMode.getter()
{
  return 0;
}

uint64_t Material.__faceCullMode.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a3, a4);
}

{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a3, a4);
}

uint64_t (*Material.__faceCullMode.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Material.__faceCullMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*Material.__faceCullMode.modify(uint64_t a1))(void, void)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Material.__parameters.getter()
{
  return 0;
}

uint64_t Material.__requiresUnmanagedVideoComponent.getter()
{
  return 0;
}

uint64_t Material.parameters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(boxed_opaque_existential_1, v3, a1);
}

uint64_t Material.parameters.setter(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  swift_release();
  swift_release();
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  if (v7 == v10)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 16))(&v64, v11, v12);
    uint64_t v59 = v64;
    char v60 = v65;
    uint64_t v61 = v66;
    uint64_t v62 = v67;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 24))(&v59, a2, v4);
  }
  else
  {
    uint64_t v50 = a2;
    uint64_t v58 = v3;
    uint64_t v13 = Material.allKeys.getter(v11, v12);
    uint64_t v14 = specialized Sequence.compactMap<A>(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v16 = a2;
      uint64_t v17 = (uint64_t *)(v14 + 40);
      uint64_t v48 = v4;
      uint64_t v49 = a1;
      do
      {
        uint64_t v57 = v15;
        uint64_t v33 = *(v17 - 1);
        uint64_t v34 = *v17;
        uint64_t v35 = a1[3];
        __swift_project_boxed_opaque_existential_1(a1, v35);
        swift_bridgeObjectRetain();
        uint64_t v55 = v34;
        uint64_t v56 = v33;
        Material.subscript.getter(v33, v34, v35, (uint64_t)&v64);
        uint64_t v18 = 0;
        int v36 = 255;
        char v37 = 1;
        uint64_t v54 = v17;
        uint64_t v38 = v4;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        switch(v72)
        {
          case 0u:
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v37 = 0;
            int v36 = 1;
            uint64_t v18 = v64;
            break;
          case 1u:
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v37 = 0;
            int v36 = 0;
            uint64_t v41 = v67;
            uint64_t v18 = v64;
            uint64_t v39 = v65;
            uint64_t v40 = v66;
            break;
          case 2u:
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v37 = 0;
            uint64_t v18 = v64;
            int v36 = 2;
            break;
          case 3u:
          case 6u:
          case 0xCu:
          case 0x10u:
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v37 = 0;
            uint64_t v18 = v64;
            goto LABEL_9;
          case 4u:
          case 5u:
          case 7u:
          case 0xDu:
          case 0xEu:
          case 0x11u:
          case 0x12u:
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v37 = 0;
            uint64_t v18 = v64;
            uint64_t v39 = v65;
            goto LABEL_9;
          case 8u:
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v37 = 0;
            uint64_t v18 = v64;
            uint64_t v39 = v65;
            uint64_t v40 = v66;
            uint64_t v41 = v67;
            uint64_t v42 = v68;
            uint64_t v43 = v69;
LABEL_9:
            int v36 = v72;
            break;
          case 9u:
            char v37 = 0;
            int v36 = 9;
            uint64_t v18 = v64;
            uint64_t v39 = v65;
            uint64_t v44 = v70;
            uint64_t v45 = v71;
            uint64_t v40 = v66;
            uint64_t v41 = v67;
            uint64_t v42 = v68;
            uint64_t v43 = v69;
            break;
          case 0xAu:
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v37 = 0;
            uint64_t v18 = v64 & 1;
            int v36 = 10;
            break;
          case 0xBu:
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v37 = 0;
            uint64_t v18 = v64;
            int v36 = 11;
            break;
          case 0xFu:
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            char v37 = 0;
            uint64_t v18 = v64;
            int v36 = 15;
            break;
          case 0x13u:
            break;
          default:
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            break;
        }
        uint64_t v52 = v39;
        uint64_t v62 = v16;
        uint64_t v63 = v38;
        uint64_t v46 = __swift_allocate_boxed_opaque_existential_1(&v59);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v46, v58, v16);
        if (v37)
        {
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          char v26 = 19;
        }
        else
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          char v26 = 0;
          switch(v36)
          {
            case 1:
              break;
            case 2:
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0;
              uint64_t v18 = v18;
              char v26 = 2;
              break;
            case 3:
            case 6:
            case 12:
            case 16:
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0;
              goto LABEL_27;
            case 4:
            case 5:
            case 7:
            case 13:
            case 14:
            case 17:
            case 18:
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0;
              uint64_t v19 = v52;
              goto LABEL_27;
            case 8:
              uint64_t v24 = 0;
              uint64_t v25 = 0;
              uint64_t v19 = v52;
              uint64_t v20 = v40;
              uint64_t v21 = v41;
              uint64_t v22 = v42;
              uint64_t v23 = v43;
              goto LABEL_27;
            case 9:
              uint64_t v19 = v52;
              uint64_t v20 = v40;
              uint64_t v21 = v41;
              uint64_t v22 = v42;
              uint64_t v23 = v43;
              uint64_t v24 = v44;
              uint64_t v25 = v45;
LABEL_27:
              char v26 = v36;
              break;
            case 10:
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0;
              v18 &= 1u;
              char v26 = 10;
              break;
            case 11:
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0;
              uint64_t v18 = v18;
              char v26 = 11;
              break;
            case 15:
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0;
              uint64_t v18 = v18;
              char v26 = 15;
              break;
            default:
              uint64_t v22 = 0;
              uint64_t v23 = 0;
              uint64_t v24 = 0;
              uint64_t v25 = 0;
              uint64_t v21 = v41;
              char v26 = 1;
              uint64_t v19 = v52;
              uint64_t v20 = v40;
              break;
          }
        }
        char v51 = v26;
        uint64_t v17 = v54 + 2;
        uint64_t v27 = v62;
        uint64_t v53 = v63;
        uint64_t v28 = v19;
        uint64_t v29 = v20;
        uint64_t v30 = v21;
        uint64_t v31 = v22;
        uint64_t v32 = v25;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v59, v62);
        uint64_t v64 = v18;
        uint64_t v65 = v28;
        uint64_t v66 = v29;
        uint64_t v67 = v30;
        uint64_t v68 = v31;
        uint64_t v69 = v23;
        uint64_t v70 = v24;
        uint64_t v71 = v32;
        unsigned __int8 v72 = v51;
        Material.subscript.setter((uint64_t)&v64, v56, v55, v27, v53);
        uint64_t v16 = v50;
        uint64_t v4 = v48;
        Material.parameters.setter(&v59, v50, v48);
        uint64_t v15 = v57 - 1;
        a1 = v49;
      }
      while (v57 != 1);
    }
    swift_bridgeObjectRelease();
  }
  return outlined destroy of MaterialParameters((uint64_t)a1);
}

void (*Material.parameters.modify(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = (uint64_t *)malloc(0x68uLL);
  *a1 = v7;
  v7[11] = a3;
  v7[12] = v3;
  v7[10] = a2;
  void v7[3] = a2;
  v7[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, v3, a2);
  return Material.parameters.modify;
}

void Material.parameters.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    uint64_t v3 = v2[11];
    uint64_t v4 = v2[10];
    outlined init with copy of MaterialParameters(*a1, (uint64_t)(v2 + 5));
    Material.parameters.setter(v2 + 5, v4, v3);
    outlined destroy of MaterialParameters((uint64_t)v2);
  }
  else
  {
    Material.parameters.setter((void *)*a1, v2[10], v2[11]);
  }

  free(v2);
}

uint64_t Material.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void v36[4];
  void v37[8];
  unsigned __int8 v38;

  uint64_t v34 = *(void *)(a3 - 8);
  uint64_t v35 = v4;
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 16);
  uint64_t v28 = v11;
  v12(v36, v13, v11);
  uint64_t v14 = (void *)v36[3];
  swift_bridgeObjectRetain();
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v16 = a1;
  uint64_t v17 = v34;
  specialized String.withCString<A>(_:)(v16, a2, v15, (uint64_t)v37);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = v37[0];
  uint64_t v19 = v37[1];
  uint64_t v21 = v37[2];
  uint64_t v20 = v37[3];
  uint64_t v22 = v37[4];
  uint64_t v32 = v37[6];
  uint64_t v33 = v37[5];
  uint64_t v31 = v37[7];
  uint64_t v23 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v10, v35, a3);
  if (v23 == 255)
  {
    (*(void (**)(uint64_t))(v28 + 8))(a3);
    __MaterialResource.subscript.getter(a4);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v10, a3);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v10, a3);
    *(void *)a4 = v18;
    *(void *)(a4 + 8) = v19;
    *(void *)(a4 + 16) = v21;
    *(void *)(a4 + 24) = v20;
    uint64_t v25 = v33;
    *(void *)(a4 + 32) = v22;
    *(void *)(a4 + 40) = v25;
    char v26 = v31;
    *(void *)(a4 + 48) = v32;
    *(void *)(a4 + 56) = v26;
    *(unsigned char *)(a4 + 64) = v23;
  }
  return result;
}

void Material.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = *(unsigned __int8 *)(a1 + 64);
  if (v6 == 255)
  {
    uint64_t v17 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(a5 + 32))(v24, a4, a5);
    uint64_t v19 = v18;
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v20 = REMaterialParameterBlockValueCopy();
      uint64_t v21 = *(void **)(v19 + 24);
      *(void *)(v19 + 24) = v20;
    }
    specialized String.withCString<A>(_:)(a2, a3);
    swift_bridgeObjectRelease();
    v17(v24, 0);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v14 = *(void **)a1;
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v23 = *(void **)a1;
    uint64_t v22 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a5 + 32))(v26, a4, a5);
    v24[0] = v14;
    v24[1] = v13;
    _DWORD v24[2] = v11;
    void v24[3] = v12;
    v24[4] = v10;
    v24[5] = v9;
    v24[6] = v8;
    v24[7] = v7;
    char v25 = v6;
    uint64_t v15 = String.utf8CString.getter();
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)((const char *)(v15 + 32), (uint64_t)v24);
    swift_bridgeObjectRelease();
    swift_release();
    v22(v26, 0);
    outlined consume of __RKMaterialParameterBlock.Parameter?(v23, v13, v11, v12, v10, v9, v8, v7, v6);
  }
}

RealityFoundation::MaterialParameters::Metadata_optional __swiftcall Material.metadata(for:)(Swift::String a1)
{
  uint64_t v3 = v2;
  (*(void (**)())(v1 + 8))();
  swift_beginAccess();
  swift_release();
  REMaterialAssetGetMaterialDefinition();
  String.utf8CString.getter();
  ParameterDisplayuint64_t Name = REMaterialDefinitionAssetGetParameterDisplayName();
  swift_release();
  if (ParameterDisplayName)
  {
    uint64_t v5 = String.init(cString:)();
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = 0;
  }
  uint64_t *v3 = v5;
  v3[1] = (uint64_t)v6;
  result.value.displayName.value._object = v6;
  result.value.displayName.value._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t Material.allKeys.getter(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9C0]), sel_init);
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  swift_beginAccess();
  swift_release();
  REMaterialAssetGetMaterialDefinition();
  REMaterialDefinitionAssetGetParameterKeys();
  v4;
  uint64_t result = static Set._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

id specialized Material.makeMaterialParametersTextureFromTextureResource(_:textureKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void **)(v4 + 72);
  swift_bridgeObjectRetain_n();
  id v8 = v7;
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  specialized String.withCString<A>(_:)(a2, a3, v9, (uint64_t)&v34);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v42 == 255)
  {
LABEL_6:
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v34);
    swift_release();
    if (v42 != 255)
    {
      uint64_t v21 = v34;
      uint64_t v20 = v35;
      uint64_t v22 = v36;
      uint64_t v23 = v37;
      uint64_t v24 = v38;
      uint64_t v25 = v39;
      uint64_t v26 = v40;
      uint64_t v27 = v41;
      if (v42 == 1)
      {
        if (v34)
        {
          outlined copy of __RKMaterialParameterBlock.Parameter(v34, v35, v36, v37, v38, v39, v40, v41, 1);
          outlined copy of __RKMaterialParameterBlock.Parameter(v21, v20, v22, v23, v24, v25, v26, v27, 1);
          uint64_t v28 = v21;
          id v19 = v21;
        }
        else
        {
          outlined copy of __RKMaterialParameterBlock.Parameter(0, v35, v36, v37, v38, v39, v40, v41, 1);
          outlined copy of __RKMaterialParameterBlock.Parameter(0, v20, v22, v23, v24, v25, v26, v27, 1);
          id v19 = (id)REMaterialCreateDefaultSamplerDescriptor();
          uint64_t v28 = 0;
        }
        id v31 = v28;
        outlined consume of __RKMaterialParameterBlock.Parameter?(v21, v20, v22, v23, v24, v25, v26, v27, 1u);
        outlined consume of __RKMaterialParameterBlock.Parameter?(v21, v20, v22, v23, v24, v25, v26, v27, 1u);
        outlined consume of __RKMaterialParameterBlock.Parameter(v21, v20, v22, v23, v24, v25, v26, v27, 1);
        goto LABEL_16;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v34, v35, v36, v37, v38, v39, v40, v41, v42);
    }
    swift_retain();
    id result = (id)REMaterialCreateDefaultSamplerDescriptor();
    *(void *)(a4 + 8) = a1;
    *(void *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 24) = 84148994;
    *(void *)a4 = result;
    return result;
  }
  uint64_t v10 = v34;
  uint64_t v11 = v36;
  uint64_t v12 = v37;
  uint64_t v13 = v38;
  uint64_t v14 = v39;
  uint64_t v15 = v40;
  uint64_t v16 = v41;
  if (v42 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v34, v35, v36, v37, v38, v39, v40, v41, v42);
    goto LABEL_6;
  }
  uint64_t v17 = v35;
  if (v34)
  {
    outlined copy of __RKMaterialParameterBlock.Parameter(v34, v35, v36, v37, v38, v39, v40, v41, 1);
    outlined copy of __RKMaterialParameterBlock.Parameter(v10, v17, v11, v12, v13, v14, v15, v16, 1);
    uint64_t v18 = v10;
    id v19 = v10;
  }
  else
  {
    outlined copy of __RKMaterialParameterBlock.Parameter(0, v35, v36, v37, v38, v39, v40, v41, 1);
    outlined copy of __RKMaterialParameterBlock.Parameter(0, v17, v11, v12, v13, v14, v15, v16, 1);
    id v19 = (id)REMaterialCreateDefaultSamplerDescriptor();
    uint64_t v18 = 0;
  }
  id v30 = v18;
  outlined consume of __RKMaterialParameterBlock.Parameter?(v10, v17, v11, v12, v13, v14, v15, v16, 1u);
  outlined consume of __RKMaterialParameterBlock.Parameter?(v10, v17, v11, v12, v13, v14, v15, v16, 1u);
  outlined consume of __RKMaterialParameterBlock.Parameter(v10, v17, v11, v12, v13, v14, v15, v16, 1);
LABEL_16:
  *(void *)(a4 + 8) = a1;
  *(void *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 84148994;
  *(void *)a4 = v19;

  return (id)swift_retain();
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a3, a4, a5, (void (*)(uint64_t *, uint64_t *, uint64_t, uint64_t))CustomMaterial.EmissiveColor.getCurrentValues(alternateTintKey:));
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, uint64_t a2, float a3)
{
  float v47 = a3;
  uint64_t v48 = a1;
  int v49 = a2;
  char v50 = BYTE4(a2) & 1;
  CustomMaterial.Opacity.getCurrentValues(alternateTintKey:)((uint64_t)&v36, (uint64_t)&v25);
  uint64_t v3 = v37;
  uint64_t v4 = v38;
  uint64_t v5 = v39;
  uint64_t v7 = v40;
  uint64_t v6 = v41;
  uint64_t v8 = v42;
  uint64_t v9 = v43;
  uint64_t v10 = v44;
  uint64_t v11 = v45;
  unsigned __int8 v12 = v46;
  uint64_t v21 = v26;
  uint64_t v22 = v36;
  id v19 = v27;
  uint64_t v20 = v25;
  uint64_t v23 = v30;
  uint64_t v24 = v29;
  uint64_t v17 = v31;
  uint64_t v18 = v28;
  uint64_t v15 = v33;
  uint64_t v16 = v32;
  uint64_t v14 = v34;
  unsigned __int8 v13 = v35;
  uint64_t v36 = (uint64_t)v38;
  uint64_t v37 = v39;
  uint64_t v38 = (void *)v40;
  uint64_t v39 = v41;
  uint64_t v40 = v42;
  uint64_t v41 = v43;
  uint64_t v42 = v44;
  uint64_t v43 = v45;
  LOBYTE(v44) = v46;
  swift_bridgeObjectRetain();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v4, v5, v7, v6, v8, v9, v10, v11, v12);
  specialized Material.subscript.setter((uint64_t)&v36, v22, v3);
  if (v21)
  {
    uint64_t v25 = (uint64_t)v19;
    uint64_t v26 = v18;
    uint64_t v27 = (void *)v24;
    uint64_t v28 = v23;
    uint64_t v29 = v17;
    uint64_t v30 = v16;
    uint64_t v31 = v15;
    uint64_t v32 = v14;
    LOBYTE(v33) = v13;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter?(v19, v18, v24, v23, v17, v16, v15, v14, v13);
    specialized Material.subscript.setter((uint64_t)&v25, v20, v21);
    outlined consume of MaterialParameterKeyValue?(v20, v21, v19, v18, v24, v23, v17, v16, v15, v14, v13);
  }
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v5, v7, v6, v8, v9, v10, v11, v12);
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    char v3 = 1;
    uint64_t v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v3 = -1;
  }
  unsigned __int8 v11 = v3;
  uint64_t v12 = v6;
  uint64_t v13 = v5;
  v20[0] = v4;
  v20[1] = v1;
  long long v20[2] = v5;
  void v20[3] = v6;
  long long v21 = 0u;
  long long v22 = 0u;
  char v23 = v3;
  uint64_t v7 = *(void **)a1;
  outlined copy of MaterialParameters.Texture?(v2, v1);
  outlined copy of MaterialParameters.Texture?(v2, v1);
  swift_bridgeObjectRetain();
  id v8 = v7;
  specialized Material.subscript.setter((uint64_t)v20, 0xD000000000000010, 0x8000000228352310);
  uint64_t v14 = v7;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  char v19 = 6;
  uint64_t v9 = (const char *)(String.utf8CString.getter() + 32);
  id v10 = v8;
  swift_bridgeObjectRetain();
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v9, (uint64_t)&v14);

  swift_bridgeObjectRelease_n();
  swift_release();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, 0, 0, 0, 0, 0, 0, 0, 6u);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v1, v13, v12, 0, 0, 0, 0, v11);
}

{
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  const char *v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  long long v15;
  long long v16;
  long long v17;
  uint64_t v18;
  char v19;
  void v20[4];
  long long v21;
  long long v22;
  char v23;

  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    char v3 = 1;
    uint64_t v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v3 = -1;
  }
  unsigned __int8 v11 = v3;
  uint64_t v12 = v6;
  uint64_t v13 = v5;
  v20[0] = v4;
  v20[1] = v1;
  long long v20[2] = v5;
  void v20[3] = v6;
  long long v21 = 0u;
  long long v22 = 0u;
  char v23 = v3;
  uint64_t v7 = *(void **)a1;
  outlined copy of MaterialParameters.Texture?(v2, v1);
  outlined copy of MaterialParameters.Texture?(v2, v1);
  swift_bridgeObjectRetain();
  id v8 = v7;
  specialized Material.subscript.setter((uint64_t)v20, 0xD000000000000010, 0x8000000228352310);
  uint64_t v14 = v7;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  char v19 = 6;
  uint64_t v9 = (const char *)(String.utf8CString.getter() + 32);
  id v10 = v8;
  swift_bridgeObjectRetain();
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v9, (uint64_t)&v14);

  swift_bridgeObjectRelease_n();
  swift_release();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, 0, 0, 0, 0, 0, 0, 0, 6u);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v1, v13, v12, 0, 0, 0, 0, v11);
}

{
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  const char *v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  long long v15;
  long long v16;
  long long v17;
  uint64_t v18;
  char v19;
  void v20[4];
  long long v21;
  long long v22;
  char v23;

  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    char v3 = 1;
    uint64_t v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v3 = -1;
  }
  unsigned __int8 v11 = v3;
  uint64_t v12 = v6;
  uint64_t v13 = v5;
  v20[0] = v4;
  v20[1] = v1;
  long long v20[2] = v5;
  void v20[3] = v6;
  long long v21 = 0u;
  long long v22 = 0u;
  char v23 = v3;
  uint64_t v7 = *(void **)a1;
  outlined copy of MaterialParameters.Texture?(v2, v1);
  outlined copy of MaterialParameters.Texture?(v2, v1);
  swift_bridgeObjectRetain();
  id v8 = v7;
  specialized Material.subscript.setter((uint64_t)v20, 0x4565727574786574, 0xEF6576697373696DLL);
  uint64_t v14 = v7;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  char v19 = 6;
  uint64_t v9 = (const char *)(String.utf8CString.getter() + 32);
  id v10 = v8;
  swift_bridgeObjectRetain();
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v9, (uint64_t)&v14);

  swift_bridgeObjectRelease_n();
  swift_release();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, 0, 0, 0, 0, 0, 0, 0, 6u);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v1, v13, v12, 0, 0, 0, 0, v11);
}

{
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  const char *v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  long long v15;
  long long v16;
  long long v17;
  uint64_t v18;
  char v19;
  void v20[4];
  long long v21;
  long long v22;
  char v23;

  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    char v3 = 1;
    uint64_t v4 = *(void **)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v3 = -1;
  }
  unsigned __int8 v11 = v3;
  uint64_t v12 = v6;
  uint64_t v13 = v5;
  v20[0] = v4;
  v20[1] = v1;
  long long v20[2] = v5;
  void v20[3] = v6;
  long long v21 = 0u;
  long long v22 = 0u;
  char v23 = v3;
  uint64_t v7 = *(void **)a1;
  outlined copy of MaterialParameters.Texture?(v2, v1);
  outlined copy of MaterialParameters.Texture?(v2, v1);
  swift_bridgeObjectRetain();
  id v8 = v7;
  specialized Material.subscript.setter((uint64_t)v20, 0xD000000000000011, 0x8000000228352ED0);
  uint64_t v14 = v7;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  char v19 = 6;
  uint64_t v9 = (const char *)(String.utf8CString.getter() + 32);
  id v10 = v8;
  swift_bridgeObjectRetain();
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v9, (uint64_t)&v14);

  swift_bridgeObjectRelease_n();
  swift_release();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, 0, 0, 0, 0, 0, 0, 0, 6u);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v1, v13, v12, 0, 0, 0, 0, v11);
}

{
  id v2;
  unsigned __int8 v3;
  uint64_t v4;
  void v5[4];
  long long v6;
  long long v7;
  unsigned __int8 v8;

  if (a1)
  {
    swift_retain();
    uint64_t v2 = (id)REMaterialCreateDefaultSamplerDescriptor();
    char v3 = 1;
    uint64_t v4 = 84148994;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
    char v3 = -1;
  }
  v5[0] = v2;
  v5[1] = a1;
  _OWORD v5[2] = 0;
  uint64_t v5[3] = v4;
  uint64_t v6 = 0u;
  uint64_t v7 = 0u;
  id v8 = v3;
  outlined copy of __RKMaterialParameterBlock.Parameter?(v2, a1, 0, v4, 0, 0, 0, 0, v3);
  specialized Material.subscript.setter((uint64_t)v5, 0x4E65727574786574, 0xED00006C616D726FLL);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v2, a1, 0, v4, 0, 0, 0, 0, v3);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void v9[4];
  long long v10;
  long long v11;
  unsigned __int8 v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    char v3 = *(unsigned int *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = 1;
    uint64_t v6 = *(void **)(a1 + 8);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    char v3 = 0;
    uint64_t v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  _OWORD v9[2] = v4;
  void v9[3] = v3;
  id v10 = 0u;
  unsigned __int8 v11 = 0u;
  uint64_t v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0xD000000000000010, 0x8000000228352350);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v7 = REMaterialParameterBlockValueCopy();
    id v8 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = v7;
  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void v9[4];
  long long v10;
  long long v11;
  unsigned __int8 v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    char v3 = *(unsigned int *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = 1;
    uint64_t v6 = *(void **)(a1 + 8);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    char v3 = 0;
    uint64_t v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  _OWORD v9[2] = v4;
  void v9[3] = v3;
  id v10 = 0u;
  unsigned __int8 v11 = 0u;
  uint64_t v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0x4D65727574786574, 0xEF63696C6C617465);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v7 = REMaterialParameterBlockValueCopy();
    id v8 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = v7;
  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void v9[4];
  long long v10;
  long long v11;
  unsigned __int8 v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    char v3 = *(unsigned int *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = 1;
    uint64_t v6 = *(void **)(a1 + 8);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    char v3 = 0;
    uint64_t v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  _OWORD v9[2] = v4;
  void v9[3] = v3;
  id v10 = 0u;
  unsigned __int8 v11 = 0u;
  uint64_t v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0xD000000000000010, 0x8000000228352330);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v7 = REMaterialParameterBlockValueCopy();
    id v8 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = v7;
  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void v9[4];
  long long v10;
  long long v11;
  unsigned __int8 v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    char v3 = *(unsigned int *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = 1;
    uint64_t v6 = *(void **)(a1 + 8);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    char v3 = 0;
    uint64_t v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  _OWORD v9[2] = v4;
  void v9[3] = v3;
  id v10 = 0u;
  unsigned __int8 v11 = 0u;
  uint64_t v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0x5365727574786574, 0xEF72616C75636570);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v7 = REMaterialParameterBlockValueCopy();
    id v8 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = v7;
  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void v9[4];
  long long v10;
  long long v11;
  unsigned __int8 v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    char v3 = *(unsigned int *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = 1;
    uint64_t v6 = *(void **)(a1 + 8);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    char v3 = 0;
    uint64_t v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  _OWORD v9[2] = v4;
  void v9[3] = v3;
  id v10 = 0u;
  unsigned __int8 v11 = 0u;
  uint64_t v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0xD000000000000019, 0x8000000228352370);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v7 = REMaterialParameterBlockValueCopy();
    id v8 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = v7;
  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  void *v11;
  void v12[4];
  long long v13;
  long long v14;
  unsigned __int8 v15;

  char v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    uint64_t v6 = *(void *)(a1 + 24);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v4) {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v4) {
    id v8 = 1;
  }
  else {
    id v8 = -1;
  }
  v12[0] = v5;
  v12[1] = v4;
  _OWORD v12[2] = v6;
  v12[3] = v7;
  uint64_t v13 = 0u;
  uint64_t v14 = 0u;
  long long v15 = v8;
  outlined copy of MaterialParameters.Texture?(v3, v4);
  uint64_t v9 = RELinkedOnOrAfterFall2024OSVersions();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v5, v4, v6, v7, 0, 0, 0, 0, v8);
  specialized Material.subscript.setter((uint64_t)v12, 0x4F65727574786574, 0xEE00797469636170);
  if (v9)
  {
    String.utf8CString.getter();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      id v10 = REMaterialParameterBlockValueCopy();
      unsigned __int8 v11 = *(void **)(v1 + 32);
      *(void *)(v1 + 32) = v10;
    }
    REMaterialParameterBlockValueSetFloat();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v5, v4, v6, v7, 0, 0, 0, 0, v8);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void v9[4];
  long long v10;
  long long v11;
  unsigned __int8 v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    char v3 = *(unsigned int *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = 1;
    uint64_t v6 = *(void **)(a1 + 8);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    char v3 = 0;
    uint64_t v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  _OWORD v9[2] = v4;
  void v9[3] = v3;
  id v10 = 0u;
  unsigned __int8 v11 = 0u;
  uint64_t v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0xD000000000000016, 0x8000000228352F10);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v7 = REMaterialParameterBlockValueCopy();
    id v8 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = v7;
  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void v9[4];
  long long v10;
  long long v11;
  unsigned __int8 v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    char v3 = *(unsigned int *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = 1;
    uint64_t v6 = *(void **)(a1 + 8);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    char v3 = 0;
    uint64_t v5 = -1;
  }
  v9[0] = v6;
  v9[1] = v2;
  _OWORD v9[2] = v4;
  void v9[3] = v3;
  id v10 = 0u;
  unsigned __int8 v11 = 0u;
  uint64_t v12 = v5;
  outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(a1);
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
  specialized Material.subscript.setter((uint64_t)v9, 0xD000000000000016, 0x8000000228352EF0);
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v7 = REMaterialParameterBlockValueCopy();
    id v8 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = v7;
  }
  REMaterialParameterBlockValueSetFloat();
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v2, v4, v3, 0, 0, 0, 0, v5);
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  void *v11;
  void v12[4];
  long long v13;
  long long v14;
  unsigned __int8 v15;

  char v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    uint64_t v6 = *(void *)(a1 + 24);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v4) {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v4) {
    id v8 = 1;
  }
  else {
    id v8 = -1;
  }
  v12[0] = v5;
  v12[1] = v4;
  _OWORD v12[2] = v6;
  v12[3] = v7;
  uint64_t v13 = 0u;
  uint64_t v14 = 0u;
  long long v15 = v8;
  outlined copy of MaterialParameters.Texture?(v3, v4);
  uint64_t v9 = RELinkedOnOrAfterFall2024OSVersions();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v5, v4, v6, v7, 0, 0, 0, 0, v8);
  specialized Material.subscript.setter((uint64_t)v12, 0x4F65727574786574, 0xEE00797469636170);
  if (v9)
  {
    String.utf8CString.getter();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      id v10 = REMaterialParameterBlockValueCopy();
      unsigned __int8 v11 = *(void **)(v1 + 72);
      *(void *)(v1 + 72) = v10;
    }
    REMaterialParameterBlockValueSetFloat();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v5, v4, v6, v7, 0, 0, 0, 0, v8);
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float a5)
{
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a5, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.Roughness.getCurrentValues(alternateTintKey:));
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a5, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.Specular.getCurrentValues(alternateTintKey:));
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a5, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.Clearcoat.getCurrentValues(alternateTintKey:));
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a5, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.ClearcoatRoughness.getCurrentValues(alternateTintKey:));
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t *, uint64_t, uint64_t))
{
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  int v52 = a3;
  a6(&v39, &v28, a4, a5);
  uint64_t v6 = v40;
  uint64_t v24 = v39;
  uint64_t v7 = v41;
  uint64_t v8 = v42;
  uint64_t v10 = v43;
  uint64_t v9 = v44;
  uint64_t v12 = v45;
  uint64_t v11 = v46;
  uint64_t v13 = v47;
  uint64_t v14 = v48;
  unsigned __int8 v15 = v49;
  uint64_t v22 = v28;
  uint64_t v23 = v29;
  uint64_t v26 = v32;
  uint64_t v27 = v31;
  uint64_t v20 = v33;
  long long v21 = v30;
  uint64_t v18 = v35;
  uint64_t v19 = v34;
  uint64_t v25 = v36;
  uint64_t v17 = v37;
  unsigned __int8 v16 = v38;
  uint64_t v39 = (uint64_t)v41;
  uint64_t v40 = v42;
  uint64_t v41 = (void *)v43;
  uint64_t v42 = v44;
  uint64_t v43 = v45;
  uint64_t v44 = v46;
  uint64_t v45 = v47;
  uint64_t v46 = v48;
  LOBYTE(v47) = v49;
  swift_bridgeObjectRetain();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v7, v8, v10, v9, v12, v11, v13, v14, v15);
  specialized Material.subscript.setter((uint64_t)&v39, v24, v6);
  if (v23)
  {
    uint64_t v28 = (uint64_t)v21;
    uint64_t v29 = v27;
    uint64_t v30 = (void *)v26;
    uint64_t v31 = v20;
    uint64_t v32 = v19;
    uint64_t v33 = v18;
    uint64_t v34 = v25;
    uint64_t v35 = v17;
    LOBYTE(v36) = v16;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter?(v21, v27, v26, v20, v19, v18, v25, v17, v16);
    specialized Material.subscript.setter((uint64_t)&v28, v22, v23);
    outlined consume of MaterialParameterKeyValue?(v22, v23, v21, v27, v26, v20, v19, v18, v25, v17, v16);
  }
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, v8, v10, v9, v12, v11, v13, v14, v15);
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
}

{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1, a2, a3, a4, (void (*)(uint64_t *, uint64_t *))CustomMaterial.ClearcoatNormal.getCurrentValues(alternateTintKey:));
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, int a2, float a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t *))
{
  float v50 = a3;
  uint64_t v51 = a1;
  int v52 = a2;
  a6(&v39, &v28);
  uint64_t v6 = v40;
  uint64_t v24 = v39;
  uint64_t v7 = v41;
  uint64_t v8 = v42;
  uint64_t v10 = v43;
  uint64_t v9 = v44;
  uint64_t v12 = v45;
  uint64_t v11 = v46;
  uint64_t v13 = v47;
  uint64_t v14 = v48;
  unsigned __int8 v15 = v49;
  uint64_t v22 = v28;
  uint64_t v23 = v29;
  uint64_t v26 = v32;
  uint64_t v27 = v31;
  uint64_t v20 = v33;
  long long v21 = v30;
  uint64_t v18 = v35;
  uint64_t v19 = v34;
  uint64_t v25 = v36;
  uint64_t v17 = v37;
  unsigned __int8 v16 = v38;
  uint64_t v39 = (uint64_t)v41;
  uint64_t v40 = v42;
  uint64_t v41 = (void *)v43;
  uint64_t v42 = v44;
  uint64_t v43 = v45;
  uint64_t v44 = v46;
  uint64_t v45 = v47;
  uint64_t v46 = v48;
  LOBYTE(v47) = v49;
  swift_bridgeObjectRetain();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v7, v8, v10, v9, v12, v11, v13, v14, v15);
  specialized Material.subscript.setter((uint64_t)&v39, v24, v6);
  if (v23)
  {
    uint64_t v28 = (uint64_t)v21;
    uint64_t v29 = v27;
    uint64_t v30 = (void *)v26;
    uint64_t v31 = v20;
    uint64_t v32 = v19;
    uint64_t v33 = v18;
    uint64_t v34 = v25;
    uint64_t v35 = v17;
    LOBYTE(v36) = v16;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter?(v21, v27, v26, v20, v19, v18, v25, v17, v16);
    specialized Material.subscript.setter((uint64_t)&v28, v22, v23);
    outlined consume of MaterialParameterKeyValue?(v22, v23, v21, v27, v26, v20, v19, v18, v25, v17, v16);
  }
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v7, v8, v10, v9, v12, v11, v13, v14, v15);
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, int a2, __n128 a3)
{
  __n128 v47 = a3;
  uint64_t v48 = a1;
  int v49 = a2;
  CustomMaterial.Custom.getCurrentValues(alternateTintKey:)((uint64_t)&v36, (uint64_t)&v25);
  uint64_t v3 = v37;
  uint64_t v21 = v36;
  uint64_t v4 = v38;
  uint64_t v5 = v39;
  uint64_t v7 = v40;
  uint64_t v6 = v41;
  uint64_t v9 = v42;
  uint64_t v8 = v43;
  uint64_t v10 = v44;
  uint64_t v11 = v45;
  unsigned __int8 v12 = v46;
  uint64_t v19 = v25;
  uint64_t v20 = v26;
  uint64_t v23 = v29;
  uint64_t v24 = v28;
  uint64_t v17 = v30;
  uint64_t v18 = v27;
  uint64_t v15 = v32;
  uint64_t v16 = v31;
  uint64_t v22 = v33;
  uint64_t v14 = v34;
  unsigned __int8 v13 = v35;
  uint64_t v36 = (uint64_t)v38;
  uint64_t v37 = v39;
  unsigned __int8 v38 = (void *)v40;
  uint64_t v39 = v41;
  uint64_t v40 = v42;
  uint64_t v41 = v43;
  uint64_t v42 = v44;
  uint64_t v43 = v45;
  LOBYTE(v44) = v46;
  swift_bridgeObjectRetain();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v4, v5, v7, v6, v9, v8, v10, v11, v12);
  specialized Material.subscript.setter((uint64_t)&v36, v21, v3);
  if (v20)
  {
    uint64_t v25 = (uint64_t)v18;
    uint64_t v26 = v24;
    uint64_t v27 = (void *)v23;
    uint64_t v28 = v17;
    uint64_t v29 = v16;
    uint64_t v30 = v15;
    uint64_t v31 = v22;
    uint64_t v32 = v14;
    LOBYTE(v33) = v13;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter?(v18, v24, v23, v17, v16, v15, v22, v14, v13);
    specialized Material.subscript.setter((uint64_t)&v25, v19, v20);
    outlined consume of MaterialParameterKeyValue?(v19, v20, v18, v24, v23, v17, v16, v15, v22, v14, v13);
  }
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v4, v5, v7, v6, v9, v8, v10, v11, v12);
}

void specialized Material.setParameter<A>(_:alternateTintKey:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *, uint64_t *))
{
  uint64_t v49 = a1;
  int v50 = a2;
  a5(&v38, &v27);
  uint64_t v5 = v39;
  uint64_t v23 = v38;
  uint64_t v6 = v40;
  uint64_t v7 = v41;
  uint64_t v9 = v42;
  uint64_t v8 = v43;
  uint64_t v11 = v44;
  uint64_t v10 = v45;
  uint64_t v12 = v46;
  uint64_t v13 = v47;
  unsigned __int8 v14 = v48;
  uint64_t v21 = v27;
  uint64_t v22 = v28;
  uint64_t v25 = v31;
  uint64_t v26 = v30;
  uint64_t v19 = v32;
  uint64_t v20 = v29;
  uint64_t v17 = v34;
  uint64_t v18 = v33;
  uint64_t v24 = v35;
  uint64_t v16 = v36;
  unsigned __int8 v15 = v37;
  uint64_t v38 = (uint64_t)v40;
  uint64_t v39 = v41;
  uint64_t v40 = (void *)v42;
  uint64_t v41 = v43;
  uint64_t v42 = v44;
  uint64_t v43 = v45;
  uint64_t v44 = v46;
  uint64_t v45 = v47;
  LOBYTE(v46) = v48;
  swift_bridgeObjectRetain();
  outlined copy of __RKMaterialParameterBlock.Parameter?(v6, v7, v9, v8, v11, v10, v12, v13, v14);
  specialized Material.subscript.setter((uint64_t)&v38, v23, v5);
  if (v22)
  {
    uint64_t v27 = (uint64_t)v20;
    uint64_t v28 = v26;
    uint64_t v29 = (void *)v25;
    uint64_t v30 = v19;
    uint64_t v31 = v18;
    uint64_t v32 = v17;
    uint64_t v33 = v24;
    uint64_t v34 = v16;
    LOBYTE(v35) = v15;
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter?(v20, v26, v25, v19, v18, v17, v24, v16, v15);
    specialized Material.subscript.setter((uint64_t)&v27, v21, v22);
    outlined consume of MaterialParameterKeyValue?(v21, v22, v20, v26, v25, v19, v18, v17, v24, v16, v15);
  }
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v6, v7, v9, v8, v11, v10, v12, v13, v14);
}

void *Material.getFloat4Parameter(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Material.subscript.getter(a1, a2, a3, (uint64_t)v4);
  if (v5 != 255)
  {
    id result = v4[0];
    if (v5 == 5) {
      return result;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v4[0], (uint64_t)v4[1], (uint64_t)v4[2], (uint64_t)v4[3], (uint64_t)v4[4], (uint64_t)v4[5], (uint64_t)v4[6], (uint64_t)v4[7], v5);
  }
  return 0;
}

Swift::Bool __swiftcall Material.syncMaterialRenderStateToCore(_:index:)(Swift::OpaquePointer _, Swift::Int index)
{
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](_._rawValue);
  uint64_t v44 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v11);
  uint64_t v41 = &v38[-v12];
  MEMORY[0x270FA5388](v13);
  unsigned __int8 v15 = &v38[-v14];
  uint64_t v51 = 0;
  REMaterialRenderStateArrayComponentGetTriangleFillModeAtIndex();
  uint64_t v50 = 2;
  int CullModeAtIndex = REMaterialRenderStateArrayComponentGetCullModeAtIndex();
  unsigned __int8 v49 = 1;
  REMaterialRenderStateArrayComponentGetWritesDepthAtIndex();
  unsigned __int8 v48 = 1;
  Swift::Int v45 = index;
  rawValue = _._rawValue;
  REMaterialRenderStateArrayComponentGetReadsDepthAtIndex();
  uint64_t v43 = v51;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  uint64_t v42 = v17(v6, v5);
  uint64_t v18 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v47 = v4;
  v18(v15, v4, v6);
  int v39 = CullModeAtIndex;
  uint64_t v40 = (void (*)(uint64_t, uint64_t))v17;
  if (CullModeAtIndex)
  {
    uint64_t v19 = v50;
    BOOL v20 = v19 != (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 112))(v6, v5);
    char v22 = v21 | v20;
  }
  else
  {
    char v22 = 0;
  }
  uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
  v23(v15, v6);
  uint64_t v24 = v41;
  v18(v41, v47, v6);
  if (v22)
  {
    BOOL v25 = 1;
  }
  else
  {
    uint64_t v26 = v44;
    v18(v44, (uint64_t)v24, v6);
    if (v39)
    {
      BOOL v25 = 0;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v5 + 112))(v6, v5);
      uint64_t v26 = v44;
      BOOL v25 = (v27 & 1) == 0;
    }
    v23(v26, v6);
  }
  v23(v24, v6);
  int v28 = v49;
  uint64_t v44 = *(unsigned char **)(v5 + 64);
  int v29 = v28 ^ ((uint64_t (*)(uint64_t, uint64_t))v44)(v6, v5);
  int v30 = v48;
  uint64_t v41 = *(unsigned char **)(v5 + 88);
  int v31 = v30 ^ ((uint64_t (*)(uint64_t, uint64_t))v41)(v6, v5);
  if (v43 == v42)
  {
    if (!v25 && (v29 & 1) != 0)
    {
      char v32 = 1;
LABEL_25:
      if ((((uint64_t (*)(uint64_t, uint64_t))v44)(v6, v5) & 1) == 0)
      {
        REMaterialRenderStateArrayComponentSetWritesDepthAtIndex();
        if ((v31 & 1) == 0) {
          return v32 & 1;
        }
LABEL_30:
        if (((uint64_t (*)(uint64_t, uint64_t))v41)(v6, v5)) {
          REMaterialRenderStateArrayComponentClearReadsDepthAtIndex();
        }
        else {
          REMaterialRenderStateArrayComponentSetReadsDepthAtIndex();
        }
        return v32 & 1;
      }
      REMaterialRenderStateArrayComponentClearWritesDepthAtIndex();
LABEL_27:
      if ((v31 & 1) == 0) {
        return v32 & 1;
      }
      goto LABEL_30;
    }
    char v32 = v25 | v31;
    if (!v25) {
      goto LABEL_22;
    }
  }
  else
  {
    LODWORD(v43) = v31;
    uint64_t v33 = v40;
    if (((uint64_t (*)(uint64_t, uint64_t))v40)(v6, v5))
    {
      v33(v6, v5);
      REMaterialRenderStateArrayComponentSetTriangleFillModeAtIndex();
    }
    else
    {
      REMaterialRenderStateArrayComponentClearTriangleFillModeAtIndex();
    }
    char v32 = 1;
    LOBYTE(v31) = v43;
    if (!v25)
    {
LABEL_22:
      if ((v29 & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }
  }
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v5 + 112);
  v34(v6, v5);
  if (v35)
  {
    REMaterialRenderStateArrayComponentClearCullModeAtIndex();
    if ((v29 & 1) == 0) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  Swift::Bool result = ((uint64_t (*)(uint64_t, uint64_t))v34)(v6, v5);
  if ((v37 & 1) == 0)
  {
    REMaterialRenderStateArrayComponentSetCullModeAtIndex();
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall Material.syncMaterialRenderStateFromCore(coreComponent:index:)(Swift::OpaquePointer coreComponent, Swift::Int index)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  if (REMaterialRenderStateArrayComponentGetTriangleFillModeAtIndex()) {
    (*(void (**)(void, uint64_t, uint64_t))(v4 + 48))(0, v5, v4);
  }
  if (REMaterialRenderStateArrayComponentGetWritesDepthAtIndex()) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 72))(1, v5, v4);
  }
  if (REMaterialRenderStateArrayComponentGetReadsDepthAtIndex()) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 96))(1, v5, v4);
  }
  if (REMaterialRenderStateArrayComponentGetCullModeAtIndex()) {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 120))(2, 0, v5, v4);
  }
  else {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v4 + 120))(0, 1, v5, v4);
  }
}

void __MaterialResource.CoreMaterialFunction.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 40);
  Hasher._combine(_:)(*(unsigned char *)v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)REAssetHandleCopyAssetIdentifierString();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  _CFObject.hash(into:)();

  Hasher._combine(_:)(*(void *)(v1 + 16));
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt32 *)(v1 + 32);
    do
    {
      Swift::UInt32 v6 = *v5++;
      Hasher._combine(_:)(v6);
      --v4;
    }
    while (v4);
  }
  id v7 = v2;
  NSObject.hash(into:)();
}

uint64_t __MaterialResource.CoreMaterialFunction.init(_:)@<X0>(uint64_t a1@<X8>)
{
  char Stage = REFunctionLinkGetStage();
  id v3 = (id)REFunctionLinkCopyLinkedFunctionName();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  uint64_t LinkedFunctionLibrary = REFunctionLinkGetLinkedFunctionLibrary();
  void v20[3] = MEMORY[0x263F8DD08];
  v20[0] = LinkedFunctionLibrary;
  outlined init with copy of Any((uint64_t)v20, (uint64_t)v19);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  uint64_t result = REFunctionLinkGetLinkedShaderAPICount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = result;
    uint64_t v17 = v6;
    uint64_t v10 = v4;
    char v11 = Stage;
    if (result)
    {
      uint64_t v12 = 0;
      uint64_t v13 = (char *)MEMORY[0x263F8EE78];
      do
      {
        int LinkedShaderAPIAtIndex = REFunctionLinkGetLinkedShaderAPIAtIndex();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v13 + 2) + 1, 1, v13);
        }
        unint64_t v16 = *((void *)v13 + 2);
        unint64_t v15 = *((void *)v13 + 3);
        if (v16 >= v15 >> 1) {
          uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v13);
        }
        ++v12;
        *((void *)v13 + 2) = v16 + 1;
        *(_DWORD *)&v13[4 * v16 + 32] = LinkedShaderAPIAtIndex;
      }
      while (v9 != v12);
    }
    else
    {
      uint64_t v13 = (char *)MEMORY[0x263F8EE78];
    }
    uint64_t result = (uint64_t)(id)REFunctionLinkGetConstantValues();
    *(unsigned char *)a1 = v11;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v17;
    *(void *)(a1 + 24) = v18;
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = result;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __MaterialResource.CoreMaterialFunction()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __MaterialResource.CoreMaterialFunction()
{
  return Hasher._finalize()();
}

uint64_t __MaterialResource.coreAsset.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t sub_227F2C088()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 155, 7);
}

uint64_t __MaterialResource.coreAsset.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*__MaterialResource.coreAsset.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __MaterialResource.__coreAsset.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(void *)(v1 + 16);
  return result;
}

uint64_t __MaterialResource.name.getter()
{
  return String.init(cString:)();
}

uint64_t __MaterialResource.cullMode.getter()
{
  swift_beginAccess();
  int CullMode = REMaterialAssetGetCullMode();
  uint64_t v1 = 2;
  if (!CullMode) {
    return 0;
  }
  return v1;
}

void *one-time initialization function for mapping()
{
  uint64_t result = closure #1 in variable initialization expression of static __MaterialResource.mapping();
  static __MaterialResource.mapping = result;
  return result;
}

void *closure #1 in variable initialization expression of static __MaterialResource.mapping()
{
  uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  int64_t v3 = v1 >> 1;
  unint64_t v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v1 > 1), v2 + 1, 1, v0);
    unint64_t v1 = v0[3];
    int64_t v3 = v1 >> 1;
  }
  v0[2] = v4;
  uint64_t v5 = &v0[3 * v2];
  *((unsigned char *)v5 + 32) = 1;
  void v5[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v5[6] = 0;
  unint64_t v6 = v2 + 2;
  if (v3 < (uint64_t)(v2 + 2)) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v1 > 1), v2 + 2, 1, v0);
  }
  v0[2] = v6;
  id v7 = &v0[3 * v4];
  *((unsigned char *)v7 + 32) = 7;
  void v7[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v7[6] = 0;
  unint64_t v8 = v0[3];
  unint64_t v9 = v2 + 3;
  if ((uint64_t)(v2 + 3) > (uint64_t)(v8 >> 1)) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v2 + 3, 1, v0);
  }
  v0[2] = v9;
  uint64_t v10 = &v0[3 * v6];
  *((unsigned char *)v10 + 32) = 2;
  uint64_t v10[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v10[6] = 0;
  unint64_t v11 = v0[3];
  unint64_t v12 = v2 + 4;
  if ((uint64_t)(v2 + 4) > (uint64_t)(v11 >> 1)) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v2 + 4, 1, v0);
  }
  v0[2] = v12;
  uint64_t v13 = &v0[3 * v9];
  *((unsigned char *)v13 + 32) = 6;
  v13[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v13[6] = 0;
  unint64_t v14 = v0[3];
  unint64_t v15 = v2 + 5;
  if ((uint64_t)(v2 + 5) > (uint64_t)(v14 >> 1)) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v2 + 5, 1, v0);
  }
  v0[2] = v15;
  unint64_t v16 = &v0[3 * v12];
  *((unsigned char *)v16 + 32) = 3;
  v16[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v16[6] = 0;
  unint64_t v17 = v0[3];
  unint64_t v18 = v2 + 6;
  if ((uint64_t)(v2 + 6) > (uint64_t)(v17 >> 1)) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v2 + 6, 1, v0);
  }
  v0[2] = v18;
  uint64_t v19 = &v0[3 * v15];
  *((unsigned char *)v19 + 32) = 4;
  v19[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  void v19[6] = 0;
  unint64_t v20 = v0[3];
  unint64_t v21 = v2 + 7;
  if ((uint64_t)(v2 + 7) > (uint64_t)(v20 >> 1)) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v2 + 7, 1, v0);
  }
  v0[2] = v21;
  char v22 = &v0[3 * v18];
  *((unsigned char *)v22 + 32) = 8;
  v22[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v22[6] = 0;
  unint64_t v23 = v0[3];
  if ((uint64_t)(v2 + 8) > (uint64_t)(v23 >> 1)) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v2 + 8, 1, v0);
  }
  v0[2] = v2 + 8;
  uint64_t v24 = &v0[3 * v21];
  *((unsigned char *)v24 + 32) = 0;
  v24[5] = specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material);
  v24[6] = 0;
  return v0;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  char v5 = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  id v7 = *(void **)(a2 + 24);
  uint64_t v12 = *(void *)a2;
  char v13 = v5;
  uint64_t v14 = v6;
  unint64_t v15 = v7;
  a3[3] = (uint64_t)&type metadata for PhysicallyBasedMaterial;
  a3[4] = (uint64_t)&protocol witness table for PhysicallyBasedMaterial;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + 16;
  *a3 = v8;
  swift_bridgeObjectRetain();
  id v10 = v7;
  swift_bridgeObjectRetain();
  return PhysicallyBasedMaterial.init(_:_:)(v4, &v12, v9);
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;

  uint64_t v4 = *a1;
  char v5 = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  id v7 = *(void **)(a2 + 24);
  uint64_t v12 = *(void *)a2;
  char v13 = v5;
  uint64_t v14 = v6;
  unint64_t v15 = v7;
  a3[3] = (uint64_t)&type metadata for UnlitMaterial;
  a3[4] = (uint64_t)&protocol witness table for UnlitMaterial;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + 16;
  *a3 = v8;
  swift_bridgeObjectRetain();
  id v10 = v7;
  swift_bridgeObjectRetain();
  return UnlitMaterial.init(_:_:)(v4, &v12, v9);
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;

  uint64_t v4 = *a1;
  char v5 = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  id v7 = *(void **)(a2 + 24);
  uint64_t v12 = *(void *)a2;
  char v13 = v5;
  uint64_t v14 = v6;
  unint64_t v15 = v7;
  a3[3] = (uint64_t)&type metadata for SimpleMaterial;
  a3[4] = (uint64_t)&protocol witness table for SimpleMaterial;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + 16;
  *a3 = v8;
  swift_bridgeObjectRetain();
  id v10 = v7;
  swift_bridgeObjectRetain();
  return SimpleMaterial.init(_:_:)(v4, &v12, v9);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  uint64_t v7 = a2[2];
  uint64_t v8 = (void *)a2[3];
  a3[3] = (uint64_t)&type metadata for ShaderGraphMaterial;
  a3[4] = (uint64_t)&protocol witness table for ShaderGraphMaterial;
  uint64_t v9 = swift_allocObject();
  *a3 = v9;
  swift_bridgeObjectRetain();
  id v10 = v8;
  swift_bridgeObjectRetain();
  uint64_t result = specialized static LoadableResource.fromCore(assetRef:)(v4);
  if (result)
  {
    *(void *)(v9 + 16) = result;
    *(void *)(v9 + 24) = v5;
    *(unsigned char *)(v9 + 32) = v6;
    *(void *)(v9 + 40) = v7;
    *(void *)(v9 + 48) = v10;
    *(void *)(v9 + 56) = 0;
    *(_WORD *)(v9 + 64) = 257;
    *(void *)(v9 + 72) = 0;
    *(unsigned char *)(v9 + 80) = 1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  uint64_t v7 = a2[2];
  uint64_t v8 = (void *)a2[3];
  a3[3] = (uint64_t)&type metadata for OcclusionMaterial;
  a3[4] = (uint64_t)&protocol witness table for OcclusionMaterial;
  uint64_t v9 = swift_allocObject();
  *a3 = v9;
  swift_bridgeObjectRetain();
  id v10 = v8;
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized static LoadableResource.fromCore(assetRef:)(v4);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t result = REMaterialAssetGetFeatureFlags();
    *(void *)(v9 + 16) = v12;
    *(void *)(v9 + 24) = v5;
    *(unsigned char *)(v9 + 32) = v6;
    *(void *)(v9 + 40) = v7;
    *(void *)(v9 + 48) = v10;
    *(unsigned char *)(v9 + 56) = result & 1;
    *(unsigned char *)(v9 + 57) = 1;
    *(void *)(v9 + 64) = 0;
    *(unsigned char *)(v9 + 72) = 1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t result;

  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  uint64_t v7 = a2[2];
  uint64_t v8 = (void *)a2[3];
  a3[3] = (uint64_t)&type metadata for PortalMaterial;
  a3[4] = (uint64_t)&protocol witness table for PortalMaterial;
  uint64_t v9 = swift_allocObject();
  *a3 = v9;
  swift_bridgeObjectRetain();
  id v10 = v8;
  swift_bridgeObjectRetain();
  uint64_t result = specialized static LoadableResource.fromCore(assetRef:)(v4);
  if (result)
  {
    *(void *)(v9 + 16) = result;
    *(void *)(v9 + 24) = v5;
    *(unsigned char *)(v9 + 32) = v6;
    *(void *)(v9 + 40) = v7;
    *(void *)(v9 + 48) = v10;
    *(void *)(v9 + 56) = 0;
    *(void *)(v9 + 64) = 0;
    *(unsigned char *)(v9 + 72) = 1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t result;

  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  uint64_t v7 = a2[2];
  uint64_t v8 = (void *)a2[3];
  a3[3] = (uint64_t)&type metadata for AnyMaterial;
  a3[4] = (uint64_t)&protocol witness table for AnyMaterial;
  uint64_t v9 = swift_allocObject();
  *a3 = v9;
  swift_bridgeObjectRetain();
  id v10 = v8;
  swift_bridgeObjectRetain();
  uint64_t result = specialized static LoadableResource.fromCore(assetRef:)(v4);
  if (result)
  {
    *(void *)(v9 + 16) = result;
    *(void *)(v9 + 24) = v5;
    *(unsigned char *)(v9 + 32) = v6;
    *(void *)(v9 + 40) = v7;
    *(void *)(v9 + 48) = v10;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @in_guaranteed __RKMaterialParameterBlock, @guaranteed CustomMaterial.CustomUniformsState?) -> (@out Material)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return closure #4 in closure #1 in variable initialization expression of static __MaterialResource.mapping(*a1, a2, *(void **)a3, *(void **)(a3 + 8), *(unsigned char *)(a3 + 16), a4);
}

uint64_t closure #4 in closure #1 in variable initialization expression of static __MaterialResource.mapping@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v11 = *a2;
  char v12 = *((unsigned char *)a2 + 8);
  uint64_t v13 = a2[2];
  uint64_t v14 = (ValueMetadata *)a2[3];
  *(void *)&long long v20 = *a2;
  BYTE8(v20) = v12;
  uint64_t v21 = v13;
  char v22 = v14;
  swift_bridgeObjectRetain();
  unint64_t v15 = v14;
  swift_bridgeObjectRetain();
  outlined copy of CustomMaterial.CustomUniformsState?(a3, a4, a5);
  CustomMaterial.init(_:_:_:)(a1, (uint64_t *)&v20, a3, a4, a5, __src);
  if (*(void *)&__src[0])
  {
    char v22 = &type metadata for CustomMaterial;
    unint64_t v23 = &protocol witness table for CustomMaterial;
    *(void *)&long long v20 = swift_allocObject();
    memcpy((void *)(v20 + 16), __src, 0x14AuLL);
    return outlined init with take of BindableDataInternal(&v20, (uint64_t)a6);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)__src, &demangling cache variable for type metadata for CustomMaterial?);
    a6[3] = (uint64_t)&type metadata for AnyMaterial;
    a6[4] = (uint64_t)&protocol witness table for AnyMaterial;
    uint64_t v17 = swift_allocObject();
    *a6 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v18 = v15;
    uint64_t result = specialized static LoadableResource.fromCore(assetRef:)(a1);
    if (result)
    {
      *(void *)(v17 + 16) = result;
      *(void *)(v17 + 24) = v11;
      *(unsigned char *)(v17 + 32) = v12;
      *(void *)(v17 + 40) = v13;
      *(void *)(v17 + 48) = v18;
    }
    else
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t SimpleMaterial.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 32) = 0;
  strcpy((char *)(a3 + 80), "baseColorTint");
  *(_WORD *)(a3 + 94) = -4864;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(unsigned char *)(a3 + 136) = 1;
  *(_WORD *)(a3 + 137) = 257;
  uint64_t v9 = specialized static LoadableResource.fromCore(assetRef:)(a1);
  if (v9)
  {
    *(void *)(a3 + 40) = v9;
    *(void *)(a3 + 48) = v5;
    *(unsigned char *)(a3 + 56) = v6;
    *(void *)(a3 + 64) = v7;
    *(void *)(a3 + 72) = v8;
    uint64_t v10 = one-time initialization token for materialMapRegistry;
    swift_retain();
    if (v10 != -1) {
      swift_once();
    }
    SimpleMaterial.assetService.getter((uint64_t)v14);
    uint64_t v11 = specialized AssetServiceScopedRegistry.instance(for:)(v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    uint64_t v12 = *(void *)(v11 + 64);
    swift_release();
    uint64_t result = swift_release();
    *(unsigned char *)(a3 + 112) = v12 == a1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v11 = *a2;
  char v12 = *((unsigned char *)a2 + 8);
  uint64_t v13 = a2[2];
  uint64_t v14 = (void *)a2[3];
  int Type = REMaterialAssetGetType();
  if (one-time initialization token for mapping != -1) {
    swift_once();
  }
  uint64_t v16 = *((void *)static __MaterialResource.mapping + 2);
  if (!v16)
  {
LABEL_11:
    a6[3] = (uint64_t)&type metadata for AnyMaterial;
    a6[4] = (uint64_t)&protocol witness table for AnyMaterial;
    uint64_t v23 = swift_allocObject();
    *a6 = v23;
    swift_bridgeObjectRetain();
    id v24 = v14;
    swift_bridgeObjectRetain();
    uint64_t result = specialized static LoadableResource.fromCore(assetRef:)(a1);
    if (result)
    {
      *(void *)(v23 + 16) = result;
      *(void *)(v23 + 24) = v11;
      *(unsigned char *)(v23 + 32) = v12;
      *(void *)(v23 + 40) = v13;
      *(void *)(v23 + 48) = v24;
    }
    else
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    return result;
  }
  uint64_t v17 = (char *)static __MaterialResource.mapping + 40;
  if (*((unsigned __int8 *)static __MaterialResource.mapping + 32) != Type)
  {
    uint64_t v19 = (char *)static __MaterialResource.mapping + 40;
    while (--v16)
    {
      uint64_t v17 = v19 + 24;
      int v20 = v19[16];
      v19 += 24;
      if (v20 == Type)
      {
        char v18 = a5;
        goto LABEL_10;
      }
    }
    goto LABEL_11;
  }
  char v18 = a5;
LABEL_10:
  uint64_t v21 = *(void (**)(uint64_t *, uint64_t *, void *))v17;
  uint64_t v27 = a1;
  uint64_t v28 = v11;
  char v29 = v12;
  uint64_t v30 = v13;
  int v31 = v14;
  v25[0] = a3;
  v25[1] = a4;
  char v26 = v18;
  swift_retain();
  v21(&v27, &v28, v25);
  return swift_release();
}

unint64_t __MaterialResource.LoadError.errorDescription.getter()
{
  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)&v17);
  unint64_t result = 0xD000000000000024;
  switch(v21)
  {
    case 1:
      uint64_t v7 = v17;
      uint64_t v8 = v18;
      unint64_t v9 = v19;
      unint64_t v10 = v20;
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      unint64_t v16 = 0xD000000000000019;
      v11._uint64_t countAndFlagsBits = v7;
      v11._object = v8;
      String.append(_:)(v11);
      v12._uint64_t countAndFlagsBits = 2112034;
      v12._object = (void *)0xE300000000000000;
      String.append(_:)(v12);
      unint64_t v5 = v9;
      unint64_t v6 = v10;
      goto LABEL_5;
    case 2:
      uint64_t v13 = v17;
      uint64_t v14 = v18;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      unint64_t v16 = 0xD000000000000012;
      v15._uint64_t countAndFlagsBits = v13;
      v15._object = v14;
      String.append(_:)(v15);
      unint64_t v6 = 0x8000000228352E30;
      unint64_t v5 = 0xD000000000000012;
      goto LABEL_5;
    case 3:
      return result;
    default:
      uint64_t v2 = v17;
      int64_t v3 = v18;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      unint64_t v16 = 0xD000000000000023;
      v4._uint64_t countAndFlagsBits = v2;
      v4._object = v3;
      String.append(_:)(v4);
      unint64_t v5 = 0x6E7562206E692022;
      unint64_t v6 = 0xEB00000000656C64;
LABEL_5:
      String.append(_:)(*(Swift::String *)&v5);
      return v16;
  }
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance __MaterialResource.LoadError()
{
  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v2);
  return __MaterialResource.LoadError.errorDescription.getter();
}

uint64_t static __MaterialResource.createMaterial(_:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 2);
  char v4 = *((unsigned char *)a1 + 24);
  long long v12 = *a1;
  uint64_t v13 = v3;
  LOBYTE(v14) = v4;
  *(_DWORD *)((char *)&v14 + 1) = *(_DWORD *)((char *)a1 + 25);
  long long v5 = a1[3];
  long long v15 = a1[2];
  long long v16 = v5;
  uint64_t v6 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v6, (uint64_t)v11);
  uint64_t v7 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)((uint64_t *)&v12, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  REAssetHandleLoadNow();
  if (REAssetHandleLoadFailed())
  {
    lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
    swift_allocError();
    *(_OWORD *)uint64_t v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(unsigned char *)(v8 + 32) = 3;
    swift_willThrow();
  }
  else
  {
    unint64_t v9 = (void *)REMaterialParameterBlockValueCreate();
    *(void *)&long long v12 = MEMORY[0x263F8EE78];
    BYTE8(v12) = 0;
    uint64_t v13 = 0;
    uint64_t v14 = v9;
    static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v7, (uint64_t *)&v12, 0, 0, 255, a2);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return RERelease();
}

uint64_t static __MaterialResource.__load(named:in:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = specialized static __MaterialResource.createAssetRef(named:in:)(a1, a2, a3);
  if (!v4)
  {
    uint64_t v9 = result;
    REAssetHandleLoadNow();
    if (REAssetHandleLoadFailed())
    {
      swift_bridgeObjectRetain();
      FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
      swift_allocError();
      *(void *)uint64_t v14 = a1;
      *(void *)(v14 + 8) = a2;
      *(void *)(v14 + 16) = v11;
      *(void *)(v14 + 24) = v13;
      *(unsigned char *)(v14 + 32) = 1;
      swift_willThrow();
    }
    else
    {
      long long v15 = (void *)REMaterialParameterBlockValueCreate();
      uint64_t v16 = MEMORY[0x263F8EE78];
      char v17 = 0;
      uint64_t v18 = 0;
      unint64_t v19 = v15;
      static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v9, &v16, 0, 0, 255, a4);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return RERelease();
  }
  return result;
}

uint64_t static __MaterialResource.loadAsync(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = v3;
  void v7[3] = a1;
  v7[4] = a2;
  void v7[5] = a3;
  id v8 = a3;
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized static __ServiceLocator.shared.getter();
  swift_retain();
  uint64_t v10 = static __MaterialResource.loadAsync(_:services:)((uint64_t)partial apply for closure #1 in static __MaterialResource.loadAsync(named:in:), (uint64_t)v7, v9);
  swift_release();
  swift_release();
  return v10;
}

uint64_t static __MaterialResource.loadAsync(_:services:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = a3 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)v20);
  outlined init with copy of __REAssetService(v7, (uint64_t)v17);
  uint64_t v8 = v18;
  uint64_t v9 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(v8, v9);
  uint64_t v10 = v21;
  uint64_t v11 = v22;
  __swift_project_boxed_opaque_existential_1(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
  type metadata accessor for __AssetLoadRequest();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = AssetRequest;
  if (v9) {
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  }
  uint64_t v14 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  *(void *)(v14 + 16) = v13;
  long long v15 = (void *)swift_allocObject();
  void v15[2] = a1;
  v15[3] = a2;
  v15[4] = v14;
  v15[5] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<Material>);
  swift_allocObject();
  swift_retain();
  return specialized LoadRequest.init(_:dependencies:)((uint64_t)partial apply for closure #1 in static __MaterialResource.loadAsync(_:services:), (uint64_t)v15, 0);
}

uint64_t closure #1 in static __MaterialResource.loadAsync(_:services:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a3();
  type metadata accessor for __REAsset();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  swift_beginAccess();
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a1;
  v12[3] = a2;
  v12[4] = a6;
  v12[5] = v11;
  v12[6] = a5;
  aBlock[4] = partial apply for closure #1 in closure #1 in static __MaterialResource.loadAsync(_:services:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_145;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = _Block_copy(v13);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  v18[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v18[5] = v15;
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 1107296256;
  void v18[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  void v18[3] = &block_descriptor_152;
  uint64_t v16 = _Block_copy(v18);
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v16);
  swift_release();
  _Block_release(v13);
  swift_release();
  swift_beginAccess();
  swift_retain();
  REAssetLoadRequestAddAsset();
  swift_release();
  return swift_release_n();
}

void closure #1 in closure #1 in static __MaterialResource.loadAsync(_:services:)(char a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v6 = *(void *)(a5 + 16);
    uint64_t v7 = (void *)REMaterialParameterBlockValueCreate();
    uint64_t v16 = MEMORY[0x263F8EE78];
    LOBYTE(v17) = 0;
    uint64_t v18 = 0;
    uint64_t v19 = v7;
    static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v6, &v16, 0, 0, 255, aBlock);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v23) = 0;
  }
  else
  {
    uint64_t v8 = (void *)REAssetHandleCopyAssetIdentifierString();
    Swift::String v9 = String.init(_:)(v8);
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    uint64_t v10 = swift_allocError();
    *(Swift::String *)uint64_t v11 = v9;
    *(void *)(v11 + 16) = 0;
    *(void *)(v11 + 24) = 0;
    *(unsigned char *)(v11 + 32) = 0;
    aBlock[0] = v10;
    LOBYTE(v23) = 1;
  }
  a2(aBlock);
  outlined destroy of BodyTrackingComponent?((uint64_t)aBlock, (uint64_t *)&demangling cache variable for type metadata for Result<Material, Error>);
  swift_beginAccess();
  aBlock[4] = (uint64_t)destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  uint64_t v23 = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_155;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = _Block_copy(v12);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  unint64_t v20 = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  uint64_t v21 = v14;
  uint64_t v16 = MEMORY[0x263EF8330];
  uint64_t v17 = 1107296256;
  uint64_t v18 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v19 = &block_descriptor_162;
  uint64_t v15 = _Block_copy(&v16);
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v15);
  swift_release();
  _Block_release(v12);
}

uint64_t __MaterialResource.BuildParameters.Value.asString.getter()
{
  uint64_t v1 = *v0;
  switch(*((unsigned char *)v0 + 16))
  {
    case 1:
      return dispatch thunk of CustomStringConvertible.description.getter();
    case 2:
      Float.write<A>(to:)();
      return 0;
    case 3:
      v6._uint64_t countAndFlagsBits = 91;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      Float.write<A>(to:)();
      v7._uint64_t countAndFlagsBits = 8236;
      v7._object = (void *)0xE200000000000000;
      String.append(_:)(v7);
      goto LABEL_14;
    case 4:
      v8._uint64_t countAndFlagsBits = 91;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      Float.write<A>(to:)();
      v9._uint64_t countAndFlagsBits = 8236;
      v9._object = (void *)0xE200000000000000;
      String.append(_:)(v9);
      Float.write<A>(to:)();
      v10._uint64_t countAndFlagsBits = 8236;
      v10._object = (void *)0xE200000000000000;
      String.append(_:)(v10);
      goto LABEL_14;
    case 5:
      _StringGuts.grow(_:)(16);
      v11._uint64_t countAndFlagsBits = 91;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      Float.write<A>(to:)();
      v12._uint64_t countAndFlagsBits = 8236;
      v12._object = (void *)0xE200000000000000;
      String.append(_:)(v12);
      Float.write<A>(to:)();
      v13._uint64_t countAndFlagsBits = 8236;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      Float.write<A>(to:)();
      v14._uint64_t countAndFlagsBits = 8236;
      v14._object = (void *)0xE200000000000000;
      String.append(_:)(v14);
LABEL_14:
      Float.write<A>(to:)();
      v15._uint64_t countAndFlagsBits = 93;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      break;
    default:
      if (v1) {
        uint64_t v2 = 1702195828;
      }
      else {
        uint64_t v2 = 0x65736C6166;
      }
      if (v1) {
        unint64_t v3 = 0xE400000000000000;
      }
      else {
        unint64_t v3 = 0xE500000000000000;
      }
      unint64_t v4 = v3;
      String.append(_:)(*(Swift::String *)&v2);
      swift_bridgeObjectRelease();
      break;
  }
  return 0;
}

void __MaterialResource.BuildParameters.Value.hash(into:)()
{
  Swift::UInt v1 = v0->n128_u64[0];
  switch(v0[1].n128_u8[0])
  {
    case 1u:
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v1);
      break;
    case 2u:
      Hasher._combine(_:)(2uLL);
      if ((v1 & 0x7FFFFF) == 0 && (v1 & 0x7F800000) == 0) {
        Swift::UInt32 v3 = 0;
      }
      else {
        Swift::UInt32 v3 = v1;
      }
      goto LABEL_10;
    case 3u:
      Hasher._combine(_:)(3uLL);
      if ((v1 & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v4 = v1;
      }
      else {
        Swift::UInt32 v4 = 0;
      }
      Hasher._combine(_:)(v4);
      if ((v1 & 0x7FFFFFFF00000000) != 0) {
        Swift::UInt32 v3 = HIDWORD(v1);
      }
      else {
        Swift::UInt32 v3 = 0;
      }
LABEL_10:
      Hasher._combine(_:)(v3);
      break;
    case 4u:
      __n128 v5 = *v0;
      Hasher._combine(_:)(4uLL);
      specialized SIMD.hash(into:)(v5);
      break;
    case 5u:
      __n128 v6 = *v0;
      Hasher._combine(_:)(5uLL);
      specialized SIMD.hash(into:)(v6);
      break;
    default:
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v1 & 1);
      break;
  }
}

Swift::Int __MaterialResource.BuildParameters.Value.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __MaterialResource.BuildParameters.Value()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __MaterialResource.BuildParameters.Value()
{
  return Hasher._finalize()();
}

uint64_t __MaterialResource.BuildParameters.materialDefinition.getter()
{
  return swift_retain();
}

uint64_t __MaterialResource.BuildParameters.materialDefinition.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *Swift::UInt v1 = a1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.materialDefinition.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.functionConstants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __MaterialResource.BuildParameters.functionConstants.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.functionConstants.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.cullMode.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t __MaterialResource.BuildParameters.cullMode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.cullMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.passthroughBlur.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t __MaterialResource.BuildParameters.passthroughBlur.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 25) = result;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.passthroughBlur.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.vcaBlur.getter()
{
  return *(unsigned __int8 *)(v0 + 26);
}

uint64_t __MaterialResource.BuildParameters.vcaBlur.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 26) = result;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.vcaBlur.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.multiUVs.getter()
{
  return *(unsigned __int8 *)(v0 + 27);
}

uint64_t __MaterialResource.BuildParameters.multiUVs.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 27) = result;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.multiUVs.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __MaterialResource.BuildParameters.blendMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 28);
}

unsigned char *__MaterialResource.BuildParameters.blendMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 28) = *result;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.blendMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.materialParameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __MaterialResource.BuildParameters.materialParameters.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.materialParameters.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.materialTextureParameterBindings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __MaterialResource.BuildParameters.materialTextureParameterBindings.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.materialTextureParameterBindings.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.materialBufferParameterBindings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __MaterialResource.BuildParameters.materialBufferParameterBindings.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*__MaterialResource.BuildParameters.materialBufferParameterBindings.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __MaterialResource.BuildParameters.init(materialDefinition:functionConstants:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = MEMORY[0x263F8EE78];
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(v6);
  swift_bridgeObjectRetain();
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 1;
  *(_DWORD *)(a3 + 25) = 33686018;
  *(void *)(a3 + 32) = v7;
  *(void *)(a3 + 40) = v8;
  *(void *)(a3 + 48) = v9;
  *(void *)(a3 + 56) = v6;
  return result;
}

uint64_t static __MaterialResource.load(_:services:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *((void *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 24);
  long long v13 = *a1;
  uint64_t v14 = v4;
  LOBYTE(v15) = v5;
  *(_DWORD *)((char *)&v15 + 1) = *(_DWORD *)((char *)a1 + 25);
  long long v6 = a1[3];
  long long v16 = a1[2];
  long long v17 = v6;
  uint64_t v7 = a2 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)v12);
  uint64_t v8 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)((uint64_t *)&v13, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  REAssetHandleLoadNow();
  if (REAssetHandleLoadFailed())
  {
    lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
    swift_allocError();
    *(_OWORD *)uint64_t v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(unsigned char *)(v9 + 32) = 3;
    swift_willThrow();
  }
  else
  {
    Swift::String v10 = (void *)REMaterialParameterBlockValueCreate();
    *(void *)&long long v13 = MEMORY[0x263F8EE78];
    BYTE8(v13) = 0;
    uint64_t v14 = 0;
    Swift::String v15 = v10;
    static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v8, (uint64_t *)&v13, 0, 0, 255, a3);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return RERelease();
}

uint64_t static __MaterialResource.loadAsync(_:services:)(_OWORD *a1, uint64_t a2)
{
  long long v5 = a1[1];
  v12[0] = *a1;
  v12[1] = v5;
  long long v6 = a1[3];
  _OWORD v12[2] = a1[2];
  v12[3] = v6;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v2;
  long long v8 = a1[1];
  *(_OWORD *)(v7 + 24) = *a1;
  *(_OWORD *)(v7 + 40) = v8;
  long long v9 = a1[3];
  *(_OWORD *)(v7 + 56) = a1[2];
  *(_OWORD *)(v7 + 72) = v9;
  *(void *)(v7 + 88) = a2;
  outlined retain of __MaterialResource.BuildParameters((uint64_t)v12);
  swift_retain();
  uint64_t v10 = static __MaterialResource.loadAsync(_:services:)((uint64_t)partial apply for closure #1 in static __MaterialResource.loadAsync(_:services:), v7, a2);
  swift_release();
  return v10;
}

uint64_t closure #1 in static __MaterialResource.loadAsync(_:services:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  long long v3 = a2[1];
  v9[0] = *a2;
  v9[1] = v3;
  long long v4 = a2[3];
  _OWORD v9[2] = a2[2];
  void v9[3] = v4;
  uint64_t v5 = a3 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v8);
  uint64_t v6 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)((uint64_t *)v9, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

void *static __MaterialResource.load(named:in:services:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  Swift::String v11 = (void *)(a4 + 120);
  swift_beginAccess();
  __swift_project_boxed_opaque_existential_1(v11, *(void *)(a4 + 144));
  uint64_t result = specialized __REAssetService.assetRef(named:in:)(a1, a2, a3);
  if (!v5)
  {
    uint64_t v13 = result[2];
    RERetain();
    swift_release();
    REAssetHandleLoadNow();
    if (REAssetHandleLoadFailed())
    {
      swift_bridgeObjectRetain();
      FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
      swift_allocError();
      *(void *)uint64_t v18 = a1;
      *(void *)(v18 + 8) = a2;
      *(void *)(v18 + 16) = v15;
      *(void *)(v18 + 24) = v17;
      *(unsigned char *)(v18 + 32) = 1;
      swift_willThrow();
    }
    else
    {
      uint64_t v19 = (void *)REMaterialParameterBlockValueCreate();
      uint64_t v20 = MEMORY[0x263F8EE78];
      char v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = v19;
      static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v13, &v20, 0, 0, 255, a5);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return (void *)RERelease();
  }
  return result;
}

uint64_t static __MaterialResource.loadAsync(named:in:services:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __n128 v12 = MEMORY[0x270FA5388](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v9, v12);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = v4;
  *((void *)v14 + 3) = a1;
  *((void *)v14 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v14[v13], (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  *(void *)&v14[(v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8] = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v15 = static __MaterialResource.loadAsync(_:services:)((uint64_t)partial apply for closure #1 in static __MaterialResource.loadAsync(named:in:services:), (uint64_t)v14, a4);
  swift_release();
  return v15;
}

uint64_t closure #1 in static __MaterialResource.loadAsync(named:in:services:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v10 = a5 + 15;
  swift_beginAccess();
  uint64_t v12 = a5[18];
  uint64_t v11 = a5[19];
  __swift_project_boxed_opaque_existential_1(v10, v12);
  unint64_t v13 = specialized __REAssetService.assetRef(named:in:)(a2, a3, a4);
  if (!v5)
  {
    uint64_t v11 = v13[2];
    RERetain();
    swift_release();
  }
  return v11;
}

uint64_t __MaterialResource.__allocating_init(fromCore:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  RERetain();
  *(void *)(v2 + 16) = a1;
  REAssetHandleLoadNow();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t __MaterialResource.deinit()
{
  swift_beginAccess();
  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t __MaterialResource.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id __MaterialResource.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  String.utf8CString.getter();
  Parameterint Type = REMaterialAssetGetParameterType();
  id result = (id)swift_release();
  switch(ParameterType)
  {
    case 1:
      String.utf8CString.getter();
      uint64_t TextureAsset = REMaterialAssetGetTextureAsset();
      id result = (id)swift_release();
      if (!TextureAsset) {
        goto LABEL_2;
      }
      type metadata accessor for TextureResource();
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = TextureAsset;
      *(void *)(v6 + 24) = 0;
      RERetain();
      REAssetSetSwiftObject();
      String.utf8CString.getter();
      uint64_t SamplerNameBoundToTexture = REMaterialAssetGetSamplerNameBoundToTexture();
      swift_release();
      if (!SamplerNameBoundToTexture
        || (id result = (id)REMaterialAssetCopySamplerDescriptor()) == 0)
      {
        id result = (id)REMaterialCreateDefaultSamplerDescriptor();
      }
      *(void *)a1 = result;
      *(void *)(a1 + 8) = v6;
      *(_OWORD *)(a1 + 16) = xmmword_22832B280;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v4 = 1;
      break;
    case 2:
      String.utf8CString.getter();
      REMaterialAssetGetFloat();
      id result = (id)swift_release();
      *(void *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v4 = 2;
      break;
    case 3:
      String.utf8CString.getter();
      REMaterialAssetGetFloat2F();
      id result = (id)swift_release();
      *(void *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v4 = 3;
      break;
    case 4:
      String.utf8CString.getter();
      REMaterialAssetGetFloat3F();
      id result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v4 = 4;
      break;
    case 5:
      String.utf8CString.getter();
      REMaterialAssetGetFloat4F();
      id result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v4 = 5;
      break;
    case 6:
      String.utf8CString.getter();
      REMaterialAssetGetFloat2x2F();
      id result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v4 = 7;
      break;
    case 7:
      String.utf8CString.getter();
      REMaterialAssetGetFloat3x3F();
      id result = (id)swift_release();
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      char v4 = 8;
      break;
    case 8:
      String.utf8CString.getter();
      REMaterialAssetGetFloat4x4F();
      id result = (id)swift_release();
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v4 = 9;
      break;
    case 9:
      String.utf8CString.getter();
      REMaterialAssetGetBool();
      id result = (id)swift_release();
      *(void *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v4 = 10;
      break;
    case 11:
      String.utf8CString.getter();
      REMaterialAssetGetInt();
      id result = (id)swift_release();
      *(void *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v4 = 11;
      break;
    case 12:
      String.utf8CString.getter();
      REMaterialAssetGetUInt();
      id result = (id)swift_release();
      *(void *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v4 = 15;
      break;
    case 13:
      String.utf8CString.getter();
      REMaterialAssetGetInt2();
      id result = (id)swift_release();
      *(void *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v4 = 12;
      break;
    case 14:
      String.utf8CString.getter();
      REMaterialAssetGetUInt2();
      id result = (id)swift_release();
      *(void *)a1 = 0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v4 = 16;
      break;
    case 15:
      String.utf8CString.getter();
      REMaterialAssetGetInt3();
      id result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v4 = 13;
      break;
    case 16:
      String.utf8CString.getter();
      REMaterialAssetGetUInt3();
      id result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v4 = 17;
      break;
    case 17:
      String.utf8CString.getter();
      REMaterialAssetGetInt4();
      id result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v4 = 14;
      break;
    case 18:
      String.utf8CString.getter();
      REMaterialAssetGetUInt4();
      id result = (id)swift_release();
      *(_OWORD *)a1 = 0uLL;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      char v4 = 18;
      break;
    case 19:
      String.utf8CString.getter();
      REMaterialAssetGetColor3F();
      swift_release();
      goto LABEL_26;
    case 20:
      String.utf8CString.getter();
      REMaterialAssetGetColor4F();
      swift_release();
LABEL_26:
      id result = (id)RECreateCGColorFromColorGamut();
      *(void *)a1 = result;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(void *)(a1 + 56) = 0;
      char v4 = 6;
      break;
    default:
LABEL_2:
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      char v4 = -1;
      break;
  }
  *(unsigned char *)(a1 + 64) = v4;
  return result;
}

uint64_t protocol witness for LoadableResource.init(fromCore:) in conformance __MaterialResource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 136))();
  *a1 = result;
  return result;
}

void __MaterialResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t __MaterialResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance __MaterialResource()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t static __MaterialResource.load(_:)(uint64_t a1, uint64_t a2)
{
  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  return MEMORY[0x270FA2498](static __MaterialResource.load(_:), 0, 0);
}

uint64_t static __MaterialResource.load(_:)()
{
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  uint64_t v2 = specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(v0 + 2);
  v0[13] = v2;
  uint64_t v3 = v2;
  uint64_t v4 = v0[11];
  uint64_t v5 = swift_task_alloc();
  v0[14] = v5;
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[15] = v6;
  *uint64_t v6 = v0;
  v6[1] = static __MaterialResource.load(_:);
  return MEMORY[0x270FA2318]();
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x270FA2498](static __MaterialResource.load(_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  uint64_t v10 = v0;
  uint64_t v2 = (uint64_t *)v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = (void *)REMaterialParameterBlockValueCreate();
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = v3;
  static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v1, &v6, 0, 0, 255, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t closure #1 in static __MaterialResource.load(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __n128 v5 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = partial apply for closure #1 in closure #1 in static __MaterialResource.load(_:);
  uint64_t aBlock[5] = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_8;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = _Block_copy(v8);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  v13[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v13[5] = v10;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v13[3] = &block_descriptor_126;
  uint64_t v11 = _Block_copy(v13);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v11);
  _Block_release(v8);
  swift_release();
  return REAssetLoadRequestAddAsset();
}

uint64_t AnyMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t AnyMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  __n128 v5 = *(void **)(v1 + 32);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t AnyMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = v5;
  return result;
}

uint64_t (*AnyMaterial.__parameterBlock.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t specialized static LoadableResource.fromCore(assetRef:)(uint64_t a1)
{
  id v2 = (id)REAssetGetSwiftObject();
  type metadata accessor for __MaterialResource();
  uint64_t v3 = swift_dynamicCastClass();
  if (!v3)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = swift_allocObject();
    RERetain();
    *(void *)(v3 + 16) = a1;
    REAssetHandleLoadNow();
    REAssetSetSwiftObject();
  }
  return v3;
}

uint64_t AnyMaterial.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = REMaterialParameterBlockValueCreate();
  uint64_t result = specialized static LoadableResource.fromCore(assetRef:)(v3);
  if (result)
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v6;
    *(unsigned char *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = v4;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Material.__resource.getter in conformance AnyMaterial()
{
  return swift_retain();
}

uint64_t protocol witness for Material.__parameterBlock.getter in conformance AnyMaterial@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void **)(v1 + 32);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Material.__parameterBlock.setter in conformance AnyMaterial(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = v5;
  return result;
}

uint64_t (*protocol witness for Material.__parameterBlock.modify in conformance AnyMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*protocol witness for Material.__triangleFillMode.modify in conformance AnyMaterial(void *a1))(void, void)
{
  *a1 = 0;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance AnyMaterial(unsigned char *a1))(void, void)
{
  *a1 = 1;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*protocol witness for Material.__faceCullMode.modify in conformance AnyMaterial(uint64_t a1))(void, void)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t specialized Material.getColor(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 72);
  swift_bridgeObjectRetain_n();
  id v6 = v5;
  swift_bridgeObjectRetain_n();
  id v7 = v6;
  specialized String.withCString<A>(_:)(a1, a2, v7, (uint64_t)&v10);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = v10;
  if (v17 > 5u)
  {
    if (v17 == 6) {
      return result;
    }
    if (v17 == 255) {
      return 0;
    }
    goto LABEL_7;
  }
  if (v17 == 4)
  {
    v9.n128_u64[1] = __PAIR64__(1.0, DWORD2(v10));
    v9.n128_u64[0] = v10;
    return specialized SIMD4<>.cgColor.getter(v9);
  }
  if (v17 != 5)
  {
LABEL_7:
    outlined consume of __RKMaterialParameterBlock.Parameter?((void *)v10, *((uint64_t *)&v10 + 1), v11, v12, v13, v14, v15, v16, v17);
    return 0;
  }
  __n128 v9 = (__n128)v10;
  return specialized SIMD4<>.cgColor.getter(v9);
}

uint64_t specialized Material.setScalarParameter(_:value:)(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  PbrCommonKeys.Constants.rawValue.getter(0x50204u >> (8 * a1));
  if (a2 < 0)
  {
    String.utf8CString.getter();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v11 = REMaterialParameterBlockValueCopy();
      uint64_t v12 = *(void **)(v3 + 72);
      *(void *)(v3 + 72) = v11;
    }
    REMaterialParameterBlockValueSetFloat();
    swift_bridgeObjectRelease();
    swift_release();
    outlined init with copy of SimpleMaterial(v3, (uint64_t)v26);
    unint64_t v13 = PbrCommonKeys.Textures.rawValue.getter(10 - a1);
    uint64_t v15 = v14;
    uint64_t v16 = swift_retain_n();
    specialized Material.makeMaterialParametersTextureFromTextureResource(_:textureKey:)(v16, v13, v15, (uint64_t)v28);
    swift_bridgeObjectRelease();
    outlined destroy of SimpleMaterial((uint64_t)v26);
    uint64_t v18 = (void *)v28[0];
    uint64_t v17 = v28[1];
    uint64_t v19 = v28[2];
    v20.i32[0] = v29;
    int16x8_t v25 = (int16x8_t)vmovl_u8(v20);
    PbrCommonKeys.Textures.rawValue.getter(10 - a1);
    char v21 = (const char *)(String.utf8CString.getter() + 32);
    id v22 = v18;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v23 = REMaterialParameterBlockValueCopy();
      id v24 = *(void **)(v3 + 72);
      *(void *)(v3 + 72) = v23;
    }
    v26[0] = v18;
    v26[1] = v17;
    v26[2] = v19;
    unsigned __int32 v27 = vmovn_s16(v25).u32[0];
    __RKMaterialParameterBlock.setTextureParameter(texture:key:)((uint64_t)v26, v21);
    swift_release_n();

    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of MaterialScalarParameter(a2);
    outlined consume of MaterialScalarParameter(a2);
    return swift_release();
  }
  else
  {
    String.utf8CString.getter();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v6 = REMaterialParameterBlockValueCopy();
      id v7 = *(void **)(v3 + 72);
      *(void *)(v3 + 72) = v6;
    }
    REMaterialParameterBlockValueSetFloat();
    swift_bridgeObjectRelease();
    swift_release();
    PbrCommonKeys.Textures.rawValue.getter(10 - a1);
    String.utf8CString.getter();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v8 = REMaterialParameterBlockValueCopy();
      __n128 v9 = *(void **)(v3 + 72);
      *(void *)(v3 + 72) = v8;
    }
    REMaterialParameterBlockValueClearParameter();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

void specialized Material.setColorParameter(_:value:)(char a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  PbrCommonKeys.Constants.rawValue.getter(0x50204u >> (8 * a1));
  if (a3)
  {
    swift_retain();
    CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    CGColorRef v28 = GenericRGB;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v32 = 0;
    char v33 = 6;
    uint64_t v13 = String.utf8CString.getter();
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)((const char *)(v13 + 32), (uint64_t)&v28);

    swift_bridgeObjectRelease();
    swift_release();
    char v14 = 10 - a1;
    outlined init with copy of SimpleMaterial(v3, (uint64_t)&v28);
    unint64_t v15 = PbrCommonKeys.Textures.rawValue.getter(10 - a1);
    uint64_t v17 = v16;
    uint64_t v18 = swift_retain_n();
    specialized Material.makeMaterialParametersTextureFromTextureResource(_:textureKey:)(v18, v15, v17, (uint64_t)v34);
    swift_bridgeObjectRelease();
    outlined destroy of SimpleMaterial((uint64_t)&v28);
    uint8x8_t v20 = (void *)v34[0];
    uint64_t v19 = v34[1];
    uint64_t v21 = v34[2];
    v22.i32[0] = v35;
    int16x8_t v27 = (int16x8_t)vmovl_u8(v22);
    PbrCommonKeys.Textures.rawValue.getter(v14);
    uint64_t v23 = (const char *)(String.utf8CString.getter() + 32);
    id v24 = v20;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v25 = REMaterialParameterBlockValueCopy();
      char v26 = *(void **)(v4 + 72);
      *(void *)(v4 + 72) = v25;
    }
    CGColorRef v28 = (CGColorRef)v20;
    *(void *)&long long v29 = v19;
    *((void *)&v29 + 1) = v21;
    LODWORD(v30) = vmovn_s16(v27).u32[0];
    __RKMaterialParameterBlock.setTextureParameter(texture:key:)((uint64_t)&v28, v23);
    swift_release_n();

    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of __MaterialColorParameter(a2, 1);
    outlined consume of __MaterialColorParameter(a2, 1);
    swift_release();
  }
  else
  {
    CGColorRef v28 = (CGColorRef)a2;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v32 = 0;
    char v33 = 6;
    uint64_t v8 = (const char *)(String.utf8CString.getter() + 32);
    outlined copy of __MaterialColorParameter(a2, 0);
    id v9 = a2;
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v8, (uint64_t)&v28);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of __MaterialColorParameter(a2, 0);
    PbrCommonKeys.Textures.rawValue.getter(10 - a1);
    String.utf8CString.getter();
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v10 = REMaterialParameterBlockValueCopy();
      uint64_t v11 = *(void **)(v3 + 72);
      *(void *)(v3 + 72) = v10;
    }
    REMaterialParameterBlockValueClearParameter();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of __MaterialColorParameter(a2, 0);
  }
}

void specialized Material.getLegacyBase(legacy:)(uint64_t a1@<X0>, void *a2@<X1>, CGColor *a3@<X3>, uint64_t a4@<X8>)
{
  v13[3] = &type metadata for SimpleMaterial;
  v13[4] = &protocol witness table for SimpleMaterial;
  v13[0] = swift_allocObject();
  outlined init with copy of SimpleMaterial(v4, v13[0] + 16);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v13, a1, a2, (uint64_t)&v14);
  id v9 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v16;
  outlined copy of MaterialParameters.Texture?(v15, v16);

  outlined consume of MaterialParameters.Texture?(v8, v10);
  if (v10)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v8, v10);
    *(void *)a4 = v10;
    *(unsigned char *)(a4 + 8) = 1;
  }
  else
  {
    CGColorRef GenericRGB = a3;
    if (!a3) {
      CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    }
    *(void *)a4 = GenericRGB;
    *(unsigned char *)(a4 + 8) = 0;
    MEMORY[0x270F9A8A0]();
  }
}

{
  uint64_t v4;
  void *v8;
  void *v9;
  uint64_t v10;
  CGColorRef GenericRGB;
  void v13[5];
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t vars8;

  v13[3] = &type metadata for UnlitMaterial;
  v13[4] = &protocol witness table for UnlitMaterial;
  v13[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial(v4, v13[0] + 16);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v13, a1, a2, (uint64_t)&v14);
  id v9 = v14;
  uint64_t v8 = v15;
  uint64_t v10 = v16;
  outlined copy of MaterialParameters.Texture?(v15, v16);

  outlined consume of MaterialParameters.Texture?(v8, v10);
  if (v10)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v8, v10);
    *(void *)a4 = v10;
    *(unsigned char *)(a4 + 8) = 1;
  }
  else
  {
    CGColorRef GenericRGB = a3;
    if (!a3) {
      CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    }
    *(void *)a4 = GenericRGB;
    *(unsigned char *)(a4 + 8) = 0;
    MEMORY[0x270F9A8A0]();
  }
}

void specialized Material.setLegacyBase(legacy:value:)(uint64_t a1, void *a2, char a3)
{
  __asm { FMOV            V0.4S, #1.0 }
  uint64_t v11 = (void *)specialized SIMD4<>.cgColor.getter(_Q0);
  uint64_t v12 = *(void **)(a1 + 24);
  if ((a3 & 1) == 0)
  {
    id v13 = a2;

    *(void *)(a1 + 24) = a2;
    char v14 = *(void **)(a1 + 16);
    if (v14)
    {
      if (a2)
      {
        unint64_t v15 = v14;
        id v16 = v13;
        specialized SIMD4<>.init(_:)(v15);
        float32x4_t v30 = v17;
        uint64_t v18 = (CGColor *)v16;
        specialized SIMD4<>.init(_:)(v18);
        id GenericRGB = (id)specialized SIMD4<>.cgColor.getter((__n128)vmulq_f32(v30, v19));

        int v21 = 0;
        a2 = 0;
        uint8x8_t v22 = 0;
        uint64_t v11 = v18;
        goto LABEL_14;
      }
      uint8x8_t v22 = 0;
      int v21 = 0;
      goto LABEL_13;
    }
    id v24 = 0;
    uint64_t v25 = 0;
    int v21 = 0;
    uint8x8_t v22 = 0;
    char v26 = 0;
    int v27 = 0;
    id GenericRGB = v13;
    if (a2)
    {
LABEL_11:
      id v28 = v13;
      int v21 = v27;
      a2 = v26;
      goto LABEL_14;
    }
LABEL_10:
    id GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    id v13 = 0;
    uint8x8_t v22 = v24;
    char v26 = v25;
    int v27 = v21;
    goto LABEL_11;
  }
  int v21 = 84148994;
  swift_retain();

  *(void *)(a1 + 24) = 0;
  id v23 = (id)REMaterialCreateDefaultSamplerDescriptor();
  id v24 = v23;
  char v14 = *(void **)(a1 + 16);
  if (!v14)
  {
    uint64_t v25 = a2;
    goto LABEL_10;
  }
  uint8x8_t v22 = v23;
LABEL_13:
  id GenericRGB = v14;
LABEL_14:

  v31[0] = GenericRGB;
  v31[1] = v22;
  v31[2] = a2;
  v31[3] = 0;
  int v32 = v21;
  id v29 = GenericRGB;
  outlined copy of MaterialParameters.Texture?(v22, (uint64_t)a2);
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v31);

  outlined consume of MaterialParameters.Texture?(v22, (uint64_t)a2);

  outlined consume of MaterialParameters.Texture?(v22, (uint64_t)a2);
}

uint64_t SimpleMaterial.assetService.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of (Int, URL)(v1, (uint64_t)&v5, &demangling cache variable for type metadata for __REAssetService?);
  if (v6) {
    return outlined init with take of BindableDataInternal(&v5, a1);
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for __REAssetService?);
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, a1);
  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for __REAssetService?);
  return outlined init with copy of __REAssetService(a1, v1);
}

uint64_t SimpleMaterial.SimpleMaterialMapping.init(_:)(void *a1)
{
  outlined init with copy of __REAssetService((uint64_t)a1, v1 + 16);
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  if (AssetHandle
    && (*(void *)(v1 + 56) = AssetHandle,
        uint64_t v6 = a1[3],
        uint64_t v7 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v6),
        (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7),
        (uint64_t v8 = REAssetManagerCreateAssetHandle()) != 0))
  {
    *(void *)(v1 + 64) = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t SimpleMaterial.SimpleMaterialMapping.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

unint64_t one-time initialization function for materialMapRegistry()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<SimpleMaterial.SimpleMaterialMapping>);
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 24) = result;
  static SimpleMaterial.materialMapRegistry = v0;
  return result;
}

uint64_t SimpleMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t SimpleMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  char v3 = *(unsigned char *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  long long v5 = *(void **)(v1 + 72);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t SimpleMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v2;
  *(unsigned char *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = v4;
  *(void *)(v1 + 72) = v5;
  return result;
}

uint64_t (*SimpleMaterial.__parameterBlock.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

Swift::Void __swiftcall SimpleMaterial.updateMaterialResource(_:)(Swift::Bool a1)
{
  char v3 = (CGColor *)specialized Material.getColor(name:)(*(void *)(v1 + 80), *(void *)(v1 + 88));
  if (v3)
  {
    uint64_t v4 = v3;
    double Alpha = CGColorGetAlpha(v3);

    a1 = Alpha < 1.0;
  }
  if (a1 != *(unsigned char *)(v1 + 112))
  {
    if (a1)
    {
      uint64_t v6 = 0xD000000000000023;
      uint64_t v7 = (void *)0x8000000228352B00;
    }
    else
    {
      uint64_t v7 = (void *)0x8000000228352AE0;
      uint64_t v6 = 0xD000000000000018;
    }
    uint64_t v8 = specialized static LoadableResource.loadEngineResource(assetPath:)(v6, v7);
    swift_release();
    *(void *)(v1 + 40) = v8;
    *(unsigned char *)(v1 + 112) = a1;
  }
}

uint64_t specialized static LoadableResource.loadEngineResource(assetPath:)(uint64_t a1, void *a2)
{
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v14);
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  __swift_project_boxed_opaque_existential_1(&v14, v16);
  swift_retain();
  uint64_t v7 = __REAssetService.asset(_:)(a1, (uint64_t)a2, v5, v6);
  if (v7)
  {
    uint64_t v8 = v7;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
    uint64_t v9 = specialized static LoadableResource.fromCore(assetRef:)(*(void *)(v8 + 16));
    if (v9)
    {
      uint64_t v10 = v9;
      swift_release();
      swift_release();
      return v10;
    }
    unint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD000000000000020;
    unint64_t v15 = 0x8000000228352FA0;
    v13._uint64_t countAndFlagsBits = a1;
    v13._object = a2;
    String.append(_:)(v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
    unint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD000000000000020;
    unint64_t v15 = 0x8000000228352FA0;
    v12._uint64_t countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double key path getter for SimpleMaterial.color : SimpleMaterial@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v9[3] = &type metadata for SimpleMaterial;
  _OWORD v9[4] = &protocol witness table for SimpleMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of SimpleMaterial(a1, v9[0] + 16);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v4 = *(void **)(a1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v9, v5, v4, (uint64_t)&v10);
  uint64_t v6 = v12;
  int v7 = v13;
  *(void *)a2 = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a2 + 8) = v11;
  *(void *)(a2 + 24) = v6;
  *(_DWORD *)(a2 + 32) = v7;
  return result;
}

void key path setter for SimpleMaterial.color : SimpleMaterial(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 16);
  v2[0] = *(_OWORD *)a1;
  v2[1] = v1;
  int v3 = *(_DWORD *)(a1 + 32);
  outlined retain of PhysicallyBasedMaterial.BaseColor((uint64_t)v2);
  swift_bridgeObjectRetain();
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v2);
  SimpleMaterial.updateMaterialResource(_:)(0);
}

void SimpleMaterial.color.setter(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 16);
  v2[0] = *(_OWORD *)a1;
  v2[1] = v1;
  int v3 = *(_DWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v2);
  swift_bridgeObjectRelease();
  outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v2);
  SimpleMaterial.updateMaterialResource(_:)(0);
}

void (*SimpleMaterial.color.modify(void *a1))(char **a1, char a2)
{
  int v3 = malloc(0x80uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t)(v3 + 10);
  v3[15] = v1;
  void v8[3] = &type metadata for SimpleMaterial;
  _OWORD v8[4] = &protocol witness table for SimpleMaterial;
  v8[0] = swift_allocObject();
  outlined init with copy of SimpleMaterial(v1, v8[0] + 16);
  uint64_t v6 = *(void *)(v1 + 80);
  uint64_t v5 = *(void **)(v1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v8, v6, v5, v4);
  return SimpleMaterial.color.modify;
}

void SimpleMaterial.color.modify(char **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 80);
  long long v4 = *((_OWORD *)*a1 + 6);
  if (a2)
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)v3;
    *((_OWORD *)v2 + 1) = v4;
    *((_DWORD *)v2 + 8) = *(_DWORD *)(v3 + 32);
    outlined retain of PhysicallyBasedMaterial.BaseColor((uint64_t)v2);
    swift_bridgeObjectRetain();
    specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v2);
    swift_bridgeObjectRelease();
    outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v2);
    SimpleMaterial.updateMaterialResource(_:)(0);
    uint64_t v5 = (void *)*((void *)v2 + 11);
    uint64_t v6 = *((void *)v2 + 12);

    outlined consume of MaterialParameters.Texture?(v5, v6);
  }
  else
  {
    *(_OWORD *)(v2 + 40) = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 56) = v4;
    *((_DWORD *)v2 + 18) = *(_DWORD *)(v3 + 32);
    swift_bridgeObjectRetain();
    specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)(v2 + 40));
    swift_bridgeObjectRelease();
    outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)(v2 + 40));
    SimpleMaterial.updateMaterialResource(_:)(0);
  }

  free(v2);
}

CGColorRef SimpleMaterial.__tintColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 96);
  if (v1)
  {
    CGColorRef GenericRGB = *(CGColorRef *)(v0 + 96);
  }
  else
  {
    CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    uint64_t v1 = 0;
  }
  id v3 = v1;
  return GenericRGB;
}

uint64_t key path getter for SimpleMaterial.__tintColor : SimpleMaterial@<X0>(uint64_t a1@<X0>, CGColorRef *a2@<X8>)
{
  if (*(void *)(a1 + 96)) {
    CGColorRef GenericRGB = *(CGColorRef *)(a1 + 96);
  }
  else {
    CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  }
  *a2 = GenericRGB;

  return MEMORY[0x270F9A8A0]();
}

void SimpleMaterial.__tintColor.setter(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = v1[10];
  uint64_t v4 = v1[11];
  uint64_t v6 = (void *)v1[13];
  if (v6)
  {
    id v7 = a1;
    id v8 = v6;
    uint64_t v9 = (CGColor *)v7;
    id v10 = v8;
    swift_bridgeObjectRetain();
    specialized SIMD4<>.init(_:)(v9);
    *(_OWORD *)uint64_t v18 = v11;
    uint64_t v12 = (CGColor *)v10;
    specialized SIMD4<>.init(_:)(v12);
    id v14 = (id)specialized SIMD4<>.cgColor.getter((__n128)vmulq_f32(*(float32x4_t *)v18, v13));
  }
  else
  {
    id v14 = a1;
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
  }
  id v20 = v14;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v24 = 0;
  char v25 = 6;
  unint64_t v15 = (const char *)(String.utf8CString.getter() + 32);
  id v16 = v14;
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v15, (uint64_t)&v20);

  swift_release();
  uint64_t v17 = (void *)v2[12];
  v2[10] = v5;
  v2[11] = v4;
  v2[12] = a1;
  v2[13] = v6;
  id v19 = a1;

  SimpleMaterial.updateMaterialResource(_:)(0);
  swift_bridgeObjectRelease();
}

void (*SimpleMaterial.__tintColor.modify(CGColorRef *a1))(void **a1, char a2)
{
  a1[1] = (CGColorRef)v1;
  CGColorRef v3 = v1[12];
  if (v3)
  {
    CGColorRef GenericRGB = v1[12];
  }
  else
  {
    CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    CGColorRef v3 = 0;
  }
  *a1 = GenericRGB;
  uint64_t v5 = v3;
  return SimpleMaterial.__tintColor.modify;
}

void SimpleMaterial.__tintColor.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    SimpleMaterial.__tintColor.setter(v3);
  }
  else
  {
    SimpleMaterial.__tintColor.setter(v2);
  }
}

void SimpleMaterial.__baseColor.getter(uint64_t a1@<X8>)
{
  specialized Material.getLegacyBase(legacy:)(*(void *)(v1 + 80), *(void **)(v1 + 88), *(CGColor **)(v1 + 104), a1);
}

uint64_t SimpleMaterial.__baseColor.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *(void *)(v1 + 88);
  uint64_t v5 = *(void **)(v1 + 96);
  uint64_t v6 = *(void **)(v1 + 104);
  uint64_t v16 = *(void *)(v1 + 80);
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  id v19 = v6;
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = v6;
  specialized Material.setLegacyBase(legacy:value:)((uint64_t)&v16, v2, v3);
  outlined consume of __MaterialColorParameter(v2, v3);
  uint64_t v10 = v16;
  uint64_t v9 = v17;
  long long v11 = v18;
  id v12 = v19;
  id v13 = v19;
  swift_bridgeObjectRetain();
  id v14 = v11;
  swift_bridgeObjectRelease();

  *(void *)(v1 + 80) = v10;
  *(void *)(v1 + 88) = v9;
  *(void *)(v1 + 96) = v11;
  *(void *)(v1 + 104) = v12;
  SimpleMaterial.updateMaterialResource(_:)(0);

  return swift_bridgeObjectRelease();
}

void (*SimpleMaterial.__baseColor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = v1[10];
  uint64_t v4 = (void *)v1[11];
  uint64_t v5 = (CGColor *)v1[13];
  v12[3] = &type metadata for SimpleMaterial;
  _OWORD v12[4] = &protocol witness table for SimpleMaterial;
  v12[0] = swift_allocObject();
  outlined init with copy of SimpleMaterial((uint64_t)v1, v12[0] + 16);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v12, v3, v4, (uint64_t)&v13);
  id v7 = v13;
  uint64_t v6 = v14;
  uint64_t v8 = v15;
  outlined copy of MaterialParameters.Texture?(v14, v15);

  outlined consume of MaterialParameters.Texture?(v6, v8);
  if (v8)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v6, v8);
    *(void *)a1 = v8;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    CGColorRef GenericRGB = v5;
    if (!v5) {
      CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    }
    *(void *)a1 = GenericRGB;
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v10 = v5;
  }
  return SimpleMaterial.__baseColor.modify;
}

void SimpleMaterial.__baseColor.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)a1;
  char v4 = *(unsigned char *)(a1 + 8);
  if (a2)
  {
    uint64_t v5 = *(void *)(v2 + 88);
    uint64_t v6 = *(void **)(v2 + 96);
    id v7 = *(void **)(v2 + 104);
    uint64_t v27 = *(void *)(v2 + 80);
    uint64_t v28 = v5;
    id v29 = v6;
    id v30 = v7;
    outlined copy of __MaterialColorParameter(v3, v4);
    swift_bridgeObjectRetain();
    id v8 = v6;
    id v9 = v7;
    specialized Material.setLegacyBase(legacy:value:)((uint64_t)&v27, v3, v4);
    outlined consume of __MaterialColorParameter(v3, v4);
    uint64_t v11 = v27;
    uint64_t v10 = v28;
    id v12 = v29;
    id v13 = v30;
    id v14 = v30;
    swift_bridgeObjectRetain();
    id v15 = v12;
    swift_bridgeObjectRelease();

    *(void *)(v2 + 80) = v11;
    *(void *)(v2 + 88) = v10;
    *(void *)(v2 + 96) = v12;
    *(void *)(v2 + 104) = v13;
    SimpleMaterial.updateMaterialResource(_:)(0);
    swift_bridgeObjectRelease();

    outlined consume of __MaterialColorParameter(v3, v4);
  }
  else
  {
    uint64_t v16 = *(void *)(v2 + 88);
    uint64_t v17 = *(void **)(v2 + 96);
    uint64_t v18 = *(void **)(v2 + 104);
    uint64_t v27 = *(void *)(v2 + 80);
    uint64_t v28 = v16;
    id v29 = v17;
    id v30 = v18;
    swift_bridgeObjectRetain();
    id v19 = v17;
    id v20 = v18;
    specialized Material.setLegacyBase(legacy:value:)((uint64_t)&v27, v3, v4);
    outlined consume of __MaterialColorParameter(v3, v4);
    uint64_t v22 = v27;
    uint64_t v21 = v28;
    long long v23 = v29;
    id v24 = v30;
    id v26 = v30;
    swift_bridgeObjectRetain();
    id v25 = v23;
    swift_bridgeObjectRelease();

    *(void *)(v2 + 80) = v22;
    *(void *)(v2 + 88) = v21;
    *(void *)(v2 + 96) = v23;
    *(void *)(v2 + 104) = v24;
    SimpleMaterial.updateMaterialResource(_:)(0);
    swift_bridgeObjectRelease();
  }
}

unint64_t key path getter for SimpleMaterial.roughness : SimpleMaterial@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = (unint64_t)specialized Material.getTexture(_:)(10);
  if (result)
  {
    unint64_t v3 = result | 0x8000000000000000;
  }
  else
  {
    unint64_t result = specialized Material.getScalar(_:)(4);
    unint64_t v3 = result;
    if ((result & 0x100000000) != 0) {
      unint64_t v3 = 1065353216;
    }
  }
  *a1 = v3;
  return result;
}

uint64_t SimpleMaterial.roughness.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  specialized Material.setScalarParameter(_:value:)(0, *a1);

  return outlined consume of MaterialScalarParameter(v1);
}

void MaterialScalarParameter.init(floatLiteral:)(void *a1@<X8>, unsigned int a2@<S0>)
{
  *a1 = a2;
}

uint64_t (*SimpleMaterial.roughness.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  unint64_t v3 = (unint64_t)specialized Material.getTexture(_:)(10);
  if (!v3)
  {
    uint64_t v5 = *(void **)(v1 + 72);
    swift_bridgeObjectRetain_n();
    id v6 = v5;
    swift_bridgeObjectRetain_n();
    id v7 = v6;
    specialized String.withCString<A>(_:)(0x73656E6867756F72, 0xEE00656C61635373, v7, (uint64_t)v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v10 != 255)
    {
      if (v10 == 2)
      {
        unint64_t v4 = LODWORD(v9[0]);
        goto LABEL_8;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v9[0], (uint64_t)v9[1], (uint64_t)v9[2], (uint64_t)v9[3], (uint64_t)v9[4], (uint64_t)v9[5], (uint64_t)v9[6], (uint64_t)v9[7], v10);
    }
    unint64_t v4 = 1065353216;
    goto LABEL_8;
  }
  unint64_t v4 = v3 | 0x8000000000000000;
LABEL_8:
  *a1 = v4;
  return SimpleMaterial.roughness.modify;
}

uint64_t SimpleMaterial.roughness.modify(uint64_t *a1, char a2)
{
  return SimpleMaterial.roughness.modify(a1, a2, 0);
}

unint64_t key path getter for SimpleMaterial.metallic : SimpleMaterial@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = (unint64_t)specialized Material.getTexture(_:)(9);
  if (result)
  {
    unint64_t v3 = result | 0x8000000000000000;
  }
  else
  {
    unint64_t result = specialized Material.getScalar(_:)(2);
    unint64_t v3 = result;
    if ((result & 0x100000000) != 0) {
      unint64_t v3 = 0;
    }
  }
  *a1 = v3;
  return result;
}

uint64_t SimpleMaterial.metallic.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  specialized Material.setScalarParameter(_:value:)(1, *a1);

  return outlined consume of MaterialScalarParameter(v1);
}

uint64_t (*SimpleMaterial.metallic.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  unint64_t v3 = (unint64_t)specialized Material.getTexture(_:)(9);
  if (!v3)
  {
    uint64_t v5 = *(void **)(v1 + 72);
    swift_bridgeObjectRetain_n();
    id v6 = v5;
    swift_bridgeObjectRetain_n();
    id v7 = v6;
    specialized String.withCString<A>(_:)(0x63696C6C6174656DLL, 0xED0000656C616353, v7, (uint64_t)v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v10 != 255)
    {
      if (v10 == 2)
      {
        unint64_t v4 = LODWORD(v9[0]);
        goto LABEL_8;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v9[0], (uint64_t)v9[1], (uint64_t)v9[2], (uint64_t)v9[3], (uint64_t)v9[4], (uint64_t)v9[5], (uint64_t)v9[6], (uint64_t)v9[7], v10);
    }
    unint64_t v4 = 0;
    goto LABEL_8;
  }
  unint64_t v4 = v3 | 0x8000000000000000;
LABEL_8:
  *a1 = v4;
  return SimpleMaterial.metallic.modify;
}

uint64_t SimpleMaterial.metallic.modify(uint64_t *a1, char a2)
{
  return SimpleMaterial.roughness.modify(a1, a2, 1);
}

uint64_t SimpleMaterial.roughness.modify(uint64_t *a1, char a2, char a3)
{
  uint64_t v4 = *a1;
  if (a2)
  {
    outlined copy of MaterialScalarParameter(*a1);
    specialized Material.setScalarParameter(_:value:)(a3, v4);
    outlined consume of MaterialScalarParameter(v4);
  }
  else
  {
    specialized Material.setScalarParameter(_:value:)(a3, v4);
  }

  return outlined consume of MaterialScalarParameter(v4);
}

uint64_t SimpleMaterial.__emissive.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (uint64_t)specialized Material.getTexture(_:)(8);
  BOOL v3 = result != 0;
  if (!result)
  {
    uint64_t result = specialized Material.getColor(name:)(0x6576697373696D65, 0xED0000726F6C6F43);
    if (!result) {
      uint64_t result = (uint64_t)CGColorCreateGenericRGB(0.0, 0.0, 0.0, 1.0);
    }
    BOOL v3 = 0;
  }
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

void key path setter for SimpleMaterial.__emissive : SimpleMaterial(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  outlined copy of __MaterialColorParameter(*(void **)a1, v2);
  specialized Material.setColorParameter(_:value:)(2, v1, v2);

  outlined consume of __MaterialColorParameter(v1, v2);
}

void SimpleMaterial.__emissive.setter(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  specialized Material.setColorParameter(_:value:)(2, *(void **)a1, v2);

  outlined consume of __MaterialColorParameter(v1, v2);
}

void (*SimpleMaterial.__emissive.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t GenericRGB = (uint64_t)specialized Material.getTexture(_:)(8);
  uint64_t v4 = GenericRGB;
  if (!GenericRGB)
  {
    uint64_t GenericRGB = specialized Material.getColor(name:)(0x6576697373696D65, 0xED0000726F6C6F43);
    if (!GenericRGB) {
      uint64_t GenericRGB = (uint64_t)CGColorCreateGenericRGB(0.0, 0.0, 0.0, 1.0);
    }
  }
  *(void *)a1 = GenericRGB;
  *(unsigned char *)(a1 + 8) = v4 != 0;
  return SimpleMaterial.__emissive.modify;
}

void SimpleMaterial.__emissive.modify(uint64_t a1, char a2)
{
  char v2 = *(void **)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  if (a2)
  {
    outlined copy of __MaterialColorParameter(*(void **)a1, v3);
    specialized Material.setColorParameter(_:value:)(2, v2, v3);
    outlined consume of __MaterialColorParameter(v2, v3);
  }
  else
  {
    specialized Material.setColorParameter(_:value:)(2, v2, v3);
  }

  outlined consume of __MaterialColorParameter(v2, v3);
}

uint64_t SimpleMaterial.__usesTransparency.getter()
{
  return *(unsigned __int8 *)(v0 + 112);
}

void SimpleMaterial.__usesTransparency.setter(BOOL a1)
{
  char v3 = (CGColor *)specialized Material.getColor(name:)(*(void *)(v1 + 80), *(void *)(v1 + 88));
  if (v3)
  {
    uint64_t v4 = v3;
    double Alpha = CGColorGetAlpha(v3);

    a1 = Alpha < 1.0;
  }
  if (a1 != *(unsigned char *)(v1 + 112))
  {
    if (a1)
    {
      uint64_t v6 = 0xD000000000000023;
      id v7 = (void *)0x8000000228352B00;
    }
    else
    {
      id v7 = (void *)0x8000000228352AE0;
      uint64_t v6 = 0xD000000000000018;
    }
    uint64_t v8 = specialized static LoadableResource.loadEngineResource(assetPath:)(v6, v7);
    swift_release();
    *(void *)(v1 + 40) = v8;
    *(unsigned char *)(v1 + 112) = a1;
  }
}

void (*SimpleMaterial.__usesTransparency.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 112);
  return SimpleMaterial.__usesTransparency.modify;
}

void SimpleMaterial.__usesTransparency.modify(uint64_t *a1, char a2)
{
  int v2 = *((unsigned __int8 *)a1 + 8);
  uint64_t v3 = *a1;
  if (a2)
  {
    SimpleMaterial.__usesTransparency.setter(*((unsigned char *)a1 + 8));
  }
  else
  {
    uint64_t v4 = (CGColor *)specialized Material.getColor(name:)(*(void *)(v3 + 80), *(void *)(v3 + 88));
    if (v4)
    {
      uint64_t v5 = v4;
      double Alpha = CGColorGetAlpha(v4);

      int v2 = Alpha < 1.0;
    }
    if (v2 != *(unsigned __int8 *)(v3 + 112))
    {
      if (v2) {
        id v7 = (void *)0x8000000228352B00;
      }
      else {
        id v7 = (void *)0x8000000228352AE0;
      }
      if (v2) {
        uint64_t v8 = 0xD000000000000023;
      }
      else {
        uint64_t v8 = 0xD000000000000018;
      }
      uint64_t v9 = specialized static LoadableResource.loadEngineResource(assetPath:)(v8, v7);
      swift_release();
      *(void *)(v3 + 40) = v9;
      *(unsigned char *)(v3 + 112) = v2;
    }
  }
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v10 = *a2;
  uint64_t v7 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)v9);
  return SimpleMaterial.init(color:roughness:isMetallic:assetService:)(a1, &v10, a3, (uint64_t)v9, a4);
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:assetService:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a2;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 32) = 0;
  strcpy((char *)(a5 + 80), "baseColorTint");
  *(_WORD *)(a5 + 94) = -4864;
  *(void *)(a5 + 96) = 0;
  *(void *)(a5 + 104) = 0;
  *(unsigned char *)(a5 + 112) = 0;
  *(void *)(a5 + 120) = 0;
  *(void *)(a5 + 128) = 0;
  *(unsigned char *)(a5 + 136) = 1;
  *(_WORD *)(a5 + 137) = 257;
  *(void *)(a5 + 40) = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x8000000228352AE0);
  uint64_t v10 = REMaterialParameterBlockValueCreate();
  *(void *)(a5 + 48) = MEMORY[0x263F8EE78];
  *(unsigned char *)(a5 + 56) = 0;
  *(void *)(a5 + 64) = 0;
  *(void *)(a5 + 72) = v10;
  v22[0] = a1;
  memset(&v22[1], 0, 24);
  int v23 = 0;
  id v11 = a1;
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v22);

  outlined consume of MaterialParameters.Texture?(0, 0);
  id v12 = (CGColor *)specialized Material.getColor(name:)(*(void *)(a5 + 80), *(void *)(a5 + 88));
  if (!v12)
  {
    if ((*(unsigned char *)(a5 + 112) & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  id v13 = v12;
  double Alpha = CGColorGetAlpha(v12);

  if (Alpha < 1.0 == *(unsigned char *)(a5 + 112)) {
    goto LABEL_8;
  }
  if (Alpha >= 1.0)
  {
LABEL_6:
    uint64_t v15 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x8000000228352AE0);
    char v16 = 0;
    goto LABEL_7;
  }
  uint64_t v15 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000023, (void *)0x8000000228352B00);
  char v16 = 1;
LABEL_7:
  swift_release();
  *(void *)(a5 + 40) = v15;
  *(unsigned char *)(a5 + 112) = v16;
LABEL_8:
  specialized Material.setScalarParameter(_:value:)(0, v9);
  outlined consume of MaterialScalarParameter(v9);
  if (a3) {
    uint64_t v17 = 1065353216;
  }
  else {
    uint64_t v17 = 0;
  }
  specialized Material.setScalarParameter(_:value:)(1, v17);
  outlined consume of MaterialScalarParameter(v17);
  uint64_t v18 = *(void **)(a5 + 104);
  id v19 = v11;

  *(void *)(a5 + 104) = v11;
  outlined init with copy of __REAssetService(a4, (uint64_t)v21);
  outlined destroy of BodyTrackingComponent?(a5, &demangling cache variable for type metadata for __REAssetService?);
  outlined init with take of BindableDataInternal(v21, a5);

  return __swift_destroy_boxed_opaque_existential_1(a4);
}

uint64_t SimpleMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)&v8);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  strcpy((char *)(a1 + 80), "baseColorTint");
  *(_WORD *)(a1 + 94) = -4864;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  *(_WORD *)(a1 + 137) = 257;
  *(void *)(a1 + 40) = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x8000000228352AE0);
  uint64_t v3 = REMaterialParameterBlockValueCreate();
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v3;
  outlined init with copy of __REAssetService((uint64_t)&v8, (uint64_t)v7);
  outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAssetService?);
  outlined init with take of BindableDataInternal(v7, a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
  uint64_t v4 = *(void *)(a1 + 40);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(void *)(inited + 32) = v4;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return swift_release();
}

uint64_t SimpleMaterial.init(assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  strcpy((char *)(a2 + 80), "baseColorTint");
  *(_WORD *)(a2 + 94) = -4864;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(unsigned char *)(a2 + 136) = 1;
  *(_WORD *)(a2 + 137) = 257;
  *(void *)(a2 + 40) = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000018, (void *)0x8000000228352AE0);
  uint64_t v4 = REMaterialParameterBlockValueCreate();
  *(void *)(a2 + 48) = MEMORY[0x263F8EE78];
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = v4;
  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  outlined destroy of BodyTrackingComponent?(a2, &demangling cache variable for type metadata for __REAssetService?);
  outlined init with take of BindableDataInternal(v6, a2);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t SimpleMaterial.__triangleFillMode.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t SimpleMaterial.__triangleFillMode.setter(uint64_t result)
{
  *(void *)(v1 + 120) = result;
  return result;
}

uint64_t (*SimpleMaterial.__triangleFillMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *SimpleMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  *(void *)(v1 + 120) = *result;
  return result;
}

unsigned __int8 *(*SimpleMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(void *)(v1 + 120) == 1;
  return SimpleMaterial.triangleFillMode.modify;
}

unsigned __int8 *SimpleMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(void *)(*(void *)result + 120) = result[8];
  return result;
}

uint64_t SimpleMaterial.__faceCullMode.getter()
{
  return *(void *)(v0 + 128);
}

uint64_t SimpleMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 128) = result;
  *(unsigned char *)(v2 + 136) = a2 & 1;
  return result;
}

uint64_t (*SimpleMaterial.__faceCullMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*SimpleMaterial.__writesDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*SimpleMaterial.__readsDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__resource.getter in conformance SimpleMaterial()
{
  return swift_retain();
}

uint64_t protocol witness for Material.__parameterBlock.getter in conformance SimpleMaterial@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  char v3 = *(unsigned char *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void **)(v1 + 72);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Material.__parameterBlock.setter in conformance SimpleMaterial(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v2;
  *(unsigned char *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = v4;
  *(void *)(v1 + 72) = v5;
  return result;
}

uint64_t (*protocol witness for Material.__parameterBlock.modify in conformance SimpleMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__triangleFillMode.getter in conformance SimpleMaterial()
{
  return *(void *)(v0 + 120);
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance SimpleMaterial(uint64_t result)
{
  *(void *)(v1 + 120) = result;
  return result;
}

uint64_t (*protocol witness for Material.__triangleFillMode.modify in conformance SimpleMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance SimpleMaterial()
{
  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance SimpleMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 137) = result;
  return result;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance SimpleMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance SimpleMaterial()
{
  return *(unsigned __int8 *)(v0 + 138);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance SimpleMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 138) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance SimpleMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance SimpleMaterial()
{
  return *(void *)(v0 + 128);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance SimpleMaterial(uint64_t result, char a2)
{
  *(void *)(v2 + 128) = result;
  *(unsigned char *)(v2 + 136) = a2 & 1;
  return result;
}

uint64_t (*protocol witness for Material.__faceCullMode.modify in conformance SimpleMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SimpleMaterial.writesDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t SimpleMaterial.writesDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 137) = result;
  return result;
}

unsigned char *(*SimpleMaterial.writesDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 137);
  return BlendTreeAnimation.repeatMode.modify;
}

uint64_t SimpleMaterial.readsDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 138);
}

uint64_t SimpleMaterial.readsDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 138) = result;
  return result;
}

unsigned char *(*SimpleMaterial.readsDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 138);
  return SimpleMaterial.readsDepth.modify;
}

unsigned char *SimpleMaterial.readsDepth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 138) = result[8];
  return result;
}

void SimpleMaterial.faceCulling.getter(char *a1@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 136) & 1) == 0)
  {
    if (*(void *)(v1 + 128) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 128);
    }
  }
  *a1 = v2;
}

unsigned __int8 *SimpleMaterial.faceCulling.setter(unsigned __int8 *result)
{
  unsigned int v2 = *result;
  BOOL v3 = v2 > 1;
  *(void *)(v1 + 128) = v3 ^ (v2 != 0);
  *(unsigned char *)(v1 + 136) = v3;
  return result;
}

uint64_t *(*SimpleMaterial.faceCulling.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 136) & 1) == 0)
  {
    if (*(void *)(v1 + 128) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 128);
    }
  }
  *(unsigned char *)(a1 + 8) = v2;
  return SimpleMaterial.faceCulling.modify;
}

uint64_t *SimpleMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned int v2 = *((unsigned __int8 *)result + 8);
  BOOL v3 = v2 == 1;
  BOOL v4 = v2 > 1;
  uint64_t v5 = v3;
  *(void *)(v1 + 128) = v5;
  *(unsigned char *)(v1 + 136) = v4;
  return result;
}

uint64_t OcclusionMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t (*OcclusionMaterial.__parameterBlock.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t OcclusionMaterial.receivesDynamicLighting.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t OcclusionMaterial.init(receivesDynamicLighting:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    BOOL v4 = (void *)0x8000000228352BE0;
    uint64_t v5 = 0xD000000000000020;
  }
  else
  {
    uint64_t v5 = 0xD000000000000023;
    BOOL v4 = (void *)0x8000000228352B70;
  }
  uint64_t v6 = specialized static LoadableResource.loadEngineResource(assetPath:)(v5, v4);
  uint64_t v7 = REMaterialParameterBlockValueCreate();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(void *)(inited + 32) = v6;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  uint64_t result = swift_release();
  uint64_t v10 = MEMORY[0x263F8EE78];
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v10;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v7;
  *(unsigned char *)(a2 + 40) = a1 & 1;
  *(unsigned char *)(a2 + 41) = 1;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  return result;
}

uint64_t (*OcclusionMaterial.__readsDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t OcclusionMaterial.__faceCullMode.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t OcclusionMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 48) = result;
  *(unsigned char *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*OcclusionMaterial.__faceCullMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance OcclusionMaterial()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance OcclusionMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 41) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance OcclusionMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance OcclusionMaterial()
{
  return *(void *)(v0 + 48);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance OcclusionMaterial(uint64_t result, char a2)
{
  *(void *)(v2 + 48) = result;
  *(unsigned char *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t OcclusionMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000023, (void *)0x8000000228352B70);
  swift_retain();
  uint64_t v3 = REMaterialParameterBlockValueCreate();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(void *)(inited + 32) = v2;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  uint64_t result = swift_release();
  uint64_t v6 = MEMORY[0x263F8EE78];
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v3;
  *(_WORD *)(a1 + 40) = 256;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  return result;
}

uint64_t OcclusionMaterial.readsDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t OcclusionMaterial.readsDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 41) = result;
  return result;
}

unsigned char *(*OcclusionMaterial.readsDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 41);
  return OcclusionMaterial.readsDepth.modify;
}

unsigned char *OcclusionMaterial.readsDepth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 41) = result[8];
  return result;
}

void OcclusionMaterial.faceCulling.getter(char *a1@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 56) & 1) == 0)
  {
    if (*(void *)(v1 + 48) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 48);
    }
  }
  *a1 = v2;
}

unsigned __int8 *OcclusionMaterial.faceCulling.setter(unsigned __int8 *result)
{
  unsigned int v2 = *result;
  BOOL v3 = v2 > 1;
  *(void *)(v1 + 48) = v3 ^ (v2 != 0);
  *(unsigned char *)(v1 + 56) = v3;
  return result;
}

uint64_t (*OcclusionMaterial.faceCulling.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 56) & 1) == 0)
  {
    if (*(void *)(v1 + 48) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 48);
    }
  }
  *(unsigned char *)(a1 + 8) = v2;
  return OcclusionMaterial.faceCulling.modify;
}

uint64_t one-time initialization function for __videoMaterialDefinitionResource()
{
  uint64_t result = specialized MaterialDefinitionResource.__allocating_init(path:)(0xD000000000000029, (void *)0x8000000228352F40);
  static VideoMaterial.__videoMaterialDefinitionResource = result;
  return result;
}

uint64_t VideoMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t VideoMaterial.__resource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*VideoMaterial.__resource.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void **)(v1 + 32);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t VideoMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v4;
  *(void *)(v1 + 32) = v5;
  return result;
}

uint64_t (*VideoMaterial.__parameterBlock.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoMaterial.__videoResource.getter()
{
  return swift_retain();
}

uint64_t VideoMaterial.__videoResource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*VideoMaterial.__videoResource.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static VideoMaterial.__makeVideoMaterial(videoResource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_retain();
  specialized static LoadableResource.loadEngineResource(assetPath:)(0xD00000000000001FLL, (void *)0x8000000228352C10);
  id v19 = (void *)REMaterialParameterBlockValueCreate();
  type metadata accessor for VideoPlaybackController();
  swift_allocObject();
  uint64_t v4 = swift_retain();
  uint64_t v5 = VideoPlaybackController.init(videoResource:)(v4);
  uint64_t v6 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v6 + 120, (uint64_t)v25);
  uint64_t v8 = v26;
  uint64_t v7 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 32);
  swift_retain();
  v9(v8, v7);
  uint64_t v10 = REAssetManagerCopyVideoMaterialAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  if (v10)
  {
LABEL_6:
    type metadata accessor for __MaterialResource();
    uint64_t v15 = swift_allocObject();
    RERetain();
    *(void *)(v15 + 16) = v10;
    REAssetHandleLoadNow();
    REAssetSetSwiftObject();
    swift_release();
    uint64_t v16 = MEMORY[0x263F8EE78];
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = v16;
    *(unsigned char *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = v19;
    *(void *)(a2 + 40) = a1;
    *(void *)(a2 + 48) = v5;
    *(void *)(a2 + 56) = 0;
    *(_WORD *)(a2 + 64) = 257;
    *(void *)(a2 + 72) = 0;
    *(unsigned char *)(a2 + 80) = 1;
    swift_retain();
    swift_bridgeObjectRetain();
    id v17 = v19;
    swift_retain();
    swift_retain();
    RERelease();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  outlined init with copy of __REAssetService(v6 + 120, (uint64_t)v25);
  uint64_t v11 = v26;
  uint64_t v12 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v6 + 40, (uint64_t)&v20, &demangling cache variable for type metadata for __RenderService?);
  if (v21)
  {
    outlined init with take of BindableDataInternal(&v20, (uint64_t)v22);
    uint64_t v13 = v23;
    uint64_t v14 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    if (one-time initialization token for __videoMaterialDefinitionResource != -1) {
      swift_once();
    }
    uint64_t v10 = REAssetManagerMaterialMemoryAssetCreate();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    if (v10) {
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double VideoMaterial.init(avPlayer:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized static LoadableResource.loadEngineResource(assetPath:)(0xD00000000000001FLL, (void *)0x8000000228352C10);
  uint64_t v4 = (void *)REMaterialParameterBlockValueCreate();
  type metadata accessor for __VideoResource();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 24) = MEMORY[0x263F8EE78];
  id v6 = a1;
  uint64_t v7 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)&v19);
  uint64_t v9 = v21;
  uint64_t v8 = v22;
  __swift_project_boxed_opaque_existential_1(&v19, v21);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
  swift_retain();
  v10(v9, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  *(void *)(v5 + 16) = REAssetManagerMemoryAssetCreateWithRemotePlayer();
  swift_retain();
  REAssetSetSwiftObject();
  swift_release();
  swift_release();

  static VideoMaterial.__makeVideoMaterial(videoResource:)(v5, (uint64_t)&v19);
  swift_release();

  LOBYTE(v7) = v20;
  uint64_t v11 = v21;
  uint64_t v12 = v23;
  uint64_t v13 = v24;
  LOBYTE(v6) = v25;
  char v14 = v26;
  uint64_t v15 = v27;
  char v16 = v28;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  double result = *(double *)&v19;
  long long v18 = v22;
  *(_OWORD *)a2 = v19;
  *(unsigned char *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v11;
  *(_OWORD *)(a2 + 32) = v18;
  *(void *)(a2 + 48) = v12;
  *(void *)(a2 + 56) = v13;
  *(unsigned char *)(a2 + 64) = (_BYTE)v6;
  *(unsigned char *)(a2 + 65) = v14;
  *(void *)(a2 + 72) = v15;
  *(unsigned char *)(a2 + 80) = v16;
  return result;
}

double VideoMaterial.init(remotePlayer:)@<D0>(uint64_t a1@<X8>)
{
  specialized static LoadableResource.loadEngineResource(assetPath:)(0xD00000000000001FLL, (void *)0x8000000228352C10);
  uint64_t v2 = (void *)REMaterialParameterBlockValueCreate();
  type metadata accessor for __VideoResource();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 24) = MEMORY[0x263F8EE78];
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v16);
  uint64_t v6 = v18;
  uint64_t v5 = v19;
  __swift_project_boxed_opaque_existential_1(&v16, v18);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 32);
  swift_retain();
  v7(v6, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  *(void *)(v3 + 16) = REAssetManagerMemoryAssetCreateWithRemotePlayer();
  swift_retain();
  REAssetSetSwiftObject();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  static VideoMaterial.__makeVideoMaterial(videoResource:)(v3, (uint64_t)&v16);
  swift_release();
  LOBYTE(v4) = v17;
  uint64_t v8 = v18;
  uint64_t v9 = v20;
  uint64_t v10 = v21;
  LOBYTE(v3) = v22;
  char v11 = v23;
  uint64_t v12 = v24;
  char v13 = v25;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  double result = *(double *)&v16;
  long long v15 = v19;
  *(_OWORD *)a1 = v16;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 32) = v15;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = v3;
  *(unsigned char *)(a1 + 65) = v11;
  *(void *)(a1 + 72) = v12;
  *(unsigned char *)(a1 + 80) = v13;
  return result;
}

id VideoMaterial.avPlayer.getter()
{
  AVPlayer = (void *)REVideoAssetGetAVPlayer();

  return AVPlayer;
}

void VideoMaterial.avPlayer.setter(void *a1)
{
  REVideoAssetSetAVPlayer();
}

void (*VideoMaterial.avPlayer.modify(void *a1))(id *a1)
{
  a1[1] = v1;
  *a1 = (id)REVideoAssetGetAVPlayer();
  return VideoMaterial.avPlayer.modify;
}

void VideoMaterial.avPlayer.modify(id *a1)
{
  id v1 = *a1;
  REVideoAssetSetAVPlayer();
}

uint64_t VideoMaterial.remotePlayer.getter@<X0>(void *a1@<X8>)
{
  id v2 = (id)REVideoAssetGetRemotePlayer();
  v6[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RERemoteVideoPlayer?);
  v6[0] = v2;
  outlined init with copy of Any((uint64_t)v6, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RERemoteVideoPlayer);
  swift_dynamicCast();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  *a1 = v4;
  return result;
}

uint64_t key path getter for VideoMaterial.remotePlayer : VideoMaterial@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  id v4 = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v5 = (id)REVideoAssetGetRemotePlayer();
  void v9[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RERemoteVideoPlayer?);
  v9[0] = v5;
  outlined init with copy of Any((uint64_t)v9, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RERemoteVideoPlayer);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  *a2 = v7;
  return result;
}

uint64_t VideoMaterial.remotePlayer.setter()
{
  REVideoAssetSetRemotePlayer();

  return swift_unknownObjectRelease();
}

void (*VideoMaterial.remotePlayer.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  id v4 = (id)REVideoAssetGetRemotePlayer();
  v3[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RERemoteVideoPlayer?);
  void *v3 = v4;
  outlined init with copy of Any((uint64_t)v3, (uint64_t)(v3 + 4));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RERemoteVideoPlayer);
  swift_dynamicCast();
  uint64_t v5 = v3[9];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  v3[8] = v5;
  return VideoMaterial.remotePlayer.modify;
}

void VideoMaterial.remotePlayer.modify(void **a1)
{
  uint64_t v1 = *a1;
  REVideoAssetSetRemotePlayer();
  swift_unknownObjectRelease();

  free(v1);
}

uint64_t VideoMaterial.controller.getter()
{
  return swift_retain();
}

uint64_t VideoMaterial.__triangleFillMode.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t VideoMaterial.__triangleFillMode.setter(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t (*VideoMaterial.__triangleFillMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *VideoMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  *(void *)(v1 + 56) = *result;
  return result;
}

unsigned __int8 *(*VideoMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(void *)(v1 + 56) == 1;
  return VideoMaterial.triangleFillMode.modify;
}

unsigned __int8 *VideoMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(void *)(*(void *)result + 56) = result[8];
  return result;
}

uint64_t (*VideoMaterial.__writesDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*VideoMaterial.__readsDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoMaterial.__faceCullMode.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t VideoMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*VideoMaterial.__faceCullMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__triangleFillMode.getter in conformance VideoMaterial()
{
  return *(void *)(v0 + 56);
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance VideoMaterial(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance VideoMaterial()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance VideoMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 64) = result;
  return result;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance VideoMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance VideoMaterial()
{
  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance VideoMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 65) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance VideoMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance VideoMaterial()
{
  return *(void *)(v0 + 72);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance VideoMaterial(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*protocol witness for Material.__faceCullMode.modify in conformance VideoMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VideoMaterial.writesDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t VideoMaterial.writesDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 64) = result;
  return result;
}

unsigned char *(*VideoMaterial.writesDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 64);
  return VideoMaterial.writesDepth.modify;
}

unsigned char *VideoMaterial.writesDepth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 64) = result[8];
  return result;
}

uint64_t VideoMaterial.readsDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t VideoMaterial.readsDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 65) = result;
  return result;
}

unsigned char *(*VideoMaterial.readsDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 65);
  return VideoMaterial.readsDepth.modify;
}

unsigned char *VideoMaterial.readsDepth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 65) = result[8];
  return result;
}

void VideoMaterial.faceCulling.getter(char *a1@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 80) & 1) == 0)
  {
    if (*(void *)(v1 + 72) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 72);
    }
  }
  *a1 = v2;
}

unsigned __int8 *VideoMaterial.faceCulling.setter(unsigned __int8 *result)
{
  unsigned int v2 = *result;
  BOOL v3 = v2 > 1;
  *(void *)(v1 + 72) = v3 ^ (v2 != 0);
  *(unsigned char *)(v1 + 80) = v3;
  return result;
}

uint64_t *(*VideoMaterial.faceCulling.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 80) & 1) == 0)
  {
    if (*(void *)(v1 + 72) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 72);
    }
  }
  *(unsigned char *)(a1 + 8) = v2;
  return VideoMaterial.faceCulling.modify;
}

uint64_t *VideoMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned int v2 = *((unsigned __int8 *)result + 8);
  BOOL v3 = v2 == 1;
  BOOL v4 = v2 > 1;
  uint64_t v5 = v3;
  *(void *)(v1 + 72) = v5;
  *(unsigned char *)(v1 + 80) = v4;
  return result;
}

id VideoMaterial.videoRenderer.getter()
{
  AVSampleBufferVideoRenderer = (void *)REVideoAssetGetAVSampleBufferVideoRenderer();

  return AVSampleBufferVideoRenderer;
}

__n128 VideoMaterial.init(videoRenderer:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized static LoadableResource.loadEngineResource(assetPath:)(0xD00000000000001FLL, (void *)0x8000000228352C10);
  uint64_t v18 = (void *)REMaterialParameterBlockValueCreate();
  uint64_t v4 = type metadata accessor for __VideoResource();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 24) = MEMORY[0x263F8EE78];
  id v6 = a1;
  uint64_t v7 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)&v26);
  uint64_t v9 = v28;
  uint64_t v8 = v29;
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
  swift_retain();
  v10(v9, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  *(void *)(v5 + 16) = REAssetManagerAVSampleBufferVideoRendererMemoryAssetCreate();
  swift_retain();
  REAssetSetSwiftObject();
  swift_release();
  swift_release();

  static VideoMaterial.__makeVideoMaterial(videoResource:)(v5, (uint64_t)&v26);
  char v11 = v27;
  uint64_t v12 = v28;
  uint64_t v13 = v29;
  __n128 v24 = v30;
  long long v25 = v26;
  uint64_t v23 = v31;
  char v21 = v33;
  char v22 = v32;
  uint64_t v20 = v34;
  char v19 = v35;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E360;
  *(void *)(inited + 32) = v24.n128_u64[0];
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 64) = &protocol witness table for __VideoResource;
  uint64_t v15 = one-time initialization token for __videoMaterialDefinitionResource;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = static VideoMaterial.__videoMaterialDefinitionResource;
  *(void *)(inited + 96) = type metadata accessor for MaterialDefinitionResource();
  *(void *)(inited + 104) = &protocol witness table for MaterialDefinitionResource;
  *(void *)(inited + 72) = v16;
  *(void *)(inited + 136) = type metadata accessor for __MaterialResource();
  *(void *)(inited + 144) = &protocol witness table for __MaterialResource;
  *(void *)(inited + 112) = v25;
  swift_retain();
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);

  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  swift_release();
  *(_OWORD *)a2 = v25;
  *(unsigned char *)(a2 + 16) = v11;
  *(void *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  __n128 result = v24;
  *(__n128 *)(a2 + 40) = v24;
  *(void *)(a2 + 56) = v23;
  *(unsigned char *)(a2 + 64) = v22;
  *(unsigned char *)(a2 + 65) = v21;
  *(void *)(a2 + 72) = v20;
  *(unsigned char *)(a2 + 80) = v19;
  return result;
}

float MaterialScalarParameter.init(integerLiteral:)@<S0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  float result = (float)a1;
  *a2 = COERCE_UNSIGNED_INT((float)a1);
  return result;
}

void MaterialScalarParameter.hash(into:)()
{
  uint64_t v1 = *v0;
  if (*v0 < 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(*(void *)((v1 & 0x7FFFFFFFFFFFFFFFLL) + 0x10));
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((v1 & 0x7FFFFF) == 0 && (v1 & 0x7F800000) == 0) {
      Swift::UInt32 v3 = 0;
    }
    else {
      Swift::UInt32 v3 = v1;
    }
    Hasher._combine(_:)(v3);
  }
}

Swift::Int MaterialScalarParameter.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 < 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(*(void *)((v1 & 0x7FFFFFFFFFFFFFFFLL) + 0x10));
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((v1 & 0x7FFFFF) == 0 && (v1 & 0x7F800000) == 0) {
      Swift::UInt32 v3 = 0;
    }
    else {
      Swift::UInt32 v3 = v1;
    }
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

unsigned int *protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance MaterialScalarParameter@<X0>(unsigned int *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

float protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance MaterialScalarParameter@<S0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  float result = (float)*a1;
  *a2 = LODWORD(result);
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialScalarParameter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 < 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(*(void *)((v1 & 0x7FFFFFFFFFFFFFFFLL) + 0x10));
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((v1 & 0x7FFFFF) == 0 && (v1 & 0x7F800000) == 0) {
      Swift::UInt32 v3 = 0;
    }
    else {
      Swift::UInt32 v3 = v1;
    }
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

CGColorRef __MaterialColorParameter.init(_colorLiteralRed:green:blue:alpha:)@<X0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  CGColorRef result = CGColorCreateGenericRGB(a2, a3, a4, a5);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

void __MaterialColorParameter.hash(into:)()
{
  uint64_t v1 = *(Swift::UInt **)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1[2]);
  }
  else
  {
    Hasher._combine(_:)(0);
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
    unsigned int v2 = v1;
    _CFObject.hash(into:)();
    outlined consume of __MaterialColorParameter(v1, 0);
  }
}

Swift::Int __MaterialColorParameter.hashValue.getter()
{
  uint64_t v1 = *(Swift::UInt **)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1[2]);
  }
  else
  {
    Hasher._combine(_:)(0);
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
    Swift::UInt32 v3 = v1;
    _CFObject.hash(into:)();
    outlined consume of __MaterialColorParameter(v1, 0);
  }
  return Hasher._finalize()();
}

CGColorRef protocol witness for _ExpressibleByColorLiteral.init(_colorLiteralRed:green:blue:alpha:) in conformance __MaterialColorParameter@<X0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  CGColorRef result = CGColorCreateGenericRGB(a2, a3, a4, a5);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance __MaterialColorParameter()
{
  uint64_t v1 = *(Swift::UInt **)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1[2]);
  }
  else
  {
    Hasher._combine(_:)(0);
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
    char v2 = v1;
    _CFObject.hash(into:)();
    outlined consume of __MaterialColorParameter(v1, 0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __MaterialColorParameter()
{
  uint64_t v1 = *(Swift::UInt **)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1[2]);
  }
  else
  {
    Hasher._combine(_:)(0);
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
    Swift::UInt32 v3 = v1;
    _CFObject.hash(into:)();
    outlined consume of __MaterialColorParameter(v1, 0);
  }
  return Hasher._finalize()();
}

uint64_t PortalMaterial.__resource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PortalMaterial.__resource.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PortalMaterial.__parameterBlock.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PortalMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)&v12);
  uint64_t v3 = v13;
  uint64_t v4 = v14;
  __swift_project_boxed_opaque_existential_1(&v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  if (AssetHandle
    && (uint64_t v6 = REMaterialParameterBlockValueCreate(),
        (uint64_t v7 = specialized static LoadableResource.fromCore(assetRef:)(AssetHandle)) != 0))
  {
    uint64_t v8 = v7;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 56) = type metadata accessor for __MaterialResource();
    *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
    *(void *)(inited + 32) = v8;
    swift_retain_n();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    uint64_t result = swift_release();
    uint64_t v11 = MEMORY[0x263F8EE78];
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v11;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t PortalMaterial.__triangleFillMode.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t PortalMaterial.__triangleFillMode.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*PortalMaterial.__triangleFillMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *PortalMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  *(void *)(v1 + 40) = *result;
  return result;
}

unsigned __int8 *(*PortalMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(void *)(v1 + 40) == 1;
  return PortalMaterial.triangleFillMode.modify;
}

unsigned __int8 *PortalMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(void *)(*(void *)result + 40) = result[8];
  return result;
}

uint64_t (*PortalMaterial.__faceCullMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance PortalMaterial(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*PortalMaterial.faceCulling.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 56) & 1) == 0)
  {
    if (*(void *)(v1 + 48) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 48);
    }
  }
  *(unsigned char *)(a1 + 8) = v2;
  return OcclusionMaterial.faceCulling.modify;
}

uint64_t *OcclusionMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned int v2 = *((unsigned __int8 *)result + 8);
  BOOL v3 = v2 == 1;
  BOOL v4 = v2 > 1;
  uint64_t v5 = v3;
  *(void *)(v1 + 48) = v5;
  *(unsigned char *)(v1 + 56) = v4;
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v20 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v9 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v7 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      uint64_t v8 = (void *)result;
    }
    unint64_t v18 = v8[2];
    unint64_t v17 = v8[3];
    if (v18 >= v17 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v8);
      uint64_t v8 = (void *)result;
    }
    long long v8[2] = v18 + 1;
    char v19 = &v8[2 * v18];
    v19[4] = v15;
    v19[5] = v16;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v5) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v20 + 8 * v11);
    ++v7;
    if (!v12)
    {
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v5) {
        goto LABEL_27;
      }
      unint64_t v12 = *(void *)(v20 + 8 * v7);
      if (!v12)
      {
        int64_t v7 = v11 + 2;
        if (v11 + 2 >= v5) {
          goto LABEL_27;
        }
        unint64_t v12 = *(void *)(v20 + 8 * v7);
        if (!v12)
        {
          int64_t v7 = v11 + 3;
          if (v11 + 3 >= v5) {
            goto LABEL_27;
          }
          unint64_t v12 = *(void *)(v20 + 8 * v7);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v5)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v8;
  }
  unint64_t v12 = *(void *)(v20 + 8 * v13);
  if (v12)
  {
    int64_t v7 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v20 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;

  uint64_t v2 = v1;
  unint64_t v4 = a1 + 64;
  int64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  int64_t v7 = v6 & *(void *)(a1 + 64);
  uint64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  long long v26 = (void *)MEMORY[0x263F8EE78];
  while (v7)
  {
    int64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_22:
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    unint64_t v18 = *v16;
    unint64_t v17 = v16[1];
    char v19 = *(void *)(a1 + 56) + 40 * v12;
    if (*v16 != *(void *)(v19 + 16) || v17 != *(void *)(v19 + 24))
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        long long v25 = v2;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
          long long v26 = (void *)result;
        }
        char v22 = v26[2];
        char v21 = v26[3];
        uint64_t v23 = v22 + 1;
        if (v22 >= v21 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v26);
          uint64_t v23 = v22 + 1;
          long long v26 = (void *)result;
        }
        v26[2] = v23;
        __n128 v24 = &v26[2 * v22];
        v24[4] = v18;
        v24[5] = v17;
        uint64_t v2 = v25;
      }
    }
  }
  int64_t v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v13 >= v8) {
    goto LABEL_32;
  }
  uint64_t v14 = *(void *)(v4 + 8 * v13);
  ++v10;
  if (v14) {
    goto LABEL_21;
  }
  uint64_t v10 = v13 + 1;
  if (v13 + 1 >= v8) {
    goto LABEL_32;
  }
  uint64_t v14 = *(void *)(v4 + 8 * v10);
  if (v14) {
    goto LABEL_21;
  }
  uint64_t v10 = v13 + 2;
  if (v13 + 2 >= v8) {
    goto LABEL_32;
  }
  uint64_t v14 = *(void *)(v4 + 8 * v10);
  if (v14) {
    goto LABEL_21;
  }
  uint64_t v10 = v13 + 3;
  if (v13 + 3 >= v8) {
    goto LABEL_32;
  }
  uint64_t v14 = *(void *)(v4 + 8 * v10);
  if (v14)
  {
LABEL_21:
    int64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_22;
  }
  uint64_t v15 = v13 + 4;
  if (v15 >= v8)
  {
LABEL_32:
    swift_release();
    return (uint64_t)v26;
  }
  uint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    uint64_t v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_32;
    }
    uint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;

  uint64_t v2 = v1;
  unint64_t v4 = a1 + 64;
  int64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  int64_t v7 = v6 & *(void *)(a1 + 64);
  uint64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  int64_t v11 = (void *)MEMORY[0x263F8EE78];
  while (v7)
  {
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    int64_t v13 = v12 | (v10 << 6);
LABEL_22:
    unint64_t v17 = 16 * v13;
    unint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + v17);
    uint64_t v20 = *v18;
    char v19 = v18[1];
    char v21 = (void *)(*(void *)(a1 + 56) + v17);
    if (*v18 != *v21 || v19 != v21[1])
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        char v27 = v2;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
          int64_t v11 = (void *)result;
        }
        __n128 v24 = v11[2];
        uint64_t v23 = v11[3];
        long long v25 = v11;
        if (v24 >= v23 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v11);
          long long v25 = (void *)result;
        }
        void v25[2] = v24 + 1;
        int64_t v11 = v25;
        long long v26 = &v25[2 * v24];
        v26[4] = v20;
        v26[5] = v19;
        uint64_t v2 = v27;
      }
    }
  }
  uint64_t v14 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v14 >= v8) {
    goto LABEL_32;
  }
  uint64_t v15 = *(void *)(v4 + 8 * v14);
  ++v10;
  if (v15) {
    goto LABEL_21;
  }
  uint64_t v10 = v14 + 1;
  if (v14 + 1 >= v8) {
    goto LABEL_32;
  }
  uint64_t v15 = *(void *)(v4 + 8 * v10);
  if (v15) {
    goto LABEL_21;
  }
  uint64_t v10 = v14 + 2;
  if (v14 + 2 >= v8) {
    goto LABEL_32;
  }
  uint64_t v15 = *(void *)(v4 + 8 * v10);
  if (v15) {
    goto LABEL_21;
  }
  uint64_t v10 = v14 + 3;
  if (v14 + 3 >= v8) {
    goto LABEL_32;
  }
  uint64_t v15 = *(void *)(v4 + 8 * v10);
  if (v15)
  {
LABEL_21:
    int64_t v7 = (v15 - 1) & v15;
    int64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    goto LABEL_22;
  }
  uint64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_32:
    swift_release();
    return (uint64_t)v11;
  }
  uint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_32;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_21;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void v8[3];
  uint64_t v9;

  uint64_t result = MEMORY[0x263F8EE78];
  unint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    int64_t v5 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *v5;
      v8[1] = *(v5 - 1);
      long long v8[2] = v6;
      swift_bridgeObjectRetain();
      closure #1 in static Entity.ConfigurationCatalog.USDConfigurationReader.buildConfigurationSets(forPrim:configurationCollectionCaches:)(v8);
      if (v1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      int64_t v7 = swift_bridgeObjectRelease();
      if (v8[0])
      {
        MEMORY[0x22A688E10](v7);
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

uint64_t specialized LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  char v14 = -1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<Material, Error>?>);
  uint64_t v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = 0;
  *(void *)(v8 + 16) = v9;
  outlined init with take of Result<Material, Error>?((uint64_t)v12, v8 + 24);
  *(void *)(v4 + 16) = v8;
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = v8;
  uint64_t v10[5] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<Material, Error>);
  swift_allocObject();
  swift_retain();
  *(void *)(v4 + 24) = Future.init(_:)();
  return v4;
}

void specialized SIMD.hash(into:)(__n128 a1)
{
  if ((a1.n128_u32[0] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v1 = a1.n128_u32[0];
  }
  else {
    Swift::UInt32 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((a1.n128_u32[1] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = a1.n128_u32[1];
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((a1.n128_u32[2] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = a1.n128_u32[2];
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

{
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  Swift::UInt32 v3;
  Swift::UInt32 v4;

  if ((a1.n128_u32[0] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v1 = a1.n128_u32[0];
  }
  else {
    Swift::UInt32 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((a1.n128_u32[1] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = a1.n128_u32[1];
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((a1.n128_u32[2] & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = a1.n128_u32[2];
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((a1.n128_u32[3] & 0x7FFFFFFF) != 0) {
    uint64_t v4 = a1.n128_u32[3];
  }
  else {
    uint64_t v4 = 0;
  }
  Hasher._combine(_:)(v4);
}

void specialized SIMD.hash(into:)(double a1)
{
  Swift::UInt32 v3 = HIDWORD(a1);
  if ((LODWORD(a1) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v1 = LODWORD(a1);
  }
  else {
    Swift::UInt32 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v3 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = v3;
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

uint64_t specialized static __MaterialResource.CoreMaterialFunction.== infix(_:_:)(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[5];
  uint64_t v6 = a2[3];
  uint64_t v5 = a2[4];
  int64_t v7 = (void *)a2[5];
  if ((a1[1] != a2[1] || a1[2] != a2[2]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  if (v2 != v6 || !specialized static Array<A>.== infix(_:_:)(v3, v5)) {
    return 0;
  }
  type metadata accessor for NSObject();
  id v8 = v4;
  id v9 = v7;
  char v10 = static NSObject.== infix(_:_:)();

  return v10 & 1;
}

BOOL specialized static __MaterialResource.BuildParameters.Value.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 16);
  switch(*((unsigned char *)a1 + 16))
  {
    case 1:
      return v4 == 1 && v2 == v3;
    case 2:
      return v4 == 2 && *(float *)&v2 == *(float *)&v3;
    case 3:
      if (v4 != 3) {
        return 0;
      }
      return *(float *)&v2 == *(float *)&v3 && *((float *)&v2 + 1) == *((float *)&v3 + 1);
    case 4:
      if (v4 != 4) {
        return 0;
      }
      uint64_t v9 = 0;
      long long v10 = *(_OWORD *)a1;
      long long v11 = *(_OWORD *)a2;
      while (1)
      {
        long long v20 = v10;
        float v17 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
        long long v21 = v11;
        float v18 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
        BOOL v12 = v17 == v18;
        if (v9 == 2) {
          return v17 == v18;
        }
        while (1)
        {
          ++v9;
          if (v12) {
            break;
          }
          if (v9 == 2) {
            return 0;
          }
          BOOL v12 = 0;
        }
      }
    case 5:
      if (v4 != 5) {
        return 0;
      }
      uint64_t v13 = 0;
      long long v14 = *(_OWORD *)a1;
      long long v15 = *(_OWORD *)a2;
      break;
    default:
      char v5 = ((*a1 & 1) == 0) ^ v3;
      if (*((unsigned char *)a2 + 16)) {
        return 0;
      }
      else {
        return v5;
      }
  }
  while (1)
  {
    long long v22 = v14;
    float v17 = *(float *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
    long long v23 = v15;
    float v18 = *(float *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
    BOOL v16 = v17 == v18;
    if (v13 == 3) {
      break;
    }
    while (1)
    {
      ++v13;
      if (v16) {
        break;
      }
      if (v13 == 3) {
        return 0;
      }
      BOOL v16 = 0;
    }
  }
  return v17 == v18;
}

BOOL specialized static MaterialScalarParameter.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if ((*a1 & 0x8000000000000000) == 0)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      outlined consume of MaterialScalarParameter(*a1);
      outlined consume of MaterialScalarParameter(v3);
      return *(float *)&v2 == *(float *)&v3;
    }
LABEL_6:
    outlined copy of MaterialScalarParameter(v3);
    outlined consume of MaterialScalarParameter(v2);
    outlined consume of MaterialScalarParameter(v3);
    return 0;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    swift_retain();
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)((v2 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v7 = *(void *)((v3 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
  outlined copy of MaterialScalarParameter(*a2);
  outlined copy of MaterialScalarParameter(v2);
  outlined consume of MaterialScalarParameter(v2);
  outlined consume of MaterialScalarParameter(v3);
  return v6 == v7;
}

uint64_t specialized static __MaterialColorParameter.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = *(void **)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  if ((v3 & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0)
    {
      type metadata accessor for CGColorRef(0);
      outlined copy of __MaterialColorParameter(v4, 0);
      outlined copy of __MaterialColorParameter(v2, 0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
      char v6 = static _CFObject.== infix(_:_:)();
      char v3 = 0;
      char v5 = 0;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if ((*(unsigned char *)(a2 + 8) & 1) == 0)
  {
LABEL_5:
    outlined copy of __MaterialColorParameter(*(void **)a2, *(unsigned char *)(a2 + 8));
    outlined copy of __MaterialColorParameter(v2, v3);
    char v6 = 0;
    goto LABEL_7;
  }
  char v6 = v2[2] == v4[2];
  char v3 = 1;
  outlined copy of __MaterialColorParameter(*(void **)a2, 1);
  outlined copy of __MaterialColorParameter(v2, 1);
  char v5 = 1;
LABEL_7:
  outlined consume of __MaterialColorParameter(v2, v3);
  outlined consume of __MaterialColorParameter(v4, v5);
  return v6 & 1;
}

uint64_t specialized static __MaterialResource.createAssetRef(named:in:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = specialized static __ServiceLocator.shared.getter();
  v35[0] = a1;
  v35[1] = a2;
  uint64_t v34 = a1;
  lazy protocol witness table accessor for type String and conformance String();
  swift_retain();
  uint64_t v7 = *(void *)(StringProtocol.components<A>(separatedBy:)() + 16);
  swift_bridgeObjectRelease();
  uint64_t v8 = v6 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v6 + 120, (uint64_t)v35);
  uint64_t v9 = v36;
  uint64_t v10 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  if (a3) {
    id v11 = a3;
  }
  else {
    id v11 = objc_msgSend(self, sel_mainBundle);
  }
  id v12 = a3;
  uint64_t v13 = (void *)MEMORY[0x22A688A50](v34, a2);
  if (v7 == 1) {
    long long v14 = (void *)MEMORY[0x22A688A50](0x69726574616D6572, 0xEA00000000006C61);
  }
  else {
    long long v14 = 0;
  }
  uint64_t AssetHandle = REAssetManagerAssetHandleCreateWithBundleResource();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  if (!AssetHandle)
  {
    if (one-time initialization token for resourceCoreLogger != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)resourceCoreLogger);
    id v17 = v12;
    swift_bridgeObjectRetain_n();
    id v18 = v17;
    char v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v35[0] = v33;
      *(_DWORD *)uint64_t v21 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, a2, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 12) = 2080;
      id v22 = v18;
      if (!a3) {
        id v22 = objc_msgSend(self, sel_mainBundle);
      }
      id v23 = v18;
      id v24 = objc_msgSend(v22, sel_bundlePath);

      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v19, v20, "Could not resolve material name '%s' in bundle at '%s'. Loading via asset path.", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v33, -1, -1);
      MEMORY[0x22A696500](v21, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    outlined init with copy of __REAssetService(v8, (uint64_t)v35);
    uint64_t v28 = v36;
    uint64_t v29 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    (*(void (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
    String.utf8CString.getter();
    uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    if (!AssetHandle)
    {
      lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
      swift_allocError();
      *(void *)uint64_t v31 = v34;
      *(void *)(v31 + 8) = a2;
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = 0;
      *(unsigned char *)(v31 + 32) = 0;
      goto LABEL_20;
    }
  }
  if (REAssetHandleAssetType() != 2)
  {
    lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
    swift_allocError();
    *(void *)uint64_t v30 = v34;
    *(void *)(v30 + 8) = a2;
    *(void *)(v30 + 16) = 0;
    *(void *)(v30 + 24) = 0;
    *(unsigned char *)(v30 + 32) = 2;
LABEL_20:
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_release();
    return AssetHandle;
  }
  swift_release();
  return AssetHandle;
}

uint64_t specialized static __MaterialResource.buildCoreAsset(_:assetService:)(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v60 = *((unsigned char *)a1 + 24);
  int v4 = *((unsigned __int8 *)a1 + 25);
  int v61 = *((unsigned __int8 *)a1 + 26);
  int v68 = *((unsigned __int8 *)a1 + 27);
  int v63 = *((unsigned __int8 *)a1 + 28);
  uint64_t v66 = a1[5];
  uint64_t v67 = a1[4];
  uint64_t v65 = a1[6];
  uint64_t v70 = a1[7];
  REMaterialAssetBuilderCreate();
  if (v2) {
    REMaterialAssetBuilderSetMaterialDefinition();
  }
  uint64_t v5 = v3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & *(void *)(v3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v8)
    {
      v8 &= v8 - 1;
      goto LABEL_7;
    }
    int64_t v11 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    if (v11 >= v9) {
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v10;
    if (!v12)
    {
      int64_t v10 = v11 + 1;
      if (v11 + 1 >= v9) {
        goto LABEL_23;
      }
      uint64_t v12 = *(void *)(v5 + 8 * v10);
      if (!v12)
      {
        int64_t v10 = v11 + 2;
        if (v11 + 2 >= v9) {
          goto LABEL_23;
        }
        uint64_t v12 = *(void *)(v5 + 8 * v10);
        if (!v12) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v8 = (v12 - 1) & v12;
LABEL_7:
    swift_bridgeObjectRetain();
    __MaterialResource.BuildParameters.Value.asString.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMaterialAssetBuilderSetFunctionConstant();
    swift_release();
    swift_release();
  }
  int64_t v13 = v11 + 3;
  if (v13 < v9)
  {
    uint64_t v12 = *(void *)(v5 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v10 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (v10 >= v9) {
          goto LABEL_23;
        }
        uint64_t v12 = *(void *)(v5 + 8 * v10);
        ++v13;
        if (v12) {
          goto LABEL_22;
        }
      }
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }
    int64_t v10 = v13;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  if ((v60 & 1) == 0) {
    REMaterialAssetBuilderSetMTLCullMode();
  }
  if (v4 != 2) {
    REMaterialAssetBuilderSetNeedsPassthroughBlur();
  }
  if (v61 != 2) {
    REMaterialAssetBuilderSetNeedsVCABlur();
  }
  if (v63 != 2)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMaterialAssetBuilderSetFunctionConstant();
    swift_release();
  }
  if (v68 != 2)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMaterialAssetBuilderSetFunctionConstant();
    swift_release();
    REMaterialAssetBuilderSetBufferFromBinding();
  }
  uint64_t v14 = *(void *)(v70 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    long long v15 = (void **)(v70 + 72);
    do
    {
      uint64_t v16 = (uint64_t)*(v15 - 1);
      id v17 = *v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      id v18 = v17;
      REFunctionLinkBuilderCreate();
      REFunctionLinkBuilderSetShaderStage();
      String.utf8CString.getter();
      REFunctionLinkBuilderSetLinkedFunctionName();
      swift_release();
      REFunctionLinkBuilderSetLinkedFunctionLibrary();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16), 0, (char *)v16);
      }
      REFunctionLinkBuilderSetLinkedShaderAPIs();
      swift_bridgeObjectRelease();
      REFunctionLinkBuilderSetFunctionConstantValues();
      REMaterialAssetBuilderAddFunctionLinkBuilder();
      RERelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 += 6;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  uint64_t v62 = v67 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(v67 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v67 + 64);
  int64_t v64 = (unint64_t)(v19 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v22 = 0;
  while (2)
  {
    if (v21)
    {
      uint64_t v69 = (v21 - 1) & v21;
      unint64_t v23 = __clz(__rbit64(v21)) | (v22 << 6);
LABEL_61:
      uint64_t v27 = *(void *)(v67 + 56) + 80 * v23;
      uint64_t v28 = *(void **)v27;
      uint64_t v29 = *(void *)(v27 + 8);
      uint64_t v31 = *(void *)(v27 + 16);
      uint64_t v30 = *(void *)(v27 + 24);
      uint64_t v32 = *(void *)(v27 + 32);
      uint64_t v33 = *(void *)(v27 + 40);
      uint64_t v34 = *(void *)(v27 + 48);
      uint64_t v35 = *(void *)(v27 + 56);
      int64_t v71 = v22;
      switch(*(unsigned char *)(v27 + 64))
      {
        case 1:
          String.utf8CString.getter();
          swift_retain();
          REMaterialAssetBuilderSetTextureFromAsset();
          swift_release();
          outlined consume of MaterialParameters.Value(v28, v29, v31, v30, v32, v33, v34, v35, 1);
          break;
        case 2:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetFloat();
          goto LABEL_43;
        case 3:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetFloat2();
          goto LABEL_43;
        case 4:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetFloat3();
          goto LABEL_43;
        case 5:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetFloat4();
          goto LABEL_43;
        case 6:
          outlined copy of MaterialParameters.Value(v28, v29, v31, v30, v32, v33, v34, v35, 6);
          swift_bridgeObjectRetain();
          RECGColorToColorGamut();
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          REMaterialAssetBuilderSetColor4F();
          swift_release();
          outlined consume of MaterialParameters.Value(v28, v29, v31, v30, v32, v33, v34, v35, 6);
          break;
        case 7:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetFloat2x2();
          goto LABEL_43;
        case 8:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetFloat3x3();
          goto LABEL_43;
        case 9:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetFloat4x4();
          goto LABEL_43;
        case 0xA:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetBool();
          goto LABEL_43;
        case 0xB:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetInt();
          goto LABEL_43;
        case 0xC:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetInt2();
          goto LABEL_43;
        case 0xD:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetInt3();
          goto LABEL_43;
        case 0xE:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetInt4();
          goto LABEL_43;
        case 0xF:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetUInt();
          goto LABEL_43;
        case 0x10:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetUInt2();
          goto LABEL_43;
        case 0x11:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetUInt3();
          goto LABEL_43;
        case 0x12:
          String.utf8CString.getter();
          REMaterialAssetBuilderSetUInt4();
LABEL_43:
          swift_release();
          break;
        default:
          String.utf8CString.getter();
          id v36 = v28;
          swift_retain();
          REMaterialAssetBuilderSetTextureFromAsset();
          swift_release();
          outlined consume of MaterialParameters.Value(v28, v29, v31, v30, v32, v33, v34, v35, 0);
          break;
      }
      unint64_t v21 = v69;
      int64_t v22 = v71;
      continue;
    }
    break;
  }
  int64_t v24 = v22 + 1;
  if (__OFADD__(v22, 1)) {
    goto LABEL_123;
  }
  if (v24 < v64)
  {
    unint64_t v25 = *(void *)(v62 + 8 * v24);
    ++v22;
    if (!v25)
    {
      int64_t v22 = v24 + 1;
      if (v24 + 1 >= v64) {
        goto LABEL_81;
      }
      unint64_t v25 = *(void *)(v62 + 8 * v22);
      if (!v25)
      {
        int64_t v22 = v24 + 2;
        if (v24 + 2 >= v64) {
          goto LABEL_81;
        }
        unint64_t v25 = *(void *)(v62 + 8 * v22);
        if (!v25)
        {
          int64_t v26 = v24 + 3;
          if (v26 >= v64) {
            goto LABEL_81;
          }
          unint64_t v25 = *(void *)(v62 + 8 * v26);
          if (!v25)
          {
            while (1)
            {
              int64_t v22 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                break;
              }
              if (v22 >= v64) {
                goto LABEL_81;
              }
              unint64_t v25 = *(void *)(v62 + 8 * v22);
              ++v26;
              if (v25) {
                goto LABEL_60;
              }
            }
LABEL_127:
            __break(1u);
            goto LABEL_128;
          }
          int64_t v22 = v26;
        }
      }
    }
LABEL_60:
    uint64_t v69 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v22 << 6);
    goto LABEL_61;
  }
LABEL_81:
  swift_release();
  uint64_t v37 = v66 + 64;
  uint64_t v38 = 1 << *(unsigned char *)(v66 + 32);
  uint64_t v39 = -1;
  if (v38 < 64) {
    uint64_t v39 = ~(-1 << v38);
  }
  uint64_t v40 = v39 & *(void *)(v66 + 64);
  int64_t v41 = (unint64_t)(v38 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v42 = 0;
  while (2)
  {
    if (v40)
    {
      v40 &= v40 - 1;
LABEL_85:
      String.utf8CString.getter();
      String.utf8CString.getter();
      REMaterialAssetBuilderSetTextureFromBinding();
      swift_release();
      swift_release();
      continue;
    }
    break;
  }
  int64_t v43 = v42 + 1;
  if (__OFADD__(v42, 1)) {
    goto LABEL_124;
  }
  if (v43 < v41)
  {
    uint64_t v44 = *(void *)(v37 + 8 * v43);
    ++v42;
    if (!v44)
    {
      int64_t v42 = v43 + 1;
      if (v43 + 1 >= v41) {
        goto LABEL_101;
      }
      uint64_t v44 = *(void *)(v37 + 8 * v42);
      if (!v44)
      {
        int64_t v42 = v43 + 2;
        if (v43 + 2 >= v41) {
          goto LABEL_101;
        }
        uint64_t v44 = *(void *)(v37 + 8 * v42);
        if (!v44)
        {
          int64_t v45 = v43 + 3;
          if (v45 >= v41) {
            goto LABEL_101;
          }
          uint64_t v44 = *(void *)(v37 + 8 * v45);
          if (!v44)
          {
            while (1)
            {
              int64_t v42 = v45 + 1;
              if (__OFADD__(v45, 1)) {
                break;
              }
              if (v42 >= v41) {
                goto LABEL_101;
              }
              uint64_t v44 = *(void *)(v37 + 8 * v42);
              ++v45;
              if (v44) {
                goto LABEL_100;
              }
            }
LABEL_128:
            __break(1u);
            goto LABEL_129;
          }
          int64_t v42 = v45;
        }
      }
    }
LABEL_100:
    uint64_t v40 = (v44 - 1) & v44;
    goto LABEL_85;
  }
LABEL_101:
  swift_release();
  uint64_t v46 = v65 + 64;
  uint64_t v47 = 1 << *(unsigned char *)(v65 + 32);
  uint64_t v48 = -1;
  if (v47 < 64) {
    uint64_t v48 = ~(-1 << v47);
  }
  uint64_t v49 = v48 & *(void *)(v65 + 64);
  int64_t v50 = (unint64_t)(v47 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v51 = 0;
  while (2)
  {
    if (v49)
    {
      v49 &= v49 - 1;
LABEL_105:
      String.utf8CString.getter();
      String.utf8CString.getter();
      REMaterialAssetBuilderSetBufferFromBinding();
      swift_release();
      swift_release();
      continue;
    }
    break;
  }
  int64_t v52 = v51 + 1;
  if (__OFADD__(v51, 1)) {
    goto LABEL_125;
  }
  if (v52 < v50)
  {
    uint64_t v53 = *(void *)(v46 + 8 * v52);
    ++v51;
    if (!v53)
    {
      int64_t v51 = v52 + 1;
      if (v52 + 1 >= v50) {
        goto LABEL_121;
      }
      uint64_t v53 = *(void *)(v46 + 8 * v51);
      if (!v53)
      {
        int64_t v51 = v52 + 2;
        if (v52 + 2 >= v50) {
          goto LABEL_121;
        }
        uint64_t v53 = *(void *)(v46 + 8 * v51);
        if (!v53)
        {
          int64_t v54 = v52 + 3;
          if (v54 >= v50) {
            goto LABEL_121;
          }
          uint64_t v53 = *(void *)(v46 + 8 * v54);
          if (!v53)
          {
            while (1)
            {
              int64_t v51 = v54 + 1;
              if (__OFADD__(v54, 1)) {
                break;
              }
              if (v51 >= v50) {
                goto LABEL_121;
              }
              uint64_t v53 = *(void *)(v46 + 8 * v51);
              ++v54;
              if (v53) {
                goto LABEL_120;
              }
            }
LABEL_129:
            __break(1u);
          }
          int64_t v51 = v54;
        }
      }
    }
LABEL_120:
    uint64_t v49 = (v53 - 1) & v53;
    goto LABEL_105;
  }
LABEL_121:
  swift_release();
  uint64_t v55 = a2[3];
  uint64_t v56 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v55);
  (*(void (**)(uint64_t, uint64_t))(v56 + 32))(v55, v56);
  uint64_t v57 = REAssetManagerMaterialAssetBuilderBuild();
  RERelease();
  return v57;
}

uint64_t outlined init with copy of MaterialParameters(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_227F36B84()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in static __MaterialResource.loadAsync(named:in:)()
{
  return specialized static __MaterialResource.createAssetRef(named:in:)(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_227F36BE4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 96, 7);
}

uint64_t partial apply for closure #1 in static __MaterialResource.loadAsync(_:services:)()
{
  return closure #1 in static __MaterialResource.loadAsync(_:services:)(*(void *)(v0 + 16), (_OWORD *)(v0 + 24), *(void *)(v0 + 88));
}

uint64_t outlined retain of __MaterialResource.BuildParameters(uint64_t a1)
{
  return a1;
}

uint64_t sub_227F36CE0()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t partial apply for closure #1 in static __MaterialResource.loadAsync(named:in:services:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in static __MaterialResource.loadAsync(named:in:services:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), v0 + v2, *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t outlined release of PhysicallyBasedMaterial.BaseColor(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);

  outlined consume of MaterialParameters.Texture?(v2, v3);
  return a1;
}

uint64_t outlined retain of PhysicallyBasedMaterial.BaseColor(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  id v4 = *(id *)a1;
  outlined copy of MaterialParameters.Texture?(v2, v3);
  return a1;
}

void *outlined copy of MaterialParameters.Texture?(void *result, uint64_t a2)
{
  if (a2)
  {
    id v2 = result;
    return (void *)swift_retain();
  }
  return result;
}

void outlined consume of __MaterialColorParameter(void *a1, char a2)
{
  if (a2) {
    swift_release();
  }
  else {
}
  }

id outlined copy of __MaterialColorParameter(void *a1, char a2)
{
  if (a2) {
    return (id)swift_retain();
  }
  else {
    return a1;
  }
}

uint64_t outlined consume of MaterialScalarParameter(uint64_t result)
{
  if (result < 0) {
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of MaterialScalarParameter(uint64_t result)
{
  if (result < 0) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for __MaterialResource()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type __MaterialResource.BuildParameters.Value and conformance __MaterialResource.BuildParameters.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type __MaterialResource.BuildParameters.Value and conformance __MaterialResource.BuildParameters.Value;
  if (!lazy protocol witness table cache variable for type __MaterialResource.BuildParameters.Value and conformance __MaterialResource.BuildParameters.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __MaterialResource.BuildParameters.Value and conformance __MaterialResource.BuildParameters.Value);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in MaterialScalarParameter()
{
  return MEMORY[0x263F8D748];
}

unint64_t lazy protocol witness table accessor for type MaterialScalarParameter and conformance MaterialScalarParameter()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialScalarParameter and conformance MaterialScalarParameter;
  if (!lazy protocol witness table cache variable for type MaterialScalarParameter and conformance MaterialScalarParameter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialScalarParameter and conformance MaterialScalarParameter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __MaterialColorParameter and conformance __MaterialColorParameter()
{
  unint64_t result = lazy protocol witness table cache variable for type __MaterialColorParameter and conformance __MaterialColorParameter;
  if (!lazy protocol witness table cache variable for type __MaterialColorParameter and conformance __MaterialColorParameter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __MaterialColorParameter and conformance __MaterialColorParameter);
  }
  return result;
}

void sub_227F370C0(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_227F370C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(*(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_227F370F4()
{
  return 16;
}

__n128 sub_227F37100(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227F3710C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t sub_227F3711C()
{
  return 16;
}

__n128 sub_227F37128(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227F37134(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_227F37140()
{
  return 16;
}

__n128 sub_227F3714C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227F37158()
{
  return 16;
}

__n128 sub_227F37164(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227F37170@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return Material.parameters.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8), a3);
}

uint64_t sub_227F3719C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 16);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  outlined init with copy of MaterialParameters(a1, (uint64_t)v7);
  return Material.parameters.setter(v7, v4, v5);
}

uint64_t sub_227F371EC()
{
  return 16;
}

__n128 sub_227F371F8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227F37204@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 16);
  return result;
}

uint64_t sub_227F3724C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  return result;
}

void sub_227F3729C(id *a1)
{
}

void sub_227F372C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized Material.getLegacyBase(legacy:)(*(void *)(a1 + 80), *(void **)(a1 + 88), *(CGColor **)(a1 + 104), (uint64_t)&v4);
  char v3 = v5;
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v3;
}

uint64_t sub_227F37318(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  char v3 = *(void **)a1;
  char v4 = v1;
  outlined copy of __MaterialColorParameter(v3, v1);
  return SimpleMaterial.__baseColor.setter((uint64_t)&v3);
}

uint64_t sub_227F37364(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_51Tm(a1, a2, a3, a4, 0);
}

uint64_t sub_227F37370(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_51Tm(a1, a2, a3, a4, 1);
}

uint64_t keypath_set_51Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = *a1;
  outlined copy of MaterialScalarParameter(*a1);
  specialized Material.setScalarParameter(_:value:)(a5, v6);

  return outlined consume of MaterialScalarParameter(v6);
}

uint64_t sub_227F373D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = SimpleMaterial.__emissive.getter((uint64_t)&v4);
  char v3 = v5;
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_227F37418@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 112);
  return result;
}

void sub_227F37424(BOOL *a1)
{
}

uint64_t sub_227F3744C@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(result + 120) == 1;
  return result;
}

unsigned __int8 *sub_227F37460(unsigned __int8 *result, uint64_t a2)
{
  *(void *)(a2 + 120) = *result;
  return result;
}

uint64_t sub_227F3746C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 137);
  return result;
}

unsigned char *sub_227F37478(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 137) = *result;
  return result;
}

uint64_t sub_227F37484@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 138);
  return result;
}

unsigned char *sub_227F37490(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 138) = *result;
  return result;
}

uint64_t sub_227F3749C@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(result + 136) & 1) == 0)
  {
    if (*(void *)(result + 128) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(result + 128);
    }
  }
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_227F374BC(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return SimpleMaterial.faceCulling.setter(&v2);
}

uint64_t sub_227F374F4@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 41);
  return result;
}

unsigned char *sub_227F37500(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 41) = *result;
  return result;
}

unsigned __int8 *sub_227F37510(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return OcclusionMaterial.faceCulling.setter(&v2);
}

id sub_227F37548@<X0>(void *a1@<X8>)
{
  id result = (id)REVideoAssetGetAVPlayer();
  *a1 = result;
  return result;
}

uint64_t sub_227F37580()
{
  return REVideoAssetSetAVPlayer();
}

uint64_t sub_227F37598()
{
  return REVideoAssetSetRemotePlayer();
}

uint64_t sub_227F375AC@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(result + 56) == 1;
  return result;
}

unsigned __int8 *sub_227F375C0(unsigned __int8 *result, uint64_t a2)
{
  *(void *)(a2 + 56) = *result;
  return result;
}

uint64_t sub_227F375CC@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 64);
  return result;
}

unsigned char *sub_227F375D8(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 64) = *result;
  return result;
}

uint64_t sub_227F375E4@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 65);
  return result;
}

unsigned char *sub_227F375F0(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 65) = *result;
  return result;
}

uint64_t sub_227F375FC@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(result + 80) & 1) == 0)
  {
    if (*(void *)(result + 72) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(result + 72);
    }
  }
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_227F3761C(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return VideoMaterial.faceCulling.setter(&v2);
}

uint64_t sub_227F37654@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(result + 40) == 1;
  return result;
}

unsigned __int8 *sub_227F37668(unsigned __int8 *result, uint64_t a2)
{
  *(void *)(a2 + 40) = *result;
  return result;
}

uint64_t keypath_get_68Tm@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(result + 56) & 1) == 0)
  {
    if (*(void *)(result + 48) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(result + 48);
    }
  }
  *a2 = v2;
  return result;
}

uint64_t dispatch thunk of Material.__resource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Material.__parameterBlock.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Material.__parameterBlock.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Material.__parameterBlock.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Material.__triangleFillMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Material.__triangleFillMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of Material.__triangleFillMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of Material.__writesDepthInternal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of Material.__writesDepthInternal.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of Material.__writesDepthInternal.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of Material.__readsDepthInternal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of Material.__readsDepthInternal.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of Material.__readsDepthInternal.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of Material.__faceCullMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of Material.__faceCullMode.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void))(a4 + 120))(a1, a2 & 1);
}

uint64_t dispatch thunk of Material.__faceCullMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of Material.__parameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of Material.__requiresUnmanagedVideoComponent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t method lookup function for __MaterialResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __MaterialResource);
}

uint64_t dispatch thunk of __MaterialResource.coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of __MaterialResource.coreAsset.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of __MaterialResource.coreAsset.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of __MaterialResource.__coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of __MaterialResource.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of __MaterialResource.cullMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t destroy for __MaterialResource.BuildParameters()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __MaterialResource.BuildParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 25);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __MaterialResource.BuildParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for __MaterialResource.BuildParameters(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 25);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __MaterialResource.BuildParameters(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __MaterialResource.BuildParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __MaterialResource.BuildParameters()
{
  return &type metadata for __MaterialResource.BuildParameters;
}

__n128 __swift_memcpy17_16(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for __MaterialResource.BuildParameters.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __MaterialResource.BuildParameters.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for __MaterialResource.BuildParameters.Value(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for __MaterialResource.BuildParameters.Value()
{
  return &type metadata for __MaterialResource.BuildParameters.Value;
}

uint64_t initializeWithCopy for AnyMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  int v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for AnyMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(void **)(a2 + 32);
  id v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for AnyMaterial(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRelease();
  int v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for AnyMaterial(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyMaterial()
{
  return &type metadata for AnyMaterial;
}

void destroy for SimpleMaterial(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 104);
}

uint64_t initializeWithCopy for SimpleMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void **)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  int64_t v10 = *(void **)(a2 + 96);
  int64_t v11 = *(void **)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = v11;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v12 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v12;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = v8;
  swift_bridgeObjectRetain();
  id v14 = v10;
  id v15 = v11;
  return a1;
}

uint64_t assignWithCopy for SimpleMaterial(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)*((void *)a2 + 9);
  uint64_t v8 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v7;
  id v9 = v7;

  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int64_t v10 = *(void **)(a1 + 96);
  int64_t v11 = (void *)*((void *)a2 + 12);
  *(void *)(a1 + 96) = v11;
  id v12 = v11;

  id v13 = *(void **)(a1 + 104);
  id v14 = (void *)*((void *)a2 + 13);
  *(void *)(a1 + 104) = v14;
  id v15 = v14;

  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  uint64_t v16 = *((void *)a2 + 16);
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
  *(void *)(a1 + 128) = v16;
  *(unsigned char *)(a1 + 137) = *((unsigned char *)a2 + 137);
  *(unsigned char *)(a1 + 138) = *((unsigned char *)a2 + 138);
  return a1;
}

__n128 __swift_memcpy139_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 123) = *(_OWORD *)(a2 + 123);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for SimpleMaterial(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  long long v6 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);

  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);

  id v9 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);

  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  *(unsigned char *)(a1 + 138) = *(unsigned char *)(a2 + 138);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimpleMaterial(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 139)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimpleMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 138) = 0;
    *(_WORD *)(result + 136) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 139) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 139) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SimpleMaterial()
{
  return &type metadata for SimpleMaterial;
}

uint64_t type metadata accessor for SimpleMaterial.SimpleMaterialMapping()
{
  return self;
}

uint64_t initializeWithCopy for OcclusionMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for OcclusionMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a2 + 32);
  id v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  uint64_t v7 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  return a1;
}

uint64_t assignWithTake for OcclusionMaterial(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for OcclusionMaterial()
{
  return &type metadata for OcclusionMaterial;
}

uint64_t destroy for VideoMaterial(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for VideoMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v4;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VideoMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  uint64_t v7 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v7;
  return a1;
}

uint64_t assignWithTake for VideoMaterial(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoMaterial(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoMaterial()
{
  return &type metadata for VideoMaterial;
}

uint64_t *initializeBufferWithCopyOfBuffer for MaterialScalarParameter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  outlined copy of MaterialScalarParameter(*a2);
  *a1 = v3;
  return a1;
}

uint64_t destroy for MaterialScalarParameter(uint64_t *a1)
{
  return outlined consume of MaterialScalarParameter(*a1);
}

uint64_t *assignWithCopy for MaterialScalarParameter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  outlined copy of MaterialScalarParameter(*a2);
  uint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of MaterialScalarParameter(v4);
  return a1;
}

uint64_t *assignWithTake for MaterialScalarParameter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of MaterialScalarParameter(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialScalarParameter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 15);
  }
  unsigned int v3 = (((*(void *)a1 >> 60) >> 3) & 0xFFFFFFF1 | (2 * ((*(void *)a1 >> 60) & 7))) ^ 0xF;
  if (v3 >= 0xE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MaterialScalarParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE)
  {
    *(void *)__n128 result = a2 - 15;
    if (a3 >= 0xF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = (unint64_t)(((-a2 >> 1) & 7) - 8 * a2) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for MaterialScalarParameter(void *a1)
{
  return *a1 >> 63;
}

void *destructiveProjectEnumData for MaterialScalarParameter(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for MaterialScalarParameter(uint64_t *result, uint64_t a2)
{
  *__n128 result = *result & 0xFFFFFFFFFFFFFFFLL | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for MaterialScalarParameter()
{
  return &type metadata for MaterialScalarParameter;
}

uint64_t initializeBufferWithCopyOfBuffer for __MaterialColorParameter(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of __MaterialColorParameter(*(void **)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for __MaterialColorParameter(uint64_t a1)
{
}

uint64_t assignWithCopy for __MaterialColorParameter(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of __MaterialColorParameter(*(void **)a2, v4);
  uint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of __MaterialColorParameter(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t assignWithTake for __MaterialColorParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of __MaterialColorParameter(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for __MaterialColorParameter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __MaterialColorParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for __MaterialColorParameter(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for __MaterialColorParameter(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for __MaterialColorParameter()
{
  return &type metadata for __MaterialColorParameter;
}

void destroy for AnyMaterial(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t initializeWithCopy for PortalMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  int v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for PortalMaterial(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  return a1;
}

uint64_t assignWithTake for PortalMaterial(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRelease();
  int v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for PortalMaterial()
{
  return &type metadata for PortalMaterial;
}

void destroy for LegacyBaseColor(uint64_t a1)
{
  swift_bridgeObjectRelease();

  uint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for LegacyBaseColor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  int v4 = (void *)a2[2];
  uint64_t v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  id v6 = v4;
  id v7 = v5;
  return a1;
}

void *assignWithCopy for LegacyBaseColor(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = (void *)a1[2];
  uint64_t v5 = (void *)a2[2];
  a1[2] = v5;
  id v6 = v5;

  id v7 = (void *)a1[3];
  uint64_t v8 = (void *)a2[3];
  a1[3] = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for LegacyBaseColor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  int v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyBaseColor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyBaseColor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyBaseColor()
{
  return &type metadata for LegacyBaseColor;
}

void destroy for __MaterialResource.CoreMaterialFunction(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 40);
}

uint64_t initializeWithCopy for __MaterialResource.CoreMaterialFunction(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

uint64_t assignWithCopy for __MaterialResource.CoreMaterialFunction(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for __MaterialResource.CoreMaterialFunction(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for __MaterialResource.CoreMaterialFunction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __MaterialResource.CoreMaterialFunction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __MaterialResource.CoreMaterialFunction()
{
  return &type metadata for __MaterialResource.CoreMaterialFunction;
}

uint64_t getEnumTagSinglePayload for __MaterialResource.LoadError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __MaterialResource.LoadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for __MaterialResource.LoadError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 2u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for __MaterialResource.LoadError(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for __MaterialResource.LoadError()
{
  return &type metadata for __MaterialResource.LoadError;
}

unint64_t lazy protocol witness table accessor for type __MaterialResource.CoreMaterialFunction and conformance __MaterialResource.CoreMaterialFunction()
{
  unint64_t result = lazy protocol witness table cache variable for type __MaterialResource.CoreMaterialFunction and conformance __MaterialResource.CoreMaterialFunction;
  if (!lazy protocol witness table cache variable for type __MaterialResource.CoreMaterialFunction and conformance __MaterialResource.CoreMaterialFunction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __MaterialResource.CoreMaterialFunction and conformance __MaterialResource.CoreMaterialFunction);
  }
  return result;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t outlined init with take of __MaterialResource.LoadError(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t partial apply for closure #1 in static __MaterialResource.load(_:)(uint64_t a1)
{
  return closure #1 in static __MaterialResource.load(_:)(a1);
}

uint64_t sub_227F393F8()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in static __MaterialResource.load(_:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t sub_227F3950C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

id outlined copy of __RKMaterialParameterBlock.Parameter?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return outlined copy of __RKMaterialParameterBlock.Parameter(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_227F3A24C()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 172, 7);
}

uint64_t outlined retain of PhysicallyBasedMaterial.AnisotropyAngle(uint64_t a1)
{
  return a1;
}

void outlined consume of MaterialParameterKeyValue?(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    outlined consume of __RKMaterialParameterBlock.Parameter?(a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
}

uint64_t outlined destroy of SimpleMaterial(uint64_t a1)
{
  return a1;
}

uint64_t sub_227F3A3D8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227F3A410()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in static __MaterialResource.loadAsync(_:services:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static __MaterialResource.loadAsync(_:services:)(a1, a2, *(uint64_t (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t outlined init with take of Result<Material, Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Material, Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_227F3A4C4()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_227F3A518()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in closure #1 in static __MaterialResource.loadAsync(_:services:)(char a1)
{
  closure #1 in closure #1 in static __MaterialResource.loadAsync(_:services:)(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_227F3A570()
{
  return objectdestroy_164Tm(56);
}

uint64_t sub_227F3A578()
{
  return objectdestroy_164Tm(73);
}

uint64_t sub_227F3A580()
{
  return objectdestroy_164Tm(73);
}

id outlined copy of CustomMaterial.CustomUniformsState?(id result, void *a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of CustomMaterial.CustomUniformsState(result, a2, a3);
  }
  return result;
}

id outlined copy of CustomMaterial.CustomUniformsState(id result, void *a2, char a3)
{
  if (a3)
  {
    if (a3 != 1) {
      return result;
    }
    id v4 = result;
    unint64_t result = a2;
  }
  return result;
}

uint64_t sub_227F3A5E8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((unint64_t)(*(void *)(v0 + 80) - 1) >= 2) {
    swift_release();
  }
  outlined consume of CustomMaterial.CustomUniformsState(*(void **)(v0 + 96), *(void **)(v0 + 104), *(unsigned char *)(v0 + 112));
  if (*(void *)(v0 + 144)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  }
  swift_release();
  if (*(void *)(v0 + 208))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 256))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((unint64_t)(*(void *)(v0 + 304) - 1) >= 3) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 346, 7);
}

uint64_t sub_227F3A6BC()
{
  return objectdestroy_164Tm(81);
}

uint64_t objectdestroy_164Tm(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v1, a1, 7);
}

uint64_t sub_227F3A720()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 80)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 162, 7);
}

unint64_t PbrCommonKeys.Constants.rawValue.getter(char a1)
{
  unint64_t result = 0x6F6C6F4365736162;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6166727573627573;
      break;
    case 2:
      unint64_t result = 0x63696C6C6174656DLL;
      break;
    case 3:
      unint64_t result = 0x72616C7563657073;
      break;
    case 4:
      unint64_t result = 0x73656E6867756F72;
      break;
    case 5:
      unint64_t result = 0x6576697373696D65;
      break;
    case 6:
      unint64_t result = 0x6576697373696D65;
      break;
    case 7:
      unint64_t result = 0xD000000000000018;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
    case 11:
    case 18:
      unint64_t result = 0xD000000000000017;
      break;
    case 10:
      unint64_t result = 0xD000000000000018;
      break;
    case 12:
      unint64_t result = 0xD000000000000013;
      break;
    case 13:
    case 15:
      unint64_t result = 0x66736E6172547675;
      break;
    case 14:
      unint64_t result = 0x74657366664F7675;
      break;
    case 16:
      unint64_t result = 0x74657366664F7675;
      break;
    case 17:
      unint64_t result = 0x616F637261656C63;
      break;
    case 19:
      unint64_t result = 0xD000000000000010;
      break;
    case 20:
      unint64_t result = 0x7562654474726170;
      break;
    case 21:
      unint64_t result = 0x6C6F436E65656873;
      break;
    case 22:
      unint64_t result = 0xD000000000000011;
      break;
    case 23:
      unint64_t result = 0x6C706D61536F7373;
      break;
    case 24:
      unint64_t result = 0xD000000000000014;
      break;
    case 25:
      unint64_t result = 0xD000000000000014;
      break;
    case 26:
      unint64_t result = 0x6F437265746C6966;
      break;
    case 27:
      unint64_t result = 0x6C6163536873656DLL;
      break;
    case 28:
      unint64_t result = 0x537974696361706FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t PbrCommonKeys.Textures.rawValue.getter(char a1)
{
  unint64_t result = 0x4265727574786574;
  switch(a1)
  {
    case 1:
    case 6:
    case 10:
    case 18:
    case 20:
    case 26:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 4:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0xD000000000000017;
      break;
    case 8:
      unint64_t result = 0x4565727574786574;
      break;
    case 9:
      unint64_t result = 0x4D65727574786574;
      break;
    case 11:
      unint64_t result = 0x5365727574786574;
      break;
    case 12:
      unint64_t result = 0x4E65727574786574;
      break;
    case 13:
      unint64_t result = 0x4F65727574786574;
      break;
    case 14:
      unint64_t result = 0xD000000000000016;
      break;
    case 15:
      unint64_t result = 0xD000000000000016;
      break;
    case 16:
      unint64_t result = 0xD000000000000019;
      break;
    case 17:
      unint64_t result = 0x5265727574786574;
      break;
    case 19:
      unint64_t result = 0xD000000000000011;
      break;
    case 21:
      unint64_t result = 0xD000000000000011;
      break;
    case 22:
      unint64_t result = 0x65626F7250766E65;
      break;
    case 23:
      unint64_t result = 0xD000000000000014;
      break;
    case 24:
      unint64_t result = 0xD000000000000016;
      break;
    case 25:
      unint64_t result = 0xD000000000000012;
      break;
    case 27:
      unint64_t result = 0x6573696F4E6F7373;
      break;
    case 28:
      unint64_t result = 0xD000000000000017;
      break;
    case 29:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PbrCommonKeys.Constants(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE4) {
    goto LABEL_17;
  }
  if (a2 + 28 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 28) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 28;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1D;
  int v8 = v6 - 29;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PbrCommonKeys.Constants(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 28 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 28) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE3)
  {
    unsigned int v6 = ((a2 - 228) >> 8) + 1;
    *unint64_t result = a2 + 28;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227F3B0E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 28;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PbrCommonKeys.Constants()
{
  return &type metadata for PbrCommonKeys.Constants;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PbrCommonKeys.Constants(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = PbrCommonKeys.Constants.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == PbrCommonKeys.Constants.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PbrCommonKeys.Constants()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PbrCommonKeys.Constants.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PbrCommonKeys.Constants()
{
  PbrCommonKeys.Constants.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PbrCommonKeys.Constants()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PbrCommonKeys.Constants.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PbrCommonKeys.Constants@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized PbrCommonKeys.Constants.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PbrCommonKeys.Constants@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = PbrCommonKeys.Constants.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type PbrCommonKeys.Constants and conformance PbrCommonKeys.Constants()
{
  unint64_t result = lazy protocol witness table cache variable for type PbrCommonKeys.Constants and conformance PbrCommonKeys.Constants;
  if (!lazy protocol witness table cache variable for type PbrCommonKeys.Constants and conformance PbrCommonKeys.Constants)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PbrCommonKeys.Constants and conformance PbrCommonKeys.Constants);
  }
  return result;
}

uint64_t specialized PbrCommonKeys.Constants.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1D) {
    return 29;
  }
  else {
    return v0;
  }
}

uint64_t PortalComponent.targetEntity.getter()
{
  return swift_retain();
}

uint64_t key path setter for PortalComponent.targetEntity : PortalComponent(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1) {
    swift_retain();
  }
  uint64_t result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t PortalComponent.targetEntity.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *char v1 = a1;
  return result;
}

uint64_t (*PortalComponent.targetEntity.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_retain();
  return PortalComponent.targetEntity.modify;
}

uint64_t PortalComponent.targetEntity.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = (void *)a1[1];
    if (v2) {
      swift_retain();
    }
    swift_release();
    void *v3 = v2;
    return swift_release();
  }
  else
  {
    unint64_t v4 = (void *)a1[1];
    uint64_t result = swift_release();
    *unint64_t v4 = v2;
  }
  return result;
}

__n128 PortalComponent.ClippingPlane.position.getter()
{
  return *(__n128 *)v0;
}

void PortalComponent.ClippingPlane.position.setter(__n128 a1)
{
  *char v1 = a1;
}

uint64_t (*PortalComponent.ClippingPlane.position.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PortalComponent.ClippingPlane.normal.getter()
{
  return v0[1];
}

void PortalComponent.ClippingPlane.normal.setter(__n128 a1)
{
  v1[1] = a1;
}

uint64_t (*PortalComponent.ClippingPlane.normal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PortalComponent.ClippingPlane.init(position:normal:)(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  *a1 = a2;
  a1[1] = a3;
}

void PortalComponent.clippingPlane.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    float32x2_t v5 = *(float32x2_t *)(v1 + 32);
    long long v3 = *(_OWORD *)(v1 + 16);
    *(float32x2_t *)&long long v4 = vsub_f32(0, v5);
    *((float *)&v4 + 2) = 0.0 - COERCE_FLOAT(*(void *)(v1 + 40));
    HIDWORD(v4) = 0;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
}

double key path getter for PortalComponent.clippingPlane : PortalComponent@<D0>(uint64_t a1@<X8>)
{
  PortalComponent.clippingPlane.getter((uint64_t)v5);
  char v2 = v6;
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

long long *PortalComponent.clippingPlane.setter(long long *result)
{
  char v2 = *((unsigned char *)result + 32);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    float32x2_t v5 = (float32x2_t)result[1];
    long long v3 = *result;
    *(float32x2_t *)&long long v4 = vsub_f32(0, v5);
    *((float *)&v4 + 2) = 0.0 - COERCE_FLOAT(*((void *)result + 3));
    HIDWORD(v4) = 0;
  }
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  *(unsigned char *)(v1 + 48) = v2;
  return result;
}

void (*PortalComponent.clippingPlane.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  char v4 = *(unsigned char *)(v1 + 48);
  long long v5 = 0uLL;
  long long v6 = 0uLL;
  if ((v4 & 1) == 0)
  {
    float32x2_t v7 = *(float32x2_t *)(v1 + 32);
    long long v5 = *(_OWORD *)(v1 + 16);
    *(float32x2_t *)&long long v6 = vsub_f32(0, v7);
    *((float *)&v6 + 2) = 0.0 - COERCE_FLOAT(*(void *)(v1 + 40));
    HIDWORD(v6) = 0;
  }
  *(_OWORD *)long long v3 = v5;
  *((_OWORD *)v3 + 1) = v6;
  *((unsigned char *)v3 + 32) = v4;
  return PortalComponent.clippingPlane.modify;
}

void PortalComponent.clippingPlane.modify(void **a1)
{
  uint64_t v1 = (float32x2_t *)*a1;
  __int8 v2 = v1[4].i8[0];
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    float32x2_t v5 = v1[2];
    long long v3 = *(_OWORD *)v1->f32;
    *(float32x2_t *)&long long v4 = vsub_f32(0, v5);
    *((float *)&v4 + 2) = 0.0 - COERCE_FLOAT(*(void *)&v1[3]);
    HIDWORD(v4) = 0;
  }
  float32x2_t v6 = v1[5];
  *(_OWORD *)(*(void *)&v6 + 16) = v3;
  *(_OWORD *)(*(void *)&v6 + 32) = v4;
  *(unsigned char *)(*(void *)&v6 + 48) = v2;
  free(v1);
}

uint64_t PortalComponent.init(target:clippingPlane:)@<X0>(uint64_t result@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v3 = *a2;
  float32x2_t v4 = (float32x2_t)a2[1];
  uint64_t v5 = *((void *)a2 + 3);
  char v6 = *((unsigned char *)a2 + 32);
  long long v7 = 0uLL;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(unsigned char *)(a3 + 96) = 1;
  long long v8 = 0uLL;
  *(void *)a3 = result;
  if ((v6 & 1) == 0)
  {
    *(float32x2_t *)&long long v8 = vsub_f32(0, v4);
    *((float *)&v8 + 2) = 0.0 - *(float *)&v5;
    HIDWORD(v8) = 0;
    long long v7 = v3;
  }
  *(_OWORD *)(a3 + 16) = v7;
  *(_OWORD *)(a3 + 32) = v8;
  *(unsigned char *)(a3 + 48) = v6;
  return result;
}

uint64_t static PortalComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  TargetWorlduint64_t Entity = REPortalComponentGetTargetWorldEntity();
  if (TargetWorldEntity)
  {
    uint64_t v3 = TargetWorldEntity;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v4 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = specialized static Entity.entityInfoType(_:)();
      if (v7)
      {
        uint64_t v5 = (*(uint64_t (**)(void))(v7 + 232))();
        uint64_t v8 = *(void *)(v5 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v8, 0);
        *(void *)(v5 + 16) = v3;
        MEMORY[0x22A68E750](v3, v5);
        swift_release();
        goto LABEL_9;
      }
      uint64_t v4 = makeEntity(for:)(v3);
    }
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
LABEL_9:
  int UseClipPlane = REPortalComponentGetUseClipPlane();
  char v10 = UseClipPlane;
  long long v11 = 0uLL;
  long long v17 = 0u;
  long long v18 = 0u;
  if (UseClipPlane)
  {
    REPortalComponentGetClipPlanePosition();
    long long v17 = v12;
    REPortalComponentGetClipPlaneNormal();
  }
  long long v16 = v11;
  uint64_t result = REPortalComponentGetAllowsCrossing();
  char v13 = result;
  long long v14 = 0uLL;
  if (result)
  {
    REPortalComponentGetCrossPlanePosition();
    long long v18 = v15;
    uint64_t result = REPortalComponentGetCrossPlaneNormal();
  }
  *(void *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v17;
  *(_OWORD *)(a1 + 32) = v16;
  *(unsigned char *)(a1 + 48) = v10 ^ 1;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 80) = v14;
  *(unsigned char *)(a1 + 96) = v13 ^ 1;
  return result;
}

uint64_t PortalComponent.__toCore(_:)()
{
  char v1 = *(unsigned char *)(v0 + 48);
  char v2 = *(unsigned char *)(v0 + 96);
  REPortalComponentUnsetTargetWorldRoot();
  REPortalComponentSetTargetWorldEntity();
  if (v1)
  {
    REPortalComponentSetUseClipPlane();
    if ((v2 & 1) == 0)
    {
LABEL_3:
      REPortalComponentSetAllowsCrossing();
      REPortalComponentSetCrossPlanePosition();
      REPortalComponentSetCrossPlaneNormal();
      goto LABEL_6;
    }
  }
  else
  {
    REPortalComponentSetUseClipPlane();
    REPortalComponentSetClipPlanePosition();
    REPortalComponentSetClipPlaneNormal();
    if ((v2 & 1) == 0) {
      goto LABEL_3;
    }
  }
  REPortalComponentSetAllowsCrossing();
LABEL_6:
  REPortalComponentSetInheritsIBL();
  REPortalComponentSetInheritsProbeLighting();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance PortalComponent(_DWORD *a1@<X8>)
{
  *a1 = 1008;
}

void static PortalComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 1008;
}

__n128 PortalComponent.Plane.position.getter()
{
  return *(__n128 *)v0;
}

uint64_t (*PortalComponent.Plane.position.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PortalComponent.Plane.normal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PortalComponent.clippingMode.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    long long v3 = *(_OWORD *)(v1 + 16);
    long long v4 = *(_OWORD *)(v1 + 32);
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
}

long long *PortalComponent.clippingMode.setter(long long *result)
{
  char v2 = *((unsigned char *)result + 32);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    long long v3 = *result;
    long long v4 = result[1];
  }
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  *(unsigned char *)(v1 + 48) = v2;
  return result;
}

void (*PortalComponent.clippingMode.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  char v4 = *(unsigned char *)(v1 + 48);
  long long v5 = 0uLL;
  long long v6 = 0uLL;
  if ((v4 & 1) == 0)
  {
    long long v5 = *(_OWORD *)(v1 + 16);
    long long v6 = *(_OWORD *)(v1 + 32);
  }
  *(_OWORD *)long long v3 = v5;
  *((_OWORD *)v3 + 1) = v6;
  *((unsigned char *)v3 + 32) = v4;
  return PortalComponent.clippingMode.modify;
}

void PortalComponent.clippingMode.modify(void **a1)
{
  uint64_t v1 = *a1;
  char v2 = v1[32];
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    long long v3 = *(_OWORD *)v1;
    long long v4 = *((_OWORD *)v1 + 1);
  }
  uint64_t v5 = *((void *)v1 + 5);
  *(_OWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 32) = v4;
  *(unsigned char *)(v5 + 48) = v2;
  free(v1);
}

uint64_t static PortalComponent.ClippingMode.== infix(_:_:)(long long *a1, long long *a2)
{
  int v3 = *((unsigned __int8 *)a1 + 32);
  unsigned int v4 = *((unsigned __int8 *)a2 + 32);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
  {
    uint64_t v6 = 0;
    long long v7 = *a1;
    long long v8 = a1[1];
    long long v9 = *a2;
    long long v10 = a2[1];
    while (1)
    {
      long long v20 = v7;
      float v12 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
      long long v21 = v9;
      float v13 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
      BOOL v11 = v12 == v13;
      if (v6 == 2) {
        break;
      }
      while (1)
      {
        ++v6;
        if (v11) {
          break;
        }
        BOOL v11 = 0;
        uint64_t result = 0;
        if (v6 == 2) {
          return result;
        }
      }
    }
    if (v12 != v13) {
      return 0;
    }
    uint64_t v14 = 0;
    while (1)
    {
      long long v18 = v8;
      float v16 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
      long long v19 = v10;
      float v17 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
      BOOL v15 = v16 == v17;
      if (v14 == 2) {
        break;
      }
      while (1)
      {
        ++v14;
        if (v15) {
          break;
        }
        if (v14 == 2) {
          return 0;
        }
        BOOL v15 = 0;
      }
    }
    return v16 == v17;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PortalComponent.ClippingMode(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 32) & *(unsigned char *)(a2 + 32);
  if ((*(unsigned char *)(a1 + 32) & 1) == 0 && (*(unsigned char *)(a2 + 32) & 1) == 0)
  {
    long long v3 = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    long long v12 = *(_OWORD *)a1;
    uint64_t v13 = v5;
    uint64_t v14 = v4;
    long long v9 = v3;
    uint64_t v10 = v6;
    uint64_t v11 = v7;
    char v2 = specialized static PortalComponent.Plane.== infix(_:_:)(&v12, &v9);
  }
  return v2 & 1;
}

void PortalComponent.crossingMode.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 96);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    long long v3 = *(_OWORD *)(v1 + 64);
    long long v4 = *(_OWORD *)(v1 + 80);
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
}

long long *PortalComponent.crossingMode.setter(long long *result)
{
  char v2 = *((unsigned char *)result + 32);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    long long v3 = *result;
    long long v4 = result[1];
  }
  *(_OWORD *)(v1 + 64) = v3;
  *(_OWORD *)(v1 + 80) = v4;
  *(unsigned char *)(v1 + 96) = v2;
  return result;
}

void (*PortalComponent.crossingMode.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  char v4 = *(unsigned char *)(v1 + 96);
  long long v5 = 0uLL;
  long long v6 = 0uLL;
  if ((v4 & 1) == 0)
  {
    long long v5 = *(_OWORD *)(v1 + 64);
    long long v6 = *(_OWORD *)(v1 + 80);
  }
  *(_OWORD *)long long v3 = v5;
  *((_OWORD *)v3 + 1) = v6;
  *((unsigned char *)v3 + 32) = v4;
  return PortalComponent.crossingMode.modify;
}

void PortalComponent.crossingMode.modify(void **a1)
{
  uint64_t v1 = *a1;
  char v2 = v1[32];
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    long long v3 = *(_OWORD *)v1;
    long long v4 = *((_OWORD *)v1 + 1);
  }
  uint64_t v5 = *((void *)v1 + 5);
  *(_OWORD *)(v5 + 64) = v3;
  *(_OWORD *)(v5 + 80) = v4;
  *(unsigned char *)(v5 + 96) = v2;
  free(v1);
}

int8x16_t PortalComponent.init(target:clippingMode:crossingMode:)@<Q0>(uint64_t a1@<X0>, int8x16_t *a2@<X1>, int8x16_t *a3@<X2>, int8x16_t *a4@<X8>)
{
  int8x16_t v4 = *a2;
  int8x16_t v5 = a2[1];
  int v6 = a2[2].u8[0];
  int8x16_t v7 = *a3;
  int8x16_t v8 = a3[1];
  int v9 = a3[2].u8[0];
  a4->i64[0] = a1;
  if (v6) {
    unint64_t v10 = -1;
  }
  else {
    unint64_t v10 = 0;
  }
  int8x16_t v11 = (int8x16_t)vdupq_n_s64(v10);
  a4[1] = vbicq_s8(v4, v11);
  a4[2] = vbicq_s8(v5, v11);
  if (v9) {
    unint64_t v12 = -1;
  }
  else {
    unint64_t v12 = 0;
  }
  int8x16_t v13 = (int8x16_t)vdupq_n_s64(v12);
  a4[3].i8[0] = v6;
  int8x16_t v14 = vbicq_s8(v7, v13);
  int8x16_t result = vbicq_s8(v8, v13);
  a4[4] = v14;
  a4[5] = result;
  a4[6].i8[0] = v9;
  return result;
}

RealityFoundation::PortalComponent::Options __swiftcall PortalComponent.Options.init(rawValue:)(RealityFoundation::PortalComponent::Options rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t PortalComponent.Options.rawValue.getter()
{
  return *(void *)v0;
}

void static PortalComponent.Options.clipContents.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static PortalComponent.Options.allowCrossing.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t PortalComponent.init(target:plane:options:)@<X0>(uint64_t result@<X0>, int8x16_t *a2@<X1>, void *a3@<X2>, int8x16_t *a4@<X8>, int64x2_t a5@<Q0>, int64x2_t a6@<Q1>, int64x2_t a7@<Q4>)
{
  a5.i64[0] = 0;
  a6.i64[0] = *a3 & 1;
  int8x16_t v7 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(a6, a5)).i64[0], 0);
  int8x16_t v9 = *a2;
  int8x16_t v8 = a2[1];
  BOOL v10 = (*a3 & 1) == 0;
  uint64_t v11 = *a3 & 2;
  a7.i64[0] = v11;
  int8x16_t v12 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(a7, a5)).i64[0], 0);
  a4->i64[0] = result;
  a4[1] = vandq_s8(v9, v7);
  a4[2] = vandq_s8(v8, v7);
  a4[3].i8[0] = v10;
  a4[4] = vandq_s8(v9, v12);
  a4[5] = vandq_s8(v8, v12);
  a4[6].i8[0] = v11 == 0;
  return result;
}

uint64_t one-time initialization function for positiveX()
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for positiveX);
  long long v3 = v0;
  uint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for positiveX);
  static PortalComponent.Plane.positiveX = v3;
  unk_2681BF7A0 = v2;
  return result;
}

double static PortalComponent.Plane.positiveX.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for positiveX, (__n128 *)&static PortalComponent.Plane.positiveX, &xmmword_2681BF7A0, a1).n128_u64[0];
  return result;
}

uint64_t one-time initialization function for negativeX()
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for negativeX);
  long long v3 = v0;
  uint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for negativeX);
  static PortalComponent.Plane.negativeX = v3;
  unk_2681BF7C0 = v2;
  return result;
}

double static PortalComponent.Plane.negativeX.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for negativeX, (__n128 *)&static PortalComponent.Plane.negativeX, &xmmword_2681BF7C0, a1).n128_u64[0];
  return result;
}

uint64_t one-time initialization function for positiveY()
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for positiveY);
  long long v3 = v0;
  uint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for positiveY);
  static PortalComponent.Plane.positiveY = v3;
  unk_2681BF7E0 = v2;
  return result;
}

double static PortalComponent.Plane.positiveY.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for positiveY, (__n128 *)&static PortalComponent.Plane.positiveY, &xmmword_2681BF7E0, a1).n128_u64[0];
  return result;
}

uint64_t one-time initialization function for negativeY()
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for negativeY);
  long long v3 = v0;
  uint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for negativeY);
  static PortalComponent.Plane.negativeY = v3;
  unk_2681BF800 = v2;
  return result;
}

double static PortalComponent.Plane.negativeY.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for negativeY, (__n128 *)&static PortalComponent.Plane.negativeY, &xmmword_2681BF800, a1).n128_u64[0];
  return result;
}

uint64_t one-time initialization function for positiveZ()
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for positiveZ);
  long long v3 = v0;
  uint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for positiveZ);
  static PortalComponent.Plane.positiveZ = v3;
  unk_2681BF820 = v2;
  return result;
}

double static PortalComponent.Plane.positiveZ.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for positiveZ, (__n128 *)&static PortalComponent.Plane.positiveZ, &xmmword_2681BF820, a1).n128_u64[0];
  return result;
}

uint64_t one-time initialization function for negativeZ()
{
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for negativeZ);
  long long v3 = v0;
  uint64_t result = specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for negativeZ);
  static PortalComponent.Plane.negativeZ = v3;
  unk_2681BF840 = v2;
  return result;
}

double static PortalComponent.Plane.negativeZ.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static PortalComponent.Plane.positiveX.getter(&one-time initialization token for negativeZ, (__n128 *)&static PortalComponent.Plane.negativeZ, &xmmword_2681BF840, a1).n128_u64[0];
  return result;
}

__n128 static PortalComponent.Plane.positiveX.getter@<Q0>(void *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  __n128 result = *a2;
  __n128 v8 = *a3;
  *a4 = *a2;
  a4[1] = v8;
  return result;
}

uint64_t PortalComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v35 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v32 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v1;
  uint64_t v8 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  char v11 = *((unsigned char *)v1 + 48);
  uint64_t v12 = v1[8];
  uint64_t v13 = v1[9];
  uint64_t v15 = v1[10];
  uint64_t v14 = v1[11];
  char v16 = *((unsigned char *)v1 + 96);
  uint64_t v37 = v6;
  uint64_t v38 = v8;
  uint64_t v39 = v7;
  uint64_t v40 = v9;
  uint64_t v41 = v10;
  char v42 = v11;
  uint64_t v29 = v13;
  uint64_t v30 = v12;
  uint64_t v43 = v12;
  uint64_t v44 = v13;
  uint64_t v45 = v15;
  uint64_t v46 = v14;
  char v47 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_22831E360;
  strcpy((char *)(v17 + 32), "targetEntity");
  *(unsigned char *)(v17 + 45) = 0;
  *(_WORD *)(v17 + 46) = -5120;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity?);
  uint64_t v31 = v6;
  *(void *)(v17 + 48) = v6;
  *(void *)(v17 + 72) = v18;
  strcpy((char *)(v17 + 80), "clippingMode");
  *(unsigned char *)(v17 + 93) = 0;
  *(_WORD *)(v17 + 94) = -5120;
  *(void *)(v17 + 120) = &type metadata for PortalComponent.ClippingMode;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  *(void *)(v17 + 96) = v19;
  if ((v11 & 1) == 0)
  {
    uint64_t v20 = v8;
    uint64_t v21 = v7;
    uint64_t v22 = v9;
    uint64_t v23 = v10;
  }
  *(void *)(v19 + 16) = v20;
  *(void *)(v19 + 24) = v21;
  *(void *)(v19 + 32) = v22;
  *(void *)(v19 + 40) = v23;
  *(unsigned char *)(v19 + 48) = v11;
  strcpy((char *)(v17 + 128), "crossingMode");
  *(unsigned char *)(v17 + 141) = 0;
  *(_WORD *)(v17 + 142) = -5120;
  *(void *)(v17 + 168) = &type metadata for PortalComponent.CrossingMode;
  uint64_t v24 = swift_allocObject();
  *(void *)(v17 + 144) = v24;
  if (v16)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v26 = v29;
    uint64_t v25 = v30;
  }
  *(void *)(v24 + 16) = v25;
  *(void *)(v24 + 24) = v26;
  *(void *)(v24 + 32) = v15;
  *(void *)(v24 + 40) = v14;
  *(unsigned char *)(v24 + 48) = v16;
  uint64_t v27 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v32, 1, 1, v27);
  (*(void (**)(char *, void, uint64_t))(v33 + 104))(v35, *MEMORY[0x263F8E830], v34);
  swift_retain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

BOOL specialized static PortalComponent.Plane.== infix(_:_:)(long long *a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v4 = *a1;
  long long v3 = a1[1];
  long long v6 = *a2;
  long long v5 = a2[1];
  while (1)
  {
    long long v17 = v4;
    float v9 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    long long v18 = v6;
    float v10 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    BOOL v7 = v9 == v10;
    if (v2 == 2) {
      break;
    }
    while (1)
    {
      ++v2;
      if (v7) {
        break;
      }
      BOOL v7 = 0;
      BOOL result = 0;
      if (v2 == 2) {
        return result;
      }
    }
  }
  if (v9 != v10) {
    return 0;
  }
  uint64_t v11 = 0;
  while (1)
  {
    long long v15 = v3;
    float v13 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    long long v16 = v5;
    float v14 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    BOOL v12 = v13 == v14;
    if (v11 == 2) {
      break;
    }
    while (1)
    {
      ++v11;
      if (v12) {
        break;
      }
      if (v11 == 2) {
        return 0;
      }
      BOOL v12 = 0;
    }
  }
  return v13 == v14;
}

uint64_t sub_227F3C64C()
{
  return MEMORY[0x270FA0238](v0, 64, 15);
}

unint64_t lazy protocol witness table accessor for type PortalComponent.Options and conformance PortalComponent.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options;
  if (!lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options;
  if (!lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options;
  if (!lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options;
  if (!lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalComponent.Options and conformance PortalComponent.Options);
  }
  return result;
}

uint64_t sub_227F3C7BC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

long long *sub_227F3C7D0(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 32);
  long long v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  char v5 = v1;
  return PortalComponent.clippingPlane.setter(v4);
}

uint64_t sub_227F3C810@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 48);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    long long v3 = *(_OWORD *)(result + 16);
    long long v4 = *(_OWORD *)(result + 32);
  }
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v2;
  return result;
}

long long *sub_227F3C830(long long *result, uint64_t a2)
{
  char v2 = *((unsigned char *)result + 32);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    long long v3 = *result;
    long long v4 = result[1];
  }
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(unsigned char *)(a2 + 48) = v2;
  return result;
}

uint64_t sub_227F3C850@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 96);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    long long v3 = *(_OWORD *)(result + 64);
    long long v4 = *(_OWORD *)(result + 80);
  }
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v2;
  return result;
}

long long *sub_227F3C870(long long *result, uint64_t a2)
{
  char v2 = *((unsigned char *)result + 32);
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if ((v2 & 1) == 0)
  {
    long long v3 = *result;
    long long v4 = result[1];
  }
  *(_OWORD *)(a2 + 64) = v3;
  *(_OWORD *)(a2 + 80) = v4;
  *(unsigned char *)(a2 + 96) = v2;
  return result;
}

uint64_t initializeWithCopy for PortalComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PortalComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  return a1;
}

__n128 __swift_memcpy97_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for PortalComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for PortalComponent(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 97)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PortalComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 97) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PortalComponent()
{
  return &type metadata for PortalComponent;
}

ValueMetadata *type metadata accessor for PortalComponent.ClippingPlane()
{
  return &type metadata for PortalComponent.ClippingPlane;
}

ValueMetadata *type metadata accessor for PortalComponent.Plane()
{
  return &type metadata for PortalComponent.Plane;
}

__n128 __swift_memcpy33_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PortalComponent.ClippingMode(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PortalComponent.ClippingMode(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 32) = 0;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

uint64_t getEnumTag for PortalComponent.ClippingMode(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for PortalComponent.ClippingMode(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 32) = 1;
  }
  else
  {
    *(unsigned char *)(result + 32) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PortalComponent.ClippingMode()
{
  return &type metadata for PortalComponent.ClippingMode;
}

ValueMetadata *type metadata accessor for PortalComponent.CrossingMode()
{
  return &type metadata for PortalComponent.CrossingMode;
}

ValueMetadata *type metadata accessor for PortalComponent.Options()
{
  return &type metadata for PortalComponent.Options;
}

ValueMetadata *type metadata accessor for PortalComponent._CrossingMode()
{
  return &type metadata for PortalComponent._CrossingMode;
}

ValueMetadata *type metadata accessor for PortalComponent._ClippingMode()
{
  return &type metadata for PortalComponent._ClippingMode;
}

void *assignWithCopy for PortalComponent.Target(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for PortalComponent.Target(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PortalComponent.Target()
{
  return &type metadata for PortalComponent.Target;
}

ValueMetadata *type metadata accessor for PortalComponent._Plane()
{
  return &type metadata for PortalComponent._Plane;
}

uint64_t Entity.debugDescription.getter()
{
  return Entity.debugDescriptionRecursive(indent:)(0);
}

uint64_t Entity.debugDescriptionRecursive(indent:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x22A688C90](32, 0xE100000000000000, a1);
  int v4 = v3;
  if (!REEntityGetChildCount())
  {
    uint64_t v10 = 0;
    float v9 = (void *)0xE000000000000000;
    goto LABEL_9;
  }
  strcpy((char *)v38, ", children: ");
  BYTE5(v38[1]) = 0;
  HIWORD(v38[1]) = -5120;
  swift_retain();
  uint64_t result = REEntityGetChildCount();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v6 = result;
    if (result)
    {
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t result = REEntityGetChildCount();
        if (v7 >= result) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_7;
        }
      }
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_7:
    swift_release();
    uint64_t v39 = v6;
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v10 = v38[0];
    float v9 = (void *)v38[1];
LABEL_9:
    swift_bridgeObjectRetain();
    v11._uint64_t countAndFlagsBits = 0x909FE22020;
    v11._object = (void *)0xA500000000000000;
    String.append(_:)(v11);
    uint64_t v13 = v2;
    BOOL v12 = v4;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v38[0] = v2;
    v38[1] = v4;
    v14._uint64_t countAndFlagsBits = 0x2720BF96E2;
    v14._object = (void *)0xA500000000000000;
    String.append(_:)(v14);
    REEntityGetName();
    v15._uint64_t countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 540680231;
    v16._object = (void *)0xE400000000000000;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = v10;
    v18._object = v9;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 10;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    uint64_t v39 = v2;
    uint64_t v40 = v4;
    uint64_t v20 = swift_retain();
    uint64_t v21 = specialized static Entity.ComponentSet.Iterator.buildSnapshot(_:)(v20);
    swift_release();
    unint64_t v22 = v21[2];
    if (v22)
    {
      uint64_t v23 = (uint64_t)(v21 + 4);
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v24 = 0;
      while (v24 < v22)
      {
        ++v24;
        outlined init with copy of __REAssetService(v23, (uint64_t)v38);
        swift_bridgeObjectRetain();
        v25._uint64_t countAndFlagsBits = 32;
        v25._object = (void *)0xE100000000000000;
        String.append(_:)(v25);
        __swift_project_boxed_opaque_existential_1(v38, v38[3]);
        swift_getDynamicType();
        v26._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._uint64_t countAndFlagsBits = 10;
        v27._object = (void *)0xE100000000000000;
        String.append(_:)(v27);
        v28._uint64_t countAndFlagsBits = v13;
        v28._object = v12;
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
        unint64_t v22 = v21[2];
        v23 += 40;
        if (v24 == v22) {
          goto LABEL_15;
        }
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_15:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_retain();
      if (REEntityGetChildCount() < 1)
      {
LABEL_31:
        swift_release();
        return v39;
      }
      uint64_t v29 = 0;
      BOOL v30 = __OFADD__(a1, 2);
      uint64_t v31 = a1 + 2;
      char v32 = v30;
      while (1)
      {
        uint64_t result = REEntityGetChildCount();
        if (v29 >= result) {
          break;
        }
        uint64_t result = REEntityGetChild();
        if (!result) {
          goto LABEL_39;
        }
        uint64_t v33 = result;
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          uint64_t result = REEntityIsBeingDestroyed();
          if (result) {
            goto LABEL_37;
          }
          uint64_t v34 = specialized static Entity.entityInfoType(_:)();
          if (v34)
          {
            uint64_t v35 = (*(uint64_t (**)(void))(v34 + 232))();
            uint64_t v36 = *(void *)(v35 + 16);
            swift_retain();
            MEMORY[0x22A68E750](v36, 0);
            *(void *)(v35 + 16) = v33;
            MEMORY[0x22A68E750](v33, v35);
            swift_release();
          }
          else
          {
            makeEntity(for:)(v33);
          }
        }
        uint64_t result = REEntityGetChildCount();
        if (v29 >= result) {
          goto LABEL_34;
        }
        if (v32) {
          goto LABEL_35;
        }
        ++v29;
        v37._uint64_t countAndFlagsBits = Entity.debugDescriptionRecursive(indent:)(v31);
        String.append(_:)(v37);
        swift_release();
        swift_bridgeObjectRelease();
        if (v29 >= REEntityGetChildCount()) {
          goto LABEL_31;
        }
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Entity()
{
  return Entity.debugDescriptionRecursive(indent:)(0);
}

uint64_t Entity.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  int v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_228324960;
  *(void *)(v8 + 32) = 25705;
  *(void *)(v8 + 40) = 0xE200000000000000;
  swift_retain();
  uint64_t LocalId = REEntityGetLocalId();
  uint64_t v10 = MEMORY[0x263F8E970];
  *(void *)(v8 + 48) = LocalId;
  *(void *)(v8 + 72) = v10;
  *(void *)(v8 + 80) = 1701667182;
  *(void *)(v8 + 88) = 0xE400000000000000;
  REEntityGetName();
  uint64_t v11 = String.init(cString:)();
  uint64_t v12 = MEMORY[0x263F8D310];
  *(void *)(v8 + 96) = v11;
  *(void *)(v8 + 104) = v13;
  *(void *)(v8 + 120) = v12;
  *(void *)(v8 + 128) = 0x6E656E6F706D6F63;
  *(void *)(v8 + 136) = 0xEA00000000007374;
  *(void *)(v8 + 144) = v0;
  *(void *)(v8 + 168) = &type metadata for Entity.ComponentSet;
  *(void *)(v8 + 176) = 0x6E6572646C696863;
  *(void *)(v8 + 216) = &type metadata for Entity.ChildCollection;
  *(void *)(v8 + 184) = 0xE800000000000000;
  *(void *)(v8 + 192) = v0;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  type metadata accessor for Entity();
  swift_retain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Entity()
{
  return Entity.customMirror.getter();
}

uint64_t Entity.ComponentSet.customMirror.getter()
{
  return Entity.ComponentSet.customMirror.getter(specialized _copyCollectionToContiguousArray<A>(_:), &demangling cache variable for type metadata for [Component], &lazy protocol witness table cache variable for type [Component] and conformance [A], (uint64_t)&type metadata for Entity.ComponentSet);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Entity.ComponentSet(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance Entity.ComponentSet(a1, a2, specialized _copyCollectionToContiguousArray<A>(_:), &demangling cache variable for type metadata for [Component], &lazy protocol witness table cache variable for type [Component] and conformance [A]);
}

uint64_t Entity.ChildCollection.customMirror.getter()
{
  return Entity.ComponentSet.customMirror.getter(specialized _copyCollectionToContiguousArray<A>(_:), &demangling cache variable for type metadata for [Entity], &lazy protocol witness table cache variable for type [Entity] and conformance [A], (uint64_t)&type metadata for Entity.ChildCollection);
}

uint64_t Entity.ComponentSet.customMirror.getter(uint64_t (*a1)(uint64_t), uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  v20[1] = a4;
  uint64_t v8 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v20[3] = *v4;
  uint64_t v15 = swift_retain();
  long long v20[2] = a1(v15);
  uint64_t v16 = *MEMORY[0x263F8E7E8];
  uint64_t v17 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v14, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8E830], v8);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  lazy protocol witness table accessor for type [Component] and conformance [A](a3, a2);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Entity.ChildCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance Entity.ComponentSet(a1, a2, specialized _copyCollectionToContiguousArray<A>(_:), &demangling cache variable for type metadata for [Entity], &lazy protocol witness table cache variable for type [Entity] and conformance [A]);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Entity.ComponentSet(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5)
{
  v21[1] = a1;
  uint64_t v9 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[3] = *v5;
  uint64_t v16 = swift_retain();
  long long v21[2] = a3(v16);
  uint64_t v17 = *MEMORY[0x263F8E7E8];
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v15, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x263F8E830], v9);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  lazy protocol witness table accessor for type [Component] and conformance [A](a5, a4);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t lazy protocol witness table accessor for type [Component] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity and conformance Entity()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity and conformance Entity;
  if (!lazy protocol witness table cache variable for type Entity and conformance Entity)
  {
    type metadata accessor for Entity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Entity and conformance Entity;
  if (!lazy protocol witness table cache variable for type Entity and conformance Entity)
  {
    type metadata accessor for Entity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity);
  }
  return result;
}

void __RKEntityUUIDComponent.didAdd(componentRef:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t Entity = REComponentGetEntity();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v9 = swift_dynamicCastClassUnconditional();
      goto LABEL_4;
    }
    if ((REEntityIsBeingDestroyed() & 1) == 0)
    {
      uint64_t v11 = specialized static Entity.entityInfoType(_:)();
      if (v11)
      {
        uint64_t v10 = (*(uint64_t (**)(void))(v11 + 232))();
        uint64_t v12 = *(void *)(v10 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v12, 0);
        *(void *)(v10 + 16) = Entity;
        MEMORY[0x22A68E750](Entity, v10);
        swift_release();
LABEL_8:
        swift_release();
        *(void *)(v2 + 16) = v10;
        uint64_t v49 = 91;
        unint64_t v50 = 0xE100000000000000;
        v46._uint64_t countAndFlagsBits = 0;
        v46._object = (void *)0xE000000000000000;
        v48._uint64_t countAndFlagsBits = v10;
        swift_retain();
        _print_unlocked<A, B>(_:_:)();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v13._uint64_t countAndFlagsBits = 8285;
        v13._object = (void *)0xE200000000000000;
        String.append(_:)(v13);
        v14._uint64_t countAndFlagsBits = StaticString.description.getter();
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        v15._uint64_t countAndFlagsBits = 8250;
        v15._object = (void *)0xE200000000000000;
        String.append(_:)(v15);
        swift_release();
        uint64_t v17 = v49;
        uint64_t v16 = (void *)v50;
        uint64_t v18 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v18, &v49);
        uint64_t SceneNullable = REEntityGetSceneNullable();
        if (SceneNullable)
        {
          uint64_t v20 = SceneNullable;
          id v21 = (id)RESceneGetSwiftObject();
          type metadata accessor for Scene();
          if (v21)
          {
            swift_dynamicCastClassUnconditional();
          }
          else
          {
            swift_allocObject();
            Scene.init(coreScene:)(v20);
          }
          uint64_t v22 = Scene.__interactionService.getter();
          swift_release();
          type metadata accessor for __RKEntityInteractionManager();
          uint64_t v23 = swift_dynamicCastClass();
          if (v23)
          {
            uint64_t v24 = v23;
            swift_beginAccess();
            uint64_t v25 = *(void *)(v24 + 40);
            int v26 = *(unsigned __int8 *)(v2 + 7);
            uint64_t v44 = v16;
            uint64_t v45 = v17;
            v40[2] = *(unsigned __int8 *)(v2 + 6);
            v40[3] = v26;
            uint64_t v42 = v5;
            uint64_t v43 = v4;
            uint64_t v41 = v22;
            swift_retain();
            UUID.init(uuid:)();
            v46._uint64_t countAndFlagsBits = 91;
            v46._object = (void *)0xE100000000000000;
            v48._uint64_t countAndFlagsBits = 0;
            v48._object = (void *)0xE000000000000000;
            uint64_t v47 = v25;
            swift_retain();
            _print_unlocked<A, B>(_:_:)();
            String.append(_:)(v48);
            swift_bridgeObjectRelease();
            v27._uint64_t countAndFlagsBits = 8285;
            v27._object = (void *)0xE200000000000000;
            String.append(_:)(v27);
            v28._uint64_t countAndFlagsBits = StaticString.description.getter();
            String.append(_:)(v28);
            swift_bridgeObjectRelease();
            v29._uint64_t countAndFlagsBits = 8250;
            v29._object = (void *)0xE200000000000000;
            String.append(_:)(v29);
            uint64_t v30 = swift_release();
            object = v46._object;
            MEMORY[0x270FA5388](v30);
            unint64_t v38 = (unint64_t)v7;
            unint64_t v39 = v10;
            v46._uint64_t countAndFlagsBits = v32;
            v46._object = object;
            swift_retain();
            uint64_t v33 = static os_log_type_t.debug.getter();
            specialized InteractionsLogger.log(_:_:)(v33, &v46, partial apply for implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:), &v40[-8]);
            swift_bridgeObjectRelease();
            swift_beginAccess();
            swift_retain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v48._uint64_t countAndFlagsBits = *(void *)(v25 + 16);
            *(void *)(v25 + 16) = 0x8000000000000000;
            specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v10, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
            *(void *)(v25 + 16) = v48._countAndFlagsBits;
            swift_bridgeObjectRelease();
            swift_endAccess();
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v43);
            v46._uint64_t countAndFlagsBits = v45;
            v46._object = v44;
            uint64_t v35 = static os_log_type_t.debug.getter();
            specialized InteractionsLogger.log(_:_:)(v35, &v46);
LABEL_16:
            swift_bridgeObjectRelease();
            return;
          }
          uint64_t SceneNullable = swift_unknownObjectRelease();
        }
        MEMORY[0x270FA5388](SceneNullable);
        unint64_t v38 = 0xD000000000000072;
        unint64_t v39 = 0x8000000228353430;
        uint64_t v49 = v17;
        unint64_t v50 = (unint64_t)v16;
        uint64_t v36 = static os_log_type_t.error.getter();
        specialized InteractionsLogger.log(_:_:)(v36, &v49, protocol witness for CodingKey.stringValue.getter in conformance UnkeyedEC.IndexedCodingKey, &v40[-8]);
        uint64_t v49 = v17;
        unint64_t v50 = (unint64_t)v16;
        uint64_t v37 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v37, &v49);
        goto LABEL_16;
      }
      uint64_t v9 = makeEntity(for:)(Entity);
LABEL_4:
      uint64_t v10 = v9;
      goto LABEL_8;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t closure #1 in SyncInfoContext.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SyncInfoContext.Buffer();
  unint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  MEMORY[0x270FA5388](v9);
  MEMORY[0x270FA5388](v11);
  Swift::String v13 = (char *)v27 - v12;
  uint64_t Object = RECustomComponentGetObject();
  if (!Object) {
    return 0;
  }
  uint64_t v31 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v9;
  unint64_t v28 = v10;
  Swift::String v29 = v13;
  uint64_t v33 = v6;
  uint64_t v34 = v5;
  uint64_t v30 = a4;
  Swift::String v15 = v8;
  uint64_t v16 = *(unsigned __int8 *)(Object + 5);
  uint64_t v17 = *(unsigned __int8 *)(Object + 3);
  uint64_t v18 = *(unsigned __int8 *)(Object + 1);
  v27[1] = *(void *)(Object + 16);
  swift_retain();
  UUID.init(uuid:)();
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    LOBYTE(v20) = 10;
    uint64_t v17 = v33;
    uint64_t v16 = v34;
    uint64_t v18 = (uint64_t)v31;
    Swift::String v15 = (char *)v32;
    goto LABEL_8;
  }
  if ((Character._isSingleScalar.getter() & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v19 = specialized Collection.first.getter(0x49uLL, 0xE100000000000000);
  if ((v19 & 0x100000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v17 = v33;
  uint64_t v16 = v34;
  uint64_t v18 = (uint64_t)v31;
  Swift::String v15 = (char *)v32;
  if ((v19 & 0xFFFFFF80) != 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v20 = specialized Collection.first.getter(0x49uLL, 0xE100000000000000);
  if ((v20 & 0x100000000) != 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if ((v20 & 0xFFFFFF00) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }
LABEL_8:
  *(unsigned char *)uint64_t v18 = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v18 + *((int *)v15 + 5), v8, v16);
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
LABEL_22:
    char v23 = 10;
    goto LABEL_14;
  }
  if ((Character._isSingleScalar.getter() & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v21 = specialized Collection.first.getter(0x45uLL, 0xE100000000000000);
  if ((v21 & 0x100000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((v21 & 0xFFFFFF80) != 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  unint64_t v22 = specialized Collection.first.getter(0x45uLL, 0xE100000000000000);
  if ((v22 & 0x100000000) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  char v23 = v22;
  if ((v22 & 0xFFFFFF00) != 0) {
    goto LABEL_26;
  }
LABEL_14:
  (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v16);
  *(unsigned char *)(v18 + *((int *)v15 + 6)) = v23;
  uint64_t v24 = (uint64_t)v29;
  outlined init with take of SyncInfoContext.Buffer(v18, (uint64_t)v29);
  if ((v28 & 0x8000000000000000) == 0 && !HIDWORD(v28))
  {
    uint64_t v25 = RENetSyncBufferWrite();
    swift_release();
    outlined destroy of SyncInfoContext.Buffer(v24);
    return v25;
  }
LABEL_31:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in SyncInfoContext.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SyncInfoContext.Buffer();
  MEMORY[0x270FA5388](v11);
  Swift::String v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12 > a5) {
    return 0;
  }
  uint64_t result = RECustomComponentGetObject();
  if (!result) {
    return result;
  }
  int v15 = *a4;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (Character._isSingleScalar.getter())
    {
      uint64_t result = specialized Collection.first.getter(0x49uLL, 0xE100000000000000);
      if ((result & 0x100000000) != 0)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if ((result & 0xFFFFFF80) == 0)
      {
        uint64_t result = specialized Collection.first.getter(0x49uLL, 0xE100000000000000);
        if ((result & 0x100000000) != 0)
        {
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
        if ((result & 0xFFFFFF00) == 0)
        {
          if (v15 == result) {
            goto LABEL_10;
          }
          return 0;
        }
LABEL_22:
        __break(1u);
LABEL_23:
        if (v15 == 10) {
          goto LABEL_17;
        }
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  if (v15 == 10)
  {
LABEL_10:
    int v15 = a4[*(int *)(v11 + 24)];
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t result = Character._isSingleScalar.getter();
      if (result)
      {
        uint64_t result = specialized Collection.first.getter(0x45uLL, 0xE100000000000000);
        if ((result & 0x100000000) != 0)
        {
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        if ((result & 0xFFFFFF80) == 0)
        {
          uint64_t result = specialized Collection.first.getter(0x45uLL, 0xE100000000000000);
          if ((result & 0x100000000) != 0)
          {
LABEL_32:
            __break(1u);
            return result;
          }
          if ((result & 0xFFFFFF00) == 0)
          {
            if (v15 == result)
            {
LABEL_17:
              outlined init with copy of SyncInfoContext.Buffer((uint64_t)a4, (uint64_t)v13);
              (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, &v13[*(int *)(v11 + 20)], v7);
              __RKEntityUUIDComponent.uuid.setter((uint64_t)v10);
              return 1;
            }
            return 0;
          }
          goto LABEL_28;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    goto LABEL_23;
  }
  return 0;
}

uint64_t __RKEntityUUIDComponent.uuid.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuid:)();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    *(void *)uint64_t v1 = UUID.uuid.getter();
    *(unsigned char *)(v1 + 8) = v7;
    *(unsigned char *)(v1 + 9) = v8;
    *(unsigned char *)(v1 + 10) = v9;
    *(unsigned char *)(v1 + 11) = v10;
    *(unsigned char *)(v1 + 12) = v11;
    *(unsigned char *)(v1 + 13) = v12;
    *(unsigned char *)(v1 + 14) = v13;
    *(unsigned char *)(v1 + 15) = v14;
    uint64_t v15 = *(void *)(v1 + 16);
    if (v15)
    {
      swift_retain();
      uint64_t SceneNullable = REEntityGetSceneNullable();
      if (SceneNullable)
      {
        uint64_t v17 = SceneNullable;
        id v18 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v18)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          swift_allocObject();
          Scene.init(coreScene:)(v17);
        }
        uint64_t v19 = Scene.__interactionService.getter();
        swift_release();
        type metadata accessor for __RKEntityInteractionManager();
        uint64_t v20 = swift_dynamicCastClass();
        if (!v20)
        {
          swift_release();
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v21 = v20;
        swift_beginAccess();
        uint64_t v22 = *(void *)(v21 + 40);
        uint64_t v41 = 91;
        unint64_t v42 = 0xE100000000000000;
        v44._uint64_t countAndFlagsBits = 0;
        v44._object = (void *)0xE000000000000000;
        uint64_t v43 = v22;
        swift_retain_n();
        swift_unknownObjectRetain();
        _print_unlocked<A, B>(_:_:)();
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 8285;
        v23._object = (void *)0xE200000000000000;
        String.append(_:)(v23);
        v24._uint64_t countAndFlagsBits = StaticString.description.getter();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._uint64_t countAndFlagsBits = 8250;
        v25._object = (void *)0xE200000000000000;
        String.append(_:)(v25);
        uint64_t v26 = swift_release();
        unint64_t v27 = v42;
        MEMORY[0x270FA5388](v26);
        uint64_t v41 = v28;
        unint64_t v42 = v27;
        uint64_t v29 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v29, &v41, implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:)partial apply, &v40[-4]);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v40[2] = specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v6);
        swift_endAccess();
        uint64_t v41 = 91;
        unint64_t v42 = 0xE100000000000000;
        v44._uint64_t countAndFlagsBits = 0;
        v44._object = (void *)0xE000000000000000;
        uint64_t v43 = v22;
        swift_retain();
        swift_retain();
        _print_unlocked<A, B>(_:_:)();
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v30._uint64_t countAndFlagsBits = 8285;
        v30._object = (void *)0xE200000000000000;
        String.append(_:)(v30);
        v31._uint64_t countAndFlagsBits = StaticString.description.getter();
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v32._uint64_t countAndFlagsBits = 8250;
        v32._object = (void *)0xE200000000000000;
        String.append(_:)(v32);
        uint64_t v33 = swift_release();
        v40[1] = v19;
        unint64_t v34 = v42;
        MEMORY[0x270FA5388](v33);
        uint64_t v41 = v35;
        unint64_t v42 = v34;
        swift_retain();
        uint64_t v36 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v36, &v41, implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:)partial apply, &v40[-4]);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v44._uint64_t countAndFlagsBits = *(void *)(v22 + 16);
        *(void *)(v22 + 16) = 0x8000000000000000;
        specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v15, a1, isUniquelyReferenced_nonNull_native);
        *(void *)(v22 + 16) = v44._countAndFlagsBits;
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_release();
        swift_unknownObjectRelease_n();
        swift_release_n();
        swift_release();
      }
      swift_release();
    }
  }
LABEL_12:
  unint64_t v38 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v38(a1, v3);
  return ((uint64_t (*)(char *, uint64_t))v38)(v6, v3);
}

uint64_t __RKEntityUUIDComponent.Registration.componentType.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t __RKEntityUUIDComponent.Registration.init()()
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  REStructBuilderCreate();
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberCStyleArrayDataTypeWithTag(), (uint64_t v1 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_6:
    REStructBuilderDestroy();
    type metadata accessor for __RKEntityUUIDComponent.Registration();
    swift_deallocPartialClassInstance();
    return v0;
  }
  uint64_t v2 = v1;
  *(void *)(v0 + 16) = v1;
  uint64_t v3 = (void *)swift_slowAlloc();
  void *v3 = closure #1 in SyncInfoContext.init(_:);
  v3[1] = 0;
  v3[2] = closure #2 in SyncInfoContext.init(_:);
  v3[3] = 0;
  uint64_t v18 = 48;
  int v19 = 1;
  uint64_t v20 = v3;
  uint64_t v21 = @objc writeCallback(syncInfoContextRawPointer:entity:component:componentType:outBuffer:);
  uint64_t v22 = @objc readCallback(syncInfoContextRawPointer:entity:component:componentType:snapshotBuffer:snapshotBufferLen:);
  char v23 = 1;
  long long v6 = xmmword_22832BCF0;
  int v7 = 2;
  char v8 = &v6;
  uint64_t v9 = 0;
  char v10 = @objc createEntityUUIDComponentObject(componentType:);
  char v11 = @objc destroyEntityUUIDComponentObject(componentType:rawPointer:);
  char v12 = @objc didAddEntityUUIDComponentObject(componentRef:);
  char v13 = @objc willRemoveEntityUUIDComponentObject(componentRef:);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = v2;
  uint64_t v17 = &v18;
  uint64_t v4 = RECustomComponentTypeCreate();
  if (!v4)
  {
    lazy protocol witness table accessor for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  *(void *)(v0 + 24) = v4;
  REStructBuilderDestroy();
  return v0;
}

uint64_t @objc writeCallback(syncInfoContextRawPointer:entity:component:componentType:outBuffer:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = *a1;
    swift_retain();
    swift_retain();
    char v10 = v9(a2, a3, a4, a5);
    swift_release();
    swift_release();
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t @objc readCallback(syncInfoContextRawPointer:entity:component:componentType:snapshotBuffer:snapshotBufferLen:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    char v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16);
    swift_retain();
    swift_retain();
    char v12 = v11(a2, a3, a4, a5, a6);
    swift_release();
    swift_release();
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

void *@objc createEntityUUIDComponentObject(componentType:)()
{
  uint64_t result = (void *)RECIntrospectionAlloc();
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = 0;
  return result;
}

uint64_t @objc destroyEntityUUIDComponentObject(componentType:rawPointer:)()
{
  swift_arrayDestroy();

  return RECIntrospectionFree();
}

void @objc didAddEntityUUIDComponentObject(componentRef:)(uint64_t a1)
{
  if (RECustomComponentGetObject()) {
    __RKEntityUUIDComponent.didAdd(componentRef:)(a1);
  }
}

uint64_t @objc willRemoveEntityUUIDComponentObject(componentRef:)()
{
  uint64_t result = RECustomComponentGetObject();
  if (result) {
    return specialized __RKEntityUUIDComponent.willRemove(componentRef:)();
  }
  return result;
}

uint64_t __RKEntityUUIDComponent.Registration.deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __RKEntityUUIDComponent.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();

  return swift_deallocClassInstance();
}

uint64_t static __RKEntityUUIDComponent.registration.getter()
{
  return swift_retain();
}

uint64_t static __RKEntityUUIDComponent.registration.setter(void *a1)
{
  static __RKEntityUUIDComponent.registration = a1;
  return swift_release();
}

uint64_t (*static __RKEntityUUIDComponent.registration.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t Entity.__interactionIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  if (static __RKEntityUUIDComponent.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
  {
    UUID.init(uuid:)();
    uint64_t v2 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 0, 1, v2);
  }
  else
  {
    uint64_t v4 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a1, 1, 1, v4);
  }
}

uint64_t key path setter for Entity.__interactionIdentifier : Entity(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v4);
  return Entity.__interactionIdentifier.setter((uint64_t)v4);
}

uint64_t Entity.__interactionIdentifier.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  char v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v16 - v11;
  uint64_t v13 = *(void *)(v1 + 16);
  swift_beginAccess();
  if (static __RKEntityUUIDComponent.registration)
  {
    uint64_t v14 = *((void *)static __RKEntityUUIDComponent.registration + 3);
    outlined init with copy of UUID?(a1, (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      outlined destroy of UUID?((uint64_t)v5);
      if (REEntityGetCustomComponent()) {
        REEntityRemoveComponentByClass();
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
      if ((REEntityGetCustomComponent() || MEMORY[0x22A68E460](v13, v14)) && RECustomComponentGetObject())
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
        __RKEntityUUIDComponent.uuid.setter((uint64_t)v10);
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
  }
  return outlined destroy of UUID?(a1);
}

void (*Entity.__interactionIdentifier.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  size_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                             - 8)
                 + 64);
  v3[4] = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[5] = v5;
  swift_beginAccess();
  if (static __RKEntityUUIDComponent.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
  {
    UUID.init(uuid:)();
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  }
  return Entity.__interactionIdentifier.modify;
}

void Entity.__interactionIdentifier.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  size_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    outlined init with copy of UUID?((uint64_t)v4, (uint64_t)v3);
    Entity.__interactionIdentifier.setter((uint64_t)v3);
    outlined destroy of UUID?((uint64_t)v4);
  }
  else
  {
    Entity.__interactionIdentifier.setter((uint64_t)v4);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t __EntityRef.__validInteractionIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = *v1;
  swift_beginAccess();
  if (!static __RKEntityUUIDComponent.registration || !REEntityGetCustomComponent() || !RECustomComponentGetObject())
  {
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
LABEL_7:
    outlined destroy of UUID?((uint64_t)v8);
    UUID.init()();
    type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v5, a1, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v5, 0, 1, v10);
    specialized static __RKEntityUUIDComponent.setUUID(_:on:)((uint64_t)v5, v9);
    return outlined destroy of UUID?((uint64_t)v5);
  }
  UUID.init(uuid:)();
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1) {
    goto LABEL_7;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v8, v10);
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return MEMORY[0x270F9E998]();
    }
  }
  return result;
}

uint64_t specialized __RKEntityUUIDComponent.willRemove(componentRef:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v47 = 91;
  unint64_t v48 = 0xE100000000000000;
  if (v6)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    v46._uint64_t countAndFlagsBits = v6;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v7 = v43;
    unint64_t v8 = v44;
  }
  else
  {
    unint64_t v8 = 0xE300000000000000;
    uint64_t v7 = 7104878;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 8285;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_release();
  uint64_t v14 = v47;
  unint64_t v13 = v48;
  uint64_t v15 = static os_log_type_t.debug.getter();
  uint64_t v16 = specialized InteractionsLogger.log(_:_:)(v15, &v47);
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
    uint64_t v16 = swift_release();
LABEL_13:
    *(void *)(v1 + 16) = 0;
    MEMORY[0x270FA5388](v16);
    unint64_t v36 = 0xD000000000000072;
    unint64_t v37 = 0x8000000228353370;
    uint64_t v47 = v14;
    unint64_t v48 = v13;
    uint64_t v34 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v34, &v47, protocol witness for CodingKey.stringValue.getter in conformance UnkeyedDC.IndexedCodingKey, &v38[-8]);
    uint64_t v47 = v14;
    unint64_t v48 = v13;
    uint64_t v32 = static os_log_type_t.debug.getter();
    uint64_t v33 = &v47;
    goto LABEL_14;
  }
  uint64_t v18 = SceneNullable;
  id v19 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v19)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v18);
  }
  uint64_t v20 = Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_release();
    uint64_t v16 = swift_unknownObjectRelease();
    goto LABEL_13;
  }
  uint64_t v22 = v21;
  swift_beginAccess();
  uint64_t v23 = *(void *)(v22 + 40);
  int v24 = *(unsigned __int8 *)(v1 + 7);
  v38[4] = *(unsigned __int8 *)(v1 + 6);
  void v38[5] = v24;
  uint64_t v41 = v2;
  uint64_t v42 = v14;
  void v38[3] = *(unsigned __int8 *)(v1 + 5);
  uint64_t v39 = v20;
  uint64_t v40 = v3;
  swift_retain();
  UUID.init(uuid:)();
  uint64_t v43 = 91;
  unint64_t v44 = 0xE100000000000000;
  v46._uint64_t countAndFlagsBits = 0;
  v46._object = (void *)0xE000000000000000;
  uint64_t v45 = v23;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 8285;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 8250;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  uint64_t v28 = swift_release();
  unint64_t v29 = v44;
  MEMORY[0x270FA5388](v28);
  unint64_t v36 = (unint64_t)v5;
  uint64_t v43 = v30;
  unint64_t v44 = v29;
  uint64_t v31 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v31, &v43, partial apply for implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:), &v38[-8]);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v5);
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v5, v41);
  swift_release();
  *(void *)(v1 + 16) = 0;
  uint64_t v43 = v42;
  unint64_t v44 = v13;
  uint64_t v32 = static os_log_type_t.debug.getter();
  uint64_t v33 = &v43;
LABEL_14:
  specialized InteractionsLogger.log(_:_:)(v32, v33);
  return swift_bridgeObjectRelease();
}

uint64_t specialized static __RKEntityUUIDComponent.setUUID(_:on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  Swift::String v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v16 - v12;
  uint64_t result = swift_beginAccess();
  if (static __RKEntityUUIDComponent.registration)
  {
    uint64_t v15 = *((void *)static __RKEntityUUIDComponent.registration + 3);
    outlined init with copy of UUID?(a1, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      outlined destroy of UUID?((uint64_t)v6);
      uint64_t result = REEntityGetCustomComponent();
      if (result) {
        return REEntityRemoveComponentByClass();
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
      if (REEntityGetCustomComponent() || MEMORY[0x22A68E460](a2, v15))
      {
        if (RECustomComponentGetObject())
        {
          (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
          __RKEntityUUIDComponent.uuid.setter((uint64_t)v10);
        }
      }
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __RKEntityUUIDComponent()
{
  return &protocol witness table for __RKEntityUUIDComponent.Registration;
}

uint64_t sub_227F40338@<X0>(uint64_t a1@<X8>)
{
  return Entity.__interactionIdentifier.getter(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for __RKEntityUUIDComponent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t destroy for __RKEntityUUIDComponent()
{
  return swift_release();
}

uint64_t assignWithCopy for __RKEntityUUIDComponent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(a1 + 15) = *(unsigned char *)(a2 + 15);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for __RKEntityUUIDComponent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityUUIDComponent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityUUIDComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityUUIDComponent()
{
  return &type metadata for __RKEntityUUIDComponent;
}

uint64_t type metadata accessor for __RKEntityUUIDComponent.Registration()
{
  return self;
}

uint64_t method lookup function for __RKEntityUUIDComponent.Registration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityUUIDComponent.Registration);
}

unint64_t lazy protocol witness table accessor for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityUUIDComponent.Registration.RegistrationError and conformance __RKEntityUUIDComponent.Registration.RegistrationError);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:)()
{
  return implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:)();
}

uint64_t partial apply for implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:)()
{
  return implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:)();
}

uint64_t type metadata accessor for SyncInfoContext.Buffer()
{
  uint64_t result = type metadata singleton initialization cache for SyncInfoContext.Buffer;
  if (!type metadata singleton initialization cache for SyncInfoContext.Buffer) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of SyncInfoContext.Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SyncInfoContext.Buffer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of SyncInfoContext.Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SyncInfoContext.Buffer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SyncInfoContext.Buffer(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SyncInfoContext.Buffer();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for SyncInfoContext.Buffer(unsigned char *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    *((unsigned char *)v4 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t destroy for SyncInfoContext.Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

unsigned char *initializeWithCopy for SyncInfoContext.Buffer(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *assignWithCopy for SyncInfoContext.Buffer(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *initializeWithTake for SyncInfoContext.Buffer(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *assignWithTake for SyncInfoContext.Buffer(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for SyncInfoContext.Buffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_227F40B2C);
}

uint64_t sub_227F40B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for SyncInfoContext.Buffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_227F40BB0);
}

uint64_t sub_227F40BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for SyncInfoContext.Buffer()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityUUIDComponent.Registration.RegistrationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227F40D5CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityUUIDComponent.Registration.RegistrationError()
{
  return &type metadata for __RKEntityUUIDComponent.Registration.RegistrationError;
}

uint64_t type metadata completion function for _OrderedCoatCheckBagRef()
{
  return swift_initClassMetadata2();
}

uint64_t _OrderedCoatCheckBagRef.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t _OrderedCoatCheckBagRef.asPointer()()
{
  return v0;
}

uint64_t _OrderedCoatCheckBagRef.append(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  type metadata accessor for OrderedCoatCheckBag.Ticket();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v38 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v36 = (void (*)(char *, uint64_t, uint64_t, __n128))((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (void **)((char *)&v35 - v8);
  MEMORY[0x270FA5388](v10);
  uint64_t v35 = (void **)((char *)&v35 - v11);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (void **)((char *)&v35 - v13);
  __n128 v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (void **)((char *)&v35 - v17);
  uint64_t v19 = *(void *)(v2 + 24);
  uint64_t v40 = v20;
  uint64_t v21 = (char *)&v35 + *(int *)(v20 + 48) - v17;
  *uint64_t v18 = v19;
  v18[1] = v2;
  unint64_t v37 = (char *)&v35 - v17;
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16);
  v23(v21, a1, v4, v16);
  uint64_t v39 = v2 + 16;
  swift_beginAccess();
  if (!*(void *)(v2 + 16))
  {
LABEL_4:
    uint64_t v24 = v40;
    *(void *)(v2 + 16) = MEMORY[0x22A689A60](v40);
    swift_release();
    uint64_t v27 = *(int *)(v24 + 48);
    void *v14 = v19;
    v14[1] = v2;
    uint64_t v28 = (char *)v14 + v27;
    ((void (*)(void))v23)();
    unint64_t v29 = v35;
    uint64_t v30 = (char *)v35 + *(int *)(v24 + 48);
    *uint64_t v35 = v19;
    v29[1] = v2;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v30, v28, v4);
    uint64_t result = swift_beginAccess();
    if (!*(void *)(v2 + 16)) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  uint64_t v24 = v40;
  uint64_t v14 = (void *)((char *)v9 + *(int *)(v40 + 48));
  *uint64_t v9 = v19;
  v9[1] = v2;
  ((void (*)(void *, char *, uint64_t))v23)(v14, v21, v4);
  uint64_t v23 = v36;
  Swift::String v25 = (char *)v36 + *(int *)(v24 + 48);
  *(void *)unint64_t v36 = v19;
  *((void *)v23 + 1) = v2;
  Swift::String v26 = *(void (**)(char *, void *, uint64_t))(v22 + 32);
  v22 += 32;
  v26(v25, v14, v4);
  uint64_t v4 = v39;
  swift_beginAccess();
  if (!*(void *)(v2 + 16))
  {
    __break(1u);
    goto LABEL_4;
  }
LABEL_5:
  type metadata accessor for ContiguousArray();
  ContiguousArray.append(_:)();
  swift_endAccess();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v37, v24);
  uint64_t v32 = *(void *)(v2 + 24);
  BOOL v33 = __OFADD__(v32, 1);
  uint64_t v34 = v32 + 1;
  if (!v33)
  {
    *(void *)(v2 + 24) = v34;
    return v19;
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t _OrderedCoatCheckBagRef.remove(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v62 = a1;
  uint64_t v7 = *(void *)(*v4 + 80);
  type metadata accessor for OrderedCoatCheckBag.Ticket();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void (***)(void *, uint64_t))(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v56 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v55 = (char *)v51 - v12;
  MEMORY[0x270FA5388](v13);
  int v61 = (char *)v51 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (void *)((char *)v51 - v16);
  uint64_t v18 = swift_getTupleTypeMetadata2();
  uint64_t v67 = type metadata accessor for Optional();
  int64_t v64 = *(void (***)(char *, char *, uint64_t))(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v66 = (char *)v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v51 - v22;
  if (a2 == v4)
  {
    uint64_t v24 = *(void *)(v7 - 8);
    uint64_t v25 = v24;
    int64_t v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v24 + 56);
    uint64_t v53 = v24 + 56;
    v54(a3, 1, 1, v7, v21);
    uint64_t v57 = v4 + 2;
    uint64_t result = swift_beginAccess();
    uint64_t v27 = v4[2];
    if (v27)
    {
      uint64_t v58 = v9;
      uint64_t v68 = v7;
      int64_t v52 = a3;
      uint64_t v70 = v27;
      uint64_t v28 = type metadata accessor for ContiguousArray();
      swift_retain();
      swift_getWitnessTable();
      if (Collection.isEmpty.getter()) {
        goto LABEL_17;
      }
      uint64_t v70 = v27;
      uint64_t WitnessTable = swift_getWitnessTable();
      MEMORY[0x22A688D00](v69, v28, WitnessTable);
      swift_release();
      v69[3] = v69[0];
      type metadata accessor for EnumeratedSequence();
      EnumeratedSequence.makeIterator()();
      v51[1] = v28;
      uint64_t v30 = type metadata accessor for EnumeratedSequence.Iterator();
      v64 += 4;
      uint64_t v65 = v30;
      uint64_t v63 = v18 - 8;
      uint64_t v31 = (void (**)(char *, char *, uint64_t))(v25 + 32);
      ++v58;
      uint64_t v59 = v23;
      for (i = v18; ; uint64_t v18 = i)
      {
        uint64_t v32 = v66;
        EnumeratedSequence.Iterator.next()();
        (*v64)(v23, v32, v67);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v23, 1, v18) == 1) {
          return swift_release();
        }
        BOOL v33 = &v23[*(int *)(v18 + 48)];
        uint64_t v34 = v4;
        uint64_t v35 = *(void *)v33;
        unint64_t v36 = (void *)*((void *)v33 + 1);
        uint64_t v37 = *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v38 = &v33[v37];
        uint64_t v39 = v61;
        uint64_t v40 = &v61[v37];
        *(void *)int v61 = v35;
        *((void *)v39 + 1) = v36;
        uint64_t v41 = *v31;
        uint64_t v42 = v68;
        (*v31)(&v39[v37], v38, v68);
        uint64_t v43 = (char *)v17 + *(int *)(TupleTypeMetadata2 + 48);
        *uint64_t v17 = v35;
        v17[1] = v36;
        v41(v43, v40, v42);
        BOOL v44 = v35 == v62;
        uint64_t v4 = v34;
        BOOL v44 = v44 && v36 == v34;
        if (v44)
        {
          uint64_t v45 = v57;
          swift_beginAccess();
          if (!*v45)
          {
            __break(1u);
            goto LABEL_17;
          }
          Swift::String v46 = &v55[*(int *)(TupleTypeMetadata2 + 48)];
          ContiguousArray.remove(at:)();
          swift_endAccess();
          (*v58)(v17, TupleTypeMetadata2);
          uint64_t v47 = v68;
          uint64_t v48 = type metadata accessor for Optional();
          uint64_t v49 = v52;
          (*(void (**)(char *, uint64_t))(*(void *)(v48 - 8) + 8))(v52, v48);
          unint64_t v50 = &v56[*(int *)(TupleTypeMetadata2 + 48)];
          v41(v50, v46, v47);
          v41(v49, v50, v47);
          ((void (*)(char *, void, uint64_t, uint64_t))v54)(v49, 0, 1, v47);
        }
        else
        {
          (*v58)(v17, TupleTypeMetadata2);
        }
        uint64_t v23 = v59;
      }
    }
  }
  else
  {
LABEL_17:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

BOOL static OrderedCoatCheckBag.Ticket.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

uint64_t _OrderedCoatCheckBagRef.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _OrderedCoatCheckBagRef()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for OrderedCoatCheckBag()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for OrderedCoatCheckBag.Ticket()
{
  return __swift_instantiateGenericMetadata();
}

void OrderedCoatCheckBag.Ticket.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int OrderedCoatCheckBag.Ticket.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OrderedCoatCheckBag<A>.Ticket()
{
  return OrderedCoatCheckBag.Ticket.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance OrderedCoatCheckBag<A>.Ticket(int a1)
{
  OrderedCoatCheckBag.Ticket.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OrderedCoatCheckBag<A>.Ticket()
{
  Hasher.init(_seed:)();
  OrderedCoatCheckBag.Ticket.hash(into:)((int)&v2, *v0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance OrderedCoatCheckBag<A>.Ticket(uint64_t *a1, uint64_t *a2)
{
  return static OrderedCoatCheckBag.Ticket.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t base witness table accessor for Equatable in OrderedCoatCheckBag<A>.Ticket()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedCoatCheckBag<A>()
{
  return swift_getWitnessTable();
}

uint64_t OrderedCoatCheckBag._checkForSharedOwnership()()
{
  uint64_t v1 = *v0;
  type metadata accessor for _OrderedCoatCheckBagRef();
  if (v1)
  {
    uint64_t result = isKnownUniquelyReferenced<A>(_:)();
    if (result) {
      return result;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *uint64_t v0 = result;
  return result;
}

uint64_t OrderedCoatCheckBag.append(_:)(uint64_t a1)
{
  uint64_t result = OrderedCoatCheckBag._checkForSharedOwnership()();
  if (*v1) {
    return _OrderedCoatCheckBagRef.append(_:)(a1);
  }
  __break(1u);
  return result;
}

uint64_t OrderedCoatCheckBag.remove(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t result = OrderedCoatCheckBag._checkForSharedOwnership()();
  if (*v3) {
    return _OrderedCoatCheckBagRef.remove(_:)(a1, a2, a3);
  }
  __break(1u);
  return result;
}

void _OrderedCoatCheckBagRef.debugDescription.getter()
{
  uint64_t v1 = *(void *)(*v0 + 80);
  type metadata accessor for OrderedCoatCheckBag.Ticket();
  uint64_t v32 = v1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v31 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v4 = (void *)((char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v5);
  unint64_t v29 = (char *)v24 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v30 = (char *)v24 - v8;
  swift_beginAccess();
  uint64_t v9 = v0[2];
  if (v9)
  {
    uint64_t v34 = 0;
    unint64_t v35 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    uint64_t v34 = 0x6E756F6328676142;
    unint64_t v35 = 0xEB00000000203A74;
    v33._uint64_t countAndFlagsBits = ContiguousArray.count.getter();
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 0x6E65746E6F63202CLL;
    v11._object = (void *)0xED00005B203A7374;
    String.append(_:)(v11);
    uint64_t v28 = *(void *)(v9 + 16);
    if (v28)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v32;
      uint64_t v26 = v9 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
      uint64_t v27 = v9;
      uint64_t v14 = v31;
      uint64_t v25 = &v30[*(int *)(TupleTypeMetadata2 + 48)];
      v24[1] = v32 - 8;
      _DWORD v24[2] = v31 + 16;
      v24[0] = v31 + 8;
      uint64_t v15 = v29;
      while (v12 < *(void *)(v9 + 16))
      {
        uint64_t v16 = v30;
        (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v30, v26 + *(void *)(v14 + 72) * v12++, TupleTypeMetadata2);
        uint64_t v18 = *(void *)v16;
        uint64_t v17 = *((void *)v16 + 1);
        uint64_t v19 = (char *)v15 + *(int *)(TupleTypeMetadata2 + 48);
        *uint64_t v15 = v18;
        v15[1] = v17;
        uint64_t v20 = *(void *)(v13 - 8);
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v19, v25, v13);
        v33._uint64_t countAndFlagsBits = 0;
        v33._object = (void *)0xE000000000000000;
        __n128 v21 = (char *)v4 + *(int *)(TupleTypeMetadata2 + 48);
        *uint64_t v4 = v18;
        v4[1] = v17;
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v21, v19, v13);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        uint64_t v22 = *(void (**)(void *, uint64_t))(v14 + 8);
        v22(v4, TupleTypeMetadata2);
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v22(v15, TupleTypeMetadata2);
        uint64_t v9 = v27;
        if (v28 == v12) {
          goto LABEL_6;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_6:
      swift_release();
      v23._uint64_t countAndFlagsBits = 10589;
      v23._object = (void *)0xE200000000000000;
      String.append(_:)(v23);
    }
  }
}

void protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _OrderedCoatCheckBagRef<A>()
{
}

void OrderedCoatCheckBag.debugDescription.getter(uint64_t a1)
{
  if (a1) {
    _OrderedCoatCheckBagRef.debugDescription.getter();
  }
}

void protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OrderedCoatCheckBag<A>()
{
  OrderedCoatCheckBag.debugDescription.getter(*v0);
}

uint64_t _OrderedCoatCheckBagRef.makeIterator()()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = v0[2];
  if (v2)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    uint64_t v4 = *(void *)(v1 + 80);
    type metadata accessor for OrderedCoatCheckBag.Ticket();
    swift_retain();
    swift_getTupleTypeMetadata2();
    uint64_t v5 = ContiguousArray.count.getter();
    uint64_t v6 = (void *)swift_allocObject();
    long long v6[2] = v4;
    v6[3] = v3;
    void v6[4] = v5;
    uint64_t v6[5] = v2;
  }
  else
  {
    *(void *)(swift_allocObject() + 16) = *(void *)(v1 + 80);
  }
  return AnyIterator.init(_:)();
}

uint64_t closure #2 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  type metadata accessor for OrderedCoatCheckBag.Ticket();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  Swift::String v10 = &v14[-v9];
  Swift::String v11 = (void *)(a1 + 16);
  swift_beginAccess();
  if (*(void *)(a1 + 16) >= a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, 1, 1, a3);
  }
  ContiguousArray.subscript.getter();
  uint64_t v12 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32))(a4, &v10[*(int *)(TupleTypeMetadata2 + 48)], a3);
  uint64_t result = swift_beginAccess();
  if (__OFADD__(*v11, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v11;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a4, 0, 1, a3);
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _OrderedCoatCheckBagRef<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = _OrderedCoatCheckBagRef.makeIterator()();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _OrderedCoatCheckBagRef<A>()
{
  type metadata accessor for _OrderedCoatCheckBagRef();
  uint64_t v0 = specialized Sequence._copyToContiguousArray()();
  swift_release();
  return v0;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance _OrderedCoatCheckBagRef<A>()
{
  type metadata accessor for _OrderedCoatCheckBagRef();

  JUMPOUT(0x22A688D10);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _OrderedCoatCheckBagRef<A>()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t OrderedCoatCheckBag.makeIterator()(uint64_t a1, uint64_t a2)
{
  if (a1) {
    return _OrderedCoatCheckBagRef.makeIterator()();
  }
  *(void *)(swift_allocObject() + 16) = a2;

  return AnyIterator.init(_:)();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance OrderedCoatCheckBag<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = OrderedCoatCheckBag.makeIterator()(*v2, *(void *)(a1 + 16));
  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

uint64_t specialized Sequence._copyToContiguousArray()()
{
  return MEMORY[0x270F9FA28]();
}

uint64_t sub_227F424B4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227F424C8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227F424D8()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #2 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in _OrderedCoatCheckBagRef.makeIterator()(v1[3], v1[4], v1[2], a1);
}

uint64_t sub_227F42524()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in _OrderedCoatCheckBagRef.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v1 + 16) - 8) + 56))(a1, 1, 1);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v5;
    uint64_t *v5 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
    uint64_t *v5 = v18;
  }
  else
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a5);
    if ((v14 & 1) == 0) {
      return result;
    }
    unint64_t v15 = result;
    int v16 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v5;
    uint64_t v19 = *v6;
    *uint64_t v6 = 0x8000000000000000;
    if (!v16)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v17 = v19;
    }
    specialized _NativeDictionary._delete(at:)(v15, v17);
    *uint64_t v6 = v17;
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of BindableDataInternal((long long *)a1, (uint64_t)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v12[0] = *v2;
    uint64_t *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = *(void *)&v12[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for ActionHandlerProtocol?);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      *(void *)&v13[0] = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = *(void *)&v13[0];
      }
      outlined init with take of BindableDataInternal((long long *)(*(void *)(v11 + 56) + 40 * v9), (uint64_t)v12);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      uint64_t *v3 = v11;
      swift_bridgeObjectRelease();
      outlined init with take of BindableDataInternal(v12, (uint64_t)v13);
    }
    else
    {
      uint64_t v14 = 0;
      memset(v13, 0, sizeof(v13));
    }
    return outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for ActionHandlerProtocol?);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v6 - 8);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = type metadata accessor for UUID();
  char v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(a1, 1, v9, v11) == 1)
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for UUID?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    return outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v13, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v17;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt a2)
{
  uint64_t v3 = v2;
  if (*(unsigned char *)(a1 + 8))
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>?);
    uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v6)
    {
      unint64_t v7 = v5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v9 = *v2;
      uint64_t v13 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v9 = v13;
      }
      outlined init with take of Transform?(*(void *)(v9 + 56) + 8 * v7, (uint64_t)&v12, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
      specialized _NativeDictionary._delete(at:)(v7, v9);
      uint64_t *v3 = v9;
      swift_bridgeObjectRelease();
      outlined init with take of Transform?((uint64_t)&v12, (uint64_t)&v13, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
      char v14 = 0;
    }
    else
    {
      uint64_t v13 = 0;
      char v14 = 1;
    }
    return outlined destroy of BodyTrackingComponent?((uint64_t)&v13, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>?);
  }
  else
  {
    outlined init with take of Transform?(a1, (uint64_t)&v13, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
    char v10 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v13, a2, v10);
    uint64_t *v2 = v12;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of BodyTrackingComponent?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v7);
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return outlined release of REEventBus.DispatcherHandle((uint64_t)a2);
}

uint64_t specialized Dictionary.subscript.setter(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = a1[1] == 1;
  }
  if (v5)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for __RKEntityAction.ActionStateObservation?);
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v9)
    {
      unint64_t v10 = v8;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = *v2;
      uint64_t v14 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v12 = v14;
      }
      outlined init with take of __RKEntityAction.ActionStateObservation(*(void *)(v12 + 56) + 16 * v10, (uint64_t)&v15);
      specialized _NativeDictionary._delete(at:)(v10, v12);
      uint64_t *v3 = v12;
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v15 = xmmword_228323FE0;
    }
    return outlined destroy of BodyTrackingComponent?((uint64_t)&v15, &demangling cache variable for type metadata for __RKEntityAction.ActionStateObservation?);
  }
  else
  {
    outlined init with take of __RKEntityAction.ActionStateObservation((uint64_t)a1, (uint64_t)&v15);
    char v6 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v15, a2, v6);
    uint64_t *v2 = v13;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadTrace?);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  uint64_t v10 = *(void *)(Trace - 8);
  __n128 v11 = MEMORY[0x270FA5388](Trace);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 48))(a1, 1, Trace, v11) == 1)
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for LoadTrace?);
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v15)
    {
      unint64_t v16 = v14;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v18 = *v3;
      uint64_t v22 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v18 = v22;
      }
      outlined init with take of LoadTrace(*(void *)(v18 + 56) + *(void *)(v10 + 72) * v16, (uint64_t)v8);
      specialized _NativeDictionary._delete(at:)(v16, v18);
      uint64_t *v3 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, Trace);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, Trace);
    }
    return outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for LoadTrace?);
  }
  else
  {
    outlined init with take of LoadTrace(a1, (uint64_t)v13);
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, v19);
    uint64_t *v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of BindableDataInternal((long long *)a1, (uint64_t)v18);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    uint64_t v9 = v19;
    uint64_t v10 = v20;
    uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v18, v19);
    __n128 v12 = MEMORY[0x270FA5388](v11);
    unint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    (*(void (**)(unsigned char *, __n128))(v15 + 16))(v14, v12);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, a3, a4 & 0x101, isUniquelyReferenced_nonNull_native, &v17, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    *uint64_t v4 = v17;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for MeshBufferErased?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, a4 & 0x101, (uint64_t)v18);
    swift_bridgeObjectRelease();
    return outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for MeshBufferErased?);
  }
}

uint64_t __RKEntityAction.init(targetEntity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  *(_OWORD *)(v1 + 16) = 0u;
  uint64_t v4 = v1 + 16;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  uint64_t v5 = MEMORY[0x263F8EE80];
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 48) = v5;
  *(_DWORD *)(v4 + 71) = 0;
  *(_WORD *)(v4 + 88) = 257;
  swift_beginAccess();
  *(void *)uint64_t v4 = a1;
  swift_retain();
  swift_release();
  if (!a1) {
    goto LABEL_10;
  }
  swift_retain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_9:
    swift_release_n();
LABEL_10:
    uint64_t v10 = 0;
    goto LABEL_11;
  }
  uint64_t v7 = SceneNullable;
  id v8 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v8)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v7);
  }
  if (!RESceneGetECSManagerNullable())
  {
    swift_release();
    goto LABEL_9;
  }
  uint64_t ServiceLocator = REECSManagerGetServiceLocator();
  uint64_t v10 = MEMORY[0x22A692270](ServiceLocator);
  swift_release();
  swift_release_n();
LABEL_11:
  *(void *)(v2 + 24) = v10;
  return v2;
}

uint64_t __RKEntityAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  return v0;
}

uint64_t __RKEntityAction.targetEntity.getter()
{
  return swift_retain();
}

uint64_t __RKEntityAction.targetEntity.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*__RKEntityAction.targetEntity.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAction.completionHandler.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 72);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t __RKEntityAction.completionHandler.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 72);
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
}

uint64_t (*__RKEntityAction.completionHandler.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAction.isExclusive.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t __RKEntityAction.isExclusive.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 89) = a1;
  return result;
}

uint64_t (*__RKEntityAction.isExclusive.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAction.exclusiveBlocksForCompletion.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 90);
}

uint64_t __RKEntityAction.exclusiveBlocksForCompletion.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 90) = a1;
  return result;
}

uint64_t (*__RKEntityAction.exclusiveBlocksForCompletion.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

Swift::Bool __swiftcall __RKEntityAction.runningExclusiveAndBlocksForCompletion()()
{
  swift_beginAccess();
  Swift::Bool result = 0;
  if (*(unsigned char *)(v0 + 104) == 1 && *(void *)(v0 + 96) == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v0 + 89) == 1)
    {
      swift_beginAccess();
      if (*(unsigned char *)(v0 + 90)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t __RKEntityAction.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  char v4 = *(unsigned char *)(v1 + 104);
  *(void *)a1 = *(void *)(v1 + 96);
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t __RKEntityAction.state.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 96);
  char v5 = *(unsigned char *)(v1 + 104);
  *(void *)(v1 + 96) = v2;
  *(unsigned char *)(v1 + 104) = v3;
  uint64_t v7 = v4;
  char v8 = v5;
  return __RKEntityAction.state.didset((uint64_t)&v7);
}

void (*__RKEntityAction.state.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v3[3] = *(void *)(v1 + 96);
  *((unsigned char *)v3 + 32) = *(unsigned char *)(v1 + 104);
  return __RKEntityAction.state.modify;
}

void __RKEntityAction.state.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 40);
  char v3 = *(unsigned char *)(*(void *)a1 + 32);
  uint64_t v4 = *(void *)(v2 + 96);
  char v5 = *(unsigned char *)(v2 + 104);
  *(void *)(v2 + 96) = *(void *)(*(void *)a1 + 24);
  *(unsigned char *)(v2 + 104) = v3;
  uint64_t v6 = v4;
  char v7 = v5;
  __RKEntityAction.state.didset((uint64_t)&v6);

  free(v1);
}

uint64_t __RKEntityAction.multiplePerformBehaviour.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 105);
  return result;
}

uint64_t __RKEntityAction.multiplePerformBehaviour.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 105) = v2;
  return result;
}

uint64_t (*__RKEntityAction.multiplePerformBehaviour.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAction.performAction(with:)(void *a1)
{
  char v2 = (unsigned char *)*a1;
  uint64_t v3 = a1[1];
  swift_beginAccess();
  if (v2[18] == 1)
  {
    uint64_t result = swift_beginAccess();
    if (v1[88] != 1) {
      return result;
    }
    v13[0] = v2;
    v13[1] = v3;
    char v5 = *(void (**)(void *))(*(void *)v1 + 408);
    swift_retain();
    v5(v13);
    v2[18] = 0;
  }
  else
  {
    swift_beginAccess();
    if (v2[16] == 1)
    {
      swift_beginAccess();
      if (v2[17])
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 432);
        uint64_t v7 = swift_retain();
        uint64_t v8 = v6(v7);
        if (v8)
        {
          uint64_t v11 = v2;
          uint64_t v12 = v3;
          (*(void (**)(unsigned char **))(*(void *)v8 + 408))(&v11);
          swift_release();
        }
        v2[17] = 0;
      }
      else
      {
        uint64_t v11 = v2;
        uint64_t v12 = v3;
        uint64_t v10 = *(void (**)(unsigned char **))(*(void *)v1 + 408);
        swift_retain();
        v10(&v11);
        v2[17] = 1;
      }
    }
    else
    {
      uint64_t result = swift_beginAccess();
      if (v1[88]) {
        return result;
      }
      uint64_t v11 = v2;
      uint64_t v12 = v3;
      uint64_t v9 = *(void (**)(unsigned char **))(*(void *)v1 + 408);
      swift_retain();
      v9(&v11);
    }
  }
  return swift_release();
}

BOOL __RKEntityAction.shouldContinueOnPerform(with:)()
{
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 104) == 1 && *(void *)(v0 + 96) == 1 && (swift_beginAccess(), *(unsigned char *)(v0 + 105) == 1)) {
    return 0;
  }
  else {
    return RESceneGetECSManagerNullable() != 0;
  }
}

uint64_t __RKEntityAction.addStateObserver(_:)(uint64_t a1, uint64_t a2)
{
  v4[1] = a2;
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  specialized Dictionary.subscript.setter(v4, a1);
  return swift_endAccess();
}

uint64_t __RKEntityAction.removeStateObserver(_:)(uint64_t a1)
{
  swift_beginAccess();
  specialized Dictionary.removeValue(forKey:)(a1, &v3);
  swift_endAccess();
  return outlined destroy of BodyTrackingComponent?((uint64_t)&v3, &demangling cache variable for type metadata for __RKEntityAction.ActionStateObservation?);
}

uint64_t __RKEntityAction.description.getter()
{
  swift_beginAccess();
  if (*(void *)(v0 + 16))
  {
    swift_retain();
    REEntityGetName();
    uint64_t v1 = String.init(cString:)();
    long long v3 = v2;
    swift_release();
  }
  else
  {
    uint64_t v1 = 0;
    long long v3 = (void *)0xE000000000000000;
  }
  uint64_t v4 = _typeName(_:qualified:)();
  v5._uint64_t countAndFlagsBits = v1;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = 0x3A74656772617420;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x3A657461747320;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Bool __swiftcall __RKEntityAction.stop()()
{
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 104) != 1 || *(void *)(v0 + 96) != 1) {
    return 0;
  }
  *(void *)(v0 + 96) = 3;
  Swift::Bool v1 = 1;
  *(unsigned char *)(v0 + 104) = 1;
  uint64_t v3 = 1;
  char v4 = 1;
  __RKEntityAction.state.didset((uint64_t)&v3);
  return v1;
}

BOOL __RKEntityAction.isExclusiveWith(action:)(uint64_t a1)
{
  BOOL result = 0;
  if (v1 != a1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 89) == 1)
    {
      swift_beginAccess();
      if (*(unsigned char *)(a1 + 89)) {
        return 1;
      }
    }
  }
  return result;
}

double specialized Dictionary.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v6)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }
    outlined init with take of __RKEntityAction.ActionStateObservation(*(void *)(v9 + 56) + 16 * v7, (uint64_t)a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = xmmword_228323FE0;
  }
  return result;
}

uint64_t specialized Dictionary.removeValue(forKey:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v6)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v19 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v19;
    }
    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t Trace = type metadata accessor for LoadTrace(0);
    uint64_t v18 = *(void *)(Trace - 8);
    outlined init with take of LoadTrace(v10 + *(void *)(v18 + 72) * v7, a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    uint64_t v15 = Trace;
  }
  else
  {
    uint64_t v16 = type metadata accessor for LoadTrace(0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v15 = v16;
    uint64_t v13 = a2;
    uint64_t v14 = 1;
  }

  return v12(v13, v14, 1, v15);
}

RealityKit::__RKEntityActionMultiplePerformBehavior_optional __swiftcall __RKEntityActionMultiplePerformBehavior.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  char v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionMultiplePerformBehavior.init(rawValue:), v3);
  result.CGColorRef value = swift_bridgeObjectRelease();
  char v7 = 3;
  if (v5 < 3) {
    char v7 = v5;
  }
  *char v4 = v7;
  return result;
}

void *static __RKEntityActionMultiplePerformBehavior.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityActionMultiplePerformBehavior.allCases.getter;
}

uint64_t __RKEntityActionMultiplePerformBehavior.rawValue.getter()
{
  unint64_t v1 = 0x722065726F6E6769;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000014;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x657220776F6C6C61;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityActionMultiplePerformBehavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityActionMultiplePerformBehavior()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityActionMultiplePerformBehavior()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityActionMultiplePerformBehavior()
{
  return Hasher._finalize()();
}

RealityKit::__RKEntityActionMultiplePerformBehavior_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityActionMultiplePerformBehavior(Swift::String *a1)
{
  return __RKEntityActionMultiplePerformBehavior.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityActionMultiplePerformBehavior(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xED00007473657571;
  unint64_t v4 = 0xEE00747365757165;
  unint64_t v5 = 0x722065726F6E6769;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000014;
    unint64_t v4 = 0x800000022834DAE0;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x657220776F6C6C61;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityActionMultiplePerformBehavior()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityActionMultiplePerformBehavior()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityActionMultiplePerformBehavior(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityActionMultiplePerformBehavior;
}

uint64_t __RKEntityActionContext.trigger.getter()
{
  return swift_retain();
}

uint64_t __RKEntityActionContext.trigger.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *unint64_t v1 = a1;
  return result;
}

uint64_t (*__RKEntityActionContext.trigger.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionContext.scene.getter()
{
  return swift_retain();
}

uint64_t __RKEntityActionContext.scene.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*__RKEntityActionContext.scene.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionContext.init(trigger:scene:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t __RKEntityAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  __RKEntityAction.init(targetEntity:)(a1);
  return v2;
}

uint64_t __RKEntityAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  return swift_deallocClassInstance();
}

uint64_t key path setter for __RKEntityAction.targetEntity : __RKEntityAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  swift_retain();
  return swift_release();
}

uint64_t key path getter for __RKEntityAction.completionHandler : __RKEntityAction@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(void *)(v3 + 80);
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v6;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
}

uint64_t key path setter for __RKEntityAction.completionHandler : __RKEntityAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 72);
  *(void *)(v7 + 72) = v6;
  *(void *)(v7 + 80) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t key path setter for __RKEntityAction.state : __RKEntityAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *a2;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 96);
  char v6 = *(unsigned char *)(v4 + 104);
  *(void *)(v4 + 96) = v2;
  *(unsigned char *)(v4 + 104) = v3;
  uint64_t v8 = v5;
  char v9 = v6;
  return __RKEntityAction.state.didset((uint64_t)&v8);
}

uint64_t __RKEntityAction.state.didset(uint64_t a1)
{
  double v2 = v1;
  double v3 = *(double *)a1;
  int v4 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v5 = (void *)(*(void *)&v1 + 96);
  uint64_t result = swift_beginAccess();
  double v7 = *(double *)(*(void *)&v2 + 96);
  char v8 = *(unsigned char *)(*(void *)&v2 + 104);
  int v53 = v4;
  if (v4 == 1)
  {
    switch(*(void *)&v3)
    {
      case 1:
        if (*(void *)&v7 != 1) {
          char v8 = 0;
        }
        if ((v8 & 1) == 0) {
          goto LABEL_26;
        }
        return result;
      case 2:
        if (*(void *)&v7 != 2) {
          char v8 = 0;
        }
        if ((v8 & 1) == 0) {
          goto LABEL_26;
        }
        return result;
      case 3:
        if (*(void *)&v7 != 3) {
          char v8 = 0;
        }
        if ((v8 & 1) == 0) {
          goto LABEL_26;
        }
        return result;
      case 4:
        if (*(void *)&v7 <= 3uLL) {
          char v8 = 0;
        }
        if ((v8 & 1) == 0) {
          goto LABEL_26;
        }
        return result;
      default:
        if (v7 != 0.0) {
          char v8 = 0;
        }
        if ((v8 & 1) == 0) {
          goto LABEL_26;
        }
        return result;
    }
  }
  if (v3 != v7) {
    char v8 = 1;
  }
  if (v8)
  {
LABEL_26:
    uint64_t v49 = v5;
    uint64_t v60 = 0;
    v61[0] = 0xE000000000000000;
    double v58 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v9._uint64_t countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 8285;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 8250;
    v12._object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    uint64_t v13 = swift_release();
    MEMORY[0x270FA5388](v13);
    double v14 = v3;
    *(double *)&long long v45[2] = v3;
    char v46 = v53;
    double v47 = v2;
    v62[0] = v15;
    v62[1] = 0xE100000000000000;
    uint64_t v16 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v16, v62, partial apply for implicit closure #1 in __RKEntityAction.state.didset, v45);
    swift_bridgeObjectRelease();
    uint64_t v17 = (uint64_t *)(*(void *)&v2 + 64);
    swift_beginAccess();
    uint64_t v18 = *(void *)(*(void *)&v2 + 64);
    uint64_t v19 = *(void *)(v18 + 64);
    uint64_t v51 = v18 + 64;
    uint64_t v20 = 1 << *(unsigned char *)(v18 + 32);
    uint64_t v21 = -1;
    if (v20 < 64) {
      uint64_t v21 = ~(-1 << v20);
    }
    unint64_t v22 = v21 & v19;
    int64_t v52 = (unint64_t)(v20 + 63) >> 6;
    int64_t v48 = v52 - 1;
    swift_bridgeObjectRetain();
    int64_t v23 = 0;
    long long v50 = xmmword_228323FE0;
    while (v22)
    {
      unint64_t v28 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v29 = v28 | (v23 << 6);
LABEL_34:
      uint64_t v30 = *(void *)(v18 + 56);
      double v58 = *(double *)(*(void *)(v18 + 48) + 8 * v29);
      outlined init with copy of __RKEntityAction.ActionStateObservation(v30 + 16 * v29, (uint64_t)v59);
LABEL_59:
      outlined init with take of Transform?((uint64_t)&v58, (uint64_t)&v60, &demangling cache variable for type metadata for (key: ObjectIdentifier, value: __RKEntityAction.ActionStateObservation)?);
      if (!v61[0] && v61[1] == 1)
      {
        uint64_t result = swift_release();
        if (*(unsigned char *)(*(void *)&v2 + 104) == 1 && *v49 >= 2uLL)
        {
          uint64_t v39 = *(void (**)(uint64_t))(*(void *)&v2 + 32);
          if (v39)
          {
            *(void *)(*(void *)&v2 + 32) = 0;
            *(void *)(*(void *)&v2 + 40) = 0;
            swift_retain();
            uint64_t v40 = outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v39);
            v39(v40);
            outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v39);
          }
          uint64_t result = swift_beginAccess();
          uint64_t v41 = *(void (**)(uint64_t))(*(void *)&v2 + 72);
          if (v41)
          {
            if (*(void *)(*(void *)&v2 + 96) == 2) {
              uint64_t v42 = *(unsigned __int8 *)(*(void *)&v2 + 104);
            }
            else {
              uint64_t v42 = 0;
            }
            swift_retain();
            v41(v42);
            uint64_t result = outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v41);
          }
          uint64_t v43 = *(void (**)(uint64_t))(*(void *)&v2 + 48);
          if (v43)
          {
            uint64_t v44 = swift_retain();
            v43(v44);
            return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v43);
          }
        }
        return result;
      }
      uint64_t v24 = v60;
      outlined init with take of __RKEntityAction.ActionStateObservation((uint64_t)v61, (uint64_t)v56);
      if (MEMORY[0x22A696620](v56))
      {
        uint64_t v25 = v57;
        Objectint Type = swift_getObjectType();
        double v58 = v14;
        LOBYTE(v59[0]) = v53;
        char v27 = *(unsigned char *)(*(void *)&v2 + 104);
        *(void *)&long long v55 = *(void *)(*(void *)&v2 + 96);
        BYTE8(v55) = v27;
        (*(void (**)(double, double *, long long *, uint64_t, uint64_t))(v25 + 8))(COERCE_DOUBLE(*(void *)&v2), &v58, &v55, ObjectType, v25);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_beginAccess();
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v24);
        if (v34)
        {
          unint64_t v35 = v33;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v37 = *v17;
          uint64_t v54 = *v17;
          *uint64_t v17 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v37 = v54;
          }
          outlined init with take of __RKEntityAction.ActionStateObservation(*(void *)(v37 + 56) + 16 * v35, (uint64_t)&v55);
          specialized _NativeDictionary._delete(at:)(v35, v37);
          *uint64_t v17 = v37;
          swift_bridgeObjectRelease();
        }
        else
        {
          long long v55 = v50;
        }
        swift_endAccess();
        outlined destroy of BodyTrackingComponent?((uint64_t)&v55, &demangling cache variable for type metadata for __RKEntityAction.ActionStateObservation?);
      }
      outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?((uint64_t)v56);
    }
    int64_t v31 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_74:
      __break(1u);
      JUMPOUT(0x227F44EE4);
    }
    if (v31 >= v52) {
      goto LABEL_58;
    }
    unint64_t v32 = *(void *)(v51 + 8 * v31);
    if (!v32)
    {
      int64_t v38 = v23 + 2;
      ++v23;
      if (v31 + 1 >= v52) {
        goto LABEL_58;
      }
      unint64_t v32 = *(void *)(v51 + 8 * v38);
      if (!v32)
      {
        int64_t v23 = v31 + 1;
        if (v31 + 2 >= v52) {
          goto LABEL_58;
        }
        unint64_t v32 = *(void *)(v51 + 8 * (v31 + 2));
        if (v32)
        {
          v31 += 2;
          goto LABEL_38;
        }
        int64_t v38 = v31 + 3;
        int64_t v23 = v31 + 2;
        if (v31 + 3 >= v52) {
          goto LABEL_58;
        }
        unint64_t v32 = *(void *)(v51 + 8 * v38);
        if (!v32)
        {
          while (1)
          {
            int64_t v31 = v38 + 1;
            if (__OFADD__(v38, 1)) {
              goto LABEL_74;
            }
            if (v31 >= v52) {
              break;
            }
            unint64_t v32 = *(void *)(v51 + 8 * v31);
            ++v38;
            if (v32) {
              goto LABEL_38;
            }
          }
          int64_t v23 = v48;
LABEL_58:
          unint64_t v22 = 0;
          double v58 = 0.0;
          v59[0] = 0;
          v59[1] = 1;
          goto LABEL_59;
        }
      }
      int64_t v31 = v38;
    }
LABEL_38:
    unint64_t v22 = (v32 - 1) & v32;
    unint64_t v29 = __clz(__rbit64(v32)) + (v31 << 6);
    int64_t v23 = v31;
    goto LABEL_34;
  }
  return result;
}

uint64_t implicit closure #1 in __RKEntityAction.state.didset()
{
  v0._uint64_t countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 540945696;
  v1._object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t __RKEntityAction.perform(with:)()
{
  v9[0] = StaticString.description.getter();
  v9[1] = v1;
  v2._uint64_t countAndFlagsBits = 8250;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  os_log_type_t v3 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v3, v9);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v4 = *(void *)(v0 + 96);
  char v5 = *(unsigned char *)(v0 + 104);
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  uint64_t v7 = v4;
  char v8 = v5;
  __RKEntityAction.state.didset((uint64_t)&v7);
  return 1;
}

uint64_t __RKEntityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for __RKEntityAction();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t __RKEntityAction.clone(matching:newEntity:)()
{
  (*(void (**)(void *__return_ptr, void))(*(void *)v0 + 464))(v3, 0);
  type metadata accessor for __RKEntityAction();
  if (swift_dynamicCast()) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityAction()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 440))();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v37);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(boxed_opaque_existential_1, a1, a7);
  uint64_t v17 = (void *)*a6;
  __int16 v18 = a4 & 0x101;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v18);
  uint64_t v21 = v17[2];
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v24 = v19;
  uint64_t v25 = v17[3];
  if (v25 >= v23 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v26 = (void *)*a6;
    if (v24)
    {
LABEL_8:
      uint64_t v27 = v26[7] + 40 * v20;
      __swift_destroy_boxed_opaque_existential_1(v27);
      return outlined init with take of BindableDataInternal(&v37, v27);
    }
    goto LABEL_11;
  }
  if (v25 >= v23 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, a5 & 1);
  unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v18);
  if ((v24 & 1) != (v30 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v20 = v29;
  uint64_t v26 = (void *)*a6;
  if (v24) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v31 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v37, v38);
  __n128 v32 = MEMORY[0x270FA5388](v31);
  char v34 = (char *)&v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v35 + 16))(v34, v32);
  specialized _NativeDictionary._insert(at:key:value:)(v20, a2, a3, v18, (uint64_t)v34, v26, a7, a8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = a7;
  uint64_t v23 = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(boxed_opaque_existential_1, a5, a7);
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v16 = a6[6] + 24 * a1;
  *(void *)uint64_t v16 = a2;
  *(void *)(v16 + 8) = a3;
  *(unsigned char *)(v16 + 16) = a4 & 1;
  *(unsigned char *)(v16 + 17) = HIBYTE(a4) & 1;
  uint64_t result = outlined init with take of BindableDataInternal(&v21, a6[7] + 40 * a1);
  uint64_t v18 = a6[2];
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    a6[2] = v20;
  }
  return result;
}

BOOL specialized static __RKEntityAction.State.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    switch(*(void *)&v2)
    {
      case 1:
        if (*(void *)&v3 == 1) {
          char v9 = *(unsigned char *)(a2 + 8);
        }
        else {
          char v9 = 0;
        }
        if ((v9 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 2:
        if (*(void *)&v3 == 2) {
          char v6 = *(unsigned char *)(a2 + 8);
        }
        else {
          char v6 = 0;
        }
        if ((v6 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 3:
        if (*(void *)&v3 == 3) {
          char v7 = *(unsigned char *)(a2 + 8);
        }
        else {
          char v7 = 0;
        }
        if ((v7 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 4:
        if (*(void *)&v3 > 3uLL) {
          char v8 = *(unsigned char *)(a2 + 8);
        }
        else {
          char v8 = 0;
        }
        if ((v8 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if (v3 == 0.0) {
          char v4 = *(unsigned char *)(a2 + 8);
        }
        else {
          char v4 = 0;
        }
        if ((v4 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  else
  {
    return (*(unsigned char *)(a2 + 8) & 1) == 0 && v2 == *(double *)a2;
  }
  return result;
}

uint64_t type metadata accessor for __RKEntityAction()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type [__RKEntityActionMultiplePerformBehavior] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [__RKEntityActionMultiplePerformBehavior] and conformance [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityActionMultiplePerformBehavior] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityActionMultiplePerformBehavior]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityActionMultiplePerformBehavior] and conformance [A]);
  }
  return result;
}

uint64_t sub_227F45748@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 16);
  return swift_retain();
}

uint64_t sub_227F457A0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 88);
  return result;
}

uint64_t sub_227F457E8(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 88) = v2;
  return result;
}

uint64_t sub_227F4582C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 89);
  return result;
}

uint64_t sub_227F45874(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 89) = v2;
  return result;
}

uint64_t sub_227F458B8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 90);
  return result;
}

uint64_t sub_227F45900(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 90) = v2;
  return result;
}

uint64_t sub_227F45944@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 104);
  *(void *)a2 = *(void *)(v3 + 96);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_227F45998@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 105);
  return result;
}

uint64_t sub_227F459E0(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 105) = v2;
  return result;
}

uint64_t dispatch thunk of __RKEntityActionStateObserver.action(_:didChangeStateFrom:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

unsigned char *storeEnumTagSinglePayload for __RKEntityActionMultiplePerformBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227F45B04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionMultiplePerformBehavior()
{
  return &type metadata for __RKEntityActionMultiplePerformBehavior;
}

uint64_t destroy for __RKEntityActionContext()
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for __RKEntityActionContext(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for __RKEntityActionContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for __RKEntityActionContext(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for __RKEntityActionContext()
{
  return &type metadata for __RKEntityActionContext;
}

uint64_t method lookup function for __RKEntityAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityAction);
}

uint64_t dispatch thunk of __RKEntityAction.__allocating_init(targetEntity:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of __RKEntityAction.targetEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of __RKEntityAction.targetEntity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of __RKEntityAction.targetEntity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of __RKEntityAction.completionHandler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of __RKEntityAction.completionHandler.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of __RKEntityAction.completionHandler.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of __RKEntityAction.isAlternate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of __RKEntityAction.isAlternate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of __RKEntityAction.isAlternate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of __RKEntityAction.isExclusive.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of __RKEntityAction.isExclusive.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of __RKEntityAction.isExclusive.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of __RKEntityAction.exclusiveBlocksForCompletion.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of __RKEntityAction.exclusiveBlocksForCompletion.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of __RKEntityAction.exclusiveBlocksForCompletion.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of __RKEntityAction.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of __RKEntityAction.state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of __RKEntityAction.state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of __RKEntityAction.multiplePerformBehaviour.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of __RKEntityAction.multiplePerformBehaviour.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of __RKEntityAction.multiplePerformBehaviour.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of __RKEntityAction.performAction(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of __RKEntityAction.shouldContinueOnPerform(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of __RKEntityAction.preloadAssets()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of __RKEntityAction.perform(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of __RKEntityAction.addStateObserver(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of __RKEntityAction.removeStateObserver(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of __RKEntityAction.reversed()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of __RKEntityAction.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of __RKEntityAction.stop()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of __RKEntityAction.isExclusiveWith(action:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of __RKEntityAction.copy(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of __RKEntityAction.clone(matching:newEntity:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of __RKEntityAction.prefersInitialOrdering()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t storeEnumTagSinglePayload for __RKEntityAction.State(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityAction.State()
{
  return &type metadata for __RKEntityAction.State;
}

ValueMetadata *type metadata accessor for __RKEntityAction.ActionStateObservation()
{
  return &type metadata for __RKEntityAction.ActionStateObservation;
}

uint64_t sub_227F46288()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())(char a1)
{
  char v2 = *(uint64_t (**)(char *))(v1 + 16);
  char v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t partial apply for implicit closure #1 in __RKEntityAction.state.didset()
{
  return implicit closure #1 in __RKEntityAction.state.didset();
}

RealityFoundation::AdaptiveResolutionComponent __swiftcall AdaptiveResolutionComponent.init()()
{
  *uint64_t v0 = 0;
  return result;
}

float AdaptiveResolutionComponent.pixelsPerMeter.getter()
{
  return *(float *)v0;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance AdaptiveResolutionComponent@<X0>(_DWORD *a1@<X8>)
{
  REComponentGetEntity();
  REAdaptiveResolutionStateComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result) {
    uint64_t result = REAdaptiveResolutionStateComponentGetPixelsPerMeter();
  }
  else {
    int v3 = 0;
  }
  *a1 = v3;
  return result;
}

uint64_t static AdaptiveResolutionComponent.__fromCore(_:)@<X0>(_DWORD *a1@<X8>)
{
  REComponentGetEntity();
  REAdaptiveResolutionStateComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result) {
    uint64_t result = REAdaptiveResolutionStateComponentGetPixelsPerMeter();
  }
  else {
    int v3 = 0;
  }
  *a1 = v3;
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance AdaptiveResolutionComponent(_DWORD *a1@<X8>)
{
  *a1 = 4006;
}

void static AdaptiveResolutionComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 4006;
}

ValueMetadata *type metadata accessor for AdaptiveResolutionComponent()
{
  return &type metadata for AdaptiveResolutionComponent;
}

uint64_t AcousticMeshResource.deinit()
{
  RERelease();
  return v0;
}

uint64_t AcousticMeshResource.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t static AcousticMeshResource.__fromCore(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for AcousticMeshResource();
  uint64_t v2 = swift_allocObject();
  RERetain();
  *(void *)(v2 + 16) = v1;
  return v2;
}

uint64_t type metadata accessor for AcousticMeshResource()
{
  return self;
}

uint64_t method lookup function for AcousticMeshResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AcousticMeshResource);
}

uint64_t dispatch thunk of AcousticMeshResource.__coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

__n128 RETransform.position.getter()
{
  return *(__n128 *)v0;
}

void RETransform.position.setter(__n128 a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*RETransform.position.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 RETransform.orientation.getter()
{
  return v0[1];
}

void RETransform.orientation.setter(__n128 a1)
{
  v1[1] = a1;
}

uint64_t (*RETransform.orientation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 RETransform.scale.getter()
{
  return v0[2];
}

void RETransform.scale.setter(__n128 a1)
{
  v1[2] = a1;
}

uint64_t (*RETransform.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double RETransform.matrix.getter()
{
  return specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v0, *(float32x4_t *)(v0 + 16), COERCE_FLOAT(*(_OWORD *)(v0 + 32)));
}

void key path setter for RETransform.matrix : RETransform(_OWORD *a1, _OWORD *a2)
{
  float32x4_t v5 = *(float32x4_t *)a1;
  int32x4_t v6 = *((int32x4_t *)a1 + 1);
  int8x16_t v7 = *((int8x16_t *)a1 + 2);
  long long v3 = a1[3];
  HIDWORD(v3) = 0;
  long long v8 = v3;
  REDecomposeMatrix();
  *(__n64 *)&long long v4 = simd_float4x4.scale.getter(v5, v6, v7);
  *a2 = v8;
  a2[1] = 0u;
  a2[2] = v4;
}

void RETransform.matrix.setter(float32x4_t a1, int32x4_t a2, int8x16_t a3, __n128 a4)
{
  a4.n128_u32[3] = 0;
  __n128 v10 = a4;
  REDecomposeMatrix();
  v6.n128_u64[0] = simd_float4x4.scale.getter(a1, a2, a3).n64_u64[0];
  *long long v4 = v10;
  v4[1] = 0u;
  void v4[2] = v6;
}

void (*RETransform.matrix.modify(void *a1))(int32x4_t **a1)
{
  long long v3 = malloc(0x78uLL);
  *a1 = v3;
  v3[14] = v1;
  *(double *)&long long v4 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v1, *(float32x4_t *)(v1 + 16), COERCE_FLOAT(*(_OWORD *)(v1 + 32)));
  *(_OWORD *)long long v3 = v4;
  *((_OWORD *)v3 + 1) = v5;
  *((_OWORD *)v3 + 2) = v6;
  *((_OWORD *)v3 + 3) = v7;
  return RETransform.matrix.modify;
}

void RETransform.matrix.modify(int32x4_t **a1)
{
  uint64_t v1 = *a1;
  int32x4_t v6 = (*a1)[1];
  float32x4_t v7 = *(float32x4_t *)*a1;
  int8x16_t v5 = (int8x16_t)(*a1)[2];
  int32x4_t v9 = (*a1)[3];
  v1[4] = 0u;
  v1[5] = 0u;
  v1[6] = 0u;
  REDecomposeMatrix();
  int32x4_t v8 = v1[5];
  *(__n64 *)v2.i8 = simd_float4x4.scale.getter(v7, v6, v5);
  long long v3 = (int32x4_t *)v1[7].i64[0];
  int32x4_t v4 = v9;
  v4.i32[3] = 0;
  int32x4_t *v3 = v4;
  v3[1] = v8;
  v3[2] = v2;

  free(v1);
}

void sub_227F4689C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(double *)&long long v3 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)a1, *(float32x4_t *)(a1 + 16), COERCE_FLOAT(*(_OWORD *)(a1 + 32)));
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
}

void sub_227F468D0(_OWORD *a1, _OWORD *a2)
{
  key path setter for RETransform.matrix : RETransform(a1, a2);
}

ValueMetadata *type metadata accessor for RETransform()
{
  return &type metadata for RETransform;
}

void __swiftcall SpotLightComponent.Shadow.init()(RealityKit::SpotLightComponent::Shadow *__return_ptr retstr)
{
  retstr->__depthBias = 1.0;
  retstr->__cullModeOverride.CGColorRef value = RealityFoundation_MaterialParameterTypes_FaceCulling_unknownDefault;
  retstr->__zNear.CGColorRef value = 0.0;
  retstr->__zNear.is_nil = 1;
  retstr->__zFar.CGColorRef value = 0.0;
  retstr->__zFar.is_nil = 1;
}

uint64_t static SpotLightComponent.Shadow.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  RESpotLightShadowMapComponentGetDepthBias();
  int v3 = v2;
  if (RESpotLightShadowMapComponentGetCullModeEx()) {
    char v4 = 1;
  }
  else {
    char v4 = 3;
  }
  char ZNear = RESpotLightShadowMapComponentGetZNear();
  uint64_t result = RESpotLightShadowMapComponentGetZFar();
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = ZNear ^ 1;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = result ^ 1;
  return result;
}

void SpotLightComponent.Shadow.depthBias.setter(float a1)
{
  *uint64_t v1 = a1;
}

unsigned char *SpotLightComponent.Shadow.cullModeOverride.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 4) = *result;
  return result;
}

int *SpotLightComponent.Shadow.zNear.setter(int *result)
{
  int v2 = *result;
  char v3 = *((unsigned char *)result + 4);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 12) = v3;
  return result;
}

int *SpotLightComponent.Shadow.zFar.setter(int *result)
{
  int v2 = *result;
  char v3 = *((unsigned char *)result + 4);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 20) = v3;
  return result;
}

uint64_t SpotLightComponent.Shadow.__toCore(_:)()
{
  return RENetworkMarkComponentDirty();
}

void static SpotLightComponent.Shadow.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 77;
}

void protocol witness for static Component.__coreComponentType.getter in conformance SpotLightComponent.Shadow(_DWORD *a1@<X8>)
{
  *a1 = 77;
}

id SpotLightComponent.__color.getter()
{
  return *v0;
}

void SpotLightComponent.__color.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*SpotLightComponent.__color.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float SpotLightComponent.intensity.getter()
{
  return *(float *)(v0 + 8);
}

void SpotLightComponent.intensity.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*SpotLightComponent.intensity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float SpotLightComponent.innerAngleInDegrees.getter()
{
  return *(float *)(v0 + 12);
}

void SpotLightComponent.innerAngleInDegrees.setter(float a1)
{
  *(float *)(v1 + 12) = a1;
}

uint64_t (*SpotLightComponent.innerAngleInDegrees.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float SpotLightComponent.outerAngleInDegrees.getter()
{
  return *(float *)(v0 + 16);
}

void SpotLightComponent.outerAngleInDegrees.setter(float a1)
{
  *(float *)(v1 + 16) = a1;
}

uint64_t (*SpotLightComponent.outerAngleInDegrees.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float SpotLightComponent.attenuationRadius.getter()
{
  return *(float *)(v0 + 20);
}

void SpotLightComponent.attenuationRadius.setter(float a1)
{
  *(float *)(v1 + 20) = a1;
}

uint64_t (*SpotLightComponent.attenuationRadius.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  *(void *)a2 = a1;
  *(float *)(a2 + 8) = a3;
  *(float *)(a2 + 12) = a4;
  *(float *)(a2 + 16) = a5;
  *(float *)(a2 + 20) = a6;
  *(_DWORD *)(a2 + 24) = 0x40000000;
}

void static SpotLightComponent.__fromCore(_:)(uint64_t a1@<X8>)
{
  RESpotLightComponentGetColorGamut3F();
  RESpotLightComponentGetIntensity();
  int v3 = v2;
  RESpotLightComponentGetInnerAngle();
  unsigned int v12 = v4;
  RESpotLightComponentGetOuterAngle();
  unsigned int v11 = v5;
  RESpotLightComponentGetAttenuationRadius();
  int v7 = v6;
  RESpotLightComponentGetAttenuationFalloffExponent();
  int v9 = v8;
  uint64_t v10 = RECreateCGColorFromColorGamut();

  *(void *)a1 = v10;
  *(_DWORD *)(a1 + 8) = v3;
  *(float32x2_t *)(a1 + 12) = vdiv_f32(vmul_f32((float32x2_t)__PAIR64__(v11, v12), (float32x2_t)vdup_n_s32(0x43340000u)), (float32x2_t)vdup_n_s32(0x40490FDAu));
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 24) = v9;
}

void SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>, float a7@<S4>)
{
  *(void *)a2 = a1;
  *(float *)(a2 + 8) = a3;
  *(float *)(a2 + 12) = a4;
  *(float *)(a2 + 16) = a5;
  *(float *)(a2 + 20) = a6;
  *(float *)(a2 + 24) = a7;
}

uint64_t SpotLightComponent.__toCore(_:)()
{
  return RENetworkMarkComponentDirty();
}

float SpotLightComponent.attenuationFalloffExponent.getter()
{
  return *(float *)(v0 + 24);
}

void static SpotLightComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 50;
}

void protocol witness for static Component.__coreComponentType.getter in conformance SpotLightComponent(_DWORD *a1@<X8>)
{
  *a1 = 50;
}

void SpotLightComponent.attenuationFalloffExponent.setter(float a1)
{
  *(float *)(v1 + 24) = a1;
}

float (*SpotLightComponent.attenuationFalloffExponent.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 24);
  return SpotLightComponent.attenuationFalloffExponent.modify;
}

float SpotLightComponent.attenuationFalloffExponent.modify(float *a1)
{
  float result = a1[2];
  *(float *)(*(void *)a1 + 24) = result;
  return result;
}

float SpotLightComponent.Shadow.depthBias.getter()
{
  return *(float *)v0;
}

float (*SpotLightComponent.Shadow.depthBias.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return SpotLightComponent.Shadow.depthBias.modify;
}

float SpotLightComponent.Shadow.depthBias.modify(uint64_t a1)
{
  float result = *(float *)(a1 + 8);
  **(float **)a1 = result;
  return result;
}

void SpotLightComponent.Shadow.cullModeOverride.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 4);
}

unsigned char *(*SpotLightComponent.Shadow.cullModeOverride.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 4);
  return SpotLightComponent.Shadow.cullModeOverride.modify;
}

unsigned char *SpotLightComponent.Shadow.cullModeOverride.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 4) = result[8];
  return result;
}

uint64_t static SpotLightComponent.Shadow.ShadowClippingPlane.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 4);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 4);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0) {
    return *(float *)a1 == *(float *)a2;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SpotLightComponent.Shadow.ShadowClippingPlane(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 4);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 4);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0) {
    return *(float *)a1 == *(float *)a2;
  }
  return result;
}

void SpotLightComponent.Shadow.zNear.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 12);
  if (v2) {
    int v3 = 0;
  }
  else {
    int v3 = *(_DWORD *)(v1 + 8);
  }
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v2;
}

uint64_t *(*SpotLightComponent.Shadow.zNear.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  char v2 = *(unsigned char *)(v1 + 12);
  if (v2) {
    int v3 = 0;
  }
  else {
    int v3 = *(_DWORD *)(v1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = v2;
  return SpotLightComponent.Shadow.zNear.modify;
}

uint64_t *SpotLightComponent.Shadow.zNear.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  int v2 = *((_DWORD *)result + 2);
  char v3 = *((unsigned char *)result + 12);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 12) = v3;
  return result;
}

void SpotLightComponent.Shadow.zFar.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 20);
  if (v2) {
    int v3 = 0;
  }
  else {
    int v3 = *(_DWORD *)(v1 + 16);
  }
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v2;
}

uint64_t *(*SpotLightComponent.Shadow.zFar.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  char v2 = *(unsigned char *)(v1 + 20);
  if (v2) {
    int v3 = 0;
  }
  else {
    int v3 = *(_DWORD *)(v1 + 16);
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = v2;
  return SpotLightComponent.Shadow.zFar.modify;
}

uint64_t *SpotLightComponent.Shadow.zFar.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  int v2 = *((_DWORD *)result + 2);
  char v3 = *((unsigned char *)result + 12);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 20) = v3;
  return result;
}

void __swiftcall SpotLightComponent.Shadow.init(depthBias:cullMode:zNear:zFar:)(RealityKit::SpotLightComponent::Shadow *__return_ptr retstr, Swift::Float depthBias, RealityFoundation::MaterialParameterTypes::FaceCulling_optional cullMode, Swift::Float zNear, Swift::Float zFar)
{
  RealityFoundation::MaterialParameterTypes::FaceCulling v5 = *(unsigned char *)cullMode.value;
  retstr->__depthBias = depthBias;
  retstr->__cullModeOverride.CGColorRef value = v5;
  retstr->__zNear.CGColorRef value = 0.0;
  retstr->__zNear.is_nil = 1;
  retstr->__zFar.CGColorRef value = 0.0;
  retstr->__zFar.is_nil = 1;
}

uint64_t SpotLightComponent.Shadow.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  RealityFoundation::MaterialParameterTypes::FaceCulling v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v6 - 8);
  int v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *v1;
  char v10 = *((unsigned char *)v1 + 4);
  int v11 = v1[2];
  int v12 = *((unsigned __int8 *)v1 + 12);
  int v13 = v1[4];
  int v14 = *((unsigned __int8 *)v1 + 20);
  int v23 = v9;
  char v24 = v10;
  int v25 = v11;
  char v26 = v12;
  int v27 = v13;
  char v28 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_228324960;
  *(void *)(v15 + 32) = 0x6169426874706564;
  *(void *)(v15 + 40) = 0xE900000000000073;
  uint64_t v16 = MEMORY[0x263F8D5C8];
  *(_DWORD *)(v15 + 48) = v9;
  *(void *)(v15 + 72) = v16;
  *(void *)(v15 + 80) = 0xD000000000000010;
  *(void *)(v15 + 88) = 0x800000022834E350;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  *(unsigned char *)(v15 + 96) = v10;
  *(void *)(v15 + 120) = v17;
  *(void *)(v15 + 128) = 0x7261654E7ALL;
  *(void *)(v15 + 136) = 0xE500000000000000;
  if (v12) {
    int v18 = 0;
  }
  else {
    int v18 = v11;
  }
  *(_DWORD *)(v15 + 144) = v18;
  *(unsigned char *)(v15 + 148) = v12;
  *(void *)(v15 + 168) = &type metadata for SpotLightComponent.Shadow.ShadowClippingPlane;
  *(void *)(v15 + 176) = 1918977658;
  *(void *)(v15 + 184) = 0xE400000000000000;
  *(void *)(v15 + 216) = &type metadata for SpotLightComponent.Shadow.ShadowClippingPlane;
  if (v14) {
    int v19 = 0;
  }
  else {
    int v19 = v13;
  }
  *(_DWORD *)(v15 + 192) = v19;
  *(unsigned char *)(v15 + 196) = v14;
  uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static SpotLightComponent.Shadow.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 != *(float *)a2) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a1 + 4);
  float v3 = *(float *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 12);
  float v5 = *(float *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 20);
  int v7 = *(unsigned __int8 *)(a2 + 4);
  char v8 = *(unsigned char *)(a2 + 12);
  char v9 = *(unsigned char *)(a2 + 20);
  if (v2 == 3)
  {
    if (v7 != 3) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v7 == 3 || v2 != v7) {
      return result;
    }
  }
  if (v4)
  {
    if (!*(unsigned char *)(a2 + 12)) {
      return 0;
    }
  }
  else
  {
    if (v3 != *(float *)(a2 + 8)) {
      char v8 = 1;
    }
    if (v8) {
      return 0;
    }
  }
  if (v6)
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v5 != *(float *)(a2 + 16)) {
      char v9 = 1;
    }
    if (v9) {
      return 0;
    }
  }
  return 1;
}

BOOL specialized static SpotLightComponent.== infix(_:_:)(float *a1, float *a2)
{
  float v2 = a1[2];
  float v3 = a1[3];
  float v4 = a1[4];
  float v5 = a1[5];
  float v6 = a2[2];
  float v7 = a2[3];
  float v8 = a2[4];
  float v9 = a2[5];
  float v15 = a2[6];
  float v16 = a1[6];
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  char v10 = static _CFObject.== infix(_:_:)();
  BOOL result = 0;
  if ((v10 & 1) != 0 && v2 == v6 && v3 == v7 && v4 == v8 && v5 == v9) {
    return v16 == v15;
  }
  return result;
}

float sub_227F47678@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 24);
  *a2 = result;
  return result;
}

float sub_227F47684(float *a1, uint64_t a2)
{
  float result = *a1;
  *(float *)(a2 + 24) = *a1;
  return result;
}

float sub_227F47690@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float sub_227F4769C(float *a1, _DWORD *a2)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t sub_227F476A8@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 4);
  return result;
}

unsigned char *sub_227F476B4(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 4) = *result;
  return result;
}

uint64_t sub_227F476C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 8);
  char v3 = *(unsigned char *)(result + 12);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

int *sub_227F476DC(int *result, uint64_t a2)
{
  int v2 = *result;
  char v3 = *((unsigned char *)result + 4);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 12) = v3;
  return result;
}

uint64_t sub_227F476F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 16);
  char v3 = *(unsigned char *)(result + 20);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

int *sub_227F47714(int *result, uint64_t a2)
{
  int v2 = *result;
  char v3 = *((unsigned char *)result + 4);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 16) = v2;
  *(unsigned char *)(a2 + 20) = v3;
  return result;
}

uint64_t initializeWithCopy for SpotLightComponent(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for SpotLightComponent(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  float v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy28_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SpotLightComponent(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpotLightComponent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 28)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpotLightComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 28) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpotLightComponent()
{
  return &type metadata for SpotLightComponent;
}

__n128 __swift_memcpy21_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SpotLightComponent.Shadow(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*(unsigned __int8 *)(a1 + 4) <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 4);
  }
  int v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 4) < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpotLightComponent.Shadow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 21) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpotLightComponent.Shadow()
{
  return &type metadata for SpotLightComponent.Shadow;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SpotLightComponent.Shadow.ShadowClippingPlane(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SpotLightComponent.Shadow.ShadowClippingPlane(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t getEnumTag for SpotLightComponent.Shadow.ShadowClippingPlane(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for SpotLightComponent.Shadow.ShadowClippingPlane(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(unsigned char *)(result + 4) = 1;
  }
  else
  {
    *(unsigned char *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpotLightComponent.Shadow.ShadowClippingPlane()
{
  return &type metadata for SpotLightComponent.Shadow.ShadowClippingPlane;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS17RealityFoundation13AudioMixGroupV_G_s6UInt64Vs5NeverOTg504_s17e12Foundation23gh105GroupsComponentV013removeDeleteddE033_08DDF3E25FB130FB10258EDBEAA04A6FLL9componentys13OpaquePointerV_tFs6j7VAA0cD5I53Vcfu_33_84c271c9209633a7b8bbe39b70b1e066AlJTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v35 = *(void *)(a1 + 16);
  uint64_t v37 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v37;
  uint64_t result = specialized Dictionary.Values.startIndex.getter(a1);
  uint64_t v5 = result;
  uint64_t v7 = v35;
  uint64_t v6 = a1;
  uint64_t v8 = 0;
  char v10 = v9 & 1;
  uint64_t v11 = a1 + 64;
  uint64_t v12 = v4;
  uint64_t v13 = a1 + 96;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v6 + 32))
  {
    unint64_t v15 = (unint64_t)v5 >> 6;
    if ((*(void *)(v11 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v6 + 36) != v4) {
      goto LABEL_30;
    }
    uint64_t v16 = *(void *)(*(void *)(v6 + 56) + 80 * v5);
    unint64_t v18 = *(void *)(v37 + 16);
    unint64_t v17 = *(void *)(v37 + 24);
    if (v18 >= v17 >> 1)
    {
      uint64_t v31 = v4;
      uint64_t v32 = v13;
      uint64_t v33 = v12;
      uint64_t v34 = v11;
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      uint64_t v4 = v31;
      uint64_t v13 = v32;
      uint64_t v12 = v33;
      uint64_t v11 = v34;
      uint64_t v7 = v35;
      uint64_t v6 = a1;
    }
    *(void *)(v37 + 16) = v18 + 1;
    *(void *)(v37 + 8 * v18 + 32) = v16;
    if (v10) {
      goto LABEL_34;
    }
    int64_t v14 = 1 << *(unsigned char *)(v6 + 32);
    if (v5 >= v14) {
      goto LABEL_31;
    }
    uint64_t v19 = *(void *)(v11 + 8 * v15);
    if ((v19 & (1 << v5)) == 0) {
      goto LABEL_32;
    }
    if (*(_DWORD *)(v6 + 36) != v4) {
      goto LABEL_33;
    }
    unint64_t v20 = v19 & (-2 << (v5 & 0x3F));
    if (v20)
    {
      int64_t v14 = __clz(__rbit64(v20)) | v5 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v21 = v15 + 1;
      unint64_t v22 = (unint64_t)(v14 + 63) >> 6;
      if (v15 + 1 < v22)
      {
        unint64_t v23 = *(void *)(v11 + 8 * v21);
        if (!v23)
        {
          unint64_t v21 = v15 + 2;
          if (v15 + 2 >= v22) {
            goto LABEL_4;
          }
          unint64_t v23 = *(void *)(v11 + 8 * v21);
          if (!v23)
          {
            unint64_t v21 = v15 + 3;
            if (v15 + 3 >= v22) {
              goto LABEL_4;
            }
            unint64_t v23 = *(void *)(v11 + 8 * v21);
            if (!v23)
            {
              while (v22 - 4 != v15)
              {
                unint64_t v23 = *(void *)(v13 + 8 * v15++);
                if (v23)
                {
                  uint64_t v24 = v5;
                  uint64_t v25 = v11;
                  uint64_t v26 = v12;
                  uint64_t v27 = v13;
                  uint64_t result = outlined consume of [String : AnimationResource].Index._Variant(v24, v4, 0);
                  uint64_t v13 = v27;
                  uint64_t v12 = v26;
                  uint64_t v11 = v25;
                  uint64_t v7 = v35;
                  uint64_t v6 = a1;
                  unint64_t v21 = v15 + 3;
                  goto LABEL_18;
                }
              }
              uint64_t v28 = v11;
              uint64_t v29 = v12;
              uint64_t v30 = v13;
              uint64_t result = outlined consume of [String : AnimationResource].Index._Variant(v5, v4, 0);
              uint64_t v13 = v30;
              uint64_t v12 = v29;
              uint64_t v11 = v28;
              uint64_t v7 = v35;
              uint64_t v6 = a1;
              goto LABEL_4;
            }
          }
        }
LABEL_18:
        int64_t v14 = __clz(__rbit64(v23)) + (v21 << 6);
      }
    }
LABEL_4:
    char v10 = 0;
    ++v8;
    uint64_t v4 = v12;
    uint64_t v5 = v14;
    if (v8 == v7) {
      return v2;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t AudioMixGroupsComponent.mixGroups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AudioMixGroupsComponent.mixGroups.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *int64_t v1 = a1;
  return result;
}

uint64_t (*AudioMixGroupsComponent.mixGroups.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::AudioMixGroupsComponent __swiftcall AudioMixGroupsComponent.init(mixGroups:)(Swift::OpaquePointer mixGroups)
{
  char v3 = v1;
  uint64_t v4 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v5 = *((void *)mixGroups._rawValue + 2);
  if (v5)
  {
    uint64_t v30 = v3;
    swift_bridgeObjectRetain();
    uint64_t v6 = (char *)mixGroups._rawValue + 56;
    while (1)
    {
      uint64_t v31 = v5;
      uint64_t v32 = *((void *)v6 - 3);
      uint64_t v33 = *((void *)v6 - 2);
      char v34 = *(v6 - 8);
      uint64_t v35 = *(void *)v6;
      char v8 = v6[8];
      char v9 = v6[9];
      uint64_t v11 = *((void *)v6 + 2);
      uint64_t v10 = *((void *)v6 + 3);
      uint64_t v13 = *((void *)v6 + 4);
      uint64_t v12 = *((void *)v6 + 5);
      char v14 = v6[48];
      swift_bridgeObjectRetain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      uint64_t v18 = v4[2];
      BOOL v19 = (v16 & 1) == 0;
      uint64_t v20 = v18 + v19;
      if (__OFADD__(v18, v19)) {
        break;
      }
      char v21 = v16;
      if (v4[3] >= v20)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
        unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
        if ((v21 & 1) != (v23 & 1)) {
          goto LABEL_18;
        }
        unint64_t v17 = v22;
      }
      if (v21)
      {
        uint64_t v7 = v4[7] + 80 * v17;
        *(void *)uint64_t v7 = v32;
        *(void *)(v7 + 8) = v33;
        *(unsigned char *)(v7 + 16) = v34;
        *(void *)(v7 + 24) = v35;
        *(unsigned char *)(v7 + 32) = v8;
        *(unsigned char *)(v7 + 33) = v9;
        *(void *)(v7 + 40) = v11;
        *(void *)(v7 + 48) = v10;
        *(void *)(v7 + 56) = v13;
        *(void *)(v7 + 64) = v12;
        *(unsigned char *)(v7 + 72) = v14;
        swift_bridgeObjectRelease();
      }
      else
      {
        v4[(v17 >> 6) + 8] |= 1 << v17;
        uint64_t v24 = (uint64_t *)(v4[6] + 16 * v17);
        *uint64_t v24 = v11;
        v24[1] = v10;
        uint64_t v25 = v4[7] + 80 * v17;
        *(void *)uint64_t v25 = v32;
        *(void *)(v25 + 8) = v33;
        *(unsigned char *)(v25 + 16) = v34;
        *(void *)(v25 + 24) = v35;
        *(unsigned char *)(v25 + 32) = v8;
        *(unsigned char *)(v25 + 33) = v9;
        *(void *)(v25 + 40) = v11;
        *(void *)(v25 + 48) = v10;
        *(void *)(v25 + 56) = v13;
        *(void *)(v25 + 64) = v12;
        *(unsigned char *)(v25 + 72) = v14;
        uint64_t v26 = v4[2];
        BOOL v27 = __OFADD__(v26, 1);
        uint64_t v28 = v26 + 1;
        if (v27) {
          goto LABEL_17;
        }
        void v4[2] = v28;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 += 80;
      uint64_t v5 = v31 - 1;
      if (v31 == 1)
      {
        swift_bridgeObjectRelease();
        char v3 = v30;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    result.mixGroups._rawValue = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_15:
    result.mixGroups._rawValue = (void *)swift_bridgeObjectRelease();
    void *v3 = v4;
  }
  return result;
}

uint64_t AudioMixGroupsComponent.set(_:)(_OWORD *a1)
{
  uint64_t v2 = v1;
  long long v3 = a1[3];
  long long v18 = a1[2];
  v19[0] = v3;
  *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)((char *)a1 + 57);
  long long v4 = a1[1];
  v17[0] = *a1;
  v17[1] = v4;
  if (one-time initialization token for audio != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.audio);
  outlined retain of AudioMixGroup((uint64_t)v17);
  outlined retain of AudioMixGroup((uint64_t)v17);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    char v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v16 = v9;
    *(_DWORD *)char v8 = 136315138;
    uint64_t v10 = *((void *)&v18 + 1);
    unint64_t v11 = *(void *)&v19[0];
    outlined retain of AudioMixGroup((uint64_t)v17);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined release of AudioMixGroup((uint64_t)v17);
    outlined release of AudioMixGroup((uint64_t)v17);
    outlined release of AudioMixGroup((uint64_t)v17);
    _os_log_impl(&dword_227DD2000, v6, v7, "[API/RealityKit] AudioMixGroupsComponent.set %s.", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v9, -1, -1);
    MEMORY[0x22A696500](v8, -1, -1);
  }
  else
  {
    outlined release of AudioMixGroup((uint64_t)v17);
    outlined release of AudioMixGroup((uint64_t)v17);
  }

  uint64_t v12 = *((void *)&v18 + 1);
  uint64_t v13 = *(void *)&v19[0];
  outlined retain of AudioMixGroup((uint64_t)v17);
  outlined retain of AudioMixGroup((uint64_t)v17);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v12, v13, isUniquelyReferenced_nonNull_native);
  uint64_t *v2 = v16;
  swift_bridgeObjectRelease();
  return outlined release of AudioMixGroup((uint64_t)v17);
}

Swift::Void __swiftcall AudioMixGroupsComponent.remove(named:)(Swift::String named)
{
  object = named._object;
  uint64_t countAndFlagsBits = named._countAndFlagsBits;
  if (one-time initialization token for audio != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.audio);
  swift_bridgeObjectRetain_n();
  long long v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v8[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_227DD2000, v4, v5, "[API/RealityKit] AudioMixGroupsComponent.remove %s.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v7, -1, -1);
    MEMORY[0x22A696500](v6, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  specialized Dictionary._Variant.removeValue(forKey:)(countAndFlagsBits, (uint64_t)object, (uint64_t)v8);
  swift_bridgeObjectRelease();
}

double AudioMixGroupsComponent.mixGroup(named:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *v3;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    double result = 0.0;
    *(_OWORD *)(a3 + 57) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  uint64_t v10 = *(void *)(v5 + 56) + 80 * v8;
  char v11 = *(unsigned char *)(v10 + 16);
  uint64_t v12 = *(void *)(v10 + 24);
  char v13 = *(unsigned char *)(v10 + 32);
  char v14 = *(unsigned char *)(v10 + 33);
  uint64_t v16 = *(void *)(v10 + 40);
  uint64_t v15 = *(void *)(v10 + 48);
  char v17 = *(unsigned char *)(v10 + 72);
  *(_OWORD *)a3 = *(_OWORD *)v10;
  *(unsigned char *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v12;
  *(unsigned char *)(a3 + 32) = v13;
  *(unsigned char *)(a3 + 33) = v14;
  *(void *)(a3 + 40) = v16;
  *(void *)(a3 + 48) = v15;
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(v10 + 56);
  *(unsigned char *)(a3 + 72) = v17;
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  return result;
}

uint64_t AudioMixGroupsComponent.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v3);

  return swift_bridgeObjectRelease();
}

uint64_t static AudioMixGroupsComponent.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

Swift::Int AudioMixGroupsComponent.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioMixGroupsComponent()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AudioMixGroupsComponent(uint64_t a1)
{
  specialized Dictionary<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioMixGroupsComponent()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioMixGroupsComponent(uint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t static AudioMixGroupsComponent.__fromCore(_:)()
{
  (id)REAudioMixGroupsComponentGetGroups();
  *(void *)&long long v1 = 0;
  type metadata accessor for NSDictionary();
  uint64_t result = static Array._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in static AudioMixGroupsComponent.__fromCore(_:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  *(void *)&long long v29 = 1701667150;
  *((void *)&v29 + 1) = 0xE400000000000000;
  id v4 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  uint64_t result = swift_unknownObjectRelease();
  if (!v4)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v28, &v29);
  swift_dynamicCast();
  uint64_t v30 = v26;
  uint64_t v15 = v27;
  *(void *)&long long v24 = 17481;
  *((void *)&v24 + 1) = 0xE200000000000000;
  id v6 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v23, 0, sizeof(v23));
  }
  outlined init with take of Any?((uint64_t)v23, (uint64_t)&v24);
  if (v25)
  {
    int v7 = swift_dynamicCast();
    if (v7) {
      uint64_t v8 = v21;
    }
    else {
      uint64_t v8 = 0;
    }
    int v9 = v7 ^ 1;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v24);
    uint64_t v8 = 0;
    int v9 = 1;
  }
  *(void *)&long long v24 = 1852399943;
  *((void *)&v24 + 1) = 0xE400000000000000;
  id v10 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  uint64_t result = swift_unknownObjectRelease();
  if (!v10) {
    goto LABEL_18;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v23, &v24);
  swift_dynamicCast();
  uint64_t v11 = v22;
  *(void *)&long long v21 = 0x6465657053;
  *((void *)&v21 + 1) = 0xE500000000000000;
  id v12 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  uint64_t result = swift_unknownObjectRelease();
  if (!v12)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v20, &v21);
  swift_dynamicCast();
  uint64_t v13 = v19;
  *(void *)&long long v18 = 0x746174536574754DLL;
  *((void *)&v18 + 1) = 0xE900000000000065;
  id v14 = objc_msgSend(v3, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  uint64_t result = swift_unknownObjectRelease();
  if (!v14)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v17, &v18);
  uint64_t result = swift_dynamicCast();
  if (v9)
  {
    uint64_t result = REAudioMixGroupsComponentCreateMixGroupID();
    uint64_t v8 = result;
  }
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 32) = 1;
  *(void *)(a2 + 40) = v30;
  *(void *)(a2 + 48) = v15;
  *(void *)(a2 + 56) = v11;
  *(void *)(a2 + 64) = v13;
  *(unsigned char *)(a2 + 72) = v16;
  return result;
}

uint64_t AudioMixGroupsComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  *(void *)&long long v28 = *v1;
  AudioMixGroupsComponent.removeDeletedMixGroups(component:)();
  if (one-time initialization token for audio != -1) {
LABEL_33:
  }
    swift_once();
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.audio);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    int v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v7 = 0;
    _os_log_impl(&dword_227DD2000, v5, v6, "[RealityKit/CoreRE] [MixGroup] About to update mix groups.", v7, 2u);
    MEMORY[0x22A696500](v7, -1, -1);
  }

  uint64_t v8 = v3 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v3 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_8;
    }
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v14 >= v12)
    {
LABEL_29:
      swift_release();
      return swift_bridgeObjectRelease();
    }
    unint64_t v26 = *(void *)(v8 + 8 * v14);
    if (!v26) {
      break;
    }
LABEL_24:
    unint64_t v11 = (v26 - 1) & v26;
    unint64_t v16 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_8:
    uint64_t v17 = *(void *)(v3 + 56) + 80 * v16;
    char v18 = *(unsigned char *)(v17 + 16);
    uint64_t v19 = *(void *)(v17 + 24);
    char v20 = *(unsigned char *)(v17 + 32);
    char v21 = *(unsigned char *)(v17 + 33);
    uint64_t v22 = *(void *)(v17 + 40);
    uint64_t v23 = *(void *)(v17 + 48);
    char v24 = *(unsigned char *)(v17 + 72);
    long long v28 = *(_OWORD *)v17;
    char v29 = v18;
    uint64_t v30 = v19;
    char v31 = v20;
    char v32 = v21;
    uint64_t v33 = v22;
    uint64_t v34 = v23;
    long long v35 = *(_OWORD *)(v17 + 56);
    char v36 = v24;
    uint64_t result = closure #1 in AudioMixGroupsComponent.__toCore(_:)((double *)&v28, v2);
  }
  int64_t v27 = v14 + 1;
  if (v14 + 1 >= v12) {
    goto LABEL_29;
  }
  unint64_t v26 = *(void *)(v8 + 8 * v27);
  if (v26) {
    goto LABEL_23;
  }
  int64_t v27 = v14 + 2;
  if (v14 + 2 >= v12) {
    goto LABEL_29;
  }
  unint64_t v26 = *(void *)(v8 + 8 * v27);
  if (v26) {
    goto LABEL_23;
  }
  int64_t v27 = v14 + 3;
  if (v14 + 3 >= v12) {
    goto LABEL_29;
  }
  unint64_t v26 = *(void *)(v8 + 8 * v27);
  if (v26) {
    goto LABEL_23;
  }
  int64_t v27 = v14 + 4;
  if (v14 + 4 >= v12) {
    goto LABEL_29;
  }
  unint64_t v26 = *(void *)(v8 + 8 * v27);
  if (v26) {
    goto LABEL_23;
  }
  int64_t v27 = v14 + 5;
  if (v14 + 5 >= v12) {
    goto LABEL_29;
  }
  unint64_t v26 = *(void *)(v8 + 8 * v27);
  if (v26)
  {
LABEL_23:
    int64_t v14 = v27;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v14 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v14 >= v12) {
      goto LABEL_29;
    }
    unint64_t v26 = *(void *)(v8 + 8 * v14);
    ++v27;
    if (v26) {
      goto LABEL_24;
    }
  }
  __break(1u);
  return result;
}

uint64_t AudioMixGroupsComponent.removeDeletedMixGroups(component:)()
{
  (id)REAudioMixGroupsComponentGetGroups();
  uint64_t v1 = 0;
  type metadata accessor for NSDictionary();
  uint64_t result = static Array._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in AudioMixGroupsComponent.__toCore(_:)(double *a1, uint64_t a2)
{
  double v3 = *a1;
  int v4 = *((unsigned __int8 *)a1 + 16);
  int v5 = *((unsigned __int8 *)a1 + 32);
  int v6 = *((unsigned __int8 *)a1 + 33);
  uint64_t v8 = *((void *)a1 + 5);
  unint64_t v7 = *((void *)a1 + 6);
  double v9 = a1[7];
  double v10 = a1[8];
  unsigned int v44 = *((unsigned __int8 *)a1 + 72);
  if (REAudioMixGroupsComponentHasGroup())
  {
    int v40 = v5;
    if (one-time initialization token for audio != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.audio);
    swift_bridgeObjectRetain_n();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    swift_bridgeObjectRetain_n();
    int64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      int v42 = v4;
      uint64_t v14 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      uint64_t v46 = v38;
      *(_DWORD *)uint64_t v14 = 136315906;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 12) = 1040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 18) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 28) = 1024;
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v12, v13, "[RealityKit/CoreRE] [MixGroup] Updating %s. Speed: %.*fx. IsMuted: %{BOOL}d.", (uint8_t *)v14, 0x22u);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v38, -1, -1);
      uint64_t v15 = v14;
      int v4 = v42;
      MEMORY[0x22A696500](v15, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t result = REAudioMixGroupsComponentUpdateGroup();
    int v5 = v40;
    if (v6)
    {
      swift_bridgeObjectRetain_n();
      getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
      getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v23, v24))
      {
        int v43 = v4;
        uint64_t v25 = swift_slowAlloc();
        uint64_t v45 = v8;
        uint64_t v26 = swift_slowAlloc();
        uint64_t v46 = v26;
        *(_DWORD *)uint64_t v25 = 136315650;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v7, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v25 + 12) = 1040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 18) = 2048;
        int v5 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_227DD2000, v23, v24, "[RealityKit/CoreRE] [MixGroup] Updating %s. Gain: %.*fdB.", (uint8_t *)v25, 0x1Cu);
        swift_arrayDestroy();
        uint64_t v27 = v26;
        uint64_t v8 = v45;
        MEMORY[0x22A696500](v27, -1, -1);
        uint64_t v28 = v25;
        int v4 = v43;
        MEMORY[0x22A696500](v28, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t result = REAudioMixGroupsComponentUpdateGroupGain();
      if ((v4 | v5)) {
        return result;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (one-time initialization token for audio != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.audio);
    swift_bridgeObjectRetain_n();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    swift_bridgeObjectRetain_n();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
    swift_bridgeObjectRetain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      int v41 = v5;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v46 = v39;
      *(_DWORD *)uint64_t v19 = 136316418;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 12) = 1040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 18) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 28) = 1040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 34) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 44) = 1024;
      swift_bridgeObjectRelease();
      uint64_t v20 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v17, v18, "[RealityKit/CoreRE] [MixGroup] Creating %s. Gain: %.*fdB. Speed: %.*fx. IsMuted: %{BOOL}d.", (uint8_t *)v19, 0x32u);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v39, -1, -1);
      uint64_t v21 = v19;
      int v5 = v41;
      MEMORY[0x22A696500](v21, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v20 = v44;
    }
    uint64_t v31 = String.utf8CString.getter();
    float v29 = v9;
    float v30 = v10;
    MEMORY[0x22A68C440](a2, *(void *)&v3, v31 + 32, v20, v29, v30);
    uint64_t result = swift_release();
  }
  if ((v4 | v5)) {
    return result;
  }
LABEL_20:
  uint64_t v32 = v8;
  if (one-time initialization token for audio != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.audio);
  swift_bridgeObjectRetain_n();
  getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
  getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
  getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
  getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    uint64_t v46 = v37;
    *(_DWORD *)uint64_t v36 = 136316162;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v7, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v36 + 12) = 1040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 18) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 28) = 1040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 34) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_227DD2000, v34, v35, "[RealityKit/CoreRE] [MixGroup] Fading %s. Gain: %.*fdB. Duration: %.*fs", (uint8_t *)v36, 0x2Cu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v37, -1, -1);
    MEMORY[0x22A696500](v36, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return REAudioMixGroupsComponentFadeGroup();
}

void static AudioMixGroupsComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3013;
}

void protocol witness for static Component.__coreComponentType.getter in conformance AudioMixGroupsComponent(_DWORD *a1@<X8>)
{
  *a1 = 3013;
}

uint64_t AudioMixGroupsComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  int v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_22830EC60;
  *(void *)(v8 + 32) = 0x70756F724778696DLL;
  *(void *)(v8 + 40) = 0xE900000000000073;
  uint64_t v9 = swift_bridgeObjectRetain();
  double v10 = specialized _copyCollectionToContiguousArray<A>(_:)(v9);
  *(void *)(v8 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AudioMixGroup]);
  *(void *)(v8 + 48) = v10;
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t outlined retain of AudioMixGroup(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AudioMixGroup(uint64_t a1)
{
  return a1;
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a2 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a2 + 64);
  int64_t v18 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v5 = 0;
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v18) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v19 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v18) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v19 + 8 * v6);
      if (!v16) {
        break;
      }
    }
LABEL_24:
    unint64_t v4 = (v16 - 1) & v16;
    unint64_t v8 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    uint64_t v9 = *(void *)(a2 + 56) + 80 * v8;
    Swift::UInt64 v10 = *(void *)(v9 + 56);
    Swift::UInt64 v11 = *(void *)(v9 + 64);
    Swift::UInt8 v12 = *(unsigned char *)(v9 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v13 = v10;
    }
    else {
      Swift::UInt64 v13 = 0;
    }
    Hasher._combine(_:)(v13);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v14 = v11;
    }
    else {
      Swift::UInt64 v14 = 0;
    }
    Hasher._combine(_:)(v14);
    Hasher._combine(_:)(v12);
    swift_bridgeObjectRelease();
    v5 ^= Hasher._finalize()();
  }
  int64_t v17 = v15 + 2;
  if (v17 >= v18)
  {
LABEL_25:
    swift_release();
    Hasher._combine(_:)(v5);
    return;
  }
  unint64_t v16 = *(void *)(v19 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v18) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v19 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
}

unint64_t type metadata accessor for NSDictionary()
{
  unint64_t result = lazy cache variable for type metadata for NSDictionary;
  if (!lazy cache variable for type metadata for NSDictionary)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioMixGroupsComponent and conformance AudioMixGroupsComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioMixGroupsComponent and conformance AudioMixGroupsComponent;
  if (!lazy protocol witness table cache variable for type AudioMixGroupsComponent and conformance AudioMixGroupsComponent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioMixGroupsComponent and conformance AudioMixGroupsComponent);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioMixGroupsComponent()
{
  return &type metadata for AudioMixGroupsComponent;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit17AudioFileResourceCG_s6UInt32Vs5NeverOTg504_s17d12Foundation22fg5Grouph26CyACSay0A3Kit0cdF0CGKcfcs6I55VAFcfu_33_0669798b827e02531357d74ef579fa48AfITf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (!v2) {
      return v3;
    }
    uint64_t v9 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v9;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x22A689930](v5, a1);
      }
      else {
        swift_retain();
      }
      int LayoutTag = REAudioFileAssetGetLayoutTag();
      swift_release();
      unint64_t v8 = *(void *)(v9 + 16);
      unint64_t v7 = *(void *)(v9 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      ++v5;
      *(void *)(v9 + 16) = v8 + 1;
      *(_DWORD *)(v9 + 4 * v8 + 32) = LayoutTag;
      if (v2 == v5) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v15 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(&v14, *(void *)(*(void *)(a1 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int *v11;
  Swift::Int v12;
  Swift::Int v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;

  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  int64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    uint64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      uint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        uint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          uint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    int64_t v11 = (Swift::Int *)(*(void *)(a1 + 48) + 16 * v10);
    unint64_t v12 = *v11;
    int64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    uint64_t result = swift_bridgeObjectRelease();
  }
  unint64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  uint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    uint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  long long *v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[5];

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v9 = result;
  if (v2)
  {
    uint64_t v4 = (long long *)(a1 + 32);
    do
    {
      uint64_t v5 = v4[3];
      v10[2] = v4[2];
      v10[3] = v5;
      v10[4] = v4[4];
      unint64_t v7 = *v4;
      uint64_t v6 = v4[1];
      v4 += 5;
      v10[0] = v7;
      v10[1] = v6;
      specialized Set._Variant.insert(_:)((uint64_t)&v8, (Swift::Int)v10);
      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  int64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  int64_t v8 = (char *)&v13 - v7;
  unint64_t v9 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type UUID? and conformance <A> A?();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v14 = result;
  if (v9)
  {
    int64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    unint64_t v12 = *(void *)(v3 + 72);
    do
    {
      outlined init with copy of UUID?(v11, (uint64_t)v5);
      specialized Set._Variant.insert(_:)((uint64_t)v8, (uint64_t)v5);
      outlined destroy of UUID?((uint64_t)v8);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned int *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t AudioFileGroupResource.resources.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AudioFileGroupResource.__allocating_init(named:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  void v6[4] = a3;
  uint64_t v6[5] = a4;
  long long v6[2] = a1;
  v6[3] = a2;
  type metadata accessor for MainActor();
  v6[8] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v6[9] = v8;
  v6[10] = v7;
  return MEMORY[0x270FA2498](AudioFileGroupResource.__allocating_init(named:from:in:), v8, v7);
}

uint64_t AudioFileGroupResource.__allocating_init(named:from:in:)()
{
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v13 = *(void *)(v0 + 32);
  uint64_t v14 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = 58;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 88) = v14;
  id v6 = v1;
  static LoadableResource.getAssetRefFromRealityFileInBundle(named:in:)(v13, v14, v1);
  uint64_t v8 = v7;

  uint64_t v9 = *(void *)(v8 + 16);
  *(void *)(v0 + 96) = v9;
  RERetain();
  swift_release();
  unint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)
                                                          + async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v10;
  *uint64_t v10 = v0;
  v10[1] = AudioFileGroupResource.__allocating_init(named:from:in:);
  return v12(v9, v13, (uint64_t)v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 80);
  Swift::String v4 = *(void *)(v2 + 72);
  if (v0) {
    Swift::String v5 = AudioFileGroupResource.__allocating_init(named:from:in:);
  }
  else {
    Swift::String v5 = AudioFileGroupResource.__allocating_init(named:from:in:);
  }
  return MEMORY[0x270FA2498](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  uint64_t v1 = v0[12];
  uint64_t v2 = (void *)v0[6];
  swift_release();
  type metadata accessor for AudioFileGroupResource();
  swift_allocObject();
  uint64_t v3 = AudioFileGroupResource.init(fromCore:)(v1);
  RERelease();

  Swift::String v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  RERelease();

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AudioFileGroupResource.__allocating_init(_:)(unint64_t a1)
{
  return AudioFileGroupResource.init(_:)(a1);
}

uint64_t AudioFileGroupResource.init(_:)(unint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = a1 >> 62;
  if (!(a1 >> 62))
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    if (v5) {
      goto LABEL_3;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    swift_release();
    lazy protocol witness table accessor for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error();
    swift_allocError();
    char v16 = 1;
    goto LABEL_29;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v31) {
    goto LABEL_28;
  }
LABEL_3:
  uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit17AudioFileResourceCG_s6UInt32Vs5NeverOTg504_s17d12Foundation22fg5Grouph26CyACSay0A3Kit0cdF0CGKcfcs6I55VAFcfu_33_0669798b827e02531357d74ef579fa48AfITf3nnnpk_nTf1cn_n(a1);
  uint64_t v7 = specialized Set.init<A>(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (v8 != 1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    lazy protocol witness table accessor for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error();
    swift_allocError();
    char v16 = 2;
LABEL_29:
    *uint64_t v15 = v16;
    goto LABEL_30;
  }
  uint64_t v9 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v9, (uint64_t)v35);
  uint64_t v10 = v36;
  uint64_t v11 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  specialized RandomNumberGenerator.next<A>(upperBound:)(0xFFFFFFFFFFFFFFFFLL);
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = (void *)MEMORY[0x22A688A50](0xD000000000000014, 0x80000002283537B0);
  swift_bridgeObjectRelease();
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v14)
  {
    uint64_t v34 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
    {
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v33 = v13;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        uint64_t v18 = *(void *)(MEMORY[0x22A689930](i, a1) + 16);
        swift_unknownObjectRelease();
        unint64_t v20 = *(void *)(v34 + 16);
        unint64_t v19 = *(void *)(v34 + 24);
        if (v20 >= v19 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        }
        *(void *)(v34 + 16) = v20 + 1;
        *(void *)(v34 + 8 * v20 + 32) = v18;
      }
    }
    else
    {
      unint64_t v21 = a1 + 32;
      unint64_t v22 = *(void *)(v34 + 16);
      uint64_t v23 = v14;
      do
      {
        uint64_t v24 = *(void *)(*(void *)v21 + 16);
        unint64_t v25 = *(void *)(v34 + 24);
        if (v22 >= v25 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v22 + 1, 1);
        }
        *(void *)(v34 + 16) = v22 + 1;
        *(void *)(v34 + 8 * v22 + 32) = v24;
        v21 += 8;
        ++v22;
        --v23;
      }
      while (v23);
    }
    uint64_t v13 = v33;
  }
  uint64_t v14 = REAudioFileGroupAssetCreateWithFileAssets();

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    swift_release();
    lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
    swift_allocError();
    *float v30 = 0x2E6E776F6E6B6E55;
    v30[1] = 0xE800000000000000;
LABEL_30:
    swift_willThrow();
    type metadata accessor for AudioFileGroupResource();
    swift_deallocPartialClassInstance();
    return v2;
  }
  if (one-time initialization token for audio != -1) {
LABEL_33:
  }
    swift_once();
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.audio);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    float v29 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)float v29 = 134217984;
    v35[0] = REAssetGetAssetId();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_227DD2000, v27, v28, "[API/RealityKit] Loading an AudioFileGroupResource with REAssetID: %llu", v29, 0xCu);
    MEMORY[0x22A696500](v29, -1, -1);
  }

  *(void *)(v2 + 24) = a1;
  swift_release();
  uint64_t v2 = AudioResource.init(fromCore:)(v14);
  RERelease();
  return v2;
}

uint64_t AudioFileGroupResource.__allocating_init(fromCore:)(uint64_t a1)
{
  return AudioFileGroupResource.init(fromCore:)(a1);
}

uint64_t AudioFileGroupResource.init(fromCore:)(uint64_t a1)
{
  swift_retain();
  uint64_t result = REAudioFileGroupAssetGetAssetCount();
  uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v38 = MEMORY[0x263F8EE78];
  if (result < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = result;
  if (!result) {
    goto LABEL_24;
  }
  uint64_t v30 = v1;
  uint64_t v6 = 0;
  unint64_t v7 = 0x2681BB000uLL;
  uint64_t v8 = &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Int>>;
  long long v35 = xmmword_22830EC60;
  do
  {
    uint64_t AssetAtIndex = REAudioFileGroupAssetGetAssetAtIndex();
    if (AssetAtIndex)
    {
      uint64_t v13 = AssetAtIndex;
      id v14 = (id)REAssetGetSwiftObject();
      type metadata accessor for AudioResource();
      if (swift_dynamicCastClass()) {
        goto LABEL_8;
      }
      swift_unknownObjectRelease();
      Swift::UInt32 v16 = REAssetHandleAssetType();
      if (*(void *)(v7 + 1776) != -1) {
        swift_once();
      }
      uint64_t v17 = v8[453];
      if (!*(void *)(v17 + 16) || (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16), (v19 & 1) == 0))
      {
        static os_log_type_t.error.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = v35;
        id v10 = (id)REAssetGetType();
        *(void *)(v9 + 56) = type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
        *(void *)(v9 + 64) = lazy protocol witness table accessor for type NSString and conformance NSObject();
        *(void *)(v9 + 32) = v10;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        uint64_t v11 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        goto LABEL_5;
      }
      long long v20 = *(_OWORD *)(*(void *)(v17 + 56) + 16 * v18);
      uint64_t v21 = *(void *)(*(void *)(v17 + 56) + 16 * v18 + 8);
      uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v21 + 16);
      long long v32 = v20;
      uint64_t v22 = v20;
      uint64_t v23 = type metadata accessor for Optional();
      uint64_t v33 = &v30;
      uint64_t v31 = v23;
      uint64_t v24 = *(void *)(v23 - 8);
      __n128 v25 = MEMORY[0x270FA5388](v23);
      uint64_t v27 = (char *)&v30 - v26;
      v34(v13, v22, v21, v25);
      uint64_t v28 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v27, 1, v22) == 1)
      {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v31);
        memset(v37, 0, sizeof(v37));
      }
      else
      {
        *(_OWORD *)&v37[24] = v32;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v37);
        (*(void (**)(uint64_t *, char *, uint64_t))(v28 + 32))(boxed_opaque_existential_1, v27, v22);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadableResource?);
      unint64_t v7 = 0x2681BB000;
      uint64_t v8 = &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Int>>;
      if (swift_dynamicCast())
      {
        if (v36)
        {
LABEL_8:
          type metadata accessor for AudioFileResource();
          if (swift_dynamicCastClass())
          {
            uint64_t v15 = swift_retain();
            MEMORY[0x22A688E10](v15);
            if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          swift_release();
        }
      }
    }
LABEL_5:
    ++v6;
  }
  while (v5 != v6);
  uint64_t v4 = v38;
  uint64_t v1 = v30;
LABEL_24:
  *(void *)(v1 + 24) = v4;
  swift_release();
  return AudioResource.init(fromCore:)(a1);
}

uint64_t static AudioFileGroupResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24));
}

uint64_t AudioFileGroupResource.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t AudioFileGroupResource.deinit()
{
  uint64_t v0 = AudioResource.deinit();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioFileGroupResource.__deallocating_deinit()
{
  AudioResource.deinit();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t AudioFileGroupResource.hash(into:)()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_10;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v5 = MEMORY[0x22A689930](i, v1);
      Hasher._combine(_:)(*(void *)(v5 + 16));
      swift_unknownObjectRelease();
    }
  }
  else
  {
    for (uint64_t j = 0; j != v2; ++j)
    {
      uint64_t v7 = *(void *)(v1 + 8 * j + 32);
      Hasher._combine(_:)(*(void *)(v7 + 16));
    }
  }
LABEL_10:

  return swift_bridgeObjectRelease();
}

Swift::Int AudioFileGroupResource.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioFileGroupResource()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AudioFileGroupResource()
{
  return AudioFileGroupResource.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioFileGroupResource()
{
  return Hasher._finalize()();
}

uint64_t AudioFileGroupResource.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_22830EC60;
  *(void *)(v8 + 32) = 0x656372756F736572;
  *(void *)(v8 + 40) = 0xE900000000000073;
  uint64_t v9 = *(void *)(v0 + 24);
  *(void *)(v8 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AudioFileResource]);
  *(void *)(v8 + 48) = v9;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  type metadata accessor for AudioFileGroupResource();
  swift_retain();
  swift_bridgeObjectRetain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance AudioFileGroupResource()
{
  return AudioFileGroupResource.customMirror.getter();
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0;
    MEMORY[0x22A696520](&v3, 8);
    uint64_t result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0;
          MEMORY[0x22A696520](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for AudioFileGroupResource()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error;
  if (!lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error;
  if (!lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileGroupResource.Error and conformance AudioFileGroupResource.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioResource.CoreREError and conformance AudioResource.CoreREError;
  if (!lazy protocol witness table cache variable for type AudioResource.CoreREError and conformance AudioResource.CoreREError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.CoreREError and conformance AudioResource.CoreREError);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AudioFileGroupResource(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type AudioFileGroupResource and conformance AudioResource(&lazy protocol witness table cache variable for type AudioFileGroupResource and conformance AudioResource, a2, (void (*)(uint64_t))type metadata accessor for AudioFileGroupResource);
}

uint64_t method lookup function for AudioFileGroupResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AudioFileGroupResource);
}

uint64_t dispatch thunk of AudioFileGroupResource.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

unint64_t lazy protocol witness table accessor for type CollisionPlane_v1 and conformance CollisionPlane_v1()
{
  unint64_t result = lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1;
  if (!lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionPlane_v1 and conformance CollisionPlane_v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UUID? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type UUID? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UUID?);
    lazy protocol witness table accessor for type AudioFileGroupResource and conformance AudioResource(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x263F07508]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AudioFileGroupResource and conformance AudioResource(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory;
  if (!lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory;
  if (!lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkSendBlockingCategory and conformance NetworkSendBlockingCategory);
  }
  return result;
}

uint64_t RKARSegmentationComponent.segmentationBuffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RKARSegmentationComponent.segmentationBuffer.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *unint64_t v1 = a1;
  return result;
}

uint64_t (*RKARSegmentationComponent.segmentationBuffer.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RKARSegmentationComponent.estimatedDepthData.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RKARSegmentationComponent.estimatedDepthData.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*RKARSegmentationComponent.estimatedDepthData.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RKARSegmentationComponent.cameraTextureY.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RKARSegmentationComponent.cameraTextureY.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*RKARSegmentationComponent.cameraTextureY.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RKARSegmentationComponent.cameraTextureCbCr.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RKARSegmentationComponent.cameraTextureCbCr.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*RKARSegmentationComponent.cameraTextureCbCr.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double RKARSegmentationComponent.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t RKARSegmentationComponent.init(segmentationBuffer:estimatedDepthData:cameraTextureY:cameraTextureCbCr:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

id static RKARSegmentationComponent.__fromCore(_:)@<X0>(void *a1@<X8>)
{
  id v2 = (id)REARSegmentationComponentGetSegmentationBuffer();
  id v3 = (id)REARSegmentationComponentGetEstimatedDepthData();
  id v4 = (id)REARSegmentationComponentGetCameraTextureY();
  id result = (id)REARSegmentationComponentGetCameraTextureCbCr();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = result;
  return result;
}

uint64_t RKARSegmentationComponent.__toCore(_:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  if (v1) {
    REARSegmentationComponentSetSegmentationBuffer();
  }
  if (v2) {
    REARSegmentationComponentSetEstimatedDepthData();
  }
  if (v4) {
    REARSegmentationComponentSetCameraTextureY();
  }
  if (v3) {
    REARSegmentationComponentSetCameraTextureCbCr();
  }

  return RENetworkMarkComponentDirty();
}

void static RKARSegmentationComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 46;
}

id protocol witness for static Component.__fromCore(_:) in conformance RKARSegmentationComponent@<X0>(void *a1@<X8>)
{
  id v2 = (id)REARSegmentationComponentGetSegmentationBuffer();
  id v3 = (id)REARSegmentationComponentGetEstimatedDepthData();
  id v4 = (id)REARSegmentationComponentGetCameraTextureY();
  id result = (id)REARSegmentationComponentGetCameraTextureCbCr();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance RKARSegmentationComponent()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  if (v1) {
    REARSegmentationComponentSetSegmentationBuffer();
  }
  if (v2) {
    REARSegmentationComponentSetEstimatedDepthData();
  }
  if (v4) {
    REARSegmentationComponentSetCameraTextureY();
  }
  if (v3) {
    REARSegmentationComponentSetCameraTextureCbCr();
  }

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance RKARSegmentationComponent(_DWORD *a1@<X8>)
{
  *a1 = 46;
}

uint64_t destroy for RKARSegmentationComponent()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

void *initializeWithCopy for RKARSegmentationComponent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for RKARSegmentationComponent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_OWORD *assignWithTake for RKARSegmentationComponent(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RKARSegmentationComponent(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RKARSegmentationComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)id result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)id result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RKARSegmentationComponent()
{
  return &type metadata for RKARSegmentationComponent;
}

uint64_t __RKEntityTrigger.init()()
{
  uint64_t result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 18) = 0;
  return result;
}

uint64_t __RKEntityTrigger.deinit()
{
  return v0;
}

uint64_t __RKEntityTrigger.reversible.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t __RKEntityTrigger.reversible.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  return result;
}

uint64_t __RKEntityTrigger.shouldReverse.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t __RKEntityTrigger.shouldReverse.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 17) = a1;
  return result;
}

uint64_t (*__RKEntityTrigger.shouldReverse.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityTrigger.shouldFireAlternate.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t __RKEntityTrigger.shouldFireAlternate.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 18) = a1;
  return result;
}

uint64_t (*__RKEntityTrigger.shouldFireAlternate.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityTrigger.matches(with:)()
{
  type metadata accessor for __RKEntityTriggerGroup();
  uint64_t v1 = swift_dynamicCastClass();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  swift_beginAccess();
  unint64_t v3 = *(void *)(v2 + 24);
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_4;
    }
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    return v4;
  }
LABEL_23:
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_4:
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = MEMORY[0x22A689930](0, v3);
LABEL_7:
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 184);
    char v8 = v7(v6);
    swift_release();
    if (v8)
    {
      uint64_t v4 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = v4 - 1;
      while (1)
      {
        uint64_t v4 = v10 != v9;
        if (v10 == v9) {
          break;
        }
        unint64_t v11 = v9 + 1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = MEMORY[0x22A689930](v9 + 1, v3);
          if (__OFADD__(v11, 1)) {
            goto LABEL_21;
          }
        }
        else
        {
          if (v11 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_22;
          }
          uint64_t v12 = *(void *)(v3 + 8 * v9 + 40);
          swift_retain();
          if (__OFADD__(v11, 1))
          {
LABEL_21:
            __break(1u);
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
        }
        char v13 = v7(v12);
        swift_release();
        ++v9;
        if (v13) {
          goto LABEL_19;
        }
      }
    }
    goto LABEL_19;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v6 = *(void *)(v3 + 32);
    swift_retain();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityTrigger.description.getter()
{
  return _typeName(_:qualified:)();
}

uint64_t __RKEntityTrigger.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(unsigned char *)(result + 18) = 0;
  return result;
}

uint64_t __RKEntityTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTrigger()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t __RKEntityTrigger.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for __RKEntityTrigger();
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(unsigned char *)(result + 18) = 0;
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for __RKEntityTrigger()
{
  return self;
}

uint64_t sub_227F4CBA8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_227F4CBF0(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 16) = v2;
  return result;
}

uint64_t sub_227F4CC34@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 17);
  return result;
}

uint64_t sub_227F4CC7C(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 17) = v2;
  return result;
}

uint64_t sub_227F4CCC0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 18);
  return result;
}

uint64_t sub_227F4CD08(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 18) = v2;
  return result;
}

uint64_t method lookup function for __RKEntityTrigger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityTrigger);
}

uint64_t dispatch thunk of __RKEntityTrigger.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of __RKEntityTrigger.reversible.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of __RKEntityTrigger.reversible.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of __RKEntityTrigger.reversible.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldReverse.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldReverse.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldReverse.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldFireAlternate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldFireAlternate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of __RKEntityTrigger.shouldFireAlternate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of __RKEntityTrigger.matches(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of __RKEntityTrigger.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of __RKEntityTrigger.clone(matching:newEntity:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

double AnimationView.init(name:source:targetPath:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v22 = *(void *)a4;
  uint64_t v23 = *(void *)(a4 + 8);
  char v24 = *(unsigned char *)(a4 + 16);
  char v25 = *a6;
  char v26 = *a7;
  outlined init with copy of __REAssetService(a3, (uint64_t)v40);
  v38.i64[0] = v22;
  v38.i64[1] = v23;
  char v39 = v24;
  char v37 = v25;
  char v36 = v26;
  AnimationView.init(source:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)((uint64_t)v40, a1, a2, &v38, a5, &v37, &v36, a8, (uint64_t)v41, a10, a11, a12, a13 & 1, a14, a15 & 1, a16, a17 & 1);
  __swift_destroy_boxed_opaque_existential_1(a3);
  long long v27 = v41[7];
  *(_OWORD *)(a9 + 96) = v41[6];
  *(_OWORD *)(a9 + 112) = v27;
  *(_OWORD *)(a9 + 128) = v41[8];
  *(void *)(a9 + 144) = v42;
  long long v28 = v41[3];
  *(_OWORD *)(a9 + 32) = v41[2];
  *(_OWORD *)(a9 + 48) = v28;
  long long v29 = v41[5];
  *(_OWORD *)(a9 + 64) = v41[4];
  *(_OWORD *)(a9 + 80) = v29;
  double result = *(double *)v41;
  long long v31 = v41[1];
  *(_OWORD *)a9 = v41[0];
  *(_OWORD *)(a9 + 16) = v31;
  return result;
}

uint64_t FromToByAnimation.init(name:from:to:by:duration:additive:targetPath:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, unsigned __int8 *a14, char *a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23)
{
  int v58 = a8;
  int v60 = a6;
  uint64_t v61 = a4;
  uint64_t v62 = a3;
  uint64_t v59 = a2;
  uint64_t v56 = a9;
  uint64_t v57 = a1;
  uint64_t v54 = a18;
  uint64_t v55 = a16;
  uint64_t v52 = a20;
  uint64_t v51 = a23;
  uint64_t v48 = a22;
  int v53 = a17 & 1;
  int v50 = a19 & 1;
  int v49 = a21 & 1;
  uint64_t v29 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  long long v32 = &v44[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v33);
  long long v35 = &v44[-v34];
  __n128 v37 = MEMORY[0x270FA5388](v36);
  char v39 = &v44[-v38];
  uint64_t v47 = *(void *)a7;
  uint64_t v46 = *(void *)(a7 + 8);
  LOBYTE(a7) = *(unsigned char *)(a7 + 16);
  int v45 = *a14;
  char v40 = *a15;
  int v41 = *(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v30 + 16);
  v41(&v44[-v38], v62, v29, v37);
  ((void (*)(unsigned char *, uint64_t, uint64_t))v41)(v35, v61, v29);
  ((void (*)(unsigned char *, uint64_t, uint64_t))v41)(v32, a5, v29);
  v67[0] = 0;
  v67[1] = 0;
  int v68 = 0;
  char v69 = 10;
  v65[0] = v47;
  v65[1] = v46;
  char v66 = a7;
  char v64 = v45;
  char v63 = v40;
  FromToByAnimation.init(name:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(v57, v59, (uint64_t)v39, (uint64_t)v35, (uint64_t)v32, v67, v60, v65, v56, a10, a11, a12, a13, v58, &v64, &v63, v55, v53, v54,
    v50,
    v52,
    v49);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v42(a5, v29);
  v42(v61, v29);
  return ((uint64_t (*)(uint64_t, uint64_t))v42)(v62, v29);
}

uint64_t OrbitAnimation.init(name:duration:axis:startTransform:spinClockwise:orientToPath:rotationCount:additive:targetPath:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t *a6@<X5>, int a7@<W6>, char *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, __n128 a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, __n128 a14@<Q4>, float a15@<S5>, double a16@<D6>, double a17@<D7>, char *a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,float a25)
{
  uint64_t v33 = *a6;
  uint64_t v34 = a6[1];
  char v35 = *((unsigned char *)a6 + 16);
  char v36 = *a8;
  char v37 = *a18;
  v49[0] = 0;
  v49[1] = 0;
  char v50 = -1;
  v57[0] = v36;
  v54[0] = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a1, a2, v49, 0, v57, v54, a19, a20 & 1, (uint64_t)v55, a16, a17, a25, a21, a22 & 1, a23, a24 & 1);
  type metadata accessor for TimelineDefinition();
  uint64_t v38 = swift_allocObject();
  long long v39 = v55[7];
  *(_OWORD *)(a9 + 152) = v55[6];
  *(_OWORD *)(a9 + 168) = v39;
  *(_OWORD *)(a9 + 184) = v55[8];
  long long v40 = v55[3];
  *(_OWORD *)(a9 + 88) = v55[2];
  *(_OWORD *)(a9 + 104) = v40;
  long long v41 = v55[5];
  *(_OWORD *)(a9 + 120) = v55[4];
  *(_OWORD *)(a9 + 136) = v41;
  long long v42 = v55[1];
  *(_OWORD *)(a9 + 56) = v55[0];
  *(void *)(v38 + 16) = 0;
  LOBYTE(v49[0]) = 0;
  v57[0] = 0;
  v54[0] = 0;
  char v53 = 0;
  char v52 = 0;
  char v51 = 0;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = v33;
  *(void *)(a9 + 24) = v34;
  *(unsigned char *)(a9 + 32) = v35;
  *(_DWORD *)(a9 + 36) = a7;
  *(unsigned char *)(a9 + 40) = 0;
  *(unsigned char *)(a9 + 41) = v37;
  *(unsigned char *)(a9 + 42) = 0;
  *(unsigned char *)(a9 + 43) = a5;
  *(void *)(a9 + 48) = v38;
  *(void *)(a9 + 200) = v56;
  *(_OWORD *)(a9 + 72) = v42;
  *(double *)(a9 + 208) = a10;
  *(unsigned char *)(a9 + 216) = 0;
  *(__n128 *)(a9 + 224) = a11;
  *(unsigned char *)(a9 + 240) = v53;
  *(__n128 *)(a9 + 256) = a12;
  *(__n128 *)(a9 + 272) = a13;
  *(__n128 *)(a9 + 288) = a14;
  *(unsigned char *)(a9 + 304) = v52;
  *(unsigned char *)(a9 + 305) = a3;
  *(unsigned char *)(a9 + 306) = a4;
  *(float *)(a9 + 308) = a15;
  *(unsigned char *)(a9 + 312) = v51;

  return swift_bridgeObjectRetain();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for AccessibilityComponent.RotorTypeInternal(0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for __RKEntityTriggerSpecification);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for __RKEntityActionSpecification);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[4 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 4 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 4 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[9 * v8 + 4];
  if (a1 + 32 < v9 + 72 * v2 && v9 < a1 + 32 + 72 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  int64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[10 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[10 * v2] && (unint64_t)v9 < a1 + 32 + 80 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 80 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    unint64_t v15 = v4 + v2;
  }
  else {
    unint64_t v15 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = (unint64_t)&v3[65 * v9 + 4];
  if (a1 + 32 < v10 + 520 * v8 && v10 < a1 + 32 + 520 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  unint64_t v13 = __OFADD__(v12, v8);
  unint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[13 * v8 + 4];
  if (a1 + 32 < v9 + 104 * v2 && v9 < a1 + 32 + 104 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t ChildCount;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t vars8;

  unint64_t v3 = v1;
  ChildCount = REEntityGetChildCount();
  if (ChildCount < 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v8 = v22 + v2;
    if (!__OFADD__(v22, v2)) {
      goto LABEL_8;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  unint64_t v2 = ChildCount;
  if (ChildCount)
  {
    uint64_t v6 = 0;
    while (v6 < REEntityGetChildCount())
    {
      if (v2 == ++v6) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
LABEL_6:
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_28;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t v8 = v7 + v2;
  if (__OFADD__(v7, v2)) {
    goto LABEL_30;
  }
LABEL_8:
  uint64_t v9 = *v3;
  isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject();
  void *v3 = v9;
  uint64_t v11 = 0;
  if ((isUniquelyReferenced_nonNull_bridgeObject & 1) != 0
    && (v9 & 0x8000000000000000) == 0
    && (v9 & 0x4000000000000000) == 0)
  {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v11 = 1;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v13 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v13 <= v8) {
    unint64_t v13 = v8;
  }
  swift_bridgeObjectRetain();
  unint64_t v14 = MEMORY[0x22A689940](v11, v13, 1, v9);
  swift_bridgeObjectRelease();
  void *v3 = v14;
  uint64_t v12 = v14 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  unint64_t v15 = *(void *)(v12 + 16);
  uint64_t v16 = (*(void *)(v12 + 24) >> 1) - v15;
  unint64_t v17 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v29, v12 + 8 * v15 + 32, v16, a1);
  if (v17 < v2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v17 >= 1)
  {
    unint64_t v18 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    char v19 = __OFADD__(v18, v17);
    uint64_t v20 = v18 + v17;
    if (v19)
    {
      __break(1u);
      goto LABEL_44;
    }
    *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v20;
  }
  if (v17 != v16) {
    goto LABEL_23;
  }
LABEL_32:
  uint64_t v16 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  int64_t v23 = specialized Entity.ChildCollection.IndexingIterator.next()();
  if (!v23) {
    goto LABEL_23;
  }
  char v24 = v23;
  while (1)
  {
LABEL_35:
    char v25 = *v3 & 0xFFFFFFFFFFFFFF8;
    if (v16 + 1 > *(void *)(v25 + 0x18) >> 1)
    {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      char v25 = *v3 & 0xFFFFFFFFFFFFFF8;
    }
    char v26 = *(void *)(v25 + 24) >> 1;
    if (v16 < v26) {
      break;
    }
    *(void *)(v25 + 16) = v16;
  }
  long long v27 = v25 + 32;
  while (1)
  {
    *(void *)(v27 + 8 * v16++) = v24;
    long long v28 = specialized Entity.ChildCollection.IndexingIterator.next()();
    if (!v28) {
      break;
    }
    char v24 = v28;
    if (v26 == v16)
    {
      uint64_t v16 = v26;
      *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v26;
      goto LABEL_35;
    }
  }
LABEL_44:
  *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_23:
  swift_release();

  return specialized Array._endMutation()();
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for __RKEntityInteractionSpecification);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[2 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 2 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 2 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[4 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 32 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized Array.append<A>(contentsOf:)(Swift::Int result, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t result = String.UTF8View._foreignCount()();
    uint64_t v3 = result;
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else
  {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }
  int64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }
  else
  {
    int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    void *v2 = v4;
    if (!isUniquelyReferenced_nonNull_native || *((void *)v4 + 3) >> 1 < v6)
    {
      if (v5 <= v6) {
        int64_t v8 = v5 + v3;
      }
      else {
        int64_t v8 = v5;
      }
      int64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v8, 1, v4);
      void *v2 = v4;
    }
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if (v9) {
      goto LABEL_22;
    }
    uint64_t v10 = result;
    uint64_t result = swift_bridgeObjectRelease_n();
    if (v10 >= v3)
    {
      if (v10 < 1)
      {
LABEL_17:
        void *v2 = v4;
        return result;
      }
      uint64_t v11 = *((void *)v4 + 2);
      BOOL v12 = __OFADD__(v11, v10);
      uint64_t v13 = v11 + v10;
      if (!v12)
      {
        *((void *)v4 + 2) = v13;
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for Entity, &lazy protocol witness table cache variable for type [Entity] and conformance [A], &demangling cache variable for type metadata for [Entity], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for __REAsset, &lazy protocol witness table cache variable for type [__REAsset] and conformance [A], &demangling cache variable for type metadata for [__REAsset], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for __RKEntityTapTrigger, &lazy protocol witness table cache variable for type [__RKEntityTapTrigger] and conformance [A], &demangling cache variable for type metadata for [__RKEntityTapTrigger], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v5 + v3 <= *(void *)(v4 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v4 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v3) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v4 + 16);
  if ((*(void *)(v4 + 24) >> 1) - v8 < v3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  char v9 = (void *)(v4 + 8 * v8 + 32);
  if (a1 + 32 < (unint64_t)v9 + 8 * v3 && (unint64_t)v9 < a1 + 32 + 8 * v3) {
    goto LABEL_21;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v3);
  if (!v3)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v2 = v4;
    return result;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  BOOL v12 = __OFADD__(v11, v3);
  uint64_t v13 = v11 + v3;
  if (!v12)
  {
    *(void *)(v4 + 16) = v13;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v14 = v13 + v11;
    if (!__OFADD__(v13, v11)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v14 = v13 + v11;
  if (__OFADD__(v13, v11)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v5 = v12;
  uint64_t v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v13 = 1;
  }
  uint64_t v23 = v11;
  uint64_t v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62) {
    goto LABEL_27;
  }
  uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14) {
      uint64_t v17 = v14;
    }
    swift_bridgeObjectRetain();
    unint64_t v12 = MEMORY[0x22A689940](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    unint64_t *v5 = v12;
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    uint64_t v11 = v23;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v16 + 8 * *(void *)(v16 + 16) + 32, (*(void *)(v16 + 24) >> 1) - *(void *)(v16 + 16), a1, (void (*)(void))a2, a3, a4, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 >= 1)
  {
    uint64_t v20 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

char *specialized Array.append<A>(contentsOf:)(char *result, char *a2)
{
  uint64_t v3 = *(void **)v2;
  int64_t v4 = *(void *)(*(void *)v2 + 16);
  int64_t v5 = (int64_t)&a2[v4];
  if (__OFADD__(v4, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = (uint64_t)a2;
  uint64_t v7 = result;
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = v3[3] >> 1, v9 < v5))
  {
    if (v4 <= v5) {
      int64_t v10 = v5;
    }
    else {
      int64_t v10 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v3);
    int64_t v9 = v3[3] >> 1;
  }
  uint64_t v11 = v3[2];
  int64_t v12 = v9 - v11;
  uint64_t result = specialized UnsafeMutableBufferPointer._copyContents(initializing:)((char *)&v3[2 * v11 + 4], v9 - v11, v7, v6);
  if (v13 < v6) {
    goto LABEL_15;
  }
  if (v13 >= 1)
  {
    uint64_t v14 = v3[2];
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
LABEL_33:
      int64_t v23 = v12 + 1;
LABEL_34:
      v3[2] = v23;
      goto LABEL_13;
    }
    v3[2] = v16;
  }
  if (v13 != v12) {
    goto LABEL_13;
  }
LABEL_16:
  if (result) {
    BOOL v17 = result == a2;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    int64_t v12 = v3[2];
    unint64_t v18 = result + 16;
    uint64_t v19 = *(void *)result;
    uint64_t v20 = *((void *)result + 1);
    while (1)
    {
      unint64_t v21 = v3[3];
      int64_t v22 = v21 >> 1;
      int64_t v23 = v12 + 1;
      if ((uint64_t)(v21 >> 1) < v12 + 1)
      {
        uint64_t v30 = a2;
        long long v28 = v3;
        uint64_t v29 = v19;
        uint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v12 + 1, 1, v28);
        uint64_t v19 = v29;
        a2 = v30;
        uint64_t v3 = result;
        int64_t v22 = *((void *)result + 3) >> 1;
        if (v12 >= v22) {
          goto LABEL_21;
        }
LABEL_24:
        char v24 = &v3[2 * v12];
        v24[4] = v19;
        v24[5] = v20;
        if (v18 == a2) {
          goto LABEL_34;
        }
        char v25 = v18;
        v18 += 16;
        while (1)
        {
          long long v26 = *(_OWORD *)v25;
          v25 += 16;
          long long v27 = v26;
          if (v22 - 1 == v12) {
            break;
          }
          *(_OWORD *)&v3[2 * v12++ + 6] = v27;
          v18 += 16;
          if (v25 == a2) {
            goto LABEL_33;
          }
        }
        uint64_t v20 = *((void *)&v27 + 1);
        uint64_t v19 = v27;
        int64_t v12 = v22;
        v3[2] = v22;
      }
      else
      {
        if (v12 < v22) {
          goto LABEL_24;
        }
LABEL_21:
        v3[2] = v12;
      }
    }
  }
LABEL_13:
  *(void *)uint64_t v2 = v3;
  return result;
}

uint64_t static MeshResource.__generateFace(from:fillMesh:)(uint64_t a1, char a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  outlined init with copy of Any(a1, (uint64_t)v30);
  type metadata accessor for ARFaceGeometry();
  swift_dynamicCast();
  int64_t v4 = &off_264838000;
  unint64_t v5 = (unint64_t)objc_msgSend(v29, sel_vertexCount);
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_35;
  }
  int v6 = v5;
  if (HIDWORD(v5)) {
    goto LABEL_35;
  }
  unint64_t v7 = (unint64_t)objc_msgSend(v29, sel_triangleCount);
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_35;
  }
  unsigned int v8 = v7;
  if (HIDWORD(v7)) {
    goto LABEL_35;
  }
  int64_t v9 = (__int16 *)objc_msgSend(v29, sel_triangleIndices);
  uint64_t v10 = (uint64_t)objc_msgSend(v29, sel_triangleCount);
  unint64_t v11 = (unsigned __int128)(v10 * (__int128)3) >> 64;
  uint64_t v12 = 3 * v10;
  if (v11 != (3 * v10) >> 63)
  {
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, (int64_t)v4, 1);
    uint64_t v13 = v30[0];
    goto LABEL_10;
  }
  if (!v12) {
    goto LABEL_11;
  }
  v30[0] = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 1) {
    goto LABEL_30;
  }
  if (*v9 < 0) {
    goto LABEL_35;
  }
  uint64_t v13 = v30[0];
  int v6 = (unsigned __int16)*v9;
  unint64_t v2 = *(void *)(v30[0] + 16);
  unint64_t v11 = *(void *)(v30[0] + 24);
  int64_t v4 = (__objc2_class **)(v2 + 1);
  if (v2 >= v11 >> 1) {
    goto LABEL_31;
  }
LABEL_10:
  *(void *)(v13 + 16) = v4;
  *(_DWORD *)(v13 + 4 * v2 + 32) = v6;
  uint64_t v14 = v12 - 1;
  if (v12 != 1)
  {
    unint64_t v24 = v2 + 9;
    char v25 = v9 + 1;
    while (1)
    {
      int v27 = *v25++;
      unsigned __int16 v26 = v27;
      if (v27 < 0) {
        break;
      }
      v30[0] = v13;
      unint64_t v28 = *(void *)(v13 + 24);
      if (v24 - 8 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v24 - 7, 1);
        uint64_t v13 = v30[0];
      }
      *(void *)(v13 + 16) = v24 - 7;
      *(_DWORD *)(v13 + 4 * v24++) = v26;
      if (!--v14) {
        goto LABEL_11;
      }
    }
    while (1)
    {
LABEL_35:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
LABEL_11:
  if (a2)
  {
    if (v8 >= 0xFFFFFFDE)
    {
      __break(1u);
    }
    else
    {
      specialized Array.append<A>(contentsOf:)((uint64_t)&outlined read-only object #0 of static MeshResource.__generateFace(from:fillMesh:));
      unsigned int v15 = v8 + 56;
      if (v8 + 34 < 0xFFFFFFEA)
      {
        specialized Array.append<A>(contentsOf:)((uint64_t)&outlined read-only object #1 of static MeshResource.__generateFace(from:fillMesh:));
        v8 += 78;
        if (v15 < 0xFFFFFFEA)
        {
          specialized Array.append<A>(contentsOf:)((uint64_t)&outlined read-only object #2 of static MeshResource.__generateFace(from:fillMesh:));
          goto LABEL_16;
        }
LABEL_34:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_34;
  }
LABEL_16:
  specialized Array.init(repeating:count:)(3, v8);
  specialized _copyCollectionToContiguousArray<A>(_:)((char *)objc_msgSend(v29, sel_vertices), (uint64_t)objc_msgSend(v29, sel_vertexCount));
  specialized _copyCollectionToContiguousArray<A>(_:)((char *)objc_msgSend(v29, sel_textureCoordinates), (uint64_t)objc_msgSend(v29, sel_vertexCount));
  swift_bridgeObjectRetain();
  uint64_t v16 = REGeomMeshCreateFromCoreAttributes();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v16)
  {
    uint64_t v17 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v17, (uint64_t)v30);
    uint64_t v18 = v31;
    uint64_t v19 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    uint64_t v20 = REAssetManagerMeshMemoryAssetCreate();
    if (v20)
    {
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
      if ((id)REAssetGetSwiftObject())
      {
        type metadata accessor for MeshResource();
        uint64_t v22 = swift_dynamicCastClass();
        if (v22)
        {
LABEL_22:
          RERelease();
          RERelease();

          return v22;
        }
        swift_unknownObjectRelease();
      }
      type metadata accessor for MeshResource();
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v21;
      RERetain();
      REAssetSetSwiftObject();
      goto LABEL_22;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationResource?);
      int64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      void v4[2] = a2;
      unsigned int v8 = v4;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        uint64_t v5 = a2 - 2;
        if (v5)
        {
          int v6 = v4 + 6;
          do
          {
            *v6++ = a1;
            swift_retain();
            --v5;
          }
          while (v5);
        }
        swift_retain();
      }
    }
    else
    {
      unsigned int v8 = (void *)MEMORY[0x263F8EE78];
      swift_release();
    }
    specialized Array._endMutation()();
    return (uint64_t)v8;
  }
  return result;
}

{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;

  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      int64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v5 = v4;
      void v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        int v6 = a2 - 2;
        if (v6)
        {
          unint64_t v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(int a1, size_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return v4;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v5 = a1;
    if (a1)
    {
      type metadata accessor for simd_float4x4(0);
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v5;
      uint64_t v7 = 32;
      do
      {
        unsigned int v8 = (__n128 *)(result + v7);
        *unsigned int v8 = a2;
        v8[1] = a3;
        long long v8[2] = a4;
        void v8[3] = a5;
        v7 += 64;
        --v5;
      }
      while (v5);
    }
    else
    {
      return MEMORY[0x263F8EE78];
    }
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, __n128 a2, __n128 a3, __n128 a4)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v4 = a1;
    if (a1)
    {
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v4;
      uint64_t v6 = 32;
      do
      {
        uint64_t v7 = (__n128 *)(result + v6);
        *uint64_t v7 = a2;
        v7[1] = a3;
        _OWORD v7[2] = a4;
        v6 += 48;
        --v4;
      }
      while (v4);
    }
    else
    {
      return MEMORY[0x263F8EE78];
    }
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(char a1, size_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1 & 1, a2);
    return v4;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, double a2, double a3)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  type metadata accessor for CGPoint(0);
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a1;
  uint64_t v5 = (double *)(result + 32);
  if (a1 < 4)
  {
    unint64_t v6 = 0;
    double v7 = a3;
    double v8 = a2;
LABEL_9:
    unint64_t v14 = a1 - v6;
    do
    {
      double *v5 = v8;
      v5[1] = v7;
      v5 += 2;
      --v14;
    }
    while (v14);
    return result;
  }
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += 2 * (a1 & 0xFFFFFFFFFFFFFFFCLL);
  double v8 = a2;
  int64x2_t v9 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  double v7 = a3;
  int64x2_t v10 = vdupq_lane_s64(*(uint64_t *)&a3, 0);
  unint64_t v11 = (double *)(result + 64);
  unint64_t v12 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v13 = v11 - 4;
    vst2q_f64(v13, *(float64x2x2_t *)v9.i8);
    vst2q_f64(v11, *(float64x2x2_t *)v9.i8);
    v11 += 8;
    v12 -= 4;
  }
  while (v12);
  if (v6 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unsigned int a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a2;
  uint64_t v5 = (_WORD *)(result + 32);
  if (a2 < 0x10)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 += a2 & 0xFFFFFFFFFFFFFFF0;
  int16x8_t v7 = vdupq_n_s16(a1);
  double v8 = (int16x8_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v8[-1] = v7;
    *double v8 = v7;
    v8 += 2;
    v9 -= 16;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

{
  uint64_t result;
  unsigned int *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(result + 16) = a2;
  uint64_t v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  int16x8_t v7 = vdupq_n_s32(a1);
  double v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *double v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, __n128 a2)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v4 = 0;
    *(void *)(result + 16) = a1;
    do
    {
      uint64_t v5 = (__n128 *)(result + 16 * v4++);
      _OWORD v5[2] = a2;
    }
    while (a1 != v4);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

unint64_t type metadata accessor for ARFaceGeometry()
{
  unint64_t result = lazy cache variable for type metadata for ARFaceGeometry;
  if (!lazy cache variable for type metadata for ARFaceGeometry)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ARFaceGeometry);
  }
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    unint64_t v10 = 0;
LABEL_15:
    *a1 = a4;
    a1[1] = v10;
    return v10;
  }
  if (!a3)
  {
LABEL_13:
    unint64_t v10 = a3;
    goto LABEL_15;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a4 + 16))
    {
      unint64_t v9 = (_OWORD *)(a4 + 32);
      unint64_t v10 = 1;
      while (1)
      {
        long long v11 = v9[7];
        void v18[6] = v9[6];
        v18[7] = v11;
        long long v12 = v9[9];
        v18[8] = v9[8];
        v18[9] = v12;
        long long v13 = v9[3];
        id v18[2] = v9[2];
        void v18[3] = v13;
        long long v14 = v9[5];
        v18[4] = v9[4];
        v18[5] = v14;
        long long v15 = v9[1];
        v18[0] = *v9;
        v18[1] = v15;
        memmove(a2, v9, 0xA0uLL);
        if (a3 == v10)
        {
          outlined retain of IKRig.Constraint((uint64_t)v18);
          goto LABEL_13;
        }
        unint64_t v16 = *(void *)(a4 + 16);
        if (v10 == v16) {
          break;
        }
        a2 += 160;
        outlined retain of IKRig.Constraint((uint64_t)v18);
        v9 += 10;
        if (v10++ >= v16)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      outlined retain of IKRig.Constraint((uint64_t)v18);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  _OWORD *v9;
  unint64_t v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  unint64_t v16;
  _OWORD v18[11];

  uint64_t result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    unint64_t v10 = 0;
LABEL_15:
    *a1 = a4;
    a1[1] = v10;
    return v10;
  }
  if (!a3)
  {
LABEL_13:
    unint64_t v10 = a3;
    goto LABEL_15;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a4 + 16))
    {
      unint64_t v9 = (_OWORD *)(a4 + 32);
      unint64_t v10 = 1;
      while (1)
      {
        long long v11 = v9[9];
        v18[8] = v9[8];
        v18[9] = v11;
        _OWORD v18[10] = v9[10];
        long long v12 = v9[5];
        v18[4] = v9[4];
        v18[5] = v12;
        long long v13 = v9[7];
        void v18[6] = v9[6];
        v18[7] = v13;
        long long v14 = v9[1];
        v18[0] = *v9;
        v18[1] = v14;
        long long v15 = v9[3];
        id v18[2] = v9[2];
        void v18[3] = v15;
        memmove(a2, v9, 0xB0uLL);
        if (a3 == v10)
        {
          outlined retain of String?((uint64_t)v18);
          goto LABEL_13;
        }
        unint64_t v16 = *(void *)(a4 + 16);
        if (v10 == v16) {
          break;
        }
        a2 += 176;
        outlined retain of String?((uint64_t)v18);
        v9 += 11;
        if (v10++ >= v16)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      outlined retain of String?((uint64_t)v18);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (!a2)
  {
    a3 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_11:
    *a1 = a4;
    a1[1] = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a4 + 16);
    if (v9)
    {
      unint64_t v10 = 0;
      uint64_t v11 = a4 + 32;
      while (v10 < *(void *)(a4 + 16))
      {
        uint64_t result = outlined init with copy of MeshResource._Proto_Level_v1(v11, a2);
        if (a3 - 1 == v10) {
          goto LABEL_11;
        }
        a2 += 96;
        ++v10;
        v11 += 96;
        if (v9 == v10) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    a3 = v9;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

{
  void *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  int16x8_t v7 = specialized static Entity.ComponentSet.Iterator.buildSnapshot(_:)(a4);
  uint64_t result = swift_release();
  if (!a2)
  {
    a3 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_11:
    *a1 = v7;
    a1[1] = v7;
    a1[2] = a3;
    swift_bridgeObjectRetain();
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = v7[2];
    if (v9)
    {
      unint64_t v10 = 0;
      uint64_t v11 = (uint64_t)(v7 + 4);
      while (v10 < v7[2])
      {
        uint64_t result = outlined init with copy of __REAssetService(v11, a2);
        if (a3 - 1 == v10) {
          goto LABEL_11;
        }
        a2 += 40;
        ++v10;
        v11 += 40;
        if (v9 == v10) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    a3 = v9;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

{
  uint64_t PinCount;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  long long v15;
  long long v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  unsigned char v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  long long v28;
  long long v29;
  _OWORD v30[5];
  unsigned char v31[96];

  swift_retain();
  REPinComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    PinCount = REPinComponentGetPinCount();
  }
  else {
    PinCount = 0;
  }
  uint64_t result = swift_release();
  if (!a2)
  {
    a3 = 0;
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_17:
    unint64_t v10 = -1;
    goto LABEL_21;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v20 = a3;
    a3 = PinCount & ~(PinCount >> 63);
    if (PinCount >= 1)
    {
      unint64_t v10 = 0;
      while (1)
      {
        REPinComponentGetComponentType();
        uint64_t result = REEntityGetComponentByClass();
        if (!result) {
          goto LABEL_23;
        }
        REPinComponentGetPinNameAtIndex();
        uint64_t v11 = String.init(cString:)();
        long long v13 = v12;
        REPinComponentGetPinOffsetPoseAtIndex();
        long long v15 = v14;
        HIDWORD(v15) = HIDWORD(v22);
        uint64_t v21 = v16;
        uint64_t v22 = v15;
        if (REPinComponentIsSkeletalJointPinAtIndex())
        {
          REPinComponentGetSkeletalJointNameAtIndex();
          uint64_t v17 = String.init(cString:)();
          uint64_t v19 = v18;
          swift_weakInit();
          unsigned __int16 v26 = 0;
          int v27 = 0;
          unint64_t v28 = v22;
          id v29 = v21;
          swift_weakAssign();
          unint64_t v24 = v11;
          char v25 = v13;
          swift_bridgeObjectRelease();
          unsigned __int16 v26 = v17;
          int v27 = v19;
        }
        else
        {
          swift_weakInit();
          unsigned __int16 v26 = 0;
          int v27 = 0;
          unint64_t v28 = v22;
          id v29 = v21;
          swift_weakAssign();
          unint64_t v24 = v11;
          char v25 = v13;
          swift_bridgeObjectRelease();
          unsigned __int16 v26 = 0;
          int v27 = 0;
        }
        outlined init with take of GeometricPin((uint64_t)v23, (uint64_t)v30);
        outlined init with take of GeometricPin((uint64_t)v30, (uint64_t)v31);
        outlined init with take of GeometricPin((uint64_t)v31, a2);
        if (v20 - 1 == v10)
        {
          a3 = v20;
          goto LABEL_21;
        }
        a2 += 80;
        if (a3 == ++v10) {
          goto LABEL_19;
        }
      }
    }
    unint64_t v10 = 0;
LABEL_19:
    memset(v30, 0, sizeof(v30));
    outlined destroy of GeometricPin?((uint64_t)v30);
LABEL_21:
    *a1 = a4;
    a1[1] = PinCount;
    a1[2] = v10;
    return a3;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t *a1, void *a2, uint64_t a3)
{
  long long v7 = v3[1];
  long long v27 = *v3;
  long long v28 = v7;
  uint64_t v29 = *((void *)v3 + 4);
  outlined init with take of Transform?((uint64_t)&v27 + 8, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v31, (uint64_t)&v35, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  unint64_t v8 = v35;
  if (!v35)
  {
    outlined init with take of Transform?((uint64_t)&v27, (uint64_t)v30, &demangling cache variable for type metadata for AnimationLibraryResource?);
    outlined init with take of Transform?((uint64_t)v30, (uint64_t)&v36, &demangling cache variable for type metadata for AnimationLibraryResource?);
    if (v36) {
      unint64_t v9 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    unint64_t v8 = v9;
  }
  outlined init with take of Transform?((uint64_t)&v27, (uint64_t)v34, &demangling cache variable for type metadata for AnimationLibraryResource?);
  outlined release of TimelineDefinition?((uint64_t)v34);
  outlined init with take of Transform?((uint64_t)&v28, (uint64_t)v33, &demangling cache variable for type metadata for String??);
  outlined release of String??(v33);
  outlined init with take of Transform?((uint64_t)&v29, (uint64_t)v32, &demangling cache variable for type metadata for [AnimationResource]?);
  uint64_t result = outlined release of [String : String]((uint64_t)v32);
  unint64_t v11 = v8 + 64;
  uint64_t v12 = -1 << *(unsigned char *)(v8 + 32);
  if (-v12 < 64) {
    uint64_t v13 = ~(-1 << -(char)v12);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & *(void *)(v8 + 64);
  if (!a2)
  {
    int64_t v15 = 0;
    a3 = 0;
LABEL_44:
    *a1 = v8;
    a1[1] = v11;
    a1[2] = ~v12;
    a1[3] = v15;
    a1[4] = v14;
    return a3;
  }
  if (!a3)
  {
    int64_t v15 = 0;
    goto LABEL_44;
  }
  if (a3 < 0) {
    goto LABEL_46;
  }
  int64_t v15 = 0;
  uint64_t v16 = 0;
  int64_t v17 = (unint64_t)(63 - v12) >> 6;
  uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
  if (!v14) {
    goto LABEL_14;
  }
LABEL_13:
  unint64_t v18 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  unint64_t v19 = v18 | (v15 << 6);
  while (1)
  {
    ++v16;
    int64_t v23 = (void *)(*(void *)(v8 + 48) + 16 * v19);
    uint64_t v24 = v23[1];
    uint64_t v25 = *(void *)(*(void *)(v8 + 56) + 8 * v19);
    *a2 = *v23;
    a2[1] = v24;
    a2[2] = v25;
    if (v16 == a3)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_43;
    }
    a2 += 3;
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    if (v14) {
      goto LABEL_13;
    }
LABEL_14:
    int64_t v20 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v20 >= v17) {
      goto LABEL_38;
    }
    unint64_t v21 = *(void *)(v11 + 8 * v20);
    if (!v21)
    {
      v15 += 2;
      if (v20 + 1 >= v17)
      {
        unint64_t v14 = 0;
        int64_t v15 = v20;
      }
      else
      {
        unint64_t v21 = *(void *)(v11 + 8 * v15);
        if (v21) {
          goto LABEL_19;
        }
        int64_t v22 = v20 + 2;
        if (v20 + 2 >= v17) {
          goto LABEL_38;
        }
        unint64_t v21 = *(void *)(v11 + 8 * v22);
        if (v21)
        {
LABEL_22:
          int64_t v20 = v22;
          goto LABEL_23;
        }
        int64_t v15 = v20 + 3;
        if (v20 + 3 < v17)
        {
          unint64_t v21 = *(void *)(v11 + 8 * v15);
          if (v21)
          {
LABEL_19:
            int64_t v20 = v15;
            goto LABEL_23;
          }
          int64_t v22 = v20 + 4;
          if (v20 + 4 >= v17)
          {
LABEL_38:
            unint64_t v14 = 0;
            goto LABEL_42;
          }
          unint64_t v21 = *(void *)(v11 + 8 * v22);
          if (!v21)
          {
            while (1)
            {
              int64_t v20 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_47;
              }
              if (v20 >= v17)
              {
                unint64_t v14 = 0;
                int64_t v15 = v17 - 1;
                goto LABEL_42;
              }
              unint64_t v21 = *(void *)(v11 + 8 * v20);
              ++v22;
              if (v21) {
                goto LABEL_23;
              }
            }
          }
          goto LABEL_22;
        }
        unint64_t v14 = 0;
        int64_t v15 = v20 + 2;
      }
LABEL_42:
      a3 = v16;
LABEL_43:
      uint64_t v12 = v26;
      goto LABEL_44;
    }
LABEL_23:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v20 << 6);
    int64_t v15 = v20;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  long long v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  char v31[8];
  char v32[8];
  unint64_t v33;
  uint64_t v34;

  uint64_t v4 = v3;
  unint64_t v8 = *(_OWORD *)(v3 + 16);
  v29[0] = *(_OWORD *)v3;
  v29[1] = v8;
  uint64_t v30 = *(void *)(v3 + 32);
  outlined init with take of Transform?((uint64_t)v29 + 8, (uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v32, (uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  unint64_t v9 = v33;
  if (!v33)
  {
    outlined init with take of Transform?((uint64_t)v29, (uint64_t)v31, &demangling cache variable for type metadata for AnimationLibraryResource?);
    outlined init with take of Transform?((uint64_t)v31, (uint64_t)&v34, &demangling cache variable for type metadata for AnimationLibraryResource?);
    if (v34) {
      unint64_t v10 = AnimationLibraryResource.keyedResources.getter();
    }
    else {
      unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
    unint64_t v9 = v10;
  }
  unint64_t v11 = v9 + 64;
  uint64_t v12 = *(void *)(v9 + 64);
  uint64_t v13 = -1 << *(unsigned char *)(v9 + 32);
  outlined retain of [String : String]((uint64_t)v32);
  uint64_t result = outlined release of AnimationLibraryComponent(v4);
  if (-v13 < 64) {
    int64_t v15 = ~(-1 << -(char)v13);
  }
  else {
    int64_t v15 = -1;
  }
  uint64_t v16 = v15 & v12;
  if (!a2)
  {
    int64_t v17 = 0;
    a3 = 0;
LABEL_44:
    *a1 = v9;
    a1[1] = v11;
    a1[2] = ~v13;
    a1[3] = v17;
    a1[4] = v16;
    return a3;
  }
  if (!a3)
  {
    int64_t v17 = 0;
    goto LABEL_44;
  }
  if (a3 < 0) {
    goto LABEL_46;
  }
  int64_t v17 = 0;
  unint64_t v18 = 0;
  long long v28 = v13;
  unint64_t v19 = (unint64_t)(63 - v13) >> 6;
  if (!v16) {
    goto LABEL_14;
  }
LABEL_13:
  int64_t v20 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  unint64_t v21 = v20 | (v17 << 6);
  while (1)
  {
    ++v18;
    uint64_t v25 = (void *)(*(void *)(v9 + 48) + 16 * v21);
    uint64_t v26 = v25[1];
    long long v27 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
    *a2 = *v25;
    a2[1] = v26;
    a2[2] = v27;
    if (v18 == a3)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_43;
    }
    a2 += 3;
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    if (v16) {
      goto LABEL_13;
    }
LABEL_14:
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v22 >= v19) {
      goto LABEL_38;
    }
    int64_t v23 = *(void *)(v11 + 8 * v22);
    if (!v23)
    {
      v17 += 2;
      if (v22 + 1 >= v19)
      {
        uint64_t v16 = 0;
        int64_t v17 = v22;
      }
      else
      {
        int64_t v23 = *(void *)(v11 + 8 * v17);
        if (v23) {
          goto LABEL_19;
        }
        uint64_t v24 = v22 + 2;
        if (v22 + 2 >= v19) {
          goto LABEL_38;
        }
        int64_t v23 = *(void *)(v11 + 8 * v24);
        if (v23)
        {
LABEL_22:
          int64_t v22 = v24;
          goto LABEL_23;
        }
        int64_t v17 = v22 + 3;
        if (v22 + 3 < v19)
        {
          int64_t v23 = *(void *)(v11 + 8 * v17);
          if (v23)
          {
LABEL_19:
            int64_t v22 = v17;
            goto LABEL_23;
          }
          uint64_t v24 = v22 + 4;
          if (v22 + 4 >= v19)
          {
LABEL_38:
            uint64_t v16 = 0;
            goto LABEL_42;
          }
          int64_t v23 = *(void *)(v11 + 8 * v24);
          if (!v23)
          {
            while (1)
            {
              int64_t v22 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                goto LABEL_47;
              }
              if (v22 >= v19)
              {
                uint64_t v16 = 0;
                int64_t v17 = v19 - 1;
                goto LABEL_42;
              }
              int64_t v23 = *(void *)(v11 + 8 * v22);
              ++v24;
              if (v23) {
                goto LABEL_23;
              }
            }
          }
          goto LABEL_22;
        }
        uint64_t v16 = 0;
        int64_t v17 = v22 + 2;
      }
LABEL_42:
      a3 = v18;
LABEL_43:
      uint64_t v13 = v28;
      goto LABEL_44;
    }
LABEL_23:
    uint64_t v16 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v17 = v22;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *a1 = a4;
    a1[1] = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a4 + 16))
    {
      unint64_t v9 = (uint64_t *)(a4 + 48);
      unint64_t v10 = 1;
      while (1)
      {
        uint64_t v11 = *(v9 - 1);
        uint64_t v12 = *v9;
        *a2 = *(v9 - 2);
        a2[1] = v11;
        a2[2] = v12;
        if (a3 == v10) {
          break;
        }
        unint64_t v13 = *(void *)(a4 + 16);
        if (v10 == v13)
        {
          a3 = v10;
          break;
        }
        v9 += 3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a2 += 3;
        if (v10++ >= v13)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void *v17;
  unint64_t v18;

  uint64_t result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *a1 = a4;
    a1[1] = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a4 + 16))
    {
      int64_t v17 = a1;
      unint64_t v18 = a3;
      unint64_t v9 = (uint64_t *)(a4 + 72);
      unint64_t v10 = 1;
      while (1)
      {
        uint64_t v11 = *(v9 - 4);
        unint64_t v13 = *(v9 - 3);
        uint64_t v12 = *(v9 - 2);
        int64_t v15 = *(v9 - 1);
        unint64_t v14 = *v9;
        *a2 = *(v9 - 5);
        a2[1] = v11;
        a2[2] = v13;
        a2[3] = v12;
        a2[4] = v15;
        a2[5] = v14;
        if (a3 == v10) {
          break;
        }
        a1 = *(void **)(a4 + 16);
        if ((void *)v10 == a1)
        {
          a3 = v10;
          break;
        }
        v9 += 6;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a2 += 6;
        uint64_t v16 = v10++ >= (unint64_t)a1;
        a3 = v18;
        if (v16)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a1 = v17;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *a1 = a4;
    a1[1] = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a4 + 16))
    {
      uint64_t v9 = 0;
      unint64_t v10 = 1;
      while (1)
      {
        uint64_t v11 = a2 + v9;
        uint64_t v12 = *(void *)(a4 + v9 + 40);
        uint64_t v13 = *(void *)(a4 + v9 + 48);
        uint64_t v14 = *(void *)(a4 + v9 + 56);
        long long v15 = *(_OWORD *)(a4 + v9 + 64);
        long long v16 = *(_OWORD *)(a4 + v9 + 80);
        long long v17 = *(_OWORD *)(a4 + v9 + 96);
        long long v18 = *(_OWORD *)(a4 + v9 + 112);
        char v19 = *(unsigned char *)(a4 + v9 + 128);
        *(void *)uint64_t v11 = *(void *)(a4 + v9 + 32);
        *(void *)(v11 + 8) = v12;
        *(void *)(v11 + 16) = v13;
        *(void *)(v11 + 24) = v14;
        *(_OWORD *)(v11 + 32) = v15;
        *(_OWORD *)(v11 + 48) = v16;
        *(_OWORD *)(v11 + 64) = v17;
        *(_OWORD *)(v11 + 80) = v18;
        *(unsigned char *)(v11 + 96) = v19;
        if (a3 == v10) {
          break;
        }
        unint64_t v20 = *(void *)(a4 + 16);
        if (v10 == v20)
        {
          a3 = v10;
          break;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 += 112;
        if (v10++ >= v20)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  void *v22;

  uint64_t result = swift_bridgeObjectRelease();
  if (!a2)
  {
LABEL_11:
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
LABEL_14:
    *a1 = a4;
    a1[1] = a3;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a4 + 16))
    {
      int64_t v22 = a1;
      uint64_t v9 = 0;
      unint64_t v10 = 1;
      while (1)
      {
        uint64_t v11 = a2 + v9;
        uint64_t v12 = *(void *)(a4 + v9 + 40);
        uint64_t v14 = *(void *)(a4 + v9 + 48);
        uint64_t v13 = *(void *)(a4 + v9 + 56);
        long long v15 = *(void *)(a4 + v9 + 64);
        long long v16 = *(_DWORD *)(a4 + v9 + 72);
        long long v17 = *(unsigned char *)(a4 + v9 + 76);
        long long v18 = *(void *)(a4 + v9 + 80);
        char v19 = *(unsigned char *)(a4 + v9 + 88);
        *(void *)uint64_t v11 = *(void *)(a4 + v9 + 32);
        *(void *)(v11 + 8) = v12;
        *(void *)(v11 + 16) = v14;
        *(void *)(v11 + 24) = v13;
        *(void *)(v11 + 32) = v15;
        *(_DWORD *)(v11 + 40) = v16;
        *(unsigned char *)(v11 + 44) = v17;
        *(void *)(v11 + 48) = v18;
        *(unsigned char *)(v11 + 56) = v19;
        if (a3 == v10) {
          break;
        }
        unint64_t v20 = *(void *)(a4 + 16);
        if (v10 == v20)
        {
          a3 = v10;
          break;
        }
        a1 = (void *)(v10 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 += 64;
        if (v10++ >= v20)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a1 = v22;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (!a2)
  {
LABEL_11:
    unint64_t v6 = 0;
    goto LABEL_14;
  }
  unint64_t v6 = a3;
  if (!a3)
  {
LABEL_14:
    void *v5 = a4;
    v5[1] = v6;
    return (void *)v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a4 + 16))
    {
      long long v7 = a2;
      unint64_t v8 = (uint64_t *)(a4 + 56);
      unint64_t v9 = 1;
      while (1)
      {
        uint64_t v10 = *(v8 - 2);
        uint64_t v12 = *(v8 - 1);
        uint64_t v11 = *v8;
        *long long v7 = *(v8 - 3);
        v7[1] = v10;
        _OWORD v7[2] = v12;
        void v7[3] = v11;
        if (v6 == v9) {
          break;
        }
        unint64_t v13 = *(void *)(a4 + 16);
        if (v9 == v13)
        {
          unint64_t v6 = v9;
          break;
        }
        v8 += 4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v7 += 4;
        if (v9++ >= v13)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    a3 = 0;
    goto LABEL_21;
  }
  if (!a3)
  {
LABEL_21:
    *uint64_t result = a4;
    result[1] = a3;
    return (void *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = *(void *)(a4 + 16);
    if (!v4)
    {
LABEL_20:
      a3 = v4;
      goto LABEL_21;
    }
    *a2 = *(_DWORD *)(a4 + 32);
    if (a3 != 1)
    {
      uint64_t v5 = a3 - 2;
      if (a3 - 2 >= (unint64_t)(v4 - 1)) {
        uint64_t v5 = v4 - 1;
      }
      unint64_t v6 = v5 + 1;
      if (v6 < 9 || (((unint64_t)a2 - a4) & 0xFFFFFFFFFFFFFFE0) == 0x20)
      {
        uint64_t v7 = 1;
        unint64_t v8 = a2 + 1;
      }
      else
      {
        uint64_t v9 = v6 & 7;
        if ((v6 & 7) == 0) {
          uint64_t v9 = 8;
        }
        unint64_t v10 = v6 - v9;
        uint64_t v11 = &a2[v6 - v9];
        uint64_t v7 = v10 + 1;
        uint64_t v12 = (long long *)(a4 + 52);
        unint64_t v13 = a2 + 5;
        do
        {
          long long v14 = *v12;
          *(v13 - 1) = *(v12 - 1);
          *unint64_t v13 = v14;
          v12 += 2;
          v13 += 2;
          v10 -= 8;
        }
        while (v10);
        unint64_t v8 = v11 + 1;
      }
      while (v4 != v7)
      {
        *v8++ = *(_DWORD *)(a4 + 32 + 4 * v7);
        if (a3 == ++v7) {
          goto LABEL_21;
        }
      }
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a2)
  {
LABEL_11:
    unint64_t v5 = 0;
    goto LABEL_14;
  }
  unint64_t v5 = a3;
  if (!a3)
  {
LABEL_14:
    *uint64_t result = a4;
    result[1] = v5;
    return (void *)v5;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a4 + 16))
    {
      long long v17 = result;
      uint64_t v7 = 0;
      unint64_t v8 = 1;
      while (1)
      {
        char v9 = *(unsigned char *)(a4 + v7 + 48);
        uint64_t v10 = a2 + v7;
        uint64_t v11 = *(void *)(a4 + v7 + 56);
        uint64_t v12 = *(void *)(a4 + v7 + 64);
        uint64_t v14 = *(void *)(a4 + v7 + 72);
        uint64_t v13 = *(void *)(a4 + v7 + 80);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)(a4 + v7 + 32);
        *(unsigned char *)(v10 + 16) = v9;
        *(void *)(v10 + 24) = v11;
        *(void *)(v10 + 32) = v12;
        *(void *)(v10 + 40) = v14;
        *(void *)(v10 + 48) = v13;
        if (v5 == v8) {
          break;
        }
        unint64_t v15 = *(void *)(a4 + 16);
        if (v8 == v15)
        {
          unint64_t v5 = v8;
          break;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t result = (void *)swift_bridgeObjectRetain();
        v7 += 56;
        if (v8++ >= v15)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = v17;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    goto LABEL_11;
  }
  if (!a3) {
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = *(void *)(a4 + 16);
    if (v5)
    {
      if (one-time initialization token for identity == -1) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_11:
    a3 = 0;
    goto LABEL_12;
  }
  __break(1u);
LABEL_15:
  uint64_t v16 = a3;
  long long v17 = a2;
  unint64_t v15 = a1;
  swift_once();
  uint64_t v5 = *(void *)(a4 + 16);
  if (!v5) {
    __break(1u);
  }
  a1 = v15;
  a3 = v16;
  a2 = v17;
LABEL_6:
  long long v6 = *(_OWORD *)(a4 + 48);
  long long v7 = *(_OWORD *)(a4 + 64);
  *a2 = *(_OWORD *)(a4 + 32);
  a2[1] = v6;
  a2[2] = v7;
  if (a3 != 1)
  {
    unint64_t v8 = a2 + 5;
    char v9 = (long long *)(a4 + 112);
    uint64_t v10 = 1;
    while (v5 != v10)
    {
      ++v10;
      long long v11 = *(v9 - 2);
      long long v12 = *(v9 - 1);
      long long v13 = *v9;
      v9 += 3;
      *(v8 - 2) = v11;
      *(v8 - 1) = v12;
      *unint64_t v8 = v13;
      v8 += 3;
      if (a3 == v10) {
        goto LABEL_12;
      }
    }
    a3 = v5;
  }
LABEL_12:
  *a1 = a4;
  a1[1] = a3;
  return a3;
}

{
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (a2)
  {
    if (a3)
    {
      if (a3 < 0) {
        __break(1u);
      }
      long long v7 = a2;
      unint64_t v8 = 0;
      if (DRMeshGetPartCount())
      {
        long long v11 = a3;
        char v9 = a3 - 1;
        while (1)
        {
          DRMeshGetPartAt();
          *long long v7 = 0uLL;
          v7[1] = xmmword_22832C800;
          _OWORD v7[2] = xmmword_22831FD10;
          void v7[3] = xmmword_22831FD20;
          if (v9 == v8) {
            break;
          }
          ++v8;
          v7 += 4;
          if (v8 == DRMeshGetPartCount()) {
            goto LABEL_12;
          }
        }
        unint64_t v8 = v11;
      }
    }
    else
    {
      unint64_t v8 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
LABEL_12:
  *a1 = a4;
  a1[1] = v8;
  return v8;
}