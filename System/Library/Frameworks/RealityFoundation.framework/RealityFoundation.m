uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(void *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0) {
        v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

unint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityTriggerSpecification])@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized static __RKEntityTriggerSpecification.generateCollisionTriggerSpecifications(decodeContext:)(*(uint64_t (***)(char *, uint64_t, char *))a1, *(void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityTriggerSpecification])@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t)specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x696669746E656469, 0xEA00000000007265, 2, *a1);
  uint64_t v6 = v4;
  if (v4)
  {
    uint64_t v7 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
    uint64_t v8 = *(void *)(type metadata accessor for __RKEntityTriggerSpecification(0) - 8);
    unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_22830EC60;
    v10 = (uint64_t *)(v5 + v9);
    uint64_t *v10 = v7;
    v10[1] = v6;
    uint64_t result = swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
  }
  *a2 = v5;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityTriggerSpecification])@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = (void *)MEMORY[0x22A688A50](0x65636E6174736964, 0xE800000000000000);
  id v8 = objc_msgSend(v3, sel_property_, v7);

  if (v8)
  {
    objc_msgSend(v8, sel_floatValue);
    float v10 = v9;
  }
  else
  {
    float v10 = 0.0;
  }
  unint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t result = specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))2, v3, v4, v5, v6, &v12, v10);
  *a2 = v12;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityTriggerSpecification])@<X0>(uint64_t *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
  type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_22830EC60;
  uint64_t result = swift_storeEnumTagMultiPayload();
  *a1 = v2;
  return result;
}

unint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityTriggerSpecification])@<X0>(_OWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  unint64_t result = implicit closure #5 in variable initialization expression of static __RKEntityTriggerSpecification.triggerTypeToTriggerSpecificationsGenerator((uint64_t)v5);
  *a2 = result;
  return result;
}

unint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityActionSpecification])@<X0>(_OWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  unint64_t result = specialized static __RKEntityActionSpecification.generateAudioActionSpecifications(decodeContext:)((void **)v5);
  *a2 = result;
  return result;
}

{
  long long v3;
  unint64_t result;
  _OWORD v5[3];

  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  unint64_t result = specialized static __RKEntityActionSpecification.generateEmphasizeActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

{
  long long v3;
  unint64_t result;
  _OWORD v5[3];

  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  unint64_t result = static __RKEntityActionSpecification.generateGroupActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

{
  long long v3;
  unint64_t result;
  _OWORD v5[3];

  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  unint64_t result = specialized static __RKEntityActionSpecification.generateStartAnimationActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

{
  long long v3;
  unint64_t result;
  _OWORD v5[3];

  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  unint64_t result = specialized static __RKEntityActionSpecification.generateTransformActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

{
  long long v3;
  unint64_t result;
  _OWORD v5[3];

  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  unint64_t result = specialized static __RKEntityActionSpecification.generateVisibilityActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityActionSpecification])@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  uint64_t result = specialized static __RKEntityActionSpecification.generateChangeSceneActionSpecifications(decodeContext:)((void **)v5);
  *a2 = result;
  return result;
}

{
  long long v3;
  uint64_t result;
  _OWORD v5[3];

  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  uint64_t result = specialized static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:)((void **)v5);
  *a2 = result;
  return result;
}

{
  long long v3;
  uint64_t result;
  _OWORD v5[3];

  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  uint64_t result = specialized static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

unint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityActionSpecification])@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized implicit closure #4 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(*(void **)a1, *(void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = specialized implicit closure #5 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(*(void **)a1, *(void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = specialized implicit closure #8 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(*(void **)a1, *(void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityActionSpecification])@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized static __RKEntityActionSpecification.generateNotificationActionSpecifications(decodeContext:)(*(void **)a1, *(void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityActionSpecification])@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, *a1);
  float v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
  uint64_t v5 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_22830EC60;
  float v8 = 1.0;
  if (v4 >= 0.0) {
    float v8 = v4;
  }
  *(float *)(v7 + v6) = v8;
  uint64_t result = swift_storeEnumTagMultiPayload();
  *a2 = v7;
  return result;
}

void specialized closure #1 in SetupPair.init<A, B>(_:_:)(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2)
  {
    CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(GenericRGB);
    swift_release();
  }
}

{
  uint64_t v2;
  CGColorRef GenericRGB;
  uint64_t vars8;

  if (swift_conformsToProtocol2()) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2)
  {
    CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(GenericRGB);
    swift_release();
  }
}

{
  uint64_t v2;
  CGColorRef GenericRGB;
  uint64_t vars8;

  if (swift_conformsToProtocol2()) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2)
  {
    CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(GenericRGB);
    swift_release();
  }
}

uint64_t specialized closure #1 in SetupPair.init<A, B>(_:_:)(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(0x7F8000003C23D70ALL, 0x142700000);
    return swift_release();
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t result;
  uint64_t v6;
  int *v7;
  char *v8;
  uint64_t v9;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x270FA5388](v2 - 8);
  float v4 = (_OWORD *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    unint64_t v6 = a1;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = (int *)type metadata accessor for AnchoringComponent(0);
    *(void *)((char *)v4 + v7[5]) = 1;
    *(void *)((char *)v4 + v7[6]) = 1;
    float v8 = (char *)v4 + v7[7];
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *(_OWORD *)float v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    v8[64] = 1;
    *float v4 = *(_OWORD *)zmmword_22830EC90;
    v4[1] = *(_OWORD *)&zmmword_22830EC90[16];
    v4[2] = *(_OWORD *)&zmmword_22830EC90[32];
    v4[3] = *(_OWORD *)&zmmword_22830EC90[48];
    type metadata accessor for AnchoringComponent.Target(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, int *))(*((void *)v7 - 1) + 56))(v4, 0, 1, v7);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v4);
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnchoringComponent?);
    return swift_release();
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  MEMORY[0x270FA5388](v2 - 8);
  float v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    unint64_t v6 = a1;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
    float v8 = type metadata accessor for BodyTrackingComponent(0);
    v4[*(int *)(v8 + 20)] = 0;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 0, 1, v8);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v4);
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for BodyTrackingComponent?);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in SetupPair.init<A, B>(_:_:)()
{
  memset(v1, 0, sizeof(v1));
  long long v2 = xmmword_22830EC70;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1);

  return swift_release();
}

{
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t vars8;

  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  v1[0] = xmmword_22830EC80;
  v1[1] = static simd_quatf.identity;
  long long v2 = 0;
  uint64_t v3 = 0;
  float v4 = 0;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v1);

  return swift_release();
}

__n128 __swift_memcpy40_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildBoxWithRoundedCornersOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildBoxWithRoundedCornersOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(uint64_t a1)
{
}

__n128 __swift_memcpy28_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildBoxOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildBoxOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REGeomBuildBoxOptions(uint64_t a1)
{
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildCylinderOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildCylinderOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REGeomBuildCylinderOptions(uint64_t a1)
{
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildConeOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildConeOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REGeomBuildConeOptions(uint64_t a1)
{
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildCapsuleOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildCapsuleOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 20) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REGeomBuildCapsuleOptions(uint64_t a1)
{
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildSphereOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildSphereOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REGeomBuildSphereOptions(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REGeomBuildPlaneOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 20);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildPlaneOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 20) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REGeomBuildPlaneOptions(uint64_t a1)
{
}

void type metadata accessor for REMaterialParameterBlockValue(uint64_t a1)
{
}

void type metadata accessor for REMetricFileLoadSite(uint64_t a1)
{
}

void type metadata accessor for AXCustomContentImportance(uint64_t a1)
{
}

void type metadata accessor for REVideoViewingMode(uint64_t a1)
{
}

void type metadata accessor for RIOImportSessionRef(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for simd_float2x2(uint64_t a1)
{
}

void type metadata accessor for REMaterialParameterType(uint64_t a1)
{
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for REAudioFileConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for REAudioFileConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

void type metadata accessor for REAudioFileConfiguration(uint64_t a1)
{
}

void type metadata accessor for MTLTextureType(uint64_t a1)
{
}

void type metadata accessor for DRTexture_t(uint64_t a1)
{
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for RESceneComponentCollectionPosition(uint64_t a1)
{
}

void type metadata accessor for REColorGamut(uint64_t a1)
{
}

void type metadata accessor for MTLPrimitiveType(uint64_t a1)
{
}

void type metadata accessor for MTLIndexType(uint64_t a1)
{
}

void type metadata accessor for MTLVertexFormat(uint64_t a1)
{
}

void type metadata accessor for DRMesh_t(uint64_t a1)
{
}

void type metadata accessor for MTLColorWriteMask(uint64_t a1)
{
}

void type metadata accessor for MTLCompareFunction(uint64_t a1)
{
}

void type metadata accessor for REAnimationLoopBehavior(uint64_t a1)
{
}

void type metadata accessor for AudioBufferList(uint64_t a1)
{
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for AudioTimeStamp(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for AudioTimeStamp(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for RETextEdgeInsets(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for RETextEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for REDirectParameterBuffer(uint64_t a1)
{
}

void type metadata accessor for RFServiceManagerRef(uint64_t a1)
{
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for REMeshJointInfluence(uint64_t a1)
{
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for MTLTriangleFillMode(uint64_t a1)
{
}

void type metadata accessor for MTLCullMode(uint64_t a1)
{
}

void type metadata accessor for DRBuffer_t(uint64_t a1)
{
}

void type metadata accessor for RESubscriptionHandle(uint64_t a1)
{
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for REMeshInstanceDefinitionRef(uint64_t a1)
{
}

void type metadata accessor for REMeshModelDefinitionRef(uint64_t a1)
{
}

void type metadata accessor for REMeshDefinitionRef(uint64_t a1)
{
}

void type metadata accessor for REEngineConfigurationRef(uint64_t a1)
{
}

void type metadata accessor for MTLTextureUsage(uint64_t a1)
{
}

void type metadata accessor for MTLPixelFormat(uint64_t a1)
{
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for RERay(uint64_t a1)
{
}

void type metadata accessor for REComponentClassPtr(uint64_t a1)
{
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MTLTextureSwizzleChannels(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MTLTextureSwizzleChannels(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

void type metadata accessor for MTLTextureSwizzleChannels(uint64_t a1)
{
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for REPoseF(uint64_t a1)
{
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
}

void type metadata accessor for RERealityFileMajorVersion(uint64_t a1)
{
}

void type metadata accessor for REAABB(uint64_t a1)
{
}

void type metadata accessor for REStartupOptions(uint64_t a1)
{
}

void type metadata accessor for RERenderFlags(uint64_t a1)
{
}

void type metadata accessor for REEngineServiceMask(uint64_t a1)
{
}

void type metadata accessor for REEngineClockMode(uint64_t a1)
{
}

void type metadata accessor for REComponentType(uint64_t a1)
{
}

void type metadata accessor for RESRT(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for simd_float3x3(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_float3x3(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
}

void type metadata accessor for REEasingFunction(uint64_t a1)
{
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float4x4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for CMAcceleration(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CMAcceleration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMAcceleration(uint64_t a1)
{
}

void type metadata accessor for CVBufferRef(uint64_t a1)
{
}

void type metadata accessor for CMClockRef(uint64_t a1)
{
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
}

void type metadata accessor for CMTimebaseRef(uint64_t a1)
{
}

void type metadata accessor for REMeshAttributeDescriptorRef(uint64_t a1)
{
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

void type metadata accessor for REAudioReverbPreset(uint64_t a1)
{
}

void type metadata accessor for REMotionType(uint64_t a1)
{
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
}

void protocol witness for SetAlgebra.init() in conformance RERenderFlags(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance RERenderFlags(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance RERenderFlags@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance RERenderFlags(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance RERenderFlags(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance RERenderFlags(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance RERenderFlags(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance RERenderFlags(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance RERenderFlags(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance RERenderFlags()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance RERenderFlags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance RERenderFlags(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

{
  Hasher.init(_seed:)();
  swift_getWitnessTable();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance REComponentClassPtr()
{
  return OpaquePointer.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance REComponentClassPtr()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance REComponentClassPtr()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MTLCullMode(void *a1, void *a2)
{
  return *a1 == *a2;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance REAssetType@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance REAssetType(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance MTLCullMode@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MTLCullMode(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGColorRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGColorRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGColorRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance REShaderAPI()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance REAssetType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance REShaderAPI()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *protocol witness for OptionSet.init(rawValue:) in conformance MTLBlitOption@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance MTLTextureUsage(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance MTLTextureUsage@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance MTLTextureUsage@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance MTLTextureUsage@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance MTLTextureUsage(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance MTLTextureUsage@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance MTLTextureUsage@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance MTLTextureUsage(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance MTLTextureUsage(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance MTLTextureUsage@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance MTLTextureUsage(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance MTLTextureUsage(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance MTLTextureUsage(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance MTLTextureUsage()
{
  return *v0 == 0;
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance MTLTextureUsage(void *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REColorGamut(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance REShaderStage()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance REColorGamut()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance REShaderStage()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, MEMORY[0x263F07B58]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MTLPixelFormat()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_WORD *protocol witness for OptionSet.init(rawValue:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSURLResourceKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x22A688A50](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CMTimebaseRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

_WORD *protocol witness for RawRepresentable.init(rawValue:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(unsigned char *)(a2 + 2) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance REMaterialAssetPBRFeatureFlags(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance RERenderFlags@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

void protocol witness for SetAlgebra.init() in conformance REMaterialAssetCustomFeatureFlags(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGColorRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in CGColorRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in CMTimebaseRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CMTimebaseRef and conformance CMTimebaseRef, type metadata accessor for CMTimebaseRef);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REAssetType(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance MTLRenderStages(void *result)
{
  *v1 |= *result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MTLTextureUsage@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance REColorGamut@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance REColorGamut(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

_WORD *protocol witness for SetAlgebra.union(_:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.intersection(_:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *a1, unsigned __int16 *a2)
{
  int v3 = *a2;
  int v4 = (unsigned __int16)*v2;
  if ((v4 & v3) != v3) {
    *uint64_t v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int16 *protocol witness for SetAlgebra.remove(_:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = (unsigned __int16)*v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *uint64_t v2 = v4 & ~(_WORD)v3;
  }
  *(_WORD *)a2 = v5;
  *(unsigned char *)(a2 + 2) = v5 == 0;
  return result;
}

unsigned __int16 *protocol witness for SetAlgebra.update(with:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = (unsigned __int16)*v2;
  *uint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *(_WORD *)a2 = v5;
  *(unsigned char *)(a2 + 2) = v5 == 0;
  return result;
}

_WORD *protocol witness for SetAlgebra.formUnion(_:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *result)
{
  *v1 |= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *result)
{
  *v1 &= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *result)
{
  *v1 ^= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.subtracting(_:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance REMaterialAssetPBRFeatureFlags(unsigned __int16 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *a1)
{
  return (unsigned __int16)(*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance REMaterialAssetPBRFeatureFlags(unsigned __int16 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance REMaterialAssetPBRFeatureFlags()
{
  return *v0 == 0;
}

_WORD *protocol witness for SetAlgebra.subtract(_:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance REComponentClassPtr()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey()
{
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REMaterialAssetPBRFeatureFlags(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance USKDataType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance USKDataType()
{
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKDataType and conformance USKDataType, type metadata accessor for USKDataType);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKDataType and conformance USKDataType, type metadata accessor for USKDataType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance USKRoleType()
{
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKRoleType and conformance USKRoleType, type metadata accessor for USKRoleType);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKRoleType and conformance USKRoleType, type metadata accessor for USKRoleType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NSURLResourceKey@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x22A688A50](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance USKNodeType()
{
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKNodeType and conformance USKNodeType, type metadata accessor for USKNodeType);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKNodeType and conformance USKNodeType, type metadata accessor for USKNodeType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CMTimebaseRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CMTimebaseRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CMTimebaseRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef();
}

uint64_t base witness table accessor for Hashable in CMTimebaseRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CMTimebaseRef and conformance CMTimebaseRef, type metadata accessor for CMTimebaseRef);
}

uint64_t base witness table accessor for Equatable in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, type metadata accessor for REEngineServiceMask);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, type metadata accessor for REEngineServiceMask);
}

uint64_t base witness table accessor for RawRepresentable in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, type metadata accessor for REEngineServiceMask);
}

uint64_t base witness table accessor for SetAlgebra in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, type metadata accessor for REEngineServiceMask);
}

uint64_t base witness table accessor for Equatable in RERenderFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type RERenderFlags and conformance RERenderFlags, type metadata accessor for RERenderFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RERenderFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type RERenderFlags and conformance RERenderFlags, type metadata accessor for RERenderFlags);
}

uint64_t base witness table accessor for RawRepresentable in RERenderFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type RERenderFlags and conformance RERenderFlags, type metadata accessor for RERenderFlags);
}

uint64_t base witness table accessor for SetAlgebra in RERenderFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type RERenderFlags and conformance RERenderFlags, type metadata accessor for RERenderFlags);
}

uint64_t base witness table accessor for Equatable in REStartupOptions()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REStartupOptions and conformance REStartupOptions, type metadata accessor for REStartupOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REStartupOptions()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REStartupOptions and conformance REStartupOptions, type metadata accessor for REStartupOptions);
}

uint64_t base witness table accessor for RawRepresentable in REStartupOptions()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REStartupOptions and conformance REStartupOptions, type metadata accessor for REStartupOptions);
}

uint64_t base witness table accessor for SetAlgebra in REStartupOptions()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REStartupOptions and conformance REStartupOptions, type metadata accessor for REStartupOptions);
}

uint64_t base witness table accessor for RawRepresentable in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, type metadata accessor for REComponentClassPtr);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, type metadata accessor for REComponentClassPtr);
}

uint64_t base witness table accessor for Equatable in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, type metadata accessor for REComponentClassPtr);
}

uint64_t base witness table accessor for Equatable in MTLPixelFormat()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLPixelFormat and conformance MTLPixelFormat, type metadata accessor for MTLPixelFormat);
}

uint64_t base witness table accessor for Equatable in MTLTextureUsage()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLTextureUsage and conformance MTLTextureUsage, type metadata accessor for MTLTextureUsage);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in MTLTextureUsage()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLTextureUsage and conformance MTLTextureUsage, type metadata accessor for MTLTextureUsage);
}

uint64_t base witness table accessor for RawRepresentable in MTLTextureUsage()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLTextureUsage and conformance MTLTextureUsage, type metadata accessor for MTLTextureUsage);
}

uint64_t base witness table accessor for SetAlgebra in MTLTextureUsage()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLTextureUsage and conformance MTLTextureUsage, type metadata accessor for MTLTextureUsage);
}

uint64_t base witness table accessor for Equatable in MTLCullMode()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLCullMode and conformance MTLCullMode, type metadata accessor for MTLCullMode);
}

uint64_t base witness table accessor for Equatable in REColorGamut()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REColorGamut and conformance REColorGamut, type metadata accessor for REColorGamut);
}

uint64_t base witness table accessor for Hashable in CGColorRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, type metadata accessor for CGColorRef);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance USKDataType(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSURLResourceKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSURLResourceKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSURLResourceKey()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 *v3;
  int v4;
  int v5;

  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (unsigned __int16 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined destroy of BodyTrackingComponent?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for REAssetType(uint64_t a1)
{
}

void type metadata accessor for REMaterialAssetType(uint64_t a1)
{
}

__n128 __swift_memcpy128_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_double4x4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_double4x4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

void type metadata accessor for simd_double4x4(uint64_t a1)
{
}

__n128 __swift_memcpy96_16(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_double3x3(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_double3x3(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 96) = v3;
  return result;
}

void type metadata accessor for simd_double3x3(uint64_t a1)
{
}

void type metadata accessor for RESkeletalModelSpacePoseDefinition(uint64_t a1)
{
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for RESkeletalPoseMeshMapEx(uint64_t a1)
{
}

void type metadata accessor for RESkeletalPoseDefinition(uint64_t a1)
{
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MTLTextureLevelInfo(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MTLTextureLevelInfo(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 104) = v3;
  return result;
}

void type metadata accessor for MTLTextureLevelInfo(uint64_t a1)
{
}

void type metadata accessor for REStateTransitionInterruptionType(uint64_t a1)
{
}

void type metadata accessor for REStateTransitionConditionOperator(uint64_t a1)
{
}

void type metadata accessor for REBlendWeightsDefinition(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REBlendWeightsMeshMap(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 8)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REBlendWeightsMeshMap(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

void type metadata accessor for REBlendWeightsMeshMap(uint64_t a1)
{
}

void type metadata accessor for REMeshResourceDefinitionRef(uint64_t a1)
{
}

void type metadata accessor for RIOPxrUsdObjectRef(uint64_t a1)
{
}

void type metadata accessor for CoreIKTransform(uint64_t a1)
{
}

void type metadata accessor for CFBooleanRef(uint64_t a1)
{
}

void type metadata accessor for CTLineRef(uint64_t a1)
{
}

void type metadata accessor for CTRunRef(uint64_t a1)
{
}

void type metadata accessor for CGPathElement(uint64_t a1)
{
}

void type metadata accessor for geom_bbox_2d(uint64_t a1)
{
}

void type metadata accessor for RIOPxrSdfPathRef(uint64_t a1)
{
}

void type metadata accessor for REReferenceSourceType(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for simd_quatd(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for simd_quatd(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for simd_quatd(uint64_t a1)
{
}

void type metadata accessor for NSProcessInfoThermalState(uint64_t a1)
{
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for RESystemDependency(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RESystemDependency(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for RESystemDependency(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REVideoPlayerVideoReceiverEndpointChangedEvent(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for REVideoPlayerVideoReceiverEndpointChangedEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void type metadata accessor for REVideoPlayerVideoReceiverEndpointChangedEvent(uint64_t a1)
{
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for REVideoPlayerViewingModeChangedEvent(uint64_t a1)
{
}

void type metadata accessor for REVideoPlayerVideoSizeChangedEvent(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REVideoPlayerViewingModeChangedEvent(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if ((a2 + 0xFFFF) < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for REVideoPlayerViewingModeChangedEvent(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227DD8D70);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for REVideoPlayerContentTypeChangedEvent(uint64_t a1)
{
}

void type metadata accessor for REAnimationSkeletalPoseUpdateCompleteEvent(uint64_t a1)
{
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for REEntityForceEffectComputeForcesEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 136);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for REEntityForceEffectComputeForcesEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 144) = 0;
    }
    if (a2) {
      *(void *)(result + 136) = a2;
    }
  }
  return result;
}

void type metadata accessor for REEntityForceEffectComputeForcesEvent(uint64_t a1)
{
}

void type metadata accessor for REEntityPhysicsDidSimulateEvent(uint64_t a1)
{
}

void type metadata accessor for REEntityPhysicsWillSimulateEvent(uint64_t a1)
{
}

void type metadata accessor for REAudioPlayerDidCompleteEvent(uint64_t a1)
{
}

void type metadata accessor for REOwnershipChangedEvent(uint64_t a1)
{
}

void type metadata accessor for REOwnershipResponseEvent(uint64_t a1)
{
}

void type metadata accessor for REOwnershipRequestEvent(uint64_t a1)
{
}

void type metadata accessor for REMotionStateDidChangeEvent(uint64_t a1)
{
}

void type metadata accessor for REComponentDidChangeEvent(uint64_t a1)
{
}

void type metadata accessor for REComponentWillRemoveEvent(uint64_t a1)
{
}

void type metadata accessor for REComponentWillDeactivateEvent(uint64_t a1)
{
}

void type metadata accessor for REComponentDidActivateEvent(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REComponentDidChangeEvent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REComponentDidChangeEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

void type metadata accessor for REComponentDidAddEvent(uint64_t a1)
{
}

void type metadata accessor for RECollisionDidStopEvent(uint64_t a1)
{
}

void type metadata accessor for RECollisionDidUpdateEventEx(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for RECollisionDidUpdateEventEx(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 16)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for RECollisionDidUpdateEventEx(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = 0;
    }
  }
  return result;
}

void type metadata accessor for RECollisionDidStartEventEx(uint64_t a1)
{
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for REAnimationTimelineEventCreated(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REAnimationTimelineEventCreated(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationTimelineEventCreated(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

void type metadata accessor for REAnimationTimelineEventTerminated(uint64_t a1)
{
}

void type metadata accessor for REAnimationTimelineEventResume(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REAnimationTimelineEventResume(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationTimelineEventResume(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

void type metadata accessor for REAnimationTimelineEventPause(uint64_t a1)
{
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for REAnimationTimelineEventSkipped(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 72);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationTimelineEventSkipped(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 72) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REAnimationTimelineEventSkipped(uint64_t a1)
{
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for REAnimationHasTimelineEventEnd(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationHasTimelineEventEnd(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REAnimationHasTimelineEventEnd(uint64_t a1)
{
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for REAnimationHasTimelineEventUpdate(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 104);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationHasTimelineEventUpdate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 104) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REAnimationHasTimelineEventUpdate(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REAnimationHasTimelineEventStart(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationHasTimelineEventStart(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REAnimationHasTimelineEventStart(uint64_t a1)
{
}

void type metadata accessor for REAnimationHasStartedEvent(uint64_t a1)
{
}

void type metadata accessor for REAnimationHasTerminatedEvent(uint64_t a1)
{
}

void type metadata accessor for REAnimationHasLoopedEvent(uint64_t a1)
{
}

void type metadata accessor for REAnimationHasCompletedEvent(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REBlendWeightsDefinition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 8)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REBlendWeightsDefinition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

void type metadata accessor for RESceneEntityDidReparentEvent(uint64_t a1)
{
}

void type metadata accessor for RESceneEntityWillRemoveEvent(uint64_t a1)
{
}

void type metadata accessor for RESceneEntityWillDeactivateEvent(uint64_t a1)
{
}

void type metadata accessor for RESceneEntityDidActivateEvent(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REMeshInstanceDefinitionRef(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REMeshInstanceDefinitionRef(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

void type metadata accessor for RESceneEntityDidAddEvent(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REMotionStateDidChangeEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REMotionStateDidChangeEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for RESceneAnchoredStateChangedEvent(uint64_t a1)
{
}

void type metadata accessor for REEngineDoRenderEvent(uint64_t a1)
{
}

void type metadata accessor for REEngineDoUpdateEvent(uint64_t a1)
{
}

void type metadata accessor for REMaterialAssetCustomFeatureFlags(uint64_t a1)
{
}

void type metadata accessor for REMaterialAssetPBRFeatureFlags(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for REGeomBuildExtrudedTextOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 35);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildExtrudedTextOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 35) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for REGeomBuildExtrudedTextOptions(uint64_t a1)
{
}

void type metadata accessor for REMaterialAssetUnlitFeatureFlags(uint64_t a1)
{
}

void type metadata accessor for REGeomBuildPlaneOrientation(uint64_t a1)
{
}

void type metadata accessor for REAudioCalibrationMode(uint64_t a1)
{
}

void type metadata accessor for REAudioNormalizationMode(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for AudioBuffer(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for AudioBuffer(uint64_t a1)
{
}

void type metadata accessor for AudioTimeStampFlags(uint64_t a1)
{
}

void type metadata accessor for SMPTETime(uint64_t a1)
{
}

void type metadata accessor for REShaderAPI(uint64_t a1)
{
}

void type metadata accessor for REShaderStage(uint64_t a1)
{
}

void type metadata accessor for MTLTextureSwizzle(uint64_t a1)
{
}

void type metadata accessor for RELoadTraceType(uint64_t a1)
{
}

uint64_t base witness table accessor for Equatable in REShaderStage()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REShaderStage and conformance REShaderStage, type metadata accessor for REShaderStage);
}

uint64_t base witness table accessor for Equatable in REShaderAPI()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REShaderAPI and conformance REShaderAPI, type metadata accessor for REShaderAPI);
}

uint64_t base witness table accessor for Equatable in REMaterialAssetUnlitFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetUnlitFeatureFlags and conformance REMaterialAssetUnlitFeatureFlags, type metadata accessor for REMaterialAssetUnlitFeatureFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REMaterialAssetUnlitFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetUnlitFeatureFlags and conformance REMaterialAssetUnlitFeatureFlags, type metadata accessor for REMaterialAssetUnlitFeatureFlags);
}

uint64_t base witness table accessor for RawRepresentable in REMaterialAssetUnlitFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetUnlitFeatureFlags and conformance REMaterialAssetUnlitFeatureFlags, type metadata accessor for REMaterialAssetUnlitFeatureFlags);
}

uint64_t base witness table accessor for SetAlgebra in REMaterialAssetUnlitFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetUnlitFeatureFlags and conformance REMaterialAssetUnlitFeatureFlags, type metadata accessor for REMaterialAssetUnlitFeatureFlags);
}

uint64_t base witness table accessor for Equatable in REMaterialAssetPBRFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetPBRFeatureFlags and conformance REMaterialAssetPBRFeatureFlags, type metadata accessor for REMaterialAssetPBRFeatureFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REMaterialAssetPBRFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetPBRFeatureFlags and conformance REMaterialAssetPBRFeatureFlags, type metadata accessor for REMaterialAssetPBRFeatureFlags);
}

uint64_t base witness table accessor for RawRepresentable in REMaterialAssetPBRFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetPBRFeatureFlags and conformance REMaterialAssetPBRFeatureFlags, type metadata accessor for REMaterialAssetPBRFeatureFlags);
}

uint64_t base witness table accessor for SetAlgebra in REMaterialAssetPBRFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetPBRFeatureFlags and conformance REMaterialAssetPBRFeatureFlags, type metadata accessor for REMaterialAssetPBRFeatureFlags);
}

uint64_t base witness table accessor for Equatable in REMaterialAssetCustomFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetCustomFeatureFlags and conformance REMaterialAssetCustomFeatureFlags, type metadata accessor for REMaterialAssetCustomFeatureFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REMaterialAssetCustomFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetCustomFeatureFlags and conformance REMaterialAssetCustomFeatureFlags, type metadata accessor for REMaterialAssetCustomFeatureFlags);
}

uint64_t base witness table accessor for RawRepresentable in REMaterialAssetCustomFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetCustomFeatureFlags and conformance REMaterialAssetCustomFeatureFlags, type metadata accessor for REMaterialAssetCustomFeatureFlags);
}

uint64_t base witness table accessor for SetAlgebra in REMaterialAssetCustomFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetCustomFeatureFlags and conformance REMaterialAssetCustomFeatureFlags, type metadata accessor for REMaterialAssetCustomFeatureFlags);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in REAssetType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REAssetType and conformance REAssetType, type metadata accessor for REAssetType);
}

void type metadata accessor for geom_cubic_bezier_2d(uint64_t a1)
{
}

void type metadata accessor for geom_quadratic_bezier_2d(uint64_t a1)
{
}

void type metadata accessor for geom_line_segment_2d(uint64_t a1)
{
}

void type metadata accessor for CGPathElementType(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for RESkeletalModelSpacePoseDefinition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 8)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for RESkeletalModelSpacePoseDefinition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

void type metadata accessor for REMeshIdentifier(uint64_t a1)
{
}

void type metadata accessor for CTFontSymbolicTraits(uint64_t a1)
{
}

void type metadata accessor for USKRoleType(uint64_t a1)
{
}

void type metadata accessor for USKDataType(uint64_t a1)
{
}

void type metadata accessor for USKNodeType(uint64_t a1)
{
}

void type metadata accessor for REVideoPlayerContentType(uint64_t a1)
{
}

void type metadata accessor for REOwnershipResponseResult(uint64_t a1)
{
}

void type metadata accessor for REVerticalTextAlignment(uint64_t a1)
{
}

void type metadata accessor for RETextAlignment(uint64_t a1)
{
}

void type metadata accessor for RELineBreakMode(uint64_t a1)
{
}

void type metadata accessor for SMPTETimeFlags(uint64_t a1)
{
}

void type metadata accessor for SMPTETimeType(uint64_t a1)
{
}

uint64_t base witness table accessor for RawRepresentable in USKNodeType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKNodeType and conformance USKNodeType, type metadata accessor for USKNodeType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in USKNodeType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKNodeType and conformance USKNodeType, type metadata accessor for USKNodeType);
}

uint64_t base witness table accessor for Equatable in USKNodeType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKNodeType and conformance USKNodeType, type metadata accessor for USKNodeType);
}

uint64_t base witness table accessor for RawRepresentable in USKDataType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKDataType and conformance USKDataType, type metadata accessor for USKDataType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in USKDataType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKDataType and conformance USKDataType, type metadata accessor for USKDataType);
}

uint64_t base witness table accessor for Equatable in USKDataType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKDataType and conformance USKDataType, type metadata accessor for USKDataType);
}

uint64_t base witness table accessor for RawRepresentable in USKRoleType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKRoleType and conformance USKRoleType, type metadata accessor for USKRoleType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in USKRoleType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKRoleType and conformance USKRoleType, type metadata accessor for USKRoleType);
}

uint64_t base witness table accessor for Equatable in USKRoleType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKRoleType and conformance USKRoleType, type metadata accessor for USKRoleType);
}

void type metadata accessor for REMeshIdentifierType(uint64_t a1)
{
}

void type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t SimpleMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v32 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  int v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v6 - 8);
  float v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SimpleMaterial((uint64_t)v1, (uint64_t)v42);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_22831E320;
  *(void *)(v9 + 32) = 1701667182;
  *(void *)(v9 + 40) = 0xE400000000000000;
  swift_beginAccess();
  if (REMaterialAssetGetSourceName())
  {
    uint64_t v10 = String.init(cString:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v9 + 48) = v10;
  *(void *)(v9 + 56) = v12;
  *(void *)(v9 + 72) = v13;
  *(void *)(v9 + 80) = 0x726F6C6F63;
  *(void *)(v9 + 88) = 0xE500000000000000;
  *(void *)(v9 + 120) = &type metadata for PhysicallyBasedMaterial.BaseColor;
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v14 + 16;
  *(void *)(v9 + 96) = v14;
  v36 = &type metadata for SimpleMaterial;
  v37 = &protocol witness table for SimpleMaterial;
  v33 = (void *)swift_allocObject();
  outlined init with copy of SimpleMaterial((uint64_t)v1, (uint64_t)v33 + 16);
  uint64_t v16 = v1[10];
  v17 = (void *)v1[11];
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(&v33, v16, v17, v15);
  *(void *)(v9 + 128) = 0x63696C6C6174656DLL;
  *(void *)(v9 + 136) = 0xE800000000000000;
  *(void *)(v9 + 168) = &type metadata for MaterialScalarParameter;
  unint64_t v18 = (unint64_t)specialized Material.getTexture(_:)(9);
  if (v18)
  {
    unint64_t v19 = v18 | 0x8000000000000000;
    goto LABEL_11;
  }
  uint64_t v31 = a1;
  v20 = (void *)v1[9];
  swift_bridgeObjectRetain_n();
  id v21 = v20;
  swift_bridgeObjectRetain_n();
  id v22 = v21;
  specialized String.withCString<A>(_:)(0x63696C6C6174656DLL, 0xED0000656C616353, v22, (uint64_t)&v33);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v41 != 255)
  {
    if (v41 == 2)
    {
      unint64_t v19 = v33;
      goto LABEL_11;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v33, v34, v35, (uint64_t)v36, (uint64_t)v37, v38, v39, v40, v41);
  }
  unint64_t v19 = 0;
LABEL_11:
  *(void *)(v9 + 144) = v19;
  *(void *)(v9 + 176) = 0x73656E6867756F72;
  *(void *)(v9 + 184) = 0xE900000000000073;
  *(void *)(v9 + 216) = &type metadata for MaterialScalarParameter;
  unint64_t v23 = (unint64_t)specialized Material.getTexture(_:)(10);
  if (v23)
  {
    unint64_t v24 = v23 | 0x8000000000000000;
  }
  else
  {
    uint64_t v31 = v3;
    v25 = (void *)v1[9];
    swift_bridgeObjectRetain_n();
    id v26 = v25;
    swift_bridgeObjectRetain_n();
    id v27 = v26;
    specialized String.withCString<A>(_:)(0x73656E6867756F72, 0xEE00656C61635373, v27, (uint64_t)&v33);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v41 == 255)
    {
      unint64_t v24 = 1065353216;
    }
    else if (v41 == 2)
    {
      unint64_t v24 = v33;
    }
    else
    {
      outlined consume of __RKMaterialParameterBlock.Parameter?(v33, v34, v35, (uint64_t)v36, (uint64_t)v37, v38, v39, v40, v41);
      unint64_t v24 = 1065353216;
    }
    uint64_t v3 = v31;
  }
  *(void *)(v9 + 192) = v24;
  *(void *)(v9 + 224) = 0xD000000000000010;
  *(void *)(v9 + 232) = 0x800000022834DED0;
  *(void *)(v9 + 264) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(unsigned char *)(v9 + 240) = v1[15] == 1;
  uint64_t v28 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v8, 1, 1, v28);
  (*(void (**)(char *, void, uint64_t))(v32 + 104))(v5, *MEMORY[0x263F8E830], v3);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t PhysicallyBasedMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v94);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22831E330;
  *(void *)(v11 + 32) = 1701667182;
  *(void *)(v11 + 40) = 0xE400000000000000;
  swift_beginAccess();
  uint64_t SourceName = REMaterialAssetGetSourceName();
  uint64_t v79 = v4;
  uint64_t v80 = a1;
  uint64_t v78 = v5;
  if (SourceName)
  {
    uint64_t v13 = String.init(cString:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v11 + 48) = v13;
  *(void *)(v11 + 56) = v15;
  *(void *)(v11 + 72) = v16;
  *(void *)(v11 + 80) = 0x6F6C6F4365736162;
  *(void *)(v11 + 88) = 0xE900000000000072;
  *(void *)(v11 + 120) = &type metadata for PhysicallyBasedMaterial.BaseColor;
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v17 + 16;
  *(void *)(v11 + 96) = v17;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v81, 0, 0, v18);
  *(void *)(v11 + 128) = 0x73656E6867756F72;
  *(void *)(v11 + 136) = 0xE900000000000073;
  *(void *)(v11 + 168) = &type metadata for PhysicallyBasedMaterial.Roughness;
  uint64_t v19 = swift_allocObject();
  *(void *)(v11 + 144) = v19;
  uint64_t v20 = v19 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:)(v81, v20);
  *(void *)(v11 + 176) = 0x63696C6C6174656DLL;
  *(void *)(v11 + 184) = 0xE800000000000000;
  *(void *)(v11 + 216) = &type metadata for PhysicallyBasedMaterial.Metallic;
  uint64_t v21 = swift_allocObject();
  *(void *)(v11 + 192) = v21;
  uint64_t v22 = v21 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(v81, v22);
  *(void *)(v11 + 224) = 0x6C616D726F6ELL;
  *(void *)(v11 + 232) = 0xE600000000000000;
  *(void *)(v11 + 264) = &type metadata for PhysicallyBasedMaterial.Normal;
  uint64_t v23 = swift_allocObject();
  *(void *)(v11 + 240) = v23;
  PhysicallyBasedMaterial.normal.getter(v23 + 16);
  *(void *)(v11 + 272) = 0x676E69646E656C62;
  *(void *)(v11 + 280) = 0xE800000000000000;
  *(void *)(v11 + 312) = &type metadata for PhysicallyBasedMaterial.Blending;
  uint64_t v24 = swift_allocObject();
  *(void *)(v11 + 288) = v24;
  PhysicallyBasedMaterial.blending.getter(v24 + 16);
  *(void *)(v11 + 320) = 0xD000000000000010;
  *(void *)(v11 + 328) = 0x800000022834DEF0;
  *(void *)(v11 + 360) = &type metadata for PhysicallyBasedMaterial.AmbientOcclusion;
  uint64_t v25 = swift_allocObject();
  *(void *)(v11 + 336) = v25;
  PhysicallyBasedMaterial.ambientOcclusion.getter(v25 + 16);
  *(void *)(v11 + 368) = 0x72616C7563657073;
  *(void *)(v11 + 376) = 0xE800000000000000;
  *(void *)(v11 + 408) = &type metadata for PhysicallyBasedMaterial.Specular;
  uint64_t v26 = swift_allocObject();
  *(void *)(v11 + 384) = v26;
  uint64_t v27 = v26 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.Specular.init(material:alternateTintKey:)(v81, v27);
  *(void *)(v11 + 416) = 0x6E65656873;
  *(void *)(v11 + 424) = 0xE500000000000000;
  *(void *)(v11 + 456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicallyBasedMaterial.SheenColor?);
  uint64_t v28 = swift_allocObject();
  *(void *)(v11 + 432) = v28;
  char v29 = *(unsigned char *)(v2 + 105);
  v76 = v10;
  v77 = v7;
  if ((v29 & 8) != 0)
  {
    v82 = &type metadata for PhysicallyBasedMaterial;
    v83 = &protocol witness table for PhysicallyBasedMaterial;
    v81[0] = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
    PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(v81, (uint64_t)&v86);
    uint64_t v30 = v86;
    long long v33 = v87;
    uint64_t v31 = v88;
    int v32 = v89;
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v32 = 0;
    long long v33 = 0uLL;
  }
  *(void *)(v28 + 16) = v30;
  *(_OWORD *)(v28 + 24) = v33;
  *(void *)(v28 + 40) = v31;
  *(_DWORD *)(v28 + 48) = v32;
  *(void *)(v11 + 464) = 0x616F637261656C63;
  *(void *)(v11 + 472) = 0xE900000000000074;
  *(void *)(v11 + 504) = &type metadata for PhysicallyBasedMaterial.Clearcoat;
  uint64_t v34 = swift_allocObject();
  *(void *)(v11 + 480) = v34;
  uint64_t v35 = v34 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:)(v81, v35);
  *(void *)(v11 + 512) = 0xD000000000000012;
  *(void *)(v11 + 520) = 0x800000022834DF10;
  *(void *)(v11 + 552) = &type metadata for PhysicallyBasedMaterial.ClearcoatRoughness;
  uint64_t v36 = swift_allocObject();
  *(void *)(v11 + 528) = v36;
  uint64_t v37 = v36 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:)(v81, v37);
  *(void *)(v11 + 560) = 0x6F72746F73696E61;
  *(void *)(v11 + 568) = 0xEF6C6576654C7970;
  *(void *)(v11 + 600) = &type metadata for PhysicallyBasedMaterial.AnisotropyLevel;
  uint64_t v38 = swift_allocObject();
  *(void *)(v11 + 576) = v38;
  uint64_t v39 = v38 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:)(v81, v39);
  *(void *)(v11 + 608) = 0x6F72746F73696E61;
  *(void *)(v11 + 616) = 0xEF656C676E417970;
  *(void *)(v11 + 648) = &type metadata for PhysicallyBasedMaterial.AnisotropyAngle;
  uint64_t v40 = swift_allocObject();
  *(void *)(v11 + 624) = v40;
  uint64_t v41 = v40 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:)(v81, v41);
  *(void *)(v11 + 656) = 0xD000000000000011;
  *(void *)(v11 + 664) = 0x800000022834DF30;
  v42 = *(void **)(v2 + 32);
  swift_bridgeObjectRetain_n();
  id v43 = v42;
  swift_bridgeObjectRetain_n();
  id v44 = v43;
  specialized String.withCString<A>(_:)(0x6576697373696D65, 0xED0000656C616353, v44, (uint64_t)v84);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = v2;
  v46 = (void *)v84[0];
  uint64_t v47 = v84[1];
  uint64_t v48 = v84[2];
  uint64_t v49 = v84[3];
  uint64_t v50 = v84[4];
  uint64_t v51 = v84[5];
  uint64_t v52 = v84[6];
  uint64_t v74 = v84[7];
  uint64_t v75 = v45;
  int v53 = v85;
  outlined init with copy of PhysicallyBasedMaterial(v45, (uint64_t)v81);
  if (v53 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v86);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v81);
    v60 = v86;
    uint64_t v55 = *((void *)&v87 + 1);
    uint64_t v54 = v87;
    uint64_t v56 = v88;
    uint64_t v57 = v89;
    uint64_t v58 = v90;
    uint64_t v59 = v91;
    uint64_t v61 = v92;
    int v53 = v93;
    uint64_t v62 = v75;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v81);
    v86 = v46;
    *(void *)&long long v87 = v47;
    *((void *)&v87 + 1) = v48;
    uint64_t v88 = v49;
    uint64_t v89 = v50;
    uint64_t v90 = v51;
    uint64_t v91 = v52;
    uint64_t v54 = v47;
    uint64_t v55 = v48;
    uint64_t v56 = v49;
    uint64_t v57 = v50;
    uint64_t v58 = v51;
    uint64_t v59 = v52;
    v60 = v46;
    uint64_t v61 = v74;
    uint64_t v62 = v75;
  }
  int v63 = 0;
  if (v53 != 255)
  {
    if (v53 == 2) {
      int v63 = (int)v60;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v60, v54, v55, v56, v57, v58, v59, v61, v53);
  }
  *(void *)(v11 + 696) = MEMORY[0x263F8D5C8];
  *(_DWORD *)(v11 + 672) = v63;
  strcpy((char *)(v11 + 704), "emissiveColor");
  *(_WORD *)(v11 + 718) = -4864;
  *(void *)(v11 + 744) = &type metadata for PhysicallyBasedMaterial.EmissiveColor;
  uint64_t v64 = swift_allocObject();
  *(void *)(v11 + 720) = v64;
  uint64_t v65 = v64 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v62, v81[0] + 16);
  PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(v81, v65);
  *(void *)(v11 + 752) = 0xD00000000000001ALL;
  *(void *)(v11 + 760) = 0x800000022834DF50;
  *(void *)(v11 + 792) = &type metadata for MaterialParameterTypes.TextureCoordinateTransform;
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, (float32x2_t *)(v11 + 768));
  *(void *)(v11 + 800) = 0xD000000000000023;
  *(void *)(v11 + 808) = 0x800000022834DF70;
  *(void *)(v11 + 840) = &type metadata for MaterialParameterTypes.TextureCoordinateTransform;
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, (float32x2_t *)(v11 + 816));
  *(void *)(v11 + 848) = 0x6C6C754365636166;
  *(void *)(v11 + 856) = 0xEB00000000676E69;
  *(void *)(v11 + 888) = &type metadata for MaterialParameterTypes.FaceCulling;
  char v66 = 2;
  uint64_t v67 = v78;
  uint64_t v68 = v79;
  v70 = v76;
  v69 = v77;
  if ((*(unsigned char *)(v62 + 88) & 1) == 0)
  {
    if (*(void *)(v62 + 80) >= 3uLL) {
      char v66 = 2;
    }
    else {
      char v66 = *(void *)(v62 + 80);
    }
  }
  *(unsigned char *)(v11 + 864) = v66;
  *(void *)(v11 + 896) = 0xD000000000000010;
  *(void *)(v11 + 904) = 0x800000022834DED0;
  *(void *)(v11 + 936) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(unsigned char *)(v11 + 912) = *(void *)(v62 + 136) == 1;
  uint64_t v71 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v70, 1, 1, v71);
  (*(void (**)(char *, void, uint64_t))(v67 + 104))(v69, *MEMORY[0x263F8E830], v68);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t UnlitMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v24[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UnlitMaterial((uint64_t)v1, (uint64_t)v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_22831E320;
  *(void *)(v9 + 32) = 1701667182;
  *(void *)(v9 + 40) = 0xE400000000000000;
  swift_beginAccess();
  if (REMaterialAssetGetSourceName())
  {
    uint64_t v10 = String.init(cString:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v9 + 48) = v10;
  *(void *)(v9 + 56) = v12;
  *(void *)(v9 + 72) = v13;
  *(void *)(v9 + 80) = 0x726F6C6F63;
  *(void *)(v9 + 88) = 0xE500000000000000;
  *(void *)(v9 + 120) = &type metadata for PhysicallyBasedMaterial.BaseColor;
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v14 + 16;
  *(void *)(v9 + 96) = v14;
  v24[3] = &type metadata for UnlitMaterial;
  v24[4] = &protocol witness table for UnlitMaterial;
  v24[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial((uint64_t)v1, v24[0] + 16);
  uint64_t v16 = v1[10];
  uint64_t v17 = (void *)v1[11];
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v24, v16, v17, v15);
  *(void *)(v9 + 128) = 0x676E69646E656C62;
  *(void *)(v9 + 136) = 0xE800000000000000;
  *(void *)(v9 + 168) = &type metadata for PhysicallyBasedMaterial.Blending;
  uint64_t v18 = swift_allocObject();
  *(void *)(v9 + 144) = v18;
  UnlitMaterial.blending.getter(v18 + 16);
  *(void *)(v9 + 176) = 0xD000000000000010;
  *(void *)(v9 + 184) = 0x800000022834DA00;
  unint64_t v19 = specialized MaterialWithOpacityThresholdInternal.opacityThresholdInternal.getter();
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float?);
  *(_DWORD *)(v9 + 192) = v19;
  *(unsigned char *)(v9 + 196) = BYTE4(v19) & 1;
  *(void *)(v9 + 216) = v20;
  *(void *)(v9 + 224) = 0xD000000000000010;
  *(void *)(v9 + 232) = 0x800000022834DED0;
  *(void *)(v9 + 264) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(unsigned char *)(v9 + 240) = v1[14] == 1;
  uint64_t v21 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 1, 1, v21);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void CustomMaterial.customMirror.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CustomMaterial(v1, (uint64_t)&v66);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22831E340;
  *(void *)(v11 + 32) = 1701667182;
  *(void *)(v11 + 40) = 0xE400000000000000;
  swift_beginAccess();
  uint64_t SourceName = REMaterialAssetGetSourceName();
  uint64_t v49 = v4;
  uint64_t v50 = a1;
  uint64_t v47 = v7;
  uint64_t v48 = v5;
  v46 = v10;
  if (SourceName)
  {
    uint64_t v13 = String.init(cString:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v11 + 48) = v13;
  *(void *)(v11 + 56) = v15;
  *(void *)(v11 + 72) = v16;
  strcpy((char *)(v11 + 80), "lightingModel");
  *(_WORD *)(v11 + 94) = -4864;
  *(void *)(v11 + 120) = &type metadata for CustomMaterial.LightingModel;
  CustomMaterial.lightingModel.getter((char *)(v11 + 96));
  *(void *)(v11 + 128) = 0x6F6C6F4365736162;
  *(void *)(v11 + 136) = 0xE900000000000072;
  *(void *)(v11 + 168) = &type metadata for CustomMaterial.BaseColor;
  int v53 = &type metadata for CustomMaterial;
  uint64_t v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.BaseColor.init(material:alternateTintKey:)(v52, 0, 0, v11 + 144);
  *(void *)(v11 + 176) = 0x73656E6867756F72;
  *(void *)(v11 + 184) = 0xE900000000000073;
  *(void *)(v11 + 216) = &type metadata for CustomMaterial.Roughness;
  int v53 = &type metadata for CustomMaterial;
  uint64_t v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Roughness.init(material:alternateTintKey:)(v52, v11 + 192);
  *(void *)(v11 + 224) = 0x63696C6C6174656DLL;
  *(void *)(v11 + 232) = 0xE800000000000000;
  *(void *)(v11 + 264) = &type metadata for CustomMaterial.Metallic;
  int v53 = &type metadata for CustomMaterial;
  uint64_t v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Metallic.init(material:alternateTintKey:)(v52, v11 + 240);
  *(void *)(v11 + 272) = 0x6C616D726F6ELL;
  *(void *)(v11 + 280) = 0xE600000000000000;
  *(void *)(v11 + 312) = &type metadata for CustomMaterial.Normal;
  int v53 = &type metadata for CustomMaterial;
  uint64_t v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Normal.init(material:alternateTintKey:)(v52, v11 + 288);
  strcpy((char *)(v11 + 320), "emissiveColor");
  *(_WORD *)(v11 + 334) = -4864;
  *(void *)(v11 + 360) = &type metadata for CustomMaterial.EmissiveColor;
  int v53 = &type metadata for CustomMaterial;
  uint64_t v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.EmissiveColor.init(material:alternateTintKey:)(v52, v11 + 336);
  *(void *)(v11 + 368) = 0xD000000000000010;
  *(void *)(v11 + 376) = 0x800000022834DEF0;
  *(void *)(v11 + 408) = &type metadata for CustomMaterial.AmbientOcclusion;
  int v53 = &type metadata for CustomMaterial;
  uint64_t v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.AmbientOcclusion.init(material:alternateTintKey:)(v52, v11 + 384);
  *(void *)(v11 + 416) = 0x72616C7563657073;
  *(void *)(v11 + 424) = 0xE800000000000000;
  *(void *)(v11 + 456) = &type metadata for CustomMaterial.Specular;
  int v53 = &type metadata for CustomMaterial;
  uint64_t v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Specular.init(material:alternateTintKey:)(v52, v11 + 432);
  *(void *)(v11 + 464) = 0x616F637261656C63;
  *(void *)(v11 + 472) = 0xE900000000000074;
  *(void *)(v11 + 504) = &type metadata for CustomMaterial.Clearcoat;
  int v53 = &type metadata for CustomMaterial;
  uint64_t v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Clearcoat.init(material:alternateTintKey:)(v52, v11 + 480);
  *(void *)(v11 + 512) = 0xD000000000000012;
  *(void *)(v11 + 520) = 0x800000022834DF10;
  *(void *)(v11 + 552) = &type metadata for CustomMaterial.ClearcoatRoughness;
  int v53 = &type metadata for CustomMaterial;
  uint64_t v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.ClearcoatRoughness.init(material:alternateTintKey:)(v52, v11 + 528);
  *(void *)(v11 + 560) = 0x6D6F74737563;
  *(void *)(v11 + 568) = 0xE600000000000000;
  *(void *)(v11 + 600) = &type metadata for CustomMaterial.Custom;
  uint64_t v17 = swift_allocObject();
  *(void *)(v11 + 576) = v17;
  uint64_t v18 = (int8x16_t *)(v17 + 16);
  int v53 = &type metadata for CustomMaterial;
  uint64_t v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Custom.init(material:alternateTintKey:)(v52, v18);
  *(void *)(v11 + 608) = 0x676E69646E656C62;
  *(void *)(v11 + 616) = 0xE800000000000000;
  *(void *)(v11 + 648) = &type metadata for CustomMaterial.Blending;
  CustomMaterial.blending.getter(v11 + 624);
  *(void *)(v11 + 656) = 0xD000000000000010;
  *(void *)(v11 + 664) = 0x800000022834DA00;
  unint64_t v19 = *(void **)(v2 + 32);
  swift_bridgeObjectRetain_n();
  id v20 = v19;
  swift_bridgeObjectRetain_n();
  id v21 = v20;
  v44[1] = 0x800000022834DA00;
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000022834DA00, v21, (uint64_t)v55);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = v2;
  uint64_t v24 = (void *)v55[0];
  uint64_t v23 = v55[1];
  uint64_t v25 = v55[2];
  uint64_t v26 = v55[3];
  uint64_t v28 = v55[4];
  uint64_t v27 = v55[5];
  uint64_t v29 = v55[6];
  uint64_t v45 = v55[7];
  int v30 = v56;
  uint64_t v51 = v22;
  outlined init with copy of CustomMaterial(v22, (uint64_t)v52);
  if (v30 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v57);
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)v52);
    uint64_t v36 = v57;
    uint64_t v31 = v58;
    uint64_t v32 = v59;
    uint64_t v33 = v60;
    uint64_t v34 = v61;
    uint64_t v35 = v62;
    uint64_t v37 = v63;
    uint64_t v38 = v64;
    int v30 = v65;
  }
  else
  {
    outlined destroy of CustomMaterial((uint64_t)v52);
    uint64_t v57 = v24;
    uint64_t v58 = v23;
    uint64_t v59 = v25;
    uint64_t v60 = v26;
    uint64_t v61 = v28;
    uint64_t v62 = v27;
    uint64_t v63 = v29;
    uint64_t v31 = v23;
    uint64_t v32 = v25;
    uint64_t v33 = v26;
    uint64_t v34 = v28;
    uint64_t v35 = v27;
    uint64_t v36 = v24;
    uint64_t v37 = v29;
    uint64_t v38 = v45;
  }
  int v39 = 0;
  char v40 = 1;
  uint64_t v41 = v51;
  if (v30 != 255)
  {
    if (v30 == 2)
    {
      char v40 = 0;
      int v39 = (int)v36;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v36, v31, v32, v33, v34, v35, v37, v38, v30);
  }
  *(void *)(v11 + 696) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float?);
  *(_DWORD *)(v11 + 672) = v39;
  *(unsigned char *)(v11 + 676) = v40;
  *(void *)(v11 + 704) = 0xD00000000000001ALL;
  *(void *)(v11 + 712) = 0x800000022834DF50;
  *(void *)(v11 + 744) = &type metadata for MaterialParameterTypes.TextureCoordinateTransform;
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, (float32x2_t *)(v11 + 720));
  *(void *)(v11 + 752) = 0xD000000000000023;
  *(void *)(v11 + 760) = 0x800000022834DF70;
  *(void *)(v11 + 792) = &type metadata for MaterialParameterTypes.TextureCoordinateTransform;
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, (float32x2_t *)(v11 + 768));
  *(void *)(v11 + 800) = 0x6C6C754365636166;
  *(void *)(v11 + 808) = 0xEB00000000676E69;
  *(void *)(v11 + 840) = &type metadata for MaterialParameterTypes.FaceCulling;
  if (*(unsigned char *)(v41 + 48))
  {
    __break(1u);
  }
  else
  {
    unint64_t v42 = *(void *)(v41 + 40);
    if (v42 >= 3) {
      LOBYTE(v42) = 2;
    }
    *(unsigned char *)(v11 + 816) = v42;
    *(void *)(v11 + 848) = 0xD000000000000010;
    *(void *)(v11 + 856) = 0x800000022834DED0;
    *(void *)(v11 + 888) = &type metadata for MaterialParameterTypes.TriangleFillMode;
    *(unsigned char *)(v11 + 864) = *(void *)(v41 + 320) == 1;
    uint64_t v43 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v46, 1, 1, v43);
    (*(void (**)(char *, void, uint64_t))(v48 + 104))(v47, *MEMORY[0x263F8E830], v49);
    Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  }
}

uint64_t OcclusionMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v24 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1[1];
  LOBYTE(v6) = *((unsigned char *)v1 + 16);
  uint64_t v10 = v1[3];
  uint64_t v9 = (void *)v1[4];
  char v11 = *((unsigned char *)v1 + 40);
  char v12 = *((unsigned char *)v1 + 41);
  uint64_t v13 = v1[6];
  char v14 = *((unsigned char *)v1 + 56);
  uint64_t v26 = *v1;
  uint64_t v27 = v8;
  char v28 = v6;
  uint64_t v29 = v10;
  int v30 = v9;
  char v31 = v11;
  char v32 = v12;
  uint64_t v33 = v13;
  char v34 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_22831E350;
  *(void *)(v15 + 32) = 1701667182;
  *(void *)(v15 + 40) = 0xE400000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v16 = v9;
  swift_retain();
  swift_bridgeObjectRetain();
  if (REMaterialAssetGetSourceName())
  {
    uint64_t v17 = String.init(cString:)();
    uint64_t v19 = v18;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v19 = 0;
  }
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v15 + 48) = v17;
  *(void *)(v15 + 56) = v19;
  *(void *)(v15 + 72) = v20;
  *(void *)(v15 + 80) = 0xD000000000000017;
  *(void *)(v15 + 88) = 0x800000022834DFA0;
  *(void *)(v15 + 120) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v15 + 96) = v11;
  uint64_t v21 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 1, 1, v21);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v24);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t PortalMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1[1];
  LOBYTE(v7) = *((unsigned char *)v1 + 16);
  uint64_t v11 = v1[3];
  uint64_t v10 = (void *)v1[4];
  char v12 = *((unsigned char *)v1 + 56);
  uint64_t v23 = *v1;
  uint64_t v24 = v9;
  char v25 = v7;
  uint64_t v26 = v11;
  uint64_t v27 = v10;
  long long v21 = *(_OWORD *)(v1 + 5);
  long long v28 = v21;
  char v29 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_22831E350;
  *(void *)(v13 + 32) = 1701667182;
  *(void *)(v13 + 40) = 0xE400000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v14 = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  if (REMaterialAssetGetSourceName())
  {
    uint64_t v15 = String.init(cString:)();
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v13 + 48) = v15;
  *(void *)(v13 + 56) = v17;
  *(void *)(v13 + 72) = v18;
  *(void *)(v13 + 80) = 0xD000000000000010;
  *(void *)(v13 + 88) = 0x800000022834DED0;
  *(void *)(v13 + 120) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(unsigned char *)(v13 + 96) = (void)v21 == 1;
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void *ShaderGraphMaterial.customMirrorParameters.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  char v80 = *((unsigned char *)v0 + 16);
  uint64_t v4 = v0[3];
  uint64_t v3 = (void *)v0[4];
  uint64_t v79 = v0[5];
  char v77 = *((unsigned char *)v0 + 49);
  char v78 = *((unsigned char *)v0 + 48);
  uint64_t v76 = v0[7];
  char v75 = *((unsigned char *)v0 + 64);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v5 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = REMaterialAssetCopyShaderGraphParameterNames();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v73 = v5;
    uint64_t v74 = v1;
    uint64_t v10 = (void **)(v8 + 40);
    uint64_t v11 = (void *)MEMORY[0x263F8EE80];
    uint64_t v71 = v4;
    uint64_t v72 = v2;
    while (1)
    {
      uint64_t v12 = (uint64_t)*(v10 - 1);
      uint64_t v13 = *v10;
      swift_bridgeObjectRetain();
      id v14 = (void *)MEMORY[0x22A688A50](v12, v13);
      int IsVisibleShaderGraphParameter = REMaterialAssetIsVisibleShaderGraphParameter();

      if (IsVisibleShaderGraphParameter) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_7:
      v10 += 2;
      if (!--v9) {
        goto LABEL_45;
      }
    }
    uint64_t v86 = v12;
    long long v87 = v11;
    uint64_t v91 = (uint64_t)v13;
    uint64_t v92 = 3027236;
    unint64_t v93 = 0xE300000000000000;
    v16._countAndFlagsBits = v12;
    v16._object = v13;
    String.append(_:)(v16);
    uint64_t v17 = v93;
    uint64_t v89 = v92;
    v101[3] = &type metadata for ShaderGraphMaterial;
    v101[4] = &protocol witness table for ShaderGraphMaterial;
    uint64_t v18 = swift_allocObject();
    v101[0] = v18;
    *(void *)(v18 + 16) = v74;
    *(void *)(v18 + 24) = v2;
    *(unsigned char *)(v18 + 32) = v80;
    *(void *)(v18 + 40) = v4;
    *(void *)(v18 + 48) = v73;
    *(void *)(v18 + 56) = v79;
    *(unsigned char *)(v18 + 64) = v78;
    *(unsigned char *)(v18 + 65) = v77;
    *(void *)(v18 + 72) = v76;
    *(unsigned char *)(v18 + 80) = v75;
    __swift_project_boxed_opaque_existential_1(v101, (uint64_t)&type metadata for ShaderGraphMaterial);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v19 = v73;
    Material.subscript.getter(v89, v17, (uint64_t)&type metadata for ShaderGraphMaterial, (uint64_t)&v92);
    char v20 = v100;
    long long v21 = (void *)v92;
    uint64_t v23 = v94;
    uint64_t v22 = v95;
    uint64_t v24 = v96;
    uint64_t v25 = v97;
    v84 = v10;
    uint64_t v85 = v9;
    switch(v100)
    {
      case 0:
        uint64_t v90 = v92;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = 0;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 1;
        goto LABEL_30;
      case 1:
        uint64_t v35 = v93;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        swift_retain();
        outlined consume of MaterialParameters.Value?(v21, v35, v23, v22, 0, 0, 0, 0, 0);
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 1;
        uint64_t v90 = v35;
        uint64_t v27 = 0;
        goto LABEL_30;
      case 2:
        swift_bridgeObjectRelease();
        uint64_t v90 = v21;
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = 0;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 2;
        goto LABEL_30;
      case 3:
        uint64_t v90 = v92;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = 0;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 3;
        goto LABEL_30;
      case 4:
        uint64_t v90 = v92;
        unint64_t v38 = v93;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = v38;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 4;
        goto LABEL_30;
      case 5:
        uint64_t v90 = v92;
        unint64_t v39 = v93;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = v39;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 5;
        goto LABEL_30;
      case 6:
        uint64_t v90 = v92;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = 0;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 6;
        goto LABEL_30;
      case 7:
        uint64_t v90 = v92;
        unint64_t v40 = v93;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = v40;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 7;
        goto LABEL_30;
      case 8:
        uint64_t v90 = v92;
        unint64_t v36 = v93;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = v36;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 8;
        goto LABEL_28;
      case 9:
        uint64_t v90 = v92;
        uint64_t v31 = v98;
        uint64_t v32 = v99;
        unint64_t v41 = v93;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = v41;
        char v33 = 9;
LABEL_28:
        uint64_t v42 = (uint64_t)v87;
        uint64_t v28 = v22;
        uint64_t v29 = v24;
        uint64_t v30 = v25;
        goto LABEL_31;
      case 10:
        swift_bridgeObjectRelease();
        uint64_t v90 = v21 & 1;
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = 0;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 10;
        goto LABEL_30;
      case 11:
        swift_bridgeObjectRelease();
        uint64_t v90 = v21;
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = 0;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 11;
        goto LABEL_30;
      case 12:
        uint64_t v90 = v92;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = 0;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 12;
        goto LABEL_30;
      case 13:
        uint64_t v90 = v92;
        unint64_t v34 = v93;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = v34;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 13;
        goto LABEL_30;
      case 14:
        uint64_t v90 = v92;
        unint64_t v37 = v93;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = v37;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 14;
        goto LABEL_30;
      case 15:
        swift_bridgeObjectRelease();
        uint64_t v90 = v21;
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = 0;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 15;
        goto LABEL_30;
      case 16:
        uint64_t v90 = v92;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = 0;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = 16;
        goto LABEL_30;
      case 17:
      case 18:
        uint64_t v90 = v92;
        unint64_t v26 = v93;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        uint64_t v27 = v26;
        uint64_t v23 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        char v33 = v20;
LABEL_30:
        uint64_t v42 = (uint64_t)v87;
LABEL_31:
        uint64_t v82 = v31;
        char v83 = v33;
        uint64_t v43 = v27;
        uint64_t v44 = v28;
        uint64_t v45 = v29;
        uint64_t v88 = v30;
        uint64_t v81 = v32;
        outlined copy of MaterialParameters.Value((id)v90, v27, v23, v28, v29, v30, v31, v32, v33);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v92 = v42;
        unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v91);
        uint64_t v49 = *(void *)(v42 + 16);
        BOOL v50 = (v47 & 1) == 0;
        uint64_t v51 = v49 + v50;
        if (__OFADD__(v49, v50))
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x227DDD118);
        }
        char v52 = v47;
        if (*(void *)(v42 + 24) < v51)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, isUniquelyReferenced_nonNull_native);
          unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v86, v91);
          if ((v52 & 1) != (v54 & 1)) {
            goto LABEL_48;
          }
          unint64_t v48 = v53;
          uint64_t v11 = (void *)v92;
          if ((v52 & 1) == 0) {
            goto LABEL_40;
          }
LABEL_38:
          uint64_t v55 = v11[7] + 80 * v48;
          outlined consume of MaterialParameters.Value(*(void **)v55, *(void *)(v55 + 8), *(void *)(v55 + 16), *(void *)(v55 + 24), *(void *)(v55 + 32), *(void *)(v55 + 40), *(void *)(v55 + 48), *(void *)(v55 + 56), *(unsigned char *)(v55 + 64));
          unsigned __int8 v56 = (void *)v90;
          *(void *)uint64_t v55 = v90;
          *(void *)(v55 + 8) = v43;
          uint64_t v57 = v43;
          uint64_t v58 = v23;
          *(void *)(v55 + 16) = v23;
          *(void *)(v55 + 24) = v44;
          uint64_t v59 = v44;
          uint64_t v60 = v45;
          uint64_t v61 = v88;
          *(void *)(v55 + 32) = v45;
          *(void *)(v55 + 40) = v88;
          uint64_t v63 = v81;
          uint64_t v62 = v82;
          *(void *)(v55 + 48) = v82;
          *(void *)(v55 + 56) = v81;
          *(unsigned char *)(v55 + 64) = v83;
          char v64 = v83;
LABEL_42:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of MaterialParameters.Value(v56, v57, v58, v59, v60, v61, v62, v63, v64);
          uint64_t v4 = v71;
          uint64_t v10 = v84;
          uint64_t v9 = v85;
LABEL_43:
          uint64_t v2 = v72;
          goto LABEL_7;
        }
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v11 = (void *)v92;
          if (v47) {
            goto LABEL_38;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v11 = (void *)v92;
          if (v52) {
            goto LABEL_38;
          }
        }
LABEL_40:
        v11[(v48 >> 6) + 8] |= 1 << v48;
        unsigned __int8 v65 = (uint64_t *)(v11[6] + 16 * v48);
        *unsigned __int8 v65 = v86;
        v65[1] = v91;
        uint64_t v66 = v11[7] + 80 * v48;
        unsigned __int8 v56 = (void *)v90;
        *(void *)uint64_t v66 = v90;
        *(void *)(v66 + 8) = v43;
        uint64_t v57 = v43;
        uint64_t v58 = v23;
        *(void *)(v66 + 16) = v23;
        *(void *)(v66 + 24) = v44;
        uint64_t v59 = v44;
        uint64_t v60 = v45;
        uint64_t v61 = v88;
        *(void *)(v66 + 32) = v45;
        *(void *)(v66 + 40) = v88;
        uint64_t v63 = v81;
        uint64_t v62 = v82;
        *(void *)(v66 + 48) = v82;
        *(void *)(v66 + 56) = v81;
        char v64 = v83;
        *(unsigned char *)(v66 + 64) = v83;
        uint64_t v67 = v11[2];
        BOOL v68 = __OFADD__(v67, 1);
        uint64_t v69 = v67 + 1;
        if (v68) {
          goto LABEL_47;
        }
        v11[2] = v69;
        swift_bridgeObjectRetain();
        goto LABEL_42;
      default:
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v101);
        swift_bridgeObjectRelease();
        uint64_t v4 = v71;
        uint64_t v11 = v87;
        goto LABEL_43;
    }
  }
  uint64_t v11 = (void *)MEMORY[0x263F8EE80];
LABEL_45:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t ShaderGraphMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v31 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v30 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v29 = &v24[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v28 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *v1;
  uint64_t v5 = v1[1];
  LODWORD(v4) = *((unsigned __int8 *)v1 + 16);
  uint64_t v7 = v1[3];
  uint64_t v8 = (void *)v1[4];
  uint64_t v9 = v1[5];
  int v10 = *((unsigned __int8 *)v1 + 48);
  int v11 = *((unsigned __int8 *)v1 + 49);
  uint64_t v12 = v1[7];
  char v13 = *((unsigned char *)v1 + 64);
  uint64_t v43 = *v1;
  uint64_t v44 = v5;
  int v27 = v4;
  char v45 = v4;
  uint64_t v46 = v7;
  char v47 = v8;
  uint64_t v48 = v9;
  int v26 = v10;
  char v49 = v10;
  int v25 = v11;
  char v50 = v11;
  uint64_t v51 = v12;
  char v52 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_22831E360;
  *(void *)(v14 + 32) = 1701667182;
  *(void *)(v14 + 40) = 0xE400000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v15 = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  if (REMaterialAssetGetSourceName())
  {
    uint64_t v16 = String.init(cString:)();
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v14 + 48) = v16;
  *(void *)(v14 + 56) = v18;
  *(void *)(v14 + 72) = v19;
  *(void *)(v14 + 80) = 0x6574656D61726170;
  *(void *)(v14 + 88) = 0xEA00000000007372;
  uint64_t v33 = v6;
  uint64_t v34 = v5;
  char v35 = v27;
  uint64_t v36 = v7;
  id v37 = v15;
  uint64_t v38 = v9;
  char v39 = v26;
  char v40 = v25;
  uint64_t v41 = v12;
  char v42 = v13;
  char v20 = ShaderGraphMaterial.customMirrorParameters.getter();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MaterialParameters.Value]);
  *(void *)(v14 + 96) = v20;
  *(void *)(v14 + 120) = v21;
  *(void *)(v14 + 128) = 0xD000000000000010;
  *(void *)(v14 + 136) = 0x800000022834DED0;
  *(void *)(v14 + 168) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(unsigned char *)(v14 + 144) = v9 == 1;
  uint64_t v22 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v28, 1, 1, v22);
  (*(void (**)(unsigned char *, void, uint64_t))(v30 + 104))(v29, *MEMORY[0x263F8E830], v31);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t VideoMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v26 = *(void *)(v2 - 8);
  uint64_t v27 = v2;
  MEMORY[0x270FA5388](v2);
  int v25 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1[1];
  LOBYTE(v5) = *((unsigned char *)v1 + 16);
  uint64_t v8 = v1[3];
  uint64_t v9 = (void *)v1[4];
  uint64_t v11 = v1[5];
  uint64_t v10 = v1[6];
  uint64_t v12 = v1[7];
  char v13 = *((unsigned char *)v1 + 64);
  char v14 = *((unsigned char *)v1 + 65);
  uint64_t v15 = v1[9];
  char v16 = *((unsigned char *)v1 + 80);
  uint64_t v29 = *v1;
  uint64_t v30 = v7;
  char v31 = v5;
  uint64_t v32 = v8;
  uint64_t v33 = v9;
  uint64_t v34 = v11;
  uint64_t v35 = v10;
  uint64_t v36 = v12;
  char v37 = v13;
  char v38 = v14;
  uint64_t v39 = v15;
  char v40 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_22831E350;
  *(void *)(v17 + 32) = 1701667182;
  *(void *)(v17 + 40) = 0xE400000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v18 = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (REMaterialAssetGetSourceName())
  {
    uint64_t v19 = String.init(cString:)();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v17 + 48) = v19;
  *(void *)(v17 + 56) = v21;
  *(void *)(v17 + 72) = v22;
  *(void *)(v17 + 80) = 0xD000000000000010;
  *(void *)(v17 + 88) = 0x800000022834DED0;
  *(void *)(v17 + 120) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(unsigned char *)(v17 + 96) = v12 == 1;
  uint64_t v23 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v6, 1, 1, v23);
  (*(void (**)(char *, void, uint64_t))(v26 + 104))(v25, *MEMORY[0x263F8E830], v27);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized String.withCString<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X5>, uint64_t a4@<X8>)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKMaterialParameterBlock.Parameter?);
    _StringGuts._slowWithCString<A>(_:)();
LABEL_7:

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v6 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v6, v7, (uint64_t (*)(void))partial apply for closure #1 in __RKMaterialParameterBlock.get(parameter:));
    goto LABEL_7;
  }
  closure #1 in __RKMaterialParameterBlock.get(parameter:)(a4);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Material.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void **)(v3 + 32);
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  specialized String.withCString<A>(_:)(a1, a2, v10, (uint64_t)v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v22[0];
  uint64_t v12 = v22[1];
  uint64_t v13 = v22[2];
  uint64_t v14 = v22[3];
  uint64_t v16 = v22[4];
  uint64_t v15 = v22[5];
  uint64_t v17 = v22[6];
  uint64_t v20 = v22[7];
  int v18 = v23;
  outlined init with copy of PhysicallyBasedMaterial(v4, (uint64_t)v21);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter(a3);
    swift_release();
    return outlined destroy of PhysicallyBasedMaterial((uint64_t)v21);
  }
  else
  {
    uint64_t result = outlined destroy of PhysicallyBasedMaterial((uint64_t)v21);
    *(void *)a3 = v11;
    *(void *)(a3 + 8) = v12;
    *(void *)(a3 + 16) = v13;
    *(void *)(a3 + 24) = v14;
    *(void *)(a3 + 32) = v16;
    *(void *)(a3 + 40) = v15;
    *(void *)(a3 + 48) = v17;
    *(void *)(a3 + 56) = v20;
    *(unsigned char *)(a3 + 64) = v18;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  void v21[43];
  void v22[8];
  unsigned __int8 v23;

  uint64_t v4 = v3;
  uint64_t v8 = *(void **)(v3 + 32);
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  specialized String.withCString<A>(_:)(a1, a2, v10, (uint64_t)v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v22[0];
  uint64_t v12 = v22[1];
  uint64_t v13 = v22[2];
  uint64_t v14 = v22[3];
  uint64_t v16 = v22[4];
  uint64_t v15 = v22[5];
  uint64_t v17 = v22[6];
  uint64_t v20 = v22[7];
  int v18 = v23;
  outlined init with copy of CustomMaterial(v4, (uint64_t)v21);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter(a3);
    swift_release();
    return outlined destroy of CustomMaterial((uint64_t)v21);
  }
  else
  {
    uint64_t result = outlined destroy of CustomMaterial((uint64_t)v21);
    *(void *)a3 = v11;
    *(void *)(a3 + 8) = v12;
    *(void *)(a3 + 16) = v13;
    *(void *)(a3 + 24) = v14;
    *(void *)(a3 + 32) = v16;
    *(void *)(a3 + 40) = v15;
    *(void *)(a3 + 48) = v17;
    *(void *)(a3 + 56) = v20;
    *(unsigned char *)(a3 + 64) = v18;
  }
  return result;
}

void specialized Material.getUVTransform(withSuffix:)(uint64_t a1@<X0>, void *a2@<X1>, float32x2_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  LOBYTE(v70) = 13;
  _print_unlocked<A, B>(_:_:)();
  v54._countAndFlagsBits = a1;
  v54._object = a2;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  uint64_t v8 = *(void **)(v3 + 32);
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  specialized String.withCString<A>(_:)(0, 0xE000000000000000, v10, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v62;
  unsigned __int8 v56 = v61;
  uint64_t v12 = v63;
  uint64_t v13 = v64;
  uint64_t v14 = v65;
  uint64_t v15 = v66;
  uint64_t v16 = v67;
  uint64_t v17 = v68;
  int v18 = v69;
  outlined init with copy of PhysicallyBasedMaterial(v4, (uint64_t)&v59);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    uint64_t v24 = v70;
    uint64_t v25 = v71;
    uint64_t v19 = v72;
    uint64_t v20 = v73;
    uint64_t v21 = v74;
    uint64_t v22 = v75;
    uint64_t v23 = v76;
    uint64_t v26 = v77;
    int v18 = v78;
    if (v78 == 255) {
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    uint64_t v19 = v12;
    uint64_t v20 = v13;
    uint64_t v21 = v14;
    uint64_t v22 = v15;
    uint64_t v23 = v16;
    uint64_t v24 = v56;
    uint64_t v25 = v11;
    uint64_t v26 = v17;
  }
  if (v18 == 5)
  {
    v27.i64[0] = (uint64_t)v24;
    v27.i64[1] = v25;
    float32x4_t v57 = v27;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, 5u);
    goto LABEL_8;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, v18);
LABEL_7:
  float32x4_t v57 = (float32x4_t)xmmword_22831E370;
LABEL_8:
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  LOBYTE(v70) = 14;
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v54);
  uint64_t v29 = v59;
  uint64_t v28 = v60;
  uint64_t v30 = *(void **)(v4 + 32);
  swift_bridgeObjectRetain_n();
  id v31 = v30;
  swift_bridgeObjectRetain_n();
  id v32 = v31;
  specialized String.withCString<A>(_:)(v29, v28, v32, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v62;
  uint64_t v55 = v61;
  uint64_t v34 = v63;
  uint64_t v35 = v64;
  uint64_t v36 = v65;
  uint64_t v37 = v66;
  uint64_t v38 = v67;
  uint64_t v39 = v68;
  int v40 = v69;
  outlined init with copy of PhysicallyBasedMaterial(v4, (uint64_t)&v59);
  if (v40 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    char v47 = v70;
    uint64_t v41 = v71;
    uint64_t v42 = v72;
    uint64_t v43 = v73;
    uint64_t v44 = v74;
    uint64_t v45 = v75;
    uint64_t v46 = v76;
    uint64_t v48 = v77;
    int v40 = v78;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    uint64_t v41 = v33;
    uint64_t v42 = v34;
    uint64_t v43 = v35;
    uint64_t v44 = v36;
    uint64_t v45 = v37;
    uint64_t v46 = v38;
    char v47 = v55;
    uint64_t v48 = v39;
  }
  float32x2_t v49 = 0;
  if (v40 != 255)
  {
    if (v40 == 3) {
      float32x2_t v49 = (float32x2_t)v47;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v47, v41, v42, v43, v44, v45, v46, v48, v40);
  }
  int8x16_t v50 = (int8x16_t)vmulq_f32(v57, v57);
  float32x2_t v51 = (float32x2_t)vextq_s8(v50, v50, 4uLL).u64[0];
  v50.i32[1] = vextq_s8(v50, v50, 8uLL).i32[1];
  float32x2_t v52 = vsqrt_f32(vadd_f32(v51, *(float32x2_t *)v50.i8));
  float v53 = atan2f(v57.f32[1], v57.f32[0]);
  *a3 = v49;
  a3[1] = v52;
  a3[2].f32[0] = v53;
}

{
  uint64_t v3;
  uint64_t v4;
  Swift::String v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  float32x2_t v49;
  int8x16_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float v53;
  Swift::String v54;
  void *v55;
  void *v56;
  float32x4_t v57;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;

  uint64_t v4 = v3;
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  LOBYTE(v70) = 13;
  _print_unlocked<A, B>(_:_:)();
  v54._countAndFlagsBits = a1;
  v54._object = a2;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  uint64_t v8 = *(void **)(v3 + 32);
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  specialized String.withCString<A>(_:)(0, 0xE000000000000000, v10, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v62;
  unsigned __int8 v56 = v61;
  uint64_t v12 = v63;
  uint64_t v13 = v64;
  uint64_t v14 = v65;
  uint64_t v15 = v66;
  uint64_t v16 = v67;
  uint64_t v17 = v68;
  int v18 = v69;
  outlined init with copy of CustomMaterial(v4, (uint64_t)&v59);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    uint64_t v24 = v70;
    uint64_t v25 = v71;
    uint64_t v19 = v72;
    uint64_t v20 = v73;
    uint64_t v21 = v74;
    uint64_t v22 = v75;
    uint64_t v23 = v76;
    uint64_t v26 = v77;
    int v18 = v78;
    if (v78 == 255) {
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of CustomMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    uint64_t v19 = v12;
    uint64_t v20 = v13;
    uint64_t v21 = v14;
    uint64_t v22 = v15;
    uint64_t v23 = v16;
    uint64_t v24 = v56;
    uint64_t v25 = v11;
    uint64_t v26 = v17;
  }
  if (v18 == 5)
  {
    v27.i64[0] = (uint64_t)v24;
    v27.i64[1] = v25;
    float32x4_t v57 = v27;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, 5u);
    goto LABEL_8;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, v18);
LABEL_7:
  float32x4_t v57 = (float32x4_t)xmmword_22831E370;
LABEL_8:
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  LOBYTE(v70) = 14;
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v54);
  uint64_t v29 = v59;
  uint64_t v28 = v60;
  uint64_t v30 = *(void **)(v4 + 32);
  swift_bridgeObjectRetain_n();
  id v31 = v30;
  swift_bridgeObjectRetain_n();
  id v32 = v31;
  specialized String.withCString<A>(_:)(v29, v28, v32, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v62;
  uint64_t v55 = v61;
  uint64_t v34 = v63;
  uint64_t v35 = v64;
  uint64_t v36 = v65;
  uint64_t v37 = v66;
  uint64_t v38 = v67;
  uint64_t v39 = v68;
  int v40 = v69;
  outlined init with copy of CustomMaterial(v4, (uint64_t)&v59);
  if (v40 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    char v47 = v70;
    uint64_t v41 = v71;
    uint64_t v42 = v72;
    uint64_t v43 = v73;
    uint64_t v44 = v74;
    uint64_t v45 = v75;
    uint64_t v46 = v76;
    uint64_t v48 = v77;
    int v40 = v78;
  }
  else
  {
    outlined destroy of CustomMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    uint64_t v41 = v33;
    uint64_t v42 = v34;
    uint64_t v43 = v35;
    uint64_t v44 = v36;
    uint64_t v45 = v37;
    uint64_t v46 = v38;
    char v47 = v55;
    uint64_t v48 = v39;
  }
  float32x2_t v49 = 0;
  if (v40 != 255)
  {
    if (v40 == 3) {
      float32x2_t v49 = (float32x2_t)v47;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v47, v41, v42, v43, v44, v45, v46, v48, v40);
  }
  int8x16_t v50 = (int8x16_t)vmulq_f32(v57, v57);
  float32x2_t v51 = (float32x2_t)vextq_s8(v50, v50, 4uLL).u64[0];
  v50.i32[1] = vextq_s8(v50, v50, 8uLL).i32[1];
  float32x2_t v52 = vsqrt_f32(vadd_f32(v51, *(float32x2_t *)v50.i8));
  float v53 = atan2f(v57.f32[1], v57.f32[0]);
  *a3 = v49;
  a3[1] = v52;
  a3[2].f32[0] = v53;
}

{
  uint64_t v3;
  uint64_t v4;
  Swift::String v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  float32x2_t v49;
  int8x16_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float v53;
  Swift::String v54;
  void *v55;
  void *v56;
  float32x4_t v57;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;

  uint64_t v4 = v3;
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  LOBYTE(v70) = 13;
  _print_unlocked<A, B>(_:_:)();
  v54._countAndFlagsBits = a1;
  v54._object = a2;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  uint64_t v8 = *(void **)(v3 + 72);
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  specialized String.withCString<A>(_:)(0, 0xE000000000000000, v10, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v62;
  unsigned __int8 v56 = v61;
  uint64_t v12 = v63;
  uint64_t v13 = v64;
  uint64_t v14 = v65;
  uint64_t v15 = v66;
  uint64_t v16 = v67;
  uint64_t v17 = v68;
  int v18 = v69;
  outlined init with copy of UnlitMaterial(v4, (uint64_t)&v59);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of UnlitMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    uint64_t v24 = v70;
    uint64_t v25 = v71;
    uint64_t v19 = v72;
    uint64_t v20 = v73;
    uint64_t v21 = v74;
    uint64_t v22 = v75;
    uint64_t v23 = v76;
    uint64_t v26 = v77;
    int v18 = v78;
    if (v78 == 255) {
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of UnlitMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    uint64_t v19 = v12;
    uint64_t v20 = v13;
    uint64_t v21 = v14;
    uint64_t v22 = v15;
    uint64_t v23 = v16;
    uint64_t v24 = v56;
    uint64_t v25 = v11;
    uint64_t v26 = v17;
  }
  if (v18 == 5)
  {
    v27.i64[0] = (uint64_t)v24;
    v27.i64[1] = v25;
    float32x4_t v57 = v27;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, 5u);
    goto LABEL_8;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, v18);
LABEL_7:
  float32x4_t v57 = (float32x4_t)xmmword_22831E370;
LABEL_8:
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  LOBYTE(v70) = 14;
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v54);
  uint64_t v29 = v59;
  uint64_t v28 = v60;
  uint64_t v30 = *(void **)(v4 + 72);
  swift_bridgeObjectRetain_n();
  id v31 = v30;
  swift_bridgeObjectRetain_n();
  id v32 = v31;
  specialized String.withCString<A>(_:)(v29, v28, v32, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v62;
  uint64_t v55 = v61;
  uint64_t v34 = v63;
  uint64_t v35 = v64;
  uint64_t v36 = v65;
  uint64_t v37 = v66;
  uint64_t v38 = v67;
  uint64_t v39 = v68;
  int v40 = v69;
  outlined init with copy of UnlitMaterial(v4, (uint64_t)&v59);
  if (v40 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of UnlitMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    char v47 = v70;
    uint64_t v41 = v71;
    uint64_t v42 = v72;
    uint64_t v43 = v73;
    uint64_t v44 = v74;
    uint64_t v45 = v75;
    uint64_t v46 = v76;
    uint64_t v48 = v77;
    int v40 = v78;
  }
  else
  {
    outlined destroy of UnlitMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    uint64_t v41 = v33;
    uint64_t v42 = v34;
    uint64_t v43 = v35;
    uint64_t v44 = v36;
    uint64_t v45 = v37;
    uint64_t v46 = v38;
    char v47 = v55;
    uint64_t v48 = v39;
  }
  float32x2_t v49 = 0;
  if (v40 != 255)
  {
    if (v40 == 3) {
      float32x2_t v49 = (float32x2_t)v47;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v47, v41, v42, v43, v44, v45, v46, v48, v40);
  }
  int8x16_t v50 = (int8x16_t)vmulq_f32(v57, v57);
  float32x2_t v51 = (float32x2_t)vextq_s8(v50, v50, 4uLL).u64[0];
  v50.i32[1] = vextq_s8(v50, v50, 8uLL).i32[1];
  float32x2_t v52 = vsqrt_f32(vadd_f32(v51, *(float32x2_t *)v50.i8));
  float v53 = atan2f(v57.f32[1], v57.f32[0]);
  *a3 = v49;
  a3[1] = v52;
  a3[2].f32[0] = v53;
}

unint64_t specialized Material.getScalar(_:)(char a1)
{
  uint64_t v2 = *(void **)(v1 + 72);
  unint64_t v3 = PbrCommonKeys.Constants.rawValue.getter(a1);
  uint64_t v5 = v4;
  swift_bridgeObjectRetain_n();
  id v6 = v2;
  swift_bridgeObjectRetain_n();
  id v7 = v6;
  specialized String.withCString<A>(_:)(v3, v5, v7, (uint64_t)v11);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12 == 255) {
    goto LABEL_5;
  }
  if (v12 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v11[0], (uint64_t)v11[1], (uint64_t)v11[2], (uint64_t)v11[3], (uint64_t)v11[4], (uint64_t)v11[5], (uint64_t)v11[6], (uint64_t)v11[7], v12);
LABEL_5:
    uint64_t v9 = 0;
    unsigned __int8 v8 = 1;
    return v9 | ((unint64_t)v8 << 32);
  }
  unsigned __int8 v8 = 0;
  uint64_t v9 = LODWORD(v11[0]);
  return v9 | ((unint64_t)v8 << 32);
}

uint64_t outlined init with copy of SimpleMaterial(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *specialized Material.getTexture(_:)(char a1)
{
  uint64_t v2 = *(void **)(v1 + 72);
  unint64_t v3 = PbrCommonKeys.Textures.rawValue.getter(a1);
  uint64_t v5 = v4;
  swift_bridgeObjectRetain_n();
  id v6 = v2;
  swift_bridgeObjectRetain_n();
  id v7 = v6;
  specialized String.withCString<A>(_:)(v3, v5, v7, (uint64_t)&v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned __int8 v8 = v17;
  if (!v25) {
    return v17;
  }
  if (v25 == 255) {
    return 0;
  }
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  uint64_t v11 = v20;
  uint64_t v12 = v21;
  uint64_t v13 = v22;
  uint64_t v14 = v23;
  uint64_t v15 = v24;
  if (v25 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v17, v18, v19, v20, v21, v22, v23, v24, v25);
    return 0;
  }
  swift_retain();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v8, v9, v10, v11, v12, v13, v14, v15, 1u);
  return (void *)v9;
}

uint64_t sub_227DDE974()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 155, 7);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void outlined consume of __RKMaterialParameterBlock.Parameter?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    outlined consume of __RKMaterialParameterBlock.Parameter(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

void outlined consume of __RKMaterialParameterBlock.Parameter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 != 6)
  {
    if (a9 != 1)
    {
      if (!a9)
      {
        swift_release();
      }
      return;
    }
    id v9 = a1;
    swift_release();
    a1 = v9;
  }
}

unint64_t specialized MaterialWithOpacityThresholdInternal.opacityThresholdInternal.getter()
{
  swift_beginAccess();
  REMaterialAssetGetMaterialDefinition();
  uint64_t FunctionConstant = REMaterialAssetGetFunctionConstant();
  if (FunctionConstant)
  {
    uint64_t v2 = (void *)FunctionConstant;
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == 1702195828 && v3 == 0xE400000000000000)
    {

      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_11;
    }
  }
  if ((REAssetHandleResolvesToSameAssetPath() & 1) == 0 && (REAssetHandleResolvesToSameAssetPath() & 1) == 0) {
    goto LABEL_17;
  }
LABEL_11:
  id v6 = *(void **)(v0 + 72);
  swift_bridgeObjectRetain_n();
  id v7 = v6;
  swift_bridgeObjectRetain_n();
  id v8 = v7;
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000022834DA00, v8, (uint64_t)v30);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v30[1];
  uint64_t v28 = (void *)v30[0];
  uint64_t v10 = v30[2];
  uint64_t v11 = v30[3];
  uint64_t v12 = v30[4];
  uint64_t v13 = v30[5];
  uint64_t v15 = v30[6];
  uint64_t v14 = v30[7];
  int v16 = v31;
  outlined init with copy of UnlitMaterial(v0, (uint64_t)v29);
  if (v16 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v32);
    swift_release();
    outlined destroy of UnlitMaterial((uint64_t)v29);
    uint64_t v24 = (void *)v32[0];
    uint64_t v17 = v32[1];
    uint64_t v18 = v32[2];
    uint64_t v19 = v32[3];
    uint64_t v20 = v32[4];
    uint64_t v21 = v32[5];
    uint64_t v22 = v32[6];
    uint64_t v23 = v32[7];
    int v16 = v33;
    if (v33 == 255)
    {
LABEL_17:
      uint64_t v26 = 0;
      unsigned __int8 v25 = 1;
      return v26 | ((unint64_t)v25 << 32);
    }
  }
  else
  {
    outlined destroy of UnlitMaterial((uint64_t)v29);
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    uint64_t v19 = v11;
    uint64_t v20 = v12;
    uint64_t v21 = v13;
    uint64_t v22 = v15;
    uint64_t v23 = v14;
    uint64_t v24 = v28;
  }
  if (v16 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v17, v18, v19, v20, v21, v22, v23, v16);
    goto LABEL_17;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v17, v18, v19, v20, v21, v22, v23, 2u);
  unsigned __int8 v25 = 0;
  uint64_t v26 = v24;
  return v26 | ((unint64_t)v25 << 32);
}

uint64_t outlined init with copy of PhysicallyBasedMaterial(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_227DDED9C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + 80)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  }
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 162, 7);
}

uint64_t sub_227DDEE18()
{
  if (*(void *)(v0 + 32) >= 2uLL)
  {

    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 52, 7);
}

uint64_t objectdestroy_17Tm()
{
  if (*(void *)(v0 + 24))
  {

    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 44, 7);
}

uint64_t sub_227DDEEB4()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {

    if (*(void *)(v0 + 32))
    {

      swift_release();
    }
  }

  return MEMORY[0x270FA0238](v0, 52, 7);
}

uint64_t objectdestroy_9Tm()
{
  if (*(void *)(v0 + 32))
  {

    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 52, 7);
}

uint64_t outlined destroy of PhysicallyBasedMaterial(uint64_t a1)
{
  return a1;
}

uint64_t objectdestroyTm()
{
  if (*(void *)(v0 + 32))
  {

    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 52, 7);
}

uint64_t outlined init with copy of UnlitMaterial(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_227DDF064()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 172, 7);
}

uint64_t outlined init with copy of CustomMaterial(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_227DDF148()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((unint64_t)(*(void *)(v0 + 80) - 1) >= 2) {
    swift_release();
  }
  outlined consume of CustomMaterial.CustomUniformsState(*(void **)(v0 + 96), *(void **)(v0 + 104), *(unsigned char *)(v0 + 112));
  if (*(void *)(v0 + 144)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  }
  swift_release();
  if (*(void *)(v0 + 208))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 256))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((unint64_t)(*(void *)(v0 + 304) - 1) >= 3) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 346, 7);
}

void outlined consume of CustomMaterial.CustomUniformsState(void *a1, void *a2, char a3)
{
  if (a3)
  {
    if (a3 != 1) {
      return;
    }

    a1 = a2;
  }
}

uint64_t sub_227DDF268()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 44, 15);
}

uint64_t outlined destroy of CustomMaterial(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of UnlitMaterial(uint64_t a1)
{
  return a1;
}

uint64_t sub_227DDF348()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 81, 7);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined destroy of MaterialParameters(uint64_t a1)
{
  return a1;
}

id outlined copy of MaterialParameters.Value(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 6)
  {
    return result;
  }
  else
  {
    if (a9 != 1)
    {
      if (a9) {
        return result;
      }
      id v9 = result;
    }
    return (id)swift_retain();
  }
}

void outlined consume of MaterialParameters.Value(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 6)
  {
LABEL_5:

    return;
  }
  if (a9 != 1)
  {
    if (a9) {
      return;
    }
    id v9 = a1;
    swift_release();
    a1 = v9;
    goto LABEL_5;
  }

  swift_release();
}

void outlined consume of MaterialParameters.Value?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    outlined consume of MaterialParameters.Value(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

double partial apply for closure #1 in __RKMaterialParameterBlock.get(parameter:)@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in __RKMaterialParameterBlock.get(parameter:)(a1);
}

uint64_t __RKEntityInteractionsComponent.didAdd(componentRef:)(uint64_t a1)
{
  uint64_t v119 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v122 = *(void *)(v119 - 8);
  MEMORY[0x270FA5388](v119);
  unint64_t v3 = (unint64_t)v106 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = type metadata accessor for JSONEncoder.OutputFormatting();
  uint64_t result = MEMORY[0x270FA5388](v5 - 8);
  if (!a1) {
    goto LABEL_94;
  }
  uint64_t Entity = REComponentGetEntity();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    uint64_t v8 = swift_dynamicCastClassUnconditional();
    goto LABEL_4;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if (result)
  {
    __break(1u);
LABEL_94:
    __break(1u);
    return result;
  }
  uint64_t v10 = specialized static Entity.entityInfoType(_:)(Entity);
  if (v10)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(v10 + 232))();
    uint64_t v11 = *(void *)(v9 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v11, 0);
    *(void *)(v9 + 16) = Entity;
    MEMORY[0x22A68E750](Entity, v9);
    swift_release();
    goto LABEL_8;
  }
  uint64_t v8 = makeEntity(for:)(Entity);
LABEL_4:
  uint64_t v9 = v8;
LABEL_8:
  uint64_t v12 = v109;
  swift_weakAssign();
  uint64_t v136 = 91;
  unint64_t v137 = 0xE100000000000000;
  v135._countAndFlagsBits = 0;
  v135._object = (void *)0xE000000000000000;
  uint64_t v134 = v9;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v135);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8285;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 8250;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  uint64_t v108 = v9;
  swift_release();
  uint64_t v16 = v137;
  unint64_t v110 = v136;
  uint64_t v17 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v17, &v136);
  uint64_t v18 = *(void *)(v12 + 16);
  if (!v18 || !*(void *)(v18 + 16))
  {
    uint64_t v136 = v110;
    unint64_t v137 = v16;
    os_log_type_t v19 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v19, &v136);
    uint64_t v20 = v109;
    uint64_t v21 = __RKEntityInteractionsComponent.decodedJSON()();
    swift_bridgeObjectRelease();
    *(void *)(v20 + 16) = v21;
    uint64_t v18 = v21;
  }
  uint64_t v22 = one-time initialization token for interactionsLoggingEnabled;
  swift_bridgeObjectRetain();
  if (v22 != -1) {
    goto LABEL_92;
  }
  while (1)
  {
    uint64_t v120 = v18;
    unint64_t v121 = v3;
    uint64_t v123 = v16;
    if (interactionsLoggingEnabled)
    {
      uint64_t v136 = v110;
      unint64_t v137 = v16;
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v23, &v136);
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      uint64_t v24 = JSONEncoder.init()();
      static JSONEncoder.OutputFormatting.prettyPrinted.getter();
      dispatch thunk of JSONEncoder.outputFormatting.setter();
      uint64_t v136 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
      lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A](&lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A], &lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification);
      uint64_t v72 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v74 = v73;
      uint64_t v107 = 0;
      static String.Encoding.utf8.getter();
      uint64_t v75 = String.init(data:encoding:)();
      if (v76)
      {
        uint64_t v125 = v72;
        unint64_t v126 = v74;
        uint64_t v127 = v24;
        uint64_t v136 = 10;
        unint64_t v137 = 0xE100000000000000;
        MEMORY[0x270FA5388](v75);
        v106[-2] = &v136;
        uint64_t v77 = v107;
        uint64_t v80 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)&v106[-4], v78, v79);
        uint64_t v107 = v77;
        unint64_t v128 = v80;
        uint64_t v82 = *(void *)(v80 + 16);
        char v83 = &static ForceEffectLogger.logger;
        if (v82)
        {
          v84 = (uint64_t *)(v128 + 56);
          *(void *)&long long v81 = 136315394;
          long long v130 = v81;
          uint64_t v129 = MEMORY[0x263F8EE58] + 8;
          do
          {
            v131 = v106;
            uint64_t v85 = *(v84 - 3);
            uint64_t v86 = *(v84 - 2);
            uint64_t v88 = *(v84 - 1);
            uint64_t v87 = *v84;
            swift_bridgeObjectRetain();
            os_log_type_t v89 = static os_log_type_t.debug.getter();
            if (v83[304] == 1)
            {
              os_log_type_t v90 = v89;
              uint64_t v136 = 0;
              unint64_t v137 = 0xE000000000000000;
              v91._countAndFlagsBits = 0;
              v91._object = (void *)0xE000000000000000;
              String.append(_:)(v91);
              v92._countAndFlagsBits = MEMORY[0x22A688B50](v85, v86, v88, v87);
              String.append(_:)(v92);
              swift_bridgeObjectRelease();
              v93._countAndFlagsBits = 0;
              v93._object = (void *)0xE000000000000000;
              String.append(_:)(v93);
              uint64_t v94 = v136;
              unint64_t v95 = v137;
              if (one-time initialization token for interactionsLogger != -1) {
                swift_once();
              }
              uint64_t v96 = type metadata accessor for Logger();
              __swift_project_value_buffer(v96, (uint64_t)interactionsLogger);
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              uint64_t v97 = Logger.logObject.getter();
              os_log_type_t v98 = v90;
              if (os_log_type_enabled(v97, v90))
              {
                uint64_t v99 = swift_slowAlloc();
                uint64_t v100 = swift_slowAlloc();
                uint64_t v136 = v100;
                *(_DWORD *)uint64_t v99 = v130;
                swift_bridgeObjectRetain();
                *(void *)(v99 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v123, &v136);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v99 + 12) = 2080;
                swift_bridgeObjectRetain();
                *(void *)(v99 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, &v136);
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_227DD2000, v97, v98, "%s%s", (uint8_t *)v99, 0x16u);
                swift_arrayDestroy();
                uint64_t v101 = v100;
                uint64_t v16 = v123;
                MEMORY[0x22A696500](v101, -1, -1);
                MEMORY[0x22A696500](v99, -1, -1);
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
              }
              char v83 = (unsigned char *)&static ForceEffectLogger.logger;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            v84 += 4;
            --v82;
          }
          while (v82);
        }
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v125, v126);
        swift_release();
        uint64_t v18 = v120;
        unint64_t v3 = v121;
      }
      else
      {
        swift_release();
        outlined consume of Data._Representation(v72, v74);
      }
    }
    else
    {
      uint64_t v107 = 0;
    }
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = v110;
      uint64_t v136 = v110;
      unint64_t v137 = v16;
      os_log_type_t v30 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v30, &v136);
      uint64_t v136 = v29;
      unint64_t v137 = v16;
      uint64_t v31 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v31, &v136);
      goto LABEL_83;
    }
    uint64_t v26 = SceneNullable;
    id v27 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v27)
    {
      uint64_t v28 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      uint64_t v28 = Scene.init(coreScene:)(v26);
    }
    uint64_t v32 = v28;
    uint64_t v33 = Scene.__interactionService.getter();
    type metadata accessor for __RKEntityInteractionManager();
    uint64_t v34 = swift_dynamicCastClass();
    if (!v34)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v67 = v110;
      uint64_t v136 = v110;
      unint64_t v137 = v16;
      uint64_t v68 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v68, &v136);
      swift_release();
      uint64_t v136 = v67;
      unint64_t v137 = v16;
      uint64_t v69 = static os_log_type_t.debug.getter();
      v70 = &v136;
      goto LABEL_82;
    }
    v106[1] = v32;
    uint64_t v138 = MEMORY[0x263F8EE78];
    uint64_t v118 = *(void *)(v18 + 16);
    if (!v118) {
      break;
    }
    uint64_t v35 = v34;
    uint64_t v117 = type metadata accessor for __RKEntityTrigger();
    uint64_t v116 = type metadata accessor for __RKEntityAction();
    unint64_t v114 = v18 + ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80));
    v115 = (unint64_t *)(v35 + 40);
    swift_beginAccess();
    unint64_t v36 = 0;
    long long v113 = xmmword_22831E4E0;
    v111 = (void *)(v35 + 64);
    uint64_t v112 = v33;
    while (1)
    {
      if (v36 >= *(void *)(v18 + 16)) {
        goto LABEL_90;
      }
      outlined init with copy of __RKEntityInteractionSpecification(v114 + *(void *)(v122 + 72) * v36, v3);
      unint64_t v37 = *v115;
      swift_retain();
      uint64_t v18 = static __RKEntityTrigger.trigger(for:entityLookupTable:)(v3, v37);
      uint64_t v38 = v119;
      unint64_t v39 = v3 + *(int *)(v119 + 20);
      unint64_t v128 = v37;
      uint64_t v40 = static __RKEntityAction.action(for:entityLookupTable:)(v39, v37);
      uint64_t v41 = (uint64_t *)(v3 + *(int *)(v38 + 24));
      uint64_t v42 = *v41;
      unint64_t v43 = v41[1];
      type metadata accessor for __RKEntityInteraction();
      uint64_t v44 = swift_allocObject();
      *(void *)(v44 + 32) = 0;
      *(void *)(v44 + 48) = 0;
      uint64_t v124 = v44 + 48;
      *(unsigned char *)(v44 + 40) = 1;
      *(void *)(v44 + 56) = 0;
      *(void *)(v44 + 16) = v18;
      v131 = (void *)v44;
      *(void *)(v44 + 24) = v40;
      *(void *)&long long v130 = v44 + 24;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v113;
      *(void *)(inited + 32) = v18;
      unint64_t v132 = inited;
      specialized Array._endMutation()();
      unint64_t v46 = v132;
      type metadata accessor for __RKEntityTriggerGroup();
      uint64_t v47 = swift_dynamicCastClass();
      unint64_t v126 = v43;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain_n();
      if (v47)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        unint64_t v46 = *(void *)(v47 + 24);
        swift_bridgeObjectRetain();
        swift_release();
      }
      uint64_t v125 = v18;
      if (v46 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v16 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v129 = v36;
      uint64_t v127 = v42;
      if (v16) {
        break;
      }
LABEL_60:
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v61 = v131;
      unint64_t v62 = v126;
      v131[6] = v127;
      v61[7] = v62;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v63 = v111;
      swift_beginAccess();
      uint64_t v64 = swift_retain();
      MEMORY[0x22A688E10](v64);
      if (*(void *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      uint64_t v65 = swift_retain();
      MEMORY[0x22A688E10](v65);
      uint64_t v18 = v120;
      unint64_t v3 = v121;
      uint64_t v16 = v123;
      uint64_t v66 = v129;
      if (*(void *)((v138 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v138 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      unint64_t v36 = v66 + 1;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      outlined destroy of __RKEntityInteractionSpecification(v3);
      if (v36 == v118)
      {
        swift_bridgeObjectRelease();
        uint64_t v71 = v138;
        goto LABEL_81;
      }
    }
    if (v16 < 1) {
      goto LABEL_91;
    }
    swift_beginAccess();
    uint64_t v48 = 0;
    while (1)
    {
      if ((v46 & 0xC000000000000001) != 0) {
        MEMORY[0x22A689930](v48, v46);
      }
      else {
        swift_retain();
      }
      type metadata accessor for __RKEntityProximityTrigger();
      uint64_t v49 = swift_dynamicCastClass();
      if (!v49) {
        goto LABEL_54;
      }
      uint64_t v50 = v49;
      uint64_t v51 = swift_beginAccess();
      int v52 = *(unsigned __int8 *)(v50 + 36);
      if (v52 == 1) {
        break;
      }
      if (v52 != 2) {
        goto LABEL_54;
      }
      uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 432))(v51);
      swift_release();
      if (v53)
      {
        swift_beginAccess();
        *(unsigned char *)(v53 + 88) = 1;
        v131[4] = v53;
LABEL_54:
        swift_release();
      }
      if (v16 == ++v48) {
        goto LABEL_60;
      }
    }
    type metadata accessor for __RKEntityActionGroup();
    uint64_t v54 = swift_dynamicCastClass();
    if (!v54) {
      goto LABEL_54;
    }
    uint64_t v55 = v54;
    unsigned __int8 v56 = (uint64_t *)(v54 + 112);
    swift_beginAccess();
    unint64_t v3 = *(void *)(v55 + 112);
    if (v3 >> 62)
    {
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v60 != 2)
      {
LABEL_53:
        swift_release();
        swift_release();
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v57 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_retain();
      if (v57 != 2) {
        goto LABEL_53;
      }
    }
    uint64_t v18 = *v56;
    if ((*v56 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v3 = MEMORY[0x22A689930](0, v18);
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
    if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      unint64_t v3 = *(void *)(v18 + 32);
      swift_retain();
LABEL_45:
      *(void *)long long v130 = v3;
      swift_release();
      uint64_t v18 = *v56;
      if ((*v56 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        unint64_t v3 = MEMORY[0x22A689930](1, v18);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
          goto LABEL_88;
        }
        unint64_t v3 = *(void *)(v18 + 40);
        swift_retain();
      }
      swift_beginAccess();
      *(unsigned char *)(v3 + 88) = 1;
      swift_release();
      uint64_t v58 = *v56;
      if ((v58 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v59 = MEMORY[0x22A689930](1, v58);
      }
      else
      {
        if (*(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
          goto LABEL_89;
        }
        uint64_t v59 = *(void *)(v58 + 40);
        swift_bridgeObjectRetain();
        swift_retain();
      }
      swift_release_n();
      swift_release();
      swift_bridgeObjectRelease();
      v131[4] = v59;
      goto LABEL_54;
    }
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    swift_once();
  }
  swift_bridgeObjectRelease();
  uint64_t v71 = MEMORY[0x263F8EE78];
LABEL_81:
  uint64_t v102 = v109;
  swift_bridgeObjectRelease();
  *(void *)(v102 + 24) = v71;
  uint64_t v103 = v110;
  unint64_t v132 = v110;
  uint64_t v133 = v16;
  os_log_type_t v104 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v104, (uint64_t *)&v132);
  Scene.enableCollisions(_:)(1);
  unint64_t v132 = v103;
  uint64_t v133 = v16;
  os_log_type_t v105 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v105, (uint64_t *)&v132);
  swift_release();
  swift_unknownObjectRelease();
  unint64_t v132 = v103;
  uint64_t v133 = v16;
  uint64_t v69 = static os_log_type_t.debug.getter();
  v70 = (uint64_t *)&v132;
LABEL_82:
  specialized InteractionsLogger.log(_:_:)(v69, v70);
LABEL_83:
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t cloneInteractionsComponentComponent(_:)()
{
  uint64_t Class = REComponentGetClass();
  uint64_t v1 = REComponentCreateByClassOpaquePointer(Class);
  uint64_t Object = RECustomComponentGetObject();
  if (Object && (unint64_t v3 = (uint64_t *)Object, (v4 = RECustomComponentGetObject()) != 0))
  {
    uint64_t v5 = v4;
    if (!v3[1])
    {
      uint64_t v6 = *v3;
      if (*v3)
      {
        type metadata accessor for IntrospectionDataCleanupHelper();
        uint64_t v7 = swift_allocObject();
        *(void *)(v7 + 16) = v6;
        v3[1] = v7;
      }
    }
    outlined init with copy of __RKEntityInteractionsComponent((uint64_t)v3, (uint64_t)v10);
    swift_arrayDestroy();
    outlined init with take of __RKEntityInteractionsComponent((uint64_t)v10, v5);
  }
  else
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    uint64_t v8 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
  }
  return v1;
}

uint64_t __RKEntityInteractionsComponent.decodedJSON()()
{
  uint64_t v1 = type metadata accessor for Data.Deallocator();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  if (!*v0) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v6 = strlen(*v0);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F06F00], v1);
  Data.Deallocator._deallocator.getter();
  if (v6)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v7 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v6 = specialized Data._Representation.init(_:count:)(v7, v6);
    unint64_t v9 = v8;
    swift_release();
  }
  else
  {
    uint64_t v10 = (void (*)(const char *, void))Data.Deallocator._deallocator.getter();
    v10(v5, 0);
    swift_release();
    swift_release();
    unint64_t v9 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
  lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A], (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  outlined consume of Data._Representation(v6, v9);
  return v12[1];
}

uint64_t __RKEntityInteractionsComponent.specifications.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v139 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  Swift::String v135 = (char *)v117 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (void *)((char *)v117 - v11);
  MEMORY[0x270FA5388](v10);
  Swift::String v14 = (char *)v117 - v13;
  uint64_t v15 = v1[2];
  if (v15)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v16 = specialized static Array<A>.== infix(_:_:)(a1, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
      return swift_bridgeObjectRelease();
    }
  }
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v142 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
  lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A](&lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A], &lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification);
  v117[0] = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v120 = v18;
  swift_release();
  unint64_t v19 = v120 >> 62;
  uint64_t v20 = 0;
  switch(v120 >> 62)
  {
    case 1uLL:
      uint64_t v21 = v117[0];
      if (__OFSUB__(HIDWORD(v117[0]), v117[0])) {
        goto LABEL_186;
      }
      if (HIDWORD(v117[0]) - LODWORD(v117[0]) == 0x7FFFFFFF) {
        goto LABEL_23;
      }
      goto LABEL_14;
    case 2uLL:
      uint64_t v21 = v117[0];
      uint64_t v23 = *(void *)(v117[0] + 16);
      uint64_t v22 = *(void *)(v117[0] + 24);
      BOOL v24 = __OFSUB__(v22, v23);
      uint64_t v20 = v22 - v23;
      if (v24) {
        goto LABEL_187;
      }
      if (v20 >= 0x7FFFFFFF)
      {
LABEL_23:
        uint64_t v30 = v21;
        swift_bridgeObjectRelease();
        uint64_t v31 = v30;
        return outlined consume of Data._Representation(v31, v120);
      }
      if (v19 == 2) {
        goto LABEL_16;
      }
LABEL_14:
      LODWORD(v20) = HIDWORD(v21) - v21;
      if (__OFSUB__(HIDWORD(v21), v21)) {
        goto LABEL_188;
      }
      uint64_t v20 = (int)v20;
LABEL_16:
      uint64_t v25 = v20 + 1;
      if (__OFADD__(v20, 1)) {
        goto LABEL_181;
      }
      if (v25 < (uint64_t)0xFFFFFFFF80000000) {
        goto LABEL_182;
      }
      if (v25 > 0x7FFFFFFF) {
        goto LABEL_183;
      }
      uint64_t v122 = v7;
      unint64_t v123 = v4;
      uint64_t v26 = RECIntrospectionAlloc();
      if (*v2)
      {
        swift_release();
        v2[1] = 0;
      }
      *uint64_t v2 = v26;
      type metadata accessor for IntrospectionDataCleanupHelper();
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v26;
      swift_release();
      v2[1] = v27;
      unint64_t v28 = 0;
      unint64_t v29 = v123;
      switch((int)v19)
      {
        case 1:
          if (__OFSUB__(HIDWORD(v117[0]), v117[0])) {
            goto LABEL_189;
          }
          unint64_t v28 = HIDWORD(v117[0]) - LODWORD(v117[0]);
LABEL_26:
          Data.copyBytes(to:count:)();
          goto LABEL_29;
        case 2:
          if (__OFSUB__(*(void *)(v117[0] + 24), *(void *)(v117[0] + 16))) {
            goto LABEL_190;
          }
          uint64_t v32 = v117[0];
          Data.copyBytes(to:count:)();
          uint64_t v34 = *(void *)(v32 + 16);
          uint64_t v33 = *(void *)(v32 + 24);
          unint64_t v28 = v33 - v34;
          if (__OFSUB__(v33, v34)) {
            goto LABEL_191;
          }
LABEL_29:
          *(unsigned char *)(v26 + v28) = 0;
          if (!v15)
          {
            uint64_t v15 = MEMORY[0x263F8EE78];
            v2[2] = MEMORY[0x263F8EE78];
          }
          unint64_t v35 = *(void *)(v15 + 16);
          int64_t v127 = *(void *)(a1 + 16);
          if (v127 >= v35) {
            unint64_t v36 = v35;
          }
          else {
            unint64_t v36 = v127;
          }
          if (!v36)
          {
            unint64_t v140 = 0;
            goto LABEL_51;
          }
          unint64_t v37 = 0;
          break;
        case 3:
          goto LABEL_26;
        default:
          unint64_t v28 = BYTE6(v120);
          goto LABEL_26;
      }
      break;
    case 3uLL:
      goto LABEL_16;
    default:
      uint64_t v20 = BYTE6(v120);
      goto LABEL_16;
  }
  do
  {
    uint64_t v38 = v2[2];
    if (!v38) {
      goto LABEL_194;
    }
    if (v37 >= *(void *)(v38 + 16)) {
      goto LABEL_176;
    }
    unint64_t v28 = v37;
    unint64_t v39 = (*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
    unint64_t v40 = *(void *)(v139 + 72) * v28;
    outlined init with copy of __RKEntityInteractionSpecification(v38 + v39 + v40, (uint64_t)v14);
    unint64_t v41 = *(void *)(a1 + 16);
    unint64_t v140 = v28;
    if (v28 >= v41)
    {
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
      goto LABEL_180;
    }
    outlined init with copy of __RKEntityInteractionSpecification(a1 + v39 + v40, (uint64_t)v12);
    char v42 = specialized static __RKEntityTriggerSpecification.== infix(_:_:)((uint64_t)v14, v12);
    unint64_t v43 = v140;
    if ((v42 & 1) == 0
      || (specialized static __RKEntityActionSpecification.== infix(_:_:)((uint64_t)&v14[*(int *)(v29 + 20)], (float *)((char *)v12 + *(int *)(v29 + 20))) & 1) == 0)
    {
      goto LABEL_48;
    }
    uint64_t v44 = *(int *)(v29 + 24);
    uint64_t v45 = &v14[v44];
    uint64_t v46 = *(void *)&v14[v44 + 8];
    uint64_t v47 = (void *)((char *)v12 + v44);
    uint64_t v48 = v47[1];
    if (v46)
    {
      if (!v48 || (*(void *)v45 != *v47 || v46 != v48) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_48:
        outlined destroy of __RKEntityInteractionSpecification((uint64_t)v12);
        outlined destroy of __RKEntityInteractionSpecification((uint64_t)v14);
        goto LABEL_51;
      }
    }
    else if (v48)
    {
      goto LABEL_48;
    }
    outlined destroy of __RKEntityInteractionSpecification((uint64_t)v12);
    outlined destroy of __RKEntityInteractionSpecification((uint64_t)v14);
    unint64_t v37 = v43 + 1;
  }
  while (v36 != v37);
  unint64_t v140 = v36;
LABEL_51:
  if (!swift_weakLoadStrong())
  {
LABEL_56:
    uint64_t v52 = 0;
    goto LABEL_60;
  }
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
    swift_release();
    goto LABEL_56;
  }
  uint64_t v50 = SceneNullable;
  id v51 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v51)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v50);
  }
  Scene.__interactionService.getter();
  swift_release();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  uint64_t v52 = swift_dynamicCastClass();
  if (!v52) {
    swift_unknownObjectRelease();
  }
LABEL_60:
  unint64_t v53 = v140;
  uint64_t v54 = (unint64_t *)(v2 + 3);
  if (!v52 && v2[3])
  {
    swift_bridgeObjectRelease();
    goto LABEL_69;
  }
  uint64_t v55 = v2[2];
  if (!v55) {
    goto LABEL_198;
  }
  uint64_t v121 = a1;
  unint64_t v56 = *(void *)(v55 + 16);
  if (v56 < v140) {
    goto LABEL_184;
  }
  uint64_t v133 = v2 + 3;
  uint64_t v134 = v2;
  uint64_t v138 = v52;
  if (v140 != v56)
  {
    unint64_t v137 = (unint64_t *)(v52 + 64);
    uint64_t v58 = v140;
    while (1)
    {
      if (v58 == v56) {
        goto LABEL_169;
      }
      unint64_t v53 = *v54;
      if (*v54) {
        break;
      }
LABEL_104:
      unint64_t v72 = v2[2];
      if (!v72) {
        goto LABEL_192;
      }
      if (!*(void *)(v72 + 16)) {
        goto LABEL_170;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v2[2] = v72;
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v74 = *(void *)(v72 + 16);
        if (!v74) {
          goto LABEL_111;
        }
        goto LABEL_108;
      }
      unint64_t v72 = specialized _ArrayBuffer._consumeAndCreateNew()(v72);
      v2[2] = v72;
      uint64_t v74 = *(void *)(v72 + 16);
      if (!v74)
      {
LABEL_111:
        __break(1u);
LABEL_112:
        unint64_t v124 = (*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
        unint64_t v125 = v52 + v124;
        uint64_t v119 = (unint64_t *)(v138 + 40);
        v117[1] = v138 + 64;
        if (v53 <= v57) {
          unint64_t v76 = v57;
        }
        else {
          unint64_t v76 = v53;
        }
        unint64_t v126 = v76;
        long long v118 = xmmword_22831E4E0;
        while (2)
        {
          if (v53 == v126) {
            goto LABEL_171;
          }
          if (v53 >= *(void *)(v52 + 16)) {
            goto LABEL_172;
          }
          uint64_t v77 = *(void *)(v139 + 72);
          outlined init with copy of __RKEntityInteractionSpecification(v125 + v77 * v53, v58);
          outlined init with copy of __RKEntityInteractionSpecification(v58, v56);
          unint64_t v78 = v2[2];
          if (!v78) {
            goto LABEL_193;
          }
          unint64_t v140 = v53;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v78 + 16) + 1, 1, v78);
          }
          unint64_t v80 = *(void *)(v78 + 16);
          unint64_t v79 = *(void *)(v78 + 24);
          if (v80 >= v79 >> 1) {
            unint64_t v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1, v78);
          }
          *(void *)(v78 + 16) = v80 + 1;
          outlined init with take of __RKEntityInteractionSpecification(v56, v78 + v124 + v80 * v77);
          v2[2] = v78;
          if (!v2[3]) {
            goto LABEL_117;
          }
          if (!v138) {
            goto LABEL_196;
          }
          long long v81 = v119;
          swift_beginAccess();
          unint64_t v82 = *v81;
          type metadata accessor for __RKEntityTrigger();
          swift_retain();
          unint64_t v83 = static __RKEntityTrigger.trigger(for:entityLookupTable:)(v58, v82);
          type metadata accessor for __RKEntityAction();
          unint64_t v84 = v58 + *(int *)(v28 + 20);
          unint64_t v132 = v82;
          uint64_t v85 = static __RKEntityAction.action(for:entityLookupTable:)(v84, v82);
          uint64_t v86 = (uint64_t *)(v58 + *(int *)(v28 + 24));
          uint64_t v87 = v86[1];
          uint64_t v131 = *v86;
          type metadata accessor for __RKEntityInteraction();
          uint64_t v88 = swift_allocObject();
          *(void *)(v88 + 32) = 0;
          *(void *)(v88 + 48) = 0;
          uint64_t v128 = v88 + 48;
          *(unsigned char *)(v88 + 40) = 1;
          *(void *)(v88 + 56) = 0;
          *(void *)(v88 + 16) = v83;
          *(void *)(v88 + 24) = v85;
          uint64_t v136 = (uint64_t *)(v88 + 24);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = v118;
          *(void *)(inited + 32) = v83;
          uint64_t v141 = inited;
          specialized Array._endMutation()();
          unint64_t v90 = v141;
          type metadata accessor for __RKEntityTriggerGroup();
          uint64_t v91 = swift_dynamicCastClass();
          uint64_t v130 = v87;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain_n();
          if (v91)
          {
            swift_retain();
            swift_bridgeObjectRelease();
            swift_beginAccess();
            unint64_t v90 = *(void *)(v91 + 24);
            swift_bridgeObjectRetain();
            swift_release();
          }
          unint64_t v129 = v83;
          if (!(v90 >> 62))
          {
            uint64_t v92 = *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v92) {
              goto LABEL_131;
            }
LABEL_163:
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_beginAccess();
            uint64_t v111 = v130;
            *(void *)(v88 + 48) = v131;
            *(void *)(v88 + 56) = v111;
            swift_release();
            swift_bridgeObjectRelease();
            swift_beginAccess();
            uint64_t v112 = v138;
            swift_retain();
            uint64_t v113 = swift_retain();
            MEMORY[0x22A688E10](v113);
            if (*(void *)((*(void *)(v112 + 64) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v112 + 64) & 0xFFFFFFFFFFFFFF8)
                                                                                                 + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();
            swift_release();
            unint64_t v114 = v133;
            uint64_t v115 = *v133;
            uint64_t v116 = swift_retain();
            uint64_t v52 = v121;
            unint64_t v56 = (unint64_t)v122;
            uint64_t v2 = v134;
            uint64_t v58 = (uint64_t)v135;
            unint64_t v28 = v123;
            if (!v115) {
              goto LABEL_197;
            }
            MEMORY[0x22A688E10](v116);
            if (*(void *)((*v114 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_release();
LABEL_117:
            unint64_t v53 = v140 + 1;
            outlined destroy of __RKEntityInteractionSpecification(v58);
            if (v53 == v127) {
              goto LABEL_68;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRetain();
        uint64_t v92 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v92) {
          goto LABEL_163;
        }
LABEL_131:
        if (v92 >= 1)
        {
          swift_beginAccess();
          uint64_t v93 = 0;
          unint64_t v137 = (unint64_t *)v88;
          while (1)
          {
            if ((v90 & 0xC000000000000001) != 0) {
              MEMORY[0x22A689930](v93, v90);
            }
            else {
              swift_retain();
            }
            type metadata accessor for __RKEntityProximityTrigger();
            uint64_t v94 = swift_dynamicCastClass();
            if (!v94) {
              goto LABEL_156;
            }
            uint64_t v95 = v94;
            uint64_t v96 = swift_beginAccess();
            int v97 = *(unsigned __int8 *)(v95 + 36);
            if (v97 == 1) {
              break;
            }
            if (v97 != 2) {
              goto LABEL_156;
            }
            uint64_t v98 = (*(uint64_t (**)(uint64_t))(*(void *)v85 + 432))(v96);
            swift_release();
            if (v98)
            {
              swift_beginAccess();
              *(unsigned char *)(v98 + 88) = 1;
              *(void *)(v88 + 32) = v98;
LABEL_156:
              swift_release();
            }
            if (v92 == ++v93) {
              goto LABEL_163;
            }
          }
          type metadata accessor for __RKEntityActionGroup();
          uint64_t v99 = swift_dynamicCastClass();
          if (!v99) {
            goto LABEL_156;
          }
          uint64_t v100 = v99;
          uint64_t v101 = (uint64_t *)(v99 + 112);
          swift_beginAccess();
          unint64_t v102 = *(void *)(v100 + 112);
          if (v102 >> 62)
          {
            swift_retain();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v110 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v110 == 2) {
              goto LABEL_144;
            }
          }
          else
          {
            uint64_t v103 = *(void *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_retain();
            swift_retain();
            if (v103 == 2)
            {
LABEL_144:
              uint64_t v104 = *v101;
              if ((*v101 & 0xC000000000000001) != 0)
              {
                swift_bridgeObjectRetain();
                uint64_t v105 = MEMORY[0x22A689930](0, v104);
                swift_bridgeObjectRelease();
              }
              else
              {
                if (!*(void *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_173;
                }
                uint64_t v105 = *(void *)(v104 + 32);
                swift_retain();
              }
              *uint64_t v136 = v105;
              swift_release();
              uint64_t v106 = *v101;
              if ((*v101 & 0xC000000000000001) != 0)
              {
                swift_bridgeObjectRetain();
                uint64_t v107 = MEMORY[0x22A689930](1, v106);
                swift_bridgeObjectRelease();
              }
              else
              {
                if (*(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                  goto LABEL_174;
                }
                uint64_t v107 = *(void *)(v106 + 40);
                swift_retain();
              }
              swift_beginAccess();
              *(unsigned char *)(v107 + 88) = 1;
              swift_release();
              uint64_t v108 = *v101;
              uint64_t v88 = (uint64_t)v137;
              if ((v108 & 0xC000000000000001) != 0)
              {
                swift_bridgeObjectRetain();
                uint64_t v109 = MEMORY[0x22A689930](1, v108);
              }
              else
              {
                if (*(void *)((v108 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
                  goto LABEL_175;
                }
                uint64_t v109 = *(void *)(v108 + 40);
                swift_bridgeObjectRetain();
                swift_retain();
              }
              swift_release_n();
              swift_release();
              swift_bridgeObjectRelease();
              *(void *)(v88 + 32) = v109;
              goto LABEL_156;
            }
          }
          swift_release();
          swift_release();
          uint64_t v88 = (uint64_t)v137;
          goto LABEL_156;
        }
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
        goto LABEL_185;
      }
LABEL_108:
      ++v58;
      uint64_t v75 = v74 - 1;
      outlined destroy of __RKEntityInteractionSpecification(v72+ ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))+ *(void *)(v139 + 72) * (v74 - 1));
      *(void *)(v72 + 16) = v75;
      unint64_t v53 = v140;
      v2[2] = v72;
      if (v58 == v56) {
        goto LABEL_66;
      }
    }
    if (v53 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v68) {
        goto LABEL_178;
      }
    }
    else if (!*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_178;
    }
    unint64_t v53 = *v54;
    isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *uint64_t v54 = v53;
    if (!isUniquelyReferenced_nonNull_bridgeObject
      || (v53 & 0x8000000000000000) != 0
      || (v53 & 0x4000000000000000) != 0)
    {
      unint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew()(v53);
      *uint64_t v54 = v53;
    }
    uint64_t v60 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v60) {
      goto LABEL_179;
    }
    uint64_t v61 = v60 - 1;
    uint64_t v62 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 8 * v61 + 0x20);
    *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) = v61;
    specialized Array._endMutation()();
    if (!v52) {
      goto LABEL_195;
    }
    uint64_t v63 = v137;
    swift_beginAccess();
    unint64_t v64 = *v63;
    if (v64 >> 62)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
      if (v65)
      {
LABEL_84:
        if ((v64 & 0xC000000000000001) != 0)
        {
          uint64_t v69 = MEMORY[0x22A689930](0, v64);
          swift_unknownObjectRelease();
          if (v69 != v62)
          {
LABEL_86:
            if (v65 != 1)
            {
              unint64_t v53 = 5;
              while (1)
              {
                unint64_t v66 = v53 - 4;
                if ((v64 & 0xC000000000000001) != 0)
                {
                  unint64_t v28 = MEMORY[0x22A689930](v53 - 4, v64);
                  swift_unknownObjectRelease();
                  if (v28 == v62) {
                    goto LABEL_95;
                  }
                }
                else if (*(void *)(v64 + 8 * v53) == v62)
                {
LABEL_95:
                  swift_bridgeObjectRelease();
                  goto LABEL_102;
                }
                unint64_t v67 = v53 - 3;
                if (__OFADD__(v66, 1))
                {
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
                  goto LABEL_177;
                }
                ++v53;
                if (v67 == v65) {
                  goto LABEL_94;
                }
              }
            }
            goto LABEL_94;
          }
        }
        else if (*(void *)(v64 + 32) != v62)
        {
          goto LABEL_86;
        }
        swift_bridgeObjectRelease();
        unint64_t v66 = 0;
LABEL_102:
        swift_beginAccess();
        unint64_t v53 = **(void **)(v62 + 24) + 448;
        v70 = *(void (**)(uint64_t))v53;
        uint64_t v71 = swift_retain();
        v70(v71);
        swift_release();
        swift_beginAccess();
        specialized Array.remove(at:)(v66);
        swift_endAccess();
        swift_release();
        uint64_t v52 = v138;
        swift_release();
        goto LABEL_103;
      }
    }
    else
    {
      uint64_t v65 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v65) {
        goto LABEL_84;
      }
    }
LABEL_94:
    uint64_t v52 = v138;
    swift_release();
    swift_bridgeObjectRelease();
LABEL_103:
    uint64_t v2 = v134;
    swift_release();
    uint64_t v54 = v133;
    goto LABEL_104;
  }
LABEL_66:
  unint64_t v57 = v127;
  if (v127 < (uint64_t)v53)
  {
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    swift_release();
    __break(1u);
LABEL_193:
    swift_release();
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    swift_release();
    __break(1u);
LABEL_198:
    swift_release();
    __break(1u);
    JUMPOUT(0x227DE19B0);
  }
  uint64_t v52 = v121;
  unint64_t v56 = (unint64_t)v122;
  unint64_t v28 = v123;
  uint64_t v58 = (uint64_t)v135;
  if (v53 != v127) {
    goto LABEL_112;
  }
LABEL_68:
  swift_bridgeObjectRelease();
  swift_release();
LABEL_69:
  uint64_t v31 = v117[0];
  return outlined consume of Data._Representation(v31, v120);
}

uint64_t implicit closure #7 in __RKEntityInteractionsComponent.didActivate(componentRef:)()
{
  _StringGuts.grow(_:)(98);
  v0._countAndFlagsBits = 0xD000000000000035;
  v0._object = (void *)0x800000022834E270;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x800000022834E2B0;
  v2._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v2);
  return 0;
}

uint64_t static __RKEntityInteractionsComponent.componentType.getter()
{
  if (static __RKEntityInteractionsComponent.registration) {
    return *((void *)static __RKEntityInteractionsComponent.registration + 3);
  }
  else {
    return 0;
  }
}

uint64_t __RKEntityInteractionsComponent.reRegisterInteractions()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v95 = v2;
  uint64_t v96 = v3;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v109 = 91;
  unint64_t v110 = 0xE100000000000000;
  if (Strong)
  {
    uint64_t v107 = 0;
    unint64_t v108 = 0xE000000000000000;
    uint64_t v106 = Strong;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v7 = v107;
    unint64_t v8 = v108;
  }
  else
  {
    unint64_t v8 = 0xE300000000000000;
    uint64_t v7 = 7104878;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8285;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_release();
  Swift::String v14 = (void (*)(void))v109;
  uint64_t v13 = (void (**)(void))v110;
  uint64_t v15 = swift_weakLoadStrong();
  if (!v15)
  {
    uint64_t v109 = (uint64_t)v14;
    unint64_t v110 = (unint64_t)v13;
    os_log_type_t v19 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v19, &v109);
    return swift_bridgeObjectRelease();
  }
  v83[1] = v15;
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_50:
    uint64_t v109 = (uint64_t)v14;
    unint64_t v110 = (unint64_t)v13;
    uint64_t v40 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v40, &v109);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v17 = SceneNullable;
  id v18 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v18)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v17);
  }
  uint64_t v20 = Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    goto LABEL_50;
  }
  uint64_t v22 = (void *)v21;
  unint64_t v23 = *(void *)(v1 + 24);
  uint64_t v92 = (void *)(v1 + 24);
  uint64_t v93 = v20;
  uint64_t v94 = v5;
  if (v23)
  {
    uint64_t v109 = (uint64_t)v14;
    unint64_t v110 = (unint64_t)v13;
    swift_bridgeObjectRetain();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v24, &v109);
    uint64_t v100 = v23 & 0xFFFFFFFFFFFFFF8;
    unint64_t v101 = v23;
    if (v23 >> 62) {
      goto LABEL_57;
    }
    uint64_t v103 = *(void **)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v103)
    {
      do
      {
        int v97 = v14;
        uint64_t v98 = v13;
        uint64_t v99 = v1;
        uint64_t v91 = (char *)v22;
        v22 += 8;
        uint64_t v5 = (char *)v101;
        unint64_t v104 = v101 & 0xC000000000000001;
        swift_beginAccess();
        unint64_t v25 = 0;
        unint64_t v102 = v5 + 32;
        uint64_t v1 = v100;
        uint64_t v26 = v103;
        while (1)
        {
          if (v104)
          {
            uint64_t v27 = MEMORY[0x22A689930](v25, v5);
            BOOL v28 = __OFADD__(v25++, 1);
            if (v28) {
              goto LABEL_54;
            }
          }
          else
          {
            if (v25 >= *(void *)(v1 + 16)) {
              goto LABEL_55;
            }
            uint64_t v27 = *(void *)&v102[8 * v25];
            swift_retain();
            BOOL v28 = __OFADD__(v25++, 1);
            if (v28) {
              goto LABEL_54;
            }
          }
          uint64_t v29 = *v22;
          if (*v22 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v26 = v103;
            uint64_t v13 = (void (**)(void))_CocoaArrayWrapper.endIndex.getter();
            if (!v13) {
              goto LABEL_15;
            }
          }
          else
          {
            uint64_t v13 = *(void (***)(void))((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v13) {
              goto LABEL_15;
            }
          }
          Swift::String v14 = (void (*)(void))(v29 & 0xC000000000000001);
          if ((v29 & 0xC000000000000001) != 0) {
            break;
          }
          if (*(void *)(v29 + 32) != v27) {
            goto LABEL_27;
          }
LABEL_41:
          swift_bridgeObjectRelease();
          unint64_t v30 = 0;
LABEL_42:
          swift_beginAccess();
          uint64_t v13 = (void (**)(void))(**(void **)(v27 + 24) + 448);
          Swift::String v14 = *v13;
          uint64_t v34 = swift_retain();
          v14(v34);
          swift_release();
          swift_beginAccess();
          uint64_t v35 = *v22;
          isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *uint64_t v22 = v35;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v35 < 0 || (v35 & 0x4000000000000000) != 0)
          {
            uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
            *uint64_t v22 = v35;
          }
          uint64_t v37 = v35 & 0xFFFFFFFFFFFFFF8;
          unint64_t v38 = *(void *)(v37 + 16);
          if (v30 >= v38) {
            goto LABEL_56;
          }
          uint64_t v13 = (void (**)(void))(v38 - 1);
          uint64_t v39 = v38 - 1 - v30;
          if (v39 < 0) {
            goto LABEL_116;
          }
          memmove((void *)(v37 + 8 * v30 + 32), (const void *)(v37 + 8 * v30 + 40), 8 * v39);
          *(void *)(v37 + 16) = v13;
          specialized Array._endMutation()();
          swift_endAccess();
          swift_release();
          swift_release();
          uint64_t v26 = v103;
LABEL_16:
          if ((void *)v25 == v26)
          {
            swift_bridgeObjectRelease();
            uint64_t v5 = v94;
            uint64_t v13 = v98;
            uint64_t v1 = v99;
            Swift::String v14 = v97;
            uint64_t v22 = v91;
            goto LABEL_59;
          }
        }
        uint64_t v32 = MEMORY[0x22A689930](0, v29);
        swift_unknownObjectRelease();
        BOOL v33 = v32 == v27;
        uint64_t v26 = v103;
        if (v33) {
          goto LABEL_41;
        }
LABEL_27:
        if (v13 == (void (**)(void))1)
        {
LABEL_15:
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        uint64_t v1 = 5;
        while (1)
        {
          unint64_t v30 = v1 - 4;
          if (v14)
          {
            uint64_t v5 = (char *)MEMORY[0x22A689930](v1 - 4, v29);
            swift_unknownObjectRelease();
            if (v5 == (char *)v27) {
              goto LABEL_36;
            }
          }
          else if (*(void *)(v29 + 8 * v1) == v27)
          {
LABEL_36:
            swift_bridgeObjectRelease();
            uint64_t v1 = v100;
            uint64_t v5 = (char *)v101;
            goto LABEL_42;
          }
          uint64_t v31 = (void (**)(void))(v1 - 3);
          if (__OFADD__(v30, 1)) {
            break;
          }
          ++v1;
          if (v31 == v13)
          {
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v1 = v100;
            uint64_t v5 = (char *)v101;
            uint64_t v26 = v103;
            goto LABEL_16;
          }
        }
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        swift_bridgeObjectRetain();
        uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v103 = (void *)v43;
      }
      while (v43);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v109 = (uint64_t)v14;
    unint64_t v110 = (unint64_t)v13;
    os_log_type_t v42 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v42, &v109);
  }
LABEL_59:
  *(void *)(v1 + 24) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  uint64_t v109 = (uint64_t)v14;
  unint64_t v110 = (unint64_t)v13;
  os_log_type_t v44 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v44, &v109);
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)(v1 + 16);
  if (!v45) {
    goto LABEL_115;
  }
  uint64_t v91 = *(char **)(v45 + 16);
  if (!v91)
  {
    swift_release();
    return swift_unknownObjectRelease();
  }
  uint64_t v90 = type metadata accessor for __RKEntityTrigger();
  uint64_t v89 = type metadata accessor for __RKEntityAction();
  unint64_t v84 = v22 + 8;
  uint64_t v87 = v45 + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80));
  swift_bridgeObjectRetain();
  uint64_t v88 = v22 + 5;
  swift_beginAccess();
  uint64_t v46 = 0;
  long long v86 = xmmword_22831E4E0;
  uint64_t v85 = v45;
  while (1)
  {
    if ((unint64_t)v46 >= *(void *)(v45 + 16)) {
      goto LABEL_113;
    }
    outlined init with copy of __RKEntityInteractionSpecification(v87 + *(void *)(v96 + 72) * (void)v46, (uint64_t)v5);
    unint64_t v47 = *v88;
    swift_retain();
    unint64_t v48 = static __RKEntityTrigger.trigger(for:entityLookupTable:)((uint64_t)v5, v47);
    uint64_t v49 = v95;
    unint64_t v50 = (unint64_t)&v5[*(int *)(v95 + 20)];
    unint64_t v101 = v47;
    uint64_t v51 = static __RKEntityAction.action(for:entityLookupTable:)(v50, v47);
    uint64_t v52 = (uint64_t *)&v5[*(int *)(v49 + 24)];
    uint64_t v53 = v52[1];
    uint64_t v100 = *v52;
    type metadata accessor for __RKEntityInteraction();
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 32) = 0;
    *(void *)(v54 + 48) = 0;
    int v97 = (void (*)(void))(v54 + 48);
    *(unsigned char *)(v54 + 40) = 1;
    *(void *)(v54 + 56) = 0;
    *(void *)(v54 + 16) = v48;
    *(void *)(v54 + 24) = v51;
    uint64_t v103 = (void *)(v54 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v86;
    *(void *)(inited + 32) = v48;
    uint64_t v105 = inited;
    specialized Array._endMutation()();
    unint64_t v56 = v105;
    type metadata accessor for __RKEntityTriggerGroup();
    uint64_t v57 = swift_dynamicCastClass();
    uint64_t v99 = v53;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain_n();
    if (v57)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      unint64_t v56 = *(void *)(v57 + 24);
      swift_bridgeObjectRetain();
      swift_release();
    }
    unint64_t v102 = v46;
    uint64_t v98 = (void (**)(void))v48;
    if (!(v56 >> 62))
    {
      uint64_t v58 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v58) {
        break;
      }
      goto LABEL_101;
    }
    swift_bridgeObjectRetain();
    uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v58) {
      break;
    }
LABEL_101:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v77 = v99;
    *(void *)(v54 + 48) = v100;
    *(void *)(v54 + 56) = v77;
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v78 = v84;
    swift_beginAccess();
    uint64_t v79 = swift_retain();
    MEMORY[0x22A688E10](v79);
    if (*(void *)((*v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    unint64_t v80 = v92;
    uint64_t v5 = v94;
    uint64_t v45 = v85;
    long long v81 = v102;
    if (*v92)
    {
      uint64_t v82 = swift_retain();
      MEMORY[0x22A688E10](v82);
      if (*(void *)((*v80 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v80 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      outlined destroy of __RKEntityInteractionSpecification((uint64_t)v5);
    }
    else
    {
      outlined destroy of __RKEntityInteractionSpecification((uint64_t)v94);
      swift_release();
    }
    uint64_t v46 = v81 + 1;
    if (v46 == v91)
    {
      swift_release();
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  if (v58 < 1) {
    goto LABEL_114;
  }
  swift_beginAccess();
  uint64_t v59 = 0;
  unint64_t v104 = v54;
  while (2)
  {
    if ((v56 & 0xC000000000000001) != 0) {
      MEMORY[0x22A689930](v59, v56);
    }
    else {
      swift_retain();
    }
    type metadata accessor for __RKEntityProximityTrigger();
    uint64_t v60 = swift_dynamicCastClass();
    if (!v60) {
      goto LABEL_94;
    }
    uint64_t v61 = v60;
    uint64_t v62 = swift_beginAccess();
    int v63 = *(unsigned __int8 *)(v61 + 36);
    if (v63 != 1)
    {
      if (v63 != 2) {
        goto LABEL_94;
      }
      uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 432))(v62);
      swift_release();
      if (v64)
      {
        swift_beginAccess();
        *(unsigned char *)(v64 + 88) = 1;
        *(void *)(v54 + 32) = v64;
        goto LABEL_94;
      }
LABEL_95:
      if (v58 == ++v59) {
        goto LABEL_101;
      }
      continue;
    }
    break;
  }
  type metadata accessor for __RKEntityActionGroup();
  uint64_t v65 = swift_dynamicCastClass();
  if (!v65) {
    goto LABEL_94;
  }
  uint64_t v66 = v65;
  unint64_t v67 = (uint64_t *)(v65 + 112);
  swift_beginAccess();
  unint64_t v68 = *(void *)(v66 + 112);
  if (!(v68 >> 62))
  {
    uint64_t v69 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    if (v69 == 2) {
      goto LABEL_82;
    }
LABEL_93:
    swift_release();
    swift_release();
    uint64_t v54 = v104;
LABEL_94:
    swift_release();
    goto LABEL_95;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v76 != 2) {
    goto LABEL_93;
  }
LABEL_82:
  uint64_t v70 = *v67;
  if ((*v67 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v71 = MEMORY[0x22A689930](0, v70);
    swift_bridgeObjectRelease();
    goto LABEL_85;
  }
  if (*(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v71 = *(void *)(v70 + 32);
    swift_retain();
LABEL_85:
    *uint64_t v103 = v71;
    swift_release();
    uint64_t v72 = *v67;
    if ((*v67 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v73 = MEMORY[0x22A689930](1, v72);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
        goto LABEL_111;
      }
      uint64_t v73 = *(void *)(v72 + 40);
      swift_retain();
    }
    swift_beginAccess();
    *(unsigned char *)(v73 + 88) = 1;
    swift_release();
    uint64_t v74 = *v67;
    uint64_t v54 = v104;
    if ((v74 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v75 = MEMORY[0x22A689930](1, v74);
    }
    else
    {
      if (*(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
        goto LABEL_112;
      }
      uint64_t v75 = *(void *)(v74 + 40);
      swift_bridgeObjectRetain();
      swift_retain();
    }
    swift_release_n();
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)(v54 + 32) = v75;
    goto LABEL_94;
  }
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in __RKEntityInteractionsComponent.didActivate(componentRef:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    v24[0] = 91;
    v24[1] = 0xE100000000000000;
    uint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    v21[0] = result;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 8285;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 8250;
    v8._object = (void *)0xE200000000000000;
    String.append(_:)(v8);
    swift_release();
    uint64_t v9 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v9, v24);
    swift_beginAccess();
    if (static __RKEntityInteractionsComponent.registration
      && REEntityGetComponentByClassOpaquePointer(*(void *)(v4 + 16), *((void *)static __RKEntityInteractionsComponent.registration + 3))&& RECustomComponentGetObject())
    {
      uint64_t v22 = 91;
      unint64_t v23 = 0xE100000000000000;
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v10, &v22);
      __RKEntityInteractionsComponent.reRegisterInteractions()();
    }
    else
    {
      uint64_t v22 = 91;
      unint64_t v23 = 0xE100000000000000;
      os_log_type_t v11 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v11, &v22);
    }
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      uint64_t v13 = SceneNullable;
      id v14 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v14)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v13);
      }
      if ((id)RESceneGetSwiftObject())
      {
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          Scene.__interactionService.getter();
          type metadata accessor for __RKEntityInteractionManager();
          if (swift_dynamicCastClass())
          {
            uint64_t v22 = 91;
            unint64_t v23 = 0xE100000000000000;
            os_log_type_t v15 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v15, &v22);
            type metadata accessor for __RKStartTrigger();
            uint64_t v16 = swift_allocObject();
            *(_DWORD *)(v16 + 16) = 0;
            swift_beginAccess();
            uint64_t v17 = *(void *)(a2 + 16);
            swift_bridgeObjectRetain();
            __RKEntityInteractionManager.__performInteractions(matching:on:)(v16, v17);
            swift_release();
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            v21[0] = 91;
            v21[1] = 0xE100000000000000;
            uint64_t v18 = static os_log_type_t.debug.getter();
            os_log_type_t v19 = v21;
LABEL_19:
            specialized InteractionsLogger.log(_:_:)(v18, v19);
            swift_release();
            return swift_bridgeObjectRelease();
          }
          swift_release();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_release();
          swift_unknownObjectRelease_n();
        }
      }
      else
      {
        swift_release();
      }
    }
    uint64_t v22 = 91;
    unint64_t v23 = 0xE100000000000000;
    os_log_type_t v20 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v20, &v22);
    uint64_t v22 = 91;
    unint64_t v23 = 0xE100000000000000;
    uint64_t v18 = static os_log_type_t.debug.getter();
    os_log_type_t v19 = &v22;
    goto LABEL_19;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t __RKEntityInteractionsComponent.Registration.componentType.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t __RKEntityInteractionsComponent.Registration.init()()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  REStructBuilderCreate();
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberDataTypeWithTag(), (uint64_t v1 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_6:
    REStructBuilderDestroy();
    type metadata accessor for __RKEntityInteractionsComponent.Registration();
    swift_deallocPartialClassInstance();
    return v0;
  }
  *(void *)(v0 + 16) = v1;
  long long v5 = xmmword_22831E4F0;
  int v6 = 1;
  Swift::String v7 = &v5;
  uint64_t v8 = 0;
  uint64_t v9 = @objc createInteractionsComponentObject(componentType:);
  os_log_type_t v10 = @objc destroyInteractionsComponentObject(componentType:rawPointer:);
  os_log_type_t v11 = @objc didAddInteractionsComponentObject(componentRef:);
  Swift::String v12 = @objc willRemoveInteractionsComponentObject(componentRef:);
  uint64_t v13 = @objc interactionsComponentEntityDidActivate(componentRef:);
  uint64_t v14 = 0;
  uint64_t v15 = v1;
  uint64_t v16 = 0;
  uint64_t v2 = RECustomComponentTypeCreate();
  if (!v2)
  {
    lazy protocol witness table accessor for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  uint64_t v3 = v2;
  REComponentTypeSetCloneCallback();
  *(void *)(v0 + 24) = v3;
  REStructBuilderDestroy();
  return v0;
}

uint64_t @objc destroyInteractionsComponentObject(componentType:rawPointer:)()
{
  swift_arrayDestroy();

  return RECIntrospectionFree();
}

uint64_t @objc didAddInteractionsComponentObject(componentRef:)(uint64_t a1)
{
  uint64_t result = RECustomComponentGetObject();
  if (result) {
    return __RKEntityInteractionsComponent.didAdd(componentRef:)(a1);
  }
  return result;
}

uint64_t @objc willRemoveInteractionsComponentObject(componentRef:)(uint64_t a1)
{
  return @objc willRemoveInteractionsComponentObject(componentRef:)(a1, specialized __RKEntityInteractionsComponent.willRemove(componentRef:));
}

uint64_t @objc interactionsComponentEntityDidActivate(componentRef:)(uint64_t a1)
{
  return @objc willRemoveInteractionsComponentObject(componentRef:)(a1, specialized __RKEntityInteractionsComponent.didActivate(componentRef:));
}

uint64_t @objc willRemoveInteractionsComponentObject(componentRef:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = RECustomComponentGetObject();
  if (result) {
    return a2();
  }
  return result;
}

uint64_t __RKEntityInteractionsComponent.Registration.deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __RKEntityInteractionsComponent.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();

  return swift_deallocClassInstance();
}

uint64_t static __RKEntityInteractionsComponent.registration.getter()
{
  return swift_retain();
}

uint64_t static __RKEntityInteractionsComponent.registration.setter(void *a1)
{
  static __RKEntityInteractionsComponent.registration = a1;
  return swift_release();
}

uint64_t (*static __RKEntityInteractionsComponent.registration.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t Entity.__interactions.getter()
{
  swift_beginAccess();
  if (!static __RKEntityInteractionsComponent.registration) {
    return MEMORY[0x263F8EE78];
  }
  if (!REEntityGetCustomComponent()) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t Object = RECustomComponentGetObject();
  if (!Object) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v1 = *(void *)(Object + 16);
  outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v4);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = __RKEntityInteractionsComponent.decodedJSON()();
  }
  swift_bridgeObjectRetain();
  outlined destroy of __RKEntityInteractionsComponent((uint64_t)v4);
  return v2;
}

uint64_t outlined init with copy of __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of __RKEntityInteractionsComponent(uint64_t a1)
{
  return a1;
}

uint64_t Entity.__interactions.setter(uint64_t a1)
{
  swift_beginAccess();
  if (!static __RKEntityInteractionsComponent.registration) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = *((void *)static __RKEntityInteractionsComponent.registration + 3);
  if (*(void *)(a1 + 16))
  {
    if ((REEntityGetCustomComponent() || MEMORY[0x22A68E460](*(void *)(v1 + 16), v3)) && RECustomComponentGetObject()) {
      return __RKEntityInteractionsComponent.specifications.setter(a1);
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = REEntityGetCustomComponent();
  if (result) {
    return REEntityRemoveComponentByClass();
  }
  return result;
}

void (*Entity.__interactions.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration
    && REEntityGetCustomComponent()
    && (uint64_t Object = RECustomComponentGetObject()) != 0)
  {
    uint64_t v5 = *(void *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v3);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = __RKEntityInteractionsComponent.decodedJSON()();
    }
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)v3);
  }
  else
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  v3[9] = v6;
  return Entity.__interactions.modify;
}

void Entity.__interactions.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  if (a2)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    Entity.__interactions.setter(v4);
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (!static __RKEntityInteractionsComponent.registration) {
    goto LABEL_9;
  }
  uint64_t v5 = *((void *)static __RKEntityInteractionsComponent.registration + 3);
  uint64_t v6 = v2[10];
  if (*(void *)(v3 + 16))
  {
    if ((REEntityGetCustomComponent() || MEMORY[0x22A68E460](*(void *)(v6 + 16), v5)) && RECustomComponentGetObject())
    {
      __RKEntityInteractionsComponent.specifications.setter(v3);
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  if (REEntityGetCustomComponent()) {
    REEntityRemoveComponentByClass();
  }
LABEL_10:

  free(v2);
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __RKEntityInteractionsComponent()
{
  return &protocol witness table for __RKEntityInteractionsComponent.Registration;
}

uint64_t sub_227DE340C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Entity.__interactions.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227DE3438()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return Entity.__interactions.setter(v0);
}

uint64_t destroy for __RKEntityInteractionsComponent()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_weakDestroy();
}

uint64_t initializeWithCopy for __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t initializeWithTake for __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_weakTakeInit();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityInteractionsComponent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityInteractionsComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityInteractionsComponent()
{
  return &type metadata for __RKEntityInteractionsComponent;
}

uint64_t type metadata accessor for __RKEntityInteractionsComponent.Registration()
{
  return self;
}

uint64_t method lookup function for __RKEntityInteractionsComponent.Registration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityInteractionsComponent.Registration);
}

unint64_t lazy protocol witness table accessor for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError);
  }
  return result;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t outlined init with take of __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  swift_weakTakeInit();
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return a2;
}

uint64_t specialized createInteractionsComponentObject(componentType:)()
{
  uint64_t v0 = RECIntrospectionAlloc();
  memset(v2, 0, sizeof(v2));
  swift_weakInit();
  char v3 = 2;
  outlined init with take of __RKEntityInteractionsComponent((uint64_t)v2, (uint64_t)v4);
  outlined init with take of __RKEntityInteractionsComponent((uint64_t)v4, v0);
  return v0;
}

uint64_t specialized __RKEntityInteractionsComponent.willRemove(componentRef:)()
{
  uint64_t v1 = v0;
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v53 = 91;
  unint64_t v54 = 0xE100000000000000;
  if (Strong)
  {
    void v52[3] = 0;
    v52[4] = 0xE000000000000000;
    v52[0] = Strong;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  uint64_t v10 = v53;
  unint64_t v9 = v54;
  uint64_t v11 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v11, &v53);
  if (!swift_weakLoadStrong())
  {
    uint64_t v53 = v10;
    unint64_t v54 = v9;
    uint64_t v16 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v16, &v53);
LABEL_54:
    uint64_t v53 = v10;
    unint64_t v54 = v9;
    uint64_t v41 = static os_log_type_t.debug.getter();
    os_log_type_t v42 = &v53;
    goto LABEL_55;
  }
  unint64_t v12 = *(void *)(v0 + 24);
  if (!v12)
  {
    swift_release();
LABEL_51:
    swift_weakAssign();
    v52[0] = v10;
    v52[1] = v9;
    uint64_t v41 = static os_log_type_t.debug.getter();
    os_log_type_t v42 = v52;
LABEL_55:
    specialized InteractionsLogger.log(_:_:)(v41, v42);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_53:
    swift_bridgeObjectRelease();
    uint64_t v53 = v10;
    unint64_t v54 = v9;
    os_log_type_t v43 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v43, &v53);
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 24) = 0;
    swift_weakAssign();
    goto LABEL_54;
  }
  uint64_t v14 = SceneNullable;
  id v15 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v15)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v14);
  }
  Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  uint64_t v17 = swift_dynamicCastClass();
  if (!v17)
  {
    swift_unknownObjectRelease();
    goto LABEL_53;
  }
  uint64_t v18 = v17;
  uint64_t v47 = v1;
  uint64_t v53 = v10;
  unint64_t v54 = v9;
  os_log_type_t v19 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v19, &v53);
  uint64_t v20 = v12 & 0xFFFFFFFFFFFFFF8;
  uint64_t v45 = v10;
  unint64_t v46 = v9;
  if (v12 >> 62)
  {
LABEL_60:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
  uint64_t v21 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v21)
  {
LABEL_50:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    *(void *)(v47 + 24) = 0;
    uint64_t v10 = v45;
    unint64_t v9 = v46;
    goto LABEL_51;
  }
LABEL_15:
  uint64_t v22 = (uint64_t *)(v18 + 64);
  unint64_t v23 = v12 & 0xC000000000000001;
  swift_beginAccess();
  unint64_t v24 = 0;
  unint64_t v50 = v12 + 32;
  unint64_t v51 = v12 & 0xC000000000000001;
  uint64_t v48 = v21;
  unint64_t v49 = v12;
  while (1)
  {
    while (1)
    {
      if (v23)
      {
        uint64_t v25 = MEMORY[0x22A689930](v24, v12);
        BOOL v26 = __OFADD__(v24++, 1);
        if (v26) {
          goto LABEL_57;
        }
      }
      else
      {
        if (v24 >= *(void *)(v20 + 16)) {
          goto LABEL_58;
        }
        uint64_t v25 = *(void *)(v50 + 8 * v24);
        swift_retain();
        BOOL v26 = __OFADD__(v24++, 1);
        if (v26) {
          goto LABEL_57;
        }
      }
      uint64_t v27 = *v22;
      if ((unint64_t)*v22 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        if (!v18) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v18 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v18) {
          goto LABEL_16;
        }
      }
      if ((v27 & 0xC000000000000001) == 0) {
        break;
      }
      uint64_t v31 = MEMORY[0x22A689930](0, v27);
      swift_unknownObjectRelease();
      BOOL v32 = v31 == v25;
      unint64_t v23 = v51;
      if (v32) {
        goto LABEL_41;
      }
LABEL_27:
      if (v18 != 1)
      {
        unint64_t v12 = v20;
        uint64_t v28 = 5;
        while (1)
        {
          unint64_t v29 = v28 - 4;
          if ((v27 & 0xC000000000000001) != 0)
          {
            uint64_t v20 = MEMORY[0x22A689930](v28 - 4, v27);
            swift_unknownObjectRelease();
            if (v20 == v25) {
              goto LABEL_36;
            }
          }
          else if (*(void *)(v27 + 8 * v28) == v25)
          {
LABEL_36:
            swift_bridgeObjectRelease();
            uint64_t v20 = v12;
            uint64_t v21 = v48;
            unint64_t v12 = v49;
            goto LABEL_42;
          }
          uint64_t v30 = v28 - 3;
          if (__OFADD__(v29, 1)) {
            break;
          }
          ++v28;
          if (v30 == v18)
          {
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v20 = v12;
            uint64_t v21 = v48;
            unint64_t v12 = v49;
            goto LABEL_49;
          }
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
LABEL_16:
      swift_release();
      swift_bridgeObjectRelease();
      if (v24 == v21) {
        goto LABEL_50;
      }
    }
    if (*(void *)(v27 + 32) != v25) {
      goto LABEL_27;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    unint64_t v29 = 0;
LABEL_42:
    swift_beginAccess();
    BOOL v33 = *(void (**)(uint64_t))(**(void **)(v25 + 24) + 448);
    uint64_t v34 = swift_retain();
    v33(v34);
    swift_release();
    swift_beginAccess();
    uint64_t v18 = *v22;
    isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *uint64_t v22 = v18;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v18 < 0 || (v18 & 0x4000000000000000) != 0)
    {
      uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      *uint64_t v22 = v18;
    }
    uint64_t v36 = v18 & 0xFFFFFFFFFFFFFF8;
    unint64_t v37 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v29 >= v37) {
      goto LABEL_59;
    }
    unint64_t v38 = v37 - 1;
    uint64_t v39 = v37 - 1 - v29;
    if (v39 < 0) {
      break;
    }
    uint64_t v40 = v36 + 8 * v29;
    uint64_t v18 = *(void *)(v40 + 32);
    memmove((void *)(v40 + 32), (const void *)(v40 + 40), 8 * v39);
    *(void *)(v36 + 16) = v38;
    specialized Array._endMutation()();
    swift_endAccess();
    swift_release();
    swift_release();
LABEL_49:
    unint64_t v23 = v51;
    if (v24 == v21) {
      goto LABEL_50;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized __RKEntityInteractionsComponent.didActivate(componentRef:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  Swift::String v6 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  Swift::String v8 = (char *)&v76 - v7;
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v87 = 91;
  unint64_t v88 = 0xE100000000000000;
  if (Strong)
  {
    uint64_t v85 = 0;
    unint64_t v86 = 0xE000000000000000;
    uint64_t v83 = Strong;
    _print_unlocked<A, B>(_:_:)();
    uint64_t v10 = v85;
    unint64_t v11 = v86;
  }
  else
  {
    unint64_t v11 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8285;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 8250;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  swift_release();
  uint64_t v17 = v87;
  unint64_t v16 = v88;
  uint64_t v18 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v18, &v87);
  uint64_t v19 = swift_weakLoadStrong();
  if (!v19)
  {
    uint64_t v87 = v17;
    unint64_t v88 = v16;
    uint64_t v25 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v25, &v87);
LABEL_27:
    uint64_t v87 = v17;
    unint64_t v88 = v16;
    uint64_t v40 = static os_log_type_t.debug.getter();
    uint64_t v41 = &v87;
LABEL_28:
    specialized InteractionsLogger.log(_:_:)(v40, v41);
    return swift_bridgeObjectRelease();
  }
  uint64_t v20 = v19;
  uint64_t v87 = v17;
  unint64_t v88 = v16;
  os_log_type_t v21 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v21, &v87);
  if (*(unsigned char *)(v0 + 40))
  {
    uint64_t v87 = v17;
    unint64_t v88 = v16;
    os_log_type_t v26 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v26, &v87);
LABEL_26:
    swift_release();
    goto LABEL_27;
  }
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_25:
    uint64_t v87 = v17;
    unint64_t v88 = v16;
    os_log_type_t v39 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v39, &v87);
    goto LABEL_26;
  }
  uint64_t v23 = SceneNullable;
  id v24 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v24)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v23);
  }
  uint64_t v27 = Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  uint64_t v28 = swift_dynamicCastClass();
  if (!v28)
  {
    swift_unknownObjectRelease();
    goto LABEL_25;
  }
  uint64_t v29 = v28;
  swift_beginAccess();
  if (*(unsigned char *)(v29 + 26) != 1)
  {
    uint64_t v85 = v17;
    unint64_t v86 = v16;
    uint64_t v43 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v43, &v85, partial apply for implicit closure #7 in __RKEntityInteractionsComponent.didActivate(componentRef:), v29);
    swift_unknownObjectRelease();
    swift_release();
LABEL_66:
    uint64_t v85 = v17;
    unint64_t v86 = v16;
    uint64_t v40 = static os_log_type_t.debug.getter();
    uint64_t v41 = &v85;
    goto LABEL_28;
  }
  uint64_t v77 = v29;
  unint64_t v78 = v8;
  long long v81 = (void (*)(void, void))v6;
  uint64_t v82 = v27;
  uint64_t v79 = v3;
  uint64_t v80 = v2;
  swift_retain();
  REAnchorComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
LABEL_15:
    swift_retain();
    REAnchorComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      uint64_t v85 = v17;
      unint64_t v86 = v16;
      os_log_type_t v30 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v30, &v85);
      *(unsigned char *)(v1 + 40) = 1;
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = 0;
      BOOL v32 = (uint64_t *)(v31 + 16);
      swift_retain();
      uint64_t ChildCount = REEntityGetChildCount();
      if (ChildCount < 0)
      {
LABEL_76:
        __break(1u);
      }
      else
      {
        uint64_t v34 = ChildCount;
        uint64_t v35 = v81;
        uint64_t v76 = v31;
        if (!ChildCount)
        {
          swift_release();
LABEL_68:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v66 = swift_allocObject();
          *(_OWORD *)(v66 + 16) = xmmword_22831E4E0;
          *(void *)(v66 + 32) = v20;
          uint64_t v85 = v66;
          specialized Array._endMutation()();
          *BOOL v32 = v85;
          swift_retain();
          swift_bridgeObjectRelease();
          goto LABEL_69;
        }
        uint64_t v36 = 0;
        do
        {
          if (v36 >= REEntityGetChildCount())
          {
            __break(1u);
            goto LABEL_75;
          }
          ++v36;
        }
        while (v34 != v36);
        swift_release();
        uint64_t v85 = v20;
        uint64_t v37 = specialized Entity.ChildCollection.filter(recursive:_:)(1);
        *BOOL v32 = v37;
        swift_bridgeObjectRelease();
        if (!v37) {
          goto LABEL_68;
        }
        uint64_t v38 = swift_retain();
        MEMORY[0x22A688E10](v38);
        if (*(void *)((*v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        {
LABEL_23:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          uint64_t v35 = v81;
LABEL_69:
          unint64_t v67 = (NSString *)MEMORY[0x22A688A50](0x747365544358, 0xE600000000000000);
          Class v68 = NSClassFromString(v67);

          uint64_t v71 = (uint64_t)v78;
          uint64_t v70 = v79;
          if (v68 && (v72 = v77, uint64_t v69 = swift_beginAccess(), (*(unsigned char *)(v72 + 25) & 1) != 0))
          {
            swift_release();
            swift_release();
            swift_unknownObjectRelease();
            swift_release();
          }
          else
          {
            specialized static __ServiceLocator.shared.getter(v69);
            swift_beginAccess();
            swift_unownedRetainStrong();
            static DispatchTime.now()();
            MEMORY[0x22A688820](v35, 0.05);
            long long v81 = *(void (**)(void, void))(v70 + 8);
            v81(v35, v80);
            uint64_t v73 = swift_allocObject();
            swift_weakInit();
            uint64_t v74 = swift_allocObject();
            uint64_t v75 = v76;
            *(void *)(v74 + 16) = v73;
            *(void *)(v74 + 24) = v75;
            swift_retain();
            swift_retain();
            __Engine.asyncAfterOnEngineQueue(deadline:_:)(v71, (uint64_t)partial apply for closure #2 in __RKEntityInteractionsComponent.didActivate(componentRef:), v74);
            swift_release();
            swift_release();
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            v81(v71, v80);
            swift_release();
            swift_release();
          }
          swift_release();
          v84[0] = v17;
          v84[1] = v16;
          uint64_t v40 = static os_log_type_t.debug.getter();
          uint64_t v41 = v84;
          goto LABEL_28;
        }
      }
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      goto LABEL_23;
    }
LABEL_65:
    swift_release();
    uint64_t v85 = v17;
    unint64_t v86 = v16;
    os_log_type_t v65 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v65, &v85);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_66;
  }
  while (1)
  {
    swift_retain();
    uint64_t Parent = REEntityGetParent();
    if (!Parent)
    {
      swift_release();
      goto LABEL_65;
    }
    uint64_t v45 = Parent;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release_n();
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
      goto LABEL_32;
    }
    if (REEntityIsBeingDestroyed())
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v46 & 1) == 0))
    {
      swift_endAccess();
      uint64_t v47 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v83 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v47, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypeObjectIdToHandles = v83;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    if (!REEntityGetCustomComponent() || (uint64_t Object = RECustomComponentGetObject()) == 0)
    {
LABEL_62:
      makeEntity(for:)(v45);
      swift_release_n();
      goto LABEL_32;
    }
    unint64_t v50 = *(unsigned __int8 **)Object;
    if (*(void *)(Object + 8) || !v50)
    {
      uint64_t result = swift_retain();
    }
    else
    {
      int v51 = *v50;
      uint64_t v52 = String.init(utf8String:)();
      Swift::Int v54 = v53 ? v52 : 0;
      unint64_t v55 = v53 ? v53 : 0xE000000000000000;
      unint64_t v50 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v51 == 42, v54, v55);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v50;
    }
    if (!v50) {
      break;
    }
    swift_retain();
    uint64_t v56 = String.init(utf8String:)();
    unint64_t v58 = v57;
    swift_release();
    if (v58) {
      uint64_t v59 = v56;
    }
    else {
      uint64_t v59 = 0;
    }
    if (!v58) {
      unint64_t v58 = 0xE000000000000000;
    }
    uint64_t v60 = (NSString *)MEMORY[0x22A688A50](v59, v58);
    swift_bridgeObjectRelease();
    Class v61 = NSClassFromString(v60);

    swift_release();
    if (!v61) {
      goto LABEL_62;
    }
    swift_getObjCClassMetadata();
    type metadata accessor for Entity();
    uint64_t v62 = swift_dynamicCastMetatype();
    if (!v62) {
      goto LABEL_62;
    }
    uint64_t v63 = (*(uint64_t (**)(void))(v62 + 232))();
    uint64_t v64 = *(void *)(v63 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v64, 0);
    *(void *)(v63 + 16) = v45;
    MEMORY[0x22A68E750](v45, v63);
    swift_release_n();
    swift_release();
LABEL_32:
    REAnchorComponentGetComponentType();
    if (REEntityGetComponentByClass()) {
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t partial apply for implicit closure #7 in __RKEntityInteractionsComponent.didActivate(componentRef:)()
{
  return implicit closure #7 in __RKEntityInteractionsComponent.didActivate(componentRef:)();
}

uint64_t sub_227DE48CC()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227DE4904()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227DE493C()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in __RKEntityInteractionsComponent.didActivate(componentRef:)()
{
  return closure #2 in __RKEntityInteractionsComponent.didActivate(componentRef:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined init with copy of __RKEntityInteractionSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __RKEntityInteractionSpecification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of __RKEntityInteractionSpecification(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for __RKEntityInteractionSpecification(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(void *a1)
{
  return specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t outlined init with take of __RKEntityInteractionSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __RKEntityInteractionSpecification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
    lazy protocol witness table accessor for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for __RKEntityInteractionSpecification(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __RKEntityInteractionsComponent.Registration.RegistrationError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityInteractionsComponent.Registration.RegistrationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227DE4D58);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return 0;
}

ValueMetadata *type metadata accessor for __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return &type metadata for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float DirectionalLightComponent.Shadow.depthBias.getter()
{
  return *(float *)v0;
}

void DirectionalLightComponent.Shadow.depthBias.setter(float a1)
{
  float *v1 = a1;
}

uint64_t (*DirectionalLightComponent.Shadow.depthBias.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float DirectionalLightComponent.Shadow.maximumDistance.getter()
{
  return *(float *)(v0 + 4);
}

void DirectionalLightComponent.Shadow.maximumDistance.setter(float a1)
{
  *(void *)(v1 + 12) = LODWORD(a1);
  *(_DWORD *)(v1 + 20) = 0;
  *(unsigned char *)(v1 + 24) = 1;
  *(float *)(v1 + 4) = a1;
}

uint64_t *(*DirectionalLightComponent.Shadow.maximumDistance.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  return DirectionalLightComponent.Shadow.maximumDistance.modify;
}

uint64_t *DirectionalLightComponent.Shadow.maximumDistance.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = *((unsigned int *)result + 2);
  *(void *)(v1 + 12) = v2;
  *(_DWORD *)(v1 + 20) = 0;
  *(unsigned char *)(v1 + 24) = 1;
  *(_DWORD *)(v1 + 4) = v2;
  return result;
}

double DirectionalLightComponent.Shadow.init()@<D0>(uint64_t a1@<X8>)
{
  double result = 2048.00048;
  *(void *)a1 = 0x40A000003F800000;
  *(unsigned char *)(a1 + 8) = 3;
  *(void *)(a1 + 12) = 1084227584;
  *(_DWORD *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

void DirectionalLightComponent.Shadow.init(maximumDistance:depthBias:)(uint64_t a1@<X8>, unsigned int a2@<S0>, float a3@<S1>)
{
  *(float *)a1 = a3;
  *(float *)(a1 + 4) = *(float *)&a2;
  *(unsigned char *)(a1 + 8) = 3;
  *(void *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 24) = 1;
}

uint64_t DirectionalLightComponent.Shadow.shadowProjection.setter(uint64_t result)
{
  int v2 = *(_DWORD *)(result + 8);
  char v3 = *(unsigned char *)(result + 12);
  *(void *)(v1 + 12) = *(void *)result;
  *(_DWORD *)(v1 + 20) = v2;
  *(unsigned char *)(v1 + 24) = v3;
  return result;
}

uint64_t static DirectionalLightComponent.Shadow.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  REDirectionalLightShadowMapComponentGetDepthBias();
  int v3 = v2;
  REDirectionalLightShadowMapComponentGetDistance();
  unsigned int v5 = v4;
  int CullMode = REDirectionalLightShadowMapComponentGetCullModeEx();
  int AutomaticallyAdjustsShadowProjection = REDirectionalLightShadowMapComponentGetAutomaticallyAdjustsShadowProjection();
  REDirectionalLightShadowMapComponentGetZNear();
  unsigned int v9 = v8;
  REDirectionalLightShadowMapComponentGetZFar();
  unsigned int v11 = v10;
  uint64_t result = REDirectionalLightShadowMapComponentGetOrthographicScale();
  unint64_t v14 = v9 | ((unint64_t)v11 << 32);
  if (AutomaticallyAdjustsShadowProjection)
  {
    unint64_t v14 = v5;
    float v13 = 0.0;
  }
  char v15 = 1;
  if (!CullMode) {
    char v15 = 3;
  }
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v5;
  *(unsigned char *)(a1 + 8) = v15;
  *(void *)(a1 + 12) = v14;
  *(float *)(a1 + 20) = v13;
  *(unsigned char *)(a1 + 24) = AutomaticallyAdjustsShadowProjection;
  return result;
}

uint64_t *DirectionalLightComponent.Shadow.init(shadowProjection:depthBias:cullMode:)@<X0>(uint64_t *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v4 = *result;
  int v5 = *((_DWORD *)result + 2);
  char v6 = *((unsigned char *)result + 12);
  char v7 = *a2;
  *(float *)a3 = a4;
  *(_DWORD *)(a3 + 4) = 1084227584;
  *(unsigned char *)(a3 + 8) = v7;
  *(void *)(a3 + 12) = v4;
  *(_DWORD *)(a3 + 20) = v5;
  *(unsigned char *)(a3 + 24) = v6;
  return result;
}

uint64_t DirectionalLightComponent.Shadow.__toCore(_:)()
{
  char v1 = *(unsigned char *)(v0 + 24);
  REDirectionalLightShadowMapComponentSetDepthBias();
  if (v1)
  {
    REDirectionalLightShadowMapComponentSetDistance();
  }
  else
  {
    REDirectionalLightShadowMapComponentSetZNear();
    REDirectionalLightShadowMapComponentSetZFar();
    REDirectionalLightShadowMapComponentSetOrthographicScale();
  }
  REDirectionalLightShadowMapComponentSetAutomaticallyAdjustsShadowProjection();
  REDirectionalLightShadowMapComponentSetCullMode();
  return RENetworkMarkComponentDirty();
}

void static DirectionalLightComponent.Shadow.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 76;
}

void protocol witness for static Component.__coreComponentType.getter in conformance DirectionalLightComponent.Shadow(_DWORD *a1@<X8>)
{
  *a1 = 76;
}

id DirectionalLightComponent.__color.getter()
{
  return *v0;
}

void DirectionalLightComponent.__color.setter(void *a1)
{
  id *v1 = a1;
}

uint64_t (*DirectionalLightComponent.__color.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float DirectionalLightComponent.intensity.getter()
{
  return *(float *)(v0 + 8);
}

void DirectionalLightComponent.intensity.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*DirectionalLightComponent.intensity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t DirectionalLightComponent.isRealWorldProxy.getter()
{
  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t DirectionalLightComponent.isRealWorldProxy.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 12) = result;
  return result;
}

uint64_t (*DirectionalLightComponent.isRealWorldProxy.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>)
{
  *(void *)a3 = a1;
  *(float *)(a3 + 8) = a4;
  *(unsigned char *)(a3 + 12) = a2;
}

void static DirectionalLightComponent.__fromCore(_:)(uint64_t a1@<X8>)
{
  REDirectionalLightComponentGetColorGamut3F();
  REDirectionalLightComponentGetIntensity();
  int v3 = v2;
  char IsProxy = REDirectionalLightComponentGetIsProxy();
  uint64_t v5 = RECreateCGColorFromColorGamut();

  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = IsProxy;
}

uint64_t DirectionalLightComponent.__toCore(_:)()
{
  return RENetworkMarkComponentDirty();
}

void static DirectionalLightComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 49;
}

uint64_t static DirectionalLightComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 12);
  float v4 = *(float *)(a2 + 8);
  int v5 = *(unsigned __int8 *)(a2 + 12);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  return static _CFObject.== infix(_:_:)() & (v3 ^ v5 ^ 1) & (v2 == v4);
}

uint64_t protocol witness for Component.__toCore(_:) in conformance DirectionalLightComponent()
{
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance DirectionalLightComponent(_DWORD *a1@<X8>)
{
  *a1 = 49;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DirectionalLightComponent(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 12);
  float v4 = *(float *)(a2 + 8);
  int v5 = *(unsigned __int8 *)(a2 + 12);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  return static _CFObject.== infix(_:_:)() & (v3 ^ v5 ^ 1) & (v2 == v4);
}

void DirectionalLightComponent.Shadow.cullModeOverride.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *DirectionalLightComponent.Shadow.cullModeOverride.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

unsigned char *(*DirectionalLightComponent.Shadow.cullModeOverride.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 8);
  return DirectionalLightComponent.Shadow.cullModeOverride.modify;
}

unsigned char *DirectionalLightComponent.Shadow.cullModeOverride.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 8) = result[8];
  return result;
}

void DirectionalLightComponent.Shadow.shadowProjection.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 20);
  char v3 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 12);
  *(_DWORD *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 12) = v3;
}

uint64_t (*DirectionalLightComponent.Shadow.shadowProjection.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  int v2 = *(_DWORD *)(v1 + 20);
  char v3 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 12);
  *(_DWORD *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 12) = v3;
  return DirectionalLightComponent.Shadow.shadowProjection.modify;
}

uint64_t DirectionalLightComponent.Shadow.shadowProjection.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  int v2 = *(_DWORD *)(result + 8);
  char v3 = *(unsigned char *)(result + 12);
  *(void *)(v1 + 12) = *(void *)result;
  *(_DWORD *)(v1 + 20) = v2;
  *(unsigned char *)(v1 + 24) = v3;
  return result;
}

uint64_t DirectionalLightComponent.Shadow.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __n128 v7 = MEMORY[0x270FA5388](v6 - 8);
  unsigned int v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = *(unsigned char *)(v1 + 8);
  uint64_t v11 = *(void *)(v1 + 12);
  int v12 = *(_DWORD *)(v1 + 20);
  char v13 = *(unsigned char *)(v1 + 24);
  v7.n128_u64[0] = *(void *)v1;
  __n128 v18 = v7;
  unint64_t v20 = v7.n128_u64[0];
  char v21 = v10;
  uint64_t v22 = v11;
  int v23 = v12;
  char v24 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_22831E360;
  *(void *)(v14 + 32) = 0xD000000000000010;
  *(void *)(v14 + 40) = 0x800000022834E330;
  *(void *)(v14 + 48) = v11;
  *(_DWORD *)(v14 + 56) = v12;
  *(unsigned char *)(v14 + 60) = v13;
  *(void *)(v14 + 72) = &type metadata for DirectionalLightComponent.Shadow.ShadowProjectionType;
  *(void *)(v14 + 80) = 0x6169426874706564;
  *(void *)(v14 + 88) = 0xE900000000000073;
  uint64_t v15 = MEMORY[0x263F8D5C8];
  *(_DWORD *)(v14 + 96) = v18.n128_u32[0];
  *(void *)(v14 + 120) = v15;
  *(void *)(v14 + 128) = 0xD000000000000010;
  *(void *)(v14 + 136) = 0x800000022834E350;
  *(void *)(v14 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  *(unsigned char *)(v14 + 144) = v10;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 1, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static DirectionalLightComponent.Shadow.ShadowProjectionType.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*((unsigned char *)a1 + 12)) {
    return (*((unsigned char *)a2 + 12) & 1) != 0 && *(float *)&v2 == *(float *)&v3;
  }
  if (*((unsigned char *)a2 + 12)) {
    return 0;
  }
  LODWORD(v3) = *(float *)&v2 == *(float *)&v3;
  if (*((float *)&v2 + 1) != *((float *)&v3 + 1)) {
    LODWORD(v3) = 0;
  }
  if (*((float *)a1 + 2) == *((float *)a2 + 2)) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t specialized static DirectionalLightComponent.Shadow.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 != *(float *)a2 || *(float *)(a1 + 4) != *(float *)(a2 + 4)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 12);
  float v5 = *(float *)(a1 + 20);
  char v6 = *(unsigned char *)(a1 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 8);
  unint64_t v8 = *(void *)(a2 + 12);
  if (v3 == 3)
  {
    if (v7 != 3) {
      return 0;
    }
LABEL_11:
    if (v6)
    {
      if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(float *)&v4 != *(float *)&v8) {
        return 0;
      }
    }
    else
    {
      if (*(unsigned char *)(a2 + 24)) {
        return 0;
      }
      unint64_t v10 = HIDWORD(v8);
      BOOL v11 = *(float *)&v4 == COERCE_FLOAT(*(void *)(a2 + 12)) && *((float *)&v4 + 1) == *(float *)&v10;
      if (!v11 || v5 != *(float *)(a2 + 20)) {
        return 0;
      }
    }
    return 1;
  }
  uint64_t result = 0;
  if (v7 != 3 && v3 == v7) {
    goto LABEL_11;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef;
  if (!lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef)
  {
    type metadata accessor for CGColorRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef);
  }
  return result;
}

float sub_227DE5AB4@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 4);
  *a2 = result;
  return result;
}

float sub_227DE5AC0(float *a1, uint64_t a2)
{
  float result = *a1;
  *(void *)(a2 + 12) = *(unsigned int *)a1;
  *(_DWORD *)(a2 + 20) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(float *)(a2 + 4) = result;
  return result;
}

uint64_t sub_227DE5AE0@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *sub_227DE5AEC(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 8) = *result;
  return result;
}

uint64_t sub_227DE5AF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 20);
  char v3 = *(unsigned char *)(result + 24);
  *(void *)a2 = *(void *)(result + 12);
  *(_DWORD *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 12) = v3;
  return result;
}

uint64_t sub_227DE5B14(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  char v3 = *(unsigned char *)(result + 12);
  *(void *)(a2 + 12) = *(void *)result;
  *(_DWORD *)(a2 + 20) = v2;
  *(unsigned char *)(a2 + 24) = v3;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DirectionalLightComponent(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  id v4 = v3;
  return a1;
}

void destroy for DirectionalLightComponent(id *a1)
{
}

uint64_t assignWithCopy for DirectionalLightComponent(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  float v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  return a1;
}

void *__swift_memcpy13_8(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *float result = v2;
  return result;
}

uint64_t assignWithTake for DirectionalLightComponent(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  return a1;
}

uint64_t getEnumTagSinglePayload for DirectionalLightComponent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 13)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DirectionalLightComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)float result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 13) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)float result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 13) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DirectionalLightComponent()
{
  return &type metadata for DirectionalLightComponent;
}

__n128 __swift_memcpy25_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DirectionalLightComponent.Shadow(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DirectionalLightComponent.Shadow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DirectionalLightComponent.Shadow()
{
  return &type metadata for DirectionalLightComponent.Shadow;
}

void *__swift_memcpy13_4(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DirectionalLightComponent.Shadow.ShadowProjectionType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DirectionalLightComponent.Shadow.ShadowProjectionType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 13) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 13) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for DirectionalLightComponent.Shadow.ShadowProjectionType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t destructiveInjectEnumTag for DirectionalLightComponent.Shadow.ShadowProjectionType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 12) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DirectionalLightComponent.Shadow.ShadowProjectionType()
{
  return &type metadata for DirectionalLightComponent.Shadow.ShadowProjectionType;
}

uint64_t one-time initialization function for UpdateLoop()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static __REOSLog.UpdateLoop = result;
  return result;
}

id static __REOSLog.UpdateLoop.getter()
{
  return static __REOSLog.UpdateLoop.getter(&one-time initialization token for UpdateLoop, (void **)&static __REOSLog.UpdateLoop);
}

uint64_t one-time initialization function for ARQL()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static __REOSLog.ARQL = result;
  return result;
}

id static __REOSLog.ARQL.getter()
{
  return static __REOSLog.UpdateLoop.getter(&one-time initialization token for ARQL, (void **)&static __REOSLog.ARQL);
}

uint64_t one-time initialization function for RealityComposer()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static __REOSLog.RealityComposer = result;
  return result;
}

id static __REOSLog.RealityComposer.getter()
{
  return static __REOSLog.UpdateLoop.getter(&one-time initialization token for RealityComposer, (void **)&static __REOSLog.RealityComposer);
}

id static __REOSLog.UpdateLoop.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  unsigned int v3 = *a2;

  return v3;
}

uint64_t one-time initialization function for UpdateLoop(uint64_t a1)
{
  return one-time initialization function for UpdateLoop(a1, static __RESignpostID.UpdateLoop, &one-time initialization token for UpdateLoop, (id *)&static __REOSLog.UpdateLoop);
}

uint64_t static __RESignpostID.UpdateLoop.getter@<X0>(uint64_t a1@<X8>)
{
  return static __RESignpostID.UpdateLoop.getter(&one-time initialization token for UpdateLoop, (uint64_t)static __RESignpostID.UpdateLoop, a1);
}

uint64_t one-time initialization function for ARQL(uint64_t a1)
{
  return one-time initialization function for UpdateLoop(a1, static __RESignpostID.ARQL, &one-time initialization token for ARQL, (id *)&static __REOSLog.ARQL);
}

uint64_t static __RESignpostID.ARQL.getter@<X0>(uint64_t a1@<X8>)
{
  return static __RESignpostID.UpdateLoop.getter(&one-time initialization token for ARQL, (uint64_t)static __RESignpostID.ARQL, a1);
}

uint64_t one-time initialization function for RealityComposer(uint64_t a1)
{
  return one-time initialization function for UpdateLoop(a1, static __RESignpostID.RealityComposer, &one-time initialization token for RealityComposer, (id *)&static __REOSLog.RealityComposer);
}

uint64_t one-time initialization function for UpdateLoop(uint64_t a1, uint64_t *a2, void *a3, id *a4)
{
  uint64_t v7 = type metadata accessor for OSSignpostID();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  id v8 = *a4;
  return OSSignpostID.init(log:)();
}

uint64_t static __RESignpostID.RealityComposer.getter@<X0>(uint64_t a1@<X8>)
{
  return static __RESignpostID.UpdateLoop.getter(&one-time initialization token for RealityComposer, (uint64_t)static __RESignpostID.RealityComposer, a1);
}

uint64_t static __RESignpostID.UpdateLoop.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t __REOSSignpostScope.__allocating_init(osLog:signpostID:name:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  *(unsigned char *)(v10 + 32) = a5;
  *(void *)(v10 + 40) = a1;
  uint64_t v11 = v10 + OBJC_IVAR____TtC10RealityKit19__REOSSignpostScope_signpostID;
  uint64_t v12 = type metadata accessor for OSSignpostID();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, a2, v12);
  id v14 = a1;
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
  return v10;
}

uint64_t __REOSSignpostScope.init(osLog:signpostID:name:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v5 + 16) = a3;
  *(void *)(v5 + 24) = a4;
  *(unsigned char *)(v5 + 32) = a5;
  *(void *)(v5 + 40) = a1;
  uint64_t v8 = v5 + OBJC_IVAR____TtC10RealityKit19__REOSSignpostScope_signpostID;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, a2, v9);
  id v11 = a1;
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  return v5;
}

uint64_t __REOSSignpostScope.deinit()
{
  static os_signpost_type_t.end.getter();
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = v0 + OBJC_IVAR____TtC10RealityKit19__REOSSignpostScope_signpostID;
  os_signpost(_:dso:log:name:signpostID:)();

  uint64_t v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t __REOSSignpostScope.__deallocating_deinit()
{
  static os_signpost_type_t.end.getter();
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = v0 + OBJC_IVAR____TtC10RealityKit19__REOSSignpostScope_signpostID;
  os_signpost(_:dso:log:name:signpostID:)();

  uint64_t v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for __REOSLog()
{
  return &type metadata for __REOSLog;
}

ValueMetadata *type metadata accessor for __RESignpostID()
{
  return &type metadata for __RESignpostID;
}

uint64_t ObjC metadata update function for __REOSSignpostScope()
{
  return type metadata accessor for __REOSSignpostScope();
}

uint64_t type metadata accessor for __REOSSignpostScope()
{
  uint64_t result = type metadata singleton initialization cache for __REOSSignpostScope;
  if (!type metadata singleton initialization cache for __REOSSignpostScope) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for __REOSSignpostScope()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for __REOSSignpostScope(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __REOSSignpostScope);
}

uint64_t dispatch thunk of __REOSSignpostScope.__allocating_init(osLog:signpostID:name:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

BOOL static __RKSimulationSceneCoordinatorState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void __RKSimulationSceneCoordinatorState.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int __RKSimulationSceneCoordinatorState.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __RKSimulationSceneCoordinatorState(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKSimulationSceneCoordinatorState()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance __RKSimulationSceneCoordinatorState()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKSimulationSceneCoordinatorState()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for shared()
{
  type metadata accessor for __RKSimulationSceneCoordinator();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0;
  uint64_t result = swift_unknownObjectWeakInit();
  *(unsigned char *)(v0 + 32) = 0;
  static __RKSimulationSceneCoordinator.shared = v0;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for __RKActiveSceneManager();
  uint64_t result = swift_allocObject();
  Swift::UInt v1 = MEMORY[0x263F8EE78];
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v1;
  static __RKActiveSceneManager.shared = (_UNKNOWN *)result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for AnalyticsManager();
  uint64_t result = swift_initStaticObject();
  static AnalyticsManager.shared = result;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for SystemRegistry();
  uint64_t result = swift_allocObject();
  Swift::UInt v1 = MEMORY[0x263F8EE78];
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = v1;
  static SystemRegistry.shared = (_UNKNOWN *)result;
  return result;
}

uint64_t __RKSimulationSceneCoordinator.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v0 + 32) = 0;
  return v0;
}

uint64_t static __RKSimulationSceneCoordinator.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_retain();
}

uint64_t static __RKSimulationSceneCoordinator.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  static __RKSimulationSceneCoordinator.shared = a1;
  return swift_release();
}

uint64_t (*static __RKSimulationSceneCoordinator.shared.modify())()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKSimulationSceneCoordinator.init()()
{
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v0 + 32) = 0;
  return v0;
}

uint64_t __RKSimulationSceneCoordinator.delegate.getter()
{
  swift_beginAccess();
  return MEMORY[0x22A696620](v0 + 16);
}

uint64_t __RKSimulationSceneCoordinator.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*__RKSimulationSceneCoordinator.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x22A696620](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return __RKSimulationSceneCoordinator.delegate.modify;
}

void __RKSimulationSceneCoordinator.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 24) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t __RKSimulationSceneCoordinator.simulationState.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 32);
  return result;
}

uint64_t __RKSimulationSceneCoordinator.simulationState.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 32) = v2;
  return result;
}

uint64_t (*__RKSimulationSceneCoordinator.simulationState.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKSimulationSceneCoordinator.changeToScene(with:)(uint64_t a1)
{
  swift_beginAccess();
  if (MEMORY[0x22A696620](v1 + 16))
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8))(v1, a1, ObjectType, v3);
    swift_unknownObjectRelease();
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t __RKSimulationSceneCoordinator.deinit()
{
  outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?(v0 + 16);
  return v0;
}

uint64_t outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?(uint64_t a1)
{
  return a1;
}

uint64_t __RKSimulationSceneCoordinator.__deallocating_deinit()
{
  outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?(v0 + 16);

  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type __RKSimulationSceneCoordinatorState and conformance __RKSimulationSceneCoordinatorState()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKSimulationSceneCoordinatorState and conformance __RKSimulationSceneCoordinatorState;
  if (!lazy protocol witness table cache variable for type __RKSimulationSceneCoordinatorState and conformance __RKSimulationSceneCoordinatorState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKSimulationSceneCoordinatorState and conformance __RKSimulationSceneCoordinatorState);
  }
  return result;
}

uint64_t sub_227DE6F10@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x22A696620](v4);
  uint64_t v6 = *(void *)(v3 + 24);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_227DE6F6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 24) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_227DE6FC8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 32);
  return result;
}

uint64_t sub_227DE7010(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 32) = v2;
  return result;
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinatorDelegate.coordinator(_:didRequestToChangeToScene:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for __RKSimulationSceneCoordinatorState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for __RKSimulationSceneCoordinatorState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227DE71D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for __RKSimulationSceneCoordinatorState(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for __RKSimulationSceneCoordinatorState(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for __RKSimulationSceneCoordinatorState()
{
  return &type metadata for __RKSimulationSceneCoordinatorState;
}

uint64_t type metadata accessor for __RKSimulationSceneCoordinator()
{
  return self;
}

uint64_t method lookup function for __RKSimulationSceneCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKSimulationSceneCoordinator);
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.delegate.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.delegate.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.delegate.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.simulationState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.simulationState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.simulationState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.changeToScene(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t FromToByAnimation.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 184);
  if (*(void *)(v0 + 160))
  {
    uint64_t v4 = *(void *)(v0 + 152);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v0 + 200) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v0 + 168), *(void *)(v0 + 176), *(unsigned char *)(v0 + 184));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v0 + 168), *(void *)(v0 + 176), *(unsigned char *)(v0 + 184));
    swift_retain();
    uint64_t v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t outlined copy of BindTarget?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return outlined copy of BindTarget(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined copy of BindTarget(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 5u && (((1 << a3) & 0x33) != 0 || a3 == 2)) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of BindTarget?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF) {
    return outlined consume of BindTarget(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined consume of BindTarget(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 5u && (((1 << a3) & 0x33) != 0 || a3 == 2)) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t key path setter for FromToByAnimation.name : <A>FromToByAnimation<A>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return FromToByAnimation.name.setter(v1, v2);
}

uint64_t FromToByAnimation.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = a2;
  return result;
}

uint64_t (*FromToByAnimation.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = FromToByAnimation.name.getter();
  a1[1] = v3;
  return FromToByAnimation.name.modify;
}

uint64_t FromToByAnimation.name.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 152) = v4;
    *(void *)(v3 + 160) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 152) = v4;
    *(void *)(v3 + 160) = v2;
  }
  return result;
}

uint64_t FromToByAnimation.blendLayer.getter()
{
  if (*(unsigned char *)(v0 + 192) != 1) {
    return *(unsigned int *)(v0 + 188);
  }
  uint64_t result = *(void *)(*(void *)(v0 + 200) + 16);
  if (result) {
    return RETimelineDefinitionGetAnimationLayer();
  }
  return result;
}

uint64_t FromToByAnimation.blendLayer.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 188) = result;
  *(unsigned char *)(v1 + 192) = 0;
  return result;
}

uint64_t *(*FromToByAnimation.blendLayer.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 192) == 1)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 200) + 16);
    if (v3) {
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
    }
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 188);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return FromToByAnimation.blendLayer.modify;
}

uint64_t *FromToByAnimation.blendLayer.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  *(_DWORD *)(v1 + 188) = *((_DWORD *)result + 2);
  *(unsigned char *)(v1 + 192) = 0;
  return result;
}

uint64_t FromToByAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 168);
  uint64_t v4 = *(void *)(v1 + 176);
  int v5 = *(unsigned __int8 *)(v1 + 184);
  if (v5 == 255)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      long long v8 = v11;
      char v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      char v9 = 0;
      long long v8 = xmmword_22831E960;
    }
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = v9;
  }
  else
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);

  return swift_release();
}

double key path getter for FromToByAnimation.bindTarget : <A>FromToByAnimation<A>@<D0>(uint64_t a1@<X8>)
{
  FromToByAnimation.bindTarget.getter((uint64_t)&v4);
  char v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 16) = v2;
  return result;
}

uint64_t key path setter for FromToByAnimation.bindTarget : <A>FromToByAnimation<A>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unsigned __int8 v2 = *(unsigned char *)(a1 + 16);
  v4[0] = *(void *)a1;
  v4[1] = v1;
  unsigned __int8 v5 = v2;
  outlined copy of BindTarget(v4[0], v1, v2);
  return FromToByAnimation.bindTarget.setter(v4);
}

uint64_t FromToByAnimation.bindTarget.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 168), *(void *)(v1 + 176), *(unsigned char *)(v1 + 184));
  *(void *)(v1 + 168) = v2;
  *(void *)(v1 + 176) = v3;
  *(unsigned char *)(v1 + 184) = v4;
  return result;
}

uint64_t (*FromToByAnimation.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  FromToByAnimation.bindTarget.getter(a1);
  return FromToByAnimation.bindTarget.modify;
}

uint64_t FromToByAnimation.bindTarget.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  if (a2)
  {
    outlined copy of BindTarget(*(void *)a1, v2, v4);
    outlined consume of BindTarget?(*(void *)(v5 + 168), *(void *)(v5 + 176), *(unsigned char *)(v5 + 184));
    *(void *)(v5 + 168) = v3;
    *(void *)(v5 + 176) = v2;
    *(unsigned char *)(v5 + 184) = v4;
    return outlined consume of BindTarget(v3, v2, v4);
  }
  else
  {
    uint64_t result = outlined consume of BindTarget?(*(void *)(v5 + 168), *(void *)(v5 + 176), *(unsigned char *)(v5 + 184));
    *(void *)(v5 + 168) = v3;
    *(void *)(v5 + 176) = v2;
    *(unsigned char *)(v5 + 184) = v4;
  }
  return result;
}

uint64_t FromToByAnimation.fillMode.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 194))
  {
    uint64_t result = *(void *)(*(void *)(v1 + 200) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(v1 + 193);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *FromToByAnimation.fillMode.setter(unsigned __int8 *result)
{
  *(_WORD *)(v1 + 193) = *result;
  return result;
}

unsigned __int8 *(*FromToByAnimation.fillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 194))
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 200) + 16);
    if (v3) {
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    LOBYTE(v3) = *(unsigned char *)(v1 + 193);
  }
  *(unsigned char *)(a1 + 8) = v3;
  return FromToByAnimation.fillMode.modify;
}

unsigned __int8 *FromToByAnimation.fillMode.modify(unsigned __int8 *result)
{
  *(_WORD *)(*(void *)result + 193) = result[8];
  return result;
}

uint64_t FromToByAnimation.isAdditive.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 195);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = *(void *)(*(void *)(v0 + 200) + 16);
  if (result) {
    return RETimelineDefinitionIsAdditive();
  }
  return result;
}

uint64_t FromToByAnimation.isAdditive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 195) = result;
  return result;
}

unsigned char *(*FromToByAnimation.isAdditive.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 195);
  if (v3 == 2)
  {
    uint64_t v4 = *(void *)(*(void *)(v1 + 200) + 16);
    if (v4) {
      LOBYTE(v4) = RETimelineDefinitionIsAdditive();
    }
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = v4;
  return FromToByAnimation.isAdditive.modify;
}

unsigned char *FromToByAnimation.isAdditive.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 195) = result[8];
  return result;
}

__n128 FromToByAnimation.timing.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  int v3 = (__n128 *)(v2 + *(int *)(a1 + 56));
  unsigned __int32 v4 = v3[1].n128_u32[0];
  unsigned __int8 v5 = v3[1].n128_u8[4];
  __n128 result = *v3;
  *a2 = *v3;
  a2[1].n128_u32[0] = v4;
  a2[1].n128_u8[4] = v5;
  return result;
}

double key path getter for FromToByAnimation.timing : <A>FromToByAnimation<A>@<D0>(__n128 *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FromToByAnimation();
  FromToByAnimation.timing.getter(v2, &v6);
  unsigned __int32 v3 = v7;
  unsigned __int8 v4 = v8;
  double result = v6.n128_f64[0];
  *a1 = v6;
  a1[1].n128_u32[0] = v3;
  a1[1].n128_u8[4] = v4;
  return result;
}

double key path setter for FromToByAnimation.timing : <A>FromToByAnimation<A>(__n128 *a1)
{
  unsigned __int32 v1 = a1[1].n128_u32[0];
  unsigned __int8 v2 = a1[1].n128_u8[4];
  __n128 v5 = *a1;
  unsigned __int32 v6 = v1;
  unsigned __int8 v7 = v2;
  uint64_t v3 = type metadata accessor for FromToByAnimation();
  *(void *)&double result = FromToByAnimation.timing.setter(&v5, v3).n128_u64[0];
  return result;
}

__n128 FromToByAnimation.timing.setter(__n128 *a1, uint64_t a2)
{
  unsigned __int32 v3 = a1[1].n128_u32[0];
  unsigned __int8 v4 = a1[1].n128_u8[4];
  __n128 v5 = (__n128 *)(v2 + *(int *)(a2 + 56));
  __n128 result = *a1;
  __n128 *v5 = *a1;
  v5[1].n128_u32[0] = v3;
  v5[1].n128_u8[4] = v4;
  return result;
}

void (*FromToByAnimation.timing.modify(void *a1, uint64_t a2))(void **a1)
{
  __n128 v5 = malloc(0x28uLL);
  *a1 = v5;
  _OWORD v5[3] = a2;
  v5[4] = v2;
  uint64_t v6 = v2 + *(int *)(a2 + 56);
  int v7 = *(_DWORD *)(v6 + 16);
  char v8 = *(unsigned char *)(v6 + 20);
  *(_OWORD *)__n128 v5 = *(_OWORD *)v6;
  *((_DWORD *)v5 + 4) = v7;
  *((unsigned char *)v5 + 20) = v8;
  return FromToByAnimation.timing.modify;
}

void FromToByAnimation.timing.modify(void **a1)
{
  unsigned __int32 v1 = *a1;
  int v2 = v1[4];
  char v3 = *((unsigned char *)v1 + 20);
  uint64_t v4 = *((void *)v1 + 4) + *(int *)(*((void *)v1 + 3) + 56);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v1;
  *(_DWORD *)(v4 + 16) = v2;
  *(unsigned char *)(v4 + 20) = v3;
  free(v1);
}

uint64_t FromToByAnimation.trimStart.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  v8[6] = *(_OWORD *)(v0 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  v8[4] = *(_OWORD *)(v0 + 64);
  v8[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0) {
    return *(void *)&v8[0];
  }
  uint64_t v5 = *(void *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      uint64_t v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t FromToByAnimation.trimStart.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  *(unsigned char *)(v2 + 9) = 0;
  return result;
}

uint64_t (*FromToByAnimation.trimStart.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = FromToByAnimation.trimStart.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return FromToByAnimation.trimStart.modify;
}

uint64_t FromToByAnimation.trimStart.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)uint64_t v1 = *(void *)result;
  *(_WORD *)(v1 + 8) = v2;
  return result;
}

uint64_t FromToByAnimation.trimEnd.getter()
{
  long long v1 = v0[7];
  long long v14 = v0[6];
  long long v15 = v1;
  long long v16 = v0[8];
  uint64_t v17 = *((void *)v0 + 18);
  long long v2 = v0[3];
  long long v10 = v0[2];
  long long v11 = v2;
  long long v3 = v0[5];
  long long v12 = v0[4];
  long long v13 = v3;
  long long v4 = v0[1];
  long long v8 = *v0;
  long long v9 = v4;
  if ((BYTE9(v4) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      uint64_t v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t FromToByAnimation.trimEnd.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  *(unsigned char *)(v2 + 25) = 0;
  return result;
}

uint64_t (*FromToByAnimation.trimEnd.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = FromToByAnimation.trimEnd.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return FromToByAnimation.trimEnd.modify;
}

uint64_t FromToByAnimation.trimEnd.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 16) = *(void *)result;
  *(_WORD *)(v1 + 24) = v2;
  return result;
}

uint64_t FromToByAnimation.trimDuration.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v13 = *(_OWORD *)(v0 + 96);
  long long v14 = v1;
  long long v15 = *(_OWORD *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  long long v9 = *(_OWORD *)(v0 + 32);
  long long v10 = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v11 = *(_OWORD *)(v0 + 64);
  long long v12 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v9) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v16 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      uint64_t v5 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t FromToByAnimation.trimDuration.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  *(unsigned char *)(v2 + 41) = 0;
  return result;
}

uint64_t (*FromToByAnimation.trimDuration.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = FromToByAnimation.trimDuration.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return FromToByAnimation.trimDuration.modify;
}

uint64_t FromToByAnimation.trimDuration.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 32) = *(void *)result;
  *(_WORD *)(v1 + 40) = v2;
  return result;
}

double FromToByAnimation.offset.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v12 = *(_OWORD *)(v0 + 96);
  long long v13 = v1;
  long long v14 = *(_OWORD *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  long long v9 = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v10 = *(_OWORD *)(v0 + 64);
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void FromToByAnimation.offset.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
  *(unsigned char *)(v1 + 56) = 0;
}

double (*FromToByAnimation.offset.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = FromToByAnimation.offset.getter();
  return FromToByAnimation.offset.modify;
}

double FromToByAnimation.offset.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  double result = *(double *)a1;
  *(void *)(v1 + 48) = *(void *)a1;
  *(unsigned char *)(v1 + 56) = 0;
  return result;
}

double FromToByAnimation.delay.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v11 = *(_OWORD *)(v0 + 96);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v9 = *(_OWORD *)(v0 + 64);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void FromToByAnimation.delay.setter(double a1)
{
  *(double *)(v1 + 64) = a1;
  *(unsigned char *)(v1 + 72) = 0;
}

double (*FromToByAnimation.delay.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = FromToByAnimation.delay.getter();
  return FromToByAnimation.delay.modify;
}

double FromToByAnimation.delay.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  double result = *(double *)a1;
  *(void *)(v1 + 64) = *(void *)a1;
  *(unsigned char *)(v1 + 72) = 0;
  return result;
}

float FromToByAnimation.speed.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v11 = *(_OWORD *)(v0 + 96);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v9 = *(_OWORD *)(v0 + 64);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((v10 & 1) == 0) {
    return *((float *)&v9 + 3);
  }
  float v5 = 1.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      float v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void FromToByAnimation.speed.setter(float a1)
{
  *(float *)(v1 + 76) = a1;
  *(unsigned char *)(v1 + 80) = 0;
}

float (*FromToByAnimation.speed.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  *(float *)(a1 + 8) = FromToByAnimation.speed.getter();
  return FromToByAnimation.speed.modify;
}

float FromToByAnimation.speed.modify(float *a1)
{
  uint64_t v1 = *(void *)a1;
  float result = a1[2];
  *(float *)(v1 + 76) = result;
  *(unsigned char *)(v1 + 80) = 0;
  return result;
}

void FromToByAnimation.repeatMode.getter(unsigned char *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 112);
  long long v11 = *(_OWORD *)(v1 + 96);
  long long v12 = v3;
  long long v13 = *(_OWORD *)(v1 + 128);
  uint64_t v14 = *(void *)(v1 + 144);
  long long v4 = *(_OWORD *)(v1 + 48);
  v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v4;
  long long v5 = *(_OWORD *)(v1 + 80);
  v9[4] = *(_OWORD *)(v1 + 64);
  long long v10 = v5;
  long long v6 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    uint64_t v7 = *(void *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        unsigned int ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

unsigned char *FromToByAnimation.repeatMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 81) = *result;
  return result;
}

unsigned char *(*FromToByAnimation.repeatMode.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  FromToByAnimation.repeatMode.getter((unsigned char *)(a1 + 8));
  return FromToByAnimation.repeatMode.modify;
}

unsigned char *FromToByAnimation.repeatMode.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 81) = result[8];
  return result;
}

double FromToByAnimation.duration.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v3 = MEMORY[0x270FA5388](a1);
  long long v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v7 + *(int *)(v6 + 52);
  double v9 = *(double *)v8;
  int v10 = *(unsigned __int8 *)(v8 + 8);
  (*(void (**)(char *, __n128))(v2 + 16))(v5, v3);
  if (v10 == 1)
  {
    if (*(void *)(*((void *)v5 + 25) + 16))
    {
      RETimelineDefinitionGetDuration();
      double v9 = v11;
    }
    else
    {
      double v9 = 0.0;
    }
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v9;
}

uint64_t FromToByAnimation.duration.setter(uint64_t result, double a2)
{
  uint64_t v3 = v2 + *(int *)(result + 52);
  *(double *)uint64_t v3 = a2;
  *(unsigned char *)(v3 + 8) = 0;
  return result;
}

double (*FromToByAnimation.duration.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = v2;
  *(double *)a1 = FromToByAnimation.duration.getter(a2);
  return FromToByAnimation.duration.modify;
}

double FromToByAnimation.duration.modify(uint64_t a1)
{
  double result = *(double *)a1;
  uint64_t v2 = *(void *)(a1 + 16) + *(int *)(*(void *)(a1 + 8) + 52);
  *(void *)uint64_t v2 = *(void *)a1;
  *(unsigned char *)(v2 + 8) = 0;
  return result;
}

uint64_t FromToByAnimation.init(name:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, char a7@<W6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, int a14, char *a15, char *a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v59 = a6[1];
  uint64_t v60 = *a6;
  char v57 = *((unsigned char *)a6 + 20);
  int v58 = *((_DWORD *)a6 + 4);
  uint64_t v47 = a8[1];
  uint64_t v48 = *a8;
  char v46 = *((unsigned char *)a8 + 16);
  char v29 = *a15;
  char v49 = *a16;
  os_log_type_t v30 = (int *)type metadata accessor for FromToByAnimation();
  uint64_t v31 = a9 + v30[10];
  uint64_t v32 = type metadata accessor for Optional();
  uint64_t v50 = *(void *)(v32 - 8);
  BOOL v33 = *(void (**)(void))(v50 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v33)(v31, 1, 1, v32);
  uint64_t v51 = a9 + v30[11];
  v33();
  uint64_t v52 = a9 + v30[12];
  v33();
  uint64_t v34 = v33;
  uint64_t v53 = a9 + v30[13];
  *(void *)uint64_t v53 = 0;
  *(unsigned char *)(v53 + 8) = 1;
  *(void *)(a9 + v30[15]) = 0;
  *(unsigned char *)(a9 + v30[16]) = 2;
  *(unsigned char *)(a9 + v30[17]) = 2;
  *(unsigned char *)(a9 + v30[18]) = 2;
  *(void *)(a9 + v30[19]) = 0;
  v64[0] = 0;
  v64[1] = 0;
  char v65 = -1;
  char v63 = v29;
  char v62 = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a1, a2, v64, 0, &v63, &v62, a17, a18 & 1, (uint64_t)v66, a11, a12, a13, a19, a20 & 1, a21, a22 & 1);
  long long v35 = v66[7];
  long long v36 = v66[8];
  *(_OWORD *)(a9 + 96) = v66[6];
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 128) = v36;
  *(void *)(a9 + 144) = v67;
  long long v37 = v66[3];
  *(_OWORD *)(a9 + 32) = v66[2];
  *(_OWORD *)(a9 + 48) = v37;
  long long v38 = v66[5];
  *(_OWORD *)(a9 + 64) = v66[4];
  *(_OWORD *)(a9 + 80) = v38;
  long long v39 = v66[1];
  *(_OWORD *)a9 = v66[0];
  *(_OWORD *)(a9 + 16) = v39;
  type metadata accessor for TimelineDefinition();
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = 0;
  *(void *)(a9 + 152) = a1;
  *(void *)(a9 + 160) = a2;
  *(void *)(a9 + 168) = v48;
  *(void *)(a9 + 176) = v47;
  *(unsigned char *)(a9 + 184) = v46;
  *(_DWORD *)(a9 + 188) = a14;
  *(unsigned char *)(a9 + 192) = 0;
  *(unsigned char *)(a9 + 193) = v49;
  *(unsigned char *)(a9 + 194) = 0;
  *(unsigned char *)(a9 + 195) = a7;
  *(void *)(a9 + 200) = v40;
  uint64_t v41 = type metadata accessor for Optional();
  os_log_type_t v42 = *(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8);
  swift_bridgeObjectRetain();
  v42(v31, v41);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32);
  v43(v31, a3, v32);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v34)(v31, 0, 1, v32);
  v42(v51, v41);
  v43(v51, a4, v32);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v34)(v51, 0, 1, v32);
  v42(v52, v41);
  v43(v52, a5, v32);
  uint64_t result = ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v34)(v52, 0, 1, v32);
  *(double *)uint64_t v53 = a10;
  *(unsigned char *)(v53 + 8) = 0;
  uint64_t v45 = a9 + v30[14];
  *(void *)uint64_t v45 = v60;
  *(void *)(v45 + 8) = v59;
  *(_DWORD *)(v45 + 16) = v58;
  *(unsigned char *)(v45 + 20) = v57;
  return result;
}

uint64_t specialized FromToByAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1)
{
  if (a1._rawValue)
  {
    long long v3 = *(long long *)((char *)v1 + 168);
    *(_OWORD *)unint64_t v86 = *(long long *)((char *)v1 + 152);
    *(_OWORD *)&v86[16] = v3;
    long long v87 = *(long long *)((char *)v1 + 184);
    uint64_t v4 = *((void *)v1 + 25);
    *(void *)&long long v88 = v4;
    TimelineBaseProperties.writeProperties(_:)(a1);
    if ((*((unsigned char *)v1 + 264) & 1) != 0 && *(void *)(v4 + 16)) {
      RETimelineDefinitionGetDuration();
    }
    RETimelineDefinitionSetDuration();
    *(_OWORD *)unint64_t v86 = v1[17];
    *(void *)&v86[13] = *(void *)((char *)v1 + 285);
    if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16)) {
      RETimelineDefinitionSetEasingFunctionEx();
    }
    long long v27 = v1[7];
    long long v28 = v1[5];
    long long v81 = v1[6];
    long long v82 = v27;
    long long v29 = v1[7];
    long long v83 = v1[8];
    long long v30 = v1[3];
    long long v31 = v1[1];
    long long v77 = v1[2];
    long long v78 = v30;
    long long v32 = v1[3];
    long long v33 = v1[5];
    long long v79 = v1[4];
    long long v80 = v33;
    long long v34 = v1[1];
    long long v75 = *v1;
    long long v76 = v34;
    long long v91 = v81;
    long long v92 = v29;
    long long v93 = v1[8];
    long long v87 = v77;
    long long v88 = v32;
    long long v89 = v79;
    long long v90 = v28;
    uint64_t v84 = *((void *)v1 + 18);
    uint64_t v94 = *((void *)v1 + 18);
    *(_OWORD *)unint64_t v86 = v75;
    *(_OWORD *)&v86[16] = v31;
    if (TimelineClipProperties.isClipped.getter())
    {
      long long v56 = v81;
      long long v57 = v82;
      char v58 = v83;
      int v59 = DWORD1(v83);
      char v60 = BYTE8(v83);
      char v61 = BYTE9(v83);
      char v62 = BYTE10(v83);
      char v63 = BYTE11(v83);
      uint64_t v35 = v84;
      char v54 = v80;
      char v55 = BYTE1(v80);
      char v52 = BYTE8(v79);
      int v53 = HIDWORD(v79);
      uint64_t v50 = v78;
      uint64_t v51 = v79;
      char v49 = BYTE8(v78);
      uint64_t v48 = v77;
      char v46 = BYTE9(v77);
      char v47 = BYTE8(v77);
      uint64_t v36 = v76;
      char v37 = BYTE8(v76);
      char v38 = BYTE9(v76);
      uint64_t v39 = v75;
      char v40 = BYTE8(v75);
      char v41 = BYTE9(v75);
      outlined init with take of Transform?((uint64_t)&v80 + 8, (uint64_t)v85, &demangling cache variable for type metadata for TimelineDefinition?);
      type metadata accessor for TimelineDefinition();
      uint64_t v42 = swift_allocObject();
      *(Swift::OpaquePointer *)(v42 + 16) = a1;
      outlined retain of TimelineClipProperties((uint64_t)&v75);
      RERetain();
      outlined release of TimelineDefinition?((uint64_t)v85);
      *(void *)&long long v65 = v39;
      BYTE8(v65) = v40;
      BYTE9(v65) = v41;
      *(void *)&long long v66 = v36;
      BYTE8(v66) = v37;
      BYTE9(v66) = v38;
      *(void *)&long long v67 = v48;
      BYTE8(v67) = v47;
      BYTE9(v67) = v46;
      *(void *)&long long v68 = v50;
      BYTE8(v68) = v49;
      *(void *)&long long v69 = v51;
      BYTE8(v69) = v52;
      HIDWORD(v69) = v53;
      LOBYTE(v70) = v54;
      BYTE1(v70) = v55;
      *((void *)&v70 + 1) = v42;
      long long v71 = v56;
      long long v72 = v57;
      LOBYTE(v73) = v58;
      DWORD1(v73) = v59;
      BYTE8(v73) = v60;
      BYTE9(v73) = v61;
      BYTE10(v73) = v62;
      BYTE11(v73) = v63;
      uint64_t v74 = v35;
      uint64_t v94 = v35;
      long long v92 = v57;
      long long v93 = v73;
      *(_OWORD *)unint64_t v86 = v65;
      *(_OWORD *)&v86[16] = v66;
      long long v90 = v70;
      long long v91 = v56;
      long long v88 = v68;
      long long v89 = v69;
      long long v87 = v67;
      outlined retain of TimelineClipProperties((uint64_t)&v65);
      swift_retain();
      closure #1 in TimelineClipProperties.createClip()((uint64_t)v86, &v64);
      swift_release();
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)&v65);
      outlined release of TimelineClipProperties((uint64_t)&v65);
      return v64;
    }
    type metadata accessor for TimelineDefinition();
    *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
    RERetain();
    os_log_type_t v44 = TimelineDefinition.resource.getter();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_release();
    return (uint64_t)v44;
  }
  else
  {
    uint64_t v5 = *((void *)v1 + 18);
    long long v6 = v1[7];
    long long v91 = v1[6];
    long long v92 = v6;
    long long v93 = v1[8];
    long long v7 = v1[3];
    long long v87 = v1[2];
    long long v88 = v7;
    long long v8 = v1[5];
    long long v89 = v1[4];
    long long v90 = v8;
    long long v9 = v1[1];
    *(_OWORD *)unint64_t v86 = *v1;
    *(_OWORD *)&v86[16] = v9;
    uint64_t v94 = v5;
    if (!TimelineClipProperties.isClipped.getter())
    {
      __n128 v18 = *(void **)(*((void *)v1 + 25) + 16);
      if (v18)
      {
        uint64_t v19 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v19, (uint64_t)v86);
        uint64_t v20 = *(void *)&v86[24];
        uint64_t v21 = v87;
        __swift_project_boxed_opaque_existential_1(v86, *(uint64_t *)&v86[24]);
        (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
        uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          uint64_t v23 = TimelineAsset;
          RETimelineDefinitionGetName();
          uint64_t v24 = String.init(cString:)();
          uint64_t v26 = v25;
          type metadata accessor for AnimationResource();
          __n128 v18 = (void *)swift_allocObject();
          v18[2] = v23;
          v18[3] = v24;
          v18[4] = v26;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
      return (uint64_t)v18;
    }
    long long v10 = v1[7];
    long long v91 = v1[6];
    long long v92 = v10;
    long long v93 = v1[8];
    long long v11 = v1[3];
    long long v87 = v1[2];
    long long v88 = v11;
    long long v12 = v1[5];
    long long v89 = v1[4];
    long long v90 = v12;
    long long v13 = v1[1];
    *(_OWORD *)unint64_t v86 = *v1;
    *(_OWORD *)&v86[16] = v13;
    uint64_t v94 = v5;
    if (TimelineClipProperties.isModified.getter())
    {
      long long v14 = v1[7];
      long long v91 = v1[6];
      long long v92 = v14;
      long long v93 = v1[8];
      long long v15 = v1[3];
      long long v87 = v1[2];
      long long v88 = v15;
      long long v16 = v1[5];
      long long v89 = v1[4];
      long long v90 = v16;
      long long v17 = v1[1];
      *(_OWORD *)unint64_t v86 = *v1;
      *(_OWORD *)&v86[16] = v17;
      uint64_t v94 = v5;
      return TimelineClipProperties.createClip()();
    }
    swift_retain();
    uint64_t v45 = TimelineDefinition.resource.getter();
    swift_release();
    return (uint64_t)v45;
  }
}

{
  long long *v1;
  long long v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TimelineAsset;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  void *v44;
  void *v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  int v53;
  char v54;
  char v55;
  long long v56;
  long long v57;
  char v58;
  int v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  uint64_t v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  uint64_t v84;
  unsigned char v85[8];
  unsigned char v86[32];
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  uint64_t v94;

  if (a1._rawValue)
  {
    long long v3 = *(long long *)((char *)v1 + 168);
    *(_OWORD *)unint64_t v86 = *(long long *)((char *)v1 + 152);
    *(_OWORD *)&v86[16] = v3;
    long long v87 = *(long long *)((char *)v1 + 184);
    uint64_t v4 = *((void *)v1 + 25);
    *(void *)&long long v88 = v4;
    TimelineBaseProperties.writeProperties(_:)(a1);
    if ((v1[19] & 1) != 0 && *(void *)(v4 + 16)) {
      RETimelineDefinitionGetDuration();
    }
    RETimelineDefinitionSetDuration();
    *(_OWORD *)unint64_t v86 = v1[20];
    *(void *)&v86[13] = *(void *)((char *)v1 + 333);
    if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16)) {
      RETimelineDefinitionSetEasingFunctionEx();
    }
    long long v27 = v1[7];
    long long v28 = v1[5];
    long long v81 = v1[6];
    long long v82 = v27;
    long long v29 = v1[7];
    long long v83 = v1[8];
    long long v30 = v1[3];
    long long v31 = v1[1];
    long long v77 = v1[2];
    long long v78 = v30;
    long long v32 = v1[3];
    long long v33 = v1[5];
    long long v79 = v1[4];
    long long v80 = v33;
    long long v34 = v1[1];
    long long v75 = *v1;
    long long v76 = v34;
    long long v91 = v81;
    long long v92 = v29;
    long long v93 = v1[8];
    long long v87 = v77;
    long long v88 = v32;
    long long v89 = v79;
    long long v90 = v28;
    uint64_t v84 = *((void *)v1 + 18);
    uint64_t v94 = *((void *)v1 + 18);
    *(_OWORD *)unint64_t v86 = v75;
    *(_OWORD *)&v86[16] = v31;
    if (TimelineClipProperties.isClipped.getter())
    {
      long long v56 = v81;
      long long v57 = v82;
      char v58 = v83;
      int v59 = DWORD1(v83);
      char v60 = BYTE8(v83);
      char v61 = BYTE9(v83);
      char v62 = BYTE10(v83);
      char v63 = BYTE11(v83);
      uint64_t v35 = v84;
      char v54 = v80;
      char v55 = BYTE1(v80);
      char v52 = BYTE8(v79);
      int v53 = HIDWORD(v79);
      uint64_t v50 = v78;
      uint64_t v51 = v79;
      char v49 = BYTE8(v78);
      uint64_t v48 = v77;
      char v46 = BYTE9(v77);
      char v47 = BYTE8(v77);
      uint64_t v36 = v76;
      char v37 = BYTE8(v76);
      char v38 = BYTE9(v76);
      uint64_t v39 = v75;
      char v40 = BYTE8(v75);
      char v41 = BYTE9(v75);
      outlined init with take of Transform?((uint64_t)&v80 + 8, (uint64_t)v85, &demangling cache variable for type metadata for TimelineDefinition?);
      type metadata accessor for TimelineDefinition();
      uint64_t v42 = swift_allocObject();
      *(Swift::OpaquePointer *)(v42 + 16) = a1;
      outlined retain of TimelineClipProperties((uint64_t)&v75);
      RERetain();
      outlined release of TimelineDefinition?((uint64_t)v85);
      *(void *)&long long v65 = v39;
      BYTE8(v65) = v40;
      BYTE9(v65) = v41;
      *(void *)&long long v66 = v36;
      BYTE8(v66) = v37;
      BYTE9(v66) = v38;
      *(void *)&long long v67 = v48;
      BYTE8(v67) = v47;
      BYTE9(v67) = v46;
      *(void *)&long long v68 = v50;
      BYTE8(v68) = v49;
      *(void *)&long long v69 = v51;
      BYTE8(v69) = v52;
      HIDWORD(v69) = v53;
      LOBYTE(v70) = v54;
      BYTE1(v70) = v55;
      *((void *)&v70 + 1) = v42;
      long long v71 = v56;
      long long v72 = v57;
      LOBYTE(v73) = v58;
      DWORD1(v73) = v59;
      BYTE8(v73) = v60;
      BYTE9(v73) = v61;
      BYTE10(v73) = v62;
      BYTE11(v73) = v63;
      uint64_t v74 = v35;
      uint64_t v94 = v35;
      long long v92 = v57;
      long long v93 = v73;
      *(_OWORD *)unint64_t v86 = v65;
      *(_OWORD *)&v86[16] = v66;
      long long v90 = v70;
      long long v91 = v56;
      long long v88 = v68;
      long long v89 = v69;
      long long v87 = v67;
      outlined retain of TimelineClipProperties((uint64_t)&v65);
      swift_retain();
      closure #1 in TimelineClipProperties.createClip()((uint64_t)v86, &v64);
      swift_release();
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)&v65);
      outlined release of TimelineClipProperties((uint64_t)&v65);
      return v64;
    }
    type metadata accessor for TimelineDefinition();
    *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
    RERetain();
    os_log_type_t v44 = TimelineDefinition.resource.getter();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_release();
    return (uint64_t)v44;
  }
  else
  {
    uint64_t v5 = *((void *)v1 + 18);
    long long v6 = v1[7];
    long long v91 = v1[6];
    long long v92 = v6;
    long long v93 = v1[8];
    long long v7 = v1[3];
    long long v87 = v1[2];
    long long v88 = v7;
    long long v8 = v1[5];
    long long v89 = v1[4];
    long long v90 = v8;
    long long v9 = v1[1];
    *(_OWORD *)unint64_t v86 = *v1;
    *(_OWORD *)&v86[16] = v9;
    uint64_t v94 = v5;
    if (!TimelineClipProperties.isClipped.getter())
    {
      __n128 v18 = *(void **)(*((void *)v1 + 25) + 16);
      if (v18)
      {
        uint64_t v19 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v19, (uint64_t)v86);
        uint64_t v20 = *(void *)&v86[24];
        uint64_t v21 = v87;
        __swift_project_boxed_opaque_existential_1(v86, *(uint64_t *)&v86[24]);
        (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
        uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          uint64_t v23 = TimelineAsset;
          RETimelineDefinitionGetName();
          uint64_t v24 = String.init(cString:)();
          uint64_t v26 = v25;
          type metadata accessor for AnimationResource();
          __n128 v18 = (void *)swift_allocObject();
          v18[2] = v23;
          v18[3] = v24;
          v18[4] = v26;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
      return (uint64_t)v18;
    }
    long long v10 = v1[7];
    long long v91 = v1[6];
    long long v92 = v10;
    long long v93 = v1[8];
    long long v11 = v1[3];
    long long v87 = v1[2];
    long long v88 = v11;
    long long v12 = v1[5];
    long long v89 = v1[4];
    long long v90 = v12;
    long long v13 = v1[1];
    *(_OWORD *)unint64_t v86 = *v1;
    *(_OWORD *)&v86[16] = v13;
    uint64_t v94 = v5;
    if (TimelineClipProperties.isModified.getter())
    {
      long long v14 = v1[7];
      long long v91 = v1[6];
      long long v92 = v14;
      long long v93 = v1[8];
      long long v15 = v1[3];
      long long v87 = v1[2];
      long long v88 = v15;
      long long v16 = v1[5];
      long long v89 = v1[4];
      long long v90 = v16;
      long long v17 = v1[1];
      *(_OWORD *)unint64_t v86 = *v1;
      *(_OWORD *)&v86[16] = v17;
      uint64_t v94 = v5;
      return TimelineClipProperties.createClip()();
    }
    swift_retain();
    uint64_t v45 = TimelineDefinition.resource.getter();
    swift_release();
    return (uint64_t)v45;
  }
}

{
  long long *v1;
  long long v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TimelineAsset;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  void *v44;
  void *v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  int v53;
  char v54;
  char v55;
  long long v56;
  long long v57;
  char v58;
  int v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  uint64_t v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  uint64_t v84;
  unsigned char v85[8];
  unsigned char v86[32];
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  uint64_t v94;

  if (a1._rawValue)
  {
    long long v3 = *(long long *)((char *)v1 + 168);
    *(_OWORD *)unint64_t v86 = *(long long *)((char *)v1 + 152);
    *(_OWORD *)&v86[16] = v3;
    long long v87 = *(long long *)((char *)v1 + 184);
    uint64_t v4 = *((void *)v1 + 25);
    *(void *)&long long v88 = v4;
    TimelineBaseProperties.writeProperties(_:)(a1);
    if ((v1[25] & 1) != 0 && *(void *)(v4 + 16)) {
      RETimelineDefinitionGetDuration();
    }
    RETimelineDefinitionSetDuration();
    *(_OWORD *)unint64_t v86 = v1[26];
    *(void *)&v86[13] = *(void *)((char *)v1 + 429);
    if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16)) {
      RETimelineDefinitionSetEasingFunctionEx();
    }
    long long v27 = v1[7];
    long long v28 = v1[5];
    long long v81 = v1[6];
    long long v82 = v27;
    long long v29 = v1[7];
    long long v83 = v1[8];
    long long v30 = v1[3];
    long long v31 = v1[1];
    long long v77 = v1[2];
    long long v78 = v30;
    long long v32 = v1[3];
    long long v33 = v1[5];
    long long v79 = v1[4];
    long long v80 = v33;
    long long v34 = v1[1];
    long long v75 = *v1;
    long long v76 = v34;
    long long v91 = v81;
    long long v92 = v29;
    long long v93 = v1[8];
    long long v87 = v77;
    long long v88 = v32;
    long long v89 = v79;
    long long v90 = v28;
    uint64_t v84 = *((void *)v1 + 18);
    uint64_t v94 = *((void *)v1 + 18);
    *(_OWORD *)unint64_t v86 = v75;
    *(_OWORD *)&v86[16] = v31;
    if (TimelineClipProperties.isClipped.getter())
    {
      long long v56 = v81;
      long long v57 = v82;
      char v58 = v83;
      int v59 = DWORD1(v83);
      char v60 = BYTE8(v83);
      char v61 = BYTE9(v83);
      char v62 = BYTE10(v83);
      char v63 = BYTE11(v83);
      uint64_t v35 = v84;
      char v54 = v80;
      char v55 = BYTE1(v80);
      char v52 = BYTE8(v79);
      int v53 = HIDWORD(v79);
      uint64_t v50 = v78;
      uint64_t v51 = v79;
      char v49 = BYTE8(v78);
      uint64_t v48 = v77;
      char v46 = BYTE9(v77);
      char v47 = BYTE8(v77);
      uint64_t v36 = v76;
      char v37 = BYTE8(v76);
      char v38 = BYTE9(v76);
      uint64_t v39 = v75;
      char v40 = BYTE8(v75);
      char v41 = BYTE9(v75);
      outlined init with take of Transform?((uint64_t)&v80 + 8, (uint64_t)v85, &demangling cache variable for type metadata for TimelineDefinition?);
      type metadata accessor for TimelineDefinition();
      uint64_t v42 = swift_allocObject();
      *(Swift::OpaquePointer *)(v42 + 16) = a1;
      outlined retain of TimelineClipProperties((uint64_t)&v75);
      RERetain();
      outlined release of TimelineDefinition?((uint64_t)v85);
      *(void *)&long long v65 = v39;
      BYTE8(v65) = v40;
      BYTE9(v65) = v41;
      *(void *)&long long v66 = v36;
      BYTE8(v66) = v37;
      BYTE9(v66) = v38;
      *(void *)&long long v67 = v48;
      BYTE8(v67) = v47;
      BYTE9(v67) = v46;
      *(void *)&long long v68 = v50;
      BYTE8(v68) = v49;
      *(void *)&long long v69 = v51;
      BYTE8(v69) = v52;
      HIDWORD(v69) = v53;
      LOBYTE(v70) = v54;
      BYTE1(v70) = v55;
      *((void *)&v70 + 1) = v42;
      long long v71 = v56;
      long long v72 = v57;
      LOBYTE(v73) = v58;
      DWORD1(v73) = v59;
      BYTE8(v73) = v60;
      BYTE9(v73) = v61;
      BYTE10(v73) = v62;
      BYTE11(v73) = v63;
      uint64_t v74 = v35;
      uint64_t v94 = v35;
      long long v92 = v57;
      long long v93 = v73;
      *(_OWORD *)unint64_t v86 = v65;
      *(_OWORD *)&v86[16] = v66;
      long long v90 = v70;
      long long v91 = v56;
      long long v88 = v68;
      long long v89 = v69;
      long long v87 = v67;
      outlined retain of TimelineClipProperties((uint64_t)&v65);
      swift_retain();
      closure #1 in TimelineClipProperties.createClip()((uint64_t)v86, &v64);
      swift_release();
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)&v65);
      outlined release of TimelineClipProperties((uint64_t)&v65);
      return v64;
    }
    type metadata accessor for TimelineDefinition();
    *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
    RERetain();
    os_log_type_t v44 = TimelineDefinition.resource.getter();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_release();
    return (uint64_t)v44;
  }
  else
  {
    uint64_t v5 = *((void *)v1 + 18);
    long long v6 = v1[7];
    long long v91 = v1[6];
    long long v92 = v6;
    long long v93 = v1[8];
    long long v7 = v1[3];
    long long v87 = v1[2];
    long long v88 = v7;
    long long v8 = v1[5];
    long long v89 = v1[4];
    long long v90 = v8;
    long long v9 = v1[1];
    *(_OWORD *)unint64_t v86 = *v1;
    *(_OWORD *)&v86[16] = v9;
    uint64_t v94 = v5;
    if (!TimelineClipProperties.isClipped.getter())
    {
      __n128 v18 = *(void **)(*((void *)v1 + 25) + 16);
      if (v18)
      {
        uint64_t v19 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v19, (uint64_t)v86);
        uint64_t v20 = *(void *)&v86[24];
        uint64_t v21 = v87;
        __swift_project_boxed_opaque_existential_1(v86, *(uint64_t *)&v86[24]);
        (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
        uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          uint64_t v23 = TimelineAsset;
          RETimelineDefinitionGetName();
          uint64_t v24 = String.init(cString:)();
          uint64_t v26 = v25;
          type metadata accessor for AnimationResource();
          __n128 v18 = (void *)swift_allocObject();
          v18[2] = v23;
          v18[3] = v24;
          v18[4] = v26;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
      return (uint64_t)v18;
    }
    long long v10 = v1[7];
    long long v91 = v1[6];
    long long v92 = v10;
    long long v93 = v1[8];
    long long v11 = v1[3];
    long long v87 = v1[2];
    long long v88 = v11;
    long long v12 = v1[5];
    long long v89 = v1[4];
    long long v90 = v12;
    long long v13 = v1[1];
    *(_OWORD *)unint64_t v86 = *v1;
    *(_OWORD *)&v86[16] = v13;
    uint64_t v94 = v5;
    if (TimelineClipProperties.isModified.getter())
    {
      long long v14 = v1[7];
      long long v91 = v1[6];
      long long v92 = v14;
      long long v93 = v1[8];
      long long v15 = v1[3];
      long long v87 = v1[2];
      long long v88 = v15;
      long long v16 = v1[5];
      long long v89 = v1[4];
      long long v90 = v16;
      long long v17 = v1[1];
      *(_OWORD *)unint64_t v86 = *v1;
      *(_OWORD *)&v86[16] = v17;
      uint64_t v94 = v5;
      return TimelineClipProperties.createClip()();
    }
    swift_retain();
    uint64_t v45 = TimelineDefinition.resource.getter();
    swift_release();
    return (uint64_t)v45;
  }
}

{
  long long *v1;
  long long v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TimelineAsset;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  void *v44;
  void *v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  int v53;
  char v54;
  char v55;
  long long v56;
  long long v57;
  char v58;
  int v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  uint64_t v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  uint64_t v84;
  unsigned char v85[8];
  unsigned char v86[32];
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  uint64_t v94;

  if (a1._rawValue)
  {
    long long v3 = *(long long *)((char *)v1 + 168);
    *(_OWORD *)unint64_t v86 = *(long long *)((char *)v1 + 152);
    *(_OWORD *)&v86[16] = v3;
    long long v87 = *(long long *)((char *)v1 + 184);
    uint64_t v4 = *((void *)v1 + 25);
    *(void *)&long long v88 = v4;
    TimelineBaseProperties.writeProperties(_:)(a1);
    if ((v1[15] & 1) != 0 && *(void *)(v4 + 16)) {
      RETimelineDefinitionGetDuration();
    }
    RETimelineDefinitionSetDuration();
    *(_OWORD *)unint64_t v86 = v1[16];
    *(void *)&v86[13] = *(void *)((char *)v1 + 269);
    if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16)) {
      RETimelineDefinitionSetEasingFunctionEx();
    }
    long long v27 = v1[7];
    long long v28 = v1[5];
    long long v81 = v1[6];
    long long v82 = v27;
    long long v29 = v1[7];
    long long v83 = v1[8];
    long long v30 = v1[3];
    long long v31 = v1[1];
    long long v77 = v1[2];
    long long v78 = v30;
    long long v32 = v1[3];
    long long v33 = v1[5];
    long long v79 = v1[4];
    long long v80 = v33;
    long long v34 = v1[1];
    long long v75 = *v1;
    long long v76 = v34;
    long long v91 = v81;
    long long v92 = v29;
    long long v93 = v1[8];
    long long v87 = v77;
    long long v88 = v32;
    long long v89 = v79;
    long long v90 = v28;
    uint64_t v84 = *((void *)v1 + 18);
    uint64_t v94 = *((void *)v1 + 18);
    *(_OWORD *)unint64_t v86 = v75;
    *(_OWORD *)&v86[16] = v31;
    if (TimelineClipProperties.isClipped.getter())
    {
      long long v56 = v81;
      long long v57 = v82;
      char v58 = v83;
      int v59 = DWORD1(v83);
      char v60 = BYTE8(v83);
      char v61 = BYTE9(v83);
      char v62 = BYTE10(v83);
      char v63 = BYTE11(v83);
      uint64_t v35 = v84;
      char v54 = v80;
      char v55 = BYTE1(v80);
      char v52 = BYTE8(v79);
      int v53 = HIDWORD(v79);
      uint64_t v50 = v78;
      uint64_t v51 = v79;
      char v49 = BYTE8(v78);
      uint64_t v48 = v77;
      char v46 = BYTE9(v77);
      char v47 = BYTE8(v77);
      uint64_t v36 = v76;
      char v37 = BYTE8(v76);
      char v38 = BYTE9(v76);
      uint64_t v39 = v75;
      char v40 = BYTE8(v75);
      char v41 = BYTE9(v75);
      outlined init with take of Transform?((uint64_t)&v80 + 8, (uint64_t)v85, &demangling cache variable for type metadata for TimelineDefinition?);
      type metadata accessor for TimelineDefinition();
      uint64_t v42 = swift_allocObject();
      *(Swift::OpaquePointer *)(v42 + 16) = a1;
      outlined retain of TimelineClipProperties((uint64_t)&v75);
      RERetain();
      outlined release of TimelineDefinition?((uint64_t)v85);
      *(void *)&long long v65 = v39;
      BYTE8(v65) = v40;
      BYTE9(v65) = v41;
      *(void *)&long long v66 = v36;
      BYTE8(v66) = v37;
      BYTE9(v66) = v38;
      *(void *)&long long v67 = v48;
      BYTE8(v67) = v47;
      BYTE9(v67) = v46;
      *(void *)&long long v68 = v50;
      BYTE8(v68) = v49;
      *(void *)&long long v69 = v51;
      BYTE8(v69) = v52;
      HIDWORD(v69) = v53;
      LOBYTE(v70) = v54;
      BYTE1(v70) = v55;
      *((void *)&v70 + 1) = v42;
      long long v71 = v56;
      long long v72 = v57;
      LOBYTE(v73) = v58;
      DWORD1(v73) = v59;
      BYTE8(v73) = v60;
      BYTE9(v73) = v61;
      BYTE10(v73) = v62;
      BYTE11(v73) = v63;
      uint64_t v74 = v35;
      uint64_t v94 = v35;
      long long v92 = v57;
      long long v93 = v73;
      *(_OWORD *)unint64_t v86 = v65;
      *(_OWORD *)&v86[16] = v66;
      long long v90 = v70;
      long long v91 = v56;
      long long v88 = v68;
      long long v89 = v69;
      long long v87 = v67;
      outlined retain of TimelineClipProperties((uint64_t)&v65);
      swift_retain();
      closure #1 in TimelineClipProperties.createClip()((uint64_t)v86, &v64);
      swift_release();
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)&v65);
      outlined release of TimelineClipProperties((uint64_t)&v65);
      return v64;
    }
    type metadata accessor for TimelineDefinition();
    *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
    RERetain();
    os_log_type_t v44 = TimelineDefinition.resource.getter();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_release();
    return (uint64_t)v44;
  }
  else
  {
    uint64_t v5 = *((void *)v1 + 18);
    long long v6 = v1[7];
    long long v91 = v1[6];
    long long v92 = v6;
    long long v93 = v1[8];
    long long v7 = v1[3];
    long long v87 = v1[2];
    long long v88 = v7;
    long long v8 = v1[5];
    long long v89 = v1[4];
    long long v90 = v8;
    long long v9 = v1[1];
    *(_OWORD *)unint64_t v86 = *v1;
    *(_OWORD *)&v86[16] = v9;
    uint64_t v94 = v5;
    if (!TimelineClipProperties.isClipped.getter())
    {
      __n128 v18 = *(void **)(*((void *)v1 + 25) + 16);
      if (v18)
      {
        uint64_t v19 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v19, (uint64_t)v86);
        uint64_t v20 = *(void *)&v86[24];
        uint64_t v21 = v87;
        __swift_project_boxed_opaque_existential_1(v86, *(uint64_t *)&v86[24]);
        (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
        uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          uint64_t v23 = TimelineAsset;
          RETimelineDefinitionGetName();
          uint64_t v24 = String.init(cString:)();
          uint64_t v26 = v25;
          type metadata accessor for AnimationResource();
          __n128 v18 = (void *)swift_allocObject();
          v18[2] = v23;
          v18[3] = v24;
          v18[4] = v26;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
      return (uint64_t)v18;
    }
    long long v10 = v1[7];
    long long v91 = v1[6];
    long long v92 = v10;
    long long v93 = v1[8];
    long long v11 = v1[3];
    long long v87 = v1[2];
    long long v88 = v11;
    long long v12 = v1[5];
    long long v89 = v1[4];
    long long v90 = v12;
    long long v13 = v1[1];
    *(_OWORD *)unint64_t v86 = *v1;
    *(_OWORD *)&v86[16] = v13;
    uint64_t v94 = v5;
    if (TimelineClipProperties.isModified.getter())
    {
      long long v14 = v1[7];
      long long v91 = v1[6];
      long long v92 = v14;
      long long v93 = v1[8];
      long long v15 = v1[3];
      long long v87 = v1[2];
      long long v88 = v15;
      long long v16 = v1[5];
      long long v89 = v1[4];
      long long v90 = v16;
      long long v17 = v1[1];
      *(_OWORD *)unint64_t v86 = *v1;
      *(_OWORD *)&v86[16] = v17;
      uint64_t v94 = v5;
      return TimelineClipProperties.createClip()();
    }
    swift_retain();
    uint64_t v45 = TimelineDefinition.resource.getter();
    swift_release();
    return (uint64_t)v45;
  }
}

void *FromToByAnimation.createResource()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v35 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v36 = (char *)&v35 - v5;
  MEMORY[0x270FA5388](v6);
  char v37 = (char *)&v35 - v7;
  MEMORY[0x270FA5388](v8);
  char v38 = (char *)&v35 - v9;
  MEMORY[0x270FA5388](v10);
  long long v12 = (char *)&v35 - v11;
  MEMORY[0x270FA5388](v13);
  long long v15 = (char *)&v35 - v14;
  MEMORY[0x270FA5388](v16);
  __n128 v18 = (char *)&v35 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v35 - v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v35 - v23;
  __n128 v26 = MEMORY[0x270FA5388](v25);
  uint64_t v39 = *(void (**)(char *, __n128))(v2 + 16);
  uint64_t v40 = v28;
  v39((char *)&v35 - v27, v26);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Float>);
  if (swift_dynamicCast())
  {
    memcpy(v43, v45, 0x130uLL);
    outlined release of FromToByAnimation<Float>((uint64_t)v43);
    ((void (*)(char *, uint64_t, uint64_t))v39)(v24, v40, a1);
    swift_dynamicCast();
    memcpy(v44, v42, 0x130uLL);
    memcpy(v41, v42, 0x130uLL);
    long long v29 = FromToByAnimation<>.createResource()();
    outlined release of FromToByAnimation<Float>((uint64_t)v44);
    return v29;
  }
  ((void (*)(char *, uint64_t, uint64_t))v39)(v21, v40, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Double>);
  if (swift_dynamicCast())
  {
    memcpy(v43, v45, 0x140uLL);
    outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v43);
    ((void (*)(char *, uint64_t, uint64_t))v39)(v24, v40, a1);
    swift_dynamicCast();
    memcpy(v44, v42, 0x140uLL);
    memcpy(v41, v42, 0x140uLL);
    long long v30 = FromToByAnimation<>.createResource()();
LABEL_7:
    long long v29 = v30;
    outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v44);
    return v29;
  }
  ((void (*)(char *, uint64_t, uint64_t))v39)(v18, v40, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD2<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v43, v45, 0x140uLL);
    outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v43);
    ((void (*)(char *, uint64_t, uint64_t))v39)(v24, v40, a1);
    swift_dynamicCast();
    memcpy(v44, v42, 0x140uLL);
    memcpy(v41, v42, 0x140uLL);
    long long v30 = FromToByAnimation<>.createResource()();
    goto LABEL_7;
  }
  ((void (*)(char *, uint64_t, uint64_t))v39)(v15, v40, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD3<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v43, v45, 0x170uLL);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)v43);
    ((void (*)(char *, uint64_t, uint64_t))v39)(v24, v40, a1);
    swift_dynamicCast();
    memcpy(v44, v42, 0x170uLL);
    memcpy(v41, v42, 0x170uLL);
    long long v31 = FromToByAnimation<>.createResource()();
LABEL_14:
    long long v29 = v31;
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)v44);
    return v29;
  }
  ((void (*)(char *, uint64_t, uint64_t))v39)(v12, v40, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD4<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v43, v45, 0x170uLL);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)v43);
    ((void (*)(char *, uint64_t, uint64_t))v39)(v24, v40, a1);
    swift_dynamicCast();
    memcpy(v44, v42, 0x170uLL);
    memcpy(v41, v42, 0x170uLL);
    long long v31 = FromToByAnimation<>.createResource()();
    goto LABEL_14;
  }
  ((void (*)(char *, uint64_t, uint64_t))v39)(v38, v40, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<simd_quatf>);
  if (swift_dynamicCast())
  {
    memcpy(v43, v45, 0x170uLL);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)v43);
    ((void (*)(char *, uint64_t, uint64_t))v39)(v24, v40, a1);
    swift_dynamicCast();
    memcpy(v44, v42, 0x170uLL);
    memcpy(v41, v42, 0x170uLL);
    long long v31 = FromToByAnimation<>.createResource()();
    goto LABEL_14;
  }
  ((void (*)(char *, uint64_t, uint64_t))v39)(v37, v40, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Transform>);
  if (swift_dynamicCast())
  {
    memcpy(v43, v45, sizeof(v43));
    outlined release of FromToByAnimation<Transform>((uint64_t)v43);
    ((void (*)(char *, uint64_t, uint64_t))v39)(v24, v40, a1);
    swift_dynamicCast();
    memcpy(v44, v42, sizeof(v44));
    memcpy(v41, v42, sizeof(v41));
    long long v29 = FromToByAnimation<>.createResource()();
    outlined release of FromToByAnimation<Transform>((uint64_t)v44);
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v39)(v36, v40, a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<JointTransforms>);
    if (swift_dynamicCast())
    {
      memcpy(v43, v45, 0x130uLL);
      long long v33 = (void (*)(uint64_t))outlined consume of JointTransforms??;
      outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)v43, (void (*)(uint64_t))outlined consume of JointTransforms??);
      ((void (*)(char *, uint64_t, uint64_t))v39)(v24, v40, a1);
      swift_dynamicCast();
      memcpy(v44, v42, 0x130uLL);
      memcpy(v41, v42, 0x130uLL);
      long long v34 = FromToByAnimation<>.createResource()();
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t))v39)(v35, v40, a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<BlendShapeWeights>);
      if ((swift_dynamicCast() & 1) == 0) {
        return 0;
      }
      memcpy(v43, v45, 0x130uLL);
      long long v33 = (void (*)(uint64_t))outlined consume of BlendShapeWeights??;
      outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)v43, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
      ((void (*)(char *, uint64_t, uint64_t))v39)(v24, v40, a1);
      swift_dynamicCast();
      memcpy(v44, v42, 0x130uLL);
      memcpy(v41, v42, 0x130uLL);
      long long v34 = FromToByAnimation<>.createResource()();
    }
    long long v29 = v34;
    outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)v44, v33);
  }
  return v29;
}

void *FromToByAnimation<>.createResource()()
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  memcpy(__dst, v0, sizeof(__dst));
  long long v37 = *(_OWORD *)((char *)&__dst[9] + 8);
  long long v38 = *(_OWORD *)((char *)&__dst[10] + 8);
  long long v39 = *(_OWORD *)((char *)&__dst[11] + 8);
  uint64_t v40 = *((void *)&__dst[12] + 1);
  if (*(void *)&__dst[10])
  {
    uint64_t v1 = v40;
    outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v38, (uint64_t)v41, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v41, (uint64_t)v51, &demangling cache variable for type metadata for BindTarget?);
  if (v51[16] != 255) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 4, (uint64_t)v18, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v18, (uint64_t)v19, &demangling cache variable for type metadata for Int32?);
  if (v19[4] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 9, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v17, (uint64_t)v20, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v20[1] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 11, (uint64_t)&v16, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v16, (uint64_t)&v21, &demangling cache variable for type metadata for Bool?);
  if (v21 != 2) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&__dst[14] + 8, (uint64_t)v36, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)v52, &demangling cache variable for type metadata for Double?);
  if (v52[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v15, &demangling cache variable for type metadata for Float??), outlined init with take of Transform?((uint64_t)v15, (uint64_t)v22, &demangling cache variable for type metadata for Float??), v22[5] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[13] + 8, (uint64_t)v14, &demangling cache variable for type metadata for Float??), outlined init with take of Transform?((uint64_t)v14, (uint64_t)v23, &demangling cache variable for type metadata for Float??), v23[5] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[14],
          (uint64_t)v13,
          &demangling cache variable for type metadata for Float??),
        outlined init with take of Transform?((uint64_t)v13, (uint64_t)v24, &demangling cache variable for type metadata for Float??), (v24[5] & 1) == 0))
  {
LABEL_14:
    uint64_t v1 = v40;
    if (*(void *)(v40 + 16))
    {
      outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v37);
    outlined release of FromToByAnimation<Float>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)RETimelineDefinitionCreateFromToByFloatAnimation();
    swift_release();
    if (BYTE5(__dst[13]))
    {
      if (!*(void *)(v1 + 16)) {
        goto LABEL_24;
      }
      outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
      FloatFromValue = (_DWORD *)RETimelineDefinitionGetFloatFromValue();
      if (!FloatFromValue)
      {
        outlined release of FromToByAnimation<Float>((uint64_t)__dst);
LABEL_24:
        RETimelineDefinitionSetFloatFromValue();
        if (BYTE13(__dst[13]))
        {
          if (!*(void *)(v1 + 16)) {
            goto LABEL_31;
          }
          outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
          FloatToValue = (_DWORD *)RETimelineDefinitionGetFloatToValue();
          if (!FloatToValue)
          {
            outlined release of FromToByAnimation<Float>((uint64_t)__dst);
LABEL_31:
            RETimelineDefinitionSetFloatToValue();
            if (BYTE5(__dst[14]))
            {
              if (*(void *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
                FloatByValue = (_DWORD *)RETimelineDefinitionGetFloatByValue();
                if (!FloatByValue)
                {
                  outlined release of FromToByAnimation<Float>((uint64_t)__dst);
                  goto LABEL_38;
                }
                LODWORD(v10) = *FloatByValue;
                outlined release of FromToByAnimation<Float>((uint64_t)__dst);
                goto LABEL_36;
              }
            }
            else
            {
              unint64_t v10 = LODWORD(__dst[14]) | ((unint64_t)BYTE4(__dst[14]) << 32);
              if ((v10 & 0x100000000) == 0) {
LABEL_36:
              }
                LODWORD(v25) = v10;
            }
LABEL_38:
            RETimelineDefinitionSetFloatByValue();
            v11._rawValue = v4;
            uint64_t v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (void *)v3;
          }
          LODWORD(v8) = *FloatToValue;
          outlined release of FromToByAnimation<Float>((uint64_t)__dst);
        }
        else
        {
          unint64_t v8 = DWORD2(__dst[13]) | ((unint64_t)BYTE12(__dst[13]) << 32);
          if ((v8 & 0x100000000) != 0) {
            goto LABEL_31;
          }
        }
        LODWORD(v25) = v8;
        goto LABEL_31;
      }
      LODWORD(v6) = *FloatFromValue;
      outlined release of FromToByAnimation<Float>((uint64_t)__dst);
    }
    else
    {
      unint64_t v6 = LODWORD(__dst[13]) | ((unint64_t)BYTE4(__dst[13]) << 32);
      if ((v6 & 0x100000000) != 0) {
        goto LABEL_24;
      }
    }
    LODWORD(v25) = v6;
    goto LABEL_24;
  }
  long long v48 = __dst[6];
  long long v49 = __dst[7];
  long long v50 = __dst[8];
  long long v44 = __dst[2];
  long long v45 = __dst[3];
  long long v46 = __dst[4];
  long long v47 = __dst[5];
  long long v42 = __dst[0];
  long long v43 = __dst[1];
  long long v31 = __dst[6];
  long long v32 = __dst[7];
  long long v33 = __dst[8];
  long long v27 = __dst[2];
  long long v28 = __dst[3];
  long long v29 = __dst[4];
  long long v30 = __dst[5];
  uint64_t v2 = *(void *)&__dst[9];
  long long v25 = __dst[0];
  long long v26 = __dst[1];
  uint64_t v34 = *(void *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter()) {
    return TimelineDefinition.resource.getter();
  }
  long long v31 = v48;
  long long v32 = v49;
  long long v33 = v50;
  long long v27 = v44;
  long long v28 = v45;
  long long v29 = v46;
  long long v30 = v47;
  long long v25 = v42;
  long long v26 = v43;
  uint64_t v34 = v2;
  if (TimelineClipProperties.isModified.getter())
  {
    long long v31 = v48;
    long long v32 = v49;
    long long v33 = v50;
    long long v27 = v44;
    long long v28 = v45;
    long long v29 = v46;
    long long v30 = v47;
    long long v25 = v42;
    long long v26 = v43;
    uint64_t v34 = v2;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    uint64_t v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (void *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t *DoubleFromValue;
  uint64_t v6;
  uint64_t *DoubleToValue;
  uint64_t v8;
  uint64_t *DoubleByValue;
  uint64_t v10;
  Swift::OpaquePointer v11;
  char v13;
  unsigned char v14[2];
  unsigned char v15[8];
  unsigned char v16[5];
  unsigned char v17[2];
  char v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  _OWORD __dst[20];
  unsigned char v30[16];
  unsigned char v31[16];
  unsigned char v32[16];
  unsigned char v33[16];
  long long v34;
  long long v35;
  long long v36;
  uint64_t v37;
  unsigned char v38[24];
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  unsigned char v48[24];
  unsigned char v49[16];
  unsigned char v50[16];
  unsigned char v51[16];
  unsigned char v52[16];
  uint64_t v53;

  uint64_t v53 = *MEMORY[0x263EF8340];
  memcpy(__dst, v0, sizeof(__dst));
  uint64_t v34 = *(_OWORD *)((char *)&__dst[9] + 8);
  uint64_t v35 = *(_OWORD *)((char *)&__dst[10] + 8);
  uint64_t v36 = *(_OWORD *)((char *)&__dst[11] + 8);
  long long v37 = *((void *)&__dst[12] + 1);
  if (*(void *)&__dst[10])
  {
    uint64_t v1 = v37;
    outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v34);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v35, (uint64_t)v38, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v38, (uint64_t)v48, &demangling cache variable for type metadata for BindTarget?);
  if (v48[16] != 255) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v36 + 4, (uint64_t)v15, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)v16, &demangling cache variable for type metadata for Int32?);
  if (v16[4] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v36 + 9, (uint64_t)v14, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v17[1] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v36 + 11, (uint64_t)&v13, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v13, (uint64_t)&v18, &demangling cache variable for type metadata for Bool?);
  if (v18 != 2) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&__dst[16], (uint64_t)v33, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v33, (uint64_t)v49, &demangling cache variable for type metadata for Double?);
  if (v49[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v32, &demangling cache variable for type metadata for Double??), outlined init with take of Transform?((uint64_t)v32, (uint64_t)v50, &demangling cache variable for type metadata for Double??), v50[9] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[14], (uint64_t)v31, &demangling cache variable for type metadata for Double??), outlined init with take of Transform?((uint64_t)v31, (uint64_t)v51, &demangling cache variable for type metadata for Double??), v51[9] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[15],
          (uint64_t)v30,
          &demangling cache variable for type metadata for Double??),
        outlined init with take of Transform?((uint64_t)v30, (uint64_t)v52, &demangling cache variable for type metadata for Double??), (v52[9] & 1) == 0))
  {
LABEL_14:
    uint64_t v1 = v37;
    if (*(void *)(v37 + 16))
    {
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v34);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v34);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v34);
    outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)RETimelineDefinitionCreateFromToByDoubleAnimation();
    swift_release();
    if (BYTE9(__dst[13]))
    {
      if (!*(void *)(v1 + 16)) {
        goto LABEL_25;
      }
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      DoubleFromValue = (uint64_t *)RETimelineDefinitionGetDoubleFromValue();
      if (!DoubleFromValue)
      {
        outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
LABEL_25:
        RETimelineDefinitionSetDoubleFromValue();
        if (BYTE9(__dst[14]))
        {
          if (!*(void *)(v1 + 16)) {
            goto LABEL_33;
          }
          outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
          DoubleToValue = (uint64_t *)RETimelineDefinitionGetDoubleToValue();
          if (!DoubleToValue)
          {
            outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
LABEL_33:
            RETimelineDefinitionSetDoubleToValue();
            if (BYTE9(__dst[15]))
            {
              if (*(void *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                DoubleByValue = (uint64_t *)RETimelineDefinitionGetDoubleByValue();
                if (!DoubleByValue)
                {
                  outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                  goto LABEL_41;
                }
                unint64_t v10 = *DoubleByValue;
                outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                goto LABEL_39;
              }
            }
            else if ((BYTE8(__dst[15]) & 1) == 0)
            {
              unint64_t v10 = *(void *)&__dst[15];
LABEL_39:
              *(void *)&uint64_t v19 = v10;
            }
LABEL_41:
            RETimelineDefinitionSetDoubleByValue();
            v11._rawValue = v4;
            uint64_t v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (void *)v3;
          }
          unint64_t v8 = *DoubleToValue;
          outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
        }
        else
        {
          if (BYTE8(__dst[14])) {
            goto LABEL_33;
          }
          unint64_t v8 = *(void *)&__dst[14];
        }
        *(void *)&uint64_t v19 = v8;
        goto LABEL_33;
      }
      unint64_t v6 = *DoubleFromValue;
      outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    }
    else
    {
      if (BYTE8(__dst[13])) {
        goto LABEL_25;
      }
      unint64_t v6 = *(void *)&__dst[13];
    }
    *(void *)&uint64_t v19 = v6;
    goto LABEL_25;
  }
  long long v45 = __dst[6];
  long long v46 = __dst[7];
  long long v47 = __dst[8];
  char v41 = __dst[2];
  long long v42 = __dst[3];
  long long v43 = __dst[4];
  long long v44 = __dst[5];
  long long v39 = __dst[0];
  uint64_t v40 = __dst[1];
  uint64_t v24 = __dst[5];
  long long v25 = __dst[6];
  long long v26 = __dst[7];
  long long v27 = __dst[8];
  char v21 = __dst[2];
  uint64_t v22 = __dst[3];
  uint64_t v23 = __dst[4];
  uint64_t v2 = *(void *)&__dst[9];
  uint64_t v19 = __dst[0];
  uint64_t v20 = __dst[1];
  long long v28 = *(void *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter()) {
    return TimelineDefinition.resource.getter();
  }
  long long v26 = v46;
  long long v27 = v47;
  char v21 = v41;
  uint64_t v22 = v42;
  uint64_t v24 = v44;
  long long v25 = v45;
  uint64_t v23 = v43;
  uint64_t v19 = v39;
  uint64_t v20 = v40;
  long long v28 = v2;
  if (TimelineClipProperties.isModified.getter())
  {
    long long v26 = v46;
    long long v27 = v47;
    char v21 = v41;
    uint64_t v22 = v42;
    uint64_t v24 = v44;
    long long v25 = v45;
    uint64_t v23 = v43;
    uint64_t v19 = v39;
    uint64_t v20 = v40;
    long long v28 = v2;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    uint64_t v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (void *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t *Float2FromValue;
  uint64_t v6;
  uint64_t *Float2ToValue;
  uint64_t v8;
  uint64_t *Float2ByValue;
  uint64_t v10;
  Swift::OpaquePointer v11;
  char v13;
  unsigned char v14[2];
  unsigned char v15[8];
  unsigned char v16[5];
  unsigned char v17[2];
  char v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  _OWORD __dst[20];
  unsigned char v30[16];
  unsigned char v31[16];
  unsigned char v32[16];
  unsigned char v33[16];
  long long v34;
  long long v35;
  long long v36;
  uint64_t v37;
  unsigned char v38[24];
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  unsigned char v48[24];
  unsigned char v49[16];
  unsigned char v50[16];
  unsigned char v51[16];
  unsigned char v52[16];
  uint64_t v53;

  uint64_t v53 = *MEMORY[0x263EF8340];
  memcpy(__dst, v0, sizeof(__dst));
  uint64_t v34 = *(_OWORD *)((char *)&__dst[9] + 8);
  uint64_t v35 = *(_OWORD *)((char *)&__dst[10] + 8);
  uint64_t v36 = *(_OWORD *)((char *)&__dst[11] + 8);
  long long v37 = *((void *)&__dst[12] + 1);
  if (*(void *)&__dst[10])
  {
    uint64_t v1 = v37;
    outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v34);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v35, (uint64_t)v38, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v38, (uint64_t)v48, &demangling cache variable for type metadata for BindTarget?);
  if (v48[16] != 255) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v36 + 4, (uint64_t)v15, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)v16, &demangling cache variable for type metadata for Int32?);
  if (v16[4] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v36 + 9, (uint64_t)v14, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v17[1] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v36 + 11, (uint64_t)&v13, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v13, (uint64_t)&v18, &demangling cache variable for type metadata for Bool?);
  if (v18 != 2) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&__dst[16], (uint64_t)v33, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v33, (uint64_t)v49, &demangling cache variable for type metadata for Double?);
  if (v49[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v32, &demangling cache variable for type metadata for SIMD2<Float>??), outlined init with take of Transform?((uint64_t)v32, (uint64_t)v50, &demangling cache variable for type metadata for SIMD2<Float>??), v50[9] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[14], (uint64_t)v31, &demangling cache variable for type metadata for SIMD2<Float>??), outlined init with take of Transform?((uint64_t)v31, (uint64_t)v51, &demangling cache variable for type metadata for SIMD2<Float>??), v51[9] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[15],
          (uint64_t)v30,
          &demangling cache variable for type metadata for SIMD2<Float>??),
        outlined init with take of Transform?((uint64_t)v30, (uint64_t)v52, &demangling cache variable for type metadata for SIMD2<Float>??), (v52[9] & 1) == 0))
  {
LABEL_14:
    uint64_t v1 = v37;
    if (*(void *)(v37 + 16))
    {
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v34);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v34);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v34);
    outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)RETimelineDefinitionCreateFromToByFloat2Animation();
    swift_release();
    if (BYTE9(__dst[13]))
    {
      if (!*(void *)(v1 + 16)) {
        goto LABEL_25;
      }
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      Float2FromValue = (uint64_t *)RETimelineDefinitionGetFloat2FromValue();
      if (!Float2FromValue)
      {
        outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
LABEL_25:
        RETimelineDefinitionSetFloat2FromValue();
        if (BYTE9(__dst[14]))
        {
          if (!*(void *)(v1 + 16)) {
            goto LABEL_33;
          }
          outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
          Float2ToValue = (uint64_t *)RETimelineDefinitionGetFloat2ToValue();
          if (!Float2ToValue)
          {
            outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
LABEL_33:
            RETimelineDefinitionSetFloat2ToValue();
            if (BYTE9(__dst[15]))
            {
              if (*(void *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                Float2ByValue = (uint64_t *)RETimelineDefinitionGetFloat2ByValue();
                if (!Float2ByValue)
                {
                  outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                  goto LABEL_41;
                }
                unint64_t v10 = *Float2ByValue;
                outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                goto LABEL_39;
              }
            }
            else if ((BYTE8(__dst[15]) & 1) == 0)
            {
              unint64_t v10 = *(void *)&__dst[15];
LABEL_39:
              *(void *)&uint64_t v19 = v10;
            }
LABEL_41:
            RETimelineDefinitionSetFloat2ByValue();
            v11._rawValue = v4;
            uint64_t v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (void *)v3;
          }
          unint64_t v8 = *Float2ToValue;
          outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
        }
        else
        {
          if (BYTE8(__dst[14])) {
            goto LABEL_33;
          }
          unint64_t v8 = *(void *)&__dst[14];
        }
        *(void *)&uint64_t v19 = v8;
        goto LABEL_33;
      }
      unint64_t v6 = *Float2FromValue;
      outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    }
    else
    {
      if (BYTE8(__dst[13])) {
        goto LABEL_25;
      }
      unint64_t v6 = *(void *)&__dst[13];
    }
    *(void *)&uint64_t v19 = v6;
    goto LABEL_25;
  }
  long long v45 = __dst[6];
  long long v46 = __dst[7];
  long long v47 = __dst[8];
  char v41 = __dst[2];
  long long v42 = __dst[3];
  long long v43 = __dst[4];
  long long v44 = __dst[5];
  long long v39 = __dst[0];
  uint64_t v40 = __dst[1];
  uint64_t v24 = __dst[5];
  long long v25 = __dst[6];
  long long v26 = __dst[7];
  long long v27 = __dst[8];
  char v21 = __dst[2];
  uint64_t v22 = __dst[3];
  uint64_t v23 = __dst[4];
  uint64_t v2 = *(void *)&__dst[9];
  uint64_t v19 = __dst[0];
  uint64_t v20 = __dst[1];
  long long v28 = *(void *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter()) {
    return TimelineDefinition.resource.getter();
  }
  long long v26 = v46;
  long long v27 = v47;
  char v21 = v41;
  uint64_t v22 = v42;
  uint64_t v24 = v44;
  long long v25 = v45;
  uint64_t v23 = v43;
  uint64_t v19 = v39;
  uint64_t v20 = v40;
  long long v28 = v2;
  if (TimelineClipProperties.isModified.getter())
  {
    long long v26 = v46;
    long long v27 = v47;
    char v21 = v41;
    uint64_t v22 = v42;
    uint64_t v24 = v44;
    long long v25 = v45;
    uint64_t v23 = v43;
    uint64_t v19 = v39;
    uint64_t v20 = v40;
    long long v28 = v2;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    uint64_t v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (void *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  long long *Float3FromValue;
  long long v6;
  long long *Float3ToValue;
  long long v8;
  long long *Float3ByValue;
  long long v10;
  Swift::OpaquePointer v11;
  long long v13;
  long long v14;
  long long v15;
  char v16;
  unsigned char v17[2];
  unsigned char v18[8];
  unsigned char v19[5];
  unsigned char v20[2];
  char v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  _OWORD __dst[23];
  unsigned char v33[32];
  unsigned char v34[32];
  unsigned char v35[32];
  unsigned char v36[16];
  long long v37;
  long long v38;
  long long v39;
  uint64_t v40;
  unsigned char v41[24];
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  unsigned char v51[24];
  unsigned char v52[16];
  unsigned char v53[32];
  unsigned char v54[32];
  unsigned char v55[24];
  uint64_t v56;

  long long v56 = *MEMORY[0x263EF8340];
  memcpy(__dst, v0, sizeof(__dst));
  long long v37 = *(_OWORD *)((char *)&__dst[9] + 8);
  long long v38 = *(_OWORD *)((char *)&__dst[10] + 8);
  long long v39 = *(_OWORD *)((char *)&__dst[11] + 8);
  uint64_t v40 = *((void *)&__dst[12] + 1);
  if (*(void *)&__dst[10])
  {
    uint64_t v1 = v40;
    outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v38, (uint64_t)v41, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v41, (uint64_t)v51, &demangling cache variable for type metadata for BindTarget?);
  if (v51[16] != 255) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 4, (uint64_t)v18, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v18, (uint64_t)v19, &demangling cache variable for type metadata for Int32?);
  if (v19[4] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 9, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v17, (uint64_t)v20, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v20[1] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 11, (uint64_t)&v16, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v16, (uint64_t)&v21, &demangling cache variable for type metadata for Bool?);
  if (v21 != 2) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&__dst[18] + 8, (uint64_t)v36, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)v52, &demangling cache variable for type metadata for Double?);
  if (v52[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v35, &demangling cache variable for type metadata for SIMD3<Float>??), outlined init with take of Transform?((uint64_t)v35, (uint64_t)v53, &demangling cache variable for type metadata for SIMD3<Float>??), v53[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[15], (uint64_t)v34, &demangling cache variable for type metadata for SIMD3<Float>??), outlined init with take of Transform?((uint64_t)v34, (uint64_t)v54, &demangling cache variable for type metadata for SIMD3<Float>??), v54[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[17],
          (uint64_t)v33,
          &demangling cache variable for type metadata for SIMD3<Float>??),
        outlined init with take of Transform?((uint64_t)v33, (uint64_t)v55, &demangling cache variable for type metadata for SIMD3<Float>??), (v55[17] & 1) == 0))
  {
LABEL_14:
    uint64_t v1 = v40;
    if (*(void *)(v40 + 16))
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v37);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)RETimelineDefinitionCreateFromToByFloat3Animation();
    swift_release();
    if (BYTE1(__dst[14]))
    {
      if (!*(void *)(v1 + 16)) {
        goto LABEL_25;
      }
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      Float3FromValue = (long long *)RETimelineDefinitionGetFloat3FromValue();
      if (!Float3FromValue)
      {
        outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_25:
        RETimelineDefinitionSetFloat3FromValue();
        if (BYTE1(__dst[16]))
        {
          if (!*(void *)(v1 + 16)) {
            goto LABEL_33;
          }
          outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          Float3ToValue = (long long *)RETimelineDefinitionGetFloat3ToValue();
          if (!Float3ToValue)
          {
            outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_33:
            RETimelineDefinitionSetFloat3ToValue();
            if (BYTE1(__dst[18]))
            {
              if (*(void *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                Float3ByValue = (long long *)RETimelineDefinitionGetFloat3ByValue();
                if (!Float3ByValue)
                {
                  outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                  goto LABEL_41;
                }
                long long v15 = *Float3ByValue;
                outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                unint64_t v10 = v15;
                goto LABEL_39;
              }
            }
            else if ((__dst[18] & 1) == 0)
            {
              unint64_t v10 = __dst[17];
LABEL_39:
              uint64_t v22 = v10;
            }
LABEL_41:
            RETimelineDefinitionSetFloat3ByValue();
            v11._rawValue = v4;
            uint64_t v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (void *)v3;
          }
          uint64_t v14 = *Float3ToValue;
          outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          unint64_t v8 = v14;
        }
        else
        {
          if (__dst[16]) {
            goto LABEL_33;
          }
          unint64_t v8 = __dst[15];
        }
        uint64_t v22 = v8;
        goto LABEL_33;
      }
      uint64_t v13 = *Float3FromValue;
      outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      unint64_t v6 = v13;
    }
    else
    {
      if (__dst[14]) {
        goto LABEL_25;
      }
      unint64_t v6 = __dst[13];
    }
    uint64_t v22 = v6;
    goto LABEL_25;
  }
  long long v48 = __dst[6];
  long long v49 = __dst[7];
  long long v50 = __dst[8];
  long long v44 = __dst[2];
  long long v45 = __dst[3];
  long long v46 = __dst[4];
  long long v47 = __dst[5];
  long long v42 = __dst[0];
  long long v43 = __dst[1];
  long long v27 = __dst[5];
  long long v28 = __dst[6];
  long long v29 = __dst[7];
  long long v30 = __dst[8];
  uint64_t v24 = __dst[2];
  long long v25 = __dst[3];
  long long v26 = __dst[4];
  uint64_t v2 = *(void *)&__dst[9];
  uint64_t v22 = __dst[0];
  uint64_t v23 = __dst[1];
  long long v31 = *(void *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter()) {
    return TimelineDefinition.resource.getter();
  }
  long long v29 = v49;
  long long v30 = v50;
  uint64_t v24 = v44;
  long long v25 = v45;
  long long v27 = v47;
  long long v28 = v48;
  long long v26 = v46;
  uint64_t v22 = v42;
  uint64_t v23 = v43;
  long long v31 = v2;
  if (TimelineClipProperties.isModified.getter())
  {
    long long v29 = v49;
    long long v30 = v50;
    uint64_t v24 = v44;
    long long v25 = v45;
    long long v27 = v47;
    long long v28 = v48;
    long long v26 = v46;
    uint64_t v22 = v42;
    uint64_t v23 = v43;
    long long v31 = v2;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    uint64_t v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (void *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  long long *Float4FromValue;
  long long v6;
  long long *Float4ToValue;
  long long v8;
  long long *Float4ByValue;
  long long v10;
  Swift::OpaquePointer v11;
  long long v13;
  long long v14;
  long long v15;
  char v16;
  unsigned char v17[2];
  unsigned char v18[8];
  unsigned char v19[5];
  unsigned char v20[2];
  char v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  _OWORD __dst[23];
  unsigned char v33[32];
  unsigned char v34[32];
  unsigned char v35[32];
  unsigned char v36[16];
  long long v37;
  long long v38;
  long long v39;
  uint64_t v40;
  unsigned char v41[24];
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  unsigned char v51[24];
  unsigned char v52[16];
  unsigned char v53[32];
  unsigned char v54[32];
  unsigned char v55[24];
  uint64_t v56;

  long long v56 = *MEMORY[0x263EF8340];
  memcpy(__dst, v0, sizeof(__dst));
  long long v37 = *(_OWORD *)((char *)&__dst[9] + 8);
  long long v38 = *(_OWORD *)((char *)&__dst[10] + 8);
  long long v39 = *(_OWORD *)((char *)&__dst[11] + 8);
  uint64_t v40 = *((void *)&__dst[12] + 1);
  if (*(void *)&__dst[10])
  {
    uint64_t v1 = v40;
    outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v38, (uint64_t)v41, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v41, (uint64_t)v51, &demangling cache variable for type metadata for BindTarget?);
  if (v51[16] != 255) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 4, (uint64_t)v18, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v18, (uint64_t)v19, &demangling cache variable for type metadata for Int32?);
  if (v19[4] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 9, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v17, (uint64_t)v20, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v20[1] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 11, (uint64_t)&v16, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v16, (uint64_t)&v21, &demangling cache variable for type metadata for Bool?);
  if (v21 != 2) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&__dst[18] + 8, (uint64_t)v36, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)v52, &demangling cache variable for type metadata for Double?);
  if (v52[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v35, &demangling cache variable for type metadata for SIMD4<Float>??), outlined init with take of Transform?((uint64_t)v35, (uint64_t)v53, &demangling cache variable for type metadata for SIMD4<Float>??), v53[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[15], (uint64_t)v34, &demangling cache variable for type metadata for SIMD4<Float>??), outlined init with take of Transform?((uint64_t)v34, (uint64_t)v54, &demangling cache variable for type metadata for SIMD4<Float>??), v54[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[17],
          (uint64_t)v33,
          &demangling cache variable for type metadata for SIMD4<Float>??),
        outlined init with take of Transform?((uint64_t)v33, (uint64_t)v55, &demangling cache variable for type metadata for SIMD4<Float>??), (v55[17] & 1) == 0))
  {
LABEL_14:
    uint64_t v1 = v40;
    if (*(void *)(v40 + 16))
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v37);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)RETimelineDefinitionCreateFromToByFloat4Animation();
    swift_release();
    if (BYTE1(__dst[14]))
    {
      if (!*(void *)(v1 + 16)) {
        goto LABEL_25;
      }
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      Float4FromValue = (long long *)RETimelineDefinitionGetFloat4FromValue();
      if (!Float4FromValue)
      {
        outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_25:
        RETimelineDefinitionSetFloat4FromValue();
        if (BYTE1(__dst[16]))
        {
          if (!*(void *)(v1 + 16)) {
            goto LABEL_33;
          }
          outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          Float4ToValue = (long long *)RETimelineDefinitionGetFloat4ToValue();
          if (!Float4ToValue)
          {
            outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_33:
            RETimelineDefinitionSetFloat4ToValue();
            if (BYTE1(__dst[18]))
            {
              if (*(void *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                Float4ByValue = (long long *)RETimelineDefinitionGetFloat4ByValue();
                if (!Float4ByValue)
                {
                  outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                  goto LABEL_41;
                }
                long long v15 = *Float4ByValue;
                outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                unint64_t v10 = v15;
                goto LABEL_39;
              }
            }
            else if ((__dst[18] & 1) == 0)
            {
              unint64_t v10 = __dst[17];
LABEL_39:
              uint64_t v22 = v10;
            }
LABEL_41:
            RETimelineDefinitionSetFloat4ByValue();
            v11._rawValue = v4;
            uint64_t v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (void *)v3;
          }
          uint64_t v14 = *Float4ToValue;
          outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          unint64_t v8 = v14;
        }
        else
        {
          if (__dst[16]) {
            goto LABEL_33;
          }
          unint64_t v8 = __dst[15];
        }
        uint64_t v22 = v8;
        goto LABEL_33;
      }
      uint64_t v13 = *Float4FromValue;
      outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      unint64_t v6 = v13;
    }
    else
    {
      if (__dst[14]) {
        goto LABEL_25;
      }
      unint64_t v6 = __dst[13];
    }
    uint64_t v22 = v6;
    goto LABEL_25;
  }
  long long v48 = __dst[6];
  long long v49 = __dst[7];
  long long v50 = __dst[8];
  long long v44 = __dst[2];
  long long v45 = __dst[3];
  long long v46 = __dst[4];
  long long v47 = __dst[5];
  long long v42 = __dst[0];
  long long v43 = __dst[1];
  long long v27 = __dst[5];
  long long v28 = __dst[6];
  long long v29 = __dst[7];
  long long v30 = __dst[8];
  uint64_t v24 = __dst[2];
  long long v25 = __dst[3];
  long long v26 = __dst[4];
  uint64_t v2 = *(void *)&__dst[9];
  uint64_t v22 = __dst[0];
  uint64_t v23 = __dst[1];
  long long v31 = *(void *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter()) {
    return TimelineDefinition.resource.getter();
  }
  long long v29 = v49;
  long long v30 = v50;
  uint64_t v24 = v44;
  long long v25 = v45;
  long long v27 = v47;
  long long v28 = v48;
  long long v26 = v46;
  uint64_t v22 = v42;
  uint64_t v23 = v43;
  long long v31 = v2;
  if (TimelineClipProperties.isModified.getter())
  {
    long long v29 = v49;
    long long v30 = v50;
    uint64_t v24 = v44;
    long long v25 = v45;
    long long v27 = v47;
    long long v28 = v48;
    long long v26 = v46;
    uint64_t v22 = v42;
    uint64_t v23 = v43;
    long long v31 = v2;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    uint64_t v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (void *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  long long *QuaternionFromValue;
  long long v6;
  long long *QuaternionToValue;
  long long v8;
  long long *QuaternionByValue;
  long long v10;
  Swift::OpaquePointer v11;
  long long v13;
  long long v14;
  long long v15;
  char v16;
  unsigned char v17[2];
  unsigned char v18[8];
  unsigned char v19[5];
  unsigned char v20[2];
  char v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  _OWORD __dst[23];
  unsigned char v33[32];
  unsigned char v34[32];
  unsigned char v35[32];
  unsigned char v36[16];
  long long v37;
  long long v38;
  long long v39;
  uint64_t v40;
  unsigned char v41[24];
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  unsigned char v51[24];
  unsigned char v52[16];
  unsigned char v53[32];
  unsigned char v54[32];
  unsigned char v55[24];
  uint64_t v56;

  long long v56 = *MEMORY[0x263EF8340];
  memcpy(__dst, v0, sizeof(__dst));
  long long v37 = *(_OWORD *)((char *)&__dst[9] + 8);
  long long v38 = *(_OWORD *)((char *)&__dst[10] + 8);
  long long v39 = *(_OWORD *)((char *)&__dst[11] + 8);
  uint64_t v40 = *((void *)&__dst[12] + 1);
  if (*(void *)&__dst[10])
  {
    uint64_t v1 = v40;
    outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v38, (uint64_t)v41, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v41, (uint64_t)v51, &demangling cache variable for type metadata for BindTarget?);
  if (v51[16] != 255) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 4, (uint64_t)v18, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v18, (uint64_t)v19, &demangling cache variable for type metadata for Int32?);
  if (v19[4] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 9, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v17, (uint64_t)v20, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v20[1] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v39 + 11, (uint64_t)&v16, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v16, (uint64_t)&v21, &demangling cache variable for type metadata for Bool?);
  if (v21 != 2) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&__dst[18] + 8, (uint64_t)v36, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)v52, &demangling cache variable for type metadata for Double?);
  if (v52[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v35, &demangling cache variable for type metadata for simd_quatf??), outlined init with take of Transform?((uint64_t)v35, (uint64_t)v53, &demangling cache variable for type metadata for simd_quatf??), v53[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[15], (uint64_t)v34, &demangling cache variable for type metadata for simd_quatf??), outlined init with take of Transform?((uint64_t)v34, (uint64_t)v54, &demangling cache variable for type metadata for simd_quatf??), v54[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[17],
          (uint64_t)v33,
          &demangling cache variable for type metadata for simd_quatf??),
        outlined init with take of Transform?((uint64_t)v33, (uint64_t)v55, &demangling cache variable for type metadata for simd_quatf??), (v55[17] & 1) == 0))
  {
LABEL_14:
    uint64_t v1 = v40;
    if (*(void *)(v40 + 16))
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v37);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)RETimelineDefinitionCreateFromToByQuaternionAnimation();
    swift_release();
    if (BYTE1(__dst[14]))
    {
      if (!*(void *)(v1 + 16)) {
        goto LABEL_25;
      }
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      QuaternionFromValue = (long long *)RETimelineDefinitionGetQuaternionFromValue();
      if (!QuaternionFromValue)
      {
        outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_25:
        RETimelineDefinitionSetQuaternionFromValue();
        if (BYTE1(__dst[16]))
        {
          if (!*(void *)(v1 + 16)) {
            goto LABEL_33;
          }
          outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          QuaternionToValue = (long long *)RETimelineDefinitionGetQuaternionToValue();
          if (!QuaternionToValue)
          {
            outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_33:
            RETimelineDefinitionSetQuaternionToValue();
            if (BYTE1(__dst[18]))
            {
              if (*(void *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                QuaternionByValue = (long long *)RETimelineDefinitionGetQuaternionByValue();
                if (!QuaternionByValue)
                {
                  outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                  goto LABEL_41;
                }
                long long v15 = *QuaternionByValue;
                outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                unint64_t v10 = v15;
                goto LABEL_39;
              }
            }
            else if ((__dst[18] & 1) == 0)
            {
              unint64_t v10 = __dst[17];
LABEL_39:
              uint64_t v22 = v10;
            }
LABEL_41:
            RETimelineDefinitionSetQuaternionByValue();
            v11._rawValue = v4;
            uint64_t v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (void *)v3;
          }
          uint64_t v14 = *QuaternionToValue;
          outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          unint64_t v8 = v14;
        }
        else
        {
          if (__dst[16]) {
            goto LABEL_33;
          }
          unint64_t v8 = __dst[15];
        }
        uint64_t v22 = v8;
        goto LABEL_33;
      }
      uint64_t v13 = *QuaternionFromValue;
      outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      unint64_t v6 = v13;
    }
    else
    {
      if (__dst[14]) {
        goto LABEL_25;
      }
      unint64_t v6 = __dst[13];
    }
    uint64_t v22 = v6;
    goto LABEL_25;
  }
  long long v48 = __dst[6];
  long long v49 = __dst[7];
  long long v50 = __dst[8];
  long long v44 = __dst[2];
  long long v45 = __dst[3];
  long long v46 = __dst[4];
  long long v47 = __dst[5];
  long long v42 = __dst[0];
  long long v43 = __dst[1];
  long long v27 = __dst[5];
  long long v28 = __dst[6];
  long long v29 = __dst[7];
  long long v30 = __dst[8];
  uint64_t v24 = __dst[2];
  long long v25 = __dst[3];
  long long v26 = __dst[4];
  uint64_t v2 = *(void *)&__dst[9];
  uint64_t v22 = __dst[0];
  uint64_t v23 = __dst[1];
  long long v31 = *(void *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter()) {
    return TimelineDefinition.resource.getter();
  }
  long long v29 = v49;
  long long v30 = v50;
  uint64_t v24 = v44;
  long long v25 = v45;
  long long v27 = v47;
  long long v28 = v48;
  long long v26 = v46;
  uint64_t v22 = v42;
  uint64_t v23 = v43;
  long long v31 = v2;
  if (TimelineClipProperties.isModified.getter())
  {
    long long v29 = v49;
    long long v30 = v50;
    uint64_t v24 = v44;
    long long v25 = v45;
    long long v27 = v47;
    long long v28 = v48;
    long long v26 = v46;
    uint64_t v22 = v42;
    uint64_t v23 = v43;
    long long v31 = v2;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    uint64_t v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (void *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  long long *SRTFromValue;
  long long v6;
  long long v7;
  long long v8;
  long long *SRTToValue;
  long long v10;
  long long v11;
  long long v12;
  long long *SRTByValue;
  long long v14;
  long long v15;
  long long v16;
  Swift::OpaquePointer v17;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  char v28;
  unsigned char v29[2];
  unsigned char v30[8];
  unsigned char v31[5];
  unsigned char v32[2];
  char v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  uint64_t v43;
  _OWORD __dst[29];
  unsigned char v45[64];
  unsigned char v46[64];
  unsigned char v47[64];
  unsigned char v48[16];
  long long v49;
  long long v50;
  long long v51;
  uint64_t v52;
  unsigned char v53[24];
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  unsigned char v63[24];
  unsigned char v64[16];
  unsigned char v65[64];
  unsigned char v66[64];
  unsigned char v67[56];
  uint64_t v68;

  long long v68 = *MEMORY[0x263EF8340];
  memcpy(__dst, v0, sizeof(__dst));
  long long v49 = *(_OWORD *)((char *)&__dst[9] + 8);
  long long v50 = *(_OWORD *)((char *)&__dst[10] + 8);
  uint64_t v51 = *(_OWORD *)((char *)&__dst[11] + 8);
  char v52 = *((void *)&__dst[12] + 1);
  if (*(void *)&__dst[10])
  {
    uint64_t v1 = v52;
    outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v49);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v50, (uint64_t)v53, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v53, (uint64_t)v63, &demangling cache variable for type metadata for BindTarget?);
  if (v63[16] != 255) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v51 + 4, (uint64_t)v30, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v30, (uint64_t)v31, &demangling cache variable for type metadata for Int32?);
  if (v31[4] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v51 + 9, (uint64_t)v29, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v29, (uint64_t)v32, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v32[1] != 1) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&v51 + 11, (uint64_t)&v28, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v28, (uint64_t)&v33, &demangling cache variable for type metadata for Bool?);
  if (v33 != 2) {
    goto LABEL_14;
  }
  outlined init with take of Transform?((uint64_t)&__dst[24] + 8, (uint64_t)v48, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v48, (uint64_t)v64, &demangling cache variable for type metadata for Double?);
  if (v64[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v47, &demangling cache variable for type metadata for Transform??), outlined init with take of Transform?((uint64_t)v47, (uint64_t)v65, &demangling cache variable for type metadata for Transform??), v65[49] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[17], (uint64_t)v46, &demangling cache variable for type metadata for Transform??), outlined init with take of Transform?((uint64_t)v46, (uint64_t)v66, &demangling cache variable for type metadata for Transform??), v66[49] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[21],
          (uint64_t)v45,
          &demangling cache variable for type metadata for Transform??),
        outlined init with take of Transform?((uint64_t)v45, (uint64_t)v67, &demangling cache variable for type metadata for Transform??), (v67[49] & 1) == 0))
  {
LABEL_14:
    uint64_t v1 = v52;
    if (*(void *)(v52 + 16))
    {
      outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v49);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v49);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v49);
    outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)RETimelineDefinitionCreateFromToBySRTAnimation();
    swift_release();
    if (BYTE1(__dst[16]))
    {
      if (!*(void *)(v1 + 16)) {
        goto LABEL_27;
      }
      outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
      SRTFromValue = (long long *)RETimelineDefinitionGetSRTFromValue();
      if (!SRTFromValue)
      {
        outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
LABEL_27:
        RETimelineDefinitionSetSRTFromValue();
        if (BYTE1(__dst[20]))
        {
          if (!*(void *)(v1 + 16)) {
            goto LABEL_37;
          }
          outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
          SRTToValue = (long long *)RETimelineDefinitionGetSRTToValue();
          if (!SRTToValue)
          {
            outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
LABEL_37:
            RETimelineDefinitionSetSRTToValue();
            if (BYTE1(__dst[24]))
            {
              if (*(void *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
                SRTByValue = (long long *)RETimelineDefinitionGetSRTByValue();
                if (!SRTByValue)
                {
                  outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
                  goto LABEL_47;
                }
                uint64_t v24 = SRTByValue[1];
                long long v27 = *SRTByValue;
                char v21 = SRTByValue[2];
                if (one-time initialization token for identity != -1) {
                  swift_once();
                }
                outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
                long long v15 = v24;
                uint64_t v14 = v27;
                char v16 = v21;
                goto LABEL_45;
              }
            }
            else if ((__dst[24] & 1) == 0)
            {
              uint64_t v14 = __dst[21];
              long long v15 = __dst[22];
              char v16 = __dst[23];
LABEL_45:
              uint64_t v34 = v14;
              uint64_t v35 = v15;
              uint64_t v36 = v16;
            }
LABEL_47:
            RETimelineDefinitionSetSRTByValue();
            v17._rawValue = v4;
            uint64_t v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v17);
            RERelease();
            return (void *)v3;
          }
          uint64_t v23 = SRTToValue[1];
          long long v26 = *SRTToValue;
          uint64_t v20 = SRTToValue[2];
          if (one-time initialization token for identity != -1) {
            swift_once();
          }
          outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
          Swift::OpaquePointer v11 = v23;
          unint64_t v10 = v26;
          long long v12 = v20;
        }
        else
        {
          if (__dst[20]) {
            goto LABEL_37;
          }
          unint64_t v10 = __dst[17];
          Swift::OpaquePointer v11 = __dst[18];
          long long v12 = __dst[19];
        }
        uint64_t v34 = v10;
        uint64_t v35 = v11;
        uint64_t v36 = v12;
        goto LABEL_37;
      }
      uint64_t v22 = SRTFromValue[1];
      long long v25 = *SRTFromValue;
      uint64_t v19 = SRTFromValue[2];
      if (one-time initialization token for identity != -1) {
        swift_once();
      }
      outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
      uint64_t v7 = v22;
      unint64_t v6 = v25;
      unint64_t v8 = v19;
    }
    else
    {
      if (__dst[16]) {
        goto LABEL_27;
      }
      unint64_t v6 = __dst[13];
      uint64_t v7 = __dst[14];
      unint64_t v8 = __dst[15];
    }
    uint64_t v34 = v6;
    uint64_t v35 = v7;
    uint64_t v36 = v8;
    goto LABEL_27;
  }
  char v60 = __dst[6];
  char v61 = __dst[7];
  char v62 = __dst[8];
  long long v56 = __dst[2];
  long long v57 = __dst[3];
  char v58 = __dst[4];
  int v59 = __dst[5];
  char v54 = __dst[0];
  char v55 = __dst[1];
  long long v39 = __dst[5];
  uint64_t v40 = __dst[6];
  char v41 = __dst[7];
  long long v42 = __dst[8];
  uint64_t v36 = __dst[2];
  long long v37 = __dst[3];
  long long v38 = __dst[4];
  uint64_t v2 = *(void *)&__dst[9];
  uint64_t v34 = __dst[0];
  uint64_t v35 = __dst[1];
  long long v43 = *(void *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter()) {
    return TimelineDefinition.resource.getter();
  }
  char v41 = v61;
  long long v42 = v62;
  uint64_t v36 = v56;
  long long v37 = v57;
  long long v39 = v59;
  uint64_t v40 = v60;
  long long v38 = v58;
  uint64_t v34 = v54;
  uint64_t v35 = v55;
  long long v43 = v2;
  if (TimelineClipProperties.isModified.getter())
  {
    char v41 = v61;
    long long v42 = v62;
    uint64_t v36 = v56;
    long long v37 = v57;
    long long v39 = v59;
    uint64_t v40 = v60;
    long long v38 = v58;
    uint64_t v34 = v54;
    uint64_t v35 = v55;
    long long v43 = v2;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    uint64_t v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (void *)v3;
}

{
  const void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t SkeletalPoseFromJointCount;
  uint64_t v5;
  char *SkeletalPoseFromValue;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t SkeletalPoseToJointCount;
  uint64_t v13;
  char *SkeletalPoseToValue;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t SkeletalPoseByJointCount;
  uint64_t v21;
  char *SkeletalPoseByValue;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  Swift::OpaquePointer v27;
  uint64_t v28;
  uint64_t v30;
  _OWORD v31[19];
  _OWORD __dst[19];
  unsigned char v33[8];
  unsigned char v34[8];
  unsigned char v35[8];
  unsigned char v36[8];
  unsigned char v37[16];
  long long v38;
  long long v39;
  long long v40;
  uint64_t v41;
  char v42;
  unsigned char v43[2];
  unsigned char v44[8];
  unsigned char v45[24];
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  unsigned char v55[24];
  unsigned char v56[5];
  unsigned char v57[2];
  char v58;
  unsigned char v59[16];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  memcpy(__dst, v0, sizeof(__dst));
  long long v38 = *(_OWORD *)((char *)&__dst[9] + 8);
  long long v39 = *(_OWORD *)((char *)&__dst[10] + 8);
  uint64_t v40 = *(_OWORD *)((char *)&__dst[11] + 8);
  char v41 = *((void *)&__dst[12] + 1);
  if (*(void *)&__dst[10])
  {
    uint64_t v1 = v41;
    outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
    outlined retain of TimelineBaseProperties((uint64_t)&v38);
LABEL_15:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v38);
    outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v2 = (void *)RETimelineDefinitionCreateFromToBySkeletalPoseAnimation();
    swift_release();
    uint64_t v3 = *(void *)&__dst[13];
    if (*(void *)&__dst[13])
    {
      if (*(void *)&__dst[13] != 1) {
        goto LABEL_21;
      }
      if (*(void *)(v1 + 16))
      {
        outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
        SkeletalPoseFromJointCount = RETimelineDefinitionGetSkeletalPoseFromJointCount();
        if (SkeletalPoseFromJointCount)
        {
          uint64_t v5 = SkeletalPoseFromJointCount;
          SkeletalPoseFromValue = (char *)RETimelineDefinitionGetSkeletalPoseFromValue();
          if (SkeletalPoseFromValue)
          {
            specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseFromValue, v5);
            outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
LABEL_21:
            outlined copy of JointTransforms??(v3);
            RETimelineDefinitionSetSkeletalPoseFromValue();
            swift_bridgeObjectRelease();
            memcpy(v31, __dst, sizeof(v31));
            uint64_t v7 = FromToByAnimation<>.jointNames.getter();
            unint64_t v8 = v7[2];
            if (v8)
            {
              uint64_t v9 = 0;
              unint64_t v10 = v7 + 5;
              do
              {
                String.utf8CString.getter();
                RETimelineDefinitionSetSkeletalPoseFromJointName();
                swift_release();
                v10 += 2;
                ++v9;
              }
              while (v8 != v9);
            }
            swift_bridgeObjectRelease();
            Swift::OpaquePointer v11 = *((void *)&__dst[13] + 1);
            if (!*((void *)&__dst[13] + 1))
            {
LABEL_39:
              RETimelineDefinitionSetSkeletalPoseToValue();
              uint64_t v19 = *(void *)&__dst[14];
              if (!*(void *)&__dst[14]) {
                goto LABEL_50;
              }
              goto LABEL_40;
            }
LABEL_28:
            if (v11 == 1)
            {
              if (!*(void *)(v1 + 16)) {
                goto LABEL_39;
              }
              outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
              SkeletalPoseToJointCount = RETimelineDefinitionGetSkeletalPoseToJointCount();
              if (!SkeletalPoseToJointCount
                || (uint64_t v13 = SkeletalPoseToJointCount,
                    (SkeletalPoseToValue = (char *)RETimelineDefinitionGetSkeletalPoseToValue()) == 0))
              {
                outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
                goto LABEL_39;
              }
              specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseToValue, v13);
              outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
            }
            outlined copy of JointTransforms??(v11);
            RETimelineDefinitionSetSkeletalPoseToValue();
            swift_bridgeObjectRelease();
            memcpy(v31, __dst, sizeof(v31));
            long long v15 = FromToByAnimation<>.jointNames.getter();
            char v16 = v15[2];
            if (v16)
            {
              uint64_t v17 = 0;
              __n128 v18 = v15 + 5;
              do
              {
                String.utf8CString.getter();
                RETimelineDefinitionSetSkeletalPoseToJointName();
                swift_release();
                v18 += 2;
                ++v17;
              }
              while (v16 != v17);
            }
            swift_bridgeObjectRelease();
            uint64_t v19 = *(void *)&__dst[14];
            if (!*(void *)&__dst[14]) {
              goto LABEL_50;
            }
LABEL_40:
            if (v19 != 1)
            {
LABEL_45:
              outlined copy of JointTransforms??(v19);
              RETimelineDefinitionSetSkeletalPoseByValue();
              swift_bridgeObjectRelease();
              memcpy(v31, __dst, sizeof(v31));
              uint64_t v23 = FromToByAnimation<>.jointNames.getter();
              uint64_t v24 = v23[2];
              if (v24)
              {
                long long v25 = 0;
                long long v26 = v23 + 5;
                do
                {
                  String.utf8CString.getter();
                  RETimelineDefinitionSetSkeletalPoseByJointName();
                  swift_release();
                  v26 += 2;
                  ++v25;
                }
                while (v24 != v25);
              }
              swift_bridgeObjectRelease();
              goto LABEL_51;
            }
            if (*(void *)(v1 + 16))
            {
              outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
              SkeletalPoseByJointCount = RETimelineDefinitionGetSkeletalPoseByJointCount();
              if (SkeletalPoseByJointCount)
              {
                char v21 = SkeletalPoseByJointCount;
                SkeletalPoseByValue = (char *)RETimelineDefinitionGetSkeletalPoseByValue();
                if (SkeletalPoseByValue)
                {
                  specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseByValue, v21);
                  outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
                  goto LABEL_45;
                }
              }
              outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
            }
LABEL_50:
            RETimelineDefinitionSetSkeletalPoseByValue();
LABEL_51:
            v27._rawValue = v2;
            long long v28 = specialized FromToByAnimation.createResource(timelineDefinition:)(v27);
            RERelease();
            return (void *)v28;
          }
        }
        outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
      }
    }
    RETimelineDefinitionSetSkeletalPoseFromValue();
    Swift::OpaquePointer v11 = *((void *)&__dst[13] + 1);
    if (!*((void *)&__dst[13] + 1)) {
      goto LABEL_39;
    }
    goto LABEL_28;
  }
  outlined init with take of Transform?((uint64_t)&v39, (uint64_t)v45, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v45, (uint64_t)v55, &demangling cache variable for type metadata for BindTarget?);
  if (v55[16] != 255) {
    goto LABEL_12;
  }
  outlined init with take of Transform?((uint64_t)&v40 + 4, (uint64_t)v44, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v44, (uint64_t)v56, &demangling cache variable for type metadata for Int32?);
  if (v56[4] != 1) {
    goto LABEL_12;
  }
  outlined init with take of Transform?((uint64_t)&v40 + 9, (uint64_t)v43, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v43, (uint64_t)v57, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v57[1] != 1) {
    goto LABEL_12;
  }
  outlined init with take of Transform?((uint64_t)&v40 + 11, (uint64_t)&v42, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v42, (uint64_t)&v58, &demangling cache variable for type metadata for Bool?);
  if (v58 != 2) {
    goto LABEL_12;
  }
  outlined init with take of Transform?((uint64_t)&__dst[14] + 8, (uint64_t)v37, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v37, (uint64_t)v59, &demangling cache variable for type metadata for Double?);
  if (v59[8] != 1) {
    goto LABEL_12;
  }
  outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v36, &demangling cache variable for type metadata for JointTransforms??);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)&v60, &demangling cache variable for type metadata for JointTransforms??);
  if (v60 != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13] + 8, (uint64_t)v35, &demangling cache variable for type metadata for JointTransforms??), outlined init with take of Transform?((uint64_t)v35, (uint64_t)&v61, &demangling cache variable for type metadata for JointTransforms??), v61 != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[14], (uint64_t)v34, &demangling cache variable for type metadata for JointTransforms??), outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v62, &demangling cache variable for type metadata for JointTransforms??), v62 != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[17] + 8,
          (uint64_t)v33,
          &demangling cache variable for type metadata for [String]?),
        outlined init with take of Transform?((uint64_t)v33, (uint64_t)&v63, &demangling cache variable for type metadata for [String]?), v63))
  {
LABEL_12:
    uint64_t v1 = v41;
    if (*(void *)(v41 + 16))
    {
      outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
      outlined retain of TimelineBaseProperties((uint64_t)&v38);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
      outlined retain of TimelineBaseProperties((uint64_t)&v38);
    }
    goto LABEL_15;
  }
  char v52 = __dst[6];
  uint64_t v53 = __dst[7];
  char v54 = __dst[8];
  long long v48 = __dst[2];
  long long v49 = __dst[3];
  long long v50 = __dst[4];
  uint64_t v51 = __dst[5];
  long long v46 = __dst[0];
  long long v47 = __dst[1];
  v31[6] = __dst[6];
  v31[7] = __dst[7];
  v31[8] = __dst[8];
  v31[2] = __dst[2];
  v31[3] = __dst[3];
  v31[4] = __dst[4];
  v31[5] = __dst[5];
  long long v30 = *(void *)&__dst[9];
  v31[0] = __dst[0];
  v31[1] = __dst[1];
  *(void *)&v31[9] = *(void *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter()) {
    return TimelineDefinition.resource.getter();
  }
  v31[6] = v52;
  v31[7] = v53;
  v31[8] = v54;
  v31[2] = v48;
  v31[3] = v49;
  v31[4] = v50;
  v31[5] = v51;
  v31[0] = v46;
  v31[1] = v47;
  *(void *)&v31[9] = v30;
  if (TimelineClipProperties.isModified.getter())
  {
    v31[6] = v52;
    v31[7] = v53;
    v31[8] = v54;
    v31[2] = v48;
    v31[3] = v49;
    v31[4] = v50;
    v31[5] = v51;
    v31[0] = v46;
    v31[1] = v47;
    *(void *)&v31[9] = v30;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    long long v28 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (void *)v28;
}

{
  const void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t BlendShapeWeightsFromWeightCount;
  uint64_t v5;
  char *BlendShapeWeightsFromValue;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t BlendShapeWeightsToWeightCount;
  uint64_t v13;
  char *BlendShapeWeightsToValue;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t BlendShapeWeightsByWeightCount;
  uint64_t v21;
  char *BlendShapeWeightsByValue;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  Swift::OpaquePointer v27;
  uint64_t v28;
  uint64_t v30;
  _OWORD v31[19];
  _OWORD __dst[19];
  unsigned char v33[8];
  unsigned char v34[8];
  unsigned char v35[8];
  unsigned char v36[8];
  unsigned char v37[16];
  long long v38;
  long long v39;
  long long v40;
  uint64_t v41;
  char v42;
  unsigned char v43[2];
  unsigned char v44[8];
  unsigned char v45[24];
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  unsigned char v55[24];
  unsigned char v56[5];
  unsigned char v57[2];
  char v58;
  unsigned char v59[16];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  memcpy(__dst, v0, sizeof(__dst));
  long long v38 = *(_OWORD *)((char *)&__dst[9] + 8);
  long long v39 = *(_OWORD *)((char *)&__dst[10] + 8);
  uint64_t v40 = *(_OWORD *)((char *)&__dst[11] + 8);
  char v41 = *((void *)&__dst[12] + 1);
  if (*(void *)&__dst[10])
  {
    uint64_t v1 = v41;
    outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
    outlined retain of TimelineBaseProperties((uint64_t)&v38);
LABEL_15:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v38);
    outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v2 = (void *)RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation();
    swift_release();
    uint64_t v3 = *(void *)&__dst[13];
    if (*(void *)&__dst[13])
    {
      if (*(void *)&__dst[13] != 1) {
        goto LABEL_21;
      }
      if (*(void *)(v1 + 16))
      {
        outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
        BlendShapeWeightsFromWeightCount = RETimelineDefinitionGetBlendShapeWeightsFromWeightCount();
        if (BlendShapeWeightsFromWeightCount)
        {
          uint64_t v5 = BlendShapeWeightsFromWeightCount;
          BlendShapeWeightsFromValue = (char *)RETimelineDefinitionGetBlendShapeWeightsFromValue();
          if (BlendShapeWeightsFromValue)
          {
            specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsFromValue, v5);
            outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
LABEL_21:
            outlined copy of JointTransforms??(v3);
            RETimelineDefinitionSetBlendShapeWeightsFromValues();
            swift_bridgeObjectRelease();
            memcpy(v31, __dst, sizeof(v31));
            uint64_t v7 = FromToByAnimation<>.weightNames.getter();
            unint64_t v8 = v7[2];
            if (v8)
            {
              uint64_t v9 = 0;
              unint64_t v10 = v7 + 5;
              do
              {
                String.utf8CString.getter();
                RETimelineDefinitionSetBlendShapeWeightsFromWeightName();
                swift_release();
                v10 += 2;
                ++v9;
              }
              while (v8 != v9);
            }
            swift_bridgeObjectRelease();
            Swift::OpaquePointer v11 = *((void *)&__dst[13] + 1);
            if (!*((void *)&__dst[13] + 1))
            {
LABEL_39:
              RETimelineDefinitionSetBlendShapeWeightsToValues();
              uint64_t v19 = *(void *)&__dst[14];
              if (!*(void *)&__dst[14]) {
                goto LABEL_50;
              }
              goto LABEL_40;
            }
LABEL_28:
            if (v11 == 1)
            {
              if (!*(void *)(v1 + 16)) {
                goto LABEL_39;
              }
              outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
              BlendShapeWeightsToWeightCount = RETimelineDefinitionGetBlendShapeWeightsToWeightCount();
              if (!BlendShapeWeightsToWeightCount
                || (uint64_t v13 = BlendShapeWeightsToWeightCount,
                    (BlendShapeWeightsToValue = (char *)RETimelineDefinitionGetBlendShapeWeightsToValue()) == 0))
              {
                outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
                goto LABEL_39;
              }
              specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsToValue, v13);
              outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
            }
            outlined copy of JointTransforms??(v11);
            RETimelineDefinitionSetBlendShapeWeightsToValues();
            swift_bridgeObjectRelease();
            memcpy(v31, __dst, sizeof(v31));
            long long v15 = FromToByAnimation<>.weightNames.getter();
            char v16 = v15[2];
            if (v16)
            {
              uint64_t v17 = 0;
              __n128 v18 = v15 + 5;
              do
              {
                String.utf8CString.getter();
                RETimelineDefinitionSetBlendShapeWeightsToWeightName();
                swift_release();
                v18 += 2;
                ++v17;
              }
              while (v16 != v17);
            }
            swift_bridgeObjectRelease();
            uint64_t v19 = *(void *)&__dst[14];
            if (!*(void *)&__dst[14]) {
              goto LABEL_50;
            }
LABEL_40:
            if (v19 != 1)
            {
LABEL_45:
              outlined copy of JointTransforms??(v19);
              RETimelineDefinitionSetBlendShapeWeightsByValues();
              swift_bridgeObjectRelease();
              memcpy(v31, __dst, sizeof(v31));
              uint64_t v23 = FromToByAnimation<>.weightNames.getter();
              uint64_t v24 = v23[2];
              if (v24)
              {
                long long v25 = 0;
                long long v26 = v23 + 5;
                do
                {
                  String.utf8CString.getter();
                  RETimelineDefinitionSetBlendShapeWeightsByWeightName();
                  swift_release();
                  v26 += 2;
                  ++v25;
                }
                while (v24 != v25);
              }
              swift_bridgeObjectRelease();
              goto LABEL_51;
            }
            if (*(void *)(v1 + 16))
            {
              outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
              BlendShapeWeightsByWeightCount = RETimelineDefinitionGetBlendShapeWeightsByWeightCount();
              if (BlendShapeWeightsByWeightCount)
              {
                char v21 = BlendShapeWeightsByWeightCount;
                BlendShapeWeightsByValue = (char *)RETimelineDefinitionGetBlendShapeWeightsByValue();
                if (BlendShapeWeightsByValue)
                {
                  specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsByValue, v21);
                  outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
                  goto LABEL_45;
                }
              }
              outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
            }
LABEL_50:
            RETimelineDefinitionSetBlendShapeWeightsByValues();
LABEL_51:
            v27._rawValue = v2;
            long long v28 = specialized FromToByAnimation.createResource(timelineDefinition:)(v27);
            RERelease();
            return (void *)v28;
          }
        }
        outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
      }
    }
    RETimelineDefinitionSetBlendShapeWeightsFromValues();
    Swift::OpaquePointer v11 = *((void *)&__dst[13] + 1);
    if (!*((void *)&__dst[13] + 1)) {
      goto LABEL_39;
    }
    goto LABEL_28;
  }
  outlined init with take of Transform?((uint64_t)&v39, (uint64_t)v45, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v45, (uint64_t)v55, &demangling cache variable for type metadata for BindTarget?);
  if (v55[16] != 255) {
    goto LABEL_12;
  }
  outlined init with take of Transform?((uint64_t)&v40 + 4, (uint64_t)v44, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v44, (uint64_t)v56, &demangling cache variable for type metadata for Int32?);
  if (v56[4] != 1) {
    goto LABEL_12;
  }
  outlined init with take of Transform?((uint64_t)&v40 + 9, (uint64_t)v43, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v43, (uint64_t)v57, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v57[1] != 1) {
    goto LABEL_12;
  }
  outlined init with take of Transform?((uint64_t)&v40 + 11, (uint64_t)&v42, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v42, (uint64_t)&v58, &demangling cache variable for type metadata for Bool?);
  if (v58 != 2) {
    goto LABEL_12;
  }
  outlined init with take of Transform?((uint64_t)&__dst[14] + 8, (uint64_t)v37, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v37, (uint64_t)v59, &demangling cache variable for type metadata for Double?);
  if (v59[8] != 1) {
    goto LABEL_12;
  }
  outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v36, &demangling cache variable for type metadata for BlendShapeWeights??);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)&v60, &demangling cache variable for type metadata for BlendShapeWeights??);
  if (v60 != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13] + 8, (uint64_t)v35, &demangling cache variable for type metadata for BlendShapeWeights??), outlined init with take of Transform?((uint64_t)v35, (uint64_t)&v61, &demangling cache variable for type metadata for BlendShapeWeights??), v61 != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[14], (uint64_t)v34, &demangling cache variable for type metadata for BlendShapeWeights??), outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v62, &demangling cache variable for type metadata for BlendShapeWeights??), v62 != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[18] + 8,
          (uint64_t)v33,
          &demangling cache variable for type metadata for [String]?),
        outlined init with take of Transform?((uint64_t)v33, (uint64_t)&v63, &demangling cache variable for type metadata for [String]?), v63))
  {
LABEL_12:
    uint64_t v1 = v41;
    if (*(void *)(v41 + 16))
    {
      outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
      outlined retain of TimelineBaseProperties((uint64_t)&v38);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
      outlined retain of TimelineBaseProperties((uint64_t)&v38);
    }
    goto LABEL_15;
  }
  char v52 = __dst[6];
  uint64_t v53 = __dst[7];
  char v54 = __dst[8];
  long long v48 = __dst[2];
  long long v49 = __dst[3];
  long long v50 = __dst[4];
  uint64_t v51 = __dst[5];
  long long v46 = __dst[0];
  long long v47 = __dst[1];
  v31[6] = __dst[6];
  v31[7] = __dst[7];
  v31[8] = __dst[8];
  v31[2] = __dst[2];
  v31[3] = __dst[3];
  v31[4] = __dst[4];
  v31[5] = __dst[5];
  long long v30 = *(void *)&__dst[9];
  v31[0] = __dst[0];
  v31[1] = __dst[1];
  *(void *)&v31[9] = *(void *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter()) {
    return TimelineDefinition.resource.getter();
  }
  v31[6] = v52;
  v31[7] = v53;
  v31[8] = v54;
  v31[2] = v48;
  v31[3] = v49;
  v31[4] = v50;
  v31[5] = v51;
  v31[0] = v46;
  v31[1] = v47;
  *(void *)&v31[9] = v30;
  if (TimelineClipProperties.isModified.getter())
  {
    v31[6] = v52;
    v31[7] = v53;
    v31[8] = v54;
    v31[2] = v48;
    v31[3] = v49;
    v31[4] = v50;
    v31[5] = v51;
    v31[0] = v46;
    v31[1] = v47;
    *(void *)&v31[9] = v30;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    long long v28 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (void *)v28;
}

void *FromToByAnimation.generate()(uint64_t a1)
{
  uint64_t result = FromToByAnimation.createResource()(a1);
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v2 = 0xD00000000000001CLL;
    *(void *)(v2 + 8) = 0x800000022834E530;
    *(unsigned char *)(v2 + 16) = 0;
    return (void *)swift_willThrow();
  }
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>(uint64_t **a1))()
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)FromToByAnimation.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance FromToByAnimation<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.blendLayer.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance FromToByAnimation<A>(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return FromToByAnimation.fillMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance FromToByAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.fillMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance FromToByAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance FromToByAnimation<A>()
{
  return FromToByAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance FromToByAnimation<A>(uint64_t a1, char a2)
{
  return FromToByAnimation.trimStart.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance FromToByAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.trimStart.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance FromToByAnimation<A>()
{
  return FromToByAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance FromToByAnimation<A>(uint64_t a1, char a2)
{
  return FromToByAnimation.trimEnd.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance FromToByAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.trimEnd.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance FromToByAnimation<A>()
{
  return FromToByAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance FromToByAnimation<A>(uint64_t a1, char a2)
{
  return FromToByAnimation.trimDuration.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance FromToByAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.trimDuration.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance FromToByAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.offset.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance FromToByAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.delay.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance FromToByAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.speed.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned char *protocol witness for AnimationDefinition.repeatMode.setter in conformance FromToByAnimation<A>(char *a1)
{
  char v2 = *a1;
  return FromToByAnimation.repeatMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance FromToByAnimation<A>(void *a1))()
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.repeatMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void *protocol witness for AnimationDefinitionInternal.generate() in conformance FromToByAnimation<A>(uint64_t a1)
{
  return FromToByAnimation.generate()(a1);
}

unint64_t FromToByAnimation<>.fromValue.getter()
{
  if (*(unsigned char *)(v0 + 213))
  {
    if (*(void *)(*(void *)(v0 + 200) + 16)
      && (FloatFromValue = (unsigned int *)RETimelineDefinitionGetFloatFromValue()) != 0)
    {
      unsigned __int8 v2 = 0;
      uint64_t v3 = *FloatFromValue;
    }
    else
    {
      uint64_t v3 = 0;
      unsigned __int8 v2 = 1;
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(v0 + 208);
    unsigned __int8 v2 = *(unsigned char *)(v0 + 212) & 1;
  }
  return v3 | ((unint64_t)v2 << 32);
}

uint64_t key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<Float>@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (uint64_t)memcpy(v7, __src, sizeof(v7));
  if ((v7[26] & 0x10000000000) == 0)
  {
    LODWORD(v4) = v7[26];
    char v6 = BYTE4(v7[26]) & 1;
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(v7[25] + 16);
  if (!v4)
  {
LABEL_7:
    char v6 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<Float>((uint64_t)v7);
  FloatFromValue = (_DWORD *)RETimelineDefinitionGetFloatFromValue();
  if (!FloatFromValue)
  {
    uint64_t result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
    LODWORD(v4) = 0;
    goto LABEL_7;
  }
  LODWORD(v4) = *FloatFromValue;
  uint64_t result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
  char v6 = 0;
LABEL_8:
  *(_DWORD *)a2 = v4;
  *(unsigned char *)(a2 + 4) = v6;
  return result;
}

uint64_t FromToByAnimation<>.fromValue.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 208) = result;
  *(unsigned char *)(v1 + 212) = BYTE4(result) & 1;
  *(unsigned char *)(v1 + 213) = 0;
  return result;
}

uint64_t *(*FromToByAnimation<>.fromValue.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 213))
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)
      && (FloatFromValue = (int *)RETimelineDefinitionGetFloatFromValue()) != 0)
    {
      char v4 = 0;
      int v5 = *FloatFromValue;
    }
    else
    {
      int v5 = 0;
      char v4 = 1;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(v1 + 208);
    char v4 = *(unsigned char *)(v1 + 212) & 1;
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 12) = v4;
  return FromToByAnimation<>.fromValue.modify;
}

uint64_t *FromToByAnimation<>.fromValue.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  BOOL v2 = *((unsigned char *)result + 12) != 0;
  *(_DWORD *)(v1 + 208) = *((_DWORD *)result + 2);
  *(unsigned char *)(v1 + 212) = v2;
  *(unsigned char *)(v1 + 213) = 0;
  return result;
}

unint64_t FromToByAnimation<>.toValue.getter()
{
  if (*(unsigned char *)(v0 + 221))
  {
    if (*(void *)(*(void *)(v0 + 200) + 16)
      && (FloatToValue = (unsigned int *)RETimelineDefinitionGetFloatToValue()) != 0)
    {
      unsigned __int8 v2 = 0;
      uint64_t v3 = *FloatToValue;
    }
    else
    {
      uint64_t v3 = 0;
      unsigned __int8 v2 = 1;
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(v0 + 216);
    unsigned __int8 v2 = *(unsigned char *)(v0 + 220) & 1;
  }
  return v3 | ((unint64_t)v2 << 32);
}

uint64_t key path getter for FromToByAnimation<>.toValue : FromToByAnimation<Float>@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (uint64_t)memcpy(v7, __src, sizeof(v7));
  if ((v7[27] & 0x10000000000) == 0)
  {
    LODWORD(v4) = v7[27];
    char v6 = BYTE4(v7[27]) & 1;
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(v7[25] + 16);
  if (!v4)
  {
LABEL_7:
    char v6 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<Float>((uint64_t)v7);
  FloatToValue = (_DWORD *)RETimelineDefinitionGetFloatToValue();
  if (!FloatToValue)
  {
    uint64_t result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
    LODWORD(v4) = 0;
    goto LABEL_7;
  }
  LODWORD(v4) = *FloatToValue;
  uint64_t result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
  char v6 = 0;
LABEL_8:
  *(_DWORD *)a2 = v4;
  *(unsigned char *)(a2 + 4) = v6;
  return result;
}

uint64_t FromToByAnimation<>.toValue.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 216) = result;
  *(unsigned char *)(v1 + 220) = BYTE4(result) & 1;
  *(unsigned char *)(v1 + 221) = 0;
  return result;
}

uint64_t *(*FromToByAnimation<>.toValue.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 221))
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)
      && (FloatToValue = (int *)RETimelineDefinitionGetFloatToValue()) != 0)
    {
      char v4 = 0;
      int v5 = *FloatToValue;
    }
    else
    {
      int v5 = 0;
      char v4 = 1;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(v1 + 216);
    char v4 = *(unsigned char *)(v1 + 220) & 1;
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 12) = v4;
  return FromToByAnimation<>.toValue.modify;
}

uint64_t *FromToByAnimation<>.toValue.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  BOOL v2 = *((unsigned char *)result + 12) != 0;
  *(_DWORD *)(v1 + 216) = *((_DWORD *)result + 2);
  *(unsigned char *)(v1 + 220) = v2;
  *(unsigned char *)(v1 + 221) = 0;
  return result;
}

unint64_t FromToByAnimation<>.byValue.getter()
{
  if (*(unsigned char *)(v0 + 229))
  {
    if (*(void *)(*(void *)(v0 + 200) + 16)
      && (FloatByValue = (unsigned int *)RETimelineDefinitionGetFloatByValue()) != 0)
    {
      unsigned __int8 v2 = 0;
      uint64_t v3 = *FloatByValue;
    }
    else
    {
      uint64_t v3 = 0;
      unsigned __int8 v2 = 1;
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(v0 + 224);
    unsigned __int8 v2 = *(unsigned char *)(v0 + 228) & 1;
  }
  return v3 | ((unint64_t)v2 << 32);
}

uint64_t key path getter for FromToByAnimation<>.byValue : FromToByAnimation<Float>@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (uint64_t)memcpy(v7, __src, sizeof(v7));
  if ((v7[28] & 0x10000000000) == 0)
  {
    LODWORD(v4) = v7[28];
    char v6 = BYTE4(v7[28]) & 1;
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(v7[25] + 16);
  if (!v4)
  {
LABEL_7:
    char v6 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<Float>((uint64_t)v7);
  FloatByValue = (_DWORD *)RETimelineDefinitionGetFloatByValue();
  if (!FloatByValue)
  {
    uint64_t result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
    LODWORD(v4) = 0;
    goto LABEL_7;
  }
  LODWORD(v4) = *FloatByValue;
  uint64_t result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
  char v6 = 0;
LABEL_8:
  *(_DWORD *)a2 = v4;
  *(unsigned char *)(a2 + 4) = v6;
  return result;
}

uint64_t FromToByAnimation<>.byValue.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 224) = result;
  *(unsigned char *)(v1 + 228) = BYTE4(result) & 1;
  *(unsigned char *)(v1 + 229) = 0;
  return result;
}

uint64_t *(*FromToByAnimation<>.byValue.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 229))
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)
      && (FloatByValue = (int *)RETimelineDefinitionGetFloatByValue()) != 0)
    {
      char v4 = 0;
      int v5 = *FloatByValue;
    }
    else
    {
      int v5 = 0;
      char v4 = 1;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(v1 + 224);
    char v4 = *(unsigned char *)(v1 + 228) & 1;
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 12) = v4;
  return FromToByAnimation<>.byValue.modify;
}

uint64_t *FromToByAnimation<>.byValue.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  BOOL v2 = *((unsigned char *)result + 12) != 0;
  *(_DWORD *)(v1 + 224) = *((_DWORD *)result + 2);
  *(unsigned char *)(v1 + 228) = v2;
  *(unsigned char *)(v1 + 229) = 0;
  return result;
}

uint64_t FromToByAnimation<>.fromValue.getter()
{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x263F37448]);
}

{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x263F37468]);
}

{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x263F37488]);
}

{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x263F374A8]);
}

{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x263F374D0]);
}

uint64_t FromToByAnimation<>.fromValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 208) = result;
  *(unsigned char *)(v2 + 216) = a2 & 1;
  *(unsigned char *)(v2 + 217) = 0;
  return result;
}

uint64_t (*FromToByAnimation<>.fromValue.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  if (*(unsigned char *)(v1 + 217))
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)
      && (DoubleFromValue = (uint64_t *)RETimelineDefinitionGetDoubleFromValue()) != 0)
    {
      char v4 = 0;
      uint64_t v5 = *DoubleFromValue;
    }
    else
    {
      uint64_t v5 = 0;
      char v4 = 1;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 208);
    char v4 = *(unsigned char *)(v1 + 216) & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v4;
  return FromToByAnimation<>.fromValue.modify;
}

{
  uint64_t v1;
  uint64_t *Float2FromValue;
  char v4;
  uint64_t v5;

  *(void *)(a1 + 16) = v1;
  if (*(unsigned char *)(v1 + 217))
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)
      && (Float2FromValue = (uint64_t *)RETimelineDefinitionGetFloat2FromValue()) != 0)
    {
      char v4 = 0;
      uint64_t v5 = *Float2FromValue;
    }
    else
    {
      uint64_t v5 = 0;
      char v4 = 1;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 208);
    char v4 = *(unsigned char *)(v1 + 216) & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v4;
  return FromToByAnimation<>.fromValue.modify;
}

uint64_t FromToByAnimation<>.toValue.getter()
{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x263F37450]);
}

{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x263F37470]);
}

{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x263F37490]);
}

{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x263F374B0]);
}

{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x263F374D8]);
}

uint64_t FromToByAnimation<>.toValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 224) = result;
  *(unsigned char *)(v2 + 232) = a2 & 1;
  *(unsigned char *)(v2 + 233) = 0;
  return result;
}

uint64_t (*FromToByAnimation<>.toValue.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  if (*(unsigned char *)(v1 + 233))
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)
      && (DoubleToValue = (uint64_t *)RETimelineDefinitionGetDoubleToValue()) != 0)
    {
      char v4 = 0;
      uint64_t v5 = *DoubleToValue;
    }
    else
    {
      uint64_t v5 = 0;
      char v4 = 1;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 224);
    char v4 = *(unsigned char *)(v1 + 232) & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v4;
  return FromToByAnimation<>.toValue.modify;
}

{
  uint64_t v1;
  uint64_t *Float2ToValue;
  char v4;
  uint64_t v5;

  *(void *)(a1 + 16) = v1;
  if (*(unsigned char *)(v1 + 233))
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)
      && (Float2ToValue = (uint64_t *)RETimelineDefinitionGetFloat2ToValue()) != 0)
    {
      char v4 = 0;
      uint64_t v5 = *Float2ToValue;
    }
    else
    {
      uint64_t v5 = 0;
      char v4 = 1;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 224);
    char v4 = *(unsigned char *)(v1 + 232) & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v4;
  return FromToByAnimation<>.toValue.modify;
}

uint64_t FromToByAnimation<>.byValue.getter()
{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x263F37440]);
}

{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x263F37460]);
}

{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x263F37480]);
}

{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x263F374A0]);
}

{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x263F374C8]);
}

uint64_t FromToByAnimation<>.byValue.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 240) = result;
  *(unsigned char *)(v2 + 248) = a2 & 1;
  *(unsigned char *)(v2 + 249) = 0;
  return result;
}

uint64_t (*FromToByAnimation<>.byValue.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  if (*(unsigned char *)(v1 + 249))
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)
      && (DoubleByValue = (uint64_t *)RETimelineDefinitionGetDoubleByValue()) != 0)
    {
      char v4 = 0;
      uint64_t v5 = *DoubleByValue;
    }
    else
    {
      uint64_t v5 = 0;
      char v4 = 1;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 240);
    char v4 = *(unsigned char *)(v1 + 248) & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v4;
  return FromToByAnimation<>.byValue.modify;
}

{
  uint64_t v1;
  uint64_t *Float2ByValue;
  char v4;
  uint64_t v5;

  *(void *)(a1 + 16) = v1;
  if (*(unsigned char *)(v1 + 249))
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)
      && (Float2ByValue = (uint64_t *)RETimelineDefinitionGetFloat2ByValue()) != 0)
    {
      char v4 = 0;
      uint64_t v5 = *Float2ByValue;
    }
    else
    {
      uint64_t v5 = 0;
      char v4 = 1;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 240);
    char v4 = *(unsigned char *)(v1 + 248) & 1;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v4;
  return FromToByAnimation<>.byValue.modify;
}

uint64_t FromToByAnimation<>.fromValue.getter(uint64_t (*a1)(void))
{
  if ((*(unsigned char *)(v1 + 217) & 1) == 0) {
    return *(void *)(v1 + 208);
  }
  uint64_t result = *(void *)(*(void *)(v1 + 200) + 16);
  if (result)
  {
    uint64_t result = a1();
    if (result) {
      return *(void *)result;
    }
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  if ((*(unsigned char *)(v1 + 225) & 1) == 0) {
    return *(void *)(v1 + 208);
  }
  uint64_t result = *(void *)(*(void *)(v1 + 200) + 16);
  if (result)
  {
    uint64_t result = a1();
    if (result) {
      return *(void *)result;
    }
  }
  return result;
}

uint64_t key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<Double>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)memcpy(v10, __src, sizeof(v10));
  if ((v10[27] & 0x100) == 0)
  {
    uint64_t v8 = v10[26];
    char v9 = v10[27] & 1;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(v10[25] + 16);
  if (!v6)
  {
LABEL_7:
    uint64_t v8 = 0;
    char v9 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  uint64_t v7 = (uint64_t *)a2(v6);
  if (!v7)
  {
    uint64_t result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
    goto LABEL_7;
  }
  uint64_t v8 = *v7;
  uint64_t result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  char v9 = 0;
LABEL_8:
  *(void *)a3 = v8;
  *(unsigned char *)(a3 + 8) = v9;
  return result;
}

uint64_t FromToByAnimation<>.fromValue.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 208) = *(void *)result;
  *(_WORD *)(v1 + 216) = v2;
  return result;
}

uint64_t FromToByAnimation<>.toValue.getter(uint64_t (*a1)(void))
{
  if ((*(unsigned char *)(v1 + 233) & 1) == 0) {
    return *(void *)(v1 + 224);
  }
  uint64_t result = *(void *)(*(void *)(v1 + 200) + 16);
  if (result)
  {
    uint64_t result = a1();
    if (result) {
      return *(void *)result;
    }
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  if ((*(unsigned char *)(v1 + 257) & 1) == 0) {
    return *(void *)(v1 + 240);
  }
  uint64_t result = *(void *)(*(void *)(v1 + 200) + 16);
  if (result)
  {
    uint64_t result = a1();
    if (result) {
      return *(void *)result;
    }
  }
  return result;
}

uint64_t key path getter for FromToByAnimation<>.toValue : FromToByAnimation<Double>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)memcpy(v10, __src, sizeof(v10));
  if ((v10[29] & 0x100) == 0)
  {
    uint64_t v8 = v10[28];
    char v9 = v10[29] & 1;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(v10[25] + 16);
  if (!v6)
  {
LABEL_7:
    uint64_t v8 = 0;
    char v9 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  uint64_t v7 = (uint64_t *)a2(v6);
  if (!v7)
  {
    uint64_t result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
    goto LABEL_7;
  }
  uint64_t v8 = *v7;
  uint64_t result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  char v9 = 0;
LABEL_8:
  *(void *)a3 = v8;
  *(unsigned char *)(a3 + 8) = v9;
  return result;
}

uint64_t FromToByAnimation<>.toValue.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 224) = *(void *)result;
  *(_WORD *)(v1 + 232) = v2;
  return result;
}

uint64_t FromToByAnimation<>.byValue.getter(uint64_t (*a1)(void))
{
  if ((*(unsigned char *)(v1 + 249) & 1) == 0) {
    return *(void *)(v1 + 240);
  }
  uint64_t result = *(void *)(*(void *)(v1 + 200) + 16);
  if (result)
  {
    uint64_t result = a1();
    if (result) {
      return *(void *)result;
    }
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  if ((*(unsigned char *)(v1 + 289) & 1) == 0) {
    return *(void *)(v1 + 272);
  }
  uint64_t result = *(void *)(*(void *)(v1 + 200) + 16);
  if (result)
  {
    uint64_t result = a1();
    if (result) {
      return *(void *)result;
    }
  }
  return result;
}

uint64_t key path getter for FromToByAnimation<>.byValue : FromToByAnimation<Double>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)memcpy(v10, __src, sizeof(v10));
  if ((v10[31] & 0x100) == 0)
  {
    uint64_t v8 = v10[30];
    char v9 = v10[31] & 1;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(v10[25] + 16);
  if (!v6)
  {
LABEL_7:
    uint64_t v8 = 0;
    char v9 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  uint64_t v7 = (uint64_t *)a2(v6);
  if (!v7)
  {
    uint64_t result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
    goto LABEL_7;
  }
  uint64_t v8 = *v7;
  uint64_t result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  char v9 = 0;
LABEL_8:
  *(void *)a3 = v8;
  *(unsigned char *)(a3 + 8) = v9;
  return result;
}

uint64_t FromToByAnimation<>.byValue.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 240) = *(void *)result;
  *(_WORD *)(v1 + 248) = v2;
  return result;
}

uint64_t (*FromToByAnimation<>.fromValue.modify(void *a1))()
{
  uint64_t v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if (*(unsigned char *)(v1 + 225))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      Float3FromValue = (long long *)RETimelineDefinitionGetFloat3FromValue();
      if (Float3FromValue)
      {
        char v6 = 0;
        long long v4 = *Float3FromValue;
      }
      else
      {
        char v6 = 1;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v6 = 1;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 208);
    char v6 = *(unsigned char *)(v1 + 224) & 1;
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((unsigned char *)v3 + 16) = v6;
  return FromToByAnimation<>.fromValue.modify;
}

{
  uint64_t v1;
  void *v3;
  long long v4;
  long long *Float4FromValue;
  char v6;

  uint64_t v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if (*(unsigned char *)(v1 + 225))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      Float4FromValue = (long long *)RETimelineDefinitionGetFloat4FromValue();
      if (Float4FromValue)
      {
        char v6 = 0;
        long long v4 = *Float4FromValue;
      }
      else
      {
        char v6 = 1;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v6 = 1;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 208);
    char v6 = *(unsigned char *)(v1 + 224) & 1;
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((unsigned char *)v3 + 16) = v6;
  return FromToByAnimation<>.fromValue.modify;
}

{
  uint64_t v1;
  void *v3;
  long long v4;
  long long *QuaternionFromValue;
  char v6;

  uint64_t v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if (*(unsigned char *)(v1 + 225))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      QuaternionFromValue = (long long *)RETimelineDefinitionGetQuaternionFromValue();
      if (QuaternionFromValue)
      {
        char v6 = 0;
        long long v4 = *QuaternionFromValue;
      }
      else
      {
        char v6 = 1;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v6 = 1;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 208);
    char v6 = *(unsigned char *)(v1 + 224) & 1;
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((unsigned char *)v3 + 16) = v6;
  return FromToByAnimation<>.fromValue.modify;
}

uint64_t (*FromToByAnimation<>.toValue.modify(void *a1))()
{
  uint64_t v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if (*(unsigned char *)(v1 + 257))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      Float3ToValue = (long long *)RETimelineDefinitionGetFloat3ToValue();
      if (Float3ToValue)
      {
        char v6 = 0;
        long long v4 = *Float3ToValue;
      }
      else
      {
        char v6 = 1;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v6 = 1;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 240);
    char v6 = *(unsigned char *)(v1 + 256) & 1;
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((unsigned char *)v3 + 16) = v6;
  return FromToByAnimation<>.toValue.modify;
}

{
  uint64_t v1;
  void *v3;
  long long v4;
  long long *Float4ToValue;
  char v6;

  uint64_t v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if (*(unsigned char *)(v1 + 257))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      Float4ToValue = (long long *)RETimelineDefinitionGetFloat4ToValue();
      if (Float4ToValue)
      {
        char v6 = 0;
        long long v4 = *Float4ToValue;
      }
      else
      {
        char v6 = 1;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v6 = 1;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 240);
    char v6 = *(unsigned char *)(v1 + 256) & 1;
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((unsigned char *)v3 + 16) = v6;
  return FromToByAnimation<>.toValue.modify;
}

{
  uint64_t v1;
  void *v3;
  long long v4;
  long long *QuaternionToValue;
  char v6;

  uint64_t v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if (*(unsigned char *)(v1 + 257))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      QuaternionToValue = (long long *)RETimelineDefinitionGetQuaternionToValue();
      if (QuaternionToValue)
      {
        char v6 = 0;
        long long v4 = *QuaternionToValue;
      }
      else
      {
        char v6 = 1;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v6 = 1;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 240);
    char v6 = *(unsigned char *)(v1 + 256) & 1;
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((unsigned char *)v3 + 16) = v6;
  return FromToByAnimation<>.toValue.modify;
}

uint64_t (*FromToByAnimation<>.byValue.modify(void *a1))()
{
  uint64_t v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if (*(unsigned char *)(v1 + 289))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      Float3ByValue = (long long *)RETimelineDefinitionGetFloat3ByValue();
      if (Float3ByValue)
      {
        char v6 = 0;
        long long v4 = *Float3ByValue;
      }
      else
      {
        char v6 = 1;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v6 = 1;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 272);
    char v6 = *(unsigned char *)(v1 + 288) & 1;
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((unsigned char *)v3 + 16) = v6;
  return FromToByAnimation<>.byValue.modify;
}

{
  uint64_t v1;
  void *v3;
  long long v4;
  long long *Float4ByValue;
  char v6;

  uint64_t v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if (*(unsigned char *)(v1 + 289))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      Float4ByValue = (long long *)RETimelineDefinitionGetFloat4ByValue();
      if (Float4ByValue)
      {
        char v6 = 0;
        long long v4 = *Float4ByValue;
      }
      else
      {
        char v6 = 1;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v6 = 1;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 272);
    char v6 = *(unsigned char *)(v1 + 288) & 1;
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((unsigned char *)v3 + 16) = v6;
  return FromToByAnimation<>.byValue.modify;
}

{
  uint64_t v1;
  void *v3;
  long long v4;
  long long *QuaternionByValue;
  char v6;

  uint64_t v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if (*(unsigned char *)(v1 + 289))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      QuaternionByValue = (long long *)RETimelineDefinitionGetQuaternionByValue();
      if (QuaternionByValue)
      {
        char v6 = 0;
        long long v4 = *QuaternionByValue;
      }
      else
      {
        char v6 = 1;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v6 = 1;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 272);
    char v6 = *(unsigned char *)(v1 + 288) & 1;
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((unsigned char *)v3 + 16) = v6;
  return FromToByAnimation<>.byValue.modify;
}

uint64_t key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<SIMD3<Float>>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)memcpy(__dst, __src, sizeof(__dst));
  if (BYTE1(__dst[14]))
  {
    uint64_t v6 = *(void *)(*((void *)&__dst[12] + 1) + 16);
    long long v7 = 0uLL;
    if (v6)
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      uint64_t v8 = (long long *)a2(v6);
      if (v8)
      {
        long long v10 = *v8;
        uint64_t result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        long long v7 = v10;
        char v9 = 0;
      }
      else
      {
        uint64_t result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        char v9 = 1;
        long long v7 = 0uLL;
      }
    }
    else
    {
      char v9 = 1;
    }
  }
  else
  {
    long long v7 = __dst[13];
    char v9 = __dst[14] & 1;
  }
  *(_OWORD *)a3 = v7;
  *(unsigned char *)(a3 + 16) = v9;
  return result;
}

uint64_t key path getter for FromToByAnimation<>.toValue : FromToByAnimation<SIMD3<Float>>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)memcpy(__dst, __src, sizeof(__dst));
  if (BYTE1(__dst[16]))
  {
    uint64_t v6 = *(void *)(*((void *)&__dst[12] + 1) + 16);
    long long v7 = 0uLL;
    if (v6)
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      uint64_t v8 = (long long *)a2(v6);
      if (v8)
      {
        long long v10 = *v8;
        uint64_t result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        long long v7 = v10;
        char v9 = 0;
      }
      else
      {
        uint64_t result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        char v9 = 1;
        long long v7 = 0uLL;
      }
    }
    else
    {
      char v9 = 1;
    }
  }
  else
  {
    long long v7 = __dst[15];
    char v9 = __dst[16] & 1;
  }
  *(_OWORD *)a3 = v7;
  *(unsigned char *)(a3 + 16) = v9;
  return result;
}

uint64_t key path getter for FromToByAnimation<>.byValue : FromToByAnimation<SIMD3<Float>>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)memcpy(__dst, __src, sizeof(__dst));
  if (BYTE1(__dst[18]))
  {
    uint64_t v6 = *(void *)(*((void *)&__dst[12] + 1) + 16);
    long long v7 = 0uLL;
    if (v6)
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      uint64_t v8 = (long long *)a2(v6);
      if (v8)
      {
        long long v10 = *v8;
        uint64_t result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        long long v7 = v10;
        char v9 = 0;
      }
      else
      {
        uint64_t result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        char v9 = 1;
        long long v7 = 0uLL;
      }
    }
    else
    {
      char v9 = 1;
    }
  }
  else
  {
    long long v7 = __dst[17];
    char v9 = __dst[18] & 1;
  }
  *(_OWORD *)a3 = v7;
  *(unsigned char *)(a3 + 16) = v9;
  return result;
}

uint64_t FromToByAnimation<>.fromValue.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 208) = result;
  *(void *)(v3 + 216) = a2;
  *(unsigned char *)(v3 + 224) = a3 & 1;
  *(unsigned char *)(v3 + 225) = 0;
  return result;
}

void FromToByAnimation<>.fromValue.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[3];
  unsigned __int8 v3 = *((unsigned char *)v1 + 16);
  *(_OWORD *)(v2 + 208) = *(_OWORD *)v1;
  *(_WORD *)(v2 + 224) = v3;
  free(v1);
}

{
  void *v1;
  uint64_t v2;
  unsigned __int8 v3;
  long long v4;
  long long v5;

  uint64_t v1 = *a1;
  uint64_t v2 = v1[7];
  unsigned __int8 v3 = *((unsigned char *)v1 + 48);
  long long v4 = *((_OWORD *)v1 + 1);
  uint64_t v5 = *((_OWORD *)v1 + 2);
  *(_OWORD *)(v2 + 208) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 224) = v4;
  *(_OWORD *)(v2 + 240) = v5;
  *(_WORD *)(v2 + 256) = v3;
  free(v1);
}

uint64_t FromToByAnimation<>.toValue.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 240) = result;
  *(void *)(v3 + 248) = a2;
  uint64_t v4 = v3 + 240;
  *(unsigned char *)(v4 + 16) = a3 & 1;
  *(unsigned char *)(v4 + 17) = 0;
  return result;
}

void FromToByAnimation<>.toValue.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[3];
  unsigned __int8 v3 = *((unsigned char *)v1 + 16);
  *(_OWORD *)(v2 + 240) = *(_OWORD *)v1;
  *(_WORD *)(v2 + 256) = v3;
  free(v1);
}

{
  void *v1;
  uint64_t v2;
  unsigned __int8 v3;
  long long v4;
  long long v5;

  uint64_t v1 = *a1;
  uint64_t v2 = v1[7];
  unsigned __int8 v3 = *((unsigned char *)v1 + 48);
  uint64_t v4 = *((_OWORD *)v1 + 1);
  uint64_t v5 = *((_OWORD *)v1 + 2);
  *(_OWORD *)(v2 + 272) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 288) = v4;
  *(_OWORD *)(v2 + 304) = v5;
  *(_WORD *)(v2 + 320) = v3;
  free(v1);
}

uint64_t FromToByAnimation<>.byValue.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 272) = result;
  *(void *)(v3 + 280) = a2;
  *(unsigned char *)(v3 + 288) = a3 & 1;
  *(unsigned char *)(v3 + 289) = 0;
  return result;
}

void FromToByAnimation<>.byValue.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[3];
  unsigned __int8 v3 = *((unsigned char *)v1 + 16);
  *(_OWORD *)(v2 + 272) = *(_OWORD *)v1;
  *(_WORD *)(v2 + 288) = v3;
  free(v1);
}

{
  void *v1;
  uint64_t v2;
  unsigned __int8 v3;
  long long v4;
  long long v5;

  uint64_t v1 = *a1;
  uint64_t v2 = v1[7];
  unsigned __int8 v3 = *((unsigned char *)v1 + 48);
  uint64_t v4 = *((_OWORD *)v1 + 1);
  uint64_t v5 = *((_OWORD *)v1 + 2);
  *(_OWORD *)(v2 + 336) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 352) = v4;
  *(_OWORD *)(v2 + 368) = v5;
  *(_WORD *)(v2 + 384) = v3;
  free(v1);
}

void FromToByAnimation<>.fromValue.getter(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 257))
  {
    long long v3 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      SRTFromValue = (uint64_t *)RETimelineDefinitionGetSRTFromValue();
      if (SRTFromValue)
      {
        uint64_t v6 = *SRTFromValue;
        uint64_t v5 = SRTFromValue[1];
        uint64_t v8 = SRTFromValue[2];
        uint64_t v7 = SRTFromValue[3];
        uint64_t v9 = SRTFromValue[4];
        uint64_t v10 = SRTFromValue[5];
        if (one-time initialization token for identity != -1)
        {
          uint64_t v18 = SRTFromValue[3];
          uint64_t v14 = SRTFromValue[2];
          uint64_t v15 = SRTFromValue[1];
          uint64_t v16 = *SRTFromValue;
          uint64_t v17 = SRTFromValue[4];
          swift_once();
          uint64_t v6 = v16;
          uint64_t v9 = v17;
          uint64_t v8 = v14;
          uint64_t v5 = v15;
          uint64_t v7 = v18;
        }
        char v11 = 0;
        *(void *)&long long v3 = v6;
        *((void *)&v3 + 1) = v5;
        *(void *)&long long v12 = v8;
        *((void *)&v12 + 1) = v7;
        *(void *)&long long v13 = v9;
        *((void *)&v13 + 1) = v10;
      }
      else
      {
        char v11 = 1;
        long long v12 = 0uLL;
        long long v13 = 0uLL;
        long long v3 = 0uLL;
      }
    }
    else
    {
      char v11 = 1;
      long long v12 = 0uLL;
      long long v13 = 0uLL;
    }
  }
  else
  {
    long long v12 = *(_OWORD *)(v1 + 224);
    long long v13 = *(_OWORD *)(v1 + 240);
    long long v3 = *(_OWORD *)(v1 + 208);
    char v11 = *(unsigned char *)(v1 + 256) & 1;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 48) = v11;
}

double FromToByAnimation<>.fromValue.setter(uint64_t a1)
{
  outlined init with take of Transform?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Transform?);
  long long v2 = v6[1];
  *(_OWORD *)(v1 + 208) = v6[0];
  *(_OWORD *)(v1 + 224) = v2;
  uint64_t v3 = v1 + 208;
  unsigned __int8 v4 = v8;
  double result = *(double *)&v7;
  *(_OWORD *)(v3 + 32) = v7;
  *(_WORD *)(v3 + 48) = v4;
  return result;
}

void (*FromToByAnimation<>.fromValue.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  if (*(unsigned char *)(v1 + 257))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      SRTFromValue = (uint64_t *)RETimelineDefinitionGetSRTFromValue();
      if (SRTFromValue)
      {
        uint64_t v7 = *SRTFromValue;
        uint64_t v6 = SRTFromValue[1];
        uint64_t v9 = SRTFromValue[2];
        uint64_t v8 = SRTFromValue[3];
        uint64_t v10 = SRTFromValue[4];
        uint64_t v11 = SRTFromValue[5];
        if (one-time initialization token for identity != -1)
        {
          uint64_t v19 = SRTFromValue[4];
          uint64_t v20 = SRTFromValue[3];
          uint64_t v16 = SRTFromValue[2];
          uint64_t v17 = SRTFromValue[1];
          uint64_t v18 = *SRTFromValue;
          swift_once();
          uint64_t v7 = v18;
          uint64_t v10 = v19;
          uint64_t v9 = v16;
          uint64_t v6 = v17;
          uint64_t v8 = v20;
        }
        char v12 = 0;
        *(void *)&long long v4 = v7;
        *((void *)&v4 + 1) = v6;
        *(void *)&long long v13 = v9;
        *((void *)&v13 + 1) = v8;
        *(void *)&long long v14 = v10;
        *((void *)&v14 + 1) = v11;
      }
      else
      {
        char v12 = 1;
        long long v13 = 0uLL;
        long long v14 = 0uLL;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v12 = 1;
      long long v13 = 0uLL;
      long long v14 = 0uLL;
    }
  }
  else
  {
    long long v13 = *(_OWORD *)(v1 + 224);
    long long v14 = *(_OWORD *)(v1 + 240);
    long long v4 = *(_OWORD *)(v1 + 208);
    char v12 = *(unsigned char *)(v1 + 256) & 1;
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((_OWORD *)v3 + 1) = v13;
  *((_OWORD *)v3 + 2) = v14;
  *((unsigned char *)v3 + 48) = v12;
  return FromToByAnimation<>.fromValue.modify;
}

void FromToByAnimation<>.toValue.getter(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 321))
  {
    long long v3 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      SRTToValue = (uint64_t *)RETimelineDefinitionGetSRTToValue();
      if (SRTToValue)
      {
        uint64_t v6 = *SRTToValue;
        uint64_t v5 = SRTToValue[1];
        uint64_t v8 = SRTToValue[2];
        uint64_t v7 = SRTToValue[3];
        uint64_t v9 = SRTToValue[4];
        uint64_t v10 = SRTToValue[5];
        if (one-time initialization token for identity != -1)
        {
          uint64_t v18 = SRTToValue[3];
          uint64_t v14 = SRTToValue[2];
          uint64_t v15 = SRTToValue[1];
          uint64_t v16 = *SRTToValue;
          uint64_t v17 = SRTToValue[4];
          swift_once();
          uint64_t v6 = v16;
          uint64_t v9 = v17;
          uint64_t v8 = v14;
          uint64_t v5 = v15;
          uint64_t v7 = v18;
        }
        char v11 = 0;
        *(void *)&long long v3 = v6;
        *((void *)&v3 + 1) = v5;
        *(void *)&long long v12 = v8;
        *((void *)&v12 + 1) = v7;
        *(void *)&long long v13 = v9;
        *((void *)&v13 + 1) = v10;
      }
      else
      {
        char v11 = 1;
        long long v12 = 0uLL;
        long long v13 = 0uLL;
        long long v3 = 0uLL;
      }
    }
    else
    {
      char v11 = 1;
      long long v12 = 0uLL;
      long long v13 = 0uLL;
    }
  }
  else
  {
    long long v12 = *(_OWORD *)(v1 + 288);
    long long v13 = *(_OWORD *)(v1 + 304);
    long long v3 = *(_OWORD *)(v1 + 272);
    char v11 = *(unsigned char *)(v1 + 320) & 1;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 48) = v11;
}

double FromToByAnimation<>.toValue.setter(uint64_t a1)
{
  outlined init with take of Transform?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Transform?);
  unsigned __int8 v2 = v7;
  long long v3 = v5[1];
  *(_OWORD *)(v1 + 272) = v5[0];
  *(_OWORD *)(v1 + 288) = v3;
  double result = *(double *)&v6;
  *(_OWORD *)(v1 + 304) = v6;
  *(_WORD *)(v1 + 320) = v2;
  return result;
}

void (*FromToByAnimation<>.toValue.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  if (*(unsigned char *)(v1 + 321))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      SRTToValue = (uint64_t *)RETimelineDefinitionGetSRTToValue();
      if (SRTToValue)
      {
        uint64_t v7 = *SRTToValue;
        uint64_t v6 = SRTToValue[1];
        uint64_t v9 = SRTToValue[2];
        uint64_t v8 = SRTToValue[3];
        uint64_t v10 = SRTToValue[4];
        uint64_t v11 = SRTToValue[5];
        if (one-time initialization token for identity != -1)
        {
          uint64_t v19 = SRTToValue[4];
          uint64_t v20 = SRTToValue[3];
          uint64_t v16 = SRTToValue[2];
          uint64_t v17 = SRTToValue[1];
          uint64_t v18 = *SRTToValue;
          swift_once();
          uint64_t v7 = v18;
          uint64_t v10 = v19;
          uint64_t v9 = v16;
          uint64_t v6 = v17;
          uint64_t v8 = v20;
        }
        char v12 = 0;
        *(void *)&long long v4 = v7;
        *((void *)&v4 + 1) = v6;
        *(void *)&long long v13 = v9;
        *((void *)&v13 + 1) = v8;
        *(void *)&long long v14 = v10;
        *((void *)&v14 + 1) = v11;
      }
      else
      {
        char v12 = 1;
        long long v13 = 0uLL;
        long long v14 = 0uLL;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v12 = 1;
      long long v13 = 0uLL;
      long long v14 = 0uLL;
    }
  }
  else
  {
    long long v13 = *(_OWORD *)(v1 + 288);
    long long v14 = *(_OWORD *)(v1 + 304);
    long long v4 = *(_OWORD *)(v1 + 272);
    char v12 = *(unsigned char *)(v1 + 320) & 1;
  }
  *(_OWORD *)long long v3 = v4;
  *((_OWORD *)v3 + 1) = v13;
  *((_OWORD *)v3 + 2) = v14;
  *((unsigned char *)v3 + 48) = v12;
  return FromToByAnimation<>.toValue.modify;
}

void FromToByAnimation<>.byValue.getter(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 385))
  {
    long long v3 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      SRTByValue = (uint64_t *)RETimelineDefinitionGetSRTByValue();
      if (SRTByValue)
      {
        uint64_t v6 = *SRTByValue;
        uint64_t v5 = SRTByValue[1];
        uint64_t v8 = SRTByValue[2];
        uint64_t v7 = SRTByValue[3];
        uint64_t v9 = SRTByValue[4];
        uint64_t v10 = SRTByValue[5];
        if (one-time initialization token for identity != -1)
        {
          uint64_t v18 = SRTByValue[3];
          uint64_t v14 = SRTByValue[2];
          uint64_t v15 = SRTByValue[1];
          uint64_t v16 = *SRTByValue;
          uint64_t v17 = SRTByValue[4];
          swift_once();
          uint64_t v6 = v16;
          uint64_t v9 = v17;
          uint64_t v8 = v14;
          uint64_t v5 = v15;
          uint64_t v7 = v18;
        }
        char v11 = 0;
        *(void *)&long long v3 = v6;
        *((void *)&v3 + 1) = v5;
        *(void *)&long long v12 = v8;
        *((void *)&v12 + 1) = v7;
        *(void *)&long long v13 = v9;
        *((void *)&v13 + 1) = v10;
      }
      else
      {
        char v11 = 1;
        long long v12 = 0uLL;
        long long v13 = 0uLL;
        long long v3 = 0uLL;
      }
    }
    else
    {
      char v11 = 1;
      long long v12 = 0uLL;
      long long v13 = 0uLL;
    }
  }
  else
  {
    long long v12 = *(_OWORD *)(v1 + 352);
    long long v13 = *(_OWORD *)(v1 + 368);
    long long v3 = *(_OWORD *)(v1 + 336);
    char v11 = *(unsigned char *)(v1 + 384) & 1;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 48) = v11;
}

double FromToByAnimation<>.byValue.setter(uint64_t a1)
{
  outlined init with take of Transform?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Transform?);
  unsigned __int8 v2 = v7;
  long long v3 = v5[1];
  *(_OWORD *)(v1 + 336) = v5[0];
  *(_OWORD *)(v1 + 352) = v3;
  double result = *(double *)&v6;
  *(_OWORD *)(v1 + 368) = v6;
  *(_WORD *)(v1 + 384) = v2;
  return result;
}

void (*FromToByAnimation<>.byValue.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  if (*(unsigned char *)(v1 + 385))
  {
    long long v4 = 0uLL;
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      SRTByValue = (uint64_t *)RETimelineDefinitionGetSRTByValue();
      if (SRTByValue)
      {
        uint64_t v7 = *SRTByValue;
        uint64_t v6 = SRTByValue[1];
        uint64_t v9 = SRTByValue[2];
        uint64_t v8 = SRTByValue[3];
        uint64_t v10 = SRTByValue[4];
        uint64_t v11 = SRTByValue[5];
        if (one-time initialization token for identity != -1)
        {
          uint64_t v19 = SRTByValue[4];
          uint64_t v20 = SRTByValue[3];
          uint64_t v16 = SRTByValue[2];
          uint64_t v17 = SRTByValue[1];
          uint64_t v18 = *SRTByValue;
          swift_once();
          uint64_t v7 = v18;
          uint64_t v10 = v19;
          uint64_t v9 = v16;
          uint64_t v6 = v17;
          uint64_t v8 = v20;
        }
        char v12 = 0;
        *(void *)&long long v4 = v7;
        *((void *)&v4 + 1) = v6;
        *(void *)&long long v13 = v9;
        *((void *)&v13 + 1) = v8;
        *(void *)&long long v14 = v10;
        *((void *)&v14 + 1) = v11;
      }
      else
      {
        char v12 = 1;
        long long v13 = 0uLL;
        long long v14 = 0uLL;
        long long v4 = 0uLL;
      }
    }
    else
    {
      char v12 = 1;
      long long v13 = 0uLL;
      long long v14 = 0uLL;
    }
  }
  else
  {
    long long v13 = *(_OWORD *)(v1 + 352);
    long long v14 = *(_OWORD *)(v1 + 368);
    long long v4 = *(_OWORD *)(v1 + 336);
    char v12 = *(unsigned char *)(v1 + 384) & 1;
  }
  *(_OWORD *)long long v3 = v4;
  *((_OWORD *)v3 + 1) = v13;
  *((_OWORD *)v3 + 2) = v14;
  *((unsigned char *)v3 + 48) = v12;
  return FromToByAnimation<>.byValue.modify;
}

void *FromToByAnimation<>.jointNames.getter()
{
  uint64_t v1 = *(void **)(v0 + 280);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(void *)(*(void *)(v0 + 200) + 16)) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t SkeletalPoseFromJointCount = RETimelineDefinitionGetSkeletalPoseFromJointCount();
  if (!SkeletalPoseFromJointCount) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v3 = SkeletalPoseFromJointCount;
  double result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletalPoseFromJointCount & ~(SkeletalPoseFromJointCount >> 63), 0, MEMORY[0x263F8EE78]);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = result;
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (RETimelineDefinitionGetSkeletalPoseFromJointName())
      {
        uint64_t v6 = String.init(cString:)();
        unint64_t v8 = v7;
        unint64_t v10 = v1[2];
        unint64_t v9 = v1[3];
        if (v10 >= v9 >> 1) {
          uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v1);
        }
        v1[2] = v10 + 1;
        uint64_t v11 = &v1[2 * v10];
        v11[4] = v6;
        char v12 = v11 + 4;
      }
      else
      {
        unint64_t v14 = v1[2];
        unint64_t v13 = v1[3];
        if (v14 >= v13 >> 1) {
          uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v1);
        }
        v1[2] = v14 + 1;
        uint64_t v15 = &v1[2 * v14];
        v15[4] = 0;
        char v12 = v15 + 4;
        unint64_t v8 = 0xE000000000000000;
      }
      v12[1] = v8;
    }
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t FromToByAnimation<>.jointNames.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 280) = a1;
  return result;
}

uint64_t (*FromToByAnimation<>.jointNames.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = FromToByAnimation<>.jointNames.getter();
  return FromToByAnimation<>.jointNames.modify;
}

uint64_t FromToByAnimation<>.jointNames.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 280) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 280) = v2;
  }
  return result;
}

uint64_t FromToByAnimation<>.fromValue.getter@<X0>(uint64_t *a1@<X8>)
{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x263F374F8], MEMORY[0x263F37500], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), outlined copy of JointTransforms??, a1);
}

{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x263F37428], MEMORY[0x263F37420], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (uint64_t (*)(void))outlined copy of BlendShapeWeights??, a1);
}

uint64_t FromToByAnimation<>.fromValue.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = outlined consume of JointTransforms??(*(void *)(v1 + 208));
  *(void *)(v1 + 208) = v2;
  return result;
}

uint64_t (*FromToByAnimation<>.fromValue.modify(char **a1))(uint64_t *a1, char a2)
{
  a1[1] = (char *)v1;
  uint64_t v3 = *(void *)(v1 + 208);
  uint64_t SkeletalPoseFromJointCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      uint64_t SkeletalPoseFromJointCount = (char *)RETimelineDefinitionGetSkeletalPoseFromJointCount();
      if (SkeletalPoseFromJointCount)
      {
        uint64_t v5 = (uint64_t)SkeletalPoseFromJointCount;
        uint64_t SkeletalPoseFromJointCount = (char *)RETimelineDefinitionGetSkeletalPoseFromValue();
        if (SkeletalPoseFromJointCount) {
          uint64_t SkeletalPoseFromJointCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseFromJointCount, v5);
        }
      }
    }
    else
    {
      uint64_t SkeletalPoseFromJointCount = 0;
    }
  }
  *a1 = SkeletalPoseFromJointCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.fromValue.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  char *BlendShapeWeightsFromWeightCount;
  uint64_t v5;

  a1[1] = (char *)v1;
  uint64_t v3 = *(void *)(v1 + 208);
  BlendShapeWeightsFromWeightCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      BlendShapeWeightsFromWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsFromWeightCount();
      if (BlendShapeWeightsFromWeightCount)
      {
        uint64_t v5 = (uint64_t)BlendShapeWeightsFromWeightCount;
        BlendShapeWeightsFromWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsFromValue();
        if (BlendShapeWeightsFromWeightCount) {
          BlendShapeWeightsFromWeightCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsFromWeightCount, v5);
        }
      }
    }
    else
    {
      BlendShapeWeightsFromWeightCount = 0;
    }
  }
  *a1 = BlendShapeWeightsFromWeightCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.fromValue.modify;
}

uint64_t FromToByAnimation<>.fromValue.modify(uint64_t *a1, char a2)
{
  return FromToByAnimation<>.fromValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of JointTransforms??);
}

{
  return FromToByAnimation<>.fromValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t FromToByAnimation<>.toValue.getter@<X0>(uint64_t *a1@<X8>)
{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x263F37508], MEMORY[0x263F37510], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), outlined copy of JointTransforms??, a1);
}

{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x263F37438], MEMORY[0x263F37430], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (uint64_t (*)(void))outlined copy of BlendShapeWeights??, a1);
}

uint64_t FromToByAnimation<>.toValue.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = outlined consume of JointTransforms??(*(void *)(v1 + 216));
  *(void *)(v1 + 216) = v2;
  return result;
}

uint64_t (*FromToByAnimation<>.toValue.modify(char **a1))(uint64_t *a1, char a2)
{
  a1[1] = (char *)v1;
  uint64_t v3 = *(void *)(v1 + 216);
  SkeletalPoseToJointCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      SkeletalPoseToJointCount = (char *)RETimelineDefinitionGetSkeletalPoseToJointCount();
      if (SkeletalPoseToJointCount)
      {
        uint64_t v5 = (uint64_t)SkeletalPoseToJointCount;
        SkeletalPoseToJointCount = (char *)RETimelineDefinitionGetSkeletalPoseToValue();
        if (SkeletalPoseToJointCount) {
          SkeletalPoseToJointCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseToJointCount, v5);
        }
      }
    }
    else
    {
      SkeletalPoseToJointCount = 0;
    }
  }
  *a1 = SkeletalPoseToJointCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.toValue.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  char *BlendShapeWeightsToWeightCount;
  uint64_t v5;

  a1[1] = (char *)v1;
  uint64_t v3 = *(void *)(v1 + 216);
  BlendShapeWeightsToWeightCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      BlendShapeWeightsToWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsToWeightCount();
      if (BlendShapeWeightsToWeightCount)
      {
        uint64_t v5 = (uint64_t)BlendShapeWeightsToWeightCount;
        BlendShapeWeightsToWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsToValue();
        if (BlendShapeWeightsToWeightCount) {
          BlendShapeWeightsToWeightCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsToWeightCount, v5);
        }
      }
    }
    else
    {
      BlendShapeWeightsToWeightCount = 0;
    }
  }
  *a1 = BlendShapeWeightsToWeightCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.toValue.modify;
}

uint64_t FromToByAnimation<>.toValue.modify(uint64_t *a1, char a2)
{
  return FromToByAnimation<>.toValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of JointTransforms??);
}

{
  return FromToByAnimation<>.toValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t FromToByAnimation<>.byValue.getter@<X0>(uint64_t *a1@<X8>)
{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x263F374E8], MEMORY[0x263F374F0], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), outlined copy of JointTransforms??, a1);
}

{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x263F37418], MEMORY[0x263F37410], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (uint64_t (*)(void))outlined copy of BlendShapeWeights??, a1);
}

uint64_t FromToByAnimation<>.byValue.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = outlined consume of JointTransforms??(*(void *)(v1 + 224));
  *(void *)(v1 + 224) = v2;
  return result;
}

uint64_t (*FromToByAnimation<>.byValue.modify(char **a1))(uint64_t *a1, char a2)
{
  a1[1] = (char *)v1;
  uint64_t v3 = *(void *)(v1 + 224);
  SkeletalPoseByJointCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      SkeletalPoseByJointCount = (char *)RETimelineDefinitionGetSkeletalPoseByJointCount();
      if (SkeletalPoseByJointCount)
      {
        uint64_t v5 = (uint64_t)SkeletalPoseByJointCount;
        SkeletalPoseByJointCount = (char *)RETimelineDefinitionGetSkeletalPoseByValue();
        if (SkeletalPoseByJointCount) {
          SkeletalPoseByJointCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseByJointCount, v5);
        }
      }
    }
    else
    {
      SkeletalPoseByJointCount = 0;
    }
  }
  *a1 = SkeletalPoseByJointCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.byValue.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  char *BlendShapeWeightsByWeightCount;
  uint64_t v5;

  a1[1] = (char *)v1;
  uint64_t v3 = *(void *)(v1 + 224);
  BlendShapeWeightsByWeightCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      BlendShapeWeightsByWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsByWeightCount();
      if (BlendShapeWeightsByWeightCount)
      {
        uint64_t v5 = (uint64_t)BlendShapeWeightsByWeightCount;
        BlendShapeWeightsByWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsByValue();
        if (BlendShapeWeightsByWeightCount) {
          BlendShapeWeightsByWeightCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsByWeightCount, v5);
        }
      }
    }
    else
    {
      BlendShapeWeightsByWeightCount = 0;
    }
  }
  *a1 = BlendShapeWeightsByWeightCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.byValue.modify;
}

uint64_t FromToByAnimation<>.byValue.modify(uint64_t *a1, char a2)
{
  return FromToByAnimation<>.byValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of JointTransforms??);
}

{
  return FromToByAnimation<>.byValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t FromToByAnimation<>.isScaleAnimated.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 288);
  if (v1 != 2) {
    return v1 & 1;
  }
  if (*(void *)(*(void *)(v0 + 200) + 16)) {
    return RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
  }
  return 1;
}

uint64_t FromToByAnimation<>.isScaleAnimated.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 288) = result;
  return result;
}

unsigned char *(*FromToByAnimation<>.isScaleAnimated.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 288);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)) {
      char SkeletalPoseScaleChannelMask = RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
    }
    else {
      char SkeletalPoseScaleChannelMask = 1;
    }
  }
  else
  {
    char SkeletalPoseScaleChannelMask = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = SkeletalPoseScaleChannelMask;
  return FromToByAnimation<>.isScaleAnimated.modify;
}

unsigned char *FromToByAnimation<>.isScaleAnimated.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 288) = result[8];
  return result;
}

uint64_t FromToByAnimation<>.isRotationAnimated.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 289);
  if (v1 != 2) {
    return v1 & 1;
  }
  if (*(void *)(*(void *)(v0 + 200) + 16)) {
    return RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
  }
  return 1;
}

uint64_t FromToByAnimation<>.isRotationAnimated.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 289) = result;
  return result;
}

unsigned char *(*FromToByAnimation<>.isRotationAnimated.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 289);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)) {
      char SkeletalPoseRotationChannelMask = RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
    }
    else {
      char SkeletalPoseRotationChannelMask = 1;
    }
  }
  else
  {
    char SkeletalPoseRotationChannelMask = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = SkeletalPoseRotationChannelMask;
  return FromToByAnimation<>.isRotationAnimated.modify;
}

unsigned char *FromToByAnimation<>.isRotationAnimated.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 289) = result[8];
  return result;
}

uint64_t FromToByAnimation<>.isTranslationAnimated.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 290);
  if (v1 != 2) {
    return v1 & 1;
  }
  if (*(void *)(*(void *)(v0 + 200) + 16)) {
    return RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
  }
  return 1;
}

uint64_t FromToByAnimation<>.isTranslationAnimated.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 290) = result;
  return result;
}

unsigned char *(*FromToByAnimation<>.isTranslationAnimated.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 290);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16)) {
      char SkeletalPoseTranslationChannelMask = RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
    }
    else {
      char SkeletalPoseTranslationChannelMask = 1;
    }
  }
  else
  {
    char SkeletalPoseTranslationChannelMask = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = SkeletalPoseTranslationChannelMask;
  return FromToByAnimation<>.isTranslationAnimated.modify;
}

unsigned char *FromToByAnimation<>.isTranslationAnimated.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 290) = result[8];
  return result;
}

uint64_t FromToByAnimation<>.init(jointNames:name:isScaleAnimated:isRotationAnimated:isTranslationAnimated:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, uint64_t *a14, uint64_t *a15, char a16, uint64_t *a17, int a18, char *a19, char *a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v44 = *a7;
  uint64_t v30 = *a8;
  uint64_t v31 = *a14;
  uint64_t v48 = *a15;
  uint64_t v47 = a15[1];
  char v45 = *((unsigned char *)a15 + 20);
  int v46 = *((_DWORD *)a15 + 4);
  uint64_t v32 = *a17;
  uint64_t v33 = a17[1];
  char v34 = *((unsigned char *)a17 + 16);
  char v35 = *a19;
  char v36 = *a20;
  *(void *)(a9 + 296) = 0;
  v55[0] = 0;
  v55[1] = 0;
  char v56 = -1;
  char v54 = v35;
  char v53 = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v55, 0, &v54, &v53, a21, a22 & 1, (uint64_t)v57, a11, a12, a13, a23, a24 & 1, a25, a26 & 1);
  long long v37 = v57[7];
  long long v38 = v57[8];
  *(_OWORD *)(a9 + 96) = v57[6];
  *(_OWORD *)(a9 + 112) = v37;
  *(_OWORD *)(a9 + 128) = v38;
  *(void *)(a9 + 144) = v58;
  long long v39 = v57[3];
  *(_OWORD *)(a9 + 32) = v57[2];
  *(_OWORD *)(a9 + 48) = v39;
  long long v40 = v57[5];
  *(_OWORD *)(a9 + 64) = v57[4];
  *(_OWORD *)(a9 + 80) = v40;
  long long v41 = v57[1];
  *(_OWORD *)a9 = v57[0];
  *(_OWORD *)(a9 + 16) = v41;
  type metadata accessor for TimelineDefinition();
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = 0;
  *(void *)(a9 + 152) = a2;
  *(void *)(a9 + 160) = a3;
  *(void *)(a9 + 168) = v32;
  *(void *)(a9 + 176) = v33;
  *(unsigned char *)(a9 + 184) = v34;
  *(_DWORD *)(a9 + 188) = a18;
  *(unsigned char *)(a9 + 192) = 0;
  *(unsigned char *)(a9 + 193) = v36;
  *(unsigned char *)(a9 + 194) = 0;
  *(unsigned char *)(a9 + 195) = a16;
  *(unsigned char *)(a9 + 288) = a4;
  *(unsigned char *)(a9 + 289) = a5;
  *(unsigned char *)(a9 + 290) = a6;
  *(void *)(a9 + 200) = v42;
  *(void *)(a9 + 208) = v44;
  *(void *)(a9 + 216) = v30;
  *(void *)(a9 + 224) = v31;
  *(double *)(a9 + 232) = a10;
  *(unsigned char *)(a9 + 240) = 0;
  *(void *)(a9 + 256) = v48;
  *(void *)(a9 + 264) = v47;
  *(_DWORD *)(a9 + 272) = v46;
  *(unsigned char *)(a9 + 276) = v45;
  *(void *)(a9 + 280) = a1;

  return swift_bridgeObjectRetain();
}

void *FromToByAnimation<>.weightNames.getter()
{
  uint64_t v1 = *(void **)(v0 + 296);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(void *)(*(void *)(v0 + 200) + 16)) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t BlendShapeWeightsFromWeightCount = RETimelineDefinitionGetBlendShapeWeightsFromWeightCount();
  if (!BlendShapeWeightsFromWeightCount) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v3 = BlendShapeWeightsFromWeightCount;
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendShapeWeightsFromWeightCount & ~(BlendShapeWeightsFromWeightCount >> 63), 0, MEMORY[0x263F8EE78]);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = result;
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (RETimelineDefinitionGetBlendShapeWeightsFromWeightName())
      {
        uint64_t v6 = String.init(cString:)();
        unint64_t v8 = v7;
        unint64_t v10 = v1[2];
        unint64_t v9 = v1[3];
        if (v10 >= v9 >> 1) {
          uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v1);
        }
        v1[2] = v10 + 1;
        uint64_t v11 = &v1[2 * v10];
        v11[4] = v6;
        char v12 = v11 + 4;
      }
      else
      {
        unint64_t v14 = v1[2];
        unint64_t v13 = v1[3];
        if (v14 >= v13 >> 1) {
          uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v1);
        }
        v1[2] = v14 + 1;
        uint64_t v15 = &v1[2 * v14];
        v15[4] = 0;
        char v12 = v15 + 4;
        unint64_t v8 = 0xE000000000000000;
      }
      v12[1] = v8;
    }
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t FromToByAnimation<>.weightNames.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 296) = a1;
  return result;
}

uint64_t (*FromToByAnimation<>.weightNames.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = FromToByAnimation<>.weightNames.getter();
  return FromToByAnimation<>.weightNames.modify;
}

uint64_t FromToByAnimation<>.weightNames.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 296) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 296) = v2;
  }
  return result;
}

uint64_t FromToByAnimation<>.fromValue.getter@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8 = *(void *)(v5 + 208);
  uint64_t v9 = v8;
  if (v8 == 1)
  {
    uint64_t v10 = *(void *)(*(void *)(v5 + 200) + 16);
    if (v10)
    {
      uint64_t v15 = a4;
      uint64_t v9 = a1(v10);
      if (v9)
      {
        uint64_t v13 = v9;
        uint64_t v9 = a2(v10);
        if (v9) {
          uint64_t v9 = a3(v9, v13);
        }
      }
      a4 = v15;
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  *a5 = v9;

  return a4(v8);
}

uint64_t FromToByAnimation<>.fromValue.modify(uint64_t *a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(v5 + 208);
  if (a2)
  {
    swift_bridgeObjectRetain();
    a3(v6);
    *(void *)(v5 + 208) = v4;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = ((uint64_t (*)(void))a3)(*(void *)(v5 + 208));
    *(void *)(v5 + 208) = v4;
  }
  return result;
}

uint64_t FromToByAnimation<>.toValue.getter@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8 = *(void *)(v5 + 216);
  uint64_t v9 = v8;
  if (v8 == 1)
  {
    uint64_t v10 = *(void *)(*(void *)(v5 + 200) + 16);
    if (v10)
    {
      uint64_t v15 = a4;
      uint64_t v9 = a1(v10);
      if (v9)
      {
        uint64_t v13 = v9;
        uint64_t v9 = a2(v10);
        if (v9) {
          uint64_t v9 = a3(v9, v13);
        }
      }
      a4 = v15;
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  *a5 = v9;

  return a4(v8);
}

uint64_t FromToByAnimation<>.toValue.modify(uint64_t *a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(v5 + 216);
  if (a2)
  {
    swift_bridgeObjectRetain();
    a3(v6);
    *(void *)(v5 + 216) = v4;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = ((uint64_t (*)(void))a3)(*(void *)(v5 + 216));
    *(void *)(v5 + 216) = v4;
  }
  return result;
}

uint64_t FromToByAnimation<>.byValue.getter@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8 = *(void *)(v5 + 224);
  uint64_t v9 = v8;
  if (v8 == 1)
  {
    uint64_t v10 = *(void *)(*(void *)(v5 + 200) + 16);
    if (v10)
    {
      uint64_t v15 = a4;
      uint64_t v9 = a1(v10);
      if (v9)
      {
        uint64_t v13 = v9;
        uint64_t v9 = a2(v10);
        if (v9) {
          uint64_t v9 = a3(v9, v13);
        }
      }
      a4 = v15;
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  *a5 = v9;

  return a4(v8);
}

uint64_t FromToByAnimation<>.byValue.modify(uint64_t *a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(v5 + 224);
  if (a2)
  {
    swift_bridgeObjectRetain();
    a3(v6);
    *(void *)(v5 + 224) = v4;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = ((uint64_t (*)(void))a3)(*(void *)(v5 + 224));
    *(void *)(v5 + 224) = v4;
  }
  return result;
}

uint64_t FromToByAnimation<>.init(weightNames:name:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, uint64_t *a14, int a15, char *a16, char *a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  uint64_t v41 = *a4;
  uint64_t v27 = *a5;
  uint64_t v28 = *a6;
  uint64_t v44 = a7[1];
  uint64_t v45 = *a7;
  char v42 = *((unsigned char *)a7 + 20);
  int v43 = *((_DWORD *)a7 + 4);
  uint64_t v29 = *a14;
  uint64_t v30 = a14[1];
  char v31 = *((unsigned char *)a14 + 16);
  char v32 = *a16;
  char v33 = *a17;
  *(void *)(a9 + 280) = 0;
  *(_WORD *)(a9 + 288) = 514;
  *(unsigned char *)(a9 + 290) = 2;
  v50[0] = 0;
  v50[1] = 0;
  char v51 = -1;
  char v49 = v32;
  char v48 = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v50, 0, &v49, &v48, a18, a19 & 1, (uint64_t)v52, a11, a12, a13, a20, a21 & 1, a22, a23 & 1);
  long long v34 = v52[7];
  long long v35 = v52[8];
  *(_OWORD *)(a9 + 96) = v52[6];
  *(_OWORD *)(a9 + 112) = v34;
  *(_OWORD *)(a9 + 128) = v35;
  *(void *)(a9 + 144) = v53;
  long long v36 = v52[3];
  *(_OWORD *)(a9 + 32) = v52[2];
  *(_OWORD *)(a9 + 48) = v36;
  long long v37 = v52[5];
  *(_OWORD *)(a9 + 64) = v52[4];
  *(_OWORD *)(a9 + 80) = v37;
  long long v38 = v52[1];
  *(_OWORD *)a9 = v52[0];
  *(_OWORD *)(a9 + 16) = v38;
  type metadata accessor for TimelineDefinition();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = 0;
  *(void *)(a9 + 152) = a2;
  *(void *)(a9 + 160) = a3;
  *(void *)(a9 + 168) = v29;
  *(void *)(a9 + 176) = v30;
  *(unsigned char *)(a9 + 184) = v31;
  *(_DWORD *)(a9 + 188) = a15;
  *(unsigned char *)(a9 + 192) = 0;
  *(unsigned char *)(a9 + 193) = v33;
  *(unsigned char *)(a9 + 194) = 0;
  *(unsigned char *)(a9 + 195) = a8;
  *(void *)(a9 + 200) = v39;
  *(void *)(a9 + 208) = v41;
  *(void *)(a9 + 216) = v27;
  *(void *)(a9 + 224) = v28;
  *(double *)(a9 + 232) = a10;
  *(unsigned char *)(a9 + 240) = 0;
  *(void *)(a9 + 256) = v45;
  *(void *)(a9 + 264) = v44;
  *(_DWORD *)(a9 + 272) = v43;
  *(unsigned char *)(a9 + 276) = v42;
  *(void *)(a9 + 296) = a1;

  return swift_bridgeObjectRetain();
}

uint64_t outlined retain of TimelineClipProperties(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 128);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v4);
  swift_retain();
  return a1;
}

uint64_t outlined release of TimelineClipProperties(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 128);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v4);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for FromToByAnimation()
{
  return __swift_instantiateGenericMetadata();
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RESRT>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>, &demangling cache variable for type metadata for [Float]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PhysicsJoint>, &demangling cache variable for type metadata for PhysicsJoint);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineParameterProtocol>, &demangling cache variable for type metadata for StateMachineParameterProtocol);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ForceEffectBase>, &demangling cache variable for type metadata for ForceEffectBase);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Material>, (uint64_t *)&demangling cache variable for type metadata for Material);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Component>, &demangling cache variable for type metadata for Component);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnimationDefinition>, &demangling cache variable for type metadata for AnimationDefinition);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<BlendTreeNode>, &demangling cache variable for type metadata for BlendTreeNode);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Transform>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<JointTransforms>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<BlendShapeWeights>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>, &demangling cache variable for type metadata for [Int]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[simd_float4x4]>, &demangling cache variable for type metadata for [simd_float4x4]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[RESRT]>, &demangling cache variable for type metadata for [RESRT]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, &demangling cache variable for type metadata for [String]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UnsafePointer<Int8>]>, &demangling cache variable for type metadata for [UnsafePointer<Int8>]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafePointer<Int8>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RESkeletalModelSpacePoseDefinition>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RESkeletalPoseDefinition>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Entity.LoadStatistics.Observer.Log>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKActiveSceneObserver>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineConditionProtocol>, &demangling cache variable for type metadata for StateMachineConditionProtocol);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineCommandParameterProtocol>, &demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineCommand>, &demangling cache variable for type metadata for StateMachineCommand);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafePointer<UnsafePointer<Int8>>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<REBlendWeightsDefinition>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Contact>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Skeleton>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<VFXParameter>, &demangling cache variable for type metadata for VFXParameter);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [(String, String)])>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[PathSpan]>, &demangling cache variable for type metadata for [PathSpan]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PathSpan>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PiecewiseBezierCurve>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<System.Type>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[_Proto_BlendShapeMeshDescriptor_v1]>, &demangling cache variable for type metadata for [_Proto_BlendShapeMeshDescriptor_v1]);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(REMaterialAssetType, (_:_:_:))>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VirtualEnvironmentProbeComponent.Probe>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BlendShapeWeightsData>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BindPath.Part>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VideoMaterial>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4]) {
          memmove(v12, a4 + 4, 88 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SetupPair>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Terminatable, keyed: Bool)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__MaterialResource.CoreMaterialFunction>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Error>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKRig.Joint>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 176);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[22 * v8 + 4]) {
          memmove(v12, a4 + 4, 176 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKRig.Constraint>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 4]) {
          memmove(v12, a4 + 4, 160 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RESkeletalPoseMeshMapEx>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineTransition>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineState>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<REBlendWeightsMeshMap>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_Proto_BlendShapeWeightsAndMeshesGroup_v1>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Part>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Skeleton.Joint>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4]) {
          memmove(v12, a4 + 4, 144 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Model>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource._Proto_Level_v1>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Instance>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4]) {
          memmove(v12, a4 + 4, 112 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CoreIKTransform>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Double>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Shape<PiecewiseBezierCurve>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshDescriptor>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 104);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[13 * v8 + 4]) {
          memmove(v12, a4 + 4, 104 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtrudedShapeDescriptor>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 520);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[65 * v8 + 4]) {
          memmove(v12, a4 + 4, 520 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt32, simd_float4x4)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4]) {
          memmove(v12, a4 + 4, 80 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafePointer<Int8>?>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SkeletalPose>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CollisionCastHit>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(__REAsset, [__REAssetDescriptor], OpaquePointer)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(pass: __RKMaterialParameterBlock.TransparentPass, techniqueHash: Int)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Double>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PiecewiseLinearPolygon<UnsafeMutableBufferPointer<SIMD2<Double>>>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Shape<PiecewiseLinearPolygon<UnsafeMutableBufferPointer<SIMD2<Double>>>>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_Proto_BlendShapeMeshDescriptor_v1>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t outlined copy of JointTransforms??(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<REShaderAPI>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 31;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32]) {
          memmove(v13, a4 + 32, 2 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>, MEMORY[0x263F06D40], MEMORY[0x263F06D40]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AccessibilityComponent.RotorTypeInternal>, type metadata accessor for AccessibilityComponent.RotorTypeInternal, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AccessibilityComponent.CustomContent>, type metadata accessor for AccessibilityComponent.CustomContent, type metadata accessor for AccessibilityComponent.CustomContent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityInteractionSpecification>, type metadata accessor for __RKEntityInteractionSpecification, type metadata accessor for __RKEntityInteractionSpecification);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>, type metadata accessor for __RKEntityTriggerSpecification, type metadata accessor for __RKEntityTriggerSpecification);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x263F07508], MEMORY[0x263F07508]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x263F06EA8], MEMORY[0x263F06EA8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>, type metadata accessor for __RKEntityActionSpecification, type metadata accessor for __RKEntityActionSpecification);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PhotogrammetrySessionImpl.RequestMap.Entry>, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__REAssetBundle.AssetMap.SceneDescriptor>, (uint64_t (*)(void))type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor, (uint64_t (*)(void))type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CheckedContinuation<(), Never>>);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>)
                  - 8);
  int64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  unint64_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (uint64_t v15 = v11 == -1) : (uint64_t v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>)
                  - 8);
  uint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__SceneImportOperation.ImportedScene>, type metadata accessor for __SceneImportOperation.ImportedScene, type metadata accessor for __SceneImportOperation.ImportedScene);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v14;
  uint64_t v15;
  void *v16;

  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v9 + 4]) {
          memmove(v13, a4 + 4, 48 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      size_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      size_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      size_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      size_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  void *v13;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v9 + 4]) {
          memmove(v13, a4 + 4, 24 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  void *v13;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 80);
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[10 * v9 + 4]) {
          memmove(v13, a4 + 4, 80 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      size_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      size_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, unint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKRuntimeSceneCoordinator.WeakObserver>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = (unint64_t)(v10 + 4);
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      unint64_t v13 = MEMORY[0x263F8EE78] + 32;
      if (result)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || v13 >= a4 + 32 + 16 * v8)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (void *)a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        *(void *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      uint64_t v10 = *((void *)a4 + 2);
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (char *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 29;
      }
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * (v13 >> 2);
      size_t v14 = v11 + 32;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = (char *)MEMORY[0x263F8EE78];
      size_t v14 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32]) {
          memmove(v14, a4 + 32, 4 * v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[3 * v11 + 4]) {
          memmove(v15, a4 + 4, 24 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    a6(0, v11, v15, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  void *v13;
  int64_t v14;
  uint64_t v15;
  void *v16;

  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKRig.Constraint>);
  uint64_t v3 = swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  unint64_t v1;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKRig.Joint>);
  uint64_t v3 = swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t v3 = swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 29;
  }
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * (v5 >> 2);
  char v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, (_DWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transform>);
  uint64_t v3 = swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 48);
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (_OWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_retain();
  uint64_t result = REEntityGetChildCount();
  if (result < 0)
  {
LABEL_13:
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    if (result)
    {
      size_t v4 = 0;
      do
      {
        uint64_t result = REEntityGetChildCount();
        if (v4 >= result)
        {
          __break(1u);
          goto LABEL_13;
        }
        ++v4;
      }
      while (v3 != v4);
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v5 = (void *)swift_allocObject();
      char v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      _OWORD v5[2] = v3;
      _OWORD v5[3] = (2 * (v7 >> 3)) | 1;
      swift_retain();
      char v8 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v9, (uint64_t)(v5 + 4), v3, a1);
      swift_release();
      if (v8 != v3)
      {
        __break(1u);
        goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      swift_release();
      return MEMORY[0x263F8EE78];
    }
    return (uint64_t)v5;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t result = REEntityGetChildCount();
  if (result < 0)
  {
LABEL_13:
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    if (!result) {
      return MEMORY[0x263F8EE78];
    }
    size_t v4 = 0;
    do
    {
      uint64_t result = REEntityGetChildCount();
      if (v4 >= result)
      {
        __break(1u);
        goto LABEL_13;
      }
      ++v4;
    }
    while (v3 != v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v5 = (void *)swift_allocObject();
    char v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 25;
    }
    _OWORD v5[2] = v3;
    _OWORD v5[3] = (2 * (v7 >> 3)) | 1;
    swift_retain();
    char v8 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v9, (uint64_t)(v5 + 4), v3, a1);
    swift_release();
    if (v8 != v3)
    {
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
    return (uint64_t)v5;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  uint64_t v6;
  uint64_t result;
  void v8[4];

  _OWORD v8[3] = a1;
  uint64_t v2 = Entity.ComponentSet.count.getter();
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v3 = v2;
  if (v2 <= 0)
  {
    size_t v4 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Component>);
    size_t v4 = (void *)swift_allocObject();
    uint64_t v5 = _swift_stdlib_malloc_size(v4);
    uint64_t v4[2] = v3;
    v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  }
  swift_retain();
  char v6 = specialized Sequence._copySequenceContents(initializing:)(v8, (uint64_t)(v4 + 4), v3, a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == v3) {
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  char v8 = a1;
  uint64_t result = Scene.AnchorCollection.endIndex.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v3 = result;
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<HasAnchoring>);
      size_t v4 = (uint64_t *)swift_allocObject();
      uint64_t v5 = _swift_stdlib_malloc_size(v4);
      char v6 = v5 - 32;
      if (v5 < 32) {
        char v6 = v5 - 17;
      }
      uint64_t v4[2] = v3;
      v4[3] = 2 * (v6 >> 4);
      swift_retain();
      uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v4 + 4, v3, a1);
      swift_release();
      if (v7 == v3) {
        return (uint64_t)v4;
      }
      __break(1u);
    }
    return MEMORY[0x263F8EE78];
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource._Proto_Level_v1>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  long long v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  void v10[3];
  unint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  unsigned char v14[8];
  unsigned char v15[8];
  uint64_t v16;

  uint64_t v2 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v2;
  uint64_t v13 = *(void *)(a1 + 32);
  outlined init with take of Transform?((uint64_t)v12, (uint64_t)v15, &demangling cache variable for type metadata for AnimationLibraryResource?);
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)&v16, &demangling cache variable for type metadata for AnimationLibraryResource?);
  uint64_t v3 = v16;
  if (v16)
  {
    swift_beginAccess();
    size_t v4 = *(void *)(v3 + 24);
  }
  else
  {
    outlined init with take of Transform?((uint64_t)v12 + 8, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
    outlined init with take of Transform?((uint64_t)v14, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
    size_t v4 = v10[0];
    if (!v10[0]) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: AnimationResource)>);
  char v6 = (void *)swift_allocObject();
  uint64_t v7 = _swift_stdlib_malloc_size(v6);
  _OWORD v6[2] = v5;
  v6[3] = 2 * ((uint64_t)(v7 - 32) / 24);
  outlined retain of AnimationLibraryComponent.AnimationCollection(a1);
  char v8 = specialized Sequence._copySequenceContents(initializing:)(&v11, v6 + 4, v5);
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v8 != v5)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v6;
}

{
  unint64_t v1;
  void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Skeleton>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  unint64_t v1;
  void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Instance>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  unint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BlendShapeWeightsData>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 1;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  char v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  unint64_t v1;
  void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Model>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  unint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Part>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 + 31;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRelease();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  unint64_t v1;
  void *v3;
  size_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SkeletalPose>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<AudioMixGroup>, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Entity.ConfigurationCatalog.Configuration>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  char v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  char v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtrudedGlyphDescriptor>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 + 31;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 6);
  char v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  char v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ComponentInfo>, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PhysicsJoint>);
  uint64_t v5 = (void *)swift_allocObject();
  size_t v6 = _swift_stdlib_malloc_size(v5);
  _OWORD v5[2] = v2;
  _OWORD v5[3] = 2 * ((uint64_t)(v6 - 32) / 40);
  uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v9, (uint64_t)(v5 + 4), v2, a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v7 != v2)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v5;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, (uint64_t (*)(uint64_t *, void *, uint64_t, unint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

void specialized _copyCollectionToContiguousArray<A>(_:)(void *a1)
{
  uint64_t PartCount = DRMeshGetPartCount();
  if (PartCount)
  {
    uint64_t v3 = PartCount;
    if (PartCount <= 0)
    {
      uint64_t v4 = MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LowLevelMesh.Part>);
      uint64_t v4 = swift_allocObject();
      int64_t v5 = _swift_stdlib_malloc_size((const void *)v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 + 31;
      }
      *(void *)(v4 + 16) = v3;
      *(void *)(v4 + 24) = 2 * (v6 >> 6);
    }
    uint64_t v7 = specialized Sequence._copySequenceContents(initializing:)(v8, (_OWORD *)(v4 + 32), v3, (uint64_t)a1);

    if (v7 != v3) {
      __break(1u);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9[2];

  unint64_t v2 = geom_collection_size_u();
  if (v2)
  {
    uint64_t v3 = v2;
    if (v2 < 1)
    {
      uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
      uint64_t v4 = (void *)swift_allocObject();
      int64_t v5 = _swift_stdlib_malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 29;
      }
      uint64_t v4[2] = v3;
      v4[3] = 2 * (v6 >> 2);
    }
    uint64_t v7 = a1;
    char v8 = specialized Sequence._copySequenceContents(initializing:)(v9, (uint64_t)(v4 + 4), v3);

    if (v8 != v3) {
      __break(1u);
    }
  }
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, void *, uint64_t, unint64_t, uint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v6 <= 0)
    {
      uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v7 = (void *)swift_allocObject();
      int64_t v8 = _swift_stdlib_malloc_size(v7);
      uint64_t v9 = v8 - 32;
      if (v8 < 32) {
        uint64_t v9 = v8 - 25;
      }
      v7[2] = v6;
      v7[3] = (2 * (v9 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3 = (uint64_t (*)(uint64_t *, void *, uint64_t, unint64_t, uint64_t))a3(&v11, v7 + 4, v6, a1, a2);
    swift_bridgeObjectRelease();
    if (a3 == (uint64_t (*)(uint64_t *, void *, uint64_t, unint64_t, uint64_t))v6) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v6) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v7;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[0] = a1;
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  uint64_t v6 = Entity.ComponentSet.distance(from:to:)(&v15, &v14);
  if (!v6) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v7 = (uint64_t)v6;
  if ((uint64_t)v6 <= 0)
  {
    int64_t v8 = (uint64_t *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Entity.ComponentSet.Index>);
    int64_t v8 = (uint64_t *)swift_allocObject();
    int64_t v9 = _swift_stdlib_malloc_size(v8);
    uint64_t v10 = v9 - 32;
    if (v9 < 32) {
      uint64_t v10 = v9 - 25;
    }
    id v8[2] = v7;
    _OWORD v8[3] = 2 * (v10 >> 3);
  }
  swift_retain();
  uint64_t v11 = specialized Sequence._copySequenceContents(initializing:)(v13, v8 + 4, v7, a1, a2, a3);
  uint64_t result = swift_release();
  if (v11 == (void *)v7) {
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t v4 = 8 * a2;
    int64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 25;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 3);
    int64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    uint64_t v4 = 4 * a2;
    int64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 29;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 2);
    int64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 4 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    uint64_t v4 = 8 * a2;
    int64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 25;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 3);
    int64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    uint64_t v4 = 8 * a2;
    int64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 25;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 3);
    int64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_quatf>);
    uint64_t v4 = 16 * a2;
    int64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 17;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 4);
    int64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 16 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  size_t v5;
  char *v6;
  uint64_t result;

  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RESRT>);
    uint64_t v4 = (char *)swift_allocObject();
    int64_t v5 = _swift_stdlib_malloc_size(v4);
    *((void *)v4 + 2) = a2;
    *((void *)v4 + 3) = 2 * ((uint64_t)(v5 - 32) / 48);
    int64_t v6 = v4 + 32;
    if (&v4[48 * a2 + 32] <= a1 || v6 >= &a1[48 * a2])
    {
      memcpy(v6, a1, 48 * a2);
      return (uint64_t)v4;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Double>>);
    uint64_t v4 = 16 * a2;
    int64_t v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 17;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 4);
    int64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 16 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2, uint64_t *a3)
{
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v5 = 16 * a2;
    int64_t v6 = (char *)swift_allocObject();
    int64_t v7 = _swift_stdlib_malloc_size(v6);
    uint64_t v8 = v7 - 32;
    if (v7 < 32) {
      uint64_t v8 = v7 - 17;
    }
    *((void *)v6 + 2) = a2;
    *((void *)v6 + 3) = 2 * (v8 >> 4);
    int64_t v9 = v6 + 32;
    if (&v6[v5 + 32] <= a1 || v9 >= &a1[v5])
    {
      memcpy(v9, a1, 16 * a2);
      return (uint64_t)v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of JointTransforms??(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_227DF8768@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FromToByAnimation.name.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_227DF8798()
{
  return 16;
}

__n128 sub_227DF87A4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227DF87B0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = FromToByAnimation.blendLayer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227DF87DC(unsigned int *a1)
{
  return FromToByAnimation.blendLayer.setter(*a1);
}

uint64_t sub_227DF8804()
{
  return 16;
}

__n128 sub_227DF8810(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227DF8824()
{
  return 16;
}

__n128 sub_227DF8830(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227DF883C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = FromToByAnimation.fillMode.getter(&v3);
  *a1 = v3;
  return result;
}

unsigned __int8 *sub_227DF8878(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return FromToByAnimation.fillMode.setter(&v2);
}

uint64_t sub_227DF88B0()
{
  return 16;
}

__n128 sub_227DF88BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227DF88C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = FromToByAnimation.isAdditive.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_227DF88F8(unsigned __int8 *a1)
{
  return FromToByAnimation.isAdditive.setter(*a1);
}

uint64_t sub_227DF8920()
{
  return 16;
}

__n128 sub_227DF892C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227DF8940()
{
  return 16;
}

__n128 sub_227DF894C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227DF8958@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = FromToByAnimation.trimStart.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227DF898C(uint64_t a1)
{
  return FromToByAnimation.trimStart.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_227DF89BC()
{
  return 16;
}

__n128 sub_227DF89C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227DF89D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = FromToByAnimation.trimEnd.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227DF8A08(uint64_t a1)
{
  return FromToByAnimation.trimEnd.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_227DF8A38()
{
  return 16;
}

__n128 sub_227DF8A44(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227DF8A50@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = FromToByAnimation.trimDuration.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227DF8A84(uint64_t a1)
{
  return FromToByAnimation.trimDuration.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_227DF8AB4()
{
  return 16;
}

__n128 sub_227DF8AC0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227DF8ACC(double *a1@<X8>)
{
  *a1 = FromToByAnimation.offset.getter();
}

void sub_227DF8AF8(double *a1)
{
}

uint64_t sub_227DF8B20()
{
  return 16;
}

__n128 sub_227DF8B2C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227DF8B38(double *a1@<X8>)
{
  *a1 = FromToByAnimation.delay.getter();
}

void sub_227DF8B64(double *a1)
{
}

uint64_t sub_227DF8B8C()
{
  return 16;
}

__n128 sub_227DF8B98(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227DF8BA4(float *a1@<X8>)
{
  *a1 = FromToByAnimation.speed.getter();
}

void sub_227DF8BD0(float *a1)
{
}

uint64_t sub_227DF8BF8()
{
  return 16;
}

__n128 sub_227DF8C04(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227DF8C10(unsigned char *a1@<X8>)
{
  FromToByAnimation.repeatMode.getter(&v2);
  *a1 = v2;
}

unsigned char *sub_227DF8C4C(char *a1)
{
  char v2 = *a1;
  return FromToByAnimation.repeatMode.setter(&v2);
}

uint64_t sub_227DF8C84()
{
  return 16;
}

__n128 sub_227DF8C90(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227DF8C9C(double *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FromToByAnimation();
  *a1 = FromToByAnimation.duration.getter(v2);
}

uint64_t sub_227DF8CD8(double *a1)
{
  double v1 = *a1;
  uint64_t v2 = type metadata accessor for FromToByAnimation();
  return FromToByAnimation.duration.setter(v2, v1);
}

uint64_t sub_227DF8D1C()
{
  return 16;
}

__n128 sub_227DF8D28(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227DF8D38(uint64_t result, uint64_t a2)
{
  BOOL v2 = *(unsigned char *)(result + 4) != 0;
  *(_DWORD *)(a2 + 208) = *(_DWORD *)result;
  *(unsigned char *)(a2 + 212) = v2;
  *(unsigned char *)(a2 + 213) = 0;
  return result;
}

uint64_t sub_227DF8D60()
{
  return 0;
}

uint64_t sub_227DF8D74(uint64_t result, uint64_t a2)
{
  BOOL v2 = *(unsigned char *)(result + 4) != 0;
  *(_DWORD *)(a2 + 216) = *(_DWORD *)result;
  *(unsigned char *)(a2 + 220) = v2;
  *(unsigned char *)(a2 + 221) = 0;
  return result;
}

uint64_t sub_227DF8D9C()
{
  return 0;
}

uint64_t sub_227DF8DB0(uint64_t result, uint64_t a2)
{
  BOOL v2 = *(unsigned char *)(result + 4) != 0;
  *(_DWORD *)(a2 + 224) = *(_DWORD *)result;
  *(unsigned char *)(a2 + 228) = v2;
  *(unsigned char *)(a2 + 229) = 0;
  return result;
}

uint64_t sub_227DF8DD8()
{
  return 0;
}

uint64_t sub_227DF8DE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<Double>(a1, MEMORY[0x263F37448], a2);
}

uint64_t sub_227DF8E18()
{
  return 0;
}

uint64_t sub_227DF8E28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.toValue : FromToByAnimation<Double>(a1, MEMORY[0x263F37450], a2);
}

uint64_t sub_227DF8E58()
{
  return 0;
}

uint64_t sub_227DF8E68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.byValue : FromToByAnimation<Double>(a1, MEMORY[0x263F37440], a2);
}

uint64_t sub_227DF8E98()
{
  return 0;
}

uint64_t sub_227DF8EA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<Double>(a1, MEMORY[0x263F37468], a2);
}

uint64_t keypath_set_90Tm(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 208) = *(void *)result;
  *(_WORD *)(a2 + 216) = v2;
  return result;
}

uint64_t sub_227DF8EF0()
{
  return 0;
}

uint64_t sub_227DF8F00@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.toValue : FromToByAnimation<Double>(a1, MEMORY[0x263F37470], a2);
}

uint64_t keypath_set_94Tm(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 224) = *(void *)result;
  *(_WORD *)(a2 + 232) = v2;
  return result;
}

uint64_t sub_227DF8F48()
{
  return 0;
}

uint64_t sub_227DF8F58@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.byValue : FromToByAnimation<Double>(a1, MEMORY[0x263F37460], a2);
}

uint64_t keypath_set_98Tm(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 240) = *(void *)result;
  *(_WORD *)(a2 + 248) = v2;
  return result;
}

uint64_t sub_227DF8FA0()
{
  return 0;
}

uint64_t sub_227DF8FB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<SIMD3<Float>>(a1, MEMORY[0x263F37488], a2);
}

uint64_t sub_227DF8FE0()
{
  return 0;
}

uint64_t sub_227DF8FF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.toValue : FromToByAnimation<SIMD3<Float>>(a1, MEMORY[0x263F37490], a2);
}

uint64_t sub_227DF9020()
{
  return 0;
}

uint64_t sub_227DF9030@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.byValue : FromToByAnimation<SIMD3<Float>>(a1, MEMORY[0x263F37480], a2);
}

uint64_t sub_227DF9060()
{
  return 0;
}

uint64_t sub_227DF9070@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<SIMD3<Float>>(a1, MEMORY[0x263F374A8], a2);
}

uint64_t sub_227DF90A0()
{
  return 0;
}

uint64_t sub_227DF90B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.toValue : FromToByAnimation<SIMD3<Float>>(a1, MEMORY[0x263F374B0], a2);
}

uint64_t sub_227DF90E0()
{
  return 0;
}

uint64_t sub_227DF90F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.byValue : FromToByAnimation<SIMD3<Float>>(a1, MEMORY[0x263F374A0], a2);
}

uint64_t sub_227DF9120()
{
  return 0;
}

uint64_t sub_227DF9130@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<SIMD3<Float>>(a1, MEMORY[0x263F374D0], a2);
}

__n128 keypath_set_114Tm(__n128 *a1, __n128 *a2)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  a2[13] = *a1;
  a2[14].n128_u16[0] = v2;
  return result;
}

uint64_t sub_227DF9178()
{
  return 0;
}

uint64_t sub_227DF9188@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.toValue : FromToByAnimation<SIMD3<Float>>(a1, MEMORY[0x263F374D8], a2);
}

__n128 keypath_set_118Tm(__n128 *a1, __n128 *a2)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  a2[15] = *a1;
  a2[16].n128_u16[0] = v2;
  return result;
}

uint64_t sub_227DF91D0()
{
  return 0;
}

uint64_t sub_227DF91E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.byValue : FromToByAnimation<SIMD3<Float>>(a1, MEMORY[0x263F374C8], a2);
}

__n128 keypath_set_122Tm(__n128 *a1, __n128 *a2)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  a2[17] = *a1;
  a2[18].n128_u16[0] = v2;
  return result;
}

uint64_t sub_227DF9228()
{
  return 0;
}

uint64_t sub_227DF9238@<X0>(uint64_t a1@<X8>)
{
  FromToByAnimation<>.fromValue.getter((uint64_t)v3);
  return outlined init with take of Transform?((uint64_t)v3, a1, &demangling cache variable for type metadata for Transform?);
}

__n128 sub_227DF9280(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 224) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 240) = result;
  *(_WORD *)(a2 + 256) = v2;
  return result;
}

uint64_t sub_227DF92A0()
{
  return 0;
}

uint64_t sub_227DF92B0@<X0>(uint64_t a1@<X8>)
{
  FromToByAnimation<>.toValue.getter((uint64_t)v3);
  return outlined init with take of Transform?((uint64_t)v3, a1, &demangling cache variable for type metadata for Transform?);
}

__n128 sub_227DF92F8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 272) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 288) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 304) = result;
  *(_WORD *)(a2 + 320) = v2;
  return result;
}

uint64_t sub_227DF9318()
{
  return 0;
}

uint64_t sub_227DF9328@<X0>(uint64_t a1@<X8>)
{
  FromToByAnimation<>.byValue.getter((uint64_t)v3);
  return outlined init with take of Transform?((uint64_t)v3, a1, &demangling cache variable for type metadata for Transform?);
}

__n128 sub_227DF9370(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 336) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 352) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 368) = result;
  *(_WORD *)(a2 + 384) = v2;
  return result;
}

uint64_t sub_227DF9390()
{
  return 0;
}

void *sub_227DF93A0@<X0>(void *a1@<X8>)
{
  __n128 result = FromToByAnimation<>.jointNames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227DF93CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 280) = v3;
  return result;
}

uint64_t sub_227DF9410()
{
  return 0;
}

uint64_t sub_227DF9420@<X0>(void *a1@<X8>)
{
  uint64_t result = FromToByAnimation<>.fromValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_227DF945C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_166Tm(a1, a2, a3, a4, outlined consume of JointTransforms??);
}

uint64_t sub_227DF9474()
{
  return 0;
}

uint64_t sub_227DF9484@<X0>(void *a1@<X8>)
{
  uint64_t result = FromToByAnimation<>.toValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_227DF94C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_170Tm(a1, a2, a3, a4, outlined consume of JointTransforms??);
}

uint64_t sub_227DF94D8()
{
  return 0;
}

uint64_t sub_227DF94E8@<X0>(void *a1@<X8>)
{
  uint64_t result = FromToByAnimation<>.byValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_227DF9524(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_174Tm(a1, a2, a3, a4, outlined consume of JointTransforms??);
}

uint64_t sub_227DF953C()
{
  return 0;
}

uint64_t sub_227DF954C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 288);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(a1 + 200) + 16)) {
      uint64_t result = RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
    }
    else {
      uint64_t result = 1;
    }
  }
  else
  {
    uint64_t result = v3 & 1;
  }
  *a2 = result;
  return result;
}

unsigned char *sub_227DF959C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 288) = *result;
  return result;
}

uint64_t sub_227DF95A8()
{
  return 0;
}

uint64_t sub_227DF95B8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 289);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(a1 + 200) + 16)) {
      uint64_t result = RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
    }
    else {
      uint64_t result = 1;
    }
  }
  else
  {
    uint64_t result = v3 & 1;
  }
  *a2 = result;
  return result;
}

unsigned char *sub_227DF9608(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 289) = *result;
  return result;
}

uint64_t sub_227DF9614()
{
  return 0;
}

uint64_t sub_227DF9624@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 290);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(a1 + 200) + 16)) {
      uint64_t result = RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
    }
    else {
      uint64_t result = 1;
    }
  }
  else
  {
    uint64_t result = v3 & 1;
  }
  *a2 = result;
  return result;
}

unsigned char *sub_227DF9674(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 290) = *result;
  return result;
}

uint64_t sub_227DF9680()
{
  return 0;
}

void *sub_227DF9690@<X0>(void *a1@<X8>)
{
  uint64_t result = FromToByAnimation<>.weightNames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227DF96BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 296) = v3;
  return result;
}

uint64_t sub_227DF9700()
{
  return 0;
}

uint64_t sub_227DF9710@<X0>(void *a1@<X8>)
{
  uint64_t result = FromToByAnimation<>.fromValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_227DF974C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_166Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t keypath_set_166Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  uint64_t result = a5(v8);
  *(void *)(a2 + 208) = v7;
  return result;
}

uint64_t sub_227DF97B0()
{
  return 0;
}

uint64_t sub_227DF97C0@<X0>(void *a1@<X8>)
{
  uint64_t result = FromToByAnimation<>.toValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_227DF97FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_170Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t keypath_set_170Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  uint64_t result = a5(v8);
  *(void *)(a2 + 216) = v7;
  return result;
}

uint64_t sub_227DF9860()
{
  return 0;
}

uint64_t sub_227DF9870@<X0>(void *a1@<X8>)
{
  uint64_t result = FromToByAnimation<>.byValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_227DF98AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_174Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t keypath_set_174Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  uint64_t result = a5(v8);
  *(void *)(a2 + 224) = v7;
  return result;
}

uint64_t sub_227DF9910()
{
  return 0;
}

uint64_t type metadata instantiation function for FromToByAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 64);
}

uint64_t type metadata completion function for FromToByAnimation()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FromToByAnimation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = v4 + ((unsigned __int16)((v3 & 0xF0) + 31) & (unsigned __int16)~(v3 & 0xF0) & 0x1F0);
  swift_retain();
  return v5;
}

uint64_t destroy for FromToByAnimation(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_bridgeObjectRelease();
  int v4 = *(unsigned __int8 *)(a1 + 128);
  if (v4 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 112), *(void *)(a1 + 120), v4);
  }
  swift_release();
  unint64_t v5 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  int v6 = *(unsigned __int8 *)(v5 + 32);
  if (v6 != 255) {
    outlined consume of BindTarget(*(void *)(v5 + 16), *(void *)(v5 + 24), v6);
  }
  swift_release();
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v5 + v9 + 56;
  uint64_t v11 = ~v9;
  int64_t v12 = (unsigned __int16 *)(v10 & ~v9);
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  if (v13) {
    uint64_t v14 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(v7 - 8) + 64) + 1;
  }
  if (v13 > 1)
  {
    uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (v18(v10 & ~v9, *(unsigned int *)(v8 + 84), v7) >= 2)
    {
      size_t v19 = (unsigned __int16 *)(((v10 | v9) + v14) & v11);
      goto LABEL_42;
    }
  }
  else if (*((unsigned char *)v12 + v14))
  {
    int v15 = (*((unsigned __int8 *)v12 + v14) - 1) << (8 * v14);
    if (v14 > 3) {
      int v15 = 0;
    }
    if (v14)
    {
      int v16 = v14 <= 3 ? v14 : 4;
      switch(v16)
      {
        case 2:
          int v17 = *v12;
          break;
        case 3:
          int v17 = *v12 | (*(unsigned __int8 *)((v10 & ~v9) + 2) << 16);
          break;
        case 4:
          int v17 = *(_DWORD *)v12;
          break;
        default:
          int v17 = *(unsigned __int8 *)v12;
          break;
      }
    }
    else
    {
      int v17 = 0;
    }
    if ((v17 | v15) != 0xFFFFFFFF)
    {
      uint64_t v20 = v14 + 1;
      uint64_t v21 = (v10 | v9) + v14 + 1;
      uint64_t v22 = ~v9;
      size_t v19 = (unsigned __int16 *)(v21 & ~v9);
      int v23 = *((unsigned __int8 *)v19 + v14);
      if (!*((unsigned char *)v19 + v14)) {
        goto LABEL_51;
      }
      goto LABEL_34;
    }
  }
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v18(v10 & ~v9, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10 & ~v9, v7);
  }
  if (v13 >= 2) {
    uint64_t v24 = v14;
  }
  else {
    uint64_t v24 = v14 + 1;
  }
  size_t v19 = (unsigned __int16 *)(((v10 | v9) + v24) & v11);
  if (v13 <= 1)
  {
    uint64_t v22 = ~v9;
    uint64_t v20 = v14 + 1;
    int v23 = *((unsigned __int8 *)v19 + v14);
    if (!*((unsigned char *)v19 + v14)) {
      goto LABEL_51;
    }
LABEL_34:
    int v25 = (v23 - 1) << (8 * v14);
    if (v14 > 3) {
      int v25 = 0;
    }
    if (v14)
    {
      if (v14 <= 3) {
        int v26 = v14;
      }
      else {
        int v26 = 4;
      }
      switch(v26)
      {
        case 2:
          int v27 = *v19;
          break;
        case 3:
          int v27 = *v19 | (*((unsigned __int8 *)v19 + 2) << 16);
          break;
        case 4:
          int v27 = *(_DWORD *)v19;
          break;
        default:
          int v27 = *(unsigned __int8 *)v19;
          break;
      }
    }
    else
    {
      int v27 = 0;
    }
    if ((v27 | v25) != 0xFFFFFFFF)
    {
      uint64_t v28 = (unsigned __int16 *)(((unint64_t)v19 + v9 + v20) & v22);
      goto LABEL_54;
    }
    goto LABEL_51;
  }
LABEL_42:
  if (v18((uint64_t)v19, v13, v7) >= 2)
  {
    uint64_t v28 = (unsigned __int16 *)(((unint64_t)v19 + v14 + v9) & v11);
    goto LABEL_63;
  }
  uint64_t v22 = ~v9;
  uint64_t v20 = v14;
LABEL_51:
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v18((uint64_t)v19, 1, v7)) {
    (*(void (**)(unsigned __int16 *, uint64_t))(v8 + 8))(v19, v7);
  }
  uint64_t v28 = (unsigned __int16 *)(((unint64_t)v19 + v20 + v9) & v22);
  if (v13 > 1)
  {
LABEL_63:
    if (v18((uint64_t)v28, v13, v7) >= 2) {
      goto LABEL_72;
    }
    goto LABEL_70;
  }
LABEL_54:
  if (!*((unsigned char *)v28 + v14)) {
    goto LABEL_70;
  }
  int v29 = (*((unsigned __int8 *)v28 + v14) - 1) << (8 * v14);
  if (v14 > 3) {
    int v29 = 0;
  }
  if (v14)
  {
    int v30 = v14 <= 3 ? v14 : 4;
    switch(v30)
    {
      case 2:
        int v31 = *v28;
        break;
      case 3:
        int v31 = *v28 | (*((unsigned __int8 *)v28 + 2) << 16);
        break;
      case 4:
        int v31 = *(_DWORD *)v28;
        break;
      default:
        int v31 = *(unsigned __int8 *)v28;
        break;
    }
  }
  else
  {
    int v31 = 0;
  }
  if ((v31 | v29) == 0xFFFFFFFF)
  {
LABEL_70:
    if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48))(v28, 1, v7)) {
      (*(void (**)(unsigned __int16 *, uint64_t))(v8 + 8))(v28, v7);
    }
  }
LABEL_72:
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FromToByAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  int v8 = *(unsigned __int8 *)(a2 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8 == 255)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 112);
    uint64_t v10 = *(void *)(a2 + 120);
    outlined copy of BindTarget(v9, v10, v8);
    *(void *)(a1 + 112) = v9;
    *(void *)(a1 + 120) = v10;
    *(unsigned char *)(a1 + 128) = v8;
  }
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(unsigned char *)(a1 + 139) = *(unsigned char *)(a2 + 139);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  unint64_t v11 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  int v13 = *(unsigned __int8 *)(v12 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13 == 255)
  {
    long long v16 = *(_OWORD *)(v12 + 16);
    *(unsigned char *)(v11 + 32) = *(unsigned char *)(v12 + 32);
    *(_OWORD *)(v11 + 16) = v16;
  }
  else
  {
    uint64_t v14 = *(void *)(v12 + 16);
    uint64_t v15 = *(void *)(v12 + 24);
    outlined copy of BindTarget(v14, v15, v13);
    *(void *)(v11 + 16) = v14;
    *(void *)(v11 + 24) = v15;
    *(unsigned char *)(v11 + 32) = v13;
  }
  int v17 = *(_DWORD *)(v12 + 36);
  *(unsigned char *)(v11 + 40) = *(unsigned char *)(v12 + 40);
  *(_DWORD *)(v11 + 36) = v17;
  *(_WORD *)(v11 + 41) = *(_WORD *)(v12 + 41);
  *(unsigned char *)(v11 + 43) = *(unsigned char *)(v12 + 43);
  *(void *)(v11 + 48) = *(void *)(v12 + 48);
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v12 + v20;
  uint64_t v22 = v11 + v20 + 56;
  uint64_t v23 = ~v20;
  __dst = (void *)(v22 & ~v20);
  uint64_t v24 = v21 + 56;
  int v25 = (unsigned __int16 *)((v21 + 56) & ~v20);
  uint64_t v26 = *(unsigned int *)(v19 + 84);
  if (v26) {
    size_t v27 = *(void *)(v19 + 64);
  }
  else {
    size_t v27 = *(void *)(v19 + 64) + 1;
  }
  swift_retain();
  uint64_t v55 = v18;
  if (v26 <= 1)
  {
    if (*((unsigned char *)v25 + v27))
    {
      int v28 = (*((unsigned __int8 *)v25 + v27) - 1) << (8 * v27);
      if (v27 > 3) {
        int v28 = 0;
      }
      if (v27)
      {
        int v29 = v27 <= 3 ? v27 : 4;
        switch(v29)
        {
          case 2:
            int v30 = *v25;
            break;
          case 3:
            int v30 = *v25 | (*((unsigned __int8 *)v25 + 2) << 16);
            break;
          case 4:
            int v30 = *(_DWORD *)v25;
            break;
          default:
            int v30 = *(unsigned __int8 *)v25;
            break;
        }
      }
      else
      {
        int v30 = 0;
      }
      if ((v30 | v28) != 0xFFFFFFFF) {
        goto LABEL_31;
      }
    }
LABEL_21:
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v19 + 48))(v25, 1, v18))
    {
      memcpy(__dst, v25, v27);
      if (v26 > 1) {
        goto LABEL_35;
      }
    }
    else
    {
      (*(void (**)(void *, unsigned __int16 *, uint64_t))(v19 + 16))(__dst, v25, v18);
      uint64_t v23 = ~v20;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
      if (v26 > 1) {
        goto LABEL_35;
      }
    }
    *((unsigned char *)__dst + v27) = 0;
    goto LABEL_35;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v19 + 48))(v25, v26, v18) < 2) {
    goto LABEL_21;
  }
LABEL_31:
  if (v26 >= 2) {
    size_t v31 = v27;
  }
  else {
    size_t v31 = v27 + 1;
  }
  memcpy(__dst, v25, v31);
LABEL_35:
  if (v26 >= 2) {
    size_t v32 = v27;
  }
  else {
    size_t v32 = v27 + 1;
  }
  char v33 = (void *)(((v22 | v20) + v32) & v23);
  long long v34 = (unsigned __int8 *)(((v24 | v20) + v32) & v23);
  if (v26 > 1)
  {
    size_t v39 = ((v24 | v20) + v32) & v23;
    uint64_t v35 = v55;
    if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v19 + 48))(v39, v26, v55) >= 2) {
      goto LABEL_59;
    }
LABEL_49:
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v19 + 48))(v34, 1, v35))
    {
      memcpy(v33, v34, v27);
      if (v26 < 2)
      {
LABEL_51:
        *((unsigned char *)v33 + v27) = 0;
        long long v40 = (void *)(((unint64_t)v33 + v32 + v20) & v23);
        uint64_t v41 = (unsigned __int16 *)((unint64_t)&v34[v32 + v20] & v23);
LABEL_60:
        if (*((unsigned char *)v41 + v27))
        {
          int v42 = (*((unsigned __int8 *)v41 + v27) - 1) << (8 * v27);
          if (v27 > 3) {
            int v42 = 0;
          }
          if (v27)
          {
            int v43 = v27 <= 3 ? v27 : 4;
            switch(v43)
            {
              case 2:
                int v44 = *v41;
                break;
              case 3:
                int v44 = *v41 | (*((unsigned __int8 *)v41 + 2) << 16);
                break;
              case 4:
                int v44 = *(_DWORD *)v41;
                break;
              default:
                int v44 = *(unsigned __int8 *)v41;
                break;
            }
          }
          else
          {
            int v44 = 0;
          }
          if ((v44 | v42) != 0xFFFFFFFF) {
            goto LABEL_80;
          }
        }
        goto LABEL_70;
      }
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v19 + 16))(v33, v34, v35);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v33, 0, 1, v35);
      if (v26 < 2) {
        goto LABEL_51;
      }
    }
    long long v40 = (void *)(((unint64_t)v33 + v32 + v20) & v23);
    uint64_t v41 = (unsigned __int16 *)((unint64_t)&v34[v32 + v20] & v23);
    goto LABEL_69;
  }
  uint64_t v35 = v55;
  if (!v34[v27]) {
    goto LABEL_49;
  }
  int v36 = (v34[v27] - 1) << (8 * v27);
  if (v27 > 3) {
    int v36 = 0;
  }
  if (v27)
  {
    int v37 = v27 <= 3 ? v27 : 4;
    switch(v37)
    {
      case 2:
        int v38 = *(unsigned __int16 *)v34;
        break;
      case 3:
        int v38 = *(unsigned __int16 *)v34 | (v34[2] << 16);
        break;
      case 4:
        int v38 = *(_DWORD *)v34;
        break;
      default:
        int v38 = *v34;
        break;
    }
  }
  else
  {
    int v38 = 0;
  }
  if ((v38 | v36) == 0xFFFFFFFF) {
    goto LABEL_49;
  }
LABEL_59:
  memcpy(v33, v34, v32);
  long long v40 = (void *)(((unint64_t)v33 + v32 + v20) & v23);
  uint64_t v41 = (unsigned __int16 *)((unint64_t)&v34[v32 + v20] & v23);
  if (v26 <= 1) {
    goto LABEL_60;
  }
LABEL_69:
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v19 + 48))(v41, v26, v35) >= 2)
  {
LABEL_80:
    memcpy(v40, v41, v32);
    goto LABEL_81;
  }
LABEL_70:
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v19 + 48))(v41, 1, v35))
  {
    memcpy(v40, v41, v27);
    if (v26 > 1) {
      goto LABEL_81;
    }
    goto LABEL_74;
  }
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v19 + 16))(v40, v41, v35);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v40, 0, 1, v35);
  if (v26 <= 1) {
LABEL_74:
  }
    *((unsigned char *)v40 + v27) = 0;
LABEL_81:
  unint64_t v45 = ((unint64_t)v40 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = ((unint64_t)v41 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v47 = *(void *)v46;
  *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
  *(void *)unint64_t v45 = v47;
  unint64_t v48 = ((unint64_t)v40 + v32 + 31) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v49 = ((unint64_t)v41 + v32 + 31) & 0xFFFFFFFFFFFFFFF0;
  long long v50 = *(_OWORD *)v49;
  *(void *)(v48 + 13) = *(void *)(v49 + 0xD);
  *(_OWORD *)unint64_t v48 = v50;
  unint64_t v51 = (v48 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v52 = (v49 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v51 = *(void *)v52;
  *(unsigned char *)(v51 + 8) = *(unsigned char *)(v52 + 8);
  *(unsigned char *)(v51 + 9) = *(unsigned char *)(v52 + 9);
  *(unsigned char *)(v51 + 10) = *(unsigned char *)(v52 + 10);
  *(void *)((v51 + 18) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v52 + 18) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FromToByAnimation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(void *)a1 = v6;
  uint64_t v7 = a2[2];
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 19);
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v10;
  *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
  *(void *)(a1 + 88) = a2[11];
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v11 = (long long *)(a1 + 112);
  unint64_t v12 = (long long *)(a2 + 14);
  int v13 = *((unsigned __int8 *)a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v13 == 255)
    {
      long long v22 = *v12;
      *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
      *unint64_t v11 = v22;
    }
    else
    {
      uint64_t v19 = a2[14];
      uint64_t v20 = a2[15];
      outlined copy of BindTarget(v19, v20, *((unsigned char *)a2 + 128));
      *(void *)(a1 + 112) = v19;
      *(void *)(a1 + 120) = v20;
      *(unsigned char *)(a1 + 128) = v13;
    }
  }
  else if (v13 == 255)
  {
    outlined destroy of BindTarget(a1 + 112);
    char v21 = *((unsigned char *)a2 + 128);
    *unint64_t v11 = *v12;
    *(unsigned char *)(a1 + 128) = v21;
  }
  else
  {
    uint64_t v14 = a2[14];
    uint64_t v15 = a2[15];
    outlined copy of BindTarget(v14, v15, *((unsigned char *)a2 + 128));
    uint64_t v16 = *(void *)(a1 + 112);
    uint64_t v17 = *(void *)(a1 + 120);
    *(void *)(a1 + 112) = v14;
    *(void *)(a1 + 120) = v15;
    unsigned __int8 v18 = *(unsigned char *)(a1 + 128);
    *(unsigned char *)(a1 + 128) = v13;
    outlined consume of BindTarget(v16, v17, v18);
  }
  int v23 = *((_DWORD *)a2 + 33);
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
  *(_DWORD *)(a1 + 132) = v23;
  *(_WORD *)(a1 + 137) = *(_WORD *)((char *)a2 + 137);
  *(unsigned char *)(a1 + 139) = *((unsigned char *)a2 + 139);
  *(void *)(a1 + 144) = a2[18];
  swift_retain();
  swift_release();
  unint64_t v24 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = *(void *)v25;
  *(void *)(v24 + 8) = *(void *)(v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = (long long *)(v24 + 16);
  size_t v27 = (long long *)(v25 + 16);
  int v28 = *(unsigned __int8 *)(v25 + 32);
  if (*(unsigned __int8 *)(v24 + 32) == 255)
  {
    if (v28 == 255)
    {
      long long v37 = *v27;
      *(unsigned char *)(v24 + 32) = *(unsigned char *)(v25 + 32);
      *uint64_t v26 = v37;
    }
    else
    {
      uint64_t v34 = *(void *)(v25 + 16);
      uint64_t v35 = *(void *)(v25 + 24);
      outlined copy of BindTarget(v34, v35, *(unsigned char *)(v25 + 32));
      *(void *)(v24 + 16) = v34;
      *(void *)(v24 + 24) = v35;
      *(unsigned char *)(v24 + 32) = v28;
    }
  }
  else if (v28 == 255)
  {
    outlined destroy of BindTarget(v24 + 16);
    char v36 = *(unsigned char *)(v25 + 32);
    *uint64_t v26 = *v27;
    *(unsigned char *)(v24 + 32) = v36;
  }
  else
  {
    uint64_t v29 = *(void *)(v25 + 16);
    uint64_t v30 = *(void *)(v25 + 24);
    outlined copy of BindTarget(v29, v30, *(unsigned char *)(v25 + 32));
    uint64_t v31 = *(void *)(v24 + 16);
    uint64_t v32 = *(void *)(v24 + 24);
    *(void *)(v24 + 16) = v29;
    *(void *)(v24 + 24) = v30;
    unsigned __int8 v33 = *(unsigned char *)(v24 + 32);
    *(unsigned char *)(v24 + 32) = v28;
    outlined consume of BindTarget(v31, v32, v33);
  }
  int v38 = *(_DWORD *)(v25 + 36);
  *(unsigned char *)(v24 + 40) = *(unsigned char *)(v25 + 40);
  *(_DWORD *)(v24 + 36) = v38;
  *(_WORD *)(v24 + 41) = *(_WORD *)(v25 + 41);
  *(unsigned char *)(v24 + 43) = *(unsigned char *)(v25 + 43);
  *(void *)(v24 + 48) = *(void *)(v25 + 48);
  swift_retain();
  swift_release();
  uint64_t v39 = *(void *)(a3 + 16);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v42 = v25 + v41;
  uint64_t v43 = v24 + v41 + 56;
  uint64_t v118 = ~v41;
  int v44 = (unsigned __int16 *)(v43 & ~v41);
  uint64_t v45 = v42 + 56;
  unint64_t v46 = (unsigned __int8 *)((v42 + 56) & ~v41);
  uint64_t v47 = *(unsigned int *)(v40 + 84);
  if (v47) {
    size_t v48 = *(void *)(*(void *)(v39 - 8) + 64);
  }
  else {
    size_t v48 = *(void *)(*(void *)(v39 - 8) + 64) + 1;
  }
  uint64_t v119 = *(void *)(v39 - 8);
  if (v47 <= 1)
  {
    if (*((unsigned char *)v44 + v48))
    {
      int v49 = (*((unsigned __int8 *)v44 + v48) - 1) << (8 * v48);
      if (v48 > 3) {
        int v49 = 0;
      }
      if (v48)
      {
        int v50 = v48 <= 3 ? v48 : 4;
        switch(v50)
        {
          case 2:
            int v51 = *v44;
            break;
          case 3:
            int v51 = *v44 | (*(unsigned __int8 *)((v43 & ~v41) + 2) << 16);
            break;
          case 4:
            int v51 = *(_DWORD *)v44;
            break;
          default:
            int v51 = *(unsigned __int8 *)v44;
            break;
        }
      }
      else
      {
        int v51 = 0;
      }
      if ((v51 | v49) != 0xFFFFFFFF)
      {
        if (v46[v48])
        {
          int v55 = (v46[v48] - 1) << (8 * v48);
          if (v48 > 3) {
            int v55 = 0;
          }
          if (v48)
          {
            int v56 = v48 <= 3 ? v48 : 4;
            switch(v56)
            {
              case 2:
                int v57 = *(unsigned __int16 *)v46;
                break;
              case 3:
                int v57 = *(unsigned __int16 *)v46 | (v46[2] << 16);
                break;
              case 4:
                int v57 = *(_DWORD *)v46;
                break;
              default:
                int v57 = *v46;
                break;
            }
          }
          else
          {
            int v57 = 0;
          }
          if ((v57 | v55) != 0xFFFFFFFF) {
            goto LABEL_81;
          }
        }
LABEL_85:
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48))(v46, 1, v39))
        {
          memcpy(v44, v46, v48);
          if (v47 > 1) {
            goto LABEL_88;
          }
        }
        else
        {
          (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v40 + 16))(v44, v46, v39);
          (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v40 + 56))(v44, 0, 1, v39);
          if (v47 > 1) {
            goto LABEL_88;
          }
        }
        *((unsigned char *)v44 + v48) = 0;
        goto LABEL_88;
      }
    }
    uint64_t v115 = v45;
    size_t __n = v43;
    if (v46[v48])
    {
      int v58 = (v46[v48] - 1) << (8 * v48);
      if (v48 > 3) {
        int v58 = 0;
      }
      if (v48)
      {
        int v59 = v48 <= 3 ? v48 : 4;
        switch(v59)
        {
          case 2:
            int v60 = *(unsigned __int16 *)v46;
            break;
          case 3:
            int v60 = *(unsigned __int16 *)v46 | (v46[2] << 16);
            break;
          case 4:
            int v60 = *(_DWORD *)v46;
            break;
          default:
            int v60 = *v46;
            break;
        }
      }
      else
      {
        int v60 = 0;
      }
      if ((v60 | v58) != 0xFFFFFFFF)
      {
        unint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
        goto LABEL_63;
      }
    }
    goto LABEL_69;
  }
  uint64_t v115 = v42 + 56;
  size_t __n = v43;
  unint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  unsigned int v53 = v52(v43 & ~v41, v47, v39);
  unsigned int v54 = v52((uint64_t)v46, v47, v39);
  if (v53 < 2)
  {
    if (v54 >= 2)
    {
LABEL_63:
      int v61 = v52((uint64_t)v44, 1, v39);
      uint64_t v40 = v119;
      if (!v61) {
        (*(void (**)(unsigned __int16 *, uint64_t))(v119 + 8))(v44, v39);
      }
      if (v47 >= 2) {
        size_t v62 = v48;
      }
      else {
        size_t v62 = v48 + 1;
      }
      memcpy(v44, v46, v62);
      goto LABEL_76;
    }
LABEL_69:
    char v63 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v119 + 48);
    int v64 = v63(v44, 1, v39);
    int v65 = v63((unsigned __int16 *)v46, 1, v39);
    if (v64)
    {
      if (v65)
      {
        memcpy(v44, v46, v48);
        uint64_t v40 = v119;
      }
      else
      {
        uint64_t v40 = v119;
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v119 + 16))(v44, v46, v39);
        (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v119 + 56))(v44, 0, 1, v39);
      }
    }
    else
    {
      uint64_t v40 = v119;
      if (v65)
      {
        (*(void (**)(unsigned __int16 *, uint64_t))(v119 + 8))(v44, v39);
        memcpy(v44, v46, v48);
      }
      else
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v119 + 24))(v44, v46, v39);
      }
    }
LABEL_76:
    uint64_t v45 = v115;
    uint64_t v43 = __n;
    goto LABEL_88;
  }
  uint64_t v40 = v119;
  uint64_t v45 = v115;
  uint64_t v43 = __n;
  if (v54 < 2) {
    goto LABEL_85;
  }
LABEL_81:
  if (v47 >= 2) {
    size_t v66 = v48;
  }
  else {
    size_t v66 = v48 + 1;
  }
  memcpy(v44, v46, v66);
LABEL_88:
  if (v47 >= 2) {
    size_t v67 = v48;
  }
  else {
    size_t v67 = v48 + 1;
  }
  long long v68 = (unsigned __int8 *)(((v43 | v41) + v67) & v118);
  long long v69 = (unsigned __int16 *)(((v45 | v41) + v67) & v118);
  if (v47 > 1)
  {
    size_t __na = v67;
    long long v73 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
    unsigned int v74 = v73(v68, v47, v39);
    unsigned int v75 = v73((unsigned __int8 *)v69, v47, v39);
    if (v74 >= 2)
    {
      uint64_t v40 = v119;
      size_t v67 = __na;
      if (v75 >= 2)
      {
LABEL_153:
        long long v82 = v68;
        long long v83 = v69;
LABEL_154:
        memcpy(v82, v83, v67);
        goto LABEL_155;
      }
LABEL_157:
      if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v40 + 48))(v69, 1, v39))
      {
        memcpy(v68, v69, v48);
        if (v47 < 2)
        {
LABEL_159:
          v68[v48] = 0;
          long long v87 = (unsigned __int8 *)((unint64_t)&v68[v67 + v41] & v118);
          long long v88 = (unsigned __int8 *)(((unint64_t)v69 + v67 + v41) & v118);
          goto LABEL_160;
        }
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int16 *, uint64_t))(v40 + 16))(v68, v69, v39);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v40 + 56))(v68, 0, 1, v39);
        if (v47 < 2) {
          goto LABEL_159;
        }
      }
      long long v87 = (unsigned __int8 *)((unint64_t)&v68[v67 + v41] & v118);
      long long v88 = (unsigned __int8 *)(((unint64_t)v69 + v67 + v41) & v118);
LABEL_172:
      long long v93 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
      unsigned int v94 = v93(v87, v47, v39);
      unsigned int v95 = v93(v88, v47, v39);
      if (v94 < 2)
      {
        if (v95 < 2)
        {
          size_t v96 = v67;
          uint64_t v40 = v119;
          goto LABEL_210;
        }
        uint64_t v40 = v119;
        goto LABEL_207;
      }
      uint64_t v40 = v119;
      if (v95 >= 2)
      {
LABEL_221:
        memcpy(v87, v88, v67);
        goto LABEL_225;
      }
LABEL_222:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48))(v88, 1, v39))
      {
        memcpy(v87, v88, v48);
        if (v47 > 1) {
          goto LABEL_225;
        }
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v40 + 16))(v87, v88, v39);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v40 + 56))(v87, 0, 1, v39);
        if (v47 > 1) {
          goto LABEL_225;
        }
      }
      v87[v48] = 0;
      goto LABEL_225;
    }
    uint64_t v40 = v119;
    if (v75 >= 2)
    {
LABEL_138:
      if (!v73(v68, 1, v39)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v40 + 8))(v68, v39);
      }
      long long v82 = v68;
      long long v83 = v69;
      size_t v67 = __na;
      goto LABEL_154;
    }
  }
  else
  {
    if (v68[v48])
    {
      int v70 = (v68[v48] - 1) << (8 * v48);
      if (v48 > 3) {
        int v70 = 0;
      }
      if (v48)
      {
        int v71 = v48 <= 3 ? v48 : 4;
        switch(v71)
        {
          case 2:
            int v72 = *(unsigned __int16 *)v68;
            break;
          case 3:
            int v72 = *(unsigned __int16 *)v68 | (v68[2] << 16);
            break;
          case 4:
            int v72 = *(_DWORD *)v68;
            break;
          default:
            int v72 = *v68;
            break;
        }
      }
      else
      {
        int v72 = 0;
      }
      if ((v72 | v70) != 0xFFFFFFFF)
      {
        if (*((unsigned char *)v69 + v48))
        {
          int v76 = (*((unsigned __int8 *)v69 + v48) - 1) << (8 * v48);
          if (v48 > 3) {
            int v76 = 0;
          }
          if (v48)
          {
            int v77 = v48 <= 3 ? v48 : 4;
            switch(v77)
            {
              case 2:
                int v78 = *v69;
                break;
              case 3:
                int v78 = *(unsigned __int16 *)(((v45 | v41) + v67) & v118) | (*(unsigned __int8 *)((((v45 | v41) + v67) & v118)
                                                                                              + 2) << 16);
                break;
              case 4:
                int v78 = *(_DWORD *)v69;
                break;
              default:
                int v78 = *(unsigned __int8 *)v69;
                break;
            }
          }
          else
          {
            int v78 = 0;
          }
          if ((v78 | v76) != 0xFFFFFFFF) {
            goto LABEL_153;
          }
        }
        goto LABEL_157;
      }
    }
    size_t __na = v67;
    if (*((unsigned char *)v69 + v48))
    {
      int v79 = (*((unsigned __int8 *)v69 + v48) - 1) << (8 * v48);
      if (v48 > 3) {
        int v79 = 0;
      }
      if (v48)
      {
        int v80 = v48 <= 3 ? v48 : 4;
        switch(v80)
        {
          case 2:
            int v81 = *v69;
            break;
          case 3:
            int v81 = *(unsigned __int16 *)(((v45 | v41) + v67) & v118) | (*(unsigned __int8 *)((((v45 | v41) + v67) & v118)
                                                                                          + 2) << 16);
            break;
          case 4:
            int v81 = *(_DWORD *)v69;
            break;
          default:
            int v81 = *(unsigned __int8 *)v69;
            break;
        }
      }
      else
      {
        int v81 = 0;
      }
      if ((v81 | v79) != 0xFFFFFFFF)
      {
        long long v73 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
        goto LABEL_138;
      }
    }
  }
  uint64_t v84 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
  int v85 = v84(v68, 1, v39);
  int v86 = v84((unsigned __int8 *)v69, 1, v39);
  if (v85)
  {
    if (v86)
    {
      memcpy(v68, v69, v48);
      uint64_t v40 = v119;
    }
    else
    {
      uint64_t v40 = v119;
      (*(void (**)(unsigned __int8 *, unsigned __int16 *, uint64_t))(v119 + 16))(v68, v69, v39);
      (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v119 + 56))(v68, 0, 1, v39);
    }
  }
  else
  {
    uint64_t v40 = v119;
    if (v86)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v119 + 8))(v68, v39);
      memcpy(v68, v69, v48);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int16 *, uint64_t))(v119 + 24))(v68, v69, v39);
    }
  }
  size_t v67 = __na;
LABEL_155:
  long long v87 = (unsigned __int8 *)((unint64_t)&v68[v67 + v41] & v118);
  long long v88 = (unsigned __int8 *)(((unint64_t)v69 + v67 + v41) & v118);
  if (v47 > 1) {
    goto LABEL_172;
  }
LABEL_160:
  char v89 = 8 * v48;
  if (v87[v48])
  {
    int v90 = (v87[v48] - 1) << v89;
    if (v48 > 3) {
      int v90 = 0;
    }
    if (v48)
    {
      int v91 = v48 <= 3 ? v48 : 4;
      switch(v91)
      {
        case 2:
          int v92 = *(unsigned __int16 *)v87;
          break;
        case 3:
          int v92 = *(unsigned __int16 *)v87 | (v87[2] << 16);
          break;
        case 4:
          int v92 = *(_DWORD *)v87;
          break;
        default:
          int v92 = *v87;
          break;
      }
    }
    else
    {
      int v92 = 0;
    }
    if ((v92 | v90) != 0xFFFFFFFF)
    {
      if (v88[v48])
      {
        int v97 = (v88[v48] - 1) << v89;
        if (v48 > 3) {
          int v97 = 0;
        }
        if (v48)
        {
          int v98 = v48 <= 3 ? v48 : 4;
          switch(v98)
          {
            case 2:
              int v99 = *(unsigned __int16 *)v88;
              break;
            case 3:
              int v99 = *(unsigned __int16 *)v88 | (v88[2] << 16);
              break;
            case 4:
              int v99 = *(_DWORD *)v88;
              break;
            default:
              int v99 = *v88;
              break;
          }
        }
        else
        {
          int v99 = 0;
        }
        if ((v99 | v97) != 0xFFFFFFFF) {
          goto LABEL_221;
        }
      }
      goto LABEL_222;
    }
  }
  if (v88[v48])
  {
    int v100 = (v88[v48] - 1) << v89;
    if (v48 > 3) {
      int v100 = 0;
    }
    if (v48)
    {
      int v101 = v48 <= 3 ? v48 : 4;
      switch(v101)
      {
        case 2:
          int v102 = *(unsigned __int16 *)v88;
          break;
        case 3:
          int v102 = *(unsigned __int16 *)v88 | (v88[2] << 16);
          break;
        case 4:
          int v102 = *(_DWORD *)v88;
          break;
        default:
          int v102 = *v88;
          break;
      }
    }
    else
    {
      int v102 = 0;
    }
    if ((v102 | v100) != 0xFFFFFFFF)
    {
      long long v93 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
LABEL_207:
      if (!v93(v87, 1, v39)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v40 + 8))(v87, v39);
      }
      goto LABEL_221;
    }
  }
  size_t v96 = v67;
LABEL_210:
  uint64_t v103 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
  int v104 = v103(v87, 1, v39);
  int v105 = v103(v88, 1, v39);
  if (!v104)
  {
    if (!v105)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v119 + 24))(v87, v88, v39);
      size_t v67 = v96;
      goto LABEL_225;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v119 + 8))(v87, v39);
    goto LABEL_215;
  }
  if (v105)
  {
LABEL_215:
    memcpy(v87, v88, v48);
    size_t v67 = v96;
    goto LABEL_225;
  }
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v119 + 16))(v87, v88, v39);
  (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v119 + 56))(v87, 0, 1, v39);
  size_t v67 = v96;
LABEL_225:
  unint64_t v106 = (unint64_t)&v87[v67 + 7] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v107 = (unint64_t)&v88[v67 + 7] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v108 = *(void *)v107;
  *(unsigned char *)(v106 + 8) = *(unsigned char *)(v107 + 8);
  *(void *)unint64_t v106 = v108;
  unint64_t v109 = (unint64_t)&v87[v67 + 31] & 0xFFFFFFFFFFFFFFF0;
  unint64_t v110 = (unint64_t)&v88[v67 + 31] & 0xFFFFFFFFFFFFFFF0;
  long long v111 = *(_OWORD *)v110;
  *(void *)(v109 + 13) = *(void *)(v110 + 0xD);
  *(_OWORD *)unint64_t v109 = v111;
  unint64_t v112 = (v109 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v113 = (v110 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v112 = *(void *)v113;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v112 + 8) = *(unsigned char *)(v113 + 8);
  *(unsigned char *)(v112 + 9) = *(unsigned char *)(v113 + 9);
  *(unsigned char *)(v112 + 10) = *(unsigned char *)(v113 + 10);
  *(void *)((v112 + 18) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v113 + 18) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of BindTarget(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for FromToByAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unint64_t v9 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)(v10 + 16);
  long long v11 = *(_OWORD *)(v10 + 32);
  long long v13 = *(_OWORD *)v10;
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  *(_OWORD *)(v9 + 16) = v12;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)unint64_t v9 = v13;
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = v16 + 56 + v9;
  uint64_t v18 = ~v16;
  unint64_t v19 = v16 + 56 + v10;
  uint64_t v20 = (unsigned __int16 *)(v19 & ~v16);
  uint64_t v21 = *(unsigned int *)(v15 + 84);
  if (v21) {
    size_t v22 = *(void *)(*(void *)(v14 - 8) + 64);
  }
  else {
    size_t v22 = *(void *)(*(void *)(v14 - 8) + 64) + 1;
  }
  uint64_t v49 = v14;
  if (v21 > 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t))(v15 + 48))(v19 & ~v16, v21) >= 2)
    {
LABEL_25:
      if (v21 >= 2) {
        size_t v26 = v22;
      }
      else {
        size_t v26 = v22 + 1;
      }
      memcpy((void *)(v17 & ~v16), (const void *)(v19 & ~v16), v26);
      goto LABEL_29;
    }
  }
  else if (*((unsigned char *)v20 + v22))
  {
    int v23 = (*((unsigned __int8 *)v20 + v22) - 1) << (8 * v22);
    if (v22 > 3) {
      int v23 = 0;
    }
    if (v22)
    {
      int v24 = v22 <= 3 ? v22 : 4;
      switch(v24)
      {
        case 2:
          int v25 = *v20;
          break;
        case 3:
          int v25 = *v20 | (*(unsigned __int8 *)((v19 & ~v16) + 2) << 16);
          break;
        case 4:
          int v25 = *(_DWORD *)v20;
          break;
        default:
          int v25 = *(unsigned __int8 *)v20;
          break;
      }
    }
    else
    {
      int v25 = 0;
    }
    if ((v25 | v23) != 0xFFFFFFFF) {
      goto LABEL_25;
    }
  }
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v15 + 48))(v19 & ~v16, 1, v49))
  {
    memcpy((void *)(v17 & ~v16), (const void *)(v19 & ~v16), v22);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))(v17 & ~v16, v19 & ~v16, v49);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v15 + 56))(v17 & ~v16, 0, 1, v49);
  }
  uint64_t v18 = ~v16;
  if (v21 <= 1) {
    *(unsigned char *)((v17 & ~v16) + v22) = 0;
  }
LABEL_29:
  if (v21 >= 2) {
    size_t v27 = v22;
  }
  else {
    size_t v27 = v22 + 1;
  }
  int v28 = (void *)(((v17 | v16) + v27) & v18);
  uint64_t v29 = (unsigned __int8 *)(((v19 | v16) + v27) & v18);
  if (v21 > 1)
  {
    size_t v34 = ((v19 | v16) + v27) & v18;
    uint64_t v30 = v49;
    if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v15 + 48))(v34, v21, v49) >= 2) {
      goto LABEL_53;
    }
LABEL_43:
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v15 + 48))(v29, 1, v30))
    {
      memcpy(v28, v29, v22);
      if (v21 < 2)
      {
LABEL_45:
        *((unsigned char *)v28 + v22) = 0;
        uint64_t v35 = (void *)(((unint64_t)v28 + v27 + v16) & v18);
        char v36 = (unsigned __int16 *)((unint64_t)&v29[v27 + v16] & v18);
LABEL_54:
        if (*((unsigned char *)v36 + v22))
        {
          int v37 = (*((unsigned __int8 *)v36 + v22) - 1) << (8 * v22);
          if (v22 > 3) {
            int v37 = 0;
          }
          if (v22)
          {
            int v38 = v22 <= 3 ? v22 : 4;
            switch(v38)
            {
              case 2:
                int v39 = *v36;
                break;
              case 3:
                int v39 = *v36 | (*((unsigned __int8 *)v36 + 2) << 16);
                break;
              case 4:
                int v39 = *(_DWORD *)v36;
                break;
              default:
                int v39 = *(unsigned __int8 *)v36;
                break;
            }
          }
          else
          {
            int v39 = 0;
          }
          if ((v39 | v37) != 0xFFFFFFFF) {
            goto LABEL_74;
          }
        }
        goto LABEL_64;
      }
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v15 + 32))(v28, v29, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v30);
      if (v21 < 2) {
        goto LABEL_45;
      }
    }
    uint64_t v35 = (void *)(((unint64_t)v28 + v27 + v16) & v18);
    char v36 = (unsigned __int16 *)((unint64_t)&v29[v27 + v16] & v18);
    goto LABEL_63;
  }
  uint64_t v30 = v49;
  if (!v29[v22]) {
    goto LABEL_43;
  }
  int v31 = (v29[v22] - 1) << (8 * v22);
  if (v22 > 3) {
    int v31 = 0;
  }
  if (v22)
  {
    int v32 = v22 <= 3 ? v22 : 4;
    switch(v32)
    {
      case 2:
        int v33 = *(unsigned __int16 *)v29;
        break;
      case 3:
        int v33 = *(unsigned __int16 *)v29 | (v29[2] << 16);
        break;
      case 4:
        int v33 = *(_DWORD *)v29;
        break;
      default:
        int v33 = *v29;
        break;
    }
  }
  else
  {
    int v33 = 0;
  }
  if ((v33 | v31) == 0xFFFFFFFF) {
    goto LABEL_43;
  }
LABEL_53:
  memcpy(v28, v29, v27);
  uint64_t v35 = (void *)(((unint64_t)v28 + v27 + v16) & v18);
  char v36 = (unsigned __int16 *)((unint64_t)&v29[v27 + v16] & v18);
  if (v21 <= 1) {
    goto LABEL_54;
  }
LABEL_63:
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v15 + 48))(v36, v21, v30) >= 2)
  {
LABEL_74:
    memcpy(v35, v36, v27);
    goto LABEL_75;
  }
LABEL_64:
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v15 + 48))(v36, 1, v30))
  {
    memcpy(v35, v36, v22);
    if (v21 > 1) {
      goto LABEL_75;
    }
    goto LABEL_68;
  }
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v15 + 32))(v35, v36, v30);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v35, 0, 1, v30);
  if (v21 <= 1) {
LABEL_68:
  }
    *((unsigned char *)v35 + v22) = 0;
LABEL_75:
  unint64_t v40 = ((unint64_t)v35 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v41 = ((unint64_t)v36 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v42 = *(void *)v41;
  *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
  *(void *)unint64_t v40 = v42;
  unint64_t v43 = ((unint64_t)v35 + v27 + 31) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v44 = ((unint64_t)v36 + v27 + 31) & 0xFFFFFFFFFFFFFFF0;
  long long v45 = *(_OWORD *)v44;
  *(void *)(v43 + 13) = *(void *)(v44 + 0xD);
  *(_OWORD *)unint64_t v43 = v45;
  unint64_t v46 = (v43 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v47 = (v44 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v46 = *(void *)v47;
  *(unsigned char *)(v46 + 8) = *(unsigned char *)(v47 + 8);
  *(unsigned char *)(v46 + 9) = *(unsigned char *)(v47 + 9);
  *(unsigned char *)(v46 + 10) = *(unsigned char *)(v47 + 10);
  *(void *)((v46 + 18) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v47 + 18) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for FromToByAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
  long long v8 = (_OWORD *)(a2 + 112);
  int v9 = *(unsigned __int8 *)(a1 + 128);
  if (v9 != 255)
  {
    int v10 = *(unsigned __int8 *)(a2 + 128);
    if (v10 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 112);
      uint64_t v12 = *(void *)(a1 + 120);
      *(_OWORD *)(a1 + 112) = *v8;
      *(unsigned char *)(a1 + 128) = v10;
      outlined consume of BindTarget(v11, v12, v9);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 112);
  }
  *(_OWORD *)(a1 + 112) = *v8;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
LABEL_6:
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(unsigned char *)(a1 + 139) = *(unsigned char *)(a2 + 139);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  unint64_t v13 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  swift_bridgeObjectRelease();
  uint64_t v15 = (long long *)(v13 + 16);
  uint64_t v16 = (long long *)(v14 + 16);
  int v17 = *(unsigned __int8 *)(v13 + 32);
  if (v17 == 255)
  {
    long long v21 = *v16;
    *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
    *uint64_t v15 = v21;
  }
  else
  {
    int v18 = *(unsigned __int8 *)(v14 + 32);
    if (v18 == 255)
    {
      outlined destroy of BindTarget(v13 + 16);
      char v22 = *(unsigned char *)(v14 + 32);
      *uint64_t v15 = *v16;
      *(unsigned char *)(v13 + 32) = v22;
    }
    else
    {
      uint64_t v19 = *(void *)(v13 + 16);
      uint64_t v20 = *(void *)(v13 + 24);
      *(_OWORD *)(v13 + 16) = *v16;
      *(unsigned char *)(v13 + 32) = v18;
      outlined consume of BindTarget(v19, v20, v17);
    }
  }
  int v23 = *(_DWORD *)(v14 + 36);
  *(unsigned char *)(v13 + 40) = *(unsigned char *)(v14 + 40);
  *(_DWORD *)(v13 + 36) = v23;
  *(_WORD *)(v13 + 41) = *(_WORD *)(v14 + 41);
  *(unsigned char *)(v13 + 43) = *(unsigned char *)(v14 + 43);
  *(void *)(v13 + 48) = *(void *)(v14 + 48);
  swift_release();
  uint64_t v24 = *(void *)(a3 + 16);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v14 + v26;
  uint64_t v28 = v13 + v26 + 56;
  uint64_t v103 = ~v26;
  uint64_t v29 = (unsigned __int16 *)(v28 & ~v26);
  uint64_t v30 = v27 + 56;
  int v31 = (unsigned __int8 *)((v27 + 56) & ~v26);
  uint64_t v32 = *(unsigned int *)(v25 + 84);
  if (v32) {
    size_t v33 = *(void *)(*(void *)(v24 - 8) + 64);
  }
  else {
    size_t v33 = *(void *)(*(void *)(v24 - 8) + 64) + 1;
  }
  uint64_t v104 = *(void *)(v24 - 8);
  if (v32 <= 1)
  {
    if (*((unsigned char *)v29 + v33))
    {
      int v34 = (*((unsigned __int8 *)v29 + v33) - 1) << (8 * v33);
      if (v33 > 3) {
        int v34 = 0;
      }
      if (v33)
      {
        int v35 = v33 <= 3 ? v33 : 4;
        switch(v35)
        {
          case 2:
            int v36 = *v29;
            break;
          case 3:
            int v36 = *v29 | (*(unsigned __int8 *)((v28 & ~v26) + 2) << 16);
            break;
          case 4:
            int v36 = *(_DWORD *)v29;
            break;
          default:
            int v36 = *(unsigned __int8 *)v29;
            break;
        }
      }
      else
      {
        int v36 = 0;
      }
      if ((v36 | v34) != 0xFFFFFFFF)
      {
        if (v31[v33])
        {
          int v40 = (v31[v33] - 1) << (8 * v33);
          if (v33 > 3) {
            int v40 = 0;
          }
          if (v33)
          {
            int v41 = v33 <= 3 ? v33 : 4;
            switch(v41)
            {
              case 2:
                int v42 = *(unsigned __int16 *)v31;
                break;
              case 3:
                int v42 = *(unsigned __int16 *)v31 | (v31[2] << 16);
                break;
              case 4:
                int v42 = *(_DWORD *)v31;
                break;
              default:
                int v42 = *v31;
                break;
            }
          }
          else
          {
            int v42 = 0;
          }
          if ((v42 | v40) != 0xFFFFFFFF) {
            goto LABEL_77;
          }
        }
LABEL_81:
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48))(v31, 1, v24))
        {
          memcpy(v29, v31, v33);
          if (v32 > 1) {
            goto LABEL_84;
          }
        }
        else
        {
          (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v25 + 32))(v29, v31, v24);
          (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v24);
          if (v32 > 1) {
            goto LABEL_84;
          }
        }
        *((unsigned char *)v29 + v33) = 0;
        goto LABEL_84;
      }
    }
    uint64_t v100 = v30;
    size_t __n = v28;
    if (v31[v33])
    {
      int v43 = (v31[v33] - 1) << (8 * v33);
      if (v33 > 3) {
        int v43 = 0;
      }
      if (v33)
      {
        int v44 = v33 <= 3 ? v33 : 4;
        switch(v44)
        {
          case 2:
            int v45 = *(unsigned __int16 *)v31;
            break;
          case 3:
            int v45 = *(unsigned __int16 *)v31 | (v31[2] << 16);
            break;
          case 4:
            int v45 = *(_DWORD *)v31;
            break;
          default:
            int v45 = *v31;
            break;
        }
      }
      else
      {
        int v45 = 0;
      }
      if ((v45 | v43) != 0xFFFFFFFF)
      {
        int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
        goto LABEL_59;
      }
    }
    goto LABEL_65;
  }
  uint64_t v100 = v27 + 56;
  size_t __n = v28;
  int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  unsigned int v38 = v37(v28 & ~v26, v32, v24);
  unsigned int v39 = v37((uint64_t)v31, v32, v24);
  if (v38 < 2)
  {
    if (v39 >= 2)
    {
LABEL_59:
      int v46 = v37((uint64_t)v29, 1, v24);
      uint64_t v25 = v104;
      if (!v46) {
        (*(void (**)(unsigned __int16 *, uint64_t))(v104 + 8))(v29, v24);
      }
      if (v32 >= 2) {
        size_t v47 = v33;
      }
      else {
        size_t v47 = v33 + 1;
      }
      memcpy(v29, v31, v47);
      goto LABEL_72;
    }
LABEL_65:
    size_t v48 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v104 + 48);
    int v49 = v48(v29, 1, v24);
    int v50 = v48((unsigned __int16 *)v31, 1, v24);
    if (v49)
    {
      if (v50)
      {
        memcpy(v29, v31, v33);
        uint64_t v25 = v104;
      }
      else
      {
        uint64_t v25 = v104;
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v104 + 32))(v29, v31, v24);
        (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v104 + 56))(v29, 0, 1, v24);
      }
    }
    else
    {
      uint64_t v25 = v104;
      if (v50)
      {
        (*(void (**)(unsigned __int16 *, uint64_t))(v104 + 8))(v29, v24);
        memcpy(v29, v31, v33);
      }
      else
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v104 + 40))(v29, v31, v24);
      }
    }
LABEL_72:
    uint64_t v30 = v100;
    uint64_t v28 = __n;
    goto LABEL_84;
  }
  uint64_t v25 = v104;
  uint64_t v30 = v100;
  uint64_t v28 = __n;
  if (v39 < 2) {
    goto LABEL_81;
  }
LABEL_77:
  if (v32 >= 2) {
    size_t v51 = v33;
  }
  else {
    size_t v51 = v33 + 1;
  }
  memcpy(v29, v31, v51);
LABEL_84:
  if (v32 >= 2) {
    size_t v52 = v33;
  }
  else {
    size_t v52 = v33 + 1;
  }
  unsigned int v53 = (unsigned __int8 *)(((v28 | v26) + v52) & v103);
  unsigned int v54 = (unsigned __int16 *)(((v30 | v26) + v52) & v103);
  if (v32 > 1)
  {
    size_t __na = v52;
    int v58 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
    unsigned int v59 = v58(v53, v32, v24);
    unsigned int v60 = v58((unsigned __int8 *)v54, v32, v24);
    if (v59 >= 2)
    {
      uint64_t v25 = v104;
      size_t v52 = __na;
      if (v60 >= 2)
      {
LABEL_149:
        size_t v67 = v53;
        long long v68 = v54;
LABEL_150:
        memcpy(v67, v68, v52);
        goto LABEL_151;
      }
LABEL_153:
      if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v25 + 48))(v54, 1, v24))
      {
        memcpy(v53, v54, v33);
        if (v32 < 2)
        {
LABEL_155:
          v53[v33] = 0;
          int v72 = (unsigned __int8 *)((unint64_t)&v53[v52 + v26] & v103);
          long long v73 = (unsigned __int8 *)(((unint64_t)v54 + v52 + v26) & v103);
          goto LABEL_156;
        }
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int16 *, uint64_t))(v25 + 32))(v53, v54, v24);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v25 + 56))(v53, 0, 1, v24);
        if (v32 < 2) {
          goto LABEL_155;
        }
      }
      int v72 = (unsigned __int8 *)((unint64_t)&v53[v52 + v26] & v103);
      long long v73 = (unsigned __int8 *)(((unint64_t)v54 + v52 + v26) & v103);
LABEL_168:
      int v78 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
      unsigned int v79 = v78(v72, v32, v24);
      unsigned int v80 = v78(v73, v32, v24);
      if (v79 < 2)
      {
        if (v80 < 2)
        {
          size_t v81 = v52;
          uint64_t v25 = v104;
          goto LABEL_206;
        }
        uint64_t v25 = v104;
        goto LABEL_203;
      }
      uint64_t v25 = v104;
      if (v80 >= 2)
      {
LABEL_217:
        memcpy(v72, v73, v52);
        goto LABEL_221;
      }
LABEL_218:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48))(v73, 1, v24))
      {
        memcpy(v72, v73, v33);
        if (v32 > 1) {
          goto LABEL_221;
        }
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(v72, v73, v24);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v25 + 56))(v72, 0, 1, v24);
        if (v32 > 1) {
          goto LABEL_221;
        }
      }
      v72[v33] = 0;
      goto LABEL_221;
    }
    uint64_t v25 = v104;
    if (v60 >= 2)
    {
LABEL_134:
      if (!v58(v53, 1, v24)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(v53, v24);
      }
      size_t v67 = v53;
      long long v68 = v54;
      size_t v52 = __na;
      goto LABEL_150;
    }
  }
  else
  {
    if (v53[v33])
    {
      int v55 = (v53[v33] - 1) << (8 * v33);
      if (v33 > 3) {
        int v55 = 0;
      }
      if (v33)
      {
        int v56 = v33 <= 3 ? v33 : 4;
        switch(v56)
        {
          case 2:
            int v57 = *(unsigned __int16 *)v53;
            break;
          case 3:
            int v57 = *(unsigned __int16 *)v53 | (v53[2] << 16);
            break;
          case 4:
            int v57 = *(_DWORD *)v53;
            break;
          default:
            int v57 = *v53;
            break;
        }
      }
      else
      {
        int v57 = 0;
      }
      if ((v57 | v55) != 0xFFFFFFFF)
      {
        if (*((unsigned char *)v54 + v33))
        {
          int v61 = (*((unsigned __int8 *)v54 + v33) - 1) << (8 * v33);
          if (v33 > 3) {
            int v61 = 0;
          }
          if (v33)
          {
            int v62 = v33 <= 3 ? v33 : 4;
            switch(v62)
            {
              case 2:
                int v63 = *v54;
                break;
              case 3:
                int v63 = *(unsigned __int16 *)(((v30 | v26) + v52) & v103) | (*(unsigned __int8 *)((((v30 | v26) + v52) & v103)
                                                                                              + 2) << 16);
                break;
              case 4:
                int v63 = *(_DWORD *)v54;
                break;
              default:
                int v63 = *(unsigned __int8 *)v54;
                break;
            }
          }
          else
          {
            int v63 = 0;
          }
          if ((v63 | v61) != 0xFFFFFFFF) {
            goto LABEL_149;
          }
        }
        goto LABEL_153;
      }
    }
    size_t __na = v52;
    if (*((unsigned char *)v54 + v33))
    {
      int v64 = (*((unsigned __int8 *)v54 + v33) - 1) << (8 * v33);
      if (v33 > 3) {
        int v64 = 0;
      }
      if (v33)
      {
        int v65 = v33 <= 3 ? v33 : 4;
        switch(v65)
        {
          case 2:
            int v66 = *v54;
            break;
          case 3:
            int v66 = *(unsigned __int16 *)(((v30 | v26) + v52) & v103) | (*(unsigned __int8 *)((((v30 | v26) + v52) & v103)
                                                                                          + 2) << 16);
            break;
          case 4:
            int v66 = *(_DWORD *)v54;
            break;
          default:
            int v66 = *(unsigned __int8 *)v54;
            break;
        }
      }
      else
      {
        int v66 = 0;
      }
      if ((v66 | v64) != 0xFFFFFFFF)
      {
        int v58 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
        goto LABEL_134;
      }
    }
  }
  long long v69 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
  int v70 = v69(v53, 1, v24);
  int v71 = v69((unsigned __int8 *)v54, 1, v24);
  if (v70)
  {
    if (v71)
    {
      memcpy(v53, v54, v33);
      uint64_t v25 = v104;
    }
    else
    {
      uint64_t v25 = v104;
      (*(void (**)(unsigned __int8 *, unsigned __int16 *, uint64_t))(v104 + 32))(v53, v54, v24);
      (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v104 + 56))(v53, 0, 1, v24);
    }
  }
  else
  {
    uint64_t v25 = v104;
    if (v71)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v104 + 8))(v53, v24);
      memcpy(v53, v54, v33);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int16 *, uint64_t))(v104 + 40))(v53, v54, v24);
    }
  }
  size_t v52 = __na;
LABEL_151:
  int v72 = (unsigned __int8 *)((unint64_t)&v53[v52 + v26] & v103);
  long long v73 = (unsigned __int8 *)(((unint64_t)v54 + v52 + v26) & v103);
  if (v32 > 1) {
    goto LABEL_168;
  }
LABEL_156:
  char v74 = 8 * v33;
  if (v72[v33])
  {
    int v75 = (v72[v33] - 1) << v74;
    if (v33 > 3) {
      int v75 = 0;
    }
    if (v33)
    {
      int v76 = v33 <= 3 ? v33 : 4;
      switch(v76)
      {
        case 2:
          int v77 = *(unsigned __int16 *)v72;
          break;
        case 3:
          int v77 = *(unsigned __int16 *)v72 | (v72[2] << 16);
          break;
        case 4:
          int v77 = *(_DWORD *)v72;
          break;
        default:
          int v77 = *v72;
          break;
      }
    }
    else
    {
      int v77 = 0;
    }
    if ((v77 | v75) != 0xFFFFFFFF)
    {
      if (v73[v33])
      {
        int v82 = (v73[v33] - 1) << v74;
        if (v33 > 3) {
          int v82 = 0;
        }
        if (v33)
        {
          int v83 = v33 <= 3 ? v33 : 4;
          switch(v83)
          {
            case 2:
              int v84 = *(unsigned __int16 *)v73;
              break;
            case 3:
              int v84 = *(unsigned __int16 *)v73 | (v73[2] << 16);
              break;
            case 4:
              int v84 = *(_DWORD *)v73;
              break;
            default:
              int v84 = *v73;
              break;
          }
        }
        else
        {
          int v84 = 0;
        }
        if ((v84 | v82) != 0xFFFFFFFF) {
          goto LABEL_217;
        }
      }
      goto LABEL_218;
    }
  }
  if (v73[v33])
  {
    int v85 = (v73[v33] - 1) << v74;
    if (v33 > 3) {
      int v85 = 0;
    }
    if (v33)
    {
      int v86 = v33 <= 3 ? v33 : 4;
      switch(v86)
      {
        case 2:
          int v87 = *(unsigned __int16 *)v73;
          break;
        case 3:
          int v87 = *(unsigned __int16 *)v73 | (v73[2] << 16);
          break;
        case 4:
          int v87 = *(_DWORD *)v73;
          break;
        default:
          int v87 = *v73;
          break;
      }
    }
    else
    {
      int v87 = 0;
    }
    if ((v87 | v85) != 0xFFFFFFFF)
    {
      int v78 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
LABEL_203:
      if (!v78(v72, 1, v24)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(v72, v24);
      }
      goto LABEL_217;
    }
  }
  size_t v81 = v52;
LABEL_206:
  long long v88 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
  int v89 = v88(v72, 1, v24);
  int v90 = v88(v73, 1, v24);
  if (!v89)
  {
    if (!v90)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v104 + 40))(v72, v73, v24);
      size_t v52 = v81;
      goto LABEL_221;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v104 + 8))(v72, v24);
    goto LABEL_211;
  }
  if (v90)
  {
LABEL_211:
    memcpy(v72, v73, v33);
    size_t v52 = v81;
    goto LABEL_221;
  }
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v104 + 32))(v72, v73, v24);
  (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v104 + 56))(v72, 0, 1, v24);
  size_t v52 = v81;
LABEL_221:
  unint64_t v91 = (unint64_t)&v72[v52 + 7] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v92 = (unint64_t)&v73[v52 + 7] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v93 = *(void *)v92;
  *(unsigned char *)(v91 + 8) = *(unsigned char *)(v92 + 8);
  *(void *)unint64_t v91 = v93;
  unint64_t v94 = (unint64_t)&v72[v52 + 31] & 0xFFFFFFFFFFFFFFF0;
  unint64_t v95 = (unint64_t)&v73[v52 + 31] & 0xFFFFFFFFFFFFFFF0;
  long long v96 = *(_OWORD *)v95;
  *(void *)(v94 + 13) = *(void *)(v95 + 0xD);
  *(_OWORD *)unint64_t v94 = v96;
  unint64_t v97 = (v94 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v98 = (v95 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v97 = *(void *)v98;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v97 + 8) = *(unsigned char *)(v98 + 8);
  *(unsigned char *)(v97 + 9) = *(unsigned char *)(v98 + 9);
  *(unsigned char *)(v97 + 10) = *(unsigned char *)(v98 + 10);
  *(void *)((v97 + 18) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v98 + 18) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FromToByAnimation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (v5 >= 2) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v5 >= 2) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v8 + 1;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v9;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(unsigned __int8 *)(v4 + 80);
  if (v11 < a2)
  {
    unint64_t v13 = ((((((v10 + ((v10 + v12 + ((v10 + v12 + ((v12 + 208) & ~v12)) & ~v12)) & ~v12) + 31) & 0xFFFFFFFFFFFFFFF0)
            + 28) & 0xFFFFFFFFFFFFFFF8)
          + 18) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    unsigned int v14 = a2 - v11;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *(unsigned __int8 *)(a1 + v13);
        if (!v19) {
          break;
        }
        goto LABEL_31;
      case 2:
        int v19 = *(unsigned __int16 *)(a1 + v13);
        if (v19) {
          goto LABEL_31;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x227DFD064);
      case 4:
        int v19 = *(_DWORD *)(a1 + v13);
        if (!v19) {
          break;
        }
LABEL_31:
        int v20 = v19 - 1;
        if (v15)
        {
          int v20 = 0;
          LODWORD(v15) = *(_DWORD *)a1;
        }
        return v11 + (v15 | v20) + 1;
      default:
        break;
    }
  }
  if ((v9 & 0x80000000) != 0)
  {
    if (v5 >= 2)
    {
      unsigned int v23 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 159) & 0xFFFFFFFFFFFFFFF8) + v12 + 56) & ~v12);
      BOOL v24 = v23 >= 2;
      uint64_t result = v23 - 2;
      if (result != 0 && v24) {
        return result;
      }
    }
    return 0;
  }
  unint64_t v22 = *(void *)(a1 + 144);
  if (v22 >= 0xFFFFFFFF) {
    LODWORD(v22) = -1;
  }
  return (v22 + 1);
}

void storeEnumTagSinglePayload for FromToByAnimation(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  unsigned int v10 = v9 - 1;
  size_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  if (v8 >= 2)
  {
    size_t v12 = v11;
  }
  else
  {
    unsigned int v10 = 0;
    size_t v12 = v11 + 1;
  }
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v10;
  }
  unint64_t v15 = ((((((v12 + ((v12 + v13 + ((v12 + v13 + ((v13 + 208) & ~v13)) & ~v13)) & ~v13) + 31) & 0xFFFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFFFF8)
        + 18) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v14 < a3)
  {
    unsigned int v16 = a3 - v14;
    if (((((((v12
             + ((v12
               + v13
               + ((v12 + v13 + ((v13 + 208) & ~v13)) & ~v13)) & ~v13)
             + 31) & 0xFFFFFFF0)
           + 28) & 0xFFFFFFF8)
         + 18) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v17 = v16 + 1;
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v6 = v18;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v14)
  {
    if (((((((v12
             + ((v12
               + v13
               + ((v12 + v13 + ((v13 + 208) & ~v13)) & ~v13)) & ~v13)
             + 31) & 0xFFFFFFF0)
           + 28) & 0xFFFFFFF8)
         + 18) & 0xFFFFFFF8) == 0xFFFFFFF8)
      int v19 = a2 - v14;
    else {
      int v19 = 1;
    }
    if (((((((v12
             + ((v12
               + v13
               + ((v12 + v13 + ((v13 + 208) & ~v13)) & ~v13)) & ~v13)
             + 31) & 0xFFFFFFF0)
           + 28) & 0xFFFFFFF8)
         + 18) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v20 = ~v14 + a2;
      bzero(a1, ((((((v12 + ((v12 + v13 + ((v12 + v13 + ((v13 + 208) & ~v13)) & ~v13)) & ~v13) + 31) & 0xFFFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFFFF8)+ 18) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *(_DWORD *)a1 = v20;
    }
    switch(v6)
    {
      case 1:
        a1[v15] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v19;
        return;
      case 3:
        goto LABEL_73;
      case 4:
        *(_DWORD *)&a1[v15] = v19;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 3:
LABEL_73:
      __break(1u);
      JUMPOUT(0x227DFD3E4);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (a2)
      {
LABEL_39:
        if ((v10 & 0x80000000) != 0)
        {
          unint64_t v21 = (((unint64_t)(a1 + 159) & 0xFFFFFFFFFFFFFFF8) + v13 + 56) & ~v13;
          if (v10 >= a2)
          {
            if (a2 + 1 <= v9)
            {
              if (a2 != -1 && v8 >= 2)
              {
                uint64_t v27 = a2 + 2;
                uint64_t v28 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
                unint64_t v29 = (((unint64_t)(a1 + 159) & 0xFFFFFFFFFFFFFFF8) + v13 + 56) & ~v13;
                v28(v29, v27);
              }
            }
            else
            {
              if (v11 <= 3) {
                int v25 = ~(-1 << (8 * v11));
              }
              else {
                int v25 = -1;
              }
              if (v11)
              {
                int v23 = v25 & (a2 - v9);
                if (v11 <= 3) {
                  int v26 = v11;
                }
                else {
                  int v26 = 4;
                }
                bzero((void *)((((unint64_t)(a1 + 159) & 0xFFFFFFFFFFFFFFF8) + v13 + 56) & ~v13), v11);
                switch(v26)
                {
                  case 2:
LABEL_71:
                    *(_WORD *)unint64_t v21 = v23;
                    break;
                  case 3:
LABEL_70:
                    *(_WORD *)unint64_t v21 = v23;
                    *(unsigned char *)(v21 + 2) = BYTE2(v23);
                    break;
                  case 4:
LABEL_72:
                    *(_DWORD *)unint64_t v21 = v23;
                    break;
                  default:
LABEL_64:
                    *(unsigned char *)unint64_t v21 = v23;
                    break;
                }
              }
            }
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v10 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero((void *)((((unint64_t)(a1 + 159) & 0xFFFFFFFFFFFFFFF8) + v13 + 56) & ~v13), v12);
              switch(v24)
              {
                case 2:
                  goto LABEL_71;
                case 3:
                  goto LABEL_70;
                case 4:
                  goto LABEL_72;
                default:
                  goto LABEL_64;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(_OWORD *)(a1 + 136) = 0u;
          *(_OWORD *)(a1 + 120) = 0u;
          *(_OWORD *)(a1 + 104) = 0u;
          *(_OWORD *)(a1 + 88) = 0u;
          *(_OWORD *)(a1 + 72) = 0u;
          *(_OWORD *)(a1 + 56) = 0u;
          *(_OWORD *)(a1 + 40) = 0u;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 8) = 0u;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *((void *)a1 + 18) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, int a2)
{
  if (!result) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v2 = result;
  if (result >= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v4 = swift_allocObject();
    size_t v5 = _swift_stdlib_malloc_size((const void *)v4);
    *(void *)(v4 + 16) = v2;
    *(void *)(v4 + 24) = 2 * v5 - 64;
    *(unsigned char *)(v4 + 32) = a2;
    if (v2 != 1)
    {
      *(unsigned char *)(v4 + 33) = a2;
      if (v2 != 2) {
        memset((void *)(v4 + 34), a2, v2 - 2);
      }
    }
    return v4;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  int v6 = (void *)swift_allocObject();
  size_t v7 = _swift_stdlib_malloc_size(v6);
  _OWORD v6[2] = v3;
  v6[3] = 2 * ((uint64_t)(v7 - 32) / 80);
  uint64_t v8 = a3(&v10, v6 + 4, v3, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v8 != v3)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v6;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (REMaterialAssetType, ()));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 520 * a1 + 32;
    unint64_t v6 = a3 + 520 * v4;
    if (v5 >= v6 || v5 + 520 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 104 * a1 + 32;
    unint64_t v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Terminatable, keyed: Bool));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 88 * a1 + 32;
    unint64_t v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 160 * a1 + 32;
    unint64_t v6 = a3 + 160 * v4;
    if (v5 >= v6 || v5 + 160 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKActiveSceneObserver);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 96 * a1 + 32;
    unint64_t v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 112 * a1 + 32;
    unint64_t v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>)
                   - 8);
    unsigned int v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    size_t v11 = v9 + v10 * a1;
    size_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 176 * a1 + 32;
    unint64_t v6 = a3 + 176 * v4;
    if (v5 >= v6 || v5 + 176 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__REAsset, [__REAssetDescriptor], OpaquePointer));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 144 * a1 + 32;
    unint64_t v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [(String, String)]));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape<PiecewiseBezierCurve>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 96 * a1 + 32;
    unint64_t v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape<PiecewiseLinearPolygon<UnsafeMutableBufferPointer<SIMD2<Double>>>>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    unint64_t v6 = 4 * v4;
    size_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    unint64_t v6 = 16 * v4;
    size_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 48 * a1 + 32);
    unint64_t v6 = 48 * v4;
    size_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 2 * a1 + 32);
    unint64_t v6 = 2 * v4;
    size_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    unint64_t v6 = 32 * v4;
    size_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    unint64_t v6 = 24 * v4;
    size_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 40 * a1 + 32);
    unint64_t v6 = 40 * v4;
    size_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = 8 * v4;
    size_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 80 * a1 + 32);
    unint64_t v6 = 80 * v4;
    size_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + (a1 << 6) + 32);
    unint64_t v6 = v4 << 6;
    size_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of FromToByAnimation<simd_quatf>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 128);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of FromToByAnimation<simd_quatf>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 128);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of FromToByAnimation<SIMD2<Float>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 128);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of FromToByAnimation<SIMD2<Float>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 128);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of FromToByAnimation<Float>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 128);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of FromToByAnimation<Float>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 128);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of AnimationLibraryComponent.AnimationCollection(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationError and conformance AnimationError()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationError and conformance AnimationError;
  if (!lazy protocol witness table cache variable for type AnimationError and conformance AnimationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationError and conformance AnimationError);
  }
  return result;
}

uint64_t outlined release of FromToByAnimation<BlendShapeWeights>(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 120);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 168);
  uint64_t v11 = *(void *)(a1 + 208);
  uint64_t v12 = *(void *)(a1 + 216);
  uint64_t v13 = *(void *)(a1 + 224);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 128);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 184);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v10, v6, v8);
  swift_release();
  a2(v11);
  a2(v12);
  a2(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of FromToByAnimation<Transform>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 128);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of TimelineBaseProperties(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  swift_bridgeObjectRetain();
  outlined copy of BindTarget?(v2, v3, v4);
  swift_retain();
  return a1;
}

uint64_t outlined release of TimelineBaseProperties(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v4);
  swift_release();
  return a1;
}

uint64_t outlined init with copy of __REAssetService(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined release of TimelineDefinition?(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of FromToByAnimation<Transform>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 128);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with take of Transform?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined retain of FromToByAnimation<JointTransforms>(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 120);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 168);
  uint64_t v11 = *(void *)(a1 + 208);
  uint64_t v12 = *(void *)(a1 + 216);
  uint64_t v13 = *(void *)(a1 + 224);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 128);
  unsigned __int8 v8 = *(unsigned char *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v10, v6, v8);
  swift_retain();
  a2(v11);
  a2(v12);
  a2(v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

unint64_t __RKEntityTriggerSpecification.init(decodeContext:)@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  void (*v35)(uint64_t *__return_ptr, void *);
  uint64_t v36;
  void *v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void **v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  void v50[6];
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;

  uint64_t v3 = a1;
  uint64_t v5 = *a1;
  unint64_t result = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7372656767697274, 0xE800000000000000, 0, *a1);
  if (v2)
  {

    swift_release();
    unsigned int v60 = v3[3];
    outlined release of [String : String]((uint64_t)&v60);
    unsigned int v59 = v3[4];
    outlined release of [String : String]((uint64_t)&v59);
    int v58 = v3[5];
    unsigned __int8 v7 = &v58;
    return outlined release of [String : String]((uint64_t)v7);
  }
  unint64_t v8 = result;
  size_t v51 = MEMORY[0x263F8EE78];
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_6;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    int v36 = MEMORY[0x263F8EE78];
    if (!*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_31;
    }
LABEL_28:

    swift_release();
    int v57 = v3[3];
    outlined release of [String : String]((uint64_t)&v57);
    int v56 = v3[4];
    outlined release of [String : String]((uint64_t)&v56);
    int v55 = v3[5];
    outlined release of [String : String]((uint64_t)&v55);
    *a2 = v36;
    type metadata accessor for __RKEntityTriggerSpecification(0);
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v9 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v9) {
    goto LABEL_30;
  }
LABEL_6:
  if (v9 < 1)
  {
    __break(1u);
    return result;
  }
  int v37 = v5;
  unsigned int v38 = a2;
  uint64_t v10 = 0;
  size_t v48 = v3[1];
  unint64_t v11 = v8 & 0xC000000000000001;
  int v41 = v8;
  int v42 = v3;
  unsigned int v39 = v8 & 0xC000000000000001;
  int v40 = v9;
  do
  {
    if (v11) {
      id v16 = (id)MEMORY[0x22A689930](v10, v8);
    }
    else {
      id v16 = *(id *)(v8 + 8 * v10 + 32);
    }
    unsigned int v17 = v16;
    id v18 = objc_msgSend(v48, sel_objectAtPath_, v16, v37, v38);
    if (v18)
    {
      int v19 = v18;
      self;
      uint64_t v20 = swift_dynamicCastObjCClass();
      if (!v20) {
        goto LABEL_12;
      }
      unint64_t v21 = (void *)v20;
      int v23 = v3[2];
      int v22 = v3[3];
      int v25 = v3[4];
      int v24 = v3[5];
      int v46 = v19;
      int v43 = v48;
      int v45 = v23;
      swift_retain();
      int v44 = v22;
      swift_bridgeObjectRetain();
      uint64_t v26 = (uint64_t)v25;
      swift_bridgeObjectRetain();
      size_t v47 = v24;
      swift_bridgeObjectRetain();
      uint64_t v27 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x64693A6F666E69, 0xE700000000000000, 2, v21);
      uint64_t v29 = v28;
      if (v28)
      {
        uint64_t v30 = (uint64_t)v27;
        if (one-time initialization token for triggerTypeToTriggerSpecificationsGenerator != -1) {
          swift_once();
        }
        int v31 = static __RKEntityTriggerSpecification.triggerTypeToTriggerSpecificationsGenerator;
        uint64_t v32 = v26;
        if (*((void *)static __RKEntityTriggerSpecification.triggerTypeToTriggerSpecificationsGenerator + 2))
        {
          swift_bridgeObjectRetain();
          unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v29);
          if (v34)
          {
            int v35 = *(void (**)(uint64_t *__return_ptr, void *))(v31[7] + 16 * v33);
            swift_retain();
            swift_bridgeObjectRelease_n();
            unint64_t v15 = v43;
            v50[0] = v21;
            v50[1] = v43;
            uint64_t v50[2] = v45;
            v50[3] = v44;
            v50[4] = v32;
            v50[5] = v47;
            v35(&v49, v50);
            swift_release();
            uint64_t v14 = v49;
            goto LABEL_11;
          }
          swift_bridgeObjectRelease();
        }
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_22830EC60;
        *(void *)(v12 + 56) = MEMORY[0x263F8D310];
        *(void *)(v12 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v12 + 32) = v30;
        *(void *)(v12 + 40) = v29;
        type metadata accessor for OS_os_log();
        unint64_t v13 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        uint64_t v14 = MEMORY[0x263F8EE78];
      }
      else
      {
        uint64_t v14 = MEMORY[0x263F8EE78];
      }
      unint64_t v15 = v43;
LABEL_11:
      specialized Array.append<A>(contentsOf:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      unint64_t v8 = v41;
      uint64_t v3 = v42;
      unint64_t v11 = v39;
      uint64_t v9 = v40;
LABEL_12:
    }
    ++v10;
  }
  while (v9 != v10);
  swift_bridgeObjectRelease();
  int v36 = v51;
  uint64_t v5 = v37;
  a2 = v38;
  if (*(void *)(v51 + 16)) {
    goto LABEL_28;
  }
LABEL_31:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError();
  swift_allocError();
  swift_willThrow();

  swift_release();
  unsigned int v54 = v3[3];
  outlined release of [String : String]((uint64_t)&v54);
  unsigned int v53 = v3[4];
  outlined release of [String : String]((uint64_t)&v53);
  size_t v52 = v3[5];
  unsigned __int8 v7 = &v52;
  return outlined release of [String : String]((uint64_t)v7);
}

void *one-time initialization function for triggerTypeToTriggerSpecificationsGenerator()
{
  unint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for triggerTypeToTriggerSpecificationsGenerator);
  static __RKEntityTriggerSpecification.triggerTypeToTriggerSpecificationsGenerator = result;
  return result;
}

unint64_t implicit closure #5 in variable initialization expression of static __RKEntityTriggerSpecification.triggerTypeToTriggerSpecificationsGenerator(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = v4;
  unint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v10 = v5;
  id v6 = v1;
  id v7 = v2;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v12);
  outlined retain of [String : String]((uint64_t)&v11);
  outlined retain of [String : String]((uint64_t)&v10);
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 2, v6, v7, v3, v4, &v9, v3);
  swift_release();

  outlined release of [String : String]((uint64_t)&v12);
  outlined release of [String : String]((uint64_t)&v11);
  outlined release of [String : String]((uint64_t)&v10);
  return v9;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unint64_t specialized static __RKEntityTriggerSpecification.generateCollisionTriggerSpecifications(decodeContext:)(uint64_t (**a1)(char *, uint64_t, char *), void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = MEMORY[0x263F8EE78];
  unint64_t v11 = MEMORY[0x263F8EE78];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x726564696C6C6F63, 0xE900000000000073, 2, a1, a2, a3, a4, &v11);
  if (*(void *)(v11 + 16))
  {
    unint64_t v10 = v8;
    specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))2, a1, a2, a3, a4, &v10, &v11);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
}

unsigned char *storeEnumTagSinglePayload for __RKEntityTriggerSpecification.TriggerUSDLoadingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227E022B8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityTriggerSpecification.TriggerUSDLoadingError()
{
  return &type metadata for __RKEntityTriggerSpecification.TriggerUSDLoadingError;
}

uint64_t IntrospectionDataCleanupHelper.__deallocating_deinit()
{
  RECIntrospectionFree();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IntrospectionDataCleanupHelper()
{
  return self;
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t BindPath.parts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BindTarget.TextureCoordinateTransformPath.offset.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(void **)v1;
  if (*(void *)(v1 + 8) == 1)
  {
    swift_bridgeObjectRetain_n();
    unsigned int v4 = v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    }
    unint64_t v6 = v4[2];
    unint64_t v9 = v4[3];
    unint64_t v7 = v6 + 1;
    if (v6 >= v9 >> 1) {
      unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v6 + 1, 1, v4);
    }
    unint64_t v8 = 0xE900000000000031;
  }
  else
  {
    swift_bridgeObjectRetain_n();
    unsigned int v4 = v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    }
    unint64_t v6 = v4[2];
    unint64_t v5 = v4[3];
    unint64_t v7 = v6 + 1;
    if (v6 >= v5 >> 1) {
      unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
    }
    unint64_t v8 = 0xE800000000000000;
  }
  uint64_t v4[2] = v7;
  unint64_t v10 = &v4[3 * v6];
  v10[4] = 0x74657366664F7675;
  v10[5] = v8;
  *((unsigned char *)v10 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.baseColorTint.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_22831EB50;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.roughnessScale.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_22831EB60;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.metallicScale.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_22831EB70;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.specularScale.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_22831EB80;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.sheenTint.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_22831EB90;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.clearcoatScale.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_22831EBA0;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.clearcoatRoughnessScale.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  v7[4] = 0xD000000000000017;
  v7[5] = 0x800000022834D9E0;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.anisotropyLevelScale.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  v7[4] = 0xD000000000000014;
  v7[5] = 0x800000022834DA60;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.anisotropyAngleScale.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  v7[4] = 0xD000000000000014;
  v7[5] = 0x800000022834DA80;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.emissiveColor.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_22831EBB0;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.emissiveIntensity.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_22831EBC0;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.opacityThreshold.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  v7[4] = 0xD000000000000010;
  v7[5] = 0x800000022834DA00;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.textureCoordinate.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t BindTarget.MaterialPath.secondaryTextureCoordinate.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 1;
  return swift_bridgeObjectRetain();
}

uint64_t BindTarget.MaterialPath.customValue.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain_n();
  unsigned int v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  uint64_t v4[2] = v6 + 1;
  unint64_t v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_22831EBD0;
  *((unsigned char *)v7 + 48) = 10;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.ScenePath.anchorEntity(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    unint64_t v7 = (void *)result;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    unint64_t v7 = (void *)result;
  }
  v7[2] = v10 + 1;
  unint64_t v11 = &v7[3 * v10];
  v11[4] = a1;
  v11[5] = a2;
  *((unsigned char *)v11 + 48) = 2;
  *a3 = v7;
  return result;
}

uint64_t BindTarget.EntityPath.transform.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    int v3 = (void *)result;
  }
  unint64_t v6 = v3[2];
  unint64_t v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v3);
    int v3 = (void *)result;
  }
  v3[2] = v6 + 1;
  unint64_t v7 = &v3[3 * v6];
  v7[4] = 0;
  v7[5] = 0;
  *((unsigned char *)v7 + 48) = 12;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

double BindTarget.EntityPath.jointTransforms.getter@<D0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  *(void *)&double result = 1;
  unint64_t v7 = &v3[3 * v5];
  *((_OWORD *)v7 + 2) = xmmword_22830EC70;
  *((unsigned char *)v7 + 48) = 12;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.EntityPath.blendShapeWeights()@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    int v3 = (void *)result;
  }
  unint64_t v6 = v3[2];
  unint64_t v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v3);
    int v3 = (void *)result;
  }
  v3[2] = v6 + 1;
  unint64_t v7 = &v3[3 * v6];
  v7[4] = 0;
  v7[5] = 0;
  *((unsigned char *)v7 + 48) = 4;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.EntityPath.blendShapeWeightsAtIndex(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    unint64_t v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    unint64_t v5 = (void *)result;
  }
  _OWORD v5[2] = v8 + 1;
  unint64_t v9 = &v5[3 * v8];
  v9[4] = a1;
  _OWORD v9[5] = 0;
  *((unsigned char *)v9 + 48) = 4;
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 2;
  return result;
}

uint64_t BindTarget.EntityPath.blendShapeWeightsWithID(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    unint64_t v7 = (void *)result;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    unint64_t v7 = (void *)result;
  }
  v7[2] = v10 + 1;
  unint64_t v11 = &v7[3 * v10];
  v11[4] = a1;
  v11[5] = a2;
  *((unsigned char *)v11 + 48) = 5;
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 2;
  return result;
}

double BindTarget.EntityPath.billboardBlendFactor.getter@<D0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  *(void *)&double result = 4;
  unint64_t v7 = &v3[3 * v5];
  *((_OWORD *)v7 + 2) = xmmword_22831EBE0;
  *((unsigned char *)v7 + 48) = 12;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

double BindTarget.EntityPath.opacity.getter@<D0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  *(void *)&double result = 2;
  unint64_t v7 = &v3[3 * v5];
  *((_OWORD *)v7 + 2) = xmmword_22831EBF0;
  *((unsigned char *)v7 + 48) = 12;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.EntityPath.parameter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    unint64_t v7 = (void *)result;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    unint64_t v7 = (void *)result;
  }
  v7[2] = v10 + 1;
  unint64_t v11 = &v7[3 * v10];
  v11[4] = a1;
  v11[5] = a2;
  *((unsigned char *)v11 + 48) = 3;
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 2;
  return result;
}

RealityFoundation::BindTarget::MaterialPath __swiftcall BindTarget.EntityPath.material(_:)(Swift::Int a1)
{
  unint64_t v4 = v1;
  unint64_t v5 = *v2;
  swift_bridgeObjectRetain_n();
  unint64_t v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  _OWORD v6[2] = v8 + 1;
  unint64_t v9 = &v6[3 * v8];
  v9[4] = a1;
  _OWORD v9[5] = 0;
  *((unsigned char *)v9 + 48) = 9;
  result.bindPath.parts._rawValue = (void *)swift_bridgeObjectRelease();
  *unint64_t v4 = v6;
  return result;
}

uint64_t BindTarget.EntityPath.self.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return swift_bridgeObjectRetain();
}

RealityFoundation::BindTarget::IkSolverPath __swiftcall BindTarget.EntityPath.ikSolver(_:)(RealityFoundation::IKComponent::Solver::ID_optional a1)
{
  int v3 = v1;
  uint64_t v4 = *(void *)a1.value.nameHash;
  uint64_t v5 = *(unsigned __int8 *)(a1.value.nameHash + 8);
  unint64_t v6 = *v2;
  swift_bridgeObjectRetain_n();
  unint64_t v7 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v9 = v7[2];
  unint64_t v8 = v7[3];
  if (v9 >= v8 >> 1) {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v7);
  }
  v7[2] = v9 + 1;
  unint64_t v10 = &v7[3 * v9];
  v10[4] = v4;
  v10[5] = v5;
  *((unsigned char *)v10 + 48) = 6;
  result.bindPath.parts._rawValue = (void *)swift_bridgeObjectRelease();
  *int v3 = v7;
  return result;
}

uint64_t BindTarget.IkSolverPath.constraintTarget(_:)@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v4 = StringProtocol.hash.getter();
  swift_bridgeObjectRetain();
  uint64_t v5 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  _OWORD v5[2] = v7 + 1;
  unint64_t v8 = &v5[3 * v7];
  _OWORD v8[4] = v4;
  v8[5] = 0;
  *((unsigned char *)v8 + 48) = 7;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.IkSolverPath.constraintLookAtTarget(_:)@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v4 = StringProtocol.hash.getter();
  swift_bridgeObjectRetain();
  uint64_t v5 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  _OWORD v5[2] = v7 + 1;
  unint64_t v8 = &v5[3 * v7];
  _OWORD v8[4] = v4;
  v8[5] = 0;
  *((unsigned char *)v8 + 48) = 8;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.EntityPath.skeletalPose(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    unint64_t v7 = (void *)result;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    unint64_t v7 = (void *)result;
  }
  v7[2] = v10 + 1;
  unint64_t v11 = &v7[3 * v10];
  v11[4] = a1;
  v11[5] = a2;
  *((unsigned char *)v11 + 48) = 11;
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 2;
  return result;
}

uint64_t static BindTarget.scene(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BindPath.Part>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22830EC60;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  *(unsigned char *)(v6 + 48) = 0;
  *a3 = v6;

  return swift_bridgeObjectRetain();
}

uint64_t static BindTarget.anchorEntity(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BindPath.Part>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22830EC60;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  *(unsigned char *)(v6 + 48) = 1;
  *a3 = v6;

  return swift_bridgeObjectRetain();
}

uint64_t static BindTarget.entity(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BindPath.Part>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_22830EC60;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  *(unsigned char *)(v6 + 48) = 2;
  *a3 = v6;

  return swift_bridgeObjectRetain();
}

double static BindTarget.material(_:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BindPath.Part>);
  uint64_t v4 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v4 + 16) = xmmword_22830EC60;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = 0;
  *(unsigned char *)(v4 + 48) = 9;
  *a2 = v4;
  return result;
}

RealityFoundation::InternalBindPath __swiftcall InternalBindPath.init(_:)(RealityFoundation::InternalBindPath result)
{
  RealityFoundation::InternalBindPath *v1 = result;
  return result;
}

unint64_t static InternalBindPath.bindPathVersion0(_:)(long long *a1)
{
  char v1 = *((unsigned char *)a1 + 16);
  long long v3 = *a1;
  char v4 = v1;
  return specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v3, 0);
}

unint64_t specialized static InternalBindPath.parameterNameFromPath<A>(_:)()
{
  if (Substring.distance(from:to:)() < 3) {
    return 0;
  }
  if (Substring.subscript.getter() == 91 && v0 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0) {
      return 0;
    }
  }
  unint64_t v2 = Substring.index(before:)();
  if (Substring.subscript.getter() == 93 && v3 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return 0;
  }
LABEL_10:
  unint64_t result = Substring.index(after:)();
  if (v2 >> 14 >= result >> 14)
  {
    Substring.subscript.getter();
    lazy protocol witness table accessor for type Substring and conformance Substring();
    String.init<A>(_:)();
    String.utf8CString.getter();
    uint64_t v6 = (void *)REBindKeyUnescape();
    swift_release();
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    return v7;
  }
  __break(1u);
  return result;
}

uint64_t static InternalBindPath.targetFromPath(_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (unint64_t)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = specialized static InternalBindPath.decomposeStringBySeparator(_:separator:escapeCharacter:)(a1, a2, 46, 0xE100000000000000, 92, 0xE100000000000000);
  unint64_t v12 = v11;
  unint64_t object = *(void *)(v11 + 16);
  unint64_t v14 = object - 2;
  if (object == 2)
  {
    unint64_t v4 = 0xE90000000000006DLL;
    Swift::String v15 = String.lowercased()();
    BOOL v16 = v15._countAndFlagsBits == 0x726F66736E617274 && v15._object == (void *)0xE90000000000006DLL;
    if (v16
      || (uint64_t countAndFlagsBits = v15._countAndFlagsBits,
          unint64_t object = (unint64_t)v15._object,
          (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
LABEL_21:
      if (*(void *)(v12 + 16) >= 2uLL)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        Swift::String v21 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v21._countAndFlagsBits == 0x726F66736E617274 && v21._object == (void *)0xE90000000000006DLL)
        {
          uint64_t result = swift_bridgeObjectRelease();
LABEL_26:
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
LABEL_27:
          *(unsigned char *)(a3 + 16) = 6;
          return result;
        }
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_26;
        }
        goto LABEL_111;
      }
      __break(1u);
      goto LABEL_128;
    }
    unint64_t v136 = a1;
    a1 = 0xD000000000000015;
    if (v15._countAndFlagsBits == 0xD000000000000015 && v15._object == (void *)0x800000022834E950
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      a1 = v136;
      goto LABEL_21;
    }
    if ((v15._countAndFlagsBits != 0x6C6174656C656B73 || v15._object != (void *)0xEC00000065736F70)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (v15._countAndFlagsBits != 0xD000000000000018 || v15._object != (void *)0x800000022834E970)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if ((v15._countAndFlagsBits != 0x65756C617679656BLL || v15._object != (void *)0xE800000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        && (v15._countAndFlagsBits != 0xD000000000000014 || v15._object != (void *)0x800000022834E990)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_129;
      }
      swift_bridgeObjectRelease();
      a1 = v136;
      if (*(void *)(v12 + 16) >= 2uLL)
      {
        int v66 = *(void **)(v12 + 56);
        v138._uint64_t countAndFlagsBits = *(void *)(v12 + 48);
        v138._unint64_t object = v66;
        strcpy((char *)v137, "keyValueStore");
        HIWORD(v137[1]) = -4864;
        uint64_t v67 = type metadata accessor for Locale();
        (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v10, 1, 1, v67);
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol.range<A>(of:options:range:locale:)();
        unint64_t v69 = v68;
        char v71 = v70;
        outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v71 & 1) == 0)
        {
          uint64_t v72 = *(void *)(v12 + 48);
          unint64_t v73 = *(void *)(v12 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          specialized Collection.subscript.getter(v69, v72, v73);
          swift_bridgeObjectRelease();
          unint64_t v74 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
          unint64_t v76 = v75;
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v77 = HIBYTE(v76) & 0xF;
          if ((v76 & 0x2000000000000000) == 0) {
            uint64_t v77 = v74 & 0xFFFFFFFFFFFFLL;
          }
          if (v77)
          {
            *(void *)a3 = v74;
            *(void *)(a3 + 8) = v76;
            *(unsigned char *)(a3 + 16) = 1;
            return result;
          }
        }
        goto LABEL_110;
      }
      __break(1u);
      goto LABEL_182;
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v12 + 16) >= 2uLL)
    {
      Swift::String v32 = String.lowercased()();
      if (v32._countAndFlagsBits == 0xD000000000000010 && v32._object == (void *)0x800000022834E9F0)
      {
        swift_bridgeObjectRelease();
LABEL_65:
        uint64_t result = swift_bridgeObjectRelease();
        long long v34 = xmmword_22830EC70;
LABEL_66:
        *(_OWORD *)a3 = v34;
        goto LABEL_27;
      }
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_65;
      }
      int v37 = *(void **)(v12 + 56);
      v138._uint64_t countAndFlagsBits = *(void *)(v12 + 48);
      v138._unint64_t object = v37;
      strcpy((char *)v137, "skeletalposes");
      HIWORD(v137[1]) = -4864;
      uint64_t v38 = type metadata accessor for Locale();
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v10, 1, 1, v38);
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol.range<A>(of:options:range:locale:)();
      unint64_t v40 = v39;
      char v42 = v41;
      outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v42) {
        goto LABEL_38;
      }
      uint64_t v43 = *(void *)(v12 + 48);
      unint64_t v44 = *(void *)(v12 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      specialized Collection.subscript.getter(v40, v43, v44);
      swift_bridgeObjectRelease();
      unint64_t v45 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
      unint64_t v47 = v46;
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v48 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0) {
        uint64_t v48 = v45 & 0xFFFFFFFFFFFFLL;
      }
      a1 = v136;
      if (v48)
      {
        *(void *)a3 = v45;
        *(void *)(a3 + 8) = v47;
        *(unsigned char *)(a3 + 16) = 5;
        return result;
      }
LABEL_110:
      swift_bridgeObjectRelease();
      goto LABEL_111;
    }
    __break(1u);
LABEL_170:
    unint64_t v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v93)
    {
LABEL_171:
      unint64_t v106 = *(void *)(v12 + 16);
      if (object <= v106)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        Swift::String v131 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v131._countAndFlagsBits != 0x636146646E656C62 || v131._object != (void *)0xEB00000000726F74)
        {
          char v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = swift_bridgeObjectRelease();
          a2 = v135;
          a1 = v136;
          if ((v132 & 1) == 0) {
            goto LABEL_111;
          }
          goto LABEL_175;
        }
LABEL_174:
        uint64_t result = swift_bridgeObjectRelease();
LABEL_175:
        long long v34 = xmmword_22831EBE0;
        goto LABEL_66;
      }
LABEL_186:
      __break(1u);
LABEL_187:
      unint64_t v93 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v106 > 1), a2, 1, (void *)v93);
LABEL_133:
      *(void *)(v93 + 16) = a2;
      unint64_t v107 = v93 + 24 * a1;
      *(void *)(v107 + 32) = object;
      *(void *)(v107 + 40) = 0;
      *(unsigned char *)(v107 + 48) = 9;
      if (*(void *)(v12 + 16) < 2uLL)
      {
        __break(1u);
      }
      else
      {
        unint64_t object = *(void *)(v12 + 48);
        a2 = *(void *)(v12 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        unint64_t v12 = *(void *)(v93 + 16);
        unint64_t v10 = *(void *)(v93 + 24);
        a1 = v12 + 1;
        swift_bridgeObjectRetain();
        if (v12 < v10 >> 1)
        {
LABEL_135:
          *(void *)(v93 + 16) = a1;
          unint64_t v108 = v93 + 24 * v12;
          *(void *)(v108 + 32) = object;
          *(void *)(v108 + 40) = a2;
          *(unsigned char *)(v108 + 48) = 10;
          uint64_t result = swift_bridgeObjectRelease();
          *(void *)a3 = v93;
          goto LABEL_45;
        }
      }
      unint64_t v93 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), a1, 1, (void *)v93);
      goto LABEL_135;
    }
LABEL_165:
    swift_bridgeObjectRelease();
    a2 = v135;
    a1 = v136;
    goto LABEL_111;
  }
  if (object < 3) {
    goto LABEL_110;
  }
  uint64_t countAndFlagsBits = v11 + 32;
  static InternalBindPath.entityPathFromParts(_:)((uint64_t *)(v11 + 32), 0, (2 * v14) | 1, (unint64_t)&v138);
  if (v14 >= *(void *)(v12 + 16))
  {
LABEL_128:
    __break(1u);
LABEL_129:
    unint64_t v93 = a1 + 6;
    v94._uint64_t countAndFlagsBits = a1 + 6;
    v94._unint64_t object = (void *)0x800000022834E9B0;
    if (String.hasPrefix(_:)(v94))
    {
      v138._uint64_t countAndFlagsBits = countAndFlagsBits;
      v138._unint64_t object = (void *)object;
      v137[0] = a1 + 6;
      v137[1] = 0x800000022834E9B0;
      uint64_t v95 = type metadata accessor for Locale();
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v10, 1, 1, v95);
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.range<A>(of:options:range:locale:)();
      unint64_t v97 = v96;
      char v99 = v98;
      outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      if ((v99 & 1) == 0)
      {
        specialized Collection.subscript.getter(v97, countAndFlagsBits, object);
        unint64_t v10 = v100;
        swift_bridgeObjectRelease();
        unint64_t v101 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
        unint64_t v103 = v102;
        swift_bridgeObjectRelease();
        uint64_t v104 = specialized FixedWidthInteger.init(_:)(v101, v103);
        if ((v105 & 1) == 0)
        {
          unint64_t object = v104;
          unint64_t v93 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
          a1 = *(void *)(v93 + 16);
          unint64_t v106 = *(void *)(v93 + 24);
          a2 = a1 + 1;
          if (a1 < v106 >> 1) {
            goto LABEL_133;
          }
          goto LABEL_187;
        }
        goto LABEL_38;
      }
      goto LABEL_150;
    }
    v109._unint64_t object = (void *)(v4 - 9);
    v109._uint64_t countAndFlagsBits = 0x72616F626C6C6962;
    if (String.hasPrefix(_:)(v109) || countAndFlagsBits == a1 && object == 0x800000022834E9D0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v93 & 1) == 0) {
        goto LABEL_38;
      }
    }
    unint64_t v106 = *(void *)(v12 + 16);
    if (v106 >= 2)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      Swift::String v129 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v129._countAndFlagsBits != 0x636146646E656C62 || v129._object != (void *)0xEB00000000726F74)
      {
        char v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        a1 = v136;
        if ((v130 & 1) == 0) {
          goto LABEL_111;
        }
        goto LABEL_175;
      }
      goto LABEL_174;
    }
    __break(1u);
    goto LABEL_186;
  }
  uint64_t v135 = a2;
  unint64_t v136 = a1;
  uint64_t v134 = (void *)v138._countAndFlagsBits;
  uint64_t v17 = 0x726F66736E617274;
  Swift::String v18 = String.lowercased()();
  if (v18._countAndFlagsBits == 0x726F66736E617274 && v18._object == (void *)0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
    a2 = v135;
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    a2 = v135;
    if ((v20 & 1) == 0)
    {
      unint64_t v24 = 0xD000000000000015;
      if ((v18._countAndFlagsBits != 0xD000000000000015 || v18._object != (void *)0x800000022834E950)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        BOOL v31 = v18._countAndFlagsBits == 0x6C6174656C656B73 && v18._object == (void *)0xEC00000065736F70;
        if (!v31
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v18._countAndFlagsBits != 0xD000000000000018 || v18._object != (void *)0x800000022834E970)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v18._countAndFlagsBits == 0x65756C617679656BLL && v18._object == (void *)0xE800000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
            || v18._countAndFlagsBits == 0xD000000000000014 && v18._object == (void *)0x800000022834E990
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            if (object > *(void *)(v12 + 16))
            {
              __break(1u);
              goto LABEL_184;
            }
            unint64_t v78 = countAndFlagsBits + 16 * object;
            uint64_t v79 = *(void *)(v78 - 16);
            unsigned int v80 = *(void **)(v78 - 8);
            size_t v81 = (uint64_t *)(v78 - 16);
            v138._uint64_t countAndFlagsBits = v79;
            v138._unint64_t object = v80;
            strcpy((char *)v137, "keyValueStore");
            HIWORD(v137[1]) = -4864;
            uint64_t v82 = type metadata accessor for Locale();
            (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v10, 1, 1, v82);
            lazy protocol witness table accessor for type String and conformance String();
            swift_bridgeObjectRetain();
            StringProtocol.range<A>(of:options:range:locale:)();
            unint64_t v84 = v83;
            char v86 = v85;
            outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v86 & 1) == 0)
            {
              uint64_t v87 = *v81;
              unint64_t v88 = v81[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              specialized Collection.subscript.getter(v84, v87, v88);
              swift_bridgeObjectRelease();
              unint64_t v12 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
              unint64_t v24 = v89;
              swift_bridgeObjectRelease();
              uint64_t v90 = HIBYTE(v24) & 0xF;
              if ((v24 & 0x2000000000000000) == 0) {
                uint64_t v90 = v12 & 0xFFFFFFFFFFFFLL;
              }
              if (v90)
              {
                swift_bridgeObjectRetain();
                unint64_t object = (unint64_t)v134;
                if (swift_isUniquelyReferenced_nonNull_native())
                {
LABEL_123:
                  unint64_t v92 = *(void *)(object + 16);
                  unint64_t v91 = *(void *)(object + 24);
                  if (v92 >= v91 >> 1) {
                    unint64_t object = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v91 > 1), v92 + 1, 1, (void *)object);
                  }
                  *(void *)(object + 16) = v92 + 1;
                  unint64_t v64 = object + 24 * v92;
                  *(void *)(v64 + 32) = v12;
                  *(void *)(v64 + 40) = v24;
                  char v65 = 3;
                  goto LABEL_99;
                }
LABEL_184:
                unint64_t object = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(object + 16) + 1, 1, (void *)object);
                goto LABEL_123;
              }
            }
LABEL_150:
            swift_bridgeObjectRelease();
            goto LABEL_38;
          }
          a2 = 0xD000000000000015;
          a1 = 0xD00000000000001BLL;
          unint64_t v93 = 0x800000022834E9B0;
          v110._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
          v110._unint64_t object = (void *)0x800000022834E9B0;
          if (!String.hasPrefix(_:)(v110))
          {
            swift_bridgeObjectRelease();
            v128._unint64_t object = (void *)0xE900000000000064;
            v128._uint64_t countAndFlagsBits = 0x72616F626C6C6962;
            if (String.hasPrefix(_:)(v128)
              || v18._countAndFlagsBits == 0xD000000000000015 && v18._object == (void *)0x800000022834E9D0)
            {
              swift_bridgeObjectRelease();
              goto LABEL_171;
            }
            goto LABEL_170;
          }
          Swift::String v138 = v18;
          v137[0] = 0xD00000000000001BLL;
          v137[1] = 0x800000022834E9B0;
          uint64_t v111 = type metadata accessor for Locale();
          (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56))(v10, 1, 1, v111);
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol.range<A>(of:options:range:locale:)();
          unint64_t v113 = v112;
          char v115 = v114;
          outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
          swift_bridgeObjectRelease();
          if (v115)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            specialized Collection.subscript.getter(v113, v18._countAndFlagsBits, (unint64_t)v18._object);
            swift_bridgeObjectRelease();
            unint64_t v116 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
            unint64_t v118 = v117;
            swift_bridgeObjectRelease();
            uint64_t v119 = specialized FixedWidthInteger.init(_:)(v116, v118);
            if ((v120 & 1) == 0)
            {
              uint64_t v121 = v119;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v134[2] + 1, 1, v134);
              }
              unint64_t v123 = v134[2];
              unint64_t v122 = v134[3];
              int64_t v124 = v123 + 1;
              if (v123 >= v122 >> 1) {
                uint64_t v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v122 > 1), v123 + 1, 1, v134);
              }
              unint64_t v125 = v134;
              v134[2] = v124;
              unint64_t v126 = &v125[3 * v123];
              v126[4] = v121;
              v126[5] = 0;
              *((unsigned char *)v126 + 48) = 9;
              if (object > *(void *)(v12 + 16))
              {
                __break(1u);
              }
              else
              {
                unint64_t v127 = countAndFlagsBits + 16 * object;
                unint64_t v123 = *(void *)(v127 - 16);
                uint64_t v121 = *(void *)(v127 - 8);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                unint64_t v12 = v134[2];
                unint64_t object = v134[3];
                int64_t v124 = v12 + 1;
                swift_bridgeObjectRetain();
                if (v12 < object >> 1)
                {
LABEL_149:
                  unint64_t object = (unint64_t)v134;
                  v134[2] = v124;
                  unint64_t v64 = object + 24 * v12;
                  *(void *)(v64 + 32) = v123;
                  *(void *)(v64 + 40) = v121;
                  char v65 = 10;
LABEL_99:
                  *(unsigned char *)(v64 + 48) = v65;
                  uint64_t result = swift_bridgeObjectRelease();
                  *(void *)a3 = object;
                  goto LABEL_45;
                }
              }
              uint64_t v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(object > 1), v124, 1, v134);
              goto LABEL_149;
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_165;
        }
        swift_bridgeObjectRelease();
        if (object > *(void *)(v12 + 16))
        {
          __break(1u);
        }
        else
        {
          int v35 = (uint64_t *)(countAndFlagsBits + 16 * object - 16);
          Swift::String v36 = String.lowercased()();
          if (v36._countAndFlagsBits == 0xD000000000000010 && v36._object == (void *)0x800000022834E9F0)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v49 & 1) == 0)
            {
              size_t v52 = (void *)v35[1];
              v138._uint64_t countAndFlagsBits = *v35;
              v138._unint64_t object = v52;
              strcpy((char *)v137, "skeletalposes");
              HIWORD(v137[1]) = -4864;
              uint64_t v53 = type metadata accessor for Locale();
              (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v10, 1, 1, v53);
              lazy protocol witness table accessor for type String and conformance String();
              swift_bridgeObjectRetain();
              StringProtocol.range<A>(of:options:range:locale:)();
              unint64_t v55 = v54;
              char v57 = v56;
              outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v57 & 1) == 0)
              {
                uint64_t v58 = *v35;
                unint64_t v59 = v35[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                specialized Collection.subscript.getter(v55, v58, v59);
                swift_bridgeObjectRelease();
                unint64_t v12 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
                unint64_t v14 = v60;
                swift_bridgeObjectRelease();
                uint64_t v61 = HIBYTE(v14) & 0xF;
                if ((v14 & 0x2000000000000000) == 0) {
                  uint64_t v61 = v12 & 0xFFFFFFFFFFFFLL;
                }
                if (v61)
                {
                  swift_bridgeObjectRetain();
                  unint64_t object = (unint64_t)v134;
                  if (swift_isUniquelyReferenced_nonNull_native())
                  {
LABEL_96:
                    unint64_t v63 = *(void *)(object + 16);
                    unint64_t v62 = *(void *)(object + 24);
                    if (v63 >= v62 >> 1) {
                      unint64_t object = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, (void *)object);
                    }
                    *(void *)(object + 16) = v63 + 1;
                    unint64_t v64 = object + 24 * v63;
                    *(void *)(v64 + 32) = v12;
                    *(void *)(v64 + 40) = v14;
                    char v65 = 11;
                    goto LABEL_99;
                  }
LABEL_182:
                  unint64_t object = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(object + 16) + 1, 1, (void *)object);
                  goto LABEL_96;
                }
              }
              goto LABEL_150;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v17 = (uint64_t)v134;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result) {
            goto LABEL_78;
          }
        }
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, (void *)v17);
        uint64_t v17 = result;
LABEL_78:
        unint64_t v51 = *(void *)(v17 + 16);
        unint64_t v50 = *(void *)(v17 + 24);
        if (v51 >= v50 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, (void *)v17);
          uint64_t v17 = result;
        }
        *(void *)(v17 + 16) = v51 + 1;
        uint64_t v30 = v17 + 24 * v51;
        *(_OWORD *)(v30 + 32) = xmmword_22830EC70;
LABEL_44:
        *(unsigned char *)(v30 + 48) = 12;
        *(void *)a3 = v17;
LABEL_45:
        *(void *)(a3 + 8) = 0;
        *(unsigned char *)(a3 + 16) = 2;
        return result;
      }
    }
    swift_bridgeObjectRelease();
  }
  if (object > *(void *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_137;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Swift::String v25 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v25._countAndFlagsBits == 0x726F66736E617274 && v25._object == (void *)0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = (uint64_t)v134;
LABEL_40:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
LABEL_41:
      unint64_t v29 = *(void *)(v17 + 16);
      unint64_t v28 = *(void *)(v17 + 24);
      if (v29 >= v28 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, (void *)v17);
        uint64_t v17 = result;
      }
      *(void *)(v17 + 16) = v29 + 1;
      uint64_t v30 = v17 + 24 * v29;
      *(void *)(v30 + 32) = 0;
      *(void *)(v30 + 40) = 0;
      goto LABEL_44;
    }
LABEL_137:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, (void *)v17);
    uint64_t v17 = result;
    goto LABEL_41;
  }
  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = (uint64_t)v134;
  if (v27) {
    goto LABEL_40;
  }
LABEL_38:
  swift_bridgeObjectRelease();
  a1 = v136;
LABEL_111:
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = 0;
  return swift_bridgeObjectRetain();
}

void static InternalBindPath.entityPathFromParts(_:)(uint64_t *a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X8>)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v12 - 8);
  int64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v15 = (char *)v45 - v14;
  unint64_t v16 = a3 >> 1;
  v45[0] = a4;
  if (a3 >> 1 != a2)
  {
    if (a2 > 0 || a3 < 2)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    unint64_t v17 = a1[1];
    uint64_t v48 = *a1;
    unint64_t v49 = v17;
    uint64_t v46 = 12079;
    unint64_t v47 = 0xE200000000000000;
    v45[1] = lazy protocol witness table accessor for type String and conformance String();
    Swift::String v18 = (void *)StringProtocol.components<A>(separatedBy:)();
    a3 = (unint64_t)v18;
    if (v18[2] == 2)
    {
      uint64_t v19 = v18[4];
      unint64_t v7 = v18[5];
      BOOL v20 = v19 == 0x3A65636976726573 && v7 == 0xE800000000000000;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        unint64_t v6 = (unint64_t)a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        Swift::String v21 = (void *)REBindKeyUnescape();
        swift_release();
        a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v7 = v22;
        swift_bridgeObjectRelease();

        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
        uint64_t v4 = v5[2];
        int64_t v14 = v5[3];
        a4 = v4 + 1;
        if (v4 >= (unint64_t)v14 >> 1) {
          goto LABEL_58;
        }
        while (1)
        {
          _OWORD v5[2] = a4;
          char v23 = &v5[3 * v4];
          v23[4] = a3;
          v23[5] = v7;
          *((unsigned char *)v23 + 48) = 0;
          uint64_t v4 = 1;
          a1 = (uint64_t *)v6;
LABEL_20:
          int64_t v14 = v16 - a2;
          if (__OFSUB__(v16, a2)) {
            break;
          }
          if (v14 < v4) {
            goto LABEL_54;
          }
          if (v4 == v14) {
            goto LABEL_23;
          }
          if (v4 >= v14) {
            goto LABEL_55;
          }
          if (v4 >= v16) {
            goto LABEL_56;
          }
          if (v14 <= (uint64_t)v16)
          {
            unint64_t v6 = v4 + a2 - v16;
            uint64_t v4 = (uint64_t)&a1[2 * v4 + 1];
            while (1)
            {
              uint64_t v29 = *(void *)(v4 - 8);
              unint64_t v7 = *(void *)v4;
              if ((*(void *)v4 & 0x2000000000000000) != 0) {
                uint64_t v30 = HIBYTE(*(void *)v4) & 0xFLL;
              }
              else {
                uint64_t v30 = v29 & 0xFFFFFFFFFFFFLL;
              }
              if (v30)
              {
                uint64_t v48 = *(void *)(v4 - 8);
                unint64_t v49 = v7;
                uint64_t v46 = 0x7365697469746E65;
                unint64_t v47 = 0xE90000000000005BLL;
                uint64_t v31 = type metadata accessor for Locale();
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v15, 1, 1, v31);
                swift_bridgeObjectRetain();
                a4 = StringProtocol.range<A>(of:options:range:locale:)();
                a3 = v32;
                a2 = v33;
                outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for Locale?);
                swift_bridgeObjectRelease();
                uint64_t v34 = String.index(before:)();
                if ((a2 & 1) != 0 || a4 >= 0x4000) {
                  goto LABEL_44;
                }
                unint64_t v16 = v34;
                if (String.subscript.getter() == 93 && v35 == 0xE100000000000000)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  a4 = v35;
                  a2 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((a2 & 1) == 0) {
                    goto LABEL_44;
                  }
                }
                int64_t v14 = v16 >> 14;
                if (v16 >> 14 < a3 >> 14)
                {
                  __break(1u);
                  goto LABEL_52;
                }
                uint64_t v37 = String.subscript.getter();
                MEMORY[0x22A688B50](v37);
                swift_bridgeObjectRelease();
                String.utf8CString.getter();
                uint64_t v38 = (void *)REBindKeyUnescape();
                swift_release();
                uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v40 = v39;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                unint64_t v7 = v40;
              }
              else
              {
                uint64_t v29 = 0;
                unint64_t v7 = 0xE000000000000000;
              }
LABEL_44:
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
              }
              unint64_t v42 = v5[2];
              unint64_t v41 = v5[3];
              if (v42 >= v41 >> 1) {
                uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v5);
              }
              v4 += 16;
              _OWORD v5[2] = v42 + 1;
              uint64_t v43 = &v5[3 * v42];
              v43[4] = v29;
              v43[5] = v7;
              *((unsigned char *)v43 + 48) = 2;
              if (__CFADD__(v6++, 1)) {
                goto LABEL_23;
              }
            }
          }
LABEL_57:
          __break(1u);
LABEL_58:
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)((unint64_t)v14 > 1), a4, 1, v5);
        }
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      if (v19 == 0x3A656E656373 && v7 == 0xE600000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v24 = *(void *)(a3 + 48);
        unint64_t v25 = *(void *)(a3 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        a3 = specialized static InternalBindPath.entityNameFromKey(_:)(v24, v25);
        unint64_t v7 = v26;
        swift_bridgeObjectRelease();
        uint64_t v4 = 1;
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
        unint64_t v6 = v5[2];
        unint64_t v27 = v5[3];
        a4 = v6 + 1;
        if (v6 >= v27 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v6 + 1, 1, v5);
        }
        _OWORD v5[2] = a4;
        unint64_t v28 = &v5[3 * v6];
        v28[4] = a3;
        v28[5] = v7;
        *((unsigned char *)v28 + 48) = 1;
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_20;
  }
  uint64_t v5 = (void *)MEMORY[0x263F8EE78];
LABEL_23:
  *(void *)v45[0] = v5;
}

uint64_t BindableValue.init(_:animatedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a4 + *(int *)(type metadata accessor for BindableValue() + 36);
  uint64_t v9 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, 1, 1, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a4, a1, a3);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);

  return v11(v8, a2, v10);
}

uint64_t BindableValue.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = MEMORY[0x270FA5388](v11);
  Swift::String v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v18 - v14, v3 + *(int *)(a1 + 36), v11, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a1);
  uint64_t v16 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v10) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(a2, v8, v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v15, v10);
  }
}

uint64_t key path setter for BindableValue.value : <A>BindableValue<A>(uint64_t a1)
{
  __n128 v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = (char *)&v7 - v2;
  (*(void (**)(char *, __n128))(v4 + 16))((char *)&v7 - v2, v1);
  uint64_t v5 = type metadata accessor for BindableValue();
  return BindableValue.baseValue.setter(v3, v5);
}

void (*BindableValue.value.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  void *v5 = v2;
  v5[1] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  _OWORD v5[2] = v7;
  _OWORD v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  BindableValue.value.getter(a2, (uint64_t)v9);
  return BindableValue.value.modify;
}

void BindableValue.value.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v8 = *v2;
    uint64_t v7 = v2[1];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v7);
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 40))(v8, v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v7);
  }
  else
  {
    (*(void (**)(void, void *))(v2[2] + 40))(*v2, v4);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t BindableValue.baseValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t BindableValue.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*BindableValue.baseValue.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BindableValue.animatedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t BindableValue.animatedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*BindableValue.animatedValue.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL BindableValue.isOverriden.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v11 - v7, v1 + *(int *)(a1 + 36), v4, v6);
  BOOL v9 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v8, 1, v3) != 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v9;
}

uint64_t BindableValuesReference.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v64 - v13;
  uint64_t v15 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v16);
  unint64_t v78 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  BOOL v20 = (char *)&v64 - v19;
  uint64_t v86 = *(void *)a1;
  uint64_t v85 = *(void *)(a1 + 8);
  LODWORD(v84) = *(unsigned __int8 *)(a1 + 16);
  uint64_t v21 = *v4;
  uint64_t v22 = swift_conformsToProtocol2();
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v22) {
    uint64_t v24 = a2;
  }
  else {
    uint64_t v24 = 0;
  }
  if (!v24) {
    goto LABEL_10;
  }
  uint64_t v79 = a2;
  char v70 = v11;
  uint64_t v72 = v20;
  char v71 = v14;
  uint64_t v73 = v15;
  uint64_t v81 = a3;
  uint64_t v82 = a4;
  v95[0] = v86;
  v95[1] = v85;
  char v96 = (char)v84;
  unint64_t v25 = specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)v95, 1);
  unint64_t v26 = *(uint64_t (**)(unint64_t))(v23 + 40);
  uint64_t v76 = v21;
  uint64_t v75 = v23 + 40;
  unint64_t v74 = v26;
  uint64_t v27 = v26(v25);
  swift_bridgeObjectRelease();
  unint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v23 + 24);
  uint64_t v29 = type metadata accessor for Optional();
  unint64_t v83 = &v64;
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(void *)(v30 + 64);
  __n128 v32 = MEMORY[0x270FA5388](v29);
  uint64_t v34 = (char *)&v64 - v33;
  uint64_t v80 = v27;
  uint64_t v77 = v35;
  Swift::String v36 = v28;
  ((void (*)(uint64_t, uint64_t, __n128))v28)(v27, v24, v32);
  uint64_t v37 = *(void *)(v24 - 8);
  uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  if (v38(v34, 1, v24) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v34, v29);
    REBindPointDestroy();
    a4 = v82;
LABEL_10:
    uint64_t v39 = type metadata accessor for BindableValue();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(a4, 1, 1, v39);
  }
  uint64_t v67 = (uint64_t (*)(char *, uint64_t, uint64_t))v38;
  uint64_t v68 = v37 + 48;
  unint64_t v69 = v36;
  uint64_t v65 = v30;
  uint64_t v66 = v29;
  uint64_t v93 = v24;
  uint64_t v94 = v77;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v91);
  unint64_t v44 = *(void (**)(uint64_t *, char *, uint64_t))(v37 + 32);
  uint64_t v43 = v37 + 32;
  unint64_t v42 = v44;
  v44(boxed_opaque_existential_1, v34, v24);
  outlined init with take of BindableDataInternal(&v91, (uint64_t)v95);
  *(void *)&long long v91 = v86;
  *((void *)&v91 + 1) = v85;
  char v92 = (char)v84;
  unint64_t v45 = specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v91, 1);
  uint64_t v46 = v74(v45);
  swift_bridgeObjectRelease();
  if (REBindPointIsOverrideEnabled())
  {
    unint64_t v84 = v42;
    uint64_t v85 = v43;
    outlined init with copy of __REAssetService((uint64_t)v95, (uint64_t)&v91);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal);
    uint64_t v47 = v79;
    uint64_t v48 = swift_dynamicCast();
    __n128 v49 = MEMORY[0x270FA5388](v48);
    unint64_t v50 = (char *)&v64 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v86 = v46;
    uint64_t v51 = v77;
    v69(v46, v24, v77, v49);
    uint64_t v52 = v47;
    int v53 = v67(v50, 1, v24);
    uint64_t v54 = v73;
    uint64_t v55 = (uint64_t)v71;
    if (v53 == 1)
    {
      (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v66);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v55, 1, 1, v47);
    }
    else
    {
      uint64_t v88 = v24;
      uint64_t v89 = v51;
      uint64_t v61 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v87);
      v84(v61, v50, v24);
      outlined init with take of BindableDataInternal(&v87, (uint64_t)v90);
      swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v47);
    }
    uint64_t v62 = v82;
    BindableValue.init(_:animatedValue:)((uint64_t)v72, v55, v52, v82);
    uint64_t v63 = type metadata accessor for BindableValue();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 0, 1, v63);
    REBindPointDestroy();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    return REBindPointDestroy();
  }
  else
  {
    outlined init with copy of __REAssetService((uint64_t)v95, (uint64_t)&v91);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal);
    uint64_t v56 = (uint64_t)v78;
    uint64_t v57 = v79;
    swift_dynamicCast();
    uint64_t v58 = (uint64_t)v70;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56))(v70, 1, 1, v57);
    uint64_t v59 = v82;
    BindableValue.init(_:animatedValue:)(v56, v58, v57, v82);
    uint64_t v60 = type metadata accessor for BindableValue();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v59, 0, 1, v60);
    REBindPointDestroy();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    return REBindPointDestroy();
  }
}

uint64_t BindableValuesReference.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = a1;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v65 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v64 = (char *)v55 - v7;
  uint64_t v67 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v61 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v63 = (char *)v55 - v11;
  uint64_t v68 = a4;
  uint64_t v12 = type metadata accessor for BindableValue();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v55 - v15;
  uint64_t v17 = *(void *)(v12 - 8);
  __n128 v19 = MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v55 - v20;
  uint64_t v22 = *(void *)a2;
  uint64_t v23 = *(void *)(a2 + 8);
  unsigned __int8 v24 = *(unsigned char *)(a2 + 16);
  uint64_t v25 = v69;
  (*(void (**)(char *, __n128))(v14 + 16))(v16, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v12) == 1)
  {
    unint64_t v26 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v26(v25, v13);
    outlined consume of BindTarget(v22, v23, v24);
    return ((uint64_t (*)(char *, uint64_t))v26)(v16, v13);
  }
  else
  {
    uint64_t v59 = v17;
    uint64_t v60 = v22;
    uint64_t v58 = v14;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v16, v12);
    uint64_t v28 = v68;
    uint64_t v29 = swift_conformsToProtocol2();
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v31 = v12;
    if (v29) {
      uint64_t v32 = v28;
    }
    else {
      uint64_t v32 = 0;
    }
    if (v32)
    {
      uint64_t v57 = v13;
      uint64_t v33 = v60;
      v70[0] = v60;
      v70[1] = v23;
      unsigned __int8 v71 = v24;
      unint64_t v34 = specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)v70, 1);
      uint64_t v36 = v35;
      outlined consume of BindTarget(v33, v23, v24);
      uint64_t v37 = (*(uint64_t (**)(unint64_t, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(v30 + 40))(v34, v36, *(void *)v62, 1, 0, v32, v30);
      swift_bridgeObjectRelease();
      uint64_t v38 = v67;
      uint64_t v39 = v63;
      uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
      v56(v63, v21, v28);
      v55[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal);
      swift_dynamicCast();
      uint64_t v62 = v21;
      uint64_t v40 = v72;
      uint64_t v41 = v73;
      __swift_project_boxed_opaque_existential_1(v70, v72);
      unint64_t v42 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 8);
      uint64_t v60 = v37;
      uint64_t v43 = v40;
      uint64_t v21 = v62;
      v42(v37, 0, v43, v41);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
      unint64_t v45 = v64;
      uint64_t v44 = v65;
      uint64_t v46 = v66;
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v64, &v21[*(int *)(v31 + 36)], v66);
      uint64_t v47 = v31;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v45, 1, v28) == 1)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
      }
      else
      {
        unint64_t v50 = v61;
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v61, v45, v28);
        v56(v39, v50, v28);
        swift_dynamicCast();
        uint64_t v51 = v72;
        uint64_t v52 = v73;
        __swift_project_boxed_opaque_existential_1(v70, v72);
        int v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 8);
        uint64_t v54 = v52;
        uint64_t v21 = v62;
        v53(v60, 1, v51, v54);
        uint64_t v47 = v31;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v50, v28);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
      }
      uint64_t v25 = v69;
      uint64_t v13 = v57;
      uint64_t v49 = v58;
      uint64_t v48 = v59;
      REBindPointDestroy();
    }
    else
    {
      outlined consume of BindTarget(v60, v23, v24);
      uint64_t v47 = v31;
      uint64_t v49 = v58;
      uint64_t v48 = v59;
    }
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v25, v13);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v21, v47);
  }
}

void (*BindableValuesReference.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v11 = malloc(0x58uLL);
  *a1 = v11;
  v11[2] = a5;
  v11[3] = v5;
  *uint64_t v11 = a3;
  v11[1] = a4;
  type metadata accessor for BindableValue();
  uint64_t v12 = type metadata accessor for Optional();
  v11[4] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[5] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[6] = malloc(v14);
  uint64_t v15 = malloc(v14);
  uint64_t v16 = *(void *)a2;
  uint64_t v17 = *(void *)(a2 + 8);
  v11[7] = v15;
  v11[8] = v16;
  v11[9] = v17;
  unsigned __int8 v18 = *(unsigned char *)(a2 + 16);
  *((unsigned char *)v11 + 80) = v18;
  uint64_t v22 = *v5;
  v20[0] = v16;
  v20[1] = v17;
  unsigned __int8 v21 = v18;
  outlined copy of BindTarget(v16, v17, v18);
  BindableValuesReference.subscript.getter((uint64_t)v20, a4, a5, (uint64_t)v15);
  return BindableValuesReference.subscript.modify;
}

void BindableValuesReference.subscript.modify(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a1;
  char v4 = *(unsigned char *)(*(void *)a1 + 80);
  uint64_t v6 = *(void *)(*(void *)a1 + 64);
  uint64_t v5 = *(void *)(*(void *)a1 + 72);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  uint64_t v8 = *(void **)(*(void *)a1 + 56);
  if (a2)
  {
    uint64_t v9 = v3[4];
    uint64_t v10 = v3[5];
    uint64_t v11 = v3[1];
    (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
    uint64_t v14 = v6;
    uint64_t v15 = v5;
    char v16 = v4;
    BindableValuesReference.subscript.setter((uint64_t)v7, (uint64_t)&v14, v12, v11);
    (*(void (**)(void *, uint64_t))(v10 + 8))(v8, v9);
  }
  else
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = *(void *)(*(void *)a1 + 64);
    uint64_t v15 = v5;
    char v16 = v4;
    BindableValuesReference.subscript.setter((uint64_t)v8, (uint64_t)&v14, a3, v13);
  }
  free(v8);
  free(v7);

  free(v3);
}

void (*ParameterSet.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t **a1, char a2)
{
  uint64_t v13 = malloc(0x50uLL);
  *a1 = v13;
  uint64_t v13[4] = a6;
  v13[5] = v6;
  v13[2] = a4;
  v13[3] = a5;
  *uint64_t v13 = a2;
  v13[1] = a3;
  type metadata accessor for BindableValue();
  uint64_t v14 = type metadata accessor for Optional();
  v13[6] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v13[7] = v15;
  size_t v16 = *(void *)(v15 + 64);
  unsigned char v13[8] = malloc(v16);
  uint64_t v17 = malloc(v16);
  v13[9] = v17;
  uint64_t v21 = *v6;
  v19[0] = a2;
  v19[1] = a3;
  char v20 = 1;
  BindableValuesReference.subscript.getter((uint64_t)v19, a5, a6, (uint64_t)v17);
  return ParameterSet.subscript.modify;
}

void ParameterSet.subscript.modify(uint64_t **a1, char a2)
{
}

uint64_t (*Entity.bindableValues.modify(void *a1))()
{
  *a1 = v1;
  a1[1] = v1;
  swift_retain();
  return Entity.bindableValues.modify;
}

uint64_t ParameterSet.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = *v5;
  v7[0] = a1;
  v7[1] = a2;
  char v8 = 1;
  return BindableValuesReference.subscript.getter((uint64_t)v7, a3, a4, a5);
}

uint64_t ParameterSet.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v57 = a3;
  uint64_t v49 = a2;
  uint64_t v47 = a6;
  uint64_t v8 = type metadata accessor for BindableValue();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v46 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v52 = (char *)&v45 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v55 = (char *)&v45 - v15;
  MEMORY[0x270FA5388](v16);
  unsigned __int8 v18 = (char *)&v45 - v17;
  uint64_t v19 = *(void *)(a5 - 8);
  __n128 v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v24 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v56 = a1;
  uint64_t v58 = v24;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v24)(v18, a1, v9, v21);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v26 = v54(v18, 1, v8);
  uint64_t v50 = v25;
  uint64_t v51 = a5;
  uint64_t v53 = v9;
  if (v26 == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
LABEL_6:
    uint64_t v61 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v27 = v55;
    uint64_t v28 = v56;
    uint64_t v29 = v58;
    uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v54;
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v23, v18, a5);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal);
  if (!swift_dynamicCast()) {
    goto LABEL_6;
  }
  uint64_t v27 = v55;
  uint64_t v28 = v56;
  uint64_t v29 = v58;
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v54;
  if (*((void *)&v60 + 1))
  {
    outlined init with take of BindableDataInternal(&v59, (uint64_t)v62);
    uint64_t v32 = v64;
    uint64_t v31 = v65;
    __swift_project_boxed_opaque_existential_1(v62, v64);
    uint64_t v33 = v32;
    uint64_t v29 = v58;
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v49, v57, *v48, v33, v31);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    goto LABEL_8;
  }
LABEL_7:
  outlined destroy of BodyTrackingComponent?((uint64_t)&v59, &demangling cache variable for type metadata for BindableDataInternal?);
LABEL_8:
  uint64_t v34 = v53;
  int v35 = v30(v28, 1, v8);
  v29(v27, v28, v34);
  if (v35 == 1)
  {
    uint64_t v36 = *(void (**)(char *, uint64_t))(v10 + 8);
    v36(v27, v34);
  }
  else
  {
    uint64_t v37 = v52;
    v29(v52, (uint64_t)v27, v34);
    uint64_t result = v30((uint64_t)v37, 1, v8);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v39 = v37;
    BOOL v40 = BindableValue.isOverriden.getter(v8);
    uint64_t v36 = *(void (**)(char *, uint64_t))(v10 + 8);
    v36(v27, v34);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v8);
    uint64_t v41 = v51;
    if (v40)
    {
      uint64_t v42 = *v48;
      uint64_t v43 = (uint64_t)v46;
      v58(v46, v28, v34);
      v62[0] = v49;
      v62[1] = v57;
      char v63 = 1;
      *(void *)&long long v59 = v42;
      swift_retain();
      BindableValuesReference.subscript.setter(v43, (uint64_t)v62, v44, v41);
      swift_release();
      return ((uint64_t (*)(uint64_t, uint64_t))v36)(v28, v34);
    }
  }
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))v36)(v28, v34);
}

void (*Entity.ParameterSet.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t **a1, char a2)
{
  uint64_t v13 = malloc(0x50uLL);
  *a1 = v13;
  uint64_t v13[4] = a6;
  v13[5] = v6;
  v13[2] = a4;
  v13[3] = a5;
  *uint64_t v13 = a2;
  v13[1] = a3;
  type metadata accessor for BindableValue();
  uint64_t v14 = type metadata accessor for Optional();
  v13[6] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v13[7] = v15;
  size_t v16 = *(void *)(v15 + 64);
  unsigned char v13[8] = malloc(v16);
  uint64_t v17 = malloc(v16);
  v13[9] = v17;
  uint64_t v21 = *v6;
  v19[0] = a2;
  v19[1] = a3;
  char v20 = 1;
  BindableValuesReference.subscript.getter((uint64_t)v19, a5, a6, (uint64_t)v17);
  return Entity.ParameterSet.subscript.modify;
}

void Entity.ParameterSet.subscript.modify(uint64_t **a1, char a2)
{
}

void ParameterSet.subscript.modify(uint64_t **a1, char a2, void (*a3)(void *, uint64_t, uint64_t))
{
  char v4 = *a1;
  uint64_t v5 = (void *)(*a1)[8];
  uint64_t v6 = (void *)(*a1)[9];
  if (a2)
  {
    uint64_t v7 = v4[6];
    uint64_t v8 = v4[7];
    uint64_t v10 = *v4;
    uint64_t v9 = v4[1];
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v5, v6, v7);
    swift_bridgeObjectRetain();
    a3(v5, v10, v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    uint64_t v12 = *v4;
    uint64_t v11 = v4[1];
    swift_bridgeObjectRetain();
    a3(v6, v12, v11);
  }
  free(v6);
  free(v5);

  free(v4);
}

uint64_t Entity.parameters.getter@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

uint64_t Entity.bindableValues.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  if (v2 != v1) {
    __break(1u);
  }
  return result;
}

uint64_t (*Entity.parameters.modify(void *a1))()
{
  *a1 = v1;
  a1[1] = v1;
  swift_retain();
  return Entity.bindableValues.modify;
}

uint64_t Entity.bindableValues.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = swift_release();
  if (a2)
  {
    if (v3 == v4) {
      return result;
    }
    __break(1u);
  }
  if (v3 != v4) {
    __break(1u);
  }
  return result;
}

uint64_t Entity.subscript.getter(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v50 = *(void *)(*a1 + 16);
  if (!v50)
  {
    swift_retain();
    return v2;
  }
  uint64_t v49 = v3 + 32;
  uint64_t result = swift_retain();
  unint64_t v5 = 0;
  uint64_t v48 = v3;
  while (1)
  {
    if (!v2) {
      return v2;
    }
    if (v5 >= *(void *)(v3 + 16)) {
      goto LABEL_66;
    }
    uint64_t v9 = v49 + 24 * v5;
    uint64_t v11 = *(void *)v9;
    uint64_t v10 = *(void *)(v9 + 8);
    int v12 = *(unsigned __int8 *)(v9 + 16);
    if (*(unsigned char *)(v9 + 16)) {
      break;
    }
    swift_retain();
    outlined copy of BindPath.Part(v11, v10, 0);
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      uint64_t v23 = SceneNullable;
      if ((id)RESceneGetSwiftObject())
      {
        swift_release();
        type metadata accessor for Scene();
        uint64_t v24 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        type metadata accessor for Scene();
        uint64_t v24 = swift_allocObject();
        *(_OWORD *)(v24 + 24) = 0u;
        *(_OWORD *)(v24 + 40) = 0u;
        *(void *)(v24 + 56) = 0;
        swift_unknownObjectWeakInit();
        *(void *)(v24 + 104) = 0;
        *(_OWORD *)(v24 + 88) = 0u;
        *(_OWORD *)(v24 + 72) = 0u;
        swift_weakInit();
        *(_OWORD *)(v24 + 216) = 0u;
        *(_OWORD *)(v24 + 200) = 0u;
        *(_OWORD *)(v24 + 184) = 0u;
        *(_OWORD *)(v24 + 168) = 0u;
        *(_OWORD *)(v24 + 152) = 0u;
        *(_OWORD *)(v24 + 136) = 0u;
        *(_OWORD *)(v24 + 120) = 0u;
        RERetain();
        *(void *)(v24 + 16) = v23;
        RESceneSetSwiftObject();
        swift_release();
      }
      uint64_t v51 = v24;
      unint64_t v52 = 0;
      swift_retain();
      if (Scene.AnchorCollection.endIndex.getter() >= 1)
      {
        uint64_t v43 = 0;
        while (1)
        {
          uint64_t v27 = Scene.AnchorCollection.subscript.getter(v43);
          if ((*(uint64_t (**)(uint64_t))(*(void *)v27 + 128))(v27) == v11 && v10 == v44)
          {
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_60;
          }
          char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v46) {
            break;
          }
          ++v43;
          swift_release();
          if (v43 >= Scene.AnchorCollection.endIndex.getter()) {
            goto LABEL_52;
          }
        }
        swift_release();
        swift_release();
LABEL_60:
        swift_release();
        uint64_t v28 = v11;
        uint64_t v29 = v10;
        unsigned __int8 v30 = 0;
        goto LABEL_61;
      }
LABEL_52:
      swift_release();
    }
    swift_release_n();
    uint64_t v6 = v11;
    uint64_t v7 = v10;
    unsigned __int8 v8 = 0;
LABEL_5:
    uint64_t result = outlined consume of BindPath.Part(v6, v7, v8);
    uint64_t v2 = 0;
LABEL_6:
    if (++v5 == v50) {
      return v2;
    }
  }
  if (v12 == 1)
  {
    swift_retain();
    outlined copy of BindPath.Part(v11, v10, 1u);
    uint64_t v25 = Entity.anchor.getter();
    swift_release();
    if (v25)
    {
      HasHierarchy.children.getter(&v51);
      swift_release();
      uint64_t v26 = v51;
      outlined copy of BindPath.Part(v11, v10, 1u);
      uint64_t v27 = specialized Sequence.first(where:)(v26, v11, v10);
      uint64_t v3 = v48;
      outlined consume of BindPath.Part(v11, v10, 1u);
      swift_release();
      swift_release();
      uint64_t v28 = v11;
      uint64_t v29 = v10;
      unsigned __int8 v30 = 1;
LABEL_61:
      uint64_t result = outlined consume of BindPath.Part(v28, v29, v30);
      uint64_t v2 = v27;
      goto LABEL_6;
    }
    swift_release();
    uint64_t v6 = v11;
    uint64_t v7 = v10;
    unsigned __int8 v8 = 1;
    goto LABEL_5;
  }
  if (v12 != 2)
  {
    uint64_t v51 = 0;
    unint64_t v52 = 0xE000000000000000;
    outlined copy of BindPath.Part(v11, v10, v12);
    _StringGuts.grow(_:)(63);
    uint64_t v54 = v51;
    unint64_t v55 = v52;
    v31._uint64_t countAndFlagsBits = 0xD000000000000026;
    v31._unint64_t object = (void *)0x800000022834E5D0;
    String.append(_:)(v31);
    uint64_t v51 = v5;
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 10272;
    v33._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v33);
    uint64_t v51 = v11;
    unint64_t v52 = v10;
    char v53 = v12;
    _print_unlocked<A, B>(_:_:)();
    v34._uint64_t countAndFlagsBits = 0xD000000000000013;
    v34._unint64_t object = (void *)0x800000022834E600;
    String.append(_:)(v34);
    uint64_t v36 = v54;
    unint64_t v35 = v55;
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static AnimationLogger.logger);
    swift_bridgeObjectRetain_n();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc();
      uint64_t v47 = v36;
      uint64_t v41 = swift_slowAlloc();
      uint64_t v51 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v40 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v35, &v51);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227DD2000, v38, v39, "%s", (uint8_t *)v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v41, -1, -1);
      uint64_t v42 = v40;
      uint64_t v3 = v48;
      MEMORY[0x22A696500](v42, -1, -1);
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_release();
    uint64_t v6 = v11;
    uint64_t v7 = v10;
    unsigned __int8 v8 = v12;
    goto LABEL_5;
  }
  swift_retain_n();
  outlined copy of BindPath.Part(v11, v10, 2u);
  if (REEntityGetChildCount() < 1)
  {
LABEL_40:
    swift_release_n();
    uint64_t v2 = 0;
LABEL_57:
    uint64_t result = outlined consume of BindPath.Part(v11, v10, 2u);
    goto LABEL_6;
  }
  uint64_t v13 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v13 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_68;
    }
    uint64_t v14 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v15 = swift_dynamicCastClassUnconditional();
LABEL_18:
      uint64_t v16 = v15;
      goto LABEL_22;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if (result) {
      goto LABEL_67;
    }
    uint64_t v17 = specialized static Entity.entityInfoType(_:)(v14);
    if (!v17)
    {
      uint64_t v15 = makeEntity(for:)(v14);
      goto LABEL_18;
    }
    uint64_t v16 = (*(uint64_t (**)(void))(v17 + 232))();
    uint64_t v18 = *(void *)(v16 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v18, 0);
    *(void *)(v16 + 16) = v14;
    MEMORY[0x22A68E750](v14, v16);
    swift_release();
LABEL_22:
    uint64_t result = REEntityGetChildCount();
    if (v13 >= result) {
      goto LABEL_65;
    }
    REEntityGetName();
    if (String.init(cString:)() == v11 && v10 == v19)
    {
      swift_release_n();
      swift_bridgeObjectRelease();
LABEL_56:
      swift_release();
      uint64_t v2 = v16;
      goto LABEL_57;
    }
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v21)
    {
      swift_release_n();
      goto LABEL_56;
    }
    ++v13;
    swift_release();
    if (v13 >= REEntityGetChildCount()) {
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static InternalBindPath.decomposeStringBySeparator(_:separator:escapeCharacter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  unint64_t v8 = String.subscript.getter();
  unint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v16 = v8 >> 14;
  unint64_t v17 = v10 >> 14;
  if (v8 >> 14 == v10 >> 14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
LABEL_3:
    swift_bridgeObjectRelease();
    return (uint64_t)v18;
  }
  uint64_t v62 = a3;
  uint64_t v63 = a4;
  uint64_t v18 = (void *)MEMORY[0x263F8EE78];
  while (2)
  {
    unint64_t v23 = v10;
    if (v17 == v8 >> 14) {
      goto LABEL_26;
    }
    unint64_t v58 = v16;
    long long v59 = v18;
    swift_bridgeObjectRetain();
    char v24 = 0;
    unint64_t v23 = v8;
    do
    {
      swift_bridgeObjectRetain();
      unint64_t v25 = Substring.index(after:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v26 = Substring.subscript.getter();
      uint64_t v28 = v27;
      swift_bridgeObjectRelease();
      if (a6)
      {
        if (v26 == a5 && v28 == a6)
        {
          swift_bridgeObjectRelease();
LABEL_10:
          v24 ^= 1u;
          goto LABEL_11;
        }
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v29) {
          goto LABEL_10;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      uint64_t v30 = Substring.subscript.getter();
      uint64_t v32 = v31;
      swift_bridgeObjectRelease();
      if (v30 == v62 && v32 == v63)
      {
        swift_bridgeObjectRelease();
LABEL_22:
        if ((v24 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_23;
      }
      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_22;
      }
LABEL_23:
      char v24 = 0;
LABEL_11:
      unint64_t v23 = v25;
    }
    while (v17 != v25 >> 14);
    unint64_t v23 = v10;
LABEL_25:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v16 = v58;
    uint64_t v18 = v59;
LABEL_26:
    if (v23 >> 14 == v17)
    {
      uint64_t v34 = MEMORY[0x22A688B50](v8, v10, v12, v14);
      uint64_t v36 = v35;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      }
      unint64_t v38 = v18[2];
      unint64_t v37 = v18[3];
      if (v38 >= v37 >> 1) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v18);
      }
      v18[2] = v38 + 1;
      uint64_t v19 = &v18[2 * v38];
      v19[4] = v34;
      unsigned char v19[5] = v36;
      uint64_t result = MEMORY[0x22A6895B0](0, 0xE000000000000000);
      unint64_t v8 = result;
      unint64_t v10 = v20;
      uint64_t v12 = v21;
      uint64_t v14 = v22;
LABEL_6:
      unint64_t v16 = v8 >> 14;
      unint64_t v17 = v10 >> 14;
      if (v8 >> 14 == v10 >> 14) {
        goto LABEL_3;
      }
      continue;
    }
    break;
  }
  if (v23 >> 14 < v16)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v60 = Substring.subscript.getter();
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v43 = v18;
    uint64_t v45 = v44;
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x22A688B50](v60, v40, v42, v45);
    uint64_t v61 = v47;
    uint64_t v48 = v43;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
    }
    unint64_t v50 = v48[2];
    unint64_t v49 = v48[3];
    if (v50 >= v49 >> 1) {
      uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v48);
    }
    v48[2] = v50 + 1;
    uint64_t v51 = v48;
    unint64_t v52 = &v48[2 * v50];
    v52[4] = v46;
    v52[5] = v61;
    swift_bridgeObjectRetain();
    unint64_t v53 = Substring.index(after:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v17 >= v53 >> 14)
    {
      unint64_t v8 = Substring.subscript.getter();
      unint64_t v10 = v54;
      uint64_t v12 = v55;
      uint64_t v57 = v56;
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v14 = v57;
      uint64_t v18 = v51;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static InternalBindPath.entityNameFromKey(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7) {
    return 0;
  }
  void v21[2] = a1;
  v21[3] = a2;
  v21[0] = 0x7365697469746E65;
  v21[1] = 0xE90000000000005BLL;
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
  lazy protocol witness table accessor for type String and conformance String();
  unint64_t v9 = StringProtocol.range<A>(of:options:range:locale:)();
  unint64_t v11 = v10;
  char v13 = v12;
  outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  swift_bridgeObjectRelease();
  uint64_t v14 = String.index(before:)();
  if ((v13 & 1) != 0 || v9 >> 14) {
    goto LABEL_14;
  }
  unint64_t v15 = v14;
  if (String.subscript.getter() == 93 && v16 == 0xE100000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    return a1;
  }
LABEL_12:
  if (v15 >> 14 >= v11 >> 14)
  {
    uint64_t v19 = String.subscript.getter();
    MEMORY[0x22A688B50](v19);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    unint64_t v20 = (void *)REBindKeyUnescape();
    swift_release();
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    return a1;
  }
  __break(1u);
  return result;
}

uint64_t specialized static BindPath.Part.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 0u:
      if (*(unsigned char *)(a2 + 16)) {
        goto LABEL_98;
      }
      if (v2 == v5 && v3 == v6) {
        char v9 = 1;
      }
      else {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of BindPath.Part(v2, v3, 0);
      outlined copy of BindPath.Part(v5, v6, 0);
      outlined consume of BindPath.Part(v2, v3, 0);
      outlined consume of BindPath.Part(v5, v6, 0);
      return v9 & 1;
    case 1u:
      if (v7 != 1) {
        goto LABEL_98;
      }
      if (v2 == v5 && v3 == v6) {
        char v9 = 1;
      }
      else {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of BindPath.Part(v2, v3, 1u);
      outlined copy of BindPath.Part(v5, v6, 1u);
      outlined consume of BindPath.Part(v2, v3, 1u);
      outlined consume of BindPath.Part(v5, v6, 1u);
      return v9 & 1;
    case 2u:
      if (v7 != 2) {
        goto LABEL_98;
      }
      if (v2 == v5 && v3 == v6) {
        char v9 = 1;
      }
      else {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of BindPath.Part(v2, v3, 2u);
      outlined copy of BindPath.Part(v5, v6, 2u);
      outlined consume of BindPath.Part(v2, v3, 2u);
      outlined consume of BindPath.Part(v5, v6, 2u);
      return v9 & 1;
    case 3u:
      if (v7 != 3) {
        goto LABEL_98;
      }
      if (v2 == v5 && v3 == v6) {
        char v9 = 1;
      }
      else {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of BindPath.Part(v2, v3, 3u);
      outlined copy of BindPath.Part(v5, v6, 3u);
      outlined consume of BindPath.Part(v2, v3, 3u);
      outlined consume of BindPath.Part(v5, v6, 3u);
      return v9 & 1;
    case 6u:
      if (v7 != 6) {
        goto LABEL_98;
      }
      outlined consume of BindPath.Part(*(void *)a1, v3, 6u);
      outlined consume of BindPath.Part(v5, v6, 6u);
      BOOL v14 = (v6 & 1) == 0 && v2 == v5;
      if (v3) {
        char v9 = v6 & 1;
      }
      else {
        char v9 = v14;
      }
      return v9 & 1;
    case 7u:
      if (v7 != 7) {
        goto LABEL_98;
      }
      outlined consume of BindPath.Part(*(void *)a1, v3, 7u);
      uint64_t v15 = v5;
      uint64_t v16 = v6;
      unsigned __int8 v17 = 7;
      goto LABEL_42;
    case 8u:
      if (v7 != 8) {
        goto LABEL_98;
      }
      outlined consume of BindPath.Part(*(void *)a1, v3, 8u);
      uint64_t v15 = v5;
      uint64_t v16 = v6;
      unsigned __int8 v17 = 8;
      goto LABEL_42;
    case 9u:
      if (v7 != 9) {
        goto LABEL_98;
      }
      outlined consume of BindPath.Part(*(void *)a1, v3, 9u);
      uint64_t v15 = v5;
      uint64_t v16 = v6;
      unsigned __int8 v17 = 9;
LABEL_42:
      outlined consume of BindPath.Part(v15, v16, v17);
      char v9 = v2 == v5;
      break;
    case 0xAu:
      if (v7 != 10) {
        goto LABEL_98;
      }
      if (v2 == v5 && v3 == v6) {
        char v9 = 1;
      }
      else {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of BindPath.Part(v2, v3, 0xAu);
      outlined copy of BindPath.Part(v5, v6, 0xAu);
      outlined consume of BindPath.Part(v2, v3, 0xAu);
      outlined consume of BindPath.Part(v5, v6, 0xAu);
      break;
    case 0xBu:
      if (v7 != 11) {
        goto LABEL_98;
      }
      if (v2 == v5 && v3 == v6) {
        char v9 = 1;
      }
      else {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of BindPath.Part(v2, v3, 0xBu);
      outlined copy of BindPath.Part(v5, v6, 0xBu);
      outlined consume of BindPath.Part(v2, v3, 0xBu);
      outlined consume of BindPath.Part(v5, v6, 0xBu);
      break;
    case 0xCu:
      if (v2 > 4) {
        goto LABEL_98;
      }
      switch(v2)
      {
        case 1uLL:
          if (v7 != 12 || v5 != 1 || v6 != 0) {
            goto LABEL_98;
          }
          outlined consume of BindPath.Part(*(void *)a1, v3, 0xCu);
          char v9 = 1;
          outlined consume of BindPath.Part(1, 0, 0xCu);
          return v9 & 1;
        case 2uLL:
          if (v7 != 12 || v5 != 2 || v6 != 0) {
            goto LABEL_98;
          }
          outlined consume of BindPath.Part(*(void *)a1, v3, 0xCu);
          uint64_t v21 = 2;
          goto LABEL_103;
        case 3uLL:
          goto LABEL_98;
        case 4uLL:
          if (v7 != 12 || v5 != 4 || v6 != 0) {
            goto LABEL_98;
          }
          outlined consume of BindPath.Part(*(void *)a1, v3, 0xCu);
          uint64_t v21 = 4;
          goto LABEL_103;
        default:
          if (v7 != 12 || (v6 | v5) != 0) {
            goto LABEL_98;
          }
          outlined consume of BindPath.Part(*(void *)a1, v3, 0xCu);
          uint64_t v21 = 0;
LABEL_103:
          outlined consume of BindPath.Part(v21, 0, 0xCu);
          char v9 = 1;
          break;
      }
      break;
    default:
LABEL_98:
      outlined copy of BindPath.Part(*(void *)a1, v3, v4);
      outlined copy of BindPath.Part(v5, v6, v7);
      outlined consume of BindPath.Part(v2, v3, v4);
      outlined consume of BindPath.Part(v5, v6, v7);
      char v9 = 0;
      break;
  }
  return v9 & 1;
}

uint64_t specialized static BindTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 1u:
      if (v7 != 1) {
        goto LABEL_30;
      }
      if (v2 == v5 && v3 == v6) {
        char v11 = 1;
      }
      else {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of BindTarget(v5, v6, 1u);
      outlined copy of BindTarget(v2, v3, 1u);
      outlined consume of BindTarget(v2, v3, 1u);
      outlined consume of BindTarget(v5, v6, 1u);
      return v11 & 1;
    case 2u:
      if (v7 != 2) {
        goto LABEL_30;
      }
      outlined copy of BindTarget(*(void *)a2, *(void *)(a2 + 8), 2u);
      outlined copy of BindTarget(v2, v3, 2u);
      char v13 = specialized static Array<A>.== infix(_:_:)(v2, v5);
      outlined consume of BindTarget(v2, v3, 2u);
      outlined consume of BindTarget(v5, v6, 2u);
      return v13 & 1;
    case 3u:
      if (v7 != 3) {
        goto LABEL_31;
      }
      outlined consume of BindTarget(*(void *)a1, v3, 3u);
      outlined consume of BindTarget(v5, v6, 3u);
      char v11 = v2 == v5;
      return v11 & 1;
    case 4u:
      if (v7 != 4) {
        goto LABEL_30;
      }
      if (v2 == v5 && v3 == v6) {
        char v11 = 1;
      }
      else {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of BindTarget(v5, v6, 4u);
      outlined copy of BindTarget(v2, v3, 4u);
      outlined consume of BindTarget(v2, v3, 4u);
      outlined consume of BindTarget(v5, v6, 4u);
      return v11 & 1;
    case 5u:
      if (v7 != 5) {
        goto LABEL_30;
      }
      if (v2 == v5 && v3 == v6) {
        char v11 = 1;
      }
      else {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of BindTarget(v5, v6, 5u);
      outlined copy of BindTarget(v2, v3, 5u);
      outlined consume of BindTarget(v2, v3, 5u);
      outlined consume of BindTarget(v5, v6, 5u);
      return v11 & 1;
    case 6u:
      switch(v2)
      {
        case 1:
          if (v7 != 6 || v5 != 1 || v6 != 0) {
            goto LABEL_31;
          }
          outlined consume of BindTarget(*(void *)a1, v3, 6u);
          char v11 = 1;
          outlined consume of BindTarget(1, 0, 6u);
          return v11 & 1;
        case 2:
          if (v7 != 6 || v5 != 2 || v6 != 0) {
            goto LABEL_31;
          }
          outlined consume of BindTarget(*(void *)a1, v3, 6u);
          uint64_t v18 = 2;
          goto LABEL_73;
        case 3:
          if (v7 != 6 || v5 != 3 || v6 != 0) {
            goto LABEL_31;
          }
          outlined consume of BindTarget(*(void *)a1, v3, 6u);
          uint64_t v18 = 3;
          goto LABEL_73;
        case 4:
          if (v7 != 6 || v5 != 4 || v6 != 0) {
            goto LABEL_31;
          }
          outlined consume of BindTarget(*(void *)a1, v3, 6u);
          uint64_t v18 = 4;
          goto LABEL_73;
        default:
          if (v7 != 6 || (v6 | v5) != 0) {
            goto LABEL_31;
          }
          outlined consume of BindTarget(*(void *)a1, v3, 6u);
          uint64_t v18 = 0;
LABEL_73:
          outlined consume of BindTarget(v18, 0, 6u);
          char v11 = 1;
          break;
      }
      return v11 & 1;
    default:
      if (*(unsigned char *)(a2 + 16))
      {
LABEL_30:
        swift_bridgeObjectRetain();
LABEL_31:
        outlined copy of BindTarget(v5, v6, v7);
        outlined consume of BindTarget(v2, v3, v4);
        outlined consume of BindTarget(v5, v6, v7);
        char v11 = 0;
      }
      else
      {
        Swift::String v8 = String.lowercased()();
        Swift::String v9 = String.lowercased()();
        if (v8._countAndFlagsBits == v9._countAndFlagsBits && v8._object == v9._object) {
          char v11 = 1;
        }
        else {
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        outlined copy of BindTarget(v5, v6, 0);
        outlined copy of BindTarget(v2, v3, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of BindTarget(v2, v3, 0);
        outlined consume of BindTarget(v5, v6, 0);
      }
      return v11 & 1;
  }
}

unint64_t specialized static InternalBindPath.pathFromTarget(_:_:)(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  switch(*(unsigned char *)(a1 + 16))
  {
    case 1:
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD000000000000017;
      goto LABEL_53;
    case 2:
      unint64_t v75 = 0;
      uint64_t v7 = *(void *)(v4 + 16);
      if (!v7) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v73 = v4;
      Swift::String v8 = (unsigned __int8 *)(v4 + 48);
      char v9 = 1;
      do
      {
        uint64_t v15 = *((void *)v8 - 2);
        BOOL v14 = (void *)*((void *)v8 - 1);
        uint64_t v16 = *v8;
        outlined copy of BindPath.Part(v15, (uint64_t)v14, *v8);
        if ((v9 & 1) == 0)
        {
          v17._uint64_t countAndFlagsBits = 46;
          v17._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v17);
        }
        v8 += 24;
        switch(v16)
        {
          case 1:
            if (v9)
            {
              swift_bridgeObjectRelease();
              unint64_t v75 = 0x2F2F3A656E656373;
            }
            if (a2)
            {
              String.utf8CString.getter();
              uint64_t v39 = (void *)REBindKeyEscape();
              swift_release();
              uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v42 = v41;

              v43._uint64_t countAndFlagsBits = v40;
              v43._unint64_t object = v42;
              String.append(_:)(v43);
              swift_bridgeObjectRelease();
              v44._uint64_t countAndFlagsBits = 93;
              v44._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v44);
              uint64_t v20 = 0x7365697469746E65;
              unint64_t v21 = 0xE90000000000005BLL;
            }
            else
            {
              swift_bridgeObjectRetain();
              uint64_t v20 = v15;
              unint64_t v21 = (unint64_t)v14;
            }
            unint64_t v45 = v21;
            String.append(_:)(*(Swift::String *)&v20);
            outlined consume of BindPath.Part(v15, (uint64_t)v14, 1u);
            goto LABEL_10;
          case 2:
            if (a2)
            {
              String.utf8CString.getter();
              uint64_t v46 = (void *)REBindKeyEscape();
              swift_release();
              uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v49 = v48;

              v50._uint64_t countAndFlagsBits = v47;
              v50._unint64_t object = v49;
              String.append(_:)(v50);
              swift_bridgeObjectRelease();
              v51._uint64_t countAndFlagsBits = 93;
              v51._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v51);
              uint64_t v22 = 0x7365697469746E65;
              unint64_t v23 = 0xE90000000000005BLL;
            }
            else
            {
              swift_bridgeObjectRetain();
              uint64_t v22 = v15;
              unint64_t v23 = (unint64_t)v14;
            }
            unint64_t v52 = v23;
            String.append(_:)(*(Swift::String *)&v22);
            outlined consume of BindPath.Part(v15, (uint64_t)v14, 2u);
            goto LABEL_10;
          case 3:
            _StringGuts.grow(_:)(26);
            swift_bridgeObjectRelease();
            if (a2)
            {
              String.utf8CString.getter();
              unint64_t v53 = (void *)REBindKeyEscape();
              swift_release();
              uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v25 = v54;
            }
            else
            {
              swift_bridgeObjectRetain();
              uint64_t v24 = v15;
              unint64_t v25 = v14;
            }
            v55._uint64_t countAndFlagsBits = v24;
            v55._unint64_t object = v25;
            String.append(_:)(v55);
            swift_bridgeObjectRelease();
            v56._uint64_t countAndFlagsBits = 93;
            v56._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v56);
            v57._uint64_t countAndFlagsBits = 0xD000000000000017;
            v57._unint64_t object = (void *)0x800000022834E930;
            String.append(_:)(v57);
            outlined consume of BindPath.Part(v15, (uint64_t)v14, 3u);
            goto LABEL_10;
          case 4:
            _StringGuts.grow(_:)(34);
            swift_bridgeObjectRelease();
            v74._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
            unint64_t v10 = 0x800000022834E880;
            goto LABEL_7;
          case 5:
            _StringGuts.grow(_:)(34);
            swift_bridgeObjectRelease();
            v26._uint64_t countAndFlagsBits = v15;
            v26._unint64_t object = v14;
            String.append(_:)(v26);
            v27._uint64_t countAndFlagsBits = 93;
            v27._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v27);
            v28._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
            v28._unint64_t object = (void *)0x800000022834E880;
            String.append(_:)(v28);
            outlined consume of BindPath.Part(v15, (uint64_t)v14, 5u);
            goto LABEL_10;
          case 6:
            _StringGuts.grow(_:)(34);
            swift_bridgeObjectRelease();
            v74._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
            v74._unint64_t object = (void *)0x800000022834E840;
            v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v29);
            swift_bridgeObjectRelease();
            uint64_t v12 = 23849;
            unint64_t v13 = 0xE200000000000000;
            goto LABEL_9;
          case 7:
            v74._uint64_t countAndFlagsBits = 0;
            v74._unint64_t object = (void *)0xE000000000000000;
            uint64_t v30 = 0x5B73746567726174;
            unint64_t v31 = 0xE800000000000000;
            goto LABEL_30;
          case 8:
            v74._uint64_t countAndFlagsBits = 0;
            v74._unint64_t object = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(17);
            uint64_t v30 = 0x615474416B6F6F6CLL;
            unint64_t v31 = 0xEE005B7374656772;
LABEL_30:
            String.append(_:)(*(Swift::String *)&v30);
            _print_unlocked<A, B>(_:_:)();
            goto LABEL_8;
          case 9:
            _StringGuts.grow(_:)(31);
            swift_bridgeObjectRelease();
            v74._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
            unint64_t v10 = 0x800000022834E820;
LABEL_7:
            v74._unint64_t object = (void *)v10;
            v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v11);
            swift_bridgeObjectRelease();
LABEL_8:
            uint64_t v12 = 93;
            unint64_t v13 = 0xE100000000000000;
LABEL_9:
            String.append(_:)(*(Swift::String *)&v12);
            String.append(_:)(v74);
            goto LABEL_10;
          case 10:
            swift_bridgeObjectRetain();
            v32._uint64_t countAndFlagsBits = v15;
            v32._unint64_t object = v14;
            String.append(_:)(v32);
            outlined consume of BindPath.Part(v15, (uint64_t)v14, 0xAu);
            outlined consume of BindPath.Part(v15, (uint64_t)v14, 0xAu);
            break;
          case 11:
            _StringGuts.grow(_:)(30);
            swift_bridgeObjectRelease();
            if (a2)
            {
              String.utf8CString.getter();
              unint64_t v58 = (void *)REBindKeyEscape();
              swift_release();
              uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v34 = v59;
            }
            else
            {
              swift_bridgeObjectRetain();
              uint64_t v33 = v15;
              uint64_t v34 = v14;
            }
            v60._uint64_t countAndFlagsBits = v33;
            v60._unint64_t object = v34;
            String.append(_:)(v60);
            swift_bridgeObjectRelease();
            v61._uint64_t countAndFlagsBits = 93;
            v61._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v61);
            v62._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
            v62._unint64_t object = (void *)0x800000022834E8D0;
            String.append(_:)(v62);
            outlined consume of BindPath.Part(v15, (uint64_t)v14, 0xBu);
LABEL_10:
            swift_bridgeObjectRelease();
            break;
          case 12:
            switch(v15)
            {
              case 1:
                v63._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
                v63._unint64_t object = (void *)0x800000022834E8F0;
                String.append(_:)(v63);
                break;
              case 2:
                v64._uint64_t countAndFlagsBits = 0xD000000000000018;
                v64._unint64_t object = (void *)0x800000022834E800;
                String.append(_:)(v64);
                break;
              case 3:
                v65._uint64_t countAndFlagsBits = 0xD000000000000021;
                v65._unint64_t object = (void *)0x800000022834E8A0;
                String.append(_:)(v65);
                break;
              case 4:
                v66._uint64_t countAndFlagsBits = 0xD000000000000015;
                v66._unint64_t object = (void *)0x800000022834E860;
                String.append(_:)(v66);
                break;
              default:
                v35._uint64_t countAndFlagsBits = 0xD000000000000013;
                v35._unint64_t object = (void *)0x800000022834E910;
                String.append(_:)(v35);
                break;
            }
            break;
          default:
            swift_bridgeObjectRelease();
            if (a2)
            {
              String.utf8CString.getter();
              uint64_t v36 = (void *)REBindKeyEscape();
              swift_release();
              uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v19 = v37;
            }
            else
            {
              swift_bridgeObjectRetain();
              uint64_t v18 = v15;
              uint64_t v19 = v14;
            }
            v38._uint64_t countAndFlagsBits = v18;
            v38._unint64_t object = v19;
            String.append(_:)(v38);
            swift_bridgeObjectRelease();
            outlined consume of BindPath.Part(v15, (uint64_t)v14, 0);
            unint64_t v75 = 0x3A65636976726573;
            break;
        }
        char v9 = 0;
        --v7;
      }
      while (v7);
      outlined consume of BindTarget(v73, (uint64_t)v3, 2u);
      return v75;
    case 3:
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      unint64_t v75 = 0xD00000000000001FLL;
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
      goto LABEL_59;
    case 4:
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      unint64_t v75 = 0xD00000000000001FLL;
      v69._uint64_t countAndFlagsBits = v4;
      v69._unint64_t object = v3;
      String.append(_:)(v69);
      goto LABEL_60;
    case 5:
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD00000000000001BLL;
LABEL_53:
      unint64_t v75 = v6;
      if (a2)
      {
        String.utf8CString.getter();
        char v70 = (void *)REBindKeyEscape();
        swift_release();
        uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v3 = v71;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      uint64_t v67 = v4;
      uint64_t v68 = v3;
LABEL_59:
      String.append(_:)(*(Swift::String *)&v67);
      swift_bridgeObjectRelease();
LABEL_60:
      v72._uint64_t countAndFlagsBits = 93;
      v72._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v72);
      return v75;
    case 6:
      unint64_t result = 0xD000000000000013;
      switch(v4)
      {
        case 1:
          unint64_t result = 0xD00000000000001DLL;
          break;
        case 2:
          unint64_t result = 0xD000000000000018;
          break;
        case 3:
          unint64_t result = 0xD000000000000021;
          break;
        case 4:
          unint64_t result = 0xD000000000000015;
          break;
        default:
          return result;
      }
      return result;
    default:
      swift_bridgeObjectRetain();
      return v4;
  }
}

uint64_t type metadata accessor for BindableValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of BindableDataInternal(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined copy of BindPath.Part(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xBu && ((1 << a3) & 0xC2F) != 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of BindPath.Part(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xBu && ((1 << a3) & 0xC2F) != 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
LABEL_20:
    swift_release();
    return 0;
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v5 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_27;
    }
    uint64_t v7 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v8 = swift_dynamicCastClassUnconditional();
LABEL_7:
      uint64_t v9 = v8;
      goto LABEL_11;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if (result) {
      goto LABEL_26;
    }
    uint64_t v10 = specialized static Entity.entityInfoType(_:)(v7);
    if (!v10)
    {
      uint64_t v8 = makeEntity(for:)(v7);
      goto LABEL_7;
    }
    uint64_t v9 = (*(uint64_t (**)(void))(v10 + 232))();
    uint64_t v11 = *(void *)(v9 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v11, 0);
    *(void *)(v9 + 16) = v7;
    MEMORY[0x22A68E750](v7, v9);
    swift_release();
LABEL_11:
    uint64_t result = REEntityGetChildCount();
    if (v5 >= result) {
      goto LABEL_25;
    }
    REEntityGetName();
    if (String.init(cString:)() == a2 && v12 == a3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v9;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v14)
    {
      swift_release();
      return v9;
    }
    ++v5;
    swift_release();
    if (v5 >= REEntityGetChildCount()) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_227E0ADB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BindableValue();
  return BindableValue.value.getter(v2, a1);
}

uint64_t sub_227E0ADF4()
{
  return 16;
}

__n128 sub_227E0AE00(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227E0AE0C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

void *keypath_set_3Tm(void *result, void *a2)
{
  if (*result != *a2) {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for BindPath()
{
  return &type metadata for BindPath;
}

uint64_t initializeBufferWithCopyOfBuffer for BindPath.Part(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for BindPath.Part(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of BindPath.Part);
}

uint64_t destroy for BindPath.Part(uint64_t a1)
{
  return outlined consume of BindPath.Part(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t *assignWithCopy for BindPath.Part(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for BindPath.Part(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of BindPath.Part, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of BindPath.Part);
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for BindPath.Part(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for BindPath.Part(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of BindPath.Part);
}

uint64_t getEnumTagSinglePayload for BindPath.Part(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF4 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xC) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BindPath.Part(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 244;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for BindPath.Part(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 0xBu) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 12);
  }
}

uint64_t destructiveInjectEnumTag for BindPath.Part(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(void *)__n128 result = a2 - 12;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 12;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BindPath.Part()
{
  return &type metadata for BindPath.Part;
}

uint64_t initializeBufferWithCopyOfBuffer for BindTarget(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for BindPath.Part(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of BindTarget);
}

uint64_t destroy for BindTarget(uint64_t a1)
{
  return outlined consume of BindTarget(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for BindPath.Part(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for BindTarget(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for BindPath.Part(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of BindTarget, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of BindTarget);
}

uint64_t *assignWithCopy for BindPath.Part(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for BindTarget(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for BindPath.Part(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of BindTarget);
}

uint64_t *assignWithTake for BindPath.Part(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BindTarget(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BindTarget(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for BindTarget(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t destructiveInjectEnumTag for BindTarget(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)__n128 result = a2 - 6;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BindTarget()
{
  return &type metadata for BindTarget;
}

ValueMetadata *type metadata accessor for BindTarget.ScenePath()
{
  return &type metadata for BindTarget.ScenePath;
}

void *initializeBufferWithCopyOfBuffer for BindTarget.TextureCoordinateTransformPath(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for BindTarget.TextureCoordinateTransformPath()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for BindTarget.TextureCoordinateTransformPath(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for BindTarget.TextureCoordinateTransformPath(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for BindTarget.TextureCoordinateTransformPath(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BindTarget.TextureCoordinateTransformPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BindTarget.TextureCoordinateTransformPath()
{
  return &type metadata for BindTarget.TextureCoordinateTransformPath;
}

ValueMetadata *type metadata accessor for BindTarget.MaterialPath()
{
  return &type metadata for BindTarget.MaterialPath;
}

ValueMetadata *type metadata accessor for BindTarget.EntityPath()
{
  return &type metadata for BindTarget.EntityPath;
}

ValueMetadata *type metadata accessor for BindTarget.IkSolverPath()
{
  return &type metadata for BindTarget.IkSolverPath;
}

void *initializeBufferWithCopyOfBuffer for InternalBindPath(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for InternalBindPath()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for InternalBindPath(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for InternalBindPath(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalBindPath(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalBindPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalBindPath()
{
  return &type metadata for InternalBindPath;
}

uint64_t type metadata instantiation function for BindableValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata completion function for BindableValue()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for BindableValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  unint64_t v10 = ~(unint64_t)v8;
  uint64_t v11 = v7 + v8;
  if (*(_DWORD *)(v6 + 84)) {
    size_t v12 = *(void *)(v6 + 64);
  }
  else {
    size_t v12 = v7 + 1;
  }
  unint64_t v13 = ((v7 + v8) & ~(unint64_t)v8) + v12;
  int v14 = v8 & 0x100000;
  if (v9 > 7 || v14 != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v17 + ((v9 + 16) & v10));
    swift_retain();
  }
  else
  {
    uint64_t v18 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v18(a1, a2, v5);
    uint64_t v19 = (void *)(((unint64_t)a2 + v11) & v10);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48))(v19, 1, v5))
    {
      memcpy((void *)(((unint64_t)v4 + v11) & v10), v19, v12);
    }
    else
    {
      v18((uint64_t *)(((unint64_t)v4 + v11) & v10), v19, v5);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))(((unint64_t)v4 + v11) & v10, 0, 1, v5);
    }
  }
  return v4;
}

uint64_t destroy for BindableValue(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v7(a1, v3);
  unint64_t v5 = (*(void *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3);
  if (!result)
  {
    return v7(v5, v3);
  }
  return result;
}

void *initializeWithCopy for BindableValue(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  int v8 = *(void (**)(void *, const void *, uint64_t))(v6 + 16);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = (void *)(((unint64_t)a1 + v9 + v10) & ~v10);
  size_t v12 = (const void *)(((unint64_t)a2 + v9 + v10) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v5))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v13 = v9;
    }
    else {
      size_t v13 = v9 + 1;
    }
    memcpy(v11, v12, v13);
  }
  else
  {
    v8(v11, v12, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for BindableValue(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  int v8 = *(void (**)(void *, const void *, uint64_t))(v6 + 24);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = a1;
  uint64_t v11 = (void *)(((unint64_t)a1 + v9 + v10) & ~v10);
  size_t v12 = (void *)(((unint64_t)a2 + v9 + v10) & ~v10);
  size_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v14 = v13(v11, 1, v5);
  int v15 = v13(v12, 1, v5);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v11, v12, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v5);
      return v19;
    }
    int v16 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v15)
    {
      v8(v11, v12, v5);
      return v19;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v5);
    int v16 = *(_DWORD *)(v7 + 84);
  }
  if (v16) {
    size_t v17 = v9;
  }
  else {
    size_t v17 = v9 + 1;
  }
  memcpy(v11, v12, v17);
  return v19;
}

void *initializeWithTake for BindableValue(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  int v8 = *(void (**)(void *, const void *, uint64_t))(v6 + 32);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = (void *)(((unint64_t)a1 + v9 + v10) & ~v10);
  size_t v12 = (const void *)(((unint64_t)a2 + v9 + v10) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v5))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v13 = v9;
    }
    else {
      size_t v13 = v9 + 1;
    }
    memcpy(v11, v12, v13);
  }
  else
  {
    v8(v11, v12, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for BindableValue(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  int v8 = *(void (**)(void *, const void *, uint64_t))(v6 + 40);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = a1;
  uint64_t v11 = (void *)(((unint64_t)a1 + v9 + v10) & ~v10);
  size_t v12 = (void *)(((unint64_t)a2 + v9 + v10) & ~v10);
  size_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v14 = v13(v11, 1, v5);
  int v15 = v13(v12, 1, v5);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v11, v12, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v5);
      return v19;
    }
    int v16 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v15)
    {
      v8(v11, v12, v5);
      return v19;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v5);
    int v16 = *(_DWORD *)(v7 + 84);
  }
  if (v16) {
    size_t v17 = v9;
  }
  else {
    size_t v17 = v9 + 1;
  }
  memcpy(v11, v12, v17);
  return v19;
}

uint64_t getEnumTagSinglePayload for BindableValue(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6) {
    uint64_t v8 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v8 = v7 + 1;
  }
  if (!a2) {
    return 0;
  }
  unsigned int v9 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_22;
  }
  uint64_t v10 = v8 + ((v7 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v13 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v6) {
        return (*(uint64_t (**)(void))(v5 + 48))();
      }
      return 0;
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_22;
  }
LABEL_14:
  int v14 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v14 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v6 + (v10 | v14) + 1;
}

void storeEnumTagSinglePayload for BindableValue(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = (v8 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!v7) {
    ++v8;
  }
  size_t v10 = v8 + v9;
  BOOL v11 = a3 >= v7;
  unsigned int v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v14 = ~v7 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_23;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_23;
    case 3:
LABEL_36:
      __break(1u);
      JUMPOUT(0x227E0C1B4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_22;
    default:
LABEL_22:
      if (a2)
      {
LABEL_23:
        uint64_t v18 = *(void (**)(void))(v6 + 56);
        v18();
      }
      return;
  }
}

ValueMetadata *type metadata accessor for BindableValuesReference()
{
  return &type metadata for BindableValuesReference;
}

ValueMetadata *type metadata accessor for ParameterSet()
{
  return &type metadata for ParameterSet;
}

ValueMetadata *type metadata accessor for Entity.ParameterSet()
{
  return &type metadata for Entity.ParameterSet;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

id __AmbientLightComponent.color.getter()
{
  return *v0;
}

void __AmbientLightComponent.color.setter(void *a1)
{
  id *v1 = a1;
}

uint64_t (*__AmbientLightComponent.color.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float __AmbientLightComponent.intensity.getter()
{
  return *(float *)(v0 + 8);
}

void __AmbientLightComponent.intensity.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*__AmbientLightComponent.intensity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

CGColorRef __AmbientLightComponent.init()@<X0>(uint64_t a1@<X8>)
{
  CGColorRef result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = 1143652352;
  return result;
}

void __AmbientLightComponent.init(cgColor:intensity:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(void *)a2 = a1;
  *(float *)(a2 + 8) = a3;
}

void static __AmbientLightComponent.__fromCore(_:)(uint64_t a1@<X8>)
{
  REAmbientLightComponentGetColorGamut3F();
  REAmbientLightComponentGetIntensity();
  int v3 = v2;
  uint64_t v4 = RECreateCGColorFromColorGamut();

  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v3;
}

uint64_t __AmbientLightComponent.__toCore(_:)()
{
  return RENetworkMarkComponentDirty();
}

void static __AmbientLightComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 48;
}

uint64_t static __AmbientLightComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 8);
  float v3 = *(float *)(a2 + 8);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  return static _CFObject.== infix(_:_:)() & (v2 == v3);
}

void protocol witness for static Component.__coreComponentType.getter in conformance __AmbientLightComponent(_DWORD *a1@<X8>)
{
  *a1 = 48;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 8);
  float v3 = *(float *)(a2 + 8);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  return static _CFObject.== infix(_:_:)() & (v2 == v3);
}

uint64_t initializeBufferWithCopyOfBuffer for __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  float v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)CGColorRef result = v2;
  return result;
}

uint64_t assignWithTake for __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for __AmbientLightComponent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 12)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __AmbientLightComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)CGColorRef result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)CGColorRef result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 12) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __AmbientLightComponent()
{
  return &type metadata for __AmbientLightComponent;
}

uint64_t __RKEmphasisPopAnimation.deinit()
{
  return v0;
}

uint64_t __RKEmphasisPopAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisPopAnimation()
{
  return self;
}

uint64_t specialized static __RKEmphasisPopAnimation.createPopAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 264, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for playfulPopAnimationData == -1) {
        goto LABEL_8;
      }
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 52, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for wildPopAnimationData == -1) {
        goto LABEL_8;
      }
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 118, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for basicPopAnimationData != -1) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((void *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v18 = rawValue[2];
  if (v18)
  {
    char v8 = v34;
    float v10 = (float)v18;
    int v9 = v36;
    uint64_t v19 = (long long *)&rawValue[6 * v18];
    long long v29 = *v19;
    long long v30 = *(v19 - 1);
    long long v28 = v19[1];
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  unint64_t v21 = rawValue[2];
  unint64_t v20 = rawValue[3];
  float v22 = a5 / v10;
  if (v21 >= v20 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, rawValue);
  }
  rawValue[2] = v21 + 1;
  unint64_t v23 = &rawValue[6 * v21];
  v23[2] = v30;
  v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  Swift::String v32 = "Transform.transform";
  char v33 = 1;
  char v34 = v8;
  float v35 = v22;
  int v36 = v9;
  float v37 = a5;
  uint64_t SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation) {
    goto LABEL_15;
  }
  uint64_t v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_22830EC60;
  swift_bridgeObjectRelease();
  *(void *)(v26 + 32) = v25;
  return v26;
}

Swift::Bool __swiftcall RKChangeSceneActionSimulationTechnique.switchScenes()()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = v0;
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      id v3 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v3)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(SceneNullable);
      }
      Scene.__interactionService.getter();
      type metadata accessor for __RKEntityInteractionManager();
      uint64_t SceneNullable = swift_dynamicCastClass();
      if (SceneNullable)
      {
        swift_beginAccess();
        uint64_t v4 = *(void *)(SceneNullable + 48);
        uint64_t v5 = OBJC_IVAR____TtC17RealityFoundation33RKChangeSceneActionBasicTechnique_targetSceneIdentifier;
        swift_beginAccess();
        if (MEMORY[0x22A696620](v4 + 16))
        {
          uint64_t v6 = *(void *)(v4 + 24);
          uint64_t SceneNullable = v1 + v5;
          uint64_t ObjectType = swift_getObjectType();
          char v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8);
          uint64_t v9 = swift_retain();
          LOBYTE(SceneNullable) = v8(v9, SceneNullable, ObjectType, v6);
          swift_release();
          swift_unknownObjectRelease();
        }
        else
        {
          LOBYTE(SceneNullable) = 0;
        }
        swift_retain();
        specialized RKChangeSceneActionSimulationTechnique.reRegisterInteractions(rootEntity:)();
        swift_release();
      }
      swift_release();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    LOBYTE(SceneNullable) = 0;
  }
  return SceneNullable & 1;
}

uint64_t RKChangeSceneActionSimulationTechnique.__deallocating_deinit()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC17RealityFoundation33RKChangeSceneActionBasicTechnique_targetSceneIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for RKChangeSceneActionSimulationTechnique()
{
  return type metadata accessor for RKChangeSceneActionSimulationTechnique();
}

uint64_t type metadata accessor for RKChangeSceneActionSimulationTechnique()
{
  uint64_t result = type metadata singleton initialization cache for RKChangeSceneActionSimulationTechnique;
  if (!type metadata singleton initialization cache for RKChangeSceneActionSimulationTechnique) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RKChangeSceneActionSimulationTechnique()
{
  return swift_updateClassMetadata2();
}

uint64_t specialized RKChangeSceneActionSimulationTechnique.reRegisterInteractions(rootEntity:)()
{
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration
    && REEntityGetCustomComponent()
    && (uint64_t Object = RECustomComponentGetObject()) != 0)
  {
    uint64_t v1 = *(void *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v8);
    if (v1) {
      uint64_t v2 = v1;
    }
    else {
      uint64_t v2 = __RKEntityInteractionsComponent.decodedJSON()();
    }
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)v8);
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE78];
  }
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3)
  {
    if (static __RKEntityInteractionsComponent.registration
      && REEntityGetCustomComponent()
      && (uint64_t v5 = RECustomComponentGetObject()) != 0)
    {
      uint64_t v6 = *(void *)(v5 + 16);
      outlined init with copy of __RKEntityInteractionsComponent(v5, (uint64_t)v8);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = __RKEntityInteractionsComponent.decodedJSON()();
      }
      swift_bridgeObjectRetain();
      outlined destroy of __RKEntityInteractionsComponent((uint64_t)v8);
    }
    else
    {
      uint64_t v7 = MEMORY[0x263F8EE78];
    }
    Entity.__interactions.setter(MEMORY[0x263F8EE78]);
    return Entity.__interactions.setter(v7);
  }
  return result;
}

uint64_t specialized InteractionsLogger.init<A>(_:_:)@<X0>(uint64_t a1@<X3>, void *a2@<X8>)
{
  if (a1)
  {
    _print_unlocked<A, B>(_:_:)();
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8285;
  v6._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 8250;
  v8._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  uint64_t result = swift_release();
  *a2 = 91;
  a2[1] = 0xE100000000000000;
  return result;
}

uint64_t __RKEntityLookAtCameraAction.__allocating_init(targetEntity:duration:direction:upVector:)(uint64_t a1, float a2, __n128 a3, __n128 a4)
{
  type metadata accessor for __RKEntityLookAtCameraAction();
  swift_allocObject();
  uint64_t v6 = specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(a2, 0.0, a3, 0.0, a4, a1, 0);
  swift_release();
  return v6;
}

uint64_t __RKEntityLookAtCameraAction.__allocating_init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(uint64_t a1, char a2, float a3, float a4, __n128 a5, float a6, __n128 a7)
{
  swift_allocObject();
  uint64_t v12 = specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(a3, a4, a5, a6, a7, a1, a2);
  swift_release();
  return v12;
}

uint64_t type metadata accessor for __RKEntityLookAtCameraAction()
{
  return self;
}

uint64_t __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(uint64_t a1, char a2, float a3, float a4, __n128 a5, float a6, __n128 a7)
{
  uint64_t v7 = specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(a3, a4, a5, a6, a7, a1, a2);
  swift_release();
  return v7;
}

Swift::Void __swiftcall __RKEntityLookAtCameraAction.setFinalRotation()()
{
  uint64_t v1 = 0;
  long long v2 = *(_OWORD *)(v0 + 128);
  while (1)
  {
    long long v39 = v2;
    float v4 = *(float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    long long v40 = xmmword_22831EF60;
    float v5 = *(float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    BOOL v3 = v4 == v5;
    if (v1 == 2) {
      break;
    }
    while (1)
    {
      ++v1;
      if (v3) {
        break;
      }
      if (v1 == 2) {
        goto LABEL_9;
      }
      BOOL v3 = 0;
    }
  }
  if (v4 == v5)
  {
    long long v6 = xmmword_22831EF70;
LABEL_12:
    int v9 = -1131480523;
LABEL_13:
    float v10 = *(float *)&v9;
LABEL_14:
    *(_OWORD *)(v0 + 256) = v6;
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v7 = 0;
  while (1)
  {
    long long v37 = v2;
    float v13 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
    long long v38 = xmmword_22830ECB0;
    float v14 = *(float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
    BOOL v8 = v13 == v14;
    if (v7 == 2) {
      break;
    }
    while (1)
    {
      ++v7;
      if (v8) {
        break;
      }
      if (v7 == 2) {
        goto LABEL_18;
      }
      BOOL v8 = 0;
    }
  }
  if (v13 == v14)
  {
    long long v6 = xmmword_22830ECC0;
    goto LABEL_12;
  }
LABEL_18:
  uint64_t v11 = 0;
  while (1)
  {
    long long v35 = v2;
    float v17 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    long long v36 = xmmword_22831EF80;
    float v18 = *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    BOOL v12 = v17 == v18;
    if (v11 == 2) {
      break;
    }
    while (1)
    {
      ++v11;
      if (v12) {
        break;
      }
      if (v11 == 2) {
        goto LABEL_26;
      }
      BOOL v12 = 0;
    }
  }
  if (v17 == v18)
  {
    long long v6 = xmmword_22831EF90;
    goto LABEL_12;
  }
LABEL_26:
  uint64_t v15 = 0;
  while (1)
  {
    long long v33 = v2;
    float v21 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    long long v34 = xmmword_22830ECA0;
    float v22 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    BOOL v16 = v21 == v22;
    if (v15 == 2) {
      break;
    }
    while (1)
    {
      ++v15;
      if (v16) {
        break;
      }
      if (v15 == 2) {
        goto LABEL_34;
      }
      BOOL v16 = 0;
    }
  }
  if (v21 == v22)
  {
    long long v6 = xmmword_22831EFA0;
    goto LABEL_12;
  }
LABEL_34:
  uint64_t v19 = 0;
  while (1)
  {
    long long v31 = v2;
    float v25 = *(float *)((unint64_t)&v31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
    long long v32 = xmmword_22830EC90;
    float v26 = *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
    BOOL v20 = v25 == v26;
    if (v19 == 2) {
      break;
    }
    while (1)
    {
      ++v19;
      if (v20) {
        break;
      }
      if (v19 == 2) {
        goto LABEL_42;
      }
      BOOL v20 = 0;
    }
  }
  if (v25 == v26)
  {
    long long v6 = xmmword_22831EFB0;
    int v9 = 1016003125;
    goto LABEL_13;
  }
LABEL_42:
  uint64_t v23 = 0;
  while (1)
  {
    long long v29 = v2;
    float v27 = *(float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
    long long v30 = xmmword_22831EFC0;
    float v28 = *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
    BOOL v24 = v27 == v28;
    if (v23 == 2) {
      break;
    }
    while (1)
    {
      ++v23;
      if (v24) {
        break;
      }
      if (v23 == 2)
      {
        float v10 = 0.017453;
        goto LABEL_15;
      }
      BOOL v24 = 0;
    }
  }
  float v10 = 0.017453;
  if (v27 == v28)
  {
    long long v6 = xmmword_22831EFD0;
    goto LABEL_14;
  }
LABEL_15:
  *(float *)(v0 + 144) = *(float *)(v0 + 144) * v10;
}

double __RKEntityLookAtCameraAction.getPose(cameraPose:currentPose:)(float32x2_t a1, float a2, double a3, float32x2_t a4, float a5)
{
  uint64_t v6 = 0;
  long long v7 = *(_OWORD *)(v5 + 160);
  while (1)
  {
    long long v17 = v7;
    float v9 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    BOOL v8 = v9 == 0.0;
    if (v6 == 2) {
      break;
    }
    while (1)
    {
      ++v6;
      if (v8) {
        break;
      }
      if (v6 == 2) {
        goto LABEL_9;
      }
      BOOL v8 = 0;
    }
  }
  if (v9 == 0.0)
  {
    REMakeLookAtPose();
    double v16 = v10;
    __sincosf_stret(*(float *)(v5 + 144) * 0.5);
    return v16;
  }
  else
  {
LABEL_9:
    *(float32x2_t *)v12.f32 = vsub_f32(a1, a4);
    v12.i64[1] = COERCE_UNSIGNED_INT(a2 - a5);
    float32x4_t v13 = vmulq_f32(v12, v12);
    double v11 = 0.0;
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]) != 0.0)
    {
      __sincosf_stret(*(float *)(v5 + 144) * 0.5);
      REMakeLookAtPose();
      return v14;
    }
  }
  return v11;
}

Swift::Void __swiftcall __RKEntityLookAtCameraAction.update()()
{
  uint64_t v31 = StaticString.description.getter();
  uint64_t v32 = v1;
  v2._uint64_t countAndFlagsBits = 8250;
  v2._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  uint64_t v4 = v31;
  uint64_t v3 = v32;
  swift_beginAccess();
  if (!*(void *)(v0 + 16))
  {
    uint64_t v29 = v31;
    uint64_t v30 = v32;
    os_log_type_t v20 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v20, &v29);
    swift_bridgeObjectRelease();
    return;
  }
  swift_retain();
  if (REEntityGetSceneNullable())
  {
    RETransformComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      uint64_t WorldSRT = RETransformComponentGetWorldSRT();
      long long v26 = v6;
      MEMORY[0x270FA5388](WorldSRT);
      __n128 v28 = v7;
      __n128 v24 = v7;
      __n128 v25 = v8;
      uint64_t v29 = v31;
      uint64_t v30 = v32;
      uint64_t v9 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v9, &v29, partial apply for implicit closure #4 in __RKEntityLookAtCameraAction.update(), v23);
      if (RESceneFindFirstCameraComponent())
      {
        float v10 = v28.n128_f32[2];
        uint64_t v11 = RECustomMatrixCameraComponentCalculateWorldPose();
        __n128 v27 = v12;
        float v13 = v12.n128_f32[2];
        MEMORY[0x270FA5388](v11);
        __n128 v24 = v27;
        __n128 v25 = v14;
        uint64_t v29 = v4;
        uint64_t v30 = v3;
        uint64_t v15 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v15, &v29, partial apply for implicit closure #5 in __RKEntityLookAtCameraAction.update(), v23);
        __RKEntityLookAtCameraAction.getPose(cameraPose:currentPose:)((float32x2_t)v27.n128_u64[0], v13, v16, (float32x2_t)v28.n128_u64[0], v10);
        __n128 v27 = v17;
        __n128 v24 = MEMORY[0x270FA5388](v18);
        __n128 v25 = v27;
        uint64_t v29 = v4;
        uint64_t v30 = v3;
        uint64_t v19 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v19, &v29, partial apply for implicit closure #6 in __RKEntityLookAtCameraAction.update(), v23);
        swift_bridgeObjectRelease();
        RETransformComponentSetWorldAnimatedSRT();
        RENetworkMarkComponentDirty();
        REAnimationComponentGetComponentType();
        if (!REEntityGetComponentByClass() || (REAnimationComponentHasRunningAnimations() & 1) == 0) {
          RETransformComponentSetWorldOrientation();
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v29 = v31;
      uint64_t v30 = v32;
      os_log_type_t v22 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v22, &v29);
    }
  }
  else
  {
    uint64_t v29 = v31;
    uint64_t v30 = v32;
    os_log_type_t v21 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v21, &v29);
  }
  swift_bridgeObjectRelease();
LABEL_12:
  swift_release();
}

uint64_t implicit closure #4 in __RKEntityLookAtCameraAction.update()(Swift::Int a1, uint64_t a2, void *a3)
{
  _StringGuts.grow(_:)(a1);
  v5._uint64_t countAndFlagsBits = a2;
  v5._unint64_t object = a3;
  String.append(_:)(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  v6._uint64_t countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0;
  v7._unint64_t object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t implicit closure #6 in __RKEntityLookAtCameraAction.update()()
{
  _StringGuts.grow(_:)(19);
  v0._unint64_t object = (void *)0x800000022834EC00;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  type metadata accessor for simd_quatf(0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0;
  v1._unint64_t object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t __RKEntityLookAtCameraAction.createLookAtAnimation()()
{
  swift_beginAccess();
  if (*(void *)(v0 + 16))
  {
    swift_retain();
    if (REEntityGetSceneNullable())
    {
      RETransformComponentGetComponentType();
      uint64_t result = REEntityGetComponentByClass();
      if (!result)
      {
        __break(1u);
        goto LABEL_13;
      }
      RETransformComponentGetWorldPose();
      long long v7 = v2;
      RETransformComponentGetLocalUnanimatedSRT();
      if (RESceneFindFirstCameraComponent())
      {
        RECustomMatrixCameraComponentCalculateWorldPose();
        long long v6 = v3;
        REAnimationComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        if (RESceneGetECSManagerNullable())
        {
          uint64_t ServiceLocator = REECSManagerGetServiceLocator();
          uint64_t result = MEMORY[0x22A692220](ServiceLocator);
          if (result)
          {
            __RKEntityLookAtCameraAction.getPose(cameraPose:currentPose:)(*(float32x2_t *)&v6, *((float *)&v6 + 2), v5, *(float32x2_t *)&v7, *((float *)&v7 + 2));
            RETransformComponentGetWorldOrientation();
            RETransformComponentSetWorldOrientation();
            RETransformComponentGetLocalUnanimatedSRT();
            RETransformComponentSetWorldOrientation();
            RENetworkMarkComponentDirty();
            REMakeSRT();
            REFromToByAnimationDefaultParameters();
            uint64_t result = REAssetManagerTimelineAssetCreateSRTAnimation();
            if (result)
            {
              *(void *)(v0 + 240) = REAnimationComponentPlay();
              *(unsigned char *)(v0 + 248) = 0;
              RERelease();
              swift_release();
              return 1;
            }
            goto LABEL_14;
          }
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }
      }
    }
    swift_release();
  }
  return 0;
}

uint64_t __RKEntityLookAtCameraAction.perform(with:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v36 = 91;
  unint64_t v37 = 0xE100000000000000;
  if (v2)
  {
    *(void *)&long long v33 = 0;
    *((void *)&v33 + 1) = 0xE000000000000000;
    uint64_t v38 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    unint64_t v4 = 0xE000000000000000;
    uint64_t v3 = 0;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8285;
  v6._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 8250;
  v8._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  uint64_t v10 = v36;
  unint64_t v9 = v37;
  uint64_t v11 = *(void *)(v0 + 16);
  if (!v11)
  {
    uint64_t v16 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v16, &v36);
    swift_bridgeObjectRelease();
    return 0;
  }
  __n128 v12 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v12 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_14:
      uint64_t v17 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v17, &v36);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)(v11 + 16);
  RERigidBodyComponentGetComponentType();
  ComponentByuint64_t Class = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    int MotionType = RERigidBodyComponentGetMotionType();
    if (MotionType != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
  }
  else
  {
    int MotionType = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindPoint<Transform>);
  uint64_t inited = swift_initStackObject();
  swift_retain();
  *(void *)(inited + 16) = REBindPointCreateReferenceForEntityAnimatedValuesSRT();
  *(unsigned char *)(inited + 24) = 0;
  char IsValid = REBindPointIsValid();
  swift_release();
  if (IsValid)
  {
    BOOL v21 = ComponentByClass == 0;
    REBindPointSetOverrideEnabled();
    uint64_t v22 = swift_allocObject();
    swift_weakInit();
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = v13;
    *(_DWORD *)(v23 + 32) = MotionType;
    *(unsigned char *)(v23 + 36) = v21;
    uint64_t v24 = *(void *)(v1 + 32);
    *(void *)(v1 + 32) = partial apply for specialized closure #1 in __RKEntityLookAtCameraAction.perform(with:);
    *(void *)(v1 + 40) = v23;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v24);
    if (*(void *)(v1 + 24)) {
      REEngineGetCurrentTime();
    }
    else {
      double v25 = CACurrentMediaTime();
    }
    float v26 = *(float *)(v1 + 112);
    *(double *)(v1 + 224) = v25 + *(float *)(v1 + 108);
    if (v26 >= 0.1)
    {
      if (*(void *)(v1 + 24)) {
        REEngineGetCurrentTime();
      }
      else {
        double v31 = CACurrentMediaTime();
      }
      *(double *)(v1 + 232) = v31 + *(float *)(v1 + 112);
      uint64_t v35 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v29 = swift_allocObject();
      swift_weakInit();
      uint64_t v30 = partial apply for closure #2 in __RKEntityLookAtCameraAction.perform(with:);
    }
    else
    {
      uint64_t v27 = *(void *)(v1 + 96);
      char v28 = *(unsigned char *)(v1 + 104);
      *(void *)(v1 + 96) = 1;
      *(unsigned char *)(v1 + 104) = 1;
      uint64_t v36 = v27;
      LOBYTE(v37) = v28;
      __RKEntityAction.state.didset((uint64_t)&v36);
      uint64_t v35 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v29 = swift_allocObject();
      swift_weakInit();
      uint64_t v30 = partial apply for closure #3 in __RKEntityLookAtCameraAction.perform(with:);
    }
    specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v33, (uint64_t)v30, v29, &v36);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v33, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v36, v1 + 184);
    swift_endAccess();
    uint64_t v36 = v10;
    unint64_t v37 = v9;
    uint64_t v32 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v32, &v36);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    swift_setDeallocating();
    uint64_t result = REBindPointDestroy();
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in __RKEntityLookAtCameraAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 184;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v6, (uint64_t)&v8);
    if (*((void *)&v9 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v8, (uint64_t)v7);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v8, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v7, v7[3]);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v8, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v8, v6);
    swift_endAccess();
    swift_beginAccess();
    if (*(void *)(v5 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(unsigned char *)(v5 + 104) == 1) && *(void *)(v5 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(void *)(v5 + 240) = 0;
      *(unsigned char *)(v5 + 248) = 1;
    }
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a3 & 0x100000000) == 0 && a3 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityLookAtCameraAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    if ((*(unsigned char *)(result + 249) & 1) == 0 && *(float *)(result + 112) >= 0.1)
    {
      *(unsigned char *)(result + 249) = __RKEntityLookAtCameraAction.createLookAtAnimation()() & 1;
      swift_beginAccess();
      uint64_t v2 = *(void *)(v1 + 96);
      char v3 = *(unsigned char *)(v1 + 104);
      *(void *)(v1 + 96) = 1;
      *(unsigned char *)(v1 + 104) = 1;
      uint64_t v8 = v2;
      char v9 = v3;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v8);
      swift_release();
    }
    if (*(void *)(v1 + 24)) {
      REEngineGetCurrentTime();
    }
    else {
      double v4 = CACurrentMediaTime();
    }
    if (*(double *)(v1 + 224) <= v4 && (*(unsigned char *)(v1 + 176) & 1) == 0)
    {
      swift_beginAccess();
      uint64_t v5 = *(void *)(v1 + 96);
      char v6 = *(unsigned char *)(v1 + 104);
      *(void *)(v1 + 96) = 2;
      *(unsigned char *)(v1 + 104) = 1;
      uint64_t v8 = v5;
      char v9 = v6;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v8);
      swift_release();
      *(unsigned char *)(v1 + 249) = 0;
    }
    if (*(void *)(v1 + 24)) {
      REEngineGetCurrentTime();
    }
    else {
      double v7 = CACurrentMediaTime();
    }
    if (*(double *)(v1 + 232) <= v7)
    {
      swift_beginAccess();
      if (*(void *)(v1 + 16))
      {
        swift_retain();
        REAnimationComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          if (REAnimationComponentHasRunningAnimations())
          {
            if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
              || (swift_beginAccess(), *(unsigned char *)(v1 + 104) == 1) && *(void *)(v1 + 96) == 3)
            {
              REAnimationComponentStopAllAnimations();
              RENetworkMarkComponentDirty();
            }
          }
        }
        swift_release();
        *(void *)(v1 + 240) = 0;
        *(unsigned char *)(v1 + 248) = 1;
      }
      *(double *)(v1 + 232) = *(double *)(v1 + 232) + *(float *)(v1 + 112);
      *(unsigned char *)(v1 + 249) = 0;
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in __RKEntityLookAtCameraAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    __RKEntityLookAtCameraAction.update()();
    if (*(void *)(v1 + 24)) {
      REEngineGetCurrentTime();
    }
    else {
      double v2 = CACurrentMediaTime();
    }
    if (*(double *)(v1 + 224) <= v2)
    {
      swift_beginAccess();
      uint64_t v3 = *(void *)(v1 + 96);
      char v4 = *(unsigned char *)(v1 + 104);
      *(void *)(v1 + 96) = 2;
      *(unsigned char *)(v1 + 104) = 1;
      uint64_t v5 = v3;
      char v6 = v4;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v5);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t __RKEntityLookAtCameraAction.reversed()()
{
  return 0;
}

uint64_t __RKEntityLookAtCameraAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  float v3 = v1[6].n128_f32[3];
  float v4 = v1[7].n128_f32[0];
  float v5 = v1[9].n128_f32[0];
  __n128 v11 = v1[10];
  __n128 v12 = v1[8];
  char v6 = v1[11].n128_i8[0];
  uint64_t v7 = type metadata accessor for __RKEntityLookAtCameraAction();
  swift_allocObject();
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(v3, v4, v12, v5, v11, v8, v6);
  uint64_t result = swift_release();
  a1[3] = v7;
  *a1 = v9;
  return result;
}

uint64_t __RKEntityLookAtCameraAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = v1[1].n128_u64[0];
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    float v5 = v1[6].n128_f32[3];
    float v6 = v1[7].n128_f32[0];
    float v7 = v1[9].n128_f32[0];
    __n128 v11 = v1[10];
    __n128 v12 = v1[8];
    char v8 = v1[11].n128_i8[0];
    type metadata accessor for __RKEntityLookAtCameraAction();
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v4 = specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(v5, v6, v12, v7, v11, v9, v8);
    swift_release();
  }
  else
  {
    __RKEntityLookAtCameraAction.copy(with:)(v14);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v13;
    }
    else {
      return 0;
    }
  }
  return v4;
}

void __RKEntityLookAtCameraAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityLookAtCameraAction.init(targetEntity:)()
{
}

uint64_t __RKEntityLookAtCameraAction.__ivar_destroyer()
{
  return outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityLookAtCameraAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityLookAtCameraAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t *a4@<X8>)
{
  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &v12);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  char v8 = (void *)swift_allocObject();
  id v8[2] = v7;
  _OWORD v8[3] = a2;
  _OWORD v8[4] = a3;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Update>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<SceneEvents.Update> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Update>);
  uint64_t v9 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = type metadata accessor for AnyCancellable();
  uint64_t v11 = MEMORY[0x263EFDD10];
  a4[3] = result;
  a4[4] = v11;
  *a4 = v9;
  return result;
}

{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;

  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &v12);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  char v8 = (void *)swift_allocObject();
  id v8[2] = v7;
  _OWORD v8[3] = a2;
  _OWORD v8[4] = a3;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Render>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Render>);
  uint64_t v9 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = type metadata accessor for AnyCancellable();
  uint64_t v11 = MEMORY[0x263EFDD10];
  a4[3] = result;
  a4[4] = v11;
  *a4 = v9;
  return result;
}

uint64_t specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(void *a1, uint64_t a2, void (*a3)(void *))
{
  uint64_t v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (RESceneIsFromActiveRealityRendererSceneGroup()) {
      a3(v6);
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t v5 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (RESceneIsFromActiveRealityRendererSceneGroup()) {
      a3(&v5);
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(float a1, float a2, __n128 a3, float a4, __n128 a5, uint64_t a6, char a7)
{
  *(_OWORD *)(v7 + 232) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_WORD *)(v7 + 248) = 1;
  *(void *)(v7 + 256) = 0;
  *(void *)(v7 + 264) = 0;
  *(float *)(v7 + 108) = a1;
  *(float *)(v7 + 112) = a2;
  *(__n128 *)(v7 + 128) = a3;
  *(__n128 *)(v7 + 160) = a5;
  *(unsigned char *)(v7 + 176) = a7;
  *(float *)(v7 + 144) = a4;
  uint64_t v8 = swift_retain();
  uint64_t v9 = __RKEntityAction.init(targetEntity:)(v8);
  __RKEntityLookAtCameraAction.setFinalRotation()();
  return v9;
}

uint64_t partial apply for implicit closure #4 in __RKEntityLookAtCameraAction.update()()
{
  return implicit closure #4 in __RKEntityLookAtCameraAction.update()(23, 0xD000000000000015, (void *)0x800000022834EC40);
}

uint64_t partial apply for implicit closure #5 in __RKEntityLookAtCameraAction.update()()
{
  return implicit closure #4 in __RKEntityLookAtCameraAction.update()(22, 0xD000000000000014, (void *)0x800000022834EC20);
}

uint64_t partial apply for implicit closure #6 in __RKEntityLookAtCameraAction.update()()
{
  return implicit closure #6 in __RKEntityLookAtCameraAction.update()();
}

uint64_t sub_227E0F080()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227E0F0B8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 37, 7);
}

uint64_t partial apply for specialized closure #1 in __RKEntityLookAtCameraAction.perform(with:)()
{
  return specialized closure #1 in __RKEntityLookAtCameraAction.perform(with:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32));
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #3 in __RKEntityLookAtCameraAction.perform(with:)()
{
  return closure #3 in __RKEntityLookAtCameraAction.perform(with:)();
}

uint64_t outlined assign with take of Cancellable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cancellable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in __RKEntityLookAtCameraAction.perform(with:)()
{
  return closure #2 in __RKEntityLookAtCameraAction.perform(with:)();
}

uint64_t method lookup function for __RKEntityLookAtCameraAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityLookAtCameraAction);
}

uint64_t dispatch thunk of __RKEntityLookAtCameraAction.__allocating_init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)()
{
  return (*(uint64_t (**)(void))(v0 + 904))();
}

uint64_t dispatch thunk of __RKEntityLookAtCameraAction.update()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 928))();
}

uint64_t partial apply for specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t *a1)
{
  return specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24));
}

uint64_t objectdestroy_54Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(void *a1)
{
  return specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(void *)(v1 + 16), *(void (**)(void *))(v1 + 24));
}

uint64_t outlined init with copy of Cancellable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cancellable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type)>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t result = swift_retain();
  uint64_t v5 = 0;
  float v6 = (long long *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v8 = *((void *)v6 - 1);
    if (!v8) {
      goto LABEL_9;
    }
    uint64_t v9 = *((void *)v6 - 2);
    long long v18 = v6[1];
    long long v19 = *v6;
    long long v17 = v6[2];
    uint64_t v10 = *((void *)v6 + 6);
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if (v11) {
      goto LABEL_13;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    __n128 v12 = (uint64_t *)(v2[6] + 16 * result);
    *__n128 v12 = v9;
    v12[1] = v8;
    uint64_t v13 = v2[7] + 56 * result;
    *(_OWORD *)uint64_t v13 = v19;
    *(_OWORD *)(v13 + 16) = v18;
    *(_OWORD *)(v13 + 32) = v17;
    *(void *)(v13 + 48) = v10;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_14;
    }
    _OWORD v2[2] = v16;
    float v6 = (long long *)((char *)v6 + 72);
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  long long v15;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, EntityAction.Type>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t result = swift_retain();
  uint64_t v5 = 0;
  float v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v8 = *((void *)v6 - 1);
    if (!v8) {
      goto LABEL_9;
    }
    uint64_t v9 = *((void *)v6 - 2);
    BOOL v15 = *v6;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if (v10) {
      goto LABEL_13;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v2[6] + 16 * result);
    *char v11 = v9;
    v11[1] = v8;
    *(_OWORD *)(v2[7] + 16 * result) = v15;
    __n128 v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_14;
    }
    _OWORD v2[2] = v14;
    v6 += 2;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t result = swift_retain();
  uint64_t v5 = 0;
  float v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v8 = *(v6 - 2);
    uint64_t v9 = *v6;
    if (!v8)
    {
      swift_bridgeObjectRetain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    uint64_t v10 = *(v6 - 3);
    char v11 = *(v6 - 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v10, v8);
    if (v12) {
      goto LABEL_15;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v13 = v10;
    v13[1] = v8;
    uint64_t v14 = (void *)(v2[7] + 16 * result);
    *uint64_t v14 = v11;
    v14[1] = v9;
    BOOL v15 = v2[2];
    uint64_t v16 = __OFADD__(v15, 1);
    long long v17 = v15 + 1;
    if (v16) {
      goto LABEL_16;
    }
    v6 += 4;
    _OWORD v2[2] = v17;
    ++v5;
    if (v7 == v3) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, AnimationResource>, (uint64_t (*)(uint64_t, uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  void *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unint64_t result = swift_retain();
  uint64_t v5 = 0;
  float v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t v8 = *(v6 - 1);
    if (!v8) {
      goto LABEL_9;
    }
    uint64_t v9 = *(v6 - 2);
    uint64_t v10 = *v6;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if (v11) {
      goto LABEL_13;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    __n128 v12 = (uint64_t *)(v2[6] + 16 * result);
    *__n128 v12 = v9;
    v12[1] = v8;
    *(void *)(v2[7] + 8 * result) = v10;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    BOOL v15 = v13 + 1;
    if (v14) {
      goto LABEL_14;
    }
    _OWORD v2[2] = v15;
    v6 += 3;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  double v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  float v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v11 = (uint64_t *)(v3[6] + 16 * result);
    *char v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    __n128 v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  unint64_t result;
  uint64_t v5;
  unsigned char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  long long v24;
  char v25;
  long long v26;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioMixGroup>);
  double v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  BOOL v21 = *(void *)(a1 + 16);
  if (!v21)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  os_log_type_t v20 = v2 + 64;
  unint64_t result = swift_retain();
  uint64_t v5 = 0;
  float v6 = (unsigned char *)(a1 + 120);
  while (!__OFADD__(v5, 1))
  {
    uint64_t v7 = *((void *)v6 - 10);
    uint64_t v8 = *((void *)v6 - 3);
    if (!v7)
    {
      swift_bridgeObjectRetain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    uint64_t v22 = v5 + 1;
    uint64_t v9 = *((void *)v6 - 11);
    uint64_t v24 = *(_OWORD *)(v6 - 72);
    uint64_t v10 = *(v6 - 56);
    char v11 = *((void *)v6 - 6);
    __n128 v12 = *(v6 - 40);
    uint64_t v13 = *(v6 - 39);
    uint64_t v23 = *((void *)v6 - 4);
    float v26 = *((_OWORD *)v6 - 1);
    double v25 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v7);
    if (v14) {
      goto LABEL_15;
    }
    *(void *)(v20 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v15 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v15 = v9;
    v15[1] = v7;
    uint64_t v16 = v3[7] + 80 * result;
    *(_OWORD *)uint64_t v16 = v24;
    *(unsigned char *)(v16 + 16) = v10;
    *(void *)(v16 + 24) = v11;
    *(unsigned char *)(v16 + 32) = v12;
    *(unsigned char *)(v16 + 33) = v13;
    *(void *)(v16 + 40) = v23;
    *(void *)(v16 + 48) = v8;
    *(_OWORD *)(v16 + 56) = v26;
    *(unsigned char *)(v16 + 72) = v25;
    long long v17 = v3[2];
    long long v18 = __OFADD__(v17, 1);
    long long v19 = v17 + 1;
    if (v18) {
      goto LABEL_16;
    }
    v3[2] = v19;
    ++v5;
    v6 += 96;
    if (v22 == v21) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>, (uint64_t (*)(uint64_t, uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, Entity), &demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(unint64_t, char *, uint64_t);
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void v23[2];
  uint64_t v24;
  char *v25;

  double v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, UUID));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, UUID>);
  float v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  double v25 = &v5[*(int *)(v2 + 48)];
  uint64_t v9 = v6 + 64;
  uint64_t v10 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  char v11 = *(void *)(v3 + 72);
  v23[1] = a1;
  uint64_t v24 = v11;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v10, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, UUID));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v13) {
      break;
    }
    uint64_t v14 = result;
    *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v15 = v7[6];
    uint64_t v16 = type metadata accessor for UUID();
    long long v17 = *(void *)(v16 - 8);
    long long v18 = *(void (**)(unint64_t, char *, uint64_t))(v17 + 32);
    long long v19 = *(void *)(v17 + 72) * v14;
    v18(v15 + v19, v5, v16);
    unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v18)(v7[7] + v19, v25, v16);
    os_log_type_t v20 = v7[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    void v7[2] = v22;
    v10 += v24;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, (_:)>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, (_:)>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Int64>);
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, CFStringRef>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    float v6 = *(v4 - 1);
    uint64_t v7 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    char v11 = v2[2];
    __n128 v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    _OWORD v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  double v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingUserInfoKey, Any));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  float v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  char v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  __n128 v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (CodingUserInfoKey, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v17 = v7[6];
    long long v18 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)outlined init with take of Any(v9, (_OWORD *)(v7[7] + 32 * v16));
    long long v19 = v7[2];
    os_log_type_t v20 = __OFADD__(v19, 1);
    BOOL v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  long long v14;
  long long v15;
  long long v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  long long v20;
  unsigned char v21[112];
  long long v22;
  unsigned char v23[104];

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = v3 - 1;
  for (uint64_t i = 32; ; i += 128)
  {
    float v6 = *(_OWORD *)(a1 + i + 16);
    os_log_type_t v20 = *(_OWORD *)(a1 + i);
    *(_OWORD *)BOOL v21 = v6;
    uint64_t v7 = *(_OWORD *)(a1 + i + 80);
    *(_OWORD *)&v21[48] = *(_OWORD *)(a1 + i + 64);
    *(_OWORD *)&v21[64] = v7;
    uint64_t v8 = *(_OWORD *)(a1 + i + 112);
    *(_OWORD *)&v21[80] = *(_OWORD *)(a1 + i + 96);
    *(_OWORD *)&v21[96] = v8;
    uint64_t v9 = *(_OWORD *)(a1 + i + 48);
    *(_OWORD *)&v21[16] = *(_OWORD *)(a1 + i + 32);
    *(_OWORD *)&v21[32] = v9;
    uint64_t v10 = *((void *)&v8 + 1);
    LOWORD(v22) = v20;
    *((void *)&v22 + 1) = *((void *)&v20 + 1);
    v23[0] = v21[0];
    *(_WORD *)&v23[1] = *(_WORD *)&v21[1];
    *(_OWORD *)&unsigned char v23[8] = *(_OWORD *)&v21[8];
    *(_OWORD *)&v23[24] = *(_OWORD *)&v21[24];
    *(_OWORD *)&v23[40] = *(_OWORD *)&v21[40];
    *(_OWORD *)&v23[56] = *(_OWORD *)&v21[56];
    *(_OWORD *)&v23[72] = *(_OWORD *)&v21[72];
    *(_OWORD *)&v23[88] = *(_OWORD *)&v21[88];
    outlined retain of (CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>)((uint64_t)&v20);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v22);
    if (v12) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = v2[6] + 120 * result;
    uint64_t v14 = *(_OWORD *)&v23[64];
    *(_OWORD *)(v13 + 64) = *(_OWORD *)&v23[48];
    *(_OWORD *)(v13 + 80) = v14;
    *(_OWORD *)(v13 + 96) = *(_OWORD *)&v23[80];
    *(void *)(v13 + 112) = *(void *)&v23[96];
    BOOL v15 = *(_OWORD *)v23;
    *(_OWORD *)uint64_t v13 = v22;
    *(_OWORD *)(v13 + 16) = v15;
    uint64_t v16 = *(_OWORD *)&v23[32];
    *(_OWORD *)(v13 + 32) = *(_OWORD *)&v23[16];
    *(_OWORD *)(v13 + 48) = v16;
    *(void *)(v2[7] + 8 * result) = v10;
    long long v17 = v2[2];
    long long v18 = __OFADD__(v17, 1);
    long long v19 = v17 + 1;
    if (v18) {
      goto LABEL_12;
    }
    _OWORD v2[2] = v19;
    if (!v4)
    {
      swift_release();
      goto LABEL_10;
    }
    --v4;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  long long v14;
  long long v15;
  long long v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  long long v20;
  unsigned char v21[112];
  long long v22;
  unsigned char v23[104];

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, __MaterialResource>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = v3 - 1;
  for (uint64_t i = 32; ; i += 128)
  {
    float v6 = *(_OWORD *)(a1 + i + 16);
    os_log_type_t v20 = *(_OWORD *)(a1 + i);
    *(_OWORD *)BOOL v21 = v6;
    uint64_t v7 = *(_OWORD *)(a1 + i + 80);
    *(_OWORD *)&v21[48] = *(_OWORD *)(a1 + i + 64);
    *(_OWORD *)&v21[64] = v7;
    uint64_t v8 = *(_OWORD *)(a1 + i + 112);
    *(_OWORD *)&v21[80] = *(_OWORD *)(a1 + i + 96);
    *(_OWORD *)&v21[96] = v8;
    uint64_t v9 = *(_OWORD *)(a1 + i + 48);
    *(_OWORD *)&v21[16] = *(_OWORD *)(a1 + i + 32);
    *(_OWORD *)&v21[32] = v9;
    uint64_t v10 = *((void *)&v8 + 1);
    LOWORD(v22) = v20;
    *((void *)&v22 + 1) = *((void *)&v20 + 1);
    v23[0] = v21[0];
    *(_WORD *)&v23[1] = *(_WORD *)&v21[1];
    *(_OWORD *)&unsigned char v23[8] = *(_OWORD *)&v21[8];
    *(_OWORD *)&v23[24] = *(_OWORD *)&v21[24];
    *(_OWORD *)&v23[40] = *(_OWORD *)&v21[40];
    *(_OWORD *)&v23[56] = *(_OWORD *)&v21[56];
    *(_OWORD *)&v23[72] = *(_OWORD *)&v21[72];
    *(_OWORD *)&v23[88] = *(_OWORD *)&v21[88];
    outlined retain of (CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>)((uint64_t)&v20);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v22);
    if (v12) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = v2[6] + 120 * result;
    uint64_t v14 = *(_OWORD *)&v23[64];
    *(_OWORD *)(v13 + 64) = *(_OWORD *)&v23[48];
    *(_OWORD *)(v13 + 80) = v14;
    *(_OWORD *)(v13 + 96) = *(_OWORD *)&v23[80];
    *(void *)(v13 + 112) = *(void *)&v23[96];
    BOOL v15 = *(_OWORD *)v23;
    *(_OWORD *)uint64_t v13 = v22;
    *(_OWORD *)(v13 + 16) = v15;
    uint64_t v16 = *(_OWORD *)&v23[32];
    *(_OWORD *)(v13 + 32) = *(_OWORD *)&v23[16];
    *(_OWORD *)(v13 + 48) = v16;
    *(void *)(v2[7] + 8 * result) = v10;
    long long v17 = v2[2];
    long long v18 = __OFADD__(v17, 1);
    long long v19 = v17 + 1;
    if (v18) {
      goto LABEL_12;
    }
    _OWORD v2[2] = v19;
    if (!v4)
    {
      swift_release();
      goto LABEL_10;
    }
    --v4;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, __MaterialResource.BuildParameters.Value>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 4);
    float v6 = *((void *)v4 - 3);
    uint64_t v7 = *((void *)v4 - 2);
    uint64_t v8 = *((void *)v4 - 1);
    uint64_t v9 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    __n128 v12 = (uint64_t *)(v2[6] + 16 * result);
    *__n128 v12 = v5;
    v12[1] = v6;
    uint64_t v13 = v2[7] + 32 * result;
    *(void *)uint64_t v13 = v7;
    *(void *)(v13 + 8) = v8;
    *(unsigned char *)(v13 + 16) = v9;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 48;
    _OWORD v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, MaterialParameters.Value>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of MaterialParameters.Value);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  Swift::UInt *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<EmitterAssetKey, Int>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    float v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v8);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (Swift::UInt *)(v2[6] + 24 * result);
    *char v11 = v5;
    v11[1] = v6;
    v11[2] = v8;
    *(void *)(v2[7] + 8 * result) = v7;
    __n128 v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4 += 4;
    _OWORD v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, StateMachineParameterProtocol>);
  double v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  float v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, StateMachineParameterProtocol));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v11 = (uint64_t *)(v3[6] + 16 * result);
    *char v11 = v7;
    v11[1] = v8;
    unint64_t result = outlined init with take of BindableDataInternal(&v17, v3[7] + 40 * result);
    __n128 v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, __RKMaterialParameterBlock.Parameter>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of __RKMaterialParameterBlock.Parameter);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  double v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, Task<(), Never>));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Task<(), Never>>);
  float v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  char v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  __n128 v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, Task<(), Never>));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v17 = v7[6];
    long long v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    long long v19 = v7[2];
    os_log_type_t v20 = __OFADD__(v19, 1);
    BOOL v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  __int16 v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  char v19;
  long long v20;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MeshBuffers.Identifier, MeshBufferErased>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  uint64_t v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v4, (uint64_t)&v16, &demangling cache variable for type metadata for (MeshBuffers.Identifier, MeshBufferErased));
    uint64_t v5 = v16;
    float v6 = v17;
    uint64_t v7 = v18;
    uint64_t v8 = v19;
    uint64_t v9 = v19 ? 256 : 0;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17, v9 | v18);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    __n128 v12 = v2[6] + 24 * result;
    *(void *)__n128 v12 = v5;
    *(void *)(v12 + 8) = v6;
    *(unsigned char *)(v12 + 16) = v7;
    *(unsigned char *)(v12 + 17) = v8;
    unint64_t result = outlined init with take of BindableDataInternal(&v20, v2[7] + 40 * result);
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    BOOL v15 = v13 + 1;
    if (v14) {
      goto LABEL_14;
    }
    _OWORD v2[2] = v15;
    v4 += 64;
    if (!--v3)
    {
      swift_release();
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    float v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v7, v8);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v2[6] + 16 * result);
    *char v11 = v5;
    v11[1] = v6;
    __n128 v12 = (uint64_t *)(v2[7] + 16 * result);
    *__n128 v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    BOOL v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    _OWORD v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int32>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_DWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    float v6 = *((void *)v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    char *v10 = v5;
    v10[1] = v6;
    *(_DWORD *)(v2[7] + 4 * result) = v7;
    char v11 = v2[2];
    __n128 v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 6;
    _OWORD v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  double v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  float v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    uint64_t v10 = v15[0];
    char v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    __n128 v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String : String]>);
}

{
  void *v2;
  uint64_t v3;
  id *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef?, CFBooleanRef?>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (id *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    float v6 = *v4;
    uint64_t v7 = *v4;
    uint64_t v8 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = 8 * result;
    *(void *)(v2[6] + v11) = v5;
    *(void *)(v2[7] + v11) = v6;
    __n128 v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4 += 2;
    _OWORD v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  unint64_t result;
  char v20;
  _OWORD *v21;
  long long v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ExtrudedGlyphDescriptor.Info, ExtrudedGlyphDescriptor>);
  double v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v27 = v2 + 64;
  swift_retain();
  uint64_t v5 = (_OWORD *)(a1 + 128);
  while (1)
  {
    char v28 = v4;
    float v6 = *((void *)v5 - 11);
    uint64_t v7 = *((void *)v5 - 10);
    uint64_t v8 = *((void *)v5 - 9);
    uint64_t v9 = *((void *)v5 - 8);
    uint64_t v10 = *((_WORD *)v5 - 28);
    char v11 = *((_DWORD *)v5 - 13);
    uint64_t v13 = *((void *)v5 - 6);
    __n128 v12 = *((void *)v5 - 5);
    uint64_t v14 = *((void *)v5 - 4);
    BOOL v15 = *((void *)v5 - 3);
    uint64_t v16 = *((void *)v5 - 2);
    long long v17 = *((_WORD *)v5 - 4);
    long long v18 = *((_DWORD *)v5 - 1);
    uint64_t v29 = *v5;
    *(void *)&uint64_t v30 = *((void *)v5 - 12);
    *((void *)&v30 + 1) = v6;
    *(void *)&double v31 = v7;
    *((void *)&v31 + 1) = v8;
    *(void *)&uint64_t v32 = v9;
    WORD4(v32) = v10;
    HIDWORD(v32) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v30);
    if (v20) {
      break;
    }
    *(void *)(v27 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v21 = (_OWORD *)(v3[6] + 48 * result);
    uint64_t v22 = v31;
    *BOOL v21 = v30;
    v21[1] = v22;
    void v21[2] = v32;
    uint64_t v23 = v3[7] + (result << 6);
    *(void *)uint64_t v23 = v13;
    *(void *)(v23 + 8) = v12;
    *(void *)(v23 + 16) = v14;
    *(void *)(v23 + 24) = v15;
    *(void *)(v23 + 32) = v16;
    *(_WORD *)(v23 + 40) = v17;
    *(_DWORD *)(v23 + 44) = v18;
    *(_OWORD *)(v23 + 48) = v29;
    uint64_t v24 = v3[2];
    double v25 = __OFADD__(v24, 1);
    float v26 = v24 + 1;
    if (v25) {
      goto LABEL_11;
    }
    v3[2] = v26;
    v5 += 7;
    uint64_t v4 = v28 - 1;
    if (v28 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [StateMachineTransition]>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Swift.AnyObject>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    float v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    char v11 = __OFADD__(v10, 1);
    __n128 v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    _OWORD v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, USKObjectPath), &demangling cache variable for type metadata for _DictionaryStorage<UUID, USKObjectPath>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, OpaquePointer>);
}

{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, REComponentClassPtr>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  do
  {
    uint64_t v5 = *(v4 - 1);
    if (!v5) {
      break;
    }
    float v6 = *v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(v4 - 1));
    if (v8)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v6;
    uint64_t v10 = v3[2];
    char v11 = __OFADD__(v10, 1);
    __n128 v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v4 += 2;
    --v1;
  }
  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  _OWORD *i;
  Swift::UInt v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, Component.Type>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  for (uint64_t i = (_OWORD *)(a1 + 40); *(void *)i; uint64_t i = (_OWORD *)((char *)i + 24))
  {
    char v11 = *i;
    uint64_t v5 = *((void *)i - 1);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v7)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v5;
    *(_OWORD *)(v3[7] + 16 * result) = v11;
    uint64_t v8 = v3[2];
    uint64_t v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      goto LABEL_11;
    }
    v3[2] = v10;
    if (!--v1) {
      return (unint64_t)v3;
    }
  }
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _OWORD *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ComponentInfo>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v4 = v1 - 1;
    for (uint64_t i = (_OWORD *)(a1 + 104); ; uint64_t i = (_OWORD *)((char *)i + 88))
    {
      uint64_t v22 = *i;
      if (!*((void *)i - 7)) {
        goto LABEL_11;
      }
      BOOL v21 = *(_OWORD *)((char *)i - 56);
      os_log_type_t v20 = v4;
      float v6 = *((void *)i - 1);
      uint64_t v8 = *((void *)i - 9);
      uint64_t v7 = *((void *)i - 8);
      uint64_t v9 = *((void *)i - 5);
      uint64_t v10 = *((_DWORD *)i - 8);
      char v11 = *((unsigned char *)i - 28);
      __n128 v12 = *((void *)i - 3);
      uint64_t v13 = *((unsigned char *)i - 16);
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if (v15) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v8;
      uint64_t v16 = v3[7] + 80 * result;
      *(void *)uint64_t v16 = v7;
      *(_OWORD *)(v16 + 8) = v21;
      *(void *)(v16 + 24) = v9;
      *(_DWORD *)(v16 + 32) = v10;
      *(unsigned char *)(v16 + 36) = v11;
      *(void *)(v16 + 40) = v12;
      *(unsigned char *)(v16 + 48) = v13;
      *(void *)(v16 + 56) = v6;
      *(_OWORD *)(v16 + 64) = v22;
      long long v17 = v3[2];
      long long v18 = __OFADD__(v17, 1);
      long long v19 = v17 + 1;
      if (v18) {
        goto LABEL_14;
      }
      v3[2] = v19;
      if (!v20)
      {
        swift_bridgeObjectRetain();
LABEL_11:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return (unint64_t)v3;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v4 = v20 - 1;
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _OWORD *i;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, ComponentInfo>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v4 = v1 - 1;
    for (uint64_t i = (_OWORD *)(a1 + 104); ; uint64_t i = (_OWORD *)((char *)i + 88))
    {
      uint64_t v22 = *i;
      if (!*((void *)i - 7)) {
        goto LABEL_11;
      }
      BOOL v21 = *(_OWORD *)((char *)i - 56);
      os_log_type_t v20 = v4;
      float v6 = *((void *)i - 1);
      uint64_t v8 = *((void *)i - 9);
      uint64_t v7 = *((void *)i - 8);
      uint64_t v9 = *((void *)i - 5);
      uint64_t v10 = *((_DWORD *)i - 8);
      char v11 = *((unsigned char *)i - 28);
      __n128 v12 = *((void *)i - 3);
      uint64_t v13 = *((unsigned char *)i - 16);
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if (v15) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v8;
      uint64_t v16 = v3[7] + 80 * result;
      *(void *)uint64_t v16 = v7;
      *(_OWORD *)(v16 + 8) = v21;
      *(void *)(v16 + 24) = v9;
      *(_DWORD *)(v16 + 32) = v10;
      *(unsigned char *)(v16 + 36) = v11;
      *(void *)(v16 + 40) = v12;
      *(unsigned char *)(v16 + 48) = v13;
      *(void *)(v16 + 56) = v6;
      *(_OWORD *)(v16 + 64) = v22;
      long long v17 = v3[2];
      long long v18 = __OFADD__(v17, 1);
      long long v19 = v17 + 1;
      if (v18) {
        goto LABEL_14;
      }
      v3[2] = v19;
      if (!v20)
      {
        swift_bridgeObjectRetain();
LABEL_11:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return (unint64_t)v3;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v4 = v20 - 1;
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t Trace;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  double v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, LoadTrace));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (unsigned int *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  float v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, LoadTrace>);
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      outlined init with copy of (Int, URL)(v9, (uint64_t)v5, &demangling cache variable for type metadata for (UInt32, LoadTrace));
      char v11 = *v5;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
      if (v13) {
        break;
      }
      uint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v7[6] + 4 * result) = v11;
      BOOL v15 = v7[7];
      Trace = type metadata accessor for LoadTrace(0);
      unint64_t result = outlined init with take of LoadTrace(v8, v15 + *(void *)(*(void *)(Trace - 8) + 72) * v14);
      long long v17 = v7[2];
      long long v18 = __OFADD__(v17, 1);
      long long v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      void v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt64>);
}

{
  uint64_t v1;
  void *v3;
  _OWORD *i;
  Swift::UInt v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ActionEventType, RESubscriptionHandle>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (_OWORD *)(a1 + 40); ; uint64_t i = (_OWORD *)((char *)i + 24))
    {
      uint64_t v5 = *((void *)i - 1);
      char v11 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(_OWORD *)(v3[7] + 16 * result) = v11;
      uint64_t v8 = v3[2];
      uint64_t v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  _OWORD *i;
  uint64_t v5;
  unint64_t result;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  long long v12;
  long long v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol & Decodable & Encodable.Type>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  for (uint64_t i = (_OWORD *)(a1 + 56); *((void *)i - 2); uint64_t i = (_OWORD *)((char *)i + 40))
  {
    uint64_t v13 = *(i - 1);
    uint64_t v5 = *((void *)i - 3);
    __n128 v12 = *i;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v7)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v5;
    uint64_t v8 = (_OWORD *)(v3[7] + 32 * result);
    *uint64_t v8 = v13;
    v8[1] = v12;
    uint64_t v9 = v3[2];
    uint64_t v10 = __OFADD__(v9, 1);
    char v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v3[2] = v11;
    if (!--v1) {
      return (unint64_t)v3;
    }
  }
  return (unint64_t)v3;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol.Type>, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v1;
  void *v3;
  _OWORD *i;
  Swift::UInt32 v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REAssetType, LoadableResource.Type>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  for (uint64_t i = (_OWORD *)(a1 + 40); *(void *)i; uint64_t i = (_OWORD *)((char *)i + 24))
  {
    char v11 = *i;
    uint64_t v5 = *((_DWORD *)i - 2);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v7)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v5;
    *(_OWORD *)(v3[7] + 16 * result) = v11;
    uint64_t v8 = v3[2];
    uint64_t v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      goto LABEL_11;
    }
    v3[2] = v10;
    if (!--v1) {
      return (unint64_t)v3;
    }
  }
  return (unint64_t)v3;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Component.Type>, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  Swift::UInt v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::UInt v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver.Weak<__RealityFileURLResolver>>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 16)
    {
      outlined init with copy of (Int, URL)(i, (uint64_t)&v11, &demangling cache variable for type metadata for (OpaquePointer, __RealityFileURLResolver.Weak<__RealityFileURLResolver>));
      uint64_t v5 = v11;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>((uint64_t)&v12, v3[7] + 8 * result);
      uint64_t v8 = v3[2];
      uint64_t v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  unint64_t result;
  char v5;
  long long *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;
  char v12;
  long long v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Entity, [__RKEntityInteractionSpecification]>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = *(_OWORD *)(a1 + 32);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(a1 + 32));
  if (v5)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  float v6 = (long long *)(a1 + 48);
  uint64_t v7 = v1 - 1;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v13;
    *(void *)(v3[7] + 8 * result) = *((void *)&v13 + 1);
    uint64_t v8 = v3[2];
    uint64_t v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      break;
    }
    v3[2] = v10;
    if (!v7) {
      goto LABEL_8;
    }
    char v11 = *v6++;
    uint64_t v13 = v11;
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    --v7;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int64>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      float v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(void *)(v3[6] + v9) = v5;
      *(void *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      char v11 = __OFADD__(v10, 1);
      __n128 v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<CustomMaterial.CustomShaderParameters>>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<UnlitMaterial.UnlitShaderParameters>>);
}

{
  uint64_t v1;
  void *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char v17;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, Task<__MaterialResource, Error>>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(unsigned __int16 *)(a1 + 32);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 34);
  float v6 = *(unsigned __int8 *)(a1 + 35);
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4 | (v5 << 16) | (v6 << 24));
  if (v9)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v10 = (unsigned __int16 *)(a1 + 48);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = v3[6] + 4 * result;
    *(_WORD *)char v11 = v4;
    *(unsigned char *)(v11 + 2) = v5;
    *(unsigned char *)(v11 + 3) = v6;
    *(void *)(v3[7] + 8 * result) = v7;
    __n128 v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      break;
    }
    v3[2] = v14;
    if (!--v1) {
      goto LABEL_8;
    }
    BOOL v15 = v10 + 8;
    uint64_t v4 = *v10;
    uint64_t v5 = *((unsigned __int8 *)v10 + 2);
    float v6 = *((unsigned __int8 *)v10 + 3);
    uint64_t v16 = *((void *)v10 + 1);
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4 | (v5 << 16) | (v6 << 24));
    uint64_t v10 = v15;
    uint64_t v7 = v16;
    if (v17) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char v17;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, __MaterialResource>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(unsigned __int16 *)(a1 + 32);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 34);
  float v6 = *(unsigned __int8 *)(a1 + 35);
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4 | (v5 << 16) | (v6 << 24));
  if (v9)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v10 = (unsigned __int16 *)(a1 + 48);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = v3[6] + 4 * result;
    *(_WORD *)char v11 = v4;
    *(unsigned char *)(v11 + 2) = v5;
    *(unsigned char *)(v11 + 3) = v6;
    *(void *)(v3[7] + 8 * result) = v7;
    __n128 v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      break;
    }
    v3[2] = v14;
    if (!--v1) {
      goto LABEL_8;
    }
    BOOL v15 = v10 + 8;
    uint64_t v4 = *v10;
    uint64_t v5 = *((unsigned __int8 *)v10 + 2);
    float v6 = *((unsigned __int8 *)v10 + 3);
    uint64_t v16 = *((void *)v10 + 1);
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4 | (v5 << 16) | (v6 << 24));
    uint64_t v10 = v15;
    uint64_t v7 = v16;
    if (v17) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<PhysicallyBasedMaterial.PBRShaderParameters>>);
}

{
  uint64_t v1;
  void *v3;
  void *i;
  Swift::UInt16 v5;
  Swift::UInt v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, Task<__MaterialResource, Error>>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (void *)(a1 + 56); ; i += 4)
    {
      uint64_t v5 = *((_WORD *)i - 12);
      float v6 = *(i - 2);
      uint64_t v7 = *((unsigned __int8 *)i - 8);
      uint64_t v8 = *((unsigned __int8 *)i - 7);
      uint64_t v9 = *((unsigned __int8 *)i - 6);
      uint64_t v10 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, (v8 << 8) | (v9 << 16) | v7);
      if (v12) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v13 = v3[6] + 24 * result;
      *(_WORD *)uint64_t v13 = v5;
      *(void *)(v13 + 8) = v6;
      *(unsigned char *)(v13 + 16) = v7;
      *(unsigned char *)(v13 + 17) = v8;
      *(unsigned char *)(v13 + 18) = v9;
      *(void *)(v3[7] + 8 * result) = v10;
      uint64_t v14 = v3[2];
      BOOL v15 = __OFADD__(v14, 1);
      uint64_t v16 = v14 + 1;
      if (v15) {
        goto LABEL_10;
      }
      v3[2] = v16;
      swift_retain();
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  void *i;
  Swift::UInt16 v5;
  Swift::UInt v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, __MaterialResource>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (void *)(a1 + 56); ; i += 4)
    {
      uint64_t v5 = *((_WORD *)i - 12);
      float v6 = *(i - 2);
      uint64_t v7 = *((unsigned __int8 *)i - 8);
      uint64_t v8 = *((unsigned __int8 *)i - 7);
      uint64_t v9 = *((unsigned __int8 *)i - 6);
      uint64_t v10 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, (v8 << 8) | (v9 << 16) | v7);
      if (v12) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v13 = v3[6] + 24 * result;
      *(_WORD *)uint64_t v13 = v5;
      *(void *)(v13 + 8) = v6;
      *(unsigned char *)(v13 + 16) = v7;
      *(unsigned char *)(v13 + 17) = v8;
      *(unsigned char *)(v13 + 18) = v9;
      *(void *)(v3[7] + 8 * result) = v10;
      uint64_t v14 = v3[2];
      BOOL v15 = __OFADD__(v14, 1);
      uint64_t v16 = v14 + 1;
      if (v15) {
        goto LABEL_10;
      }
      v3[2] = v16;
      swift_retain();
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  unint64_t result;
  char v5;
  long long *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;
  char v12;
  long long v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<__REAsset, RESceneDescriptor>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = *(_OWORD *)(a1 + 32);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(a1 + 32));
  if (v5)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    swift_retain();
    return (unint64_t)v3;
  }
  float v6 = (long long *)(a1 + 48);
  uint64_t v7 = v1 - 1;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v13;
    *(void *)(v3[7] + 8 * result) = *((void *)&v13 + 1);
    uint64_t v8 = v3[2];
    uint64_t v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      break;
    }
    v3[2] = v10;
    if (!v7) {
      goto LABEL_8;
    }
    char v11 = *v6++;
    uint64_t v13 = v11;
    swift_retain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    --v7;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, SimpleMaterial.SimpleMaterialMapping>);
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnsafeRawPointer, ActionHandlerProtocol>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 48)
    {
      outlined init with copy of (Int, URL)(i, (uint64_t)&v11, &demangling cache variable for type metadata for (UnsafeRawPointer, ActionHandlerProtocol));
      uint64_t v5 = v11;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = outlined init with take of BindableDataInternal(&v12, v3[7] + 40 * result);
      uint64_t v8 = v3[2];
      uint64_t v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, simd_float4x4?>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (uint64_t *)(a1 + 56); ; i += 12)
    {
      long long v19 = v1;
      uint64_t v5 = *(i - 3);
      float v6 = *(i - 1);
      uint64_t v7 = *i;
      uint64_t v9 = i[1];
      uint64_t v8 = i[2];
      char v11 = i[3];
      uint64_t v10 = i[4];
      __n128 v12 = i[5];
      BOOL v21 = i[6];
      os_log_type_t v20 = *((unsigned char *)i + 56);
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v14) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      BOOL v15 = v3[7] + 80 * result;
      *(void *)BOOL v15 = v6;
      *(void *)(v15 + 8) = v7;
      *(void *)(v15 + 16) = v9;
      *(void *)(v15 + 24) = v8;
      *(void *)(v15 + 32) = v11;
      *(void *)(v15 + 40) = v10;
      *(void *)(v15 + 48) = v12;
      *(void *)(v15 + 56) = v21;
      *(unsigned char *)(v15 + 64) = v20;
      uint64_t v16 = v3[2];
      long long v17 = __OFADD__(v16, 1);
      long long v18 = v16 + 1;
      if (v17) {
        goto LABEL_10;
      }
      v3[2] = v18;
      uint64_t v1 = v19 - 1;
      if (v19 == 1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  _OWORD *i;
  uint64_t v5;
  unint64_t result;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  long long v12;
  long long v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PhotogrammetrySession.Pose>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (_OWORD *)(a1 + 64); ; i += 3)
    {
      uint64_t v5 = *((void *)i - 4);
      __n128 v12 = *i;
      uint64_t v13 = *(i - 1);
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      uint64_t v8 = (_OWORD *)(v3[7] + 32 * result);
      *uint64_t v8 = v13;
      v8[1] = v12;
      uint64_t v9 = v3[2];
      uint64_t v10 = __OFADD__(v9, 1);
      char v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  double v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, URL));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  float v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, URL>);
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = (char *)v5 + *(int *)(v2 + 48);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      outlined init with copy of (Int, URL)(v9, (uint64_t)v5, &demangling cache variable for type metadata for (Int, URL));
      char v11 = *v5;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
      if (v13) {
        break;
      }
      uint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v7[6] + 8 * result) = v11;
      BOOL v15 = v7[7];
      uint64_t v16 = type metadata accessor for URL();
      unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v8, v16);
      long long v17 = v7[2];
      long long v18 = __OFADD__(v17, 1);
      long long v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      void v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  unint64_t result;
  char v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, BufferDescriptor>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  float v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(unsigned char *)(a1 + 56);
  uint64_t v8 = *(unsigned char *)(a1 + 57);
  uint64_t v9 = *(unsigned char *)(a1 + 58);
  uint64_t v10 = *(unsigned char *)(a1 + 59);
  uint64_t v23 = a1;
  char v11 = *(unsigned char *)(a1 + 60);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v13)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v14 = (char *)(v23 + 92);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    BOOL v15 = v3[7] + 24 * result;
    *(void *)BOOL v15 = v5;
    *(void *)(v15 + 8) = v6;
    *(unsigned char *)(v15 + 16) = v7 & 1;
    *(unsigned char *)(v15 + 17) = v8 & 1;
    *(unsigned char *)(v15 + 18) = v9;
    *(unsigned char *)(v15 + 19) = v10;
    *(unsigned char *)(v15 + 20) = v11 & 1;
    uint64_t v16 = v3[2];
    long long v17 = __OFADD__(v16, 1);
    long long v18 = v16 + 1;
    if (v17) {
      break;
    }
    v3[2] = v18;
    if (!--v1) {
      goto LABEL_8;
    }
    long long v19 = v14 + 32;
    uint64_t v4 = *(void *)(v14 - 28);
    uint64_t v24 = *(void *)(v14 - 20);
    os_log_type_t v20 = *(void *)(v14 - 12);
    uint64_t v22 = *(v14 - 4);
    uint64_t v8 = *(v14 - 3);
    uint64_t v9 = *(v14 - 2);
    uint64_t v10 = *(v14 - 1);
    char v11 = *v14;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v14 = v19;
    uint64_t v5 = v24;
    float v6 = v20;
    uint64_t v7 = v22;
    if (v21) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  _DWORD *i;
  Swift::UInt v5;
  int v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Int32>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (_DWORD *)(a1 + 40); ; i += 4)
    {
      uint64_t v5 = *((void *)i - 1);
      float v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(_DWORD *)(v3[7] + 4 * result) = v6;
      uint64_t v9 = v3[2];
      uint64_t v10 = __OFADD__(v9, 1);
      char v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __ARReferenceProvider>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    double v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  double v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    float v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v2[6] + 16 * result);
    *char v11 = v5;
    v11[1] = v6;
    __n128 v12 = (void *)(v2[7] + 16 * result);
    *__n128 v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    BOOL v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    _OWORD v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v5 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  unint64_t result = swift_retain();
  uint64_t v8 = 0;
  uint64_t v9 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v10 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    uint64_t v12 = *(v9 - 1);
    uint64_t v11 = *v9;
    if (!v12)
    {
      swift_retain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    uint64_t v13 = *(v9 - 2);
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = a3(v13, v12);
    if (v14) {
      goto LABEL_15;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v15 = (void *)(v5[6] + 16 * result);
    *BOOL v15 = v13;
    v15[1] = v12;
    *(void *)(v5[7] + 8 * result) = v11;
    uint64_t v16 = v5[2];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_16;
    }
    _OWORD v5[2] = v18;
    v9 += 3;
    ++v8;
    if (v10 == v6) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *((void *)v5 - 2);
    uint64_t v7 = *((void *)v5 - 1);
    long long v14 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v10 = v6;
    v10[1] = v7;
    *(_OWORD *)(v3[7] + 16 * result) = v14;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    BOOL v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    long long v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v5 += 3;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    BOOL v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    long long v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  double v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = (uint64_t *)(a1 + 40);
  do
  {
    uint64_t v6 = *(v5 - 1);
    if (!v6) {
      break;
    }
    uint64_t v7 = *v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(v5 - 1));
    if (v9)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v4[6] + v10) = v6;
    *(void *)(v4[7] + v10) = v7;
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    uint64_t v4[2] = v13;
    v5 += 2;
    --v2;
  }
  while (v2);
  return (unint64_t)v4;
}

{
  uint64_t v2;
  void *v4;
  unint64_t result;
  char v6;
  long long *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  long long v12;
  char v13;
  long long v14;

  double v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  long long v14 = *(_OWORD *)(a1 + 32);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(a1 + 32));
  if (v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v4;
  }
  uint64_t v7 = (long long *)(a1 + 48);
  uint64_t v8 = v2 - 1;
  while (1)
  {
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v4[6] + 8 * result) = v14;
    *(void *)(v4[7] + 8 * result) = *((void *)&v14 + 1);
    char v9 = v4[2];
    uint64_t v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    uint64_t v4[2] = v11;
    if (!v8) {
      goto LABEL_8;
    }
    BOOL v12 = *v7++;
    long long v14 = v12;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    --v8;
    if (v13) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v5 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v4 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  uint64_t v24 = v4 + 64;
  swift_retain();
  uint64_t v7 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v26 = v6;
    uint64_t v9 = *(v7 - 3);
    uint64_t v8 = *(v7 - 2);
    uint64_t v10 = *(v7 - 1);
    uint64_t v11 = v7[1];
    uint64_t v28 = v7[2];
    uint64_t v29 = *v7;
    uint64_t v12 = v7[4];
    uint64_t v27 = v7[3];
    uint64_t v14 = v7[5];
    uint64_t v13 = v7[6];
    char v15 = *((unsigned char *)v7 + 56);
    swift_bridgeObjectRetain();
    LOBYTE(v23) = v15;
    a3(v10, v29, v11, v28, v27, v12, v14, v13, v23);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if (v17) {
      break;
    }
    *(void *)(v24 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = (uint64_t *)(v5[6] + 16 * result);
    *uint64_t v18 = v9;
    v18[1] = v8;
    uint64_t v19 = v5[7] + 80 * result;
    *(void *)uint64_t v19 = v10;
    *(void *)(v19 + 8) = v29;
    *(void *)(v19 + 16) = v11;
    *(void *)(v19 + 24) = v28;
    *(void *)(v19 + 32) = v27;
    *(void *)(v19 + 40) = v12;
    *(void *)(v19 + 48) = v14;
    *(void *)(v19 + 56) = v13;
    *(unsigned char *)(v19 + 64) = v15;
    uint64_t v20 = v5[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v7 += 12;
    _OWORD v5[2] = v22;
    uint64_t v6 = v26 - 1;
    if (v26 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v11 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  uint64_t v13 = *(int *)(v6 + 48);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v16, (uint64_t)v9, a2);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if (v19) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v21 = v11[6];
    uint64_t v22 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v20, v9, v22);
    *(void *)(v11[7] + 8 * v20) = *(void *)&v9[v13];
    uint64_t v23 = v11[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t one-time initialization function for instances()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<__RealityFileURLResolver>);
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver>);
  *(void *)(v0 + 24) = result;
  static __RealityFileURLResolver.instances = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<__RealityFileARReferenceProvidingPlugin>);
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 24) = result;
  static __RealityFileARReferenceProvidingPlugin.instances = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<__USDARReferenceProvidingPlugin>);
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v0 + 24) = result;
  static __USDARReferenceProvidingPlugin.instances = v0;
  return result;
}

void *one-time initialization function for weakInstances()
{
  unint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static __RealityFileURLResolver.weakInstances = result;
  return result;
}

uint64_t static __RealityFileURLResolver.weakShared.setter(uint64_t a1)
{
  specialized static __RealityFileURLResolver.weakShared.setter(a1);

  return swift_release();
}

uint64_t (*static __RealityFileURLResolver.weakShared.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  *a1 = specialized static __RealityFileURLResolver.weakShared.getter();
  return static __RealityFileURLResolver.weakShared.modify;
}

uint64_t static __RealityFileURLResolver.weakShared.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = swift_retain();
    specialized static __RealityFileURLResolver.weakShared.setter(v3);
    swift_release();
  }
  else
  {
    specialized static __RealityFileURLResolver.weakShared.setter(v2);
  }

  return swift_release();
}

void *static __RealityFileURLResolver.shared.getter()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v7);
  if (one-time initialization token for instances != -1) {
    swift_once();
  }
  uint64_t v1 = static __RealityFileURLResolver.instances;
  uint64_t v2 = v8;
  uint64_t v3 = v9;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v7, v8);
  swift_retain();
  uint64_t v5 = specialized AssetServiceScopedRegistry.instance(for:)((uint64_t)v4, v1, v2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v5;
}

void *static __RealityFileURLResolver.instance(for:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(a1, v2);

  return specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v4, v1, v2, v3);
}

uint64_t __RealityFileURLResolver.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  __RealityFileURLResolver.init()();
  return v0;
}

void *__RealityFileURLResolver.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v7 - 8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  *(void *)&v21[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(unsigned char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F130], v2);
  v0[7] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v8 = MEMORY[0x263F8EE78];
  v1[8] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  v1[9] = v8;
  uint64_t v9 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v9, (uint64_t)v21);
  outlined init with take of BindableDataInternal(v21, (uint64_t)(v1 + 2));
  if (one-time initialization token for weakInstances != -1) {
    swift_once();
  }
  uint64_t v10 = v1[5];
  uint64_t v11 = v1[6];
  uint64_t v12 = __swift_project_boxed_opaque_existential_1(v1 + 2, v10);
  uint64_t v13 = *(void *)(v10 - 8);
  __n128 v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, __n128))(v13 + 16))(v16, v14);
  Swift::UInt v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v16, v10);
  swift_weakInit();
  uint64_t v18 = swift_weakAssign();
  outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(v18, (uint64_t)v20);
  v20[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v20, v17);
  swift_endAccess();
  atexit((void (*)(void))@objc closure #1 in __RealityFileURLResolver.init());
  return v1;
}

uint64_t @objc closure #1 in __RealityFileURLResolver.init()()
{
  return closure #1 in __RealityFileURLResolver.init()((uint64_t)&unk_26DC8BF98, (uint64_t)partial apply for closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver(), (uint64_t)thunk for @callee_guaranteed () -> ()partial apply, (uint64_t)&block_descriptor_58);
}

uint64_t closure #1 in __RealityFileURLResolver.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for weakInstances != -1) {
LABEL_31:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v4 = static __RealityFileURLResolver.weakInstances;
  uint64_t v21 = (char *)static __RealityFileURLResolver.weakInstances + 64;
  uint64_t v5 = 1 << *((unsigned char *)static __RealityFileURLResolver.weakInstances + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *((void *)static __RealityFileURLResolver.weakInstances + 8);
  int64_t v22 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v9 = 0;
  while (v7)
  {
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_26:
    outlined init with copy of (Int, URL)(v4[7] + 8 * v11, (uint64_t)v28, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
    outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>((uint64_t)v28, (uint64_t)v27);
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v16 = Strong;
      Swift::UInt v17 = *(void **)(Strong + 56);
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = a2;
      *(void *)(v18 + 24) = v16;
      aBlock[4] = a3;
      aBlock[5] = v18;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = a4;
      char v19 = _Block_copy(aBlock);
      unint64_t v20 = v17;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v20, v19);

      _Block_release(v19);
      LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
      swift_release_n();
      swift_release();
      if (v20)
      {
        __break(1u);
LABEL_29:
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t result = outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
  }
  int64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v12 >= v22) {
    goto LABEL_29;
  }
  unint64_t v13 = *(void *)&v21[8 * v12];
  ++v9;
  if (v13) {
    goto LABEL_25;
  }
  int64_t v9 = v12 + 1;
  if (v12 + 1 >= v22) {
    goto LABEL_29;
  }
  unint64_t v13 = *(void *)&v21[8 * v9];
  if (v13) {
    goto LABEL_25;
  }
  int64_t v9 = v12 + 2;
  if (v12 + 2 >= v22) {
    goto LABEL_29;
  }
  unint64_t v13 = *(void *)&v21[8 * v9];
  if (v13) {
    goto LABEL_25;
  }
  int64_t v9 = v12 + 3;
  if (v12 + 3 >= v22) {
    goto LABEL_29;
  }
  unint64_t v13 = *(void *)&v21[8 * v9];
  if (v13) {
    goto LABEL_25;
  }
  int64_t v9 = v12 + 4;
  if (v12 + 4 >= v22) {
    goto LABEL_29;
  }
  unint64_t v13 = *(void *)&v21[8 * v9];
  if (v13)
  {
LABEL_25:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_26;
  }
  int64_t v14 = v12 + 5;
  if (v14 >= v22) {
    goto LABEL_29;
  }
  unint64_t v13 = *(void *)&v21[8 * v14];
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v22) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)&v21[8 * v9];
    ++v14;
    if (v13) {
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

uint64_t @objc closure #1 in __RealityFileURLResolver.init(_:)()
{
  return closure #1 in __RealityFileURLResolver.init()((uint64_t)&unk_26DC8BF48, (uint64_t)partial apply for closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver(), (uint64_t)thunk for @callee_guaranteed () -> ()partial apply, (uint64_t)&block_descriptor_50);
}

uint64_t __RealityFileURLResolver.deinit()
{
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver();
  *(void *)(v2 + 24) = v0;
  v6[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v6[5] = v2;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 1107296256;
  void v6[2] = thunk for @escaping @callee_guaranteed () -> ();
  v6[3] = &block_descriptor;
  uint64_t v3 = _Block_copy(v6);
  uint64_t v4 = v1;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v3);

  _Block_release(v3);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v0;
  }
  return result;
}

uint64_t __RealityFileURLResolver.__deallocating_deinit()
{
  __RealityFileURLResolver.deinit();

  return swift_deallocClassInstance();
}

uint64_t static __RealityFileURLResolver.assetPathPrefix.getter()
{
  return 0x7974696C616572;
}

void one-time initialization function for schemePrefix()
{
  v0._uint64_t countAndFlagsBits = 58;
  v0._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  static __RealityFileURLResolver.schemePrefix = 0x7974696C616572;
  unk_2681BCCF0 = 0xE700000000000000;
}

uint64_t static __RealityFileURLResolver.schemePrefix.getter()
{
  if (one-time initialization token for schemePrefix != -1) {
    swift_once();
  }
  uint64_t v0 = static __RealityFileURLResolver.schemePrefix;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t __RealityFileURLResolver.registerRealityFileResolver(assetService:)()
{
  outlined init with copy of __REAssetService(v0 + 16, (uint64_t)v6);
  uint64_t v1 = v7;
  uint64_t v2 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  outlined init with copy of __REAssetService(v0 + 16, (uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  String.utf8CString.getter();
  REAssetManagerRegisterAssetResolver();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

id @objc closure #1 in __RealityFileURLResolver.registerRealityFileResolver()(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized closure #1 in __RealityFileURLResolver.registerRealityFileResolver()(a2, a3);
}

Swift::Void __swiftcall __RealityFileURLResolver.unregisterRealityFileResolver()()
{
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver();
  *(void *)(v2 + 24) = v0;
  v5[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v5[5] = v2;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1107296256;
  _OWORD v5[2] = thunk for @escaping @callee_guaranteed () -> ();
  _OWORD v5[3] = &block_descriptor_8;
  uint64_t v3 = _Block_copy(v5);
  uint64_t v4 = v1;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v3);

  _Block_release(v3);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v3) {
    __break(1u);
  }
}

uint64_t closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver()(uint64_t a1)
{
  v55[7] = *(id *)MEMORY[0x263EF8340];
  uint64_t v53 = type metadata accessor for URL();
  uint64_t v51 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  unint64_t v54 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v52 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 64);
  swift_bridgeObjectRetain();
  uint64_t v6 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 64) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  int64_t v7 = 0;
  uint64_t v47 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v6;
  uint64_t v8 = v5 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  if (v11) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v7++, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v7 < v12)
  {
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    if (v18)
    {
LABEL_19:
      unint64_t v11 = (v18 - 1) & v18;
      for (unint64_t i = __clz(__rbit64(v18)) + (v7 << 6); ; unint64_t i = v15 | (v7 << 6))
      {
        unint64_t v20 = (uint64_t *)(*(void *)(v5 + 56) + 16 * i);
        uint64_t v21 = *v20;
        uint64_t v22 = v20[1];
        uint64_t v23 = self;
        swift_bridgeObjectRetain();
        id v24 = objc_msgSend(v23, sel_defaultManager);
        uint64_t v25 = (void *)MEMORY[0x22A688A50](v21, v22);
        swift_bridgeObjectRelease();
        v55[0] = 0;
        LODWORD(v22) = objc_msgSend(v24, sel_removeItemAtPath_error_, v25, v55);

        if (v22)
        {
          id v26 = v55[0];
          if (!v11) {
            goto LABEL_7;
          }
        }
        else
        {
          id v13 = v55[0];
          int64_t v14 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          if (!v11) {
            goto LABEL_7;
          }
        }
LABEL_6:
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
      }
    }
    int64_t v19 = v7 + 1;
    if (v7 + 1 < v12)
    {
      unint64_t v18 = *(void *)(v8 + 8 * v19);
      if (v18) {
        goto LABEL_18;
      }
      int64_t v19 = v7 + 2;
      if (v7 + 2 >= v12) {
        goto LABEL_27;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v19);
      if (v18) {
        goto LABEL_18;
      }
      int64_t v19 = v7 + 3;
      if (v7 + 3 >= v12) {
        goto LABEL_27;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v19);
      if (v18)
      {
LABEL_18:
        int64_t v7 = v19;
        goto LABEL_19;
      }
      int64_t v19 = v7 + 4;
      if (v7 + 4 < v12)
      {
        unint64_t v18 = *(void *)(v8 + 8 * v19);
        if (v18) {
          goto LABEL_18;
        }
        while (1)
        {
          int64_t v7 = v19 + 1;
          if (__OFADD__(v19, 1)) {
            break;
          }
          if (v7 >= v12) {
            goto LABEL_27;
          }
          unint64_t v18 = *(void *)(v8 + 8 * v7);
          ++v19;
          if (v18) {
            goto LABEL_19;
          }
        }
LABEL_38:
        __break(1u);
      }
    }
  }
LABEL_27:
  swift_release();
  uint64_t v27 = *(void *)(v47 + 16);
  if (v27)
  {
    uint64_t v28 = v52;
    uint64_t v29 = v51 + 16;
    uint64_t v51 = *(void *)(v51 + 16);
    uint64_t v30 = v47 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    uint64_t v31 = *(void *)(v29 + 56);
    uint64_t v32 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 40);
    long long v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 32);
    unint64_t v49 = (void (**)(char *, char *, uint64_t))(v29 + 16);
    uint64_t v50 = v31;
    uint64_t v48 = (void (**)(char *, uint64_t))(v29 - 8);
    unint64_t v46 = (v29 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v34 = v53;
    while (1)
    {
      uint64_t v36 = v29;
      ((void (*)(char *, uint64_t, uint64_t))v51)(v28, v30, v34);
      unint64_t v37 = *v32;
      (*v32)(v28, 0, 1, v34);
      if ((*v33)(v28, 1, v34) == 1) {
        break;
      }
      (*v49)(v54, v28, v34);
      id v38 = objc_msgSend(self, sel_defaultManager);
      URL._bridgeToObjectiveC()(v39);
      uint64_t v41 = v40;
      v55[0] = 0;
      unsigned int v42 = objc_msgSend(v38, sel_removeItemAtURL_error_, v40, v55);

      if (v42)
      {
        id v35 = v55[0];
      }
      else
      {
        id v43 = v55[0];
        Swift::String v44 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
      uint64_t v34 = v53;
      (*v48)(v54, v53);
      v30 += v50;
      --v27;
      uint64_t v29 = v36;
      uint64_t v28 = v52;
      if (!v27)
      {
        v37(v52, 1, 1, v34);
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v52, 1, 1, v53);
  }
  return swift_bridgeObjectRelease();
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t __RealityFileURLResolver.resolvedURL(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v5 - 8);
  int64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  int64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  int64_t v14 = (char *)&v36 - v13;
  uint64_t v15 = type metadata accessor for CharacterSet();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  unint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  static CharacterSet.urlQueryAllowed.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (!v20) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v39, 1, 1, v8);
  }
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v39, 1, 1, v8);
  }
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v21(v14, v7, v8);
  uint64_t v22 = URL.pathComponents.getter();
  uint64_t v23 = v22;
  unint64_t v24 = *(void *)(v22 + 16);
  if (!v24) {
    goto LABEL_12;
  }
  unint64_t v37 = (void (*)(uint64_t, char *, uint64_t))v21;
  id v38 = &v36;
  MEMORY[0x270FA5388](v22);
  *(&v36 - 2) = v25;
  *(&v36 - 1) = v23;
  id v27 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  OS_dispatch_queue.sync<A>(execute:)();

  if (!v41)
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v39, 1, 1, v8);
  }
  URL.init(fileURLWithPath:)();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v29 = v24 - 1;
  if (v24 == 1)
  {
LABEL_11:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    swift_bridgeObjectRelease();
    uint64_t v35 = v39;
    v37(v39, v12, v8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v35, 0, 1, v8);
  }
  unint64_t v30 = *(void *)(v23 + 16);
  if (v30 >= 2 && v24 <= v30)
  {
    uint64_t v31 = (void **)(v23 + 56);
    do
    {
      uint64_t v32 = (uint64_t)*(v31 - 1);
      long long v33 = *v31;
      swift_bridgeObjectRetain();
      v34._uint64_t countAndFlagsBits = v32;
      v34._unint64_t object = v33;
      URL.appendPathComponent(_:)(v34);
      swift_bridgeObjectRelease();
      v31 += 2;
      --v29;
    }
    while (v29);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in __RealityFileURLResolver.resolvedURL(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (one-time initialization token for schemePrefix != -1) {
    swift_once();
  }
  uint64_t result = unk_2681BCCF0;
  uint64_t v16 = static __RealityFileURLResolver.schemePrefix;
  uint64_t v17 = unk_2681BCCF0;
  if (a2[2])
  {
    uint64_t v7 = a2[4];
    uint64_t v8 = (void *)a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9._uint64_t countAndFlagsBits = v7;
    v9._unint64_t object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v10 = *(void *)(a1 + 64);
    if (*(void *)(v10 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
      if (v12)
      {
        uint64_t v13 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v11);
        uint64_t v15 = *v13;
        uint64_t v14 = v13[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
LABEL_10:
        *a3 = v15;
        a3[1] = v14;
        return result;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t __RealityFileURLResolver.resolvedURL(group:name:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  v10._uint64_t countAndFlagsBits = 47;
  v10._unint64_t object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v10)
    || (uint64_t v11 = 47,
        char v12 = (void *)0xE100000000000000,
        v13._uint64_t countAndFlagsBits = 47,
        v13._unint64_t object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v13)))
  {
    uint64_t v11 = 0;
    char v12 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v11;
  v14._unint64_t object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = a3;
  v15._unint64_t object = a4;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  if (one-time initialization token for schemePrefix != -1) {
    swift_once();
  }
  if (String.hasPrefix(_:)((Swift::String)static __RealityFileURLResolver.schemePrefix)
    && (lazy protocol witness table accessor for type String and conformance String(),
        uint64_t v16 = StringProtocol.components<A>(separatedBy:)(),
        swift_bridgeObjectRelease(),
        (uint64_t v17 = *(void *)(v16 + 16)) != 0))
  {
    uint64_t v18 = v16 + 16 * v17;
    uint64_t v19 = *(void *)(v18 + 16);
    uint64_t v20 = *(void *)(v18 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __RealityFileURLResolver.resolvedURL(for:)(v19, v20, a5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_22830EC60;
    _StringGuts.grow(_:)(53);
    v23._unint64_t object = (void *)0x800000022834ECA0;
    v23._uint64_t countAndFlagsBits = 0xD000000000000027;
    String.append(_:)(v23);
    v24._uint64_t countAndFlagsBits = a1;
    v24._unint64_t object = a2;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = 0x20656D616E202C22;
    v25._unint64_t object = (void *)0xE900000000000022;
    String.append(_:)(v25);
    v26._uint64_t countAndFlagsBits = a3;
    v26._unint64_t object = a4;
    String.append(_:)(v26);
    v27._uint64_t countAndFlagsBits = 34;
    v27._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    *(void *)(v22 + 56) = MEMORY[0x263F8D310];
    *(void *)(v22 + 32) = 0;
    *(void *)(v22 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a5, 1, 1, v28);
  }
}

Swift::Void __swiftcall __RealityFileURLResolver.setResolvedURLPath(_:for:)(Swift::String _, Swift::String a2)
{
  uint64_t v3 = v2;
  unint64_t object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  uint64_t v6 = _._object;
  uint64_t v7 = _._countAndFlagsBits;
  uint64_t v8 = *(void **)(v3 + 56);
  Swift::String v9 = (void *)swift_allocObject();
  v9[2] = v3;
  v9[3] = countAndFlagsBits;
  v9[4] = object;
  _OWORD v9[5] = v7;
  v9[6] = v6;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in __RealityFileURLResolver.setResolvedURLPath(_:for:);
  *(void *)(v10 + 24) = v9;
  uint64_t v13[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v13[5] = v10;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed () -> ();
  v13[3] = &block_descriptor_18;
  uint64_t v11 = _Block_copy(v13);
  char v12 = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v11);

  _Block_release(v11);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v6) {
    __break(1u);
  }
}

uint64_t closure #1 in __RealityFileURLResolver.setResolvedURLPath(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v51 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v49 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  Swift::String v14 = (char *)&v44 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v44 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v50 = (char *)&v44 - v19;
  MEMORY[0x270FA5388](v20);
  unint64_t v52 = (char *)&v44 - v21;
  uint64_t v22 = (uint64_t *)(a1 + 64);
  swift_beginAccess();
  uint64_t v23 = *(void *)(a1 + 64);
  if (*(void *)(v23 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v25)
    {
      uint64_t v47 = *(void *)(*(void *)(v23 + 56) + 16 * v24);
      uint64_t v48 = a2;
      uint64_t v26 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      URL.init(fileURLWithPath:)();
      swift_bridgeObjectRelease();
      Swift::String v27 = v50;
      uint64_t v46 = a5;
      uint64_t v47 = a4;
      URL.init(fileURLWithPath:)();
      URL.standardized.getter();
      URL.standardized.getter();
      lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v29 = v51;
      unint64_t v30 = v14;
      uint64_t v31 = *(void (**)(char *, uint64_t))(v51 + 8);
      v31(v30, v26);
      v31(v17, v26);
      if (v28)
      {
        v31(v27, v26);
        v31(v52, v26);
      }
      else
      {
        uint64_t v32 = v31;
        long long v33 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
        uint64_t v45 = v26;
        v33(v49, v52, v26);
        Swift::String v34 = (unint64_t *)(a1 + 72);
        swift_beginAccess();
        unint64_t v35 = *(void *)(a1 + 72);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(a1 + 72) = v35;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, v35);
          *Swift::String v34 = v35;
        }
        id v38 = v50;
        uint64_t v37 = v51;
        unint64_t v40 = *(void *)(v35 + 16);
        unint64_t v39 = *(void *)(v35 + 24);
        if (v40 >= v39 >> 1)
        {
          unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v35);
          *Swift::String v34 = v35;
        }
        *(void *)(v35 + 16) = v40 + 1;
        uint64_t v41 = v45;
        (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))(v35+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v40, v49, v45);
        swift_endAccess();
        v32(v38, v41);
        v32(v52, v41);
      }
      a5 = v46;
      a4 = v47;
      a2 = v48;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v42 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v53 = *v22;
  *uint64_t v22 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a4, a5, a2, a3, v42);
  *uint64_t v22 = v53;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

Swift::String __swiftcall __RealityFileURLResolver.createSchemePrefix(with:)(Swift::String with)
{
  unint64_t object = with._object;
  uint64_t countAndFlagsBits = with._countAndFlagsBits;
  if (one-time initialization token for schemePrefix != -1) {
    swift_once();
  }
  long long v7 = static __RealityFileURLResolver.schemePrefix;
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = countAndFlagsBits;
  v3._unint64_t object = object;
  String.append(_:)(v3);
  uint64_t v5 = (void *)*((void *)&v7 + 1);
  uint64_t v4 = v7;
  result._unint64_t object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

Swift::String __swiftcall __RealityFileURLResolver.createSubAssetPath(with:)(Swift::String with)
{
  String.append(_:)(with);
  uint64_t v1 = 0x2F737465737361;
  uint64_t v2 = (void *)0xE700000000000000;
  result._unint64_t object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall __RealityFileURLResolver.createFullSchemePath(group:name:)(Swift::String group, Swift::String name)
{
  unint64_t object = name._object;
  uint64_t countAndFlagsBits = name._countAndFlagsBits;
  uint64_t v4 = group._object;
  uint64_t v5 = group._countAndFlagsBits;
  v6._uint64_t countAndFlagsBits = 47;
  v6._unint64_t object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v6)
    || (uint64_t v7 = 47,
        uint64_t v8 = (void *)0xE100000000000000,
        v9._uint64_t countAndFlagsBits = 47,
        v9._unint64_t object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v9)))
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = v7;
  v10._unint64_t object = v8;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = countAndFlagsBits;
  v11._unint64_t object = object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = v5;
  uint64_t v13 = v4;
  result._unint64_t object = v13;
  result._uint64_t countAndFlagsBits = v12;
  return result;
}

uint64_t static __RealityFileURLResolver.createFullSchemePath(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v7._uint64_t countAndFlagsBits = 47;
  v7._unint64_t object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v7)
    || (uint64_t v8 = 47,
        Swift::String v9 = (void *)0xE100000000000000,
        v10._uint64_t countAndFlagsBits = 47,
        v10._unint64_t object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v10)))
  {
    uint64_t v8 = 0;
    Swift::String v9 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v8;
  v11._unint64_t object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = a3;
  v12._unint64_t object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return a1;
}

void *specialized static __RealityFileURLResolver.instance(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for instances != -1) {
    swift_once();
  }
  uint64_t v7 = static __RealityFileURLResolver.instances;
  swift_retain();
  uint64_t v8 = specialized AssetServiceScopedRegistry.instance(for:)(a1, v7, a3, a4);
  swift_release();
  return v8;
}

void *specialized AssetServiceScopedRegistry.instance(for:)(uint64_t a1, uint64_t a2)
{
  v26[3] = type metadata accessor for __REAssetManager();
  v26[4] = &protocol witness table for __REAssetManager;
  v26[0] = a1;
  Swift::UInt v4 = *(void *)(a1 + 88);
  uint64_t v5 = (os_unfair_lock_s *)(*(void *)(a2 + 16) + 16);
  swift_retain();
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  uint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(v6 + 16) && (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v8 & 1) != 0))
  {
    Swift::String v9 = *(void **)(*(void *)(v6 + 56) + 8 * v7);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v5);
    outlined init with copy of __REAssetService((uint64_t)v26, (uint64_t)aBlock);
    type metadata accessor for __RealityFileURLResolver();
    Swift::String v10 = (void *)swift_allocObject();
    uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)aBlock, (uint64_t)v22);
    MEMORY[0x270FA5388](v11);
    uint64_t v13 = (void *)((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    Swift::String v9 = specialized __RealityFileURLResolver.init(_:)(*v13, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    os_unfair_lock_lock(v5);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, v4, isUniquelyReferenced_nonNull_native);
    *(void *)(a2 + 24) = v25;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v16;
    *(void *)(v17 + 24) = v4;
    uint64_t v23 = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    uint64_t v24 = v17;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v22 = &block_descriptor_42;
    uint64_t v18 = _Block_copy(aBlock);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v18);
  }
  os_unfair_lock_unlock(v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return v9;
}

void *specialized __RealityFileURLResolver.init(_:)(uint64_t a1, void *a2)
{
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v8 - 8);
  v17[3] = type metadata accessor for __REAssetManager();
  v17[4] = &protocol witness table for __REAssetManager;
  uint64_t v14 = a1;
  v17[0] = a1;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v15 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F8F130], v13);
  a2[7] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  a2[8] = specialized Dictionary.init(dictionaryLiteral:)(v9);
  a2[9] = v9;
  outlined init with copy of __REAssetService((uint64_t)v17, (uint64_t)(a2 + 2));
  if (one-time initialization token for weakInstances != -1) {
    swift_once();
  }
  Swift::UInt v10 = *(void *)(v14 + 88);
  swift_weakInit();
  uint64_t v11 = swift_weakAssign();
  outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(v11, (uint64_t)v16);
  v16[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v16, v10);
  swift_endAccess();
  atexit((void (*)(void))@objc closure #1 in __RealityFileURLResolver.init(_:));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return a2;
}

void *specialized __RealityFileURLResolver.init(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  Swift::UInt v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v12 - 8);
  void v24[3] = a3;
  v24[4] = a4;
  uint64_t v21 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v24);
  uint64_t v14 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);
  v19[1] = boxed_opaque_existential_1;
  v14(boxed_opaque_existential_1, a1, a3);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F8F130], v20);
  a2[7] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v15 = MEMORY[0x263F8EE78];
  a2[8] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  a2[9] = v15;
  outlined init with copy of __REAssetService((uint64_t)v24, (uint64_t)(a2 + 2));
  if (one-time initialization token for weakInstances != -1) {
    swift_once();
  }
  Swift::UInt v16 = (*(uint64_t (**)(uint64_t))(v21 + 32))(a3);
  swift_weakInit();
  uint64_t v17 = swift_weakAssign();
  outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(v17, (uint64_t)v23);
  unsigned char v23[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v23, v16);
  swift_endAccess();
  atexit((void (*)(void))@objc closure #1 in __RealityFileURLResolver.init(_:));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return a2;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, String>);
  Swift::String v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[6];
  if (!v4) {
    return (unint64_t)v3;
  }
  for (unint64_t i = a1 + 5; ; i += 3)
  {
    uint64_t v6 = *(i - 1);
    uint64_t v7 = *i;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v6;
    Swift::UInt v10 = (void *)(v3[7] + 16 * result);
    void *v10 = v7;
    v10[1] = v4;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_13;
    }
    v3[2] = v13;
    if (!--v1)
    {
      swift_bridgeObjectRetain();
      return (unint64_t)v3;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = i[4];
    if (!v4) {
      return (unint64_t)v3;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [ActionEventType : RESubscriptionHandle]>);
  Swift::String v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = a1[5];
  if (!v4) {
    return (unint64_t)v3;
  }
  for (unint64_t i = a1 + 4; ; i += 2)
  {
    uint64_t v6 = *i;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*i);
    if (v8) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = 8 * result;
    *(void *)(v3[6] + v9) = v6;
    *(void *)(v3[7] + v9) = v4;
    Swift::UInt v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_13;
    }
    v3[2] = v12;
    if (!--v1)
    {
      swift_bridgeObjectRetain();
      return (unint64_t)v3;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = i[3];
    if (!v4) {
      return (unint64_t)v3;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, (_:_:_:_:_:_:_:_:)>);
  Swift::String v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = a1[5];
  uint64_t v4 = a1[6];
  if (!v5)
  {
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v6 = a1 + 4;
  while (1)
  {
    uint64_t v7 = *v6;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    Swift::UInt v10 = (uint64_t *)(v3[7] + 16 * result);
    void *v10 = v5;
    v10[1] = v4;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_12;
    }
    v3[2] = v13;
    if (--v1)
    {
      swift_retain();
      uint64_t v5 = v6[4];
      uint64_t v4 = v6[5];
      v6 += 3;
      if (v5) {
        continue;
      }
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __USDARReferenceProvidingPlugin>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileARReferenceProvidingPlugin>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<Int, String>, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, String>, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  for (unint64_t i = (_OWORD *)(a1 + 40); *(void *)i; unint64_t i = (_OWORD *)((char *)i + 24))
  {
    long long v14 = *i;
    uint64_t v8 = *((void *)i - 1);
    unint64_t result = a3(v8);
    if (v10)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v6[6] + 8 * result) = v8;
    *(_OWORD *)(v6[7] + 16 * result) = v14;
    uint64_t v11 = v6[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    void v6[2] = v13;
    if (!--v3) {
      return (unint64_t)v6;
    }
  }
  return (unint64_t)v6;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v5 = a1[5];
  if (!v5) {
    return (unint64_t)v4;
  }
  for (unint64_t i = a1 + 4; ; i += 2)
  {
    Swift::UInt v7 = *i;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*i);
    if (v9) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v4[6] + v10) = v7;
    *(void *)(v4[7] + v10) = v5;
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_13;
    }
    uint64_t v4[2] = v13;
    if (!--v2)
    {
      swift_retain();
      return (unint64_t)v4;
    }
    swift_retain();
    Swift::UInt v5 = i[3];
    if (!v5) {
      return (unint64_t)v4;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = a1[2];
  if (!v3) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  unint64_t result = a3(v7);
  if (v11)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v6;
  }
  BOOL v12 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v6[6] + 8 * result) = v7;
    uint64_t v13 = (void *)(v6[7] + 16 * result);
    *uint64_t v13 = v8;
    v13[1] = v9;
    uint64_t v14 = v6[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      break;
    }
    void v6[2] = v16;
    if (!--v3) {
      goto LABEL_8;
    }
    uint64_t v17 = v12 + 3;
    uint64_t v7 = *(v12 - 2);
    uint64_t v8 = *(v12 - 1);
    uint64_t v18 = *v12;
    swift_bridgeObjectRetain();
    unint64_t result = a3(v7);
    BOOL v12 = v17;
    uint64_t v9 = v18;
    if (v19) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static __RealityFileURLResolver.weakShared.getter()
{
  if (one-time initialization token for weakInstances != -1) {
    swift_once();
  }
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v11);
  uint64_t v1 = v12;
  uint64_t v2 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  Swift::UInt v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  swift_beginAccess();
  uint64_t v4 = static __RealityFileURLResolver.weakInstances;
  if (*((void *)static __RealityFileURLResolver.weakInstances + 2)
    && (uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3), (v6 & 1) != 0))
  {
    outlined init with copy of (Int, URL)(v4[7] + 8 * v5, (uint64_t)&v9, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
    char v10 = 0;
    uint64_t Strong = swift_weakLoadStrong();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>?);
    swift_endAccess();
  }
  else
  {
    uint64_t v9 = 0;
    char v10 = 1;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>?);
    swift_endAccess();
    uint64_t Strong = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return Strong;
}

uint64_t specialized static __RealityFileURLResolver.weakShared.setter(uint64_t a1)
{
  if (one-time initialization token for weakInstances != -1) {
    swift_once();
  }
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v10);
  uint64_t v3 = v11;
  uint64_t v4 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  Swift::UInt v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  if (a1)
  {
    swift_weakInit();
    swift_weakAssign();
    outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>((uint64_t)v7, (uint64_t)&v8);
  }
  else
  {
    uint64_t v8 = 0;
  }
  BOOL v9 = a1 == 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v8, v5);
  swift_endAccess();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver()()
{
  return closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver()(v0);
}

uint64_t sub_227E17168()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_227E171B8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in __RealityFileURLResolver.resolvedURL(for:)@<X0>(void *a1@<X8>)
{
  return closure #1 in __RealityFileURLResolver.resolvedURL(for:)(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_227E171E4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t partial apply for closure #1 in __RealityFileURLResolver.setResolvedURLPath(_:for:)()
{
  return closure #1 in __RealityFileURLResolver.setResolvedURLPath(_:for:)(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_227E1723C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t type metadata accessor for __RealityFileURLResolver()
{
  return self;
}

uint64_t method lookup function for __RealityFileURLResolver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RealityFileURLResolver);
}

uint64_t dispatch thunk of __RealityFileURLResolver.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.registerRealityFileResolver(assetService:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.registerRealityFileResolver()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.unregisterRealityFileResolver()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.resolvedURL(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.resolvedURL(group:name:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.setResolvedURLPath(_:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.createSchemePrefix(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.createSubAssetPath(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.createFullSchemePath(group:name:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t type metadata instantiation function for __RealityFileURLResolver.Weak(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for __RealityFileURLResolver.Weak()
{
  return __swift_instantiateGenericMetadata();
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined init with take of LoadTrace(uint64_t a1, uint64_t a2)
{
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Trace - 8) + 32))(a2, a1, Trace);
  return a2;
}

id outlined copy of __RKMaterialParameterBlock.Parameter(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 6)
  {
    return result;
  }
  else
  {
    if (a9 == 1)
    {
      id v9 = result;
    }
    else if (a9)
    {
      return result;
    }
    return (id)swift_retain();
  }
}

void outlined copy of __MaterialResource.CoreMaterialFunction?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v6 = a6;
  }
}

uint64_t outlined retain of (CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void **)(a1 + 112);
  outlined copy of __MaterialResource.CoreMaterialFunction?(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 64));
  outlined copy of __MaterialResource.CoreMaterialFunction?(v2, v3, v4, v5, v6, v7);
  swift_retain();
  return a1;
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id specialized closure #1 in __RealityFileURLResolver.registerRealityFileResolver()(uint64_t a1, id a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = String.init(cString:)();
  uint64_t v12 = v11;
  if (a2)
  {
    uint64_t v13 = v10;
    type metadata accessor for __REAssetManager();
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(unsigned char *)(v14 + 80) = 2;
    *(_WORD *)(v14 + 96) = 514;
    *(void *)(v14 + 88) = a2;
    uint64_t v15 = one-time initialization token for instances;
    swift_retain();
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v16 = static __RealityFileURLResolver.instances;
    swift_retain();
    specialized AssetServiceScopedRegistry.instance(for:)(v14, v16);
    swift_release();
    swift_release();
    __RealityFileURLResolver.resolvedURL(for:)(v13, v12, (uint64_t)v5);
    swift_release();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
      return 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
      uint64_t v17 = URL.path.getter();
      uint64_t v19 = v18;
      id v20 = objc_allocWithZone(NSString);
      uint64_t v21 = (void *)MEMORY[0x22A688A50](v17, v19);
      swift_bridgeObjectRelease();
      id v22 = objc_msgSend(v20, sel_initWithString_, v21);

      a2 = objc_msgSend(v22, sel_fileSystemRepresentation);
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      id v23 = v22;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_227E179AC()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_227E179E4()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:)()
{
  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(void *)(v0 + 16), *(void *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

uint64_t sub_227E17A24()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_227E17A34()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t outlined init with copy of (Int, URL)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t __RKEntityActionSpecification.init(decodeContext:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  void (*v29)(uint64_t *__return_ptr, void *);
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  unsigned __int8 v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void **v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  void v49[6];
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;

  uint64_t v3 = a1;
  uint64_t v5 = *a1;
  unint64_t result = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x736E6F69746361, 0xE700000000000000, 0, *a1);
  if (v2)
  {

    swift_release();
    Swift::String v62 = v3[3];
    outlined release of [String : String]((uint64_t)&v62);
    Swift::String v61 = v3[4];
    outlined release of [String : String]((uint64_t)&v61);
    Swift::String v60 = v3[5];
    uint64_t v7 = &v60;
    return outlined release of [String : String]((uint64_t)v7);
  }
  unint64_t v8 = result;
  uint64_t v50 = MEMORY[0x263F8EE78];
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_6;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    long long v33 = MEMORY[0x263F8EE78];
    if (!*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_32;
    }
LABEL_26:
    Swift::String v34 = (void *)MEMORY[0x22A688A50](0x766973756C637865, 0xE900000000000065);
    unint64_t v35 = objc_msgSend(v5, sel_property_, v34);

    if (v35)
    {
      uint64_t v36 = objc_msgSend(v35, sel_BOOLValue);

      swift_release();
      Swift::String v56 = v3[3];
      outlined release of [String : String]((uint64_t)&v56);
      Swift::String v55 = v3[4];
      outlined release of [String : String]((uint64_t)&v55);
      unint64_t v54 = v3[5];
      outlined release of [String : String]((uint64_t)&v54);
    }
    else
    {

      swift_release();
      long long v59 = v3[3];
      outlined release of [String : String]((uint64_t)&v59);
      unint64_t v58 = v3[4];
      outlined release of [String : String]((uint64_t)&v58);
      Swift::String v57 = v3[5];
      outlined release of [String : String]((uint64_t)&v57);
      uint64_t v36 = 0;
    }
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = v33;
    *(unsigned char *)(a2 + 16) = v36;
    *(void *)(a2 + 24) = 1;
    *(_WORD *)(a2 + 32) = 0;
    type metadata accessor for __RKEntityActionSpecification(0);
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v9 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v9) {
    goto LABEL_31;
  }
LABEL_6:
  if (v9 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v37 = v5;
  id v38 = a2;
  uint64_t v10 = 0;
  uint64_t v47 = v3[1];
  unint64_t v11 = v8 & 0xC000000000000001;
  unint64_t v40 = v9;
  uint64_t v41 = v8;
  char v42 = v3;
  unint64_t v39 = v8 & 0xC000000000000001;
  do
  {
    if (v11) {
      id v12 = (id)MEMORY[0x22A689930](v10, v8);
    }
    else {
      id v12 = *(id *)(v8 + 8 * v10 + 32);
    }
    uint64_t v13 = v12;
    id v14 = objc_msgSend(v47, sel_objectAtPath_, v12, v37, v38);
    if (v14)
    {
      uint64_t v15 = v14;
      self;
      uint64_t v16 = swift_dynamicCastObjCClass();
      if (!v16) {
        goto LABEL_9;
      }
      uint64_t v17 = (void *)v16;
      uint64_t v18 = v3[2];
      uint64_t v19 = v3[3];
      id v20 = v3[4];
      uint64_t v21 = v3[5];
      uint64_t v44 = v15;
      uint64_t v45 = v47;
      id v43 = v18;
      swift_retain();
      uint64_t v46 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v22 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x64693A6F666E69, 0xE700000000000000, 1, v17);
      uint64_t v24 = v23;
      if (v23)
      {
        uint64_t v25 = (uint64_t)v22;
        if (one-time initialization token for actionTypeToActionSpecificationsGenerator != -1) {
          swift_once();
        }
        uint64_t v26 = static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator;
        if (*((void *)static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator + 2))
        {
          swift_bridgeObjectRetain();
          unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v24);
          if (v28)
          {
            uint64_t v29 = *(void (**)(uint64_t *__return_ptr, void *))(v26[7] + 16 * v27);
            swift_retain();
            swift_bridgeObjectRelease_n();
            v49[0] = v17;
            v49[1] = v45;
            v49[2] = v43;
            v49[3] = v46;
            v49[4] = v20;
            v49[5] = v21;
            v29(&v48, v49);
            swift_release();
            unint64_t v30 = v48;
LABEL_8:
            specialized Array.append<A>(contentsOf:)(v30);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();

            unint64_t v8 = v41;
            uint64_t v3 = v42;
            unint64_t v11 = v39;
            uint64_t v9 = v40;
LABEL_9:

            goto LABEL_10;
          }
          swift_bridgeObjectRelease();
        }
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v31 = swift_allocObject();
        *(_OWORD *)(v31 + 16) = xmmword_22830EC60;
        *(void *)(v31 + 56) = MEMORY[0x263F8D310];
        *(void *)(v31 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v31 + 32) = v25;
        *(void *)(v31 + 40) = v24;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        uint64_t v32 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
      }
      unint64_t v30 = MEMORY[0x263F8EE78];
      goto LABEL_8;
    }
LABEL_10:
    ++v10;
  }
  while (v9 != v10);
  swift_bridgeObjectRelease();
  long long v33 = v50;
  uint64_t v5 = v37;
  a2 = v38;
  if (*(void *)(v50 + 16)) {
    goto LABEL_26;
  }
LABEL_32:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError();
  swift_allocError();
  swift_willThrow();

  swift_release();
  uint64_t v53 = v3[3];
  outlined release of [String : String]((uint64_t)&v53);
  unint64_t v52 = v3[4];
  outlined release of [String : String]((uint64_t)&v52);
  uint64_t v51 = v3[5];
  uint64_t v7 = &v51;
  return outlined release of [String : String]((uint64_t)v7);
}

void *one-time initialization function for actionTypeToActionSpecificationsGenerator()
{
  unint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for actionTypeToActionSpecificationsGenerator);
  static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator = result;
  return result;
}

unint64_t static __RKEntityActionSpecification.generateGroupActionSpecifications(decodeContext:)(uint64_t a1)
{
  void (*v43)(uint64_t *__return_ptr, void *);
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  long long v54;
  id v55;
  uint64_t v56;
  unsigned char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void v69[6];
  uint64_t v70;

  uint64_t v2 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v52 - v7;
  uint64_t v9 = *(void **)a1;
  int v10 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x73706F6F6CLL, 0xE500000000000000, 1, *(void **)a1);
  uint64_t v11 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x436D726F66726570, 0xEC000000746E756FLL, 1, v9);
  Swift::String v57 = v8;
  unint64_t v58 = v2;
  long long v59 = v6;
  Swift::String v56 = v11;
  id v12 = *(void **)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  id v17 = v9;
  id v18 = v12;
  uint64_t v19 = v13;
  id v20 = v18;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __RKEntityGroupActionOrder.init(decodeContext:)(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, void))specialized USKNode.valueForProperty<A>(named:requestContext:getter:), (Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityGroupActionOrderUSD.init(rawValue:), (void (*)(uint64_t))lazy protocol witness table accessor for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError, (char *)v69);
  Swift::String v66 = v14;
  int v21 = LOBYTE(v69[0]);
  unint64_t result = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x736E6F69746361, 0xE700000000000000, 1, v17);
  unint64_t v23 = result;
  uint64_t v53 = v21;
  char v70 = MEMORY[0x263F8EE78];
  Swift::String v65 = v15;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  Swift::String v64 = v16;
  if (v24)
  {
    unint64_t v52 = v3;
    if (v24 >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v67 = v23 & 0xC000000000000001;
      unint64_t v54 = xmmword_22830EC60;
      uint64_t v26 = v20;
      Swift::String v61 = v10;
      Swift::String v60 = v19;
      Swift::String v62 = v24;
      while (1)
      {
        if (v67) {
          id v27 = (id)MEMORY[0x22A689930](v25, v23);
        }
        else {
          id v27 = *(id *)(v23 + 8 * v25 + 32);
        }
        char v28 = v27;
        id v29 = objc_msgSend(v26, sel_objectAtPath_, v27, v52);
        if (!v29)
        {

          goto LABEL_10;
        }
        unint64_t v30 = v29;
        unint64_t v31 = v23;
        self;
        uint64_t v32 = swift_dynamicCastObjCClass();
        if (v32) {
          break;
        }

LABEL_9:
        unint64_t v23 = v31;
        uint64_t v24 = v62;
LABEL_10:
        if (v24 == ++v25)
        {
          swift_bridgeObjectRelease();
          uint64_t v46 = v70;
          uint64_t v3 = v52;
          goto LABEL_33;
        }
      }
      long long v33 = (void *)v32;
      Swift::String v63 = v26;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v34 = v30;
      unint64_t v35 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x64693A6F666E69, 0xE700000000000000, 1, v33);
      uint64_t v38 = v36;
      if (!v36)
      {
        uint64_t v37 = MEMORY[0x263F8EE78];
        goto LABEL_28;
      }
      uint64_t v39 = (uint64_t)v35;
      Swift::String v55 = v34;
      if (one-time initialization token for actionTypeToActionSpecificationsGenerator != -1) {
        swift_once();
      }
      unint64_t v40 = static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator;
      if (*((void *)static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator + 2))
      {
        swift_bridgeObjectRetain();
        unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v38);
        if (v42)
        {
          id v43 = *(void (**)(uint64_t *__return_ptr, void *))(v40[7] + 16 * v41);
          swift_retain();
          swift_bridgeObjectRelease_n();
          v69[0] = v33;
          v69[1] = v63;
          v69[2] = v60;
          v69[3] = v66;
          v69[4] = v65;
          v69[5] = v64;
          v43(&v68, v69);
          swift_release();
          uint64_t v37 = v68;
LABEL_27:
          id v34 = v55;
LABEL_28:
          LOBYTE(v10) = v61;
          if (*(void *)(v37 + 16))
          {
            specialized Array.append<A>(contentsOf:)(v37);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
          }
          else
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();

            swift_bridgeObjectRelease();
          }
          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
      }
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = v54;
      *(void *)(v44 + 56) = MEMORY[0x263F8D310];
      *(void *)(v44 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v44 + 32) = v39;
      *(void *)(v44 + 40) = v38;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      uint64_t v45 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

      uint64_t v37 = MEMORY[0x263F8EE78];
      goto LABEL_27;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x263F8EE78];
LABEL_33:
    uint64_t v47 = (uint64_t)v59;
    uint64_t v48 = (uint64_t)v57;
    if (*(void *)(v46 + 16))
    {
      unint64_t v49 = (int)v56;
      *Swift::String v57 = v53;
      if (v10) {
        unint64_t v49 = 0;
      }
      *(void *)(v48 + 8) = v46;
      *(unsigned char *)(v48 + 16) = 0;
      *(void *)(v48 + 24) = v49;
      *(_WORD *)(v48 + 32) = 0;
      swift_storeEnumTagMultiPayload();
      static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:)(v48, v47);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      uint64_t v50 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v51 = swift_allocObject();
      *(_OWORD *)(v51 + 16) = xmmword_22830EC60;
      outlined init with take of __RKEntityActionSpecification(v47, v51 + v50, type metadata accessor for __RKEntityActionSpecification);
      outlined destroy of __RKEntityActionSpecification(v48, type metadata accessor for __RKEntityActionSpecification);
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
    return v51;
  }
  return result;
}

uint64_t static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x270FA5388](started - 8);
  uint64_t v6 = &v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v33[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x270FA5388](v10 - 8);
  id v12 = &v33[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = &v33[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  id v20 = &v33[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v18);
  id v22 = &v33[-v21];
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)&v33[-v21], type metadata accessor for __RKEntityActionSpecification);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v39 = a2;
    uint64_t v23 = *((void *)v22 + 1);
    if (*(void *)(v23 + 16) == 1)
    {
      int v24 = v22[16];
      uint64_t v25 = *((void *)v22 + 3);
      int v26 = v22[32];
      int v27 = v22[33];
      if (v26)
      {
        uint64_t v28 = 1;
LABEL_7:
        char v30 = *v22;
        int v34 = v24;
        uint64_t v35 = v25;
        int v36 = v26;
        int v37 = v27;
        uint64_t v38 = v28;
        outlined init with copy of __RKEntityActionSpecification(v23 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), (uint64_t)v20, type metadata accessor for __RKEntityActionSpecification);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            outlined init with take of __RKEntityActionSpecification((uint64_t)v20, (uint64_t)v9, type metadata accessor for __RKEntityAudioActionArguments);
            v40[0] = v30;
            uint64_t v41 = v23;
            char v42 = v34;
            uint64_t v43 = v35;
            char v44 = v36;
            char v45 = v37;
            static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:audioActionArguments:)(a1, v38, (uint64_t)v9, v39);
            unint64_t v31 = type metadata accessor for __RKEntityAudioActionArguments;
            uint64_t v32 = (uint64_t)v9;
            goto LABEL_14;
          case 0xAu:
            outlined init with take of __RKEntityActionSpecification((uint64_t)v20, (uint64_t)v6, type metadata accessor for __RKEntityStartAnimateActionArguments);
            v40[0] = v30;
            uint64_t v41 = v23;
            char v42 = v34;
            uint64_t v43 = v35;
            char v44 = v36;
            char v45 = v37;
            static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:startAnimateActionArguments:)(v38, (uint64_t)v6, v39);
            unint64_t v31 = type metadata accessor for __RKEntityStartAnimateActionArguments;
            uint64_t v32 = (uint64_t)v6;
            goto LABEL_14;
          case 0x10u:
            outlined init with take of __RKEntityActionSpecification((uint64_t)v20, (uint64_t)v12, type metadata accessor for __RKEntityOrbitEntityActionArguments);
            v40[0] = v30;
            uint64_t v41 = v23;
            char v42 = v34;
            uint64_t v43 = v35;
            char v44 = v36;
            char v45 = v37;
            static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:orbitActionArguments:)(v40, v38, (uint64_t)v12, v39);
            unint64_t v31 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
            uint64_t v32 = (uint64_t)v12;
            goto LABEL_14;
          case 0x13u:
            outlined init with take of __RKEntityActionSpecification((uint64_t)v20, (uint64_t)v15, type metadata accessor for __RKEntitySpinActionArguments);
            v40[0] = v30;
            uint64_t v41 = v23;
            char v42 = v34;
            uint64_t v43 = v35;
            char v44 = v36;
            char v45 = v37;
            static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:spinActionArguments:)(v40, v38, (uint64_t)v15, v39);
            unint64_t v31 = type metadata accessor for __RKEntitySpinActionArguments;
            uint64_t v32 = (uint64_t)v15;
LABEL_14:
            outlined destroy of __RKEntityActionSpecification(v32, v31);
            return swift_bridgeObjectRelease();
          default:
            swift_bridgeObjectRelease();
            outlined init with copy of __RKEntityActionSpecification(a1, v39, type metadata accessor for __RKEntityActionSpecification);
            return outlined destroy of __RKEntityActionSpecification((uint64_t)v20, type metadata accessor for __RKEntityActionSpecification);
        }
      }
      uint64_t v28 = *((void *)v22 + 3);
      if (v25 >= 1) {
        goto LABEL_7;
      }
    }
    outlined init with copy of __RKEntityActionSpecification(a1, v39, type metadata accessor for __RKEntityActionSpecification);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v22, type metadata accessor for __RKEntityActionSpecification);
    return outlined init with copy of __RKEntityActionSpecification(a1, a2, type metadata accessor for __RKEntityActionSpecification);
  }
}

uint64_t static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:spinActionArguments:)@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for __RKEntitySpinActionArguments(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a2)
  {
    id v12 = (unsigned int *)(a3 + *(int *)(v9 + 20));
    uint64_t v13 = *v12;
    uint64_t v14 = (unsigned int *)(a3 + *(int *)(v9 + 24));
    uint64_t v15 = *v14;
    LOBYTE(v14) = *((unsigned char *)v14 + 4);
    unsigned __int8 v34 = *((unsigned char *)v12 + 4);
    char v33 = (char)v14;
    float v16 = specialized static __RKEntityActionSpecification.calculateMaximumMultiplier(lhs:rhs:)(v13 | ((unint64_t)v34 << 32), v15 | ((unint64_t)v14 << 32));
    if (v16 >= (float)a2)
    {
      float v16 = (float)a2;
    }
    else if ((~LODWORD(v16) & 0x7F800000) == 0 && (LODWORD(v16) & 0x7FFFFF) != 0)
    {
      float v16 = (float)a2;
    }
    static __RKEntityActionSpecification.copySpinActionArguments(_:multiplier:)(a3, a4, v16);
    type metadata accessor for __RKEntityActionSpecification(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    int v17 = a1[32];
    uint64_t v18 = *((void *)a1 + 3);
    char v19 = a1[16];
    char v20 = *a1;
    uint64_t v21 = (unsigned int *)(a3 + *(int *)(v9 + 20));
    uint64_t v22 = *v21;
    uint64_t v23 = (unsigned int *)(a3 + *(int *)(v9 + 24));
    uint64_t v24 = *v23;
    LOBYTE(v23) = *((unsigned char *)v23 + 4);
    unsigned __int8 v32 = *((unsigned char *)v21 + 4);
    v31[0] = (_BYTE)v23;
    float v25 = specialized static __RKEntityActionSpecification.calculateMaximumMultiplier(lhs:rhs:)(v22 | ((unint64_t)v32 << 32), v24 | ((unint64_t)v23 << 32));
    static __RKEntityActionSpecification.copySpinActionArguments(_:multiplier:)(a3, (uint64_t)v11, v25);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v26 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
    unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_22830EC60;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v11, v28 + v27, type metadata accessor for __RKEntitySpinActionArguments);
    swift_storeEnumTagMultiPayload();
    outlined destroy of __RKEntityActionSpecification((uint64_t)v11, type metadata accessor for __RKEntitySpinActionArguments);
    *(unsigned char *)a4 = v20;
    if (v17) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v18;
    }
    *(void *)(a4 + 8) = v28;
    *(unsigned char *)(a4 + 16) = v19 & 1;
    *(void *)(a4 + 24) = v29;
    *(_WORD *)(a4 + 32) = 0;
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:orbitActionArguments:)@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a2)
  {
    id v12 = (unsigned int *)(a3 + *(int *)(v9 + 24));
    uint64_t v13 = *v12;
    uint64_t v14 = (unsigned int *)(a3 + *(int *)(v9 + 28));
    uint64_t v15 = *v14;
    LOBYTE(v14) = *((unsigned char *)v14 + 4);
    unsigned __int8 v34 = *((unsigned char *)v12 + 4);
    char v33 = (char)v14;
    float v16 = specialized static __RKEntityActionSpecification.calculateMaximumMultiplier(lhs:rhs:)(v13 | ((unint64_t)v34 << 32), v15 | ((unint64_t)v14 << 32));
    if (v16 >= (float)a2)
    {
      float v16 = (float)a2;
    }
    else if ((~LODWORD(v16) & 0x7F800000) == 0 && (LODWORD(v16) & 0x7FFFFF) != 0)
    {
      float v16 = (float)a2;
    }
    static __RKEntityActionSpecification.copyOrbitActionArguments(_:multiplier:)(a3, a4, v16);
    type metadata accessor for __RKEntityActionSpecification(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    int v17 = a1[32];
    uint64_t v18 = *((void *)a1 + 3);
    char v19 = a1[16];
    char v20 = *a1;
    uint64_t v21 = (unsigned int *)(a3 + *(int *)(v9 + 24));
    uint64_t v22 = *v21;
    uint64_t v23 = (unsigned int *)(a3 + *(int *)(v9 + 28));
    uint64_t v24 = *v23;
    LOBYTE(v23) = *((unsigned char *)v23 + 4);
    unsigned __int8 v32 = *((unsigned char *)v21 + 4);
    v31[0] = (_BYTE)v23;
    float v25 = specialized static __RKEntityActionSpecification.calculateMaximumMultiplier(lhs:rhs:)(v22 | ((unint64_t)v32 << 32), v24 | ((unint64_t)v23 << 32));
    static __RKEntityActionSpecification.copyOrbitActionArguments(_:multiplier:)(a3, (uint64_t)v11, v25);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v26 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
    unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_22830EC60;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v11, v28 + v27, type metadata accessor for __RKEntityOrbitEntityActionArguments);
    swift_storeEnumTagMultiPayload();
    outlined destroy of __RKEntityActionSpecification((uint64_t)v11, type metadata accessor for __RKEntityOrbitEntityActionArguments);
    *(unsigned char *)a4 = v20;
    if (v17) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v18;
    }
    *(void *)(a4 + 8) = v28;
    *(unsigned char *)(a4 + 16) = v19 & 1;
    *(void *)(a4 + 24) = v29;
    *(_WORD *)(a4 + 32) = 0;
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:audioActionArguments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >= 1) {
    return outlined init with copy of __RKEntityActionSpecification(a1, a4, type metadata accessor for __RKEntityActionSpecification);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  uint64_t v13 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
  uint64_t v14 = v13;
  uint64_t v15 = v13[6];
  float v16 = (uint64_t *)(a3 + v13[5]);
  uint64_t v17 = *v16;
  uint64_t v35 = v16[1];
  uint64_t v36 = v17;
  int v18 = *(unsigned __int8 *)(a3 + v15);
  if (v18 == 3) {
    int v18 = 0;
  }
  int v34 = v18;
  uint64_t v20 = v13[9];
  uint64_t v19 = v13[10];
  if (*(unsigned char *)(a3 + v20) == 3) {
    int v21 = 0;
  }
  else {
    int v21 = *(unsigned __int8 *)(a3 + v20);
  }
  uint64_t v22 = v13[7];
  uint64_t v33 = v13[8];
  uint64_t v23 = *(void *)(a3 + v22);
  int v24 = *(unsigned __int8 *)(a3 + v19);
  int v25 = *(unsigned __int8 *)(a3 + v22 + 8);
  if (v24 == 3) {
    int v24 = 1;
  }
  int v31 = v21;
  int v32 = v24;
  uint64_t v26 = a4 + v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  unint64_t v27 = (void *)(a4 + v14[5]);
  uint64_t v28 = v35;
  *unint64_t v27 = v36;
  v27[1] = v28;
  *(unsigned char *)(a4 + v15) = v34;
  *(unsigned char *)(a4 + v20) = v31;
  uint64_t v29 = 0x3FF0000000000000;
  if (!v25) {
    uint64_t v29 = v23;
  }
  *(void *)uint64_t v26 = v29;
  *(unsigned char *)(v26 + 8) = 0;
  *(unsigned char *)(a4 + v33) = 1;
  *(unsigned char *)(a4 + v14[10]) = v32;
  type metadata accessor for __RKEntityActionSpecification(0);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:startAnimateActionArguments:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x270FA5388](started);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  uint64_t v14 = *(void *)(a2 + started[5]);
  uint64_t v15 = v14 * a1;
  if ((unsigned __int128)(v14 * (__int128)a1) >> 64 == (v14 * a1) >> 63)
  {
    int v16 = *(unsigned __int8 *)(a2 + started[6]);
    uint64_t v17 = *(void *)(a2 + started[7]);
    uint64_t v18 = *(void *)(a2 + started[8]);
    char v19 = *(unsigned char *)(a2 + started[10]);
    int v20 = *(_DWORD *)(a2 + started[11]);
    int v24 = *(unsigned __int8 *)(a2 + started[9]);
    int v25 = v16;
    uint64_t v21 = (uint64_t)&v8[started[14]];
    uint64_t v26 = a3;
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v22(v21, 1, 1, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v8, v12, v9);
    *(void *)&v8[started[5]] = v15;
    v8[started[6]] = v25;
    v8[started[10]] = v19;
    *(void *)&v8[started[8]] = v18;
    *(void *)&v8[started[7]] = v17;
    *(_DWORD *)&v8[started[11]] = v20;
    v8[started[9]] = v24;
    v8[started[12]] = 0;
    uint64_t v23 = &v8[started[13]];
    *(void *)uint64_t v23 = 0x3FF0000000000000;
    unsigned char v23[8] = 0;
    outlined destroy of UUID?(v21);
    v22(v21, 1, 1, v9);
    outlined init with take of __RKEntityActionSpecification((uint64_t)v8, v26, type metadata accessor for __RKEntityStartAnimateActionArguments);
    type metadata accessor for __RKEntityActionSpecification(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static __RKEntityActionSpecification.copySpinActionArguments(_:multiplier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v10 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
  uint64_t v11 = a1 + v10[5];
  float v12 = *(float *)v11;
  int v13 = *(unsigned __int8 *)(v11 + 4);
  uint64_t v14 = a1 + v10[6];
  float v15 = *(float *)v14;
  int v16 = *(unsigned __int8 *)(v14 + 4);
  char v17 = *(unsigned char *)(a1 + v10[7]);
  uint64_t v18 = a1 + v10[8];
  if (*(unsigned char *)(v18 + 16))
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0x3F80000000000000;
  }
  else
  {
    uint64_t v20 = *(void *)v18;
    uint64_t v19 = *(void *)(v18 + 8);
  }
  char v21 = v17 & 1;
  if (v16) {
    float v15 = 1.0;
  }
  if (v13) {
    float v12 = 1.0;
  }
  float v22 = v12 * a3;
  float v23 = v15 * a3;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v9, v6);
  if (v22 < 0.0) {
    float v25 = 1.0;
  }
  else {
    float v25 = v22;
  }
  uint64_t v26 = a2 + v10[5];
  *(float *)uint64_t v26 = v25;
  *(unsigned char *)(v26 + 4) = 0;
  if (v23 < 0.0) {
    float v27 = 1.0;
  }
  else {
    float v27 = v23;
  }
  uint64_t v28 = v10[7];
  uint64_t v29 = a2 + v10[6];
  uint64_t v30 = a2 + v10[8];
  *(float *)uint64_t v29 = v27;
  *(unsigned char *)(v29 + 4) = 0;
  *(unsigned char *)(a2 + v28) = v21;
  *(void *)uint64_t v30 = v20;
  *(void *)(v30 + 8) = v19;
  *(unsigned char *)(v30 + 16) = 0;
  return result;
}

uint64_t static __RKEntityActionSpecification.copyOrbitActionArguments(_:multiplier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  float v12 = (char *)&v40 - v11;
  int v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v40 - v11, a1, v6);
  uint64_t v14 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  v13(v10, a1 + v14[5], v6);
  uint64_t v15 = a1 + v14[6];
  float v16 = *(float *)v15;
  int v17 = *(unsigned __int8 *)(v15 + 4);
  uint64_t v18 = a1 + v14[7];
  float v19 = *(float *)v18;
  int v20 = *(unsigned __int8 *)(v18 + 4);
  uint64_t v21 = a1 + v14[8];
  if (*(unsigned char *)(v21 + 16))
  {
    uint64_t v41 = 0;
    uint64_t v22 = 0x3F80000000000000;
  }
  else
  {
    uint64_t v22 = *(void *)v21;
    uint64_t v41 = *(void *)(v21 + 8);
  }
  if (v20) {
    float v19 = 1.0;
  }
  if (v17) {
    float v16 = 1.0;
  }
  char v23 = *(unsigned char *)(a1 + v14[10]);
  char v24 = *(unsigned char *)(a1 + v14[9]) & 1;
  char v25 = v23 & 1;
  float v26 = v16 * a3;
  float v27 = v19 * a3;
  uint64_t v28 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v28(a2, v12, v6);
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(a2 + v14[5], v10, v6);
  if (v26 < 0.0) {
    float v30 = 1.0;
  }
  else {
    float v30 = v26;
  }
  uint64_t v31 = a2 + v14[6];
  uint64_t v32 = a2 + v14[7];
  uint64_t v33 = v14[9];
  uint64_t v34 = a2 + v14[8];
  uint64_t v35 = v14[10];
  uint64_t v36 = v14[11];
  uint64_t v37 = a2 + v14[12];
  uint64_t v38 = a2 + v14[13];
  *(float *)uint64_t v31 = v30;
  *(unsigned char *)(v31 + 4) = 0;
  *(float *)uint64_t v32 = v27;
  *(unsigned char *)(v32 + 4) = 0;
  uint64_t v39 = v41;
  *(void *)uint64_t v34 = v22;
  *(void *)(v34 + 8) = v39;
  *(unsigned char *)(v34 + 16) = 0;
  *(unsigned char *)(a2 + v33) = v24;
  *(unsigned char *)(a2 + v35) = v25;
  *(unsigned char *)(a2 + v36) = 0;
  *(_DWORD *)uint64_t v37 = 0;
  *(unsigned char *)(v37 + 4) = 0;
  *(_DWORD *)uint64_t v38 = 0;
  *(unsigned char *)(v38 + 4) = 0;
  return result;
}

uint64_t __RKEntityAudioActionType.init(decodeContext:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(1701869940, 0xE400000000000000, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    uint64_t v18 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v18);
    uint64_t v17 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v17);
    uint64_t v16 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v16);
  }
  else if (v7 && (__RKEntityAudioActionType.init(rawValue:)(*(Swift::String *)&v6), v9 != 3))
  {

    swift_release();
    uint64_t v12 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v12);
    uint64_t v11 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v11);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t result = outlined release of [String : String]((uint64_t)&v10);
    *a2 = v9;
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    uint64_t v15 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v15);
    uint64_t v14 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v14);
    uint64_t v13 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v13);
  }
  return result;
}

uint64_t __RKAudioSpatialModeSelection.init(decodeContext:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x646F4D6C61727561, 0xE900000000000065, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    uint64_t v28 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v28);
    uint64_t v27 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v27);
    uint64_t v26 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v26);
  }
  char v9 = v7;
  if (!v7) {
    goto LABEL_8;
  }
  v10._uint64_t countAndFlagsBits = (uint64_t)v6;
  v10._unint64_t object = v9;
  Swift::Int v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKAudioSpatialModeSelectionUSD.init(rawValue:), v10);
  swift_bridgeObjectRelease();
  if (!v11)
  {

    swift_release();
    uint64_t v16 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v16);
    uint64_t v15 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v15);
    char v12 = 0;
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v13 = &v14;
    goto LABEL_11;
  }
  if (v11 == 1)
  {

    swift_release();
    uint64_t v19 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v19);
    uint64_t v18 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v18);
    uint64_t v17 = *(void *)(a1 + 40);
    char v12 = 2;
    uint64_t v13 = &v17;
    goto LABEL_11;
  }
  if (v11 != 2)
  {
LABEL_8:
    lazy protocol witness table accessor for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    uint64_t v25 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v25);
    uint64_t v24 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v24);
    uint64_t v23 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v23);
  }

  swift_release();
  uint64_t v22 = *(void *)(a1 + 24);
  outlined release of [String : String]((uint64_t)&v22);
  uint64_t v21 = *(void *)(a1 + 32);
  outlined release of [String : String]((uint64_t)&v21);
  uint64_t v20 = *(void *)(a1 + 40);
  char v12 = 1;
  uint64_t v13 = &v20;
LABEL_11:
  uint64_t result = outlined release of [String : String]((uint64_t)v13);
  *a2 = v12;
  return result;
}

uint64_t __RKEntityEmphasisAnimationType.init(decodeContext:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x79546E6F69746F6DLL, 0xEA00000000006570, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    uint64_t v18 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v18);
    uint64_t v17 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v17);
    uint64_t v16 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v16);
  }
  else if (v7 && (__RKEntityEmphasisAnimationType.init(rawValue:)(*(Swift::String *)&v6), v9 != 8))
  {

    swift_release();
    uint64_t v12 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v12);
    uint64_t v11 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v11);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t result = outlined release of [String : String]((uint64_t)&v10);
    *a2 = v9;
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    uint64_t v15 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v15);
    uint64_t v14 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v14);
    uint64_t v13 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v13);
  }
  return result;
}

uint64_t __RKEntityActionAnimationStyle.init(decodeContext:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x656C797473, 0xE500000000000000, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    uint64_t v18 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v18);
    uint64_t v17 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v17);
    uint64_t v16 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v16);
  }
  else if (v7 && (__RKEntityActionAnimationStyle.init(rawValue:)(*(Swift::String *)&v6), v9 != 3))
  {

    swift_release();
    uint64_t v12 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v12);
    uint64_t v11 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v11);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t result = outlined release of [String : String]((uint64_t)&v10);
    *a2 = v9;
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    uint64_t v15 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v15);
    uint64_t v14 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v14);
    uint64_t v13 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v13);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError);
  }
  return result;
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateNotificationActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a3;
  uint64_t v41 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x270FA5388](v37);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v34 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v34 - v19;
  uint64_t v36 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v38 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v20, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v6);
  uint64_t v40 = a4;
  swift_bridgeObjectRetain();
  unint64_t v35 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  outlined init with copy of UUID?((uint64_t)v20, (uint64_t)v18);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v23(v18, 1, v6) == 1)
  {
    UUID.init(uuidString:)();
    uint64_t result = v23(v15, 1, v6);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v25(v9, v15, v6);
    outlined destroy of UUID?((uint64_t)v18);
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v25(v9, v18, v6);
  }
  v25(v11, v9, v6);
  uint64_t v26 = v37;
  uint64_t v27 = &v11[*(int *)(v37 + 20)];
  uint64_t v28 = v40;
  *(void *)uint64_t v27 = v39;
  *((void *)v27 + 1) = v28;
  outlined destroy of UUID?((uint64_t)v20);
  *(void *)&v11[*(int *)(v26 + 24)] = v35;
  outlined init with take of __RKEntityActionSpecification((uint64_t)v11, (uint64_t)v22, type metadata accessor for __RKEntityCustomActionArguments);
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = v41;
  unint64_t v30 = *v41;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v29 = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1, v30);
    *uint64_t v29 = v30;
  }
  unint64_t v33 = *(void *)(v30 + 16);
  unint64_t v32 = *(void *)(v30 + 24);
  if (v33 >= v32 >> 1)
  {
    unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v30);
    *uint64_t v29 = v30;
  }
  *(void *)(v30 + 16) = v33 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v22, v30+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v33, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, uint64_t a3, int a4, float a5, float a6, __n128 a7)
{
  int v42 = a4;
  __n128 v41 = a7;
  uint64_t v40 = a2;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v18 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v43 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v21(v17, a1, v11);
  v21(v15, a3, v11);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v22(v20, v17, v11);
  uint64_t v23 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  v22(&v20[v23[5]], v15, v11);
  uint64_t v24 = v40;
  float v25 = 1.0;
  if (a5 >= 0.0) {
    float v25 = a5;
  }
  uint64_t v26 = &v20[v23[6]];
  uint64_t v27 = &v20[v23[7]];
  uint64_t v28 = v23[9];
  uint64_t v29 = (__n128 *)&v20[v23[8]];
  uint64_t v30 = v23[10];
  uint64_t v31 = v23[11];
  unint64_t v32 = &v20[v23[12]];
  unint64_t v33 = &v20[v23[13]];
  *(float *)uint64_t v26 = v25;
  v26[4] = 0;
  *(float *)uint64_t v27 = a6;
  v27[4] = 0;
  *uint64_t v29 = v41;
  v29[1].n128_u8[0] = 0;
  v20[v28] = v42;
  v20[v30] = 0;
  v20[v31] = 0;
  *(_DWORD *)unint64_t v32 = 0;
  v32[4] = 0;
  *(_DWORD *)unint64_t v33 = 0;
  unsigned char v33[4] = 0;
  swift_storeEnumTagMultiPayload();
  unint64_t v34 = *v24;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v24 = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1, v34);
    *uint64_t v24 = v34;
  }
  unint64_t v37 = *(void *)(v34 + 16);
  unint64_t v36 = *(void *)(v34 + 24);
  if (v37 >= v36 >> 1)
  {
    unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v34);
    *uint64_t v24 = v34;
  }
  *(void *)(v34 + 16) = v37 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v20, v34+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v37, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateSpinActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, float a3, float a4, __n128 a5)
{
  __n128 v28 = a5;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v12, v9);
  if (a3 < 0.0) {
    a3 = 1.0;
  }
  uint64_t v17 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
  uint64_t v18 = &v16[v17[5]];
  *(float *)uint64_t v18 = a3;
  v18[4] = 0;
  if (a4 < 0.0) {
    float v19 = 1.0;
  }
  else {
    float v19 = a4;
  }
  uint64_t v20 = v17[7];
  uint64_t v21 = &v16[v17[6]];
  uint64_t v22 = (__n128 *)&v16[v17[8]];
  *(float *)uint64_t v21 = v19;
  void v21[4] = 0;
  v16[v20] = 0;
  *uint64_t v22 = v28;
  v22[1].n128_u8[0] = 0;
  swift_storeEnumTagMultiPayload();
  unint64_t v23 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1, v23);
    *a2 = v23;
  }
  unint64_t v26 = *(void *)(v23 + 16);
  unint64_t v25 = *(void *)(v23 + 24);
  if (v26 >= v25 >> 1)
  {
    unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v23);
    *a2 = v23;
  }
  *(void *)(v23 + 16) = v26 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v16, v23+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v26, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t __RKEntityActionMultiplePerformBehavior.init(decodeContext:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0xD000000000000018, 0x800000022834EDB0, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    uint64_t v28 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v28);
    uint64_t v27 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v27);
    uint64_t v26 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v26);
  }
  uint64_t v9 = v7;
  if (!v7) {
    goto LABEL_8;
  }
  v10._uint64_t countAndFlagsBits = (uint64_t)v6;
  v10._unint64_t object = v9;
  Swift::Int v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionMultiplePerformBehaviorUSD.init(rawValue:), v10);
  swift_bridgeObjectRelease();
  if (!v11)
  {

    swift_release();
    uint64_t v16 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v16);
    uint64_t v15 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v15);
    uint64_t v14 = *(void *)(a1 + 40);
    char v12 = 1;
    uint64_t v13 = &v14;
    goto LABEL_11;
  }
  if (v11 == 1)
  {

    swift_release();
    uint64_t v19 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v19);
    uint64_t v18 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v18);
    char v12 = 0;
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v13 = &v17;
    goto LABEL_11;
  }
  if (v11 != 2)
  {
LABEL_8:
    lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    uint64_t v25 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v25);
    uint64_t v24 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v24);
    uint64_t v23 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v23);
  }

  swift_release();
  uint64_t v22 = *(void *)(a1 + 24);
  outlined release of [String : String]((uint64_t)&v22);
  uint64_t v21 = *(void *)(a1 + 32);
  outlined release of [String : String]((uint64_t)&v21);
  uint64_t v20 = *(void *)(a1 + 40);
  char v12 = 2;
  uint64_t v13 = &v20;
LABEL_11:
  uint64_t result = outlined release of [String : String]((uint64_t)v13);
  *a2 = v12;
  return result;
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateStartAnimationActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, int a3, int a4, int a5, double a6, double a7, float a8)
{
  int v34 = a4;
  int v35 = a5;
  int v33 = a3;
  unint64_t v36 = a2;
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  uint64_t v13 = (int *)(started - 8);
  MEMORY[0x270FA5388](started);
  uint64_t v15 = &v32[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = &v32[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v37 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = &v32[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v16);
  uint64_t v23 = (uint64_t)&v15[v13[16]];
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v24(v23, 1, 1, v16);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 32))(v15, v19, v16);
  *(void *)&v15[v13[7]] = 1;
  v15[v13[8]] = v33;
  v15[v13[12]] = v34;
  *(double *)&v15[v13[10]] = a7;
  *(double *)&v15[v13[9]] = a6;
  *(float *)&v15[v13[13]] = a8;
  v15[v13[11]] = v35;
  v15[v13[14]] = 0;
  uint64_t v25 = &v15[v13[15]];
  *(void *)uint64_t v25 = 0x3FF0000000000000;
  v25[8] = 0;
  outlined destroy of UUID?(v23);
  v24(v23, 1, 1, v16);
  uint64_t v26 = v36;
  outlined init with take of __RKEntityActionSpecification((uint64_t)v15, (uint64_t)v22, type metadata accessor for __RKEntityStartAnimateActionArguments);
  swift_storeEnumTagMultiPayload();
  unint64_t v27 = *v26;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v26 = v27;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1, v27);
    *uint64_t v26 = v27;
  }
  unint64_t v30 = *(void *)(v27 + 16);
  unint64_t v29 = *(void *)(v27 + 24);
  if (v30 >= v29 >> 1)
  {
    unint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v27);
    *uint64_t v26 = v27;
  }
  *(void *)(v27 + 16) = v30 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v22, v27+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v30, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t __RKEntityGroupActionOrder.init(decodeContext:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, unint64_t, uint64_t, void)@<X1>, Swift::OpaquePointer a3@<X2>, void (*a4)(uint64_t)@<X3>, char *a5@<X8>)
{
  Swift::String v10 = *(void **)a1;
  uint64_t v11 = a2(1701869940, 0xE400000000000000, 1, *(void *)a1);
  if (v5)
  {

    swift_release();
    uint64_t v30 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v30);
    uint64_t v29 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v29);
    uint64_t v28 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v28);
  }
  uint64_t v14 = v12;
  if (!v12) {
    goto LABEL_7;
  }
  v15._uint64_t countAndFlagsBits = v11;
  v15._unint64_t object = v14;
  Swift::Int v16 = _findStringSwitchCase(cases:string:)(a3, v15);
  uint64_t v11 = swift_bridgeObjectRelease();
  if (!v16)
  {

    swift_release();
    uint64_t v21 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v21);
    uint64_t v20 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v20);
    uint64_t v19 = *(void *)(a1 + 40);
    char v17 = 1;
    uint64_t v18 = &v19;
    goto LABEL_9;
  }
  if (v16 != 1)
  {
LABEL_7:
    a4(v11);
    swift_allocError();
    swift_willThrow();

    swift_release();
    uint64_t v27 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v27);
    uint64_t v26 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v26);
    uint64_t v25 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v25);
  }

  swift_release();
  uint64_t v24 = *(void *)(a1 + 24);
  outlined release of [String : String]((uint64_t)&v24);
  uint64_t v23 = *(void *)(a1 + 32);
  outlined release of [String : String]((uint64_t)&v23);
  char v17 = 0;
  uint64_t v22 = *(void *)(a1 + 40);
  uint64_t v18 = &v22;
LABEL_9:
  uint64_t result = outlined release of [String : String]((uint64_t)v18);
  *a5 = v17;
  return result;
}

uint64_t __RKEntityMoveEase.init(decodeContext:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void **)a1;
  v6._uint64_t countAndFlagsBits = (uint64_t)specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6570795465736165, 0xE800000000000000, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    uint64_t v19 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v19);
    uint64_t v18 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v18);
    uint64_t v17 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v17);
  }
  else if (v6._object && (char v8 = specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(v6), v8 != 4))
  {
    char v9 = v8;

    swift_release();
    uint64_t v13 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v13);
    uint64_t v12 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v12);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t result = outlined release of [String : String]((uint64_t)&v11);
    if ((v9 - 1) >= 3u) {
      char v10 = 0;
    }
    else {
      char v10 = 6;
    }
    *a2 = v10;
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    uint64_t v16 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v16);
    uint64_t v15 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v15);
    uint64_t v14 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v14);
  }
  return result;
}

uint64_t __RKEntityMoveEaseType.init(decodeContext:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void **)a1;
  v6._uint64_t countAndFlagsBits = (uint64_t)specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6570795465736165, 0xE800000000000000, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    uint64_t v17 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v17);
    uint64_t v16 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v16);
    uint64_t v15 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v15);
  }
  else if (v6._object && (int v8 = specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(v6), v8 != 4))
  {

    swift_release();
    uint64_t v11 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v11);
    uint64_t v10 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v10);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t result = outlined release of [String : String]((uint64_t)&v9);
    *a2 = 0x2010000u >> (8 * v8);
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    uint64_t v14 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v14);
    uint64_t v13 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v13);
    uint64_t v12 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v12);
  }
  return result;
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateTransformActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, char a3, int a4, int a5, uint64_t a6, __n128 a7, __n128 a8, __n128 a9, float a10)
{
  uint64_t v39 = a6;
  uint64_t v40 = a2;
  int v37 = a4;
  int v38 = a5;
  __n128 v34 = a9;
  __n128 v35 = a8;
  __n128 v36 = a7;
  char v12 = a3 & 1;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v41 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v16);
  __n128 v23 = v34;
  uint64_t v25 = v35.n128_i64[1];
  uint64_t v24 = v35.n128_u64[0];
  uint64_t v26 = v36.n128_u32[0];
  char v45 = v12;
  char v44 = v37;
  char v43 = v38;
  outlined init with copy of UUID?(v39, (uint64_t)v15);
  char v42 = 0;
  uint64_t v27 = v26;
  uint64_t v28 = v40;
  __RKEntityTransformActionArguments.init(target:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:relativeToEntity:)((uint64_t)v19, v23.n128_i64[0], v23.n128_i64[1], 0, v24, v25, 0, v27, (uint64_t)v22, a10, 0.0, 0.0, &v45, &v44, &v43, 0, (uint64_t)v15);
  swift_storeEnumTagMultiPayload();
  unint64_t v29 = *v28;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v28 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1, v29);
    *uint64_t v28 = v29;
  }
  unint64_t v32 = *(void *)(v29 + 16);
  unint64_t v31 = *(void *)(v29 + 24);
  if (v32 >= v31 >> 1)
  {
    unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v29);
    *uint64_t v28 = v29;
  }
  *(void *)(v29 + 16) = v32 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v22, v29+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v32, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, int a3, uint64_t a4)
{
  int v32 = a3;
  int v33 = a2;
  uint64_t v30 = a1;
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  Swift::String v6 = (int *)(started - 8);
  MEMORY[0x270FA5388](started);
  int v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v34 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v18(v15, v30, v12);
  v18(v11, a4, v12);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v19(v11, 0, 1, v12);
  uint64_t v20 = (uint64_t)&v8[v6[16]];
  v19((char *)v20, 1, 1, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v8, v15, v12);
  *(void *)&v8[v6[7]] = 1;
  v8[v6[8]] = v32;
  v8[v6[12]] = 0;
  *(void *)&v8[v6[10]] = 0;
  *(void *)&v8[v6[9]] = 0;
  *(_DWORD *)&v8[v6[13]] = 1065353216;
  v8[v6[11]] = 0;
  v8[v6[14]] = 0;
  uint64_t v21 = v6[15];
  uint64_t v22 = v33;
  __n128 v23 = &v8[v21];
  *(void *)__n128 v23 = 0x3FF0000000000000;
  unsigned char v23[8] = 0;
  outlined assign with take of UUID?((uint64_t)v11, v20);
  outlined init with take of __RKEntityActionSpecification((uint64_t)v8, (uint64_t)v17, type metadata accessor for __RKEntityStartAnimateActionArguments);
  swift_storeEnumTagMultiPayload();
  unint64_t v24 = *v22;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v22 = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1, v24);
    *uint64_t v22 = v24;
  }
  unint64_t v27 = *(void *)(v24 + 16);
  unint64_t v26 = *(void *)(v24 + 24);
  if (v27 >= v26 >> 1)
  {
    unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v24);
    *uint64_t v22 = v24;
  }
  *(void *)(v24 + 16) = v27 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v17, v24+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v27, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateVisibilityActionSpecifications(decodeContext:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, unint64_t *a5, int a6, int a7, int a8, float a9, float a10)
{
  int v58 = a7;
  int v59 = a8;
  int v57 = a6;
  Swift::String v60 = a5;
  uint64_t v56 = a1;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v55 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  unint64_t v24 = (char *)&v54 - v23;
  if (a2 == 2003789939 && a3 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v25 = *a4;
    unint64_t v26 = a4[1];
    unint64_t v27 = a4[3];
    uint64_t v28 = a4[5];
    Swift::String v66 = a4[4];
    uint64_t v67 = v27;
    Swift::String v65 = v28;
    id v29 = v25;
    id v30 = v26;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v67);
    outlined retain of [String : String]((uint64_t)&v66);
    outlined retain of [String : String]((uint64_t)&v65);
    __RKEntityShowActionBuildInAnimationType.init(decodeContext:)((uint64_t)a4, &v64);
    char v31 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v56, v15);
    char v64 = v57;
    v63[0] = v58;
    char v62 = v59;
    char v61 = v31;
    __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)((uint64_t)v18, &v64, v63, 1, 0, &v62, &v61, (uint64_t)v24, a9, a10, 1.0, 0.0, 0.0);
    swift_storeEnumTagMultiPayload();
    int v32 = v60;
    unint64_t v33 = *v60;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *int v32 = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v33 + 16) + 1, 1, v33);
      *int v32 = v33;
    }
    uint64_t v35 = v55;
    unint64_t v37 = *(void *)(v33 + 16);
    unint64_t v36 = *(void *)(v33 + 24);
    if (v37 >= v36 >> 1)
    {
      unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v33);
      *int v32 = v33;
    }
    *(void *)(v33 + 16) = v37 + 1;
    uint64_t v38 = v33
        + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
        + *(void *)(v35 + 72) * v37;
    uint64_t v39 = (uint64_t)v24;
    return outlined init with take of __RKEntityActionSpecification(v39, v38, type metadata accessor for __RKEntityActionSpecification);
  }
  if (a2 == 1701079400 && a3 == 0xE400000000000000
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    uint64_t v41 = *a4;
    char v42 = a4[1];
    char v43 = a4[3];
    char v44 = a4[5];
    Swift::String v66 = a4[4];
    uint64_t v67 = v43;
    Swift::String v65 = v44;
    id v45 = v41;
    id v46 = v42;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v67);
    outlined retain of [String : String]((uint64_t)&v66);
    outlined retain of [String : String]((uint64_t)&v65);
    __RKEntityHideActionBuildOutAnimationType.init(decodeContext:)((uint64_t)a4, &v64);
    char v47 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v56, v15);
    char v64 = v57;
    v63[0] = v58;
    char v62 = v59;
    char v61 = v47;
    __RKEntityHideActionArguments.init(target:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildOutAnimationType:)((uint64_t)v18, &v64, v63, 1, 0, &v62, &v61, (uint64_t)v22, a9, a10, 0.0, 0.0, 0.0);
    swift_storeEnumTagMultiPayload();
    uint64_t v48 = v60;
    unint64_t v49 = *v60;
    char v50 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v48 = v49;
    if ((v50 & 1) == 0)
    {
      unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v49 + 16) + 1, 1, v49);
      *uint64_t v48 = v49;
    }
    uint64_t v51 = v55;
    unint64_t v53 = *(void *)(v49 + 16);
    unint64_t v52 = *(void *)(v49 + 24);
    if (v53 >= v52 >> 1)
    {
      unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v49);
      *uint64_t v48 = v49;
    }
    *(void *)(v49 + 16) = v53 + 1;
    uint64_t v38 = v49
        + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))
        + *(void *)(v51 + 72) * v53;
    uint64_t v39 = (uint64_t)v22;
    return outlined init with take of __RKEntityActionSpecification(v39, v38, type metadata accessor for __RKEntityActionSpecification);
  }
  return result;
}

void __RKEntityShowActionBuildInAnimationType.init(decodeContext:)(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void **)a1;
  v6._uint64_t countAndFlagsBits = (uint64_t)specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x79546E6F69746F6DLL, 0xEA00000000006570, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    uint64_t v20 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v20);
    uint64_t v19 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v19);
    uint64_t v18 = *(void *)(a1 + 40);
    outlined release of [String : String]((uint64_t)&v18);

LABEL_3:
    *a2 = 0;
    return;
  }
  if (!v6._object)
  {

    swift_release();
    uint64_t v17 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v17);
    uint64_t v16 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v16);
    uint64_t v15 = *(void *)(a1 + 40);
    outlined release of [String : String]((uint64_t)&v15);
    goto LABEL_3;
  }
  char v7 = specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(v6);
  if (v7 == 10)
  {
    lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    uint64_t v14 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v14);
    uint64_t v13 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v13);
    uint64_t v12 = *(void *)(a1 + 40);
    outlined release of [String : String]((uint64_t)&v12);
  }
  else
  {
    char v8 = v7;

    swift_release();
    uint64_t v11 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v11);
    uint64_t v10 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v10);
    uint64_t v9 = *(void *)(a1 + 40);
    outlined release of [String : String]((uint64_t)&v9);
    *a2 = byte_22831FB5A[v8];
  }
}

uint64_t __RKEntityHideActionBuildOutAnimationType.init(decodeContext:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void **)a1;
  v6._uint64_t countAndFlagsBits = (uint64_t)specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x79546E6F69746F6DLL, 0xEA00000000006570, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    uint64_t v18 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v18);
    uint64_t v17 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v17);
    uint64_t v16 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v16);
  }
  else if (v6._object && (char v8 = specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(v6), v8 != 10))
  {
    char v9 = v8;

    swift_release();
    uint64_t v12 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v12);
    uint64_t v11 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v11);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t result = outlined release of [String : String]((uint64_t)&v10);
    *a2 = byte_22831FB5A[v9];
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    uint64_t v15 = *(void *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v15);
    uint64_t v14 = *(void *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v14);
    uint64_t v13 = *(void *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v13);
  }
  return result;
}

void specialized closure #1 in static __RKEntityActionSpecification.generateAudioActionSpecifications(decodeContext:)(uint64_t a1, void *a2, uint64_t a3, unint64_t *a4, int a5, int a6, double a7)
{
  int v56 = a5;
  int v57 = a6;
  uint64_t v12 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v58 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_msgSend(a2, sel_path);
  id v16 = objc_msgSend(v15, sel_stringValue);

  if (v16)
  {
    uint64_t v55 = a4;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    if (*(void *)(a3 + 16))
    {
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if (v21)
      {
        uint64_t v22 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v20);
        uint64_t v24 = *v22;
        uint64_t v23 = v22[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v25 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v14, a1, v25);
        unint64_t v26 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        uint64_t v27 = v26[8];
        uint64_t v28 = &v14[v26[7]];
        uint64_t v29 = v26[9];
        uint64_t v30 = v26[6];
        char v31 = &v14[v26[5]];
        *(void *)char v31 = v24;
        *((void *)v31 + 1) = v23;
        v14[v30] = v56;
        v14[v29] = v57;
        *(double *)uint64_t v28 = a7;
        unsigned char v28[8] = 0;
        v14[v27] = 0;
        v14[v26[10]] = 1;
        swift_storeEnumTagMultiPayload();
        int v32 = v55;
        unint64_t v33 = *v55;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *int v32 = v33;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v33 + 16) + 1, 1, v33);
          *int v32 = v33;
        }
        unint64_t v36 = *(void *)(v33 + 16);
        unint64_t v35 = *(void *)(v33 + 24);
        if (v36 >= v35 >> 1)
        {
          unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v33);
          *int v32 = v33;
        }
        *(void *)(v33 + 16) = v36 + 1;
        outlined init with take of __RKEntityActionSpecification((uint64_t)v14, v33+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(void *)(v58 + 72) * v36, type metadata accessor for __RKEntityActionSpecification);
        return;
      }
    }
    swift_bridgeObjectRelease();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_22831E350;
  id v38 = [a2 (SEL)0x264838E18];
  id v39 = objc_msgSend(v38, sel_stringValue);

  if (v39)
  {
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v42 = v41;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v42 = 0;
  }
  uint64_t v43 = MEMORY[0x263F8D310];
  *(void *)(v37 + 56) = MEMORY[0x263F8D310];
  unint64_t v44 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v37 + 64) = v44;
  if (v42) {
    uint64_t v45 = v40;
  }
  else {
    uint64_t v45 = 0x296C6C756E28;
  }
  unint64_t v46 = 0xE600000000000000;
  if (v42) {
    unint64_t v46 = v42;
  }
  *(void *)(v37 + 32) = v45;
  *(void *)(v37 + 40) = v46;
  id v47 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6F69647561, 0xE500000000000000, 1, a2);
  uint64_t v51 = v47;
  if (v47)
  {
    id v52 = [v47 (SEL)0x264838E18];

    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v54;

    uint64_t v48 = (uint64_t *)(v37 + 72);
    *(void *)(v37 + 96) = v43;
    *(void *)(v37 + 104) = v44;
    if (v49)
    {
      *uint64_t v48 = v53;
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v48 = (uint64_t *)(v37 + 72);
    *(void *)(v37 + 96) = v43;
    *(void *)(v37 + 104) = v44;
  }
  *uint64_t v48 = 0x296C6C756E28;
  unint64_t v49 = 0xE600000000000000;
LABEL_21:
  *(void *)(v37 + 80) = v49;
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v58 = static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  char v50 = (void *)v58;
}

unint64_t specialized static __RKEntityActionSpecification.generateAudioActionSpecifications(decodeContext:)(void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = (uint64_t)a1[2];
  uint64_t v4 = a1[3];
  Swift::String v6 = a1[5];
  uint64_t v27 = a1[4];
  uint64_t v28 = (uint64_t)v4;
  uint64_t v26 = (uint64_t)v6;
  id v7 = v2;
  id v8 = v3;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v28);
  outlined retain of [String : String]((uint64_t)&v27);
  outlined retain of [String : String]((uint64_t)&v26);
  __RKEntityAudioActionType.init(decodeContext:)((uint64_t)a1, v25);
  unsigned __int8 v9 = v25[0];
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(1852399975, 0xE400000000000000, 1, v7);
  double v11 = v10;
  id v12 = v7;
  id v13 = v8;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v28);
  outlined retain of [String : String]((uint64_t)&v27);
  outlined retain of [String : String]((uint64_t)&v26);
  __RKAudioSpatialModeSelection.init(decodeContext:)((uint64_t)a1, (char *)v25);
  uint64_t v15 = v28;
  uint64_t v16 = v26;
  unsigned __int8 v17 = v25[0];
  v25[0] = MEMORY[0x263F8EE78];
  id v18 = v12;
  id v19 = v13;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v28);
  outlined retain of [String : String]((uint64_t)&v27);
  outlined retain of [String : String]((uint64_t)&v26);
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, v18, v19, v5, v15, v18, v11, v16, v25, v9, v17);
  swift_release();

  outlined release of [String : String]((uint64_t)&v28);
  outlined release of [String : String]((uint64_t)&v27);
  outlined release of [String : String]((uint64_t)&v26);
  unint64_t v20 = v25[0];
  if (*(void *)(v25[0] + 16) >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v21 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
    unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_22830EC60;
    unint64_t v24 = v23 + v22;
    *(unsigned char *)unint64_t v24 = 0;
    *(void *)(v24 + 8) = v20;
    *(unsigned char *)(v24 + 16) = 0;
    *(void *)(v24 + 24) = 1;
    *(_WORD *)(v24 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v23;
  }
  return v20;
}

uint64_t specialized static __RKEntityActionSpecification.generateChangeSceneActionSpecifications(decodeContext:)(void **a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  id v7 = (char *)&v51 - v6;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  id v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v51 - v13;
  uint64_t v15 = *a1;
  id v16 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x656E656373, 0xE500000000000000, 1, *a1);
  if (v16)
  {
    uint64_t v53 = v9;
    id v17 = objc_msgSend(a1[1], sel_objectAtPath_, v16);
    id v18 = &off_264838000;
    if (!v17
      || (v19 = v17, self, v20 = swift_dynamicCastObjCClass(), v19, id v18 = &off_264838000, !v20))
    {
LABEL_9:
      id v27 = [v16 (SEL)v18[165]];
      if (v27)
      {
        uint64_t v28 = v27;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;
      }
      else
      {
        uint64_t v29 = 0x6E776F6E6B6E753CLL;
        unint64_t v31 = 0xE90000000000003ELL;
      }
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_22830EC60;
      *(void *)(v32 + 56) = MEMORY[0x263F8D310];
      *(void *)(v32 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v32 + 32) = v29;
      *(void *)(v32 + 40) = v31;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      unint64_t v33 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
    id v21 = objc_msgSend(v16, sel_stringValue);
    if (v21)
    {
      unint64_t v22 = v21;
      id v52 = (void (*)(void, void, void))static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      id v21 = v52;
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = v53;
    USDDecodableContext.identifierForScene(uskNodePath:)((uint64_t)v21, v24, (uint64_t)v7);
    swift_bridgeObjectRelease();
    uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
    if (v26(v7, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v7);
      id v18 = &off_264838000;
      goto LABEL_9;
    }
    id v52 = *(void (**)(void, void, void))(v53 + 32);
    v52(v14, v7, v8);
    Scene.__sceneIdentifier.getter((uint64_t)v5);
    if (v26(v5, 1, v8) != 1)
    {
      v52(v12, v5, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      uint64_t v41 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
      unint64_t v42 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_22830EC60;
      unint64_t v43 = v34 + v42;
      uint64_t v44 = v53;
      uint64_t v45 = *(void (**)(unint64_t, char *, uint64_t))(v53 + 16);
      v45(v43, v12, v8);
      uint64_t v46 = type metadata accessor for __RKChangeSceneActionArguments(0);
      v45(v43 + *(int *)(v46 + 20), v14, v8);
      swift_storeEnumTagMultiPayload();

      id v47 = *(void (**)(char *, uint64_t))(v44 + 8);
      v47(v12, v8);
      v47(v14, v8);
      return v34;
    }
    outlined destroy of UUID?((uint64_t)v5);
    id v36 = objc_msgSend(v15, sel_path);
    id v37 = objc_msgSend(v36, sel_stringValue);

    if (v37)
    {
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v40 = v39;
    }
    else
    {
      uint64_t v38 = 0x6E776F6E6B6E753CLL;
      unint64_t v40 = 0xE90000000000003ELL;
    }
    uint64_t v48 = v53;
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_22830EC60;
    *(void *)(v49 + 56) = MEMORY[0x263F8D310];
    *(void *)(v49 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v49 + 32) = v38;
    *(void *)(v49 + 40) = v40;
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    char v50 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v8);
  }
  return MEMORY[0x263F8EE78];
}

unint64_t specialized static __RKEntityActionSpecification.generateEmphasizeActionSpecifications(decodeContext:)(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, *(void **)a1);
  float v4 = v3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v22 = *(void *)(a1 + 32);
  uint64_t v23 = v7;
  uint64_t v21 = *(void *)(a1 + 40);
  id v8 = v2;
  id v9 = v6;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v23);
  outlined retain of [String : String]((uint64_t)&v22);
  outlined retain of [String : String]((uint64_t)&v21);
  __RKEntityEmphasisAnimationType.init(decodeContext:)(a1, v20);
  unsigned __int8 v10 = v20[0];
  id v11 = v8;
  id v12 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v23);
  outlined retain of [String : String]((uint64_t)&v22);
  outlined retain of [String : String]((uint64_t)&v21);
  __RKEntityActionAnimationStyle.init(decodeContext:)(a1, v20);
  unsigned __int8 v14 = v20[0];
  v20[0] = MEMORY[0x263F8EE78];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, v11, v12, v5, v23, v20, v4, v14, v10);
  unint64_t v15 = v20[0];
  if (*(void *)(v20[0] + 16) >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v16 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
    unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_22830EC60;
    unint64_t v19 = v18 + v17;
    *(unsigned char *)unint64_t v19 = 0;
    *(void *)(v19 + 8) = v15;
    *(unsigned char *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 1;
    *(_WORD *)(v19 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v18;
  }
  return v15;
}

float specialized static __RKEntityActionSpecification.calculateMaximumMultiplier(lhs:rhs:)(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)&a1;
  float v3 = 1.0;
  if ((a1 & 0x100000000) != 0) {
    float v2 = 1.0;
  }
  if ((a2 & 0x100000000) == 0) {
    float v3 = *(float *)&a2;
  }
  if (v2 <= v3)
  {
    if ((LODWORD(v3) & 0x7FFFFF) == 0) {
      float v2 = v3;
    }
    if ((~LODWORD(v3) & 0x7F800000) != 0) {
      float v2 = v3;
    }
  }
  return roundf(3.4028e38 / v2);
}

unint64_t specialized implicit closure #4 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x797469636F6C6576, 0xE800000000000000, 1, a1);
  *(float32x2_t *)&v8.f64[0] = vcvt_f32_f64(v8);
  *(float *)&double v9 = v9;
  *(void *)&v8.f64[1] = LODWORD(v9);
  unint64_t v16 = MEMORY[0x263F8EE78];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, (uint64_t)a1, a2, a3, a4, &v16, (__n128)v8);
  unint64_t v10 = v16;
  if (*(void *)(v16 + 16) > 1uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v11 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
    unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_22830EC60;
    unint64_t v14 = v13 + v12;
    *(unsigned char *)unint64_t v14 = 0;
    *(void *)(v14 + 8) = v10;
    *(unsigned char *)(v14 + 16) = 0;
    *(void *)(v14 + 24) = 1;
    *(_WORD *)(v14 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v13;
  }
  return v10;
}

unint64_t specialized implicit closure #5 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, a1);
  float v9 = v8;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x746E6F7266, 0xE500000000000000, 1, a1);
  __n128 v18 = v10;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x726F746365567075, 0xE800000000000000, 1, a1);
  unint64_t v19 = MEMORY[0x263F8EE78];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661uLL, 0xEF737463656A624FLL, 1, a1, a2, a3, a4, &v19, v9, v18, v12);
  unint64_t v13 = v19;
  if (*(void *)(v19 + 16) > 1uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v14 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
    unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_22830EC60;
    unint64_t v17 = v16 + v15;
    *(unsigned char *)unint64_t v17 = 0;
    *(void *)(v17 + 8) = v13;
    *(unsigned char *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = 1;
    *(_WORD *)(v17 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v16;
  }
  return v13;
}

uint64_t specialized static __RKEntityActionSpecification.generateNotificationActionSpecifications(decodeContext:)(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v61 = a4;
  char v62 = a2;
  unint64_t v63 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  float v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  unint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  __n128 v18 = (char *)&v54 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v54 - v19;
  uint64_t v21 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x696669746E656469, 0xEA00000000007265, 1, a1);
  int v56 = v15;
  Swift::String v60 = v11;
  uint64_t v24 = MEMORY[0x263F8EE78];
  if (!v22) {
    return v24;
  }
  uint64_t v58 = (uint64_t)v21;
  uint64_t v59 = v22;
  uint64_t v57 = v6;
  uint64_t v55 = v9;
  uint64_t v25 = (void *)MEMORY[0x22A688A50](0x6465746365666661, 0xEF737463656A624FLL);
  id v26 = objc_msgSend(a1, sel_property_, v25);

  unint64_t v54 = v8;
  uint64_t v27 = v5;
  uint64_t v28 = v18;
  unint64_t v30 = v62;
  uint64_t v29 = v63;
  if (v26)
  {
    id v31 = objc_msgSend(v26, sel_objectPathArray);

    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
    unint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v33 >= 1)
    {
      uint64_t v64 = v24;
      uint64_t v34 = v59;
      swift_bridgeObjectRetain();
      specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, a1, v30, v29, v61, (unint64_t *)&v64, v58, v34);
      swift_bridgeObjectRelease_n();
      uint64_t v24 = v64;
      if (*(void *)(v64 + 16) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
        uint64_t v35 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
        unint64_t v36 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
        uint64_t v37 = swift_allocObject();
        *(_OWORD *)(v37 + 16) = xmmword_22830EC60;
        unint64_t v38 = v37 + v36;
        *(unsigned char *)unint64_t v38 = 0;
        *(void *)(v38 + 8) = v24;
        *(unsigned char *)(v38 + 16) = 0;
        *(void *)(v38 + 24) = 1;
        *(_WORD *)(v38 + 32) = 0;
        swift_storeEnumTagMultiPayload();
        return v37;
      }
      return v24;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
  uint64_t v39 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
  unint64_t v40 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_22830EC60;
  uint64_t v41 = v57;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v20, 1, 1, v27);
  unint64_t v63 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  outlined init with copy of UUID?((uint64_t)v20, (uint64_t)v18);
  unint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  if (v42(v28, 1, v27) != 1)
  {
    uint64_t v48 = v54;
    uint64_t v49 = v28;
    id v47 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v47(v54, v49, v27);
    uint64_t v45 = v48;
    goto LABEL_14;
  }
  unint64_t v43 = v56;
  UUID.init(uuidString:)();
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v42)(v43, 1, v27);
  if (result != 1)
  {
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
    uint64_t v45 = v54;
    v44(v54, v43, v27);
    uint64_t v46 = (uint64_t)v28;
    id v47 = v44;
    outlined destroy of UUID?(v46);
LABEL_14:
    uint64_t v50 = (uint64_t)v60;
    v47(v60, v45, v27);
    uint64_t v51 = v55;
    id v52 = (uint64_t *)(v50 + *(int *)(v55 + 20));
    uint64_t v53 = v59;
    *id v52 = v58;
    v52[1] = v53;
    outlined destroy of UUID?((uint64_t)v20);
    *(void *)(v50 + *(int *)(v51 + 24)) = v63;
    outlined init with take of __RKEntityActionSpecification(v50, v24 + v40, type metadata accessor for __RKEntityCustomActionArguments);
    swift_storeEnumTagMultiPayload();
    return v24;
  }
  __break(1u);
  return result;
}

uint64_t specialized static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:)(void **a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v2 - 8);
  float v4 = &v36[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  float v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *a1;
  id v10 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7265746E6563, 0xE600000000000000, 1, *a1);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, v9);
    int v13 = v12;
    specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6974756C6F766572, 0xEB00000000736E6FLL, 1, v9);
    int v15 = v14;
    specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(1936291937, 0xE400000000000000, 1, v9);
    long long v38 = v16;
    int v18 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x506F546E67696C61, 0xEB00000000687461, 1, v9);
    id v19 = objc_msgSend(a1[1], sel_objectAtPath_, v10);
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v20 = v19;
    self;
    uint64_t v21 = swift_dynamicCastObjCClass();

    if (!v21) {
      goto LABEL_11;
    }
    int v37 = v18;
    id v22 = objc_msgSend(v10, sel_stringValue);
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v26 = 0;
    }
    char v27 = v37;
    USDDecodableContext.identifierForPath(uskNodePath:)(v24, v26, (uint64_t)v4);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of UUID?((uint64_t)v4);
LABEL_11:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_22830EC60;
      *(void *)(v28 + 56) = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      *(void *)(v28 + 64) = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      *(void *)(v28 + 32) = v10;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      id v29 = v10;
      unint64_t v30 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      return v11;
    }
    uint64_t v31 = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(v8, v4, v5);
    uint64_t v39 = v11;
    MEMORY[0x270FA5388](v31);
    *(void *)&v36[-64] = &v39;
    *(void *)&v36[-56] = v8;
    *(_DWORD *)&v36[-48] = v13;
    *(_DWORD *)&v36[-44] = v15;
    *(_OWORD *)&v36[-32] = v38;
    v36[-16] = v27 & 1;
    USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, (void (*)(char *))partial apply for closure #1 in static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:), (uint64_t)&v36[-80]);
    uint64_t v32 = v39;
    uint64_t v11 = v39;
    if (*(void *)(v39 + 16) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      uint64_t v33 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
      unint64_t v34 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_22830EC60;
      unint64_t v35 = v11 + v34;
      *(unsigned char *)unint64_t v35 = 0;
      *(void *)(v35 + 8) = v32;
      *(unsigned char *)(v35 + 16) = 0;
      *(void *)(v35 + 24) = 1;
      *(_WORD *)(v35 + 32) = 0;
      swift_storeEnumTagMultiPayload();
    }
    swift_bridgeObjectRetain();

    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
  }
  return v11;
}

unint64_t specialized implicit closure #8 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, a1);
  float v9 = v8;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6974756C6F766572, 0xEB00000000736E6FLL, 1, a1);
  float v11 = v10;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(1936291937, 0xE400000000000000, 1, a1);
  unint64_t v19 = MEMORY[0x263F8EE78];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, a1, a2, a3, a4, &v19, v9, v11, v13);
  unint64_t v14 = v19;
  if (*(void *)(v19 + 16) > 1uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v15 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
    unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_22830EC60;
    unint64_t v18 = v17 + v16;
    *(unsigned char *)unint64_t v18 = 0;
    *(void *)(v18 + 8) = v14;
    *(unsigned char *)(v18 + 16) = 0;
    *(void *)(v18 + 24) = 1;
    *(_WORD *)(v18 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v17;
  }
  return v14;
}

unint64_t specialized static __RKEntityActionSpecification.generateStartAnimationActionSpecifications(decodeContext:)(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7472617473, 0xE500000000000000, 1, *(void **)a1);
  double v4 = v3;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, v2);
  double v6 = v5;
  char v7 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6465737265766572, 0xE800000000000000, 1, v2);
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6F6974616D696E61, 0xEE0064656570536ELL, 1, v2);
  float v9 = v8;
  char v11 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7365737265766572, 0xE800000000000000, 1, v2);
  __n128 v13 = *(void **)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v25 = *(void *)(a1 + 32);
  uint64_t v26 = v14;
  uint64_t v24 = *(void *)(a1 + 40);
  id v15 = v2;
  id v16 = v13;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v26);
  outlined retain of [String : String]((uint64_t)&v25);
  outlined retain of [String : String]((uint64_t)&v24);
  __RKEntityActionMultiplePerformBehavior.init(decodeContext:)(a1, (char *)v23);
  unsigned __int8 v17 = v23[0];
  v23[0] = MEMORY[0x263F8EE78];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, v15, v16, v12, v26, v23, v4, v6, v9, v17, v7 & 1, v11 & 1);
  unint64_t v18 = v23[0];
  if (*(void *)(v23[0] + 16) >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v19 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
    unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_22830EC60;
    unint64_t v22 = v21 + v20;
    *(unsigned char *)unint64_t v22 = 0;
    *(void *)(v22 + 8) = v18;
    *(unsigned char *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 1;
    *(_WORD *)(v22 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v21;
  }
  return v18;
}

unint64_t specialized static __RKEntityActionSpecification.generateTransformActionSpecifications(decodeContext:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  double v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  char v7 = (char *)&v48 - v6;
  float v8 = *(void **)a1;
  id v9 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7261546D726F6678, 0xEB00000000746567, 1, *(void **)a1);
  unint64_t v10 = MEMORY[0x263F8EE78];
  if (!v9) {
    return v10;
  }
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, v8);
  float v12 = v11;
  __n128 v13 = *(void **)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v59 = *(void *)(a1 + 32);
  uint64_t v60 = v15;
  uint64_t v58 = *(void *)(a1 + 40);
  id v16 = v8;
  id v17 = v13;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v60);
  outlined retain of [String : String]((uint64_t)&v59);
  outlined retain of [String : String]((uint64_t)&v58);
  __RKEntityGroupActionOrder.init(decodeContext:)(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, void))specialized USKNode.valueForProperty<A>(named:requestContext:getter:), (Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveSelectionUSD.init(rawValue:), (void (*)(uint64_t))lazy protocol witness table accessor for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError, (char *)v57);
  int v18 = LOBYTE(v57[0]);
  id v19 = v16;
  id v20 = v17;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v60);
  outlined retain of [String : String]((uint64_t)&v59);
  outlined retain of [String : String]((uint64_t)&v58);
  __RKEntityMoveEase.init(decodeContext:)(a1, (char *)v57);
  int v56 = v18;
  int v21 = LOBYTE(v57[0]);
  id v22 = v19;
  id v23 = v20;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v60);
  outlined retain of [String : String]((uint64_t)&v59);
  outlined retain of [String : String]((uint64_t)&v58);
  __RKEntityMoveEaseType.init(decodeContext:)(a1, v57);
  int v54 = LOBYTE(v57[0]);
  int v55 = v21;
  id v25 = objc_msgSend(v23, sel_objectAtPath_, v9);
  if (!v25)
  {
LABEL_10:
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_22830EC60;
    *(void *)(v35 + 56) = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
    *(void *)(v35 + 64) = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
    *(void *)(v35 + 32) = v9;
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    id v36 = v9;
    int v37 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return v10;
  }
  uint64_t v26 = v25;
  uint64_t v53 = v22;
  self;
  uint64_t v27 = swift_dynamicCastObjCClass();
  if (!v27)
  {

    goto LABEL_10;
  }
  id v51 = v26;
  uint64_t v52 = v14;
  objc_msgSend(self, sel_localTransformWithNode_time_, v27, 0.0);
  REMakeSRTFromMatrix();
  __n128 v49 = v29;
  __n128 v50 = v28;
  __n128 v48 = v30;
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v7, 1, 1, v31);
  uint64_t v32 = v53;
  id v33 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0xD000000000000010, 0x800000022834EE20, 1, v53);
  unsigned __int8 v34 = v56;
  long long v38 = v33;
  if (v33)
  {
    id v39 = objc_msgSend(v33, sel_stringValue, *(_OWORD *)&v48, *(_OWORD *)&v49, *(_OWORD *)&v50);
    if (v39)
    {
      unint64_t v40 = v39;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;
    }
    else
    {
      uint64_t v41 = 0;
      uint64_t v43 = 0;
    }
    USDDecodableContext.identifierForPath(uskNodePath:)(v41, v43, (uint64_t)v5);

    swift_bridgeObjectRelease();
    outlined assign with take of UUID?((uint64_t)v5, (uint64_t)v7);
    unsigned __int8 v34 = v56;
    uint64_t v32 = v53;
  }
  v57[0] = v10;
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, v32, v23, v52, v60, v57, v50, v49, v48, v12, v34, v55, v54, (uint64_t)v7);
  unint64_t v10 = v57[0];
  if (*(void *)(v57[0] + 16) >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    uint64_t v44 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
    unint64_t v45 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_22830EC60;
    unint64_t v47 = v46 + v45;
    *(unsigned char *)unint64_t v47 = 0;
    *(void *)(v47 + 8) = v10;
    *(unsigned char *)(v47 + 16) = 0;
    *(void *)(v47 + 24) = 1;
    *(_WORD *)(v47 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    unint64_t v10 = v46;
  }

  outlined destroy of UUID?((uint64_t)v7);
  return v10;
}

uint64_t specialized static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  float v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = *(void **)a1;
  id v10 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6F6974616D696E61, 0xE90000000000006ELL, 1, *(void **)a1);
  float v12 = v10;
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (v10)
  {
    id v33 = *(id *)(a1 + 8);
    id v14 = objc_msgSend(v33, sel_objectAtPath_, v10);
    if (v14)
    {
      uint64_t v15 = v14;
      self;
      if (swift_dynamicCastObjCClass())
      {
        uint64_t v32 = v6;

        id v16 = objc_msgSend(v12, sel_stringValue);
        if (v16)
        {
          id v17 = v16;
          uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v19 = v18;

          id v16 = (id)v31;
        }
        else
        {
          uint64_t v19 = 0;
        }
        uint64_t v20 = v32;
        USDDecodableContext.identifierForPath(uskNodePath:)((uint64_t)v16, v19, (uint64_t)v4);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v4, 1, v5) == 1)
        {

          outlined destroy of UUID?((uint64_t)v4);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v8, v4, v5);
          uint64_t v21 = *(void *)(a1 + 24);
          uint64_t v22 = *(void *)(a1 + 40);
          uint64_t v36 = *(void *)(a1 + 32);
          uint64_t v37 = v21;
          uint64_t v35 = v22;
          id v23 = v9;
          id v24 = v33;
          swift_retain();
          outlined retain of [String : String]((uint64_t)&v37);
          outlined retain of [String : String]((uint64_t)&v36);
          outlined retain of [String : String]((uint64_t)&v35);
          uint64_t v25 = __RKEntityActionMultiplePerformBehavior.init(decodeContext:)(a1, v34);
          *(void *)unsigned __int8 v34 = v13;
          MEMORY[0x270FA5388](v25);
          *(&v31 - 4) = (uint64_t)v34;
          *((unsigned char *)&v31 - 24) = v26;
          *(&v31 - 2) = (uint64_t)v8;
          USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, (void (*)(char *))partial apply for closure #1 in static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:), (uint64_t)(&v31 - 6));
          uint64_t v27 = *(void *)v34;
          uint64_t v13 = *(void *)v34;
          if (*(void *)(*(void *)v34 + 16) >= 2uLL)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
            uint64_t v28 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
            unint64_t v29 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
            uint64_t v13 = swift_allocObject();
            *(_OWORD *)(v13 + 16) = xmmword_22830EC60;
            unint64_t v30 = v13 + v29;
            *(unsigned char *)unint64_t v30 = 0;
            *(void *)(v30 + 8) = v27;
            *(unsigned char *)(v30 + 16) = 0;
            *(void *)(v30 + 24) = 1;
            *(_WORD *)(v30 + 32) = 0;
            swift_storeEnumTagMultiPayload();
          }
          swift_bridgeObjectRetain();

          (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v5);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  return v13;
}

unint64_t specialized static __RKEntityActionSpecification.generateVisibilityActionSpecifications(decodeContext:)(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(1701869940, 0xE400000000000000, 1, *(void **)a1);
  uint64_t v5 = v4;
  unint64_t v6 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v7 = (uint64_t)v3;
    specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, v2);
    float v9 = v8;
    specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7473694465766F6DLL, 0xEC00000065636E61, 1, v2);
    float v11 = v10;
    uint64_t v13 = *(void **)(a1 + 8);
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v34 = *(void *)(a1 + 32);
    uint64_t v35 = v14;
    uint64_t v33 = *(void *)(a1 + 40);
    id v15 = v2;
    id v16 = v13;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v35);
    outlined retain of [String : String]((uint64_t)&v34);
    outlined retain of [String : String]((uint64_t)&v33);
    __RKEntityActionAnimationStyle.init(decodeContext:)(a1, v32);
    unsigned __int8 v17 = v32[0];
    id v18 = v15;
    id v19 = v16;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v35);
    outlined retain of [String : String]((uint64_t)&v34);
    outlined retain of [String : String]((uint64_t)&v33);
    __RKEntityMoveEase.init(decodeContext:)(a1, (char *)v32);
    unsigned __int8 v20 = v32[0];
    id v21 = v18;
    id v22 = v19;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v35);
    outlined retain of [String : String]((uint64_t)&v34);
    outlined retain of [String : String]((uint64_t)&v33);
    __RKEntityMoveEaseType.init(decodeContext:)(a1, v32);
    unsigned __int8 v24 = v32[0];
    uint64_t v31 = v35;
    v32[0] = v6;
    id v25 = v21;
    id v26 = v22;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v35);
    outlined retain of [String : String]((uint64_t)&v34);
    outlined retain of [String : String]((uint64_t)&v33);
    swift_bridgeObjectRetain();
    specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, v25, v26, v12, v31, v7, v9, v11, v5, (void **)a1, v32, v20, v24, v17);
    swift_release();

    outlined release of [String : String]((uint64_t)&v35);
    outlined release of [String : String]((uint64_t)&v34);
    outlined release of [String : String]((uint64_t)&v33);
    swift_bridgeObjectRelease_n();
    unint64_t v6 = v32[0];
    if (*(void *)(v32[0] + 16) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      uint64_t v27 = *(void *)(type metadata accessor for __RKEntityActionSpecification(0) - 8);
      unint64_t v28 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_22830EC60;
      unint64_t v30 = v29 + v28;
      *(unsigned char *)unint64_t v30 = 0;
      *(void *)(v30 + 8) = v6;
      *(unsigned char *)(v30 + 16) = 0;
      *(void *)(v30 + 24) = 1;
      *(_WORD *)(v30 + 32) = 0;
      swift_storeEnumTagMultiPayload();
      return v29;
    }
  }
  return v6;
}

unint64_t lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
  }
  return result;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:)(uint64_t a1)
{
  return closure #1 in static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:)(a1, *(unint64_t **)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
  }
  return result;
}

uint64_t type metadata accessor for OS_os_log(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type USKObjectPath and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type USKObjectPath and conformance NSObject;
  if (!lazy protocol witness table cache variable for type USKObjectPath and conformance NSObject)
  {
    type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for USKObjectPath);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USKObjectPath and conformance NSObject);
  }
  return result;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError);
  }
  return result;
}

uint64_t partial apply for closure #1 in static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:)(uint64_t a1)
{
  return closure #1 in static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:)(a1, *(unint64_t **)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 64), *(float *)(v1 + 32), *(float *)(v1 + 36), *(__n128 *)(v1 + 48));
}

uint64_t outlined init with take of __RKEntityActionSpecification(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of __RKEntityActionSpecification(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of __RKEntityActionSpecification(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError);
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityAudioActionType.AudioActionTypeLoadingError()
{
  return &type metadata for __RKEntityAudioActionType.AudioActionTypeLoadingError;
}

ValueMetadata *type metadata accessor for __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError()
{
  return &type metadata for __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityMoveSelection.MoveSelectionLoadingError()
{
  return &type metadata for __RKEntityMoveSelection.MoveSelectionLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return &type metadata for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityActionAnimationStyle.AnimationStyleLoadingError()
{
  return &type metadata for __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEase.MoveEaseLoadingError()
{
  return &type metadata for __RKEntityMoveEase.MoveEaseLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEaseType.MoveEaseTypeLoadingError()
{
  return &type metadata for __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityAudioActionType.AudioActionTypeLoadingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227E20088);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionSpecification.ActionUSDLoadingError()
{
  return &type metadata for __RKEntityActionSpecification.ActionUSDLoadingError;
}

void *specialized static __Engine.makeSharedEngine(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = self;
  swift_retain();
  id v3 = objc_msgSend(v2, sel_standardUserDefaults);
  unsigned int v4 = (void *)MEMORY[0x22A688A50](0xD000000000000020, 0x800000022834EFC0);
  unsigned int v5 = objc_msgSend(v3, sel_BOOLForKey_, v4);

  id v6 = objc_msgSend(self, sel_processInfo);
  id v7 = objc_msgSend(v6, sel_environment);

  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v8 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x800000022834EFF0);
    int v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 | v5)) {
      goto LABEL_8;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_8;
    }
  }
  REEngineConfigurationGetRenderFlags();
  if ((int)REGetRetainCount() >= 2)
  {
    swift_retain();
    uint64_t v11 = REEngineConfigurationClone();
    type metadata accessor for EngineConfiguration();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v11;
    swift_release_n();
    uint64_t v1 = v12;
  }
  REEngineConfigurationSetRenderFlags();
LABEL_8:
  uint64_t v14 = v1;
  type metadata accessor for __Engine();
  swift_allocObject();
  return __Engine.init(configuration:)(&v14);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioFileResource.LoadingStrategy(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioFileResource.LoadingStrategy()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AudioFileResource.LoadingStrategy()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioFileResource.LoadingStrategy()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AudioFileResource.LoadingStrategy()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AudioFileResource.LoadingStrategy()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t AudioFileResource.LoadingStrategy.rawValue.getter()
{
  if (*v0) {
    return 0x64616F6C657270;
  }
  else {
    return 0x6D6165727473;
  }
}

uint64_t AudioFileResource.LoadingStrategy.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  BOOL v4 = a1 == 0x6D6165727473 && a2 == 0xE600000000000000;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 0;
  }
  else if (a1 == 0x64616F6C657270 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 1;
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      char v8 = 1;
    }
    else {
      char v8 = 2;
    }
  }
  *a3 = v8;
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy;
  if (!lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy;
  if (!lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy);
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AudioFileResource.LoadingStrategy@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return AudioFileResource.LoadingStrategy.init(rawValue:)(*a1, a1[1], a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AudioFileResource.LoadingStrategy(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6D6165727473;
  if (*v1) {
    uint64_t v2 = 0x64616F6C657270;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

unsigned char *storeEnumTagSinglePayload for AudioFileResource.LoadingStrategy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E20B98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioFileResource.LoadingStrategy()
{
  return &type metadata for AudioFileResource.LoadingStrategy;
}

void ReverbComponent.reverb.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *ReverbComponent.reverb.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*ReverbComponent.reverb.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned char *ReverbComponent.init(reverb:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void ReverbComponent.hash(into:)()
{
  Swift::UInt v1 = *v0;
  if (v1 == 10)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 11)
  {
    Swift::UInt v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
}

uint64_t static ReverbComponent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 11)
  {
    if (v3 == 11) {
      return 1;
    }
  }
  else if (v2 == 10)
  {
    if (v3 == 10) {
      return 1;
    }
  }
  else if (v2 == v3 && (v3 & 0xFE) != 10)
  {
    return 1;
  }
  return 0;
}

Swift::Int ReverbComponent.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 10)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 11)
  {
    Swift::UInt v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static ReverbComponent.__fromCore(_:)(char *a1@<X8>)
{
  uint64_t ReverbPreset = REReverbComponentGetReverbPreset();
  Reverb.Preset.init(core:)(ReverbPreset, (char *)&v11);
  char v3 = v11;
  if (v11 == 10)
  {
    if (one-time initialization token for audio != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.audio);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v11 = v8;
      *(_DWORD *)id v7 = 136315138;
      type metadata accessor for REAudioReverbPreset(0);
      uint64_t v9 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v5, v6, "Unsupported reverb preset %s. Setting to anechoic.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v8, -1, -1);
      MEMORY[0x22A696500](v7, -1, -1);
    }

    char v3 = 11;
  }
  *a1 = v3;
}

uint64_t ReverbComponent.__toCore(_:)()
{
  int v1 = *v0;
  if (v1 == 10)
  {
    if (one-time initialization token for audio != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.audio);
    char v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_227DD2000, v3, v4, "Automatic reverb case deprecated. Remove component instead.", v5, 2u);
      MEMORY[0x22A696500](v5, -1, -1);
    }
  }
  else if (v1 != 11)
  {
    Reverb.Preset.core.getter();
  }
  REReverbComponentSetPriority();
  REReverbComponentSetReverbPresetWithBlend();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ReverbComponent(_DWORD *a1@<X8>)
{
  *a1 = 5000;
}

void static ReverbComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5000;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ReverbComponent()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 10)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 11)
  {
    Swift::UInt v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ReverbComponent()
{
  Swift::UInt v1 = *v0;
  if (v1 == 10)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 11)
  {
    Swift::UInt v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReverbComponent()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 10)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 11)
  {
    Swift::UInt v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ReverbComponent(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 != 11)
  {
    if (v2 == 10)
    {
      if (v3 == 10) {
        return 1;
      }
    }
    else if (v2 == v3 && (v3 & 0xFE) != 10)
    {
      return 1;
    }
    return 0;
  }
  return v3 == 11;
}

unint64_t lazy protocol witness table accessor for type ReverbComponent and conformance ReverbComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type ReverbComponent and conformance ReverbComponent;
  if (!lazy protocol witness table cache variable for type ReverbComponent and conformance ReverbComponent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReverbComponent and conformance ReverbComponent);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReverbComponent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  if (*a1 <= 0xBu) {
    int v6 = 11;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 12;
  if (*a1 < 0xAu) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReverbComponent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E213ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReverbComponent()
{
  return &type metadata for ReverbComponent;
}

double static SIMD3<>.one.getter()
{
  return 0.00781250185;
}

double static SIMD3<>.positiveInfinity.getter()
{
  return 1.40444843e306;
}

double static SIMD3<>.negativeInfinity.getter()
{
  return -1.4044491e306;
}

__n128 simd_float4x4.identity.getter()
{
  return *(__n128 *)MEMORY[0x263EF89A8];
}

float32x2_t simd_float4x4.transform(position:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  int32x4_t v5 = (int32x4_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2), a5);
  return vdiv_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 3));
}

double simd_float4x4.transform(normal:)(float32x4_t a1, simd_float3 a2, simd_float3 a3, simd_float3 a4)
{
  a2.i32[3] = 0;
  a3.i32[3] = 0;
  a4.i32[3] = 0;
  v10.columns[0] = a2;
  v10.columns[1] = a3;
  v10.columns[2] = a4;
  simd_float3x3 v11 = __invert_f3(v10);
  int32x4_t v4 = vdupq_laneq_s32((int32x4_t)v11.columns[0], 2);
  v11.columns[0] = (simd_float3)vzip1q_s32((int32x4_t)v11.columns[0], (int32x4_t)v11.columns[2]);
  int32x4_t v5 = vzip1q_s32((int32x4_t)v11.columns[1], (int32x4_t)0);
  float32x4_t v6 = (float32x4_t)vzip1q_s32((int32x4_t)v11.columns[0], v5);
  float32x4_t v7 = (float32x4_t)vzip2q_s32((int32x4_t)v11.columns[0], v5);
  v11.columns[1] = (simd_float3)vzip1q_s32(v4, vdupq_laneq_s32((int32x4_t)v11.columns[1], 2));
  v7.i32[2] = vdupq_lane_s32(*(int32x2_t *)(&v11 + 32), 1).i32[2];
  v11.columns[1].i32[2] = v11.columns[2].i32[2];
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, a1.f32[0]), v7, *(float32x2_t *)a1.f32, 1), (float32x4_t)v11.columns[1], a1, 2).u64[0];
  return result;
}

__n64 simd_float4x4.transform(force:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4 = vmulq_f32(a2, a2);
  v4.f32[0] = sqrtf(v4.f32[2] + vaddv_f32(*(float32x2_t *)v4.f32));
  float32x4_t v5 = vmulq_f32(a3, a3);
  v5.f32[0] = sqrtf(v5.f32[2] + vaddv_f32(*(float32x2_t *)v5.f32));
  float32x2_t v6 = (float32x2_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2).u64[0];
  result.n64_f32[0] = (float)(v4.f32[0] * (float)(v4.f32[0] * v4.f32[0])) * v6.f32[0];
  result.n64_u32[1] = vmuls_lane_f32(v5.f32[0] * (float)(v5.f32[0] * v5.f32[0]), v6, 1);
  return result;
}

__n64 simd_float4x4.transform(torque:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4 = vmulq_f32(a2, a2);
  v4.f32[0] = sqrtf(v4.f32[2] + vaddv_f32(*(float32x2_t *)v4.f32));
  float32x4_t v5 = vmulq_f32(a3, a3);
  v5.f32[0] = sqrtf(v5.f32[2] + vaddv_f32(*(float32x2_t *)v5.f32));
  float32x2_t v6 = (float32x2_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2).u64[0];
  result.n64_f32[0] = (float)(v4.f32[0] * (float)(v4.f32[0] * (float)(v4.f32[0] * v4.f32[0]))) * v6.f32[0];
  result.n64_u32[1] = vmuls_lane_f32(v5.f32[0] * (float)(v5.f32[0] * (float)(v5.f32[0] * v5.f32[0])), v6, 1);
  return result;
}

double one-time initialization function for identity()
{
  double result = 0.0;
  static simd_quatf.identity = xmmword_22830ECC0;
  return result;
}

{
  double result;

  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  double result = *(double *)&static simd_quatf.identity;
  static Transform.identity = xmmword_22830EC80;
  xmmword_2681C7AB0 = static simd_quatf.identity;
  xmmword_2681C7AC0 = 0uLL;
  return result;
}

double static simd_quatf.identity.getter()
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  return *(double *)&static simd_quatf.identity;
}

uint64_t __RKEmphasisFlipAnimation.deinit()
{
  return v0;
}

uint64_t __RKEmphasisFlipAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisFlipAnimation()
{
  return self;
}

uint64_t specialized static __RKEmphasisFlipAnimation.createFlipAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 125, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for playfulFlipAnimationData == -1) {
        goto LABEL_8;
      }
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 183, 0, MEMORY[0x263F8EE78]);
      if (one-time initialization token for wildFlipAnimationData == -1) {
        goto LABEL_8;
      }
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 63, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for basicFlipAnimationData != -1) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((void *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v18 = rawValue[2];
  if (v18)
  {
    char v8 = v34;
    float v10 = (float)v18;
    int v9 = v36;
    id v19 = (long long *)&rawValue[6 * v18];
    long long v29 = *v19;
    long long v30 = *(v19 - 1);
    long long v28 = v19[1];
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  unint64_t v21 = rawValue[2];
  unint64_t v20 = rawValue[3];
  float v22 = a5 / v10;
  if (v21 >= v20 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, rawValue);
  }
  rawValue[2] = v21 + 1;
  id v23 = &rawValue[6 * v21];
  unint64_t v23[2] = v30;
  v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  uint64_t v32 = "Transform.transform";
  char v33 = 1;
  char v34 = v8;
  float v35 = v22;
  int v36 = v9;
  float v37 = a5;
  uint64_t SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation) {
    goto LABEL_15;
  }
  uint64_t v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_22830EC60;
  swift_bridgeObjectRelease();
  *(void *)(v26 + 32) = v25;
  return v26;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Audio.DistanceAttenuation.CodingKeys()
{
  return 0x66666F6C6C6F72;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Audio.DistanceAttenuation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x66666F6C6C6F72 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Audio.DistanceAttenuation.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance Audio.DistanceAttenuation.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.DistanceAttenuation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.DistanceAttenuation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Audio.DistanceAttenuation.RolloffCodingKeys()
{
  return 0x726F74636166;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Audio.DistanceAttenuation.RolloffCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x726F74636166 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.DistanceAttenuation.RolloffCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.DistanceAttenuation.RolloffCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

void static Audio.DistanceAttenuation.default.getter(void *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

BOOL static Audio.DistanceAttenuation.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

void Audio.DistanceAttenuation.hash(into:)()
{
  Swift::UInt64 v1 = *v0;
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

uint64_t Audio.DistanceAttenuation.encode(to:)(void *a1)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.DistanceAttenuation.RolloffCodingKeys>);
  uint64_t v2 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  float32x4_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.DistanceAttenuation.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v9 = v11;
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys);
  }
  return result;
}

Swift::Int Audio.DistanceAttenuation.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t Audio.DistanceAttenuation.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v23 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.DistanceAttenuation.RolloffCodingKeys>);
  uint64_t v22 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.DistanceAttenuation.CodingKeys>);
  uint64_t v7 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v21 = v7;
    uint64_t v10 = v24;
    if (*(void *)(KeyedDecodingContainer.allKeys.getter() + 16) == 1)
    {
      lazy protocol witness table accessor for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v11 = v21;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v13 = v12;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
      *id v23 = v13;
    }
    else
    {
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v16 = &type metadata for Audio.DistanceAttenuation;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      unsigned __int8 v17 = v16;
      uint64_t v18 = v24;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v17, *MEMORY[0x263F8DCB0], v14);
      swift_willThrow();
      uint64_t v19 = v21;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v18);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Audio.DistanceAttenuation(double *a1, double *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance Audio.DistanceAttenuation()
{
  Swift::UInt64 v1 = *v0;
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Audio.DistanceAttenuation()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation()
{
  unint64_t result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Audio.DistanceAttenuation@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return Audio.DistanceAttenuation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Audio.DistanceAttenuation(void *a1)
{
  return Audio.DistanceAttenuation.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for Audio.DistanceAttenuation()
{
  return &type metadata for Audio.DistanceAttenuation;
}

void *type metadata accessor for Audio.DistanceAttenuation.CodingKeys()
{
  return &unk_26DC8C9E0;
}

unsigned char *storeEnumTagSinglePayload for Audio.DistanceAttenuation.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227E2249CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Audio.DistanceAttenuation.RolloffCodingKeys()
{
  return &unk_26DC8CA70;
}

uint64_t one-time initialization function for audio()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.audio);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.audio);
  return Logger.init(subsystem:category:)();
}

BOOL static AudioResource.InputMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AudioResource.InputMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AudioResource.InputMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AudioResource.InputMode and conformance AudioResource.InputMode()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioResource.InputMode and conformance AudioResource.InputMode;
  if (!lazy protocol witness table cache variable for type AudioResource.InputMode and conformance AudioResource.InputMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.InputMode and conformance AudioResource.InputMode);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AudioResource.InputMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AudioResource.InputMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227E22998);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for AudioResource.InputMode(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AudioResource.InputMode()
{
  return &type metadata for AudioResource.InputMode;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t IsEqual = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t IsEqual = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (IsEqual != v6) {
      return 0;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (IsEqual != v6) {
      return 0;
    }
  }
  if (!IsEqual) {
    return 1;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  if (v4) {
    uint64_t v8 = v9;
  }
  uint64_t v10 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  uint64_t v12 = a2 < 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)a2 >> 62) {
    uint64_t v11 = v12;
  }
  if (v8 == v11) {
    return 1;
  }
  if (IsEqual < 0) {
    goto LABEL_67;
  }
  unint64_t v62 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_68:
    uint64_t result = MEMORY[0x22A689930](0, a1);
    uint64_t v6 = result;
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_70;
    }
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t result = swift_retain();
  }
  unint64_t v61 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (!*(void *)(v10 + 16))
    {
      __break(1u);
      return result;
    }
    uint64_t v14 = *(void *)(a2 + 32);
    swift_retain();
    goto LABEL_24;
  }
LABEL_70:
  uint64_t v14 = MEMORY[0x22A689930](0, a2);
LABEL_24:
  if (*(void *)(v6 + 16) == *(void *)(v14 + 16))
  {
    swift_release();
    swift_release();
    if (IsEqual == 1) {
      return 1;
    }
LABEL_35:
    uint64_t v27 = 1 - IsEqual;
    uint64_t v28 = 5;
    uint64_t v52 = v10;
    uint64_t v53 = v7;
    while (1)
    {
      if (v27 + v28 == 5)
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      unint64_t v29 = v28 - 4;
      if (v62)
      {
        uint64_t v30 = MEMORY[0x22A689930](v28 - 4, a1);
        if (v61) {
          goto LABEL_41;
        }
      }
      else
      {
        if (v29 >= *(void *)(v7 + 16)) {
          goto LABEL_65;
        }
        uint64_t v30 = *(void *)(a1 + 8 * v28);
        swift_retain();
        if (v61)
        {
LABEL_41:
          uint64_t v31 = MEMORY[0x22A689930](v28 - 4, a2);
          goto LABEL_46;
        }
      }
      if (v29 >= *(void *)(v10 + 16)) {
        goto LABEL_66;
      }
      uint64_t v31 = *(void *)(a2 + 8 * v28);
      swift_retain();
LABEL_46:
      if (*(void *)(v30 + 16) == *(void *)(v31 + 16)) {
        goto LABEL_36;
      }
      type metadata accessor for AudioFileResource();
      uint64_t v32 = swift_dynamicCastClass();
      if (v32 && (v33 = v32, (uint64_t v34 = swift_dynamicCastClass()) != 0))
      {
        uint64_t IsEqual = *(void *)(v33 + 16);
        if (IsEqual == *(void *)(v34 + 16))
        {
LABEL_36:
          swift_release();
          swift_release();
          goto LABEL_37;
        }
        swift_retain();
        swift_retain();
        AudioFileResource.CreateOptions.init(from:)((uint64_t)&v69);
        unsigned __int8 v35 = v69;
        unsigned __int8 v59 = v71;
        unsigned __int8 v60 = v70;
        unsigned __int8 v58 = v72;
        long long v36 = v74;
        uint64_t v57 = v73;
        char v56 = v75;
        uint64_t v55 = v76;
        char v54 = v77;
        AudioFileResource.CreateOptions.init(from:)((uint64_t)&v69);
        unsigned __int8 v37 = v69;
        unsigned __int8 v38 = v70;
        unsigned __int8 v39 = v71;
        unsigned __int8 v40 = v72;
        uint64_t v41 = v73;
        char v42 = v75;
        uint64_t v43 = v76;
        char v44 = v77;
        long long v45 = v74;
        unsigned __int8 v69 = v35;
        unsigned __int8 v70 = v60;
        unsigned __int8 v71 = v59;
        unsigned __int8 v72 = v58;
        uint64_t v73 = v57;
        long long v74 = v36;
        char v75 = v56;
        uint64_t v76 = v55;
        char v77 = v54;
        v63[0] = v37;
        v63[1] = v38;
        v63[2] = v39;
        v63[3] = v40;
        uint64_t v64 = v41;
        long long v65 = v45;
        char v66 = v42;
        uint64_t v67 = v43;
        char v68 = v44;
        char v46 = specialized static AudioFileResource.CreateOptions.== infix(_:_:)(&v69, v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0)
        {
          swift_release_n();
          goto LABEL_58;
        }
        uint64_t IsEqual = REAudioFileAssetIsEqual();
        swift_release_n();
        swift_release_n();
        uint64_t v10 = v52;
        uint64_t v7 = v53;
        if ((IsEqual & 1) == 0) {
          return 0;
        }
      }
      else
      {
        type metadata accessor for AudioFileGroupResource();
        uint64_t v47 = swift_dynamicCastClass();
        if (!v47) {
          goto LABEL_58;
        }
        uint64_t v48 = v47;
        uint64_t v49 = swift_dynamicCastClass();
        if (!v49) {
          goto LABEL_58;
        }
        uint64_t v50 = *(void *)(v48 + 24);
        uint64_t v51 = *(void *)(v49 + 24);
        swift_retain();
        swift_retain();
        uint64_t IsEqual = specialized static Array<A>.== infix(_:_:)(v50, v51);
        swift_release_n();
        swift_release_n();
        if ((IsEqual & 1) == 0) {
          return 0;
        }
      }
LABEL_37:
      ++v28;
      uint64_t result = 1;
      if (v27 + v28 == 5) {
        return result;
      }
    }
  }
  uint64_t v15 = v10;
  type metadata accessor for AudioFileResource();
  uint64_t v16 = swift_dynamicCastClass();
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = swift_dynamicCastClass();
    if (v18)
    {
      uint64_t v19 = v18;
      swift_retain();
      swift_retain();
      char v20 = specialized static AudioFileResource.== infix(_:_:)(v17, v19);
      goto LABEL_31;
    }
  }
  type metadata accessor for AudioFileGroupResource();
  uint64_t v21 = swift_dynamicCastClass();
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = swift_dynamicCastClass();
    if (v23)
    {
      uint64_t v24 = *(void *)(v22 + 24);
      uint64_t v25 = *(void *)(v23 + 24);
      swift_retain();
      swift_retain();
      char v20 = specialized static Array<A>.== infix(_:_:)(v24, v25);
LABEL_31:
      char v26 = v20;
      swift_release_n();
      swift_release_n();
      uint64_t v10 = v15;
      if (v26)
      {
        if (IsEqual == 1) {
          return 1;
        }
        goto LABEL_35;
      }
      return 0;
    }
  }
LABEL_58:
  swift_release();
  swift_release();
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  unsigned char *v5;
  char v6;
  char v7;
  char v8;
  BOOL v10;
  long long v12;
  char v13;
  long long v14;
  char v15;

  int v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      uint64_t v8 = 1;
    }
    else
    {
      int v3 = v2 - 1;
      unint64_t v4 = (unsigned char *)(a2 + 48);
      uint64_t v5 = (unsigned char *)(a1 + 48);
      do
      {
        uint64_t v6 = *v5;
        uint64_t v14 = *((_OWORD *)v5 - 1);
        uint64_t v15 = v6;
        uint64_t v7 = *v4;
        uint64_t v12 = *((_OWORD *)v4 - 1);
        uint64_t v13 = v7;
        uint64_t v8 = specialized static BindPath.Part.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v12);
        uint64_t v10 = v3-- != 0;
        if ((v8 & 1) == 0) {
          break;
        }
        v4 += 24;
        v5 += 24;
      }
      while (v10);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return v8 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  void (**v30)(char *, uint64_t);
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;

  unint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
    {
      uint64_t v23 = 1;
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      uint64_t v12 = v6 + 16;
      uint64_t v31 = v7;
      uint64_t v32 = v13;
      uint64_t v14 = (v11 + 32) & ~v11;
      uint64_t v15 = *(void *)(v12 + 56);
      uint64_t v33 = v12;
      unint64_t v29 = v15;
      uint64_t v30 = (void (**)(char *, uint64_t))(v12 - 8);
      uint64_t v16 = v10 - 1;
      uint64_t v17 = v7;
      do
      {
        uint64_t v18 = a1;
        uint64_t v19 = v9;
        char v20 = v9;
        uint64_t v21 = v32;
        v32(v19, a1 + v14, v4);
        uint64_t v22 = a2;
        v21(v17, a2 + v14, v4);
        uint64_t v9 = v20;
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v24 = *v30;
        (*v30)(v17, v4);
        v24(v20, v4);
        char v26 = v16-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v14 += v29;
        a2 = v22;
        a1 = v18;
      }
      while (v26);
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  return v23 & 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityTriggerSpecification, type metadata accessor for __RKEntityTriggerSpecification, (uint64_t (*)(char *, char *))static __RKEntityTriggerSpecification.== infix(_:_:), type metadata accessor for __RKEntityTriggerSpecification);
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityActionSpecification, type metadata accessor for __RKEntityActionSpecification, (uint64_t (*)(char *, char *))static __RKEntityActionSpecification.== infix(_:_:), type metadata accessor for __RKEntityActionSpecification);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;

  unint64_t v4 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v11 && a1 != a2)
  {
    uint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v13 = *(void *)(v8 + 72);
    while (1)
    {
      outlined init with copy of LoadTrace(a1 + v12, (uint64_t)v10, type metadata accessor for __RKEntityInteractionSpecification);
      outlined init with copy of LoadTrace(a2 + v12, (uint64_t)v7, type metadata accessor for __RKEntityInteractionSpecification);
      if ((specialized static __RKEntityTriggerSpecification.== infix(_:_:)((uint64_t)v10, v7) & 1) == 0
        || (specialized static __RKEntityActionSpecification.== infix(_:_:)((uint64_t)&v10[*(int *)(v4 + 20)], (float *)((char *)v7 + *(int *)(v4 + 20))) & 1) == 0)
      {
        break;
      }
      uint64_t v14 = *(int *)(v4 + 24);
      uint64_t v15 = &v10[v14];
      uint64_t v16 = *(void *)&v10[v14 + 8];
      uint64_t v17 = (void *)((char *)v7 + v14);
      uint64_t v18 = v17[1];
      if (v16)
      {
        if (!v18) {
          break;
        }
        uint64_t v19 = *(void *)v15 == *v17 && v16 == v18;
        if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
      }
      else if (v18)
      {
        break;
      }
      _s10RealityKit29__RKEntityActionSpecificationOWOhTm_0((uint64_t)v7, type metadata accessor for __RKEntityInteractionSpecification);
      _s10RealityKit29__RKEntityActionSpecificationOWOhTm_0((uint64_t)v10, type metadata accessor for __RKEntityInteractionSpecification);
      v12 += v13;
      if (!--v11) {
        return 1;
      }
    }
    _s10RealityKit29__RKEntityActionSpecificationOWOhTm_0((uint64_t)v7, type metadata accessor for __RKEntityInteractionSpecification);
    _s10RealityKit29__RKEntityActionSpecificationOWOhTm_0((uint64_t)v10, type metadata accessor for __RKEntityInteractionSpecification);
    return 0;
  }
  return 1;
}

float specialized static Array<A>.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0])
  {
    if (v2)
    {
      if (a1 != a2)
      {
        float result = COERCE_FLOAT(vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[3], a2[3]), (int8x16_t)vceqq_f32(a1[2], a2[2])), vandq_s8((int8x16_t)vceqq_f32(a1[4], a2[4]), (int8x16_t)vceqq_f32(a1[5], a2[5])))));
        if ((LODWORD(result) & 0x80000000) != 0)
        {
          unint64_t v4 = a2 + 9;
          uint64_t v5 = a1 + 9;
          do
          {
            if (!--v2) {
              break;
            }
            float32x4_t v6 = v4[-3];
            float32x4_t v7 = v4[-2];
            float32x4_t v8 = v4[-1];
            float32x4_t v9 = *v4;
            v4 += 4;
            float32x4_t v11 = v5[-1];
            float32x4_t v10 = *v5;
            float32x4_t v13 = v5[-3];
            float32x4_t v12 = v5[-2];
            v5 += 4;
            float result = COERCE_FLOAT(vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v12, v7), (int8x16_t)vceqq_f32(v13, v6)), vandq_s8((int8x16_t)vceqq_f32(v11, v8), (int8x16_t)vceqq_f32(v10, v9)))));
          }
          while ((LODWORD(result) & 0x80000000) != 0);
        }
      }
    }
  }
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 32;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = 16 * v3++;
    long long v7 = *(_OWORD *)(v4 + v6);
    long long v8 = *(_OWORD *)(a2 + 32 + v6);
    while (1)
    {
      long long v13 = v7;
      float v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      long long v14 = v8;
      float v11 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      BOOL result = v10 == v11;
      if (v5 == 2) {
        break;
      }
      while (1)
      {
        ++v5;
        if (result) {
          break;
        }
        BOOL result = 0;
        if (v5 == 2) {
          return result;
        }
      }
    }
  }
  while (v10 == v11 && v3 != v2);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  long long v8;
  BOOL result;
  float v10;
  float v11;
  long long v13;
  long long v14;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 32;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = 16 * v3++;
    long long v7 = *(_OWORD *)(v4 + v6);
    long long v8 = *(_OWORD *)(a2 + 32 + v6);
    while (1)
    {
      long long v13 = v7;
      float v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      long long v14 = v8;
      float v11 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      BOOL result = v10 == v11;
      if (v5 == 3) {
        break;
      }
      while (1)
      {
        ++v5;
        if (result) {
          break;
        }
        BOOL result = 0;
        if (v5 == 3) {
          return result;
        }
      }
    }
  }
  while (v10 == v11 && v3 != v2);
  return result;
}

{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  BOOL result;
  int v7;
  int v8;
  int v9;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (int *)(a1 + 36);
  uint64_t v4 = (int *)(a2 + 36);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    long long v8 = *v3++;
    long long v7 = v8;
    float32x4_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    float32x4_t v9 = a2 + 7;
    for (unint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

{
  uint64_t v2;
  char v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  void *i;
  BOOL v10;

  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  if (a1[5] == a2[5] && a1[6] == a2[6]
    || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    long long v7 = v2 - 1;
    if (!v7) {
      return 1;
    }
    uint64_t v8 = a2 + 9;
    for (unint64_t i = a1 + 9; *(i - 2) == *(v8 - 2); i += 3)
    {
      float v10 = *(i - 1) == *(v8 - 1) && *i == *v8;
      if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v8 += 3;
      uint64_t result = 1;
      if (!--v7) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, char *), uint64_t (*a6)(void))
{
  uint64_t v11 = a3(0) - 8;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  long long v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v27 - v16;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 == *(void *)(a2 + 16))
  {
    if (!v18 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v28 = a2;
      uint64_t v19 = a5;
      unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v21 = *(void *)(v15 + 72);
      uint64_t v22 = v18 - 1;
      do
      {
        outlined init with copy of LoadTrace(a1 + v20, (uint64_t)v17, a4);
        outlined init with copy of LoadTrace(v28 + v20, (uint64_t)v14, a4);
        char v23 = v19(v17, v14);
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_0((uint64_t)v14, a6);
        _s10RealityKit29__RKEntityActionSpecificationOWOhTm_0((uint64_t)v17, a6);
        BOOL v25 = v22-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v20 += v21;
      }
      while (v25);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

unint64_t specialized static Array<A>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5 == v42) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_5:
  if (!v5) {
    return 1;
  }
  uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v3 < 0) {
    uint64_t v7 = v3;
  }
  else {
    uint64_t v7 = v3 & 0xFFFFFFFFFFFFFF8;
  }
  if (v4) {
    uint64_t v6 = v7;
  }
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8) {
    return 1;
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      unint64_t v10 = 0;
      unint64_t v11 = a2 & 0xC000000000000001;
      while (1)
      {
        if (v10 == v5) {
          goto LABEL_76;
        }
        if ((v3 & 0xC000000000000001) != 0)
        {
          uint64_t result = MEMORY[0x22A689930](v10, v3);
          unint64_t v12 = result;
          if (!v11) {
            goto LABEL_26;
          }
        }
        else
        {
          if (v10 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_80;
          }
          unint64_t v12 = *(void *)(v3 + 32 + 8 * v10);
          uint64_t result = swift_retain();
          if (!v11)
          {
LABEL_26:
            if (v10 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_81;
            }
            uint64_t v13 = *(void *)(a2 + 32 + 8 * v10);
            swift_retain();
            goto LABEL_28;
          }
        }
        uint64_t v13 = MEMORY[0x22A689930](v10, a2);
LABEL_28:
        if (*(void *)(v12 + 16) != *(void *)(v13 + 16)) {
          goto LABEL_49;
        }
        uint64_t v14 = 0;
        ++v10;
        long long v15 = *(_OWORD *)(v12 + 32);
        long long v16 = *(_OWORD *)(v13 + 32);
        BOOL v17 = 1;
        while (1)
        {
          while (!v17)
          {
            if (v14 == 2) {
              goto LABEL_49;
            }
            BOOL v17 = 0;
            ++v14;
          }
          long long v51 = v15;
          float v18 = *(float *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
          long long v52 = v16;
          float v19 = *(float *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
          BOOL v17 = v18 == v19;
          if (v14 == 2) {
            break;
          }
          ++v14;
        }
        if (v18 != v19)
        {
LABEL_49:
          swift_release();
          swift_release();
          return 0;
        }
        long long v43 = *(_OWORD *)(v13 + 48);
        long long v44 = *(_OWORD *)(v12 + 48);
        swift_release();
        swift_release();
        uint64_t v20 = 0;
        BOOL v21 = 1;
        while (!v21)
        {
          uint64_t result = 0;
          BOOL v21 = 0;
          if (v20 == 3) {
            return result;
          }
LABEL_38:
          ++v20;
        }
        long long v49 = v44;
        float v22 = *(float *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v20 & 3)));
        long long v50 = v43;
        float v23 = *(float *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v20 & 3)));
        BOOL v21 = v22 == v23;
        if (v20 != 3) {
          goto LABEL_38;
        }
        BOOL v24 = v22 != v23 || v10 == v5;
        uint64_t result = v22 == v23;
        if (v24) {
          return result;
        }
      }
    }
    uint64_t v25 = 0;
    uint64_t v26 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v27 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_52:
    if (v25 == v5) {
      goto LABEL_77;
    }
    if (v25 == v26) {
      goto LABEL_78;
    }
    if (v25 == v27) {
      goto LABEL_79;
    }
    uint64_t v28 = *(void *)(v3 + 32 + 8 * v25);
    uint64_t v29 = *(void *)(a2 + 32 + 8 * v25);
    if (*(void *)(v28 + 16) != *(void *)(v29 + 16)) {
      return 0;
    }
    uint64_t v30 = 0;
    ++v25;
    long long v31 = *(_OWORD *)(v28 + 32);
    long long v32 = *(_OWORD *)(v29 + 32);
    BOOL v33 = 1;
    while (1)
    {
      if (v33)
      {
        long long v47 = v31;
        float v34 = *(float *)((unint64_t)&v47 & 0xFFFFFFFFFFFFFFF3 | (4 * (v30 & 3)));
        long long v48 = v32;
        float v35 = *(float *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v30 & 3)));
        BOOL v33 = v34 == v35;
        if (v30 == 2)
        {
          if (v34 != v35) {
            return 0;
          }
          uint64_t v36 = 0;
          long long v37 = *(_OWORD *)(v28 + 48);
          long long v38 = *(_OWORD *)(v29 + 48);
          BOOL v39 = 1;
          while (2)
          {
            if (!v39)
            {
              uint64_t result = 0;
              BOOL v39 = 0;
              if (v36 == 3) {
                return result;
              }
              goto LABEL_65;
            }
            long long v45 = v37;
            float v40 = *(float *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
            long long v46 = v38;
            float v41 = *(float *)((unint64_t)&v46 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
            BOOL v39 = v40 == v41;
            if (v36 != 3)
            {
LABEL_65:
              ++v36;
              continue;
            }
            break;
          }
          if (v40 != v41) {
            return 0;
          }
          uint64_t result = 1;
          if (v25 == v5) {
            return result;
          }
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t result = 0;
        BOOL v33 = 0;
        if (v30 == 2) {
          return result;
        }
      }
      ++v30;
    }
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = a1 + 5;
  uint64_t v6 = a2 + 5;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v10 = *v6++;
    uint64_t v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t AudioLibraryComponent.resources.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AudioLibraryComponent.resources.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*AudioLibraryComponent.resources.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::AudioLibraryComponent __swiftcall AudioLibraryComponent.init(resources:)(RealityFoundation::AudioLibraryComponent resources)
{
  v1->resources._rawValue = resources.resources._rawValue;
  return resources;
}

uint64_t AudioLibraryComponent.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>);
    uint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE80];
  }
  uint64_t v6 = v3;
  uint64_t v4 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, 1, &v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

void static AudioLibraryComponent.__fromCore(_:)(unint64_t *a1@<X8>)
{
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v2 = (void *)REAudioLibraryComponentCopyAssetNames();
  type metadata accessor for CFStringRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  *a1 = v3;
}

void AudioLibraryComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v89 = *v1;
  uint64_t v3 = *(void *)v89;
  AudioLibraryComponent.removeDeletedResources(component:)();
  uint64_t v4 = *(void *)(*(void *)v89 + 64);
  uint64_t v80 = *(void *)v89 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(*(void *)v89 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  int64_t v81 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  *((void *)&v9 + 1) = 2;
  long long v78 = xmmword_22830EC60;
  *(void *)&long long v9 = 136315138;
  long long v75 = v9;
  uint64_t v74 = MEMORY[0x263F8EE58] + 8;
  uint64_t v79 = *(void *)v89;
  uint64_t v82 = v2;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_23:
    long long v16 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v12);
    uint64_t v18 = *v16;
    unint64_t v17 = v16[1];
    uint64_t v19 = *(void *)(*(void *)(v3 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v20 = (void *)MEMORY[0x22A688A50](v18, v17);
    uint64_t AssetForName = REAudioLibraryComponentGetAssetForName();

    if (!AssetForName) {
      goto LABEL_6;
    }
    int64_t v83 = v8;
    id v22 = (id)REAssetGetSwiftObject();
    type metadata accessor for AudioResource();
    uint64_t v23 = swift_dynamicCastClass();
    if (v23)
    {
      uint64_t v24 = v23;
      int64_t v8 = v83;
LABEL_26:
      if (*(void *)(v19 + 16) == *(void *)(v24 + 16))
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
      }
      else
      {
        type metadata accessor for AudioFileResource();
        uint64_t v25 = swift_dynamicCastClass();
        if (!v25 || (uint64_t v26 = v25, (v27 = swift_dynamicCastClass()) == 0))
        {
          type metadata accessor for AudioFileGroupResource();
          uint64_t v56 = swift_dynamicCastClass();
          if (!v56) {
            goto LABEL_5;
          }
          uint64_t v57 = v56;
          uint64_t v58 = swift_dynamicCastClass();
          if (!v58) {
            goto LABEL_5;
          }
          uint64_t v59 = *(void *)(v57 + 24);
          uint64_t v60 = *(void *)(v58 + 24);
          swift_retain();
          LOBYTE(v59) = specialized static Array<A>.== infix(_:_:)(v59, v60);
          swift_release();
          swift_release();
          int64_t v8 = v83;
          if (v59)
          {
LABEL_43:
            swift_bridgeObjectRelease();
            goto LABEL_53;
          }
          goto LABEL_6;
        }
        if (*(void *)(v26 + 16) == *(void *)(v27 + 16))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          int64_t v8 = v83;
        }
        else
        {
          swift_retain();
          AudioFileResource.CreateOptions.init(from:)((uint64_t)v89);
          char v28 = v89[0];
          char v29 = v89[1];
          LODWORD(v77) = v89[2];
          LODWORD(v76) = v89[3];
          uint64_t v30 = *(void *)&v89[16];
          *(void *)&long long v73 = *(void *)&v89[8];
          uint64_t v72 = *(void *)&v89[24];
          LODWORD(v71) = v89[32];
          uint64_t v70 = v90;
          int v69 = v91;
          AudioFileResource.CreateOptions.init(from:)((uint64_t)v89);
          char v31 = v89[0];
          char v32 = v89[1];
          char v33 = v89[2];
          char v34 = v89[3];
          uint64_t v35 = *(void *)&v89[8];
          char v36 = v89[32];
          uint64_t v37 = v90;
          unsigned __int8 v38 = v91;
          long long v68 = *(_OWORD *)&v89[16];
          v89[0] = v28;
          v89[1] = v29;
          v89[2] = (_BYTE)v77;
          v89[3] = (_BYTE)v76;
          *(void *)&v89[8] = v73;
          *(void *)&v89[16] = v30;
          *(void *)&v89[24] = v72;
          v89[32] = v71;
          uint64_t v90 = v70;
          unsigned __int8 v91 = v69;
          LOBYTE(v84[0]) = v31;
          BYTE1(v84[0]) = v32;
          BYTE2(v84[0]) = v33;
          BYTE3(v84[0]) = v34;
          v84[1] = v35;
          long long v85 = v68;
          char v86 = v36;
          uint64_t v87 = v37;
          unsigned __int8 v88 = v38;
          char v39 = specialized static AudioFileResource.CreateOptions.== infix(_:_:)(v89, (unsigned __int8 *)v84);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v39 & 1) == 0)
          {
            swift_release();
            uint64_t v3 = v79;
LABEL_5:
            swift_release();
            int64_t v8 = v83;
            goto LABEL_6;
          }
          int IsEqual = REAudioFileAssetIsEqual();
          swift_release();
          swift_release();
          uint64_t v3 = v79;
          int64_t v8 = v83;
          if (IsEqual) {
            goto LABEL_43;
          }
LABEL_6:
          uint64_t v10 = (void *)MEMORY[0x22A688A50](v18, v17);
          swift_bridgeObjectRelease();
          REAudioLibraryComponentRegisterAsset();
          swift_release();
        }
      }
    }
    else
    {
      swift_unknownObjectRelease();
      Swift::UInt32 v41 = REAssetHandleAssetType();
      if (one-time initialization token for resourceClasses != -1) {
        swift_once();
      }
      rawValue = resourceClasses._rawValue;
      if (*((void *)resourceClasses._rawValue + 2)
        && (unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v41), (v44 & 1) != 0))
      {
        long long v45 = *(_OWORD *)(rawValue[7] + 16 * v43);
        uint64_t v46 = *(void *)(rawValue[7] + 16 * v43 + 8);
        char v77 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v46 + 16);
        long long v73 = v45;
        uint64_t v47 = v45;
        uint64_t v48 = type metadata accessor for Optional();
        uint64_t v76 = &v68;
        uint64_t v72 = v48;
        uint64_t v71 = *(void *)(v48 - 8);
        __n128 v49 = MEMORY[0x270FA5388](v48);
        long long v51 = (char *)&v68 - v50;
        v77(AssetForName, v47, v46, v49);
        uint64_t v52 = *(void *)(v47 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v51, 1, v47) == 1)
        {
          (*(void (**)(char *, uint64_t))(v71 + 8))(v51, v72);
          memset(v89, 0, sizeof(v89));
        }
        else
        {
          *(_OWORD *)&v89[24] = v73;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v89);
          (*(void (**)(uint64_t *, char *, uint64_t))(v52 + 32))(boxed_opaque_existential_1, v51, v47);
        }
        uint64_t v3 = v79;
        int64_t v8 = v83;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadableResource?);
        if (swift_dynamicCast())
        {
          uint64_t v24 = v84[0];
          if (v84[0]) {
            goto LABEL_26;
          }
        }
      }
      else
      {
        static os_log_type_t.error.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v53 = swift_allocObject();
        *(_OWORD *)(v53 + 16) = v78;
        id v54 = (id)REAssetGetType();
        *(void *)(v53 + 56) = type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
        *(void *)(v53 + 64) = lazy protocol witness table accessor for type NSString and conformance NSObject();
        *(void *)(v53 + 32) = v54;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        uint64_t v55 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        uint64_t v3 = v79;
        swift_bridgeObjectRelease();

        int64_t v8 = v83;
      }
      if (one-time initialization token for audio != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      __swift_project_value_buffer(v62, (uint64_t)static Logger.audio);
      swift_bridgeObjectRetain();
      unint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(void *)uint64_t v89 = v66;
        *(_DWORD *)uint64_t v65 = v75;
        swift_bridgeObjectRetain();
        *(void *)(v65 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, (uint64_t *)v89);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_227DD2000, v63, v64, "[API/RealityKit] [AudioLibraryComponent] Failed to get AudioResource from coreAssetType for asset %s.", (uint8_t *)v65, 0xCu);
        swift_arrayDestroy();
        uint64_t v67 = v66;
        int64_t v8 = v83;
        MEMORY[0x22A696500](v67, -1, -1);
        MEMORY[0x22A696500](v65, -1, -1);

LABEL_53:
        swift_release();
      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
      }
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_57;
  }
  if (v13 >= v81) {
    goto LABEL_55;
  }
  unint64_t v14 = *(void *)(v80 + 8 * v13);
  ++v8;
  if (v14) {
    goto LABEL_22;
  }
  int64_t v8 = v13 + 1;
  if (v13 + 1 >= v81) {
    goto LABEL_55;
  }
  unint64_t v14 = *(void *)(v80 + 8 * v8);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v8 = v13 + 2;
  if (v13 + 2 >= v81) {
    goto LABEL_55;
  }
  unint64_t v14 = *(void *)(v80 + 8 * v8);
  if (v14)
  {
LABEL_22:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v8 << 6);
    goto LABEL_23;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v81)
  {
LABEL_55:
    swift_release();
    return;
  }
  unint64_t v14 = *(void *)(v80 + 8 * v15);
  if (v14)
  {
    int64_t v8 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v8 >= v81) {
      goto LABEL_55;
    }
    unint64_t v14 = *(void *)(v80 + 8 * v8);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_57:
  __break(1u);
}

void protocol witness for static Component.__coreComponentType.getter in conformance AudioLibraryComponent(_DWORD *a1@<X8>)
{
  *a1 = 5006;
}

void static AudioLibraryComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5006;
}

uint64_t protocol witness for ExpressibleByDictionaryLiteral.init(dictionaryLiteral:) in conformance AudioLibraryComponent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>);
    uint64_t v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE80];
  }
  uint64_t v6 = v3;
  uint64_t v4 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, 1, &v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

void AudioLibraryComponent.removeDeletedResources(component:)()
{
  uint64_t v0 = (void *)REAudioLibraryComponentCopyAssetNames();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10RealityKit13AudioResourceCG_SSs5NeverOTg504_s17d12Foundation21f126LibraryComponentV22removeDeletedResources33_702952AAC0242E04445618A79588EAB8LL9componentys13OpaquePointerV_tFS2S3key_0A3Kit0C8G69C5valuet_tcfu_32a168a102879cc1a6a91172b0770f0c91SSAI_AlMtSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v30 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v30;
  uint64_t result = specialized Dictionary.startIndex.getter(a1);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  char v9 = v8 & 1;
  uint64_t v10 = a1 + 64;
  int64_t v26 = v1;
  int v27 = v5;
  uint64_t v28 = a1 + 64;
  while ((v9 & 1) == 0)
  {
    if (v6 < 0 || v6 >= 1 << *(unsigned char *)(a1 + 32))
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      break;
    }
    unint64_t v14 = (unint64_t)v6 >> 6;
    if ((*(void *)(v10 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_26;
    }
    if (*(_DWORD *)(a1 + 36) != v5) {
      goto LABEL_27;
    }
    uint64_t v29 = v7;
    int64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v6);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    unint64_t v19 = *(void *)(v30 + 16);
    unint64_t v18 = *(void *)(v30 + 24);
    uint64_t result = swift_bridgeObjectRetain();
    if (v19 >= v18 >> 1) {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
    }
    *(void *)(v30 + 16) = v19 + 1;
    uint64_t v20 = v30 + 16 * v19;
    *(void *)(v20 + 32) = v17;
    *(void *)(v20 + 40) = v16;
    int64_t v11 = 1 << *(unsigned char *)(a1 + 32);
    if (v6 >= v11) {
      goto LABEL_28;
    }
    uint64_t v10 = a1 + 64;
    uint64_t v21 = *(void *)(v28 + 8 * v14);
    if ((v21 & (1 << v6)) == 0) {
      goto LABEL_29;
    }
    int v5 = v27;
    if (*(_DWORD *)(a1 + 36) != v27) {
      goto LABEL_30;
    }
    unint64_t v22 = v21 & (-2 << (v6 & 0x3F));
    if (v22)
    {
      int64_t v11 = __clz(__rbit64(v22)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v12 = v26;
      uint64_t v13 = v29;
    }
    else
    {
      unint64_t v23 = v14 + 1;
      unint64_t v24 = (unint64_t)(v11 + 63) >> 6;
      int64_t v12 = v26;
      uint64_t v13 = v29;
      if (v14 + 1 < v24)
      {
        unint64_t v25 = *(void *)(v28 + 8 * v23);
        if (!v25)
        {
          unint64_t v23 = v14 + 2;
          if (v14 + 2 >= v24) {
            goto LABEL_4;
          }
          unint64_t v25 = *(void *)(v28 + 8 * v23);
          if (!v25)
          {
            while (v24 - 3 != v14)
            {
              unint64_t v25 = *(void *)(a1 + 88 + 8 * v14++);
              if (v25)
              {
                unint64_t v23 = v14 + 2;
                goto LABEL_18;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_18:
        int64_t v11 = __clz(__rbit64(v25)) + (v23 << 6);
      }
    }
LABEL_4:
    char v9 = 0;
    uint64_t v7 = v13 + 1;
    uint64_t v6 = v11;
    if (v7 == v12) {
      return v2;
    }
  }
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
  _CFObject.hash(into:)();
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  CustomMaterial.CustomShaderParameters.hash(into:)();
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(a1 + 16));
  uint64_t v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::UInt64 v2;
  Swift::UInt32 v3;
  Swift::UInt64 v4;
  Swift::UInt16 v5;
  Swift::Int v6;
  uint64_t vars8;

  Hasher.init(_seed:)();
  uint64_t v2 = *(void *)(a1 + 16);
  String.hash(into:)();
  uint64_t v3 = *(_DWORD *)(a1 + 44);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::Int v4 = v2;
  }
  else {
    Swift::Int v4 = 0;
  }
  int v5 = *(_WORD *)(a1 + 40);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  uint64_t v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((double *)a1, v6);
}

{
  Swift::Int v2;
  uint64_t vars8;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t (*)(Swift::UInt, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t (*)(Swift::UInt, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x22A68A330](*(void *)(v1 + 40), a1, 4);

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

{
  int v2;
  Swift::Int v3;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if ((a1 & 0xFF0000) == 0x20000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(HIWORD(a1) & 1);
  }
  if (HIBYTE(a1) == 2)
  {
    LOBYTE(v2) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Swift::Int v2 = HIBYTE(a1) & 1;
  }
  Hasher._combine(_:)(v2);
  uint64_t v3 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, uint64_t (*a2)(Swift::UInt, Swift::Int))
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  return a2(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt32 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t *a1)
{
  Swift::UInt64 v3 = *a1;
  Swift::UInt v2 = a1[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    Swift::UInt v4 = a1[2];
    if (v4) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (a1[4]) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
  Swift::UInt v4 = a1[2];
  if (!v4) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v4);
  if (a1[4])
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined release of REEventBus.DispatcherHandle((uint64_t)a1);
    goto LABEL_8;
  }
LABEL_7:
  Hasher._combine(_:)(0);
LABEL_8:
  Swift::Int v5 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt16 a1, Swift::UInt a2, unsigned int a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  if ((a3 & 0xFF00) == 0x200)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((a3 >> 8) & 1);
  }
  if ((a3 & 0xFF0000) == 0x20000)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    int v6 = HIWORD(a3) & 1;
  }
  Hasher._combine(_:)(v6);
  Swift::Int v7 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3 & 0xFFFF01, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(a1);
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3 & 0x101, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    id v2 = a1;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v3 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v7 = ~v4;
    uint64_t v8 = *a1;
    uint64_t v9 = *(void *)(v2 + 48);
    do
    {
      uint64_t v10 = (void *)(v9 + 40 * v5);
      if (*v10 != v8) {
        goto LABEL_4;
      }
      uint64_t v12 = v10[1];
      uint64_t v11 = v10[2];
      uint64_t v13 = v10[3];
      uint64_t v14 = v10[4];
      uint64_t v15 = a1[1];
      if (v12)
      {
        if (!v15 || v12 != v15) {
          goto LABEL_4;
        }
      }
      else if (v15)
      {
        goto LABEL_4;
      }
      uint64_t v16 = a1[2];
      if (v11)
      {
        if (!v16 || v11 != v16) {
          goto LABEL_4;
        }
      }
      else if (v16)
      {
        goto LABEL_4;
      }
      uint64_t v17 = a1[4];
      if (v14)
      {
        if (v17)
        {
          BOOL v18 = v13 == a1[3] && v14 == v17;
          if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            return v5;
          }
        }
      }
      else if (!v17)
      {
        return v5;
      }
LABEL_4:
      unint64_t v5 = (v5 + 1) & v7;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x22A689800](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFStringRef(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    uint64_t v7 = v6;
    uint64_t v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      unint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        uint64_t v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        uint64_t v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = *(void *)(v11 + 56);
    char v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      uint64_t v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      uint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  long long v15;
  long long v16;
  long long v17;
  unsigned __int16 v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  _OWORD v29[7];
  uint64_t v30;

  uint64_t v3 = *(_OWORD *)(a1 + 64);
  uint64_t v4 = *(_OWORD *)(a1 + 96);
  v29[5] = *(_OWORD *)(a1 + 80);
  v29[6] = v4;
  uint64_t v5 = *(_OWORD *)(a1 + 16);
  v29[0] = *(_OWORD *)a1;
  uint64_t v6 = *(_OWORD *)(a1 + 32);
  uint64_t v7 = *(_OWORD *)(a1 + 48);
  v29[1] = v5;
  v29[2] = v6;
  uint64_t v30 = *(void *)(a1 + 112);
  v29[3] = v7;
  v29[4] = v3;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    do
    {
      uint64_t v11 = *(void *)(v2 + 48) + 120 * v9;
      uint64_t v12 = *(void *)(v11 + 8);
      uint64_t v13 = *(unsigned char *)(v11 + 16);
      uint64_t v14 = *(_WORD *)(v11 + 17);
      uint64_t v19 = *(_WORD *)v11;
      uint64_t v20 = v12;
      uint64_t v21 = v13;
      unint64_t v22 = v14;
      char v15 = *(_OWORD *)(v11 + 40);
      unint64_t v23 = *(_OWORD *)(v11 + 24);
      unint64_t v24 = v15;
      uint64_t v16 = *(_OWORD *)(v11 + 72);
      unint64_t v25 = *(_OWORD *)(v11 + 56);
      int64_t v26 = v16;
      uint64_t v17 = *(_OWORD *)(v11 + 104);
      int v27 = *(_OWORD *)(v11 + 88);
      uint64_t v28 = v17;
      if (specialized static CustomMaterial.CustomShaderParameters.== infix(_:_:)(&v19, (unsigned __int16 *)v29)) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    uint64_t v8 = *(void *)(a1 + 16);
    if (*(void *)(*(void *)(v7 + 8 * result) + 16) != v8)
    {
      unint64_t v9 = ~v5;
      for (unint64_t result = (result + 1) & v9;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v9)
      {
        if (*(void *)(*(void *)(v7 + 8 * result) + 16) == v8) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  id v10;
  char v11;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = v2;
    uint64_t v8 = ~v4;
    do
    {
      unint64_t v9 = *(void **)(*(void *)(v6 + 48) + 8 * v5);
      if (v9)
      {
        if (a1)
        {
          type metadata accessor for CFStringRef(0);
          lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
          uint64_t v10 = v9;
          uint64_t v11 = static _CFObject.== infix(_:_:)();

          if (v11) {
            return v5;
          }
        }
      }
      else if (!a1)
      {
        return v5;
      }
      uint64_t v5 = (v5 + 1) & v8;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          char v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned int a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    unsigned int v7 = HIBYTE(a1);
    do
    {
      uint64_t v8 = (unsigned __int16 *)(*(void *)(v2 + 48) + 4 * result);
      if (*v8 == (unsigned __int16)a1)
      {
        int v9 = *((unsigned __int8 *)v8 + 2);
        int v10 = *((unsigned __int8 *)v8 + 3);
        if (v9 == 2)
        {
          if (BYTE2(a1) != 2) {
            goto LABEL_4;
          }
        }
        else if (BYTE2(a1) == 2 || (HIWORD(a1) & 1) != (v9 & 1))
        {
          goto LABEL_4;
        }
        if (v10 == 2)
        {
          if (v7 == 2) {
            return result;
          }
        }
        else
        {
          BOOL v11 = (v10 & 1) == 0;
          if (v7 != 2 && ((v11 ^ ((a1 & 0x1000000) >> 24)) & 1) != 0) {
            return result;
          }
        }
      }
LABEL_4:
      unint64_t result = (result + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int16 a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t result = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v8 = ~v6;
    do
    {
      int v9 = (unsigned __int16 *)(*(void *)(v4 + 48) + 24 * result);
      if (*v9 == a1)
      {
        int v10 = *((unsigned __int8 *)v9 + 17);
        int v11 = *((unsigned __int8 *)v9 + 18);
        if (v9[8])
        {
          if ((a3 & 1) == 0) {
            goto LABEL_4;
          }
        }
        else if ((a3 & 1) != 0 || *((void *)v9 + 1) != a2)
        {
          goto LABEL_4;
        }
        if (v10 == 2)
        {
          if (BYTE1(a3) != 2) {
            goto LABEL_4;
          }
        }
        else if (BYTE1(a3) == 2 || ((a3 >> 8) & 1) != (v10 & 1))
        {
          goto LABEL_4;
        }
        if (v11 == 2)
        {
          if (BYTE2(a3) == 2) {
            return result;
          }
        }
        else
        {
          BOOL v12 = (v11 & 1) == 0;
          if (BYTE2(a3) != 2 && ((v12 ^ ((a3 & 0x10000) >> 16)) & 1) != 0) {
            return result;
          }
        }
      }
LABEL_4:
      unint64_t result = (result + 1) & v8;
    }
    while (((*(void *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      uint64_t v13 = (void *)(v12 + 24 * v7);
      if (*v13 == a1)
      {
        BOOL v14 = v13[1] == a2 && v13[2] == a3;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  void *v14;

  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t i = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    int v10 = *(void *)(v4 + 48);
    uint64_t v11 = (void *)(v10 + 24 * i);
    if ((*v11 != a1 || v11[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v13 = ~v6;
      for (unint64_t i = (i + 1) & v13; ((*(void *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
      {
        BOOL v14 = (void *)(v10 + 24 * i);
        if (*v14 == a1 && v14[1] == a2) {
          break;
        }
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(double *a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    uint64_t v7 = *(void *)(v2 + 48);
    double v8 = *a1;
    uint64_t v9 = *((void *)a1 + 1);
    do
    {
      uint64_t v10 = v7 + 48 * v4;
      double v11 = *(double *)(v10 + 16);
      uint64_t v13 = *(void *)(v10 + 24);
      uint64_t v12 = *(void *)(v10 + 32);
      int v14 = *(unsigned __int16 *)(v10 + 40);
      int v15 = *(_DWORD *)(v10 + 44);
      BOOL v16 = *(void *)v10 == *(void *)&v8 && *(void *)(v10 + 8) == v9;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || v11 != a1[2]) {
        goto LABEL_4;
      }
      uint64_t v17 = *((void *)a1 + 4);
      if (v12)
      {
        if (!v17) {
          goto LABEL_4;
        }
        BOOL v18 = v13 == *((void *)a1 + 3) && v12 == v17;
        if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_4;
        }
      }
      else if (v17)
      {
        goto LABEL_4;
      }
      if (v14 == *((unsigned __int16 *)a1 + 20) && v15 == *((_DWORD *)a1 + 11)) {
        return v4;
      }
LABEL_4:
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v20 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt64>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v34 = a2;
    char v33 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v34 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v33;
            goto LABEL_36;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v32;
          }
          uint64_t v3 = v33;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unint64_t v20 = v9[v8];
        if (!v20)
        {
          int64_t v21 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          unint64_t v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              unint64_t v20 = v9[v8];
              ++v21;
              if (v20) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  long long *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  long long v34;
  long long v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol & Decodable & Encodable.Type>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    uint64_t v32 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v32;
            goto LABEL_36;
          }
          uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
          if (v31 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v31;
          }
          uint64_t v3 = v32;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unint64_t v20 = v9[v8];
        if (!v20)
        {
          int64_t v21 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          unint64_t v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              unint64_t v20 = v9[v8];
              ++v21;
              if (v20) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      uint64_t v23 = (long long *)(*(void *)(v5 + 56) + 32 * v18);
      char v34 = *v23;
      uint64_t v35 = v23[1];
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v25) & ~*(void *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v27 = 0;
        char v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          unint64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          BOOL v30 = *(void *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v22;
      uint64_t v16 = (_OWORD *)(*(void *)(v7 + 56) + 32 * v15);
      *uint64_t v16 = v34;
      v16[1] = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [ActionEventType : RESubscriptionHandle]>);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        int64_t v21 = v20 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_40;
        }
        if (v8 >= v13)
        {
LABEL_31:
          if ((v34 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v33;
            goto LABEL_38;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v32;
          }
          uint64_t v3 = v33;
          *(void *)(v5 + 16) = 0;
          break;
        }
        uint64_t v23 = v9[v8];
        if (!v23)
        {
          uint64_t v24 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              int64_t v8 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_31;
              }
              uint64_t v23 = v9[v8];
              ++v24;
              if (v23) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        unint64_t v12 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      uint64_t v25 = 8 * v21;
      unint64_t v26 = *(void *)(*(void *)(v5 + 48) + v25);
      unint64_t v27 = *(void *)(*(void *)(v5 + 56) + v25);
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v17 == v29;
          if (v17 == v29) {
            unint64_t v17 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v17);
        }
        while (v31 == -1);
        unint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v7 + 48) + v19) = v26;
      *(void *)(*(void *)(v7 + 56) + v19) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ActionEventType, RESubscriptionHandle>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    int64_t v8 = 0;
    char v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        uint64_t result = v5 + 64;
        if (v8 >= v12)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v2;
            goto LABEL_36;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *char v34 = -1 << v32;
          }
          uint64_t v3 = v2;
          *(void *)(v5 + 16) = 0;
          break;
        }
        uint64_t v19 = v34[v8];
        if (!v19)
        {
          unint64_t v20 = v8 + 1;
          if (v8 + 1 >= v12) {
            goto LABEL_29;
          }
          uint64_t v19 = v34[v20];
          if (!v19)
          {
            while (1)
            {
              int64_t v8 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                break;
              }
              if (v8 >= v12) {
                goto LABEL_29;
              }
              uint64_t v19 = v34[v8];
              ++v20;
              if (v19) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        uint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v22 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v17);
      uint64_t v23 = *v22;
      uint64_t v24 = v22[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
      unint64_t v15 = (void *)(*(void *)(v7 + 56) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  long long v31;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, (_:_:_:_:_:_:_:_:)>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    BOOL v30 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_40;
        }
        if (v8 >= v13)
        {
LABEL_31:
          if ((a2 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v30;
            goto LABEL_38;
          }
          unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
          if (v29 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v29;
          }
          uint64_t v3 = v30;
          *(void *)(v5 + 16) = 0;
          break;
        }
        uint64_t v22 = v9[v8];
        if (!v22)
        {
          uint64_t v23 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v22 = v9[v23];
          if (!v22)
          {
            while (1)
            {
              int64_t v8 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_31;
              }
              uint64_t v22 = v9[v8];
              ++v23;
              if (v22) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      uint64_t v31 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v7 + 48) + 8 * v18) = v24;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  long long v40;
  long long v41;
  long long v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type)>);
  char v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v2;
  unsigned __int8 v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1)) {
      goto LABEL_40;
    }
    if (v14 >= v11) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    uint64_t v25 = *(void *)(v38 + 8 * v14);
    if (!v25)
    {
      unint64_t v26 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        uint64_t v3 = v37;
        if ((v39 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      uint64_t v25 = *(void *)(v38 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          uint64_t v14 = v26 + 1;
          if (__OFADD__(v26, 1)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_31;
          }
          uint64_t v25 = *(void *)(v38 + 8 * v14);
          ++v26;
          if (v25) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    uint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_21:
    unint64_t v27 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    unint64_t v29 = *v27;
    char v28 = v27[1];
    BOOL v30 = *(void *)(v5 + 56) + 56 * v22;
    uint64_t v42 = *(_OWORD *)(v30 + 16);
    float v40 = *(_OWORD *)v30;
    Swift::UInt32 v41 = *(_OWORD *)(v30 + 32);
    uint64_t v31 = *(void *)(v30 + 48);
    if ((v39 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v32 = 0;
      char v33 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        char v34 = v17 == v33;
        if (v17 == v33) {
          unint64_t v17 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v12 + 8 * v17);
      }
      while (v35 == -1);
      unint64_t v18 = __clz(__rbit64(~v35)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *uint64_t v19 = v29;
    v19[1] = v28;
    unint64_t v20 = *(void *)(v7 + 56) + 56 * v18;
    *(_OWORD *)unint64_t v20 = v40;
    *(_OWORD *)(v20 + 16) = v42;
    *(_OWORD *)(v20 + 32) = v41;
    *(void *)(v20 + 48) = v31;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  char v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  long long v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, EntityAction.Type>);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v8 + 63) >> 6;
    int64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    unint64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        uint64_t v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v23 = v22 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1)) {
          goto LABEL_38;
        }
        if (v15 >= v12)
        {
LABEL_31:
          swift_release();
          uint64_t v3 = v2;
          if (v36)
          {
            uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
            if (v35 >= 64) {
              bzero((void *)(v5 + 64), ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              *uint64_t v9 = -1 << v35;
            }
            *(void *)(v5 + 16) = 0;
          }
          break;
        }
        uint64_t v25 = v9[v15];
        if (!v25)
        {
          unint64_t v26 = v15 + 1;
          if (v15 + 1 >= v12) {
            goto LABEL_31;
          }
          uint64_t v25 = v9[v26];
          if (!v25)
          {
            while (1)
            {
              unint64_t v15 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                break;
              }
              if (v15 >= v12) {
                goto LABEL_31;
              }
              uint64_t v25 = v9[v15];
              ++v26;
              if (v25) {
                goto LABEL_20;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_20:
        uint64_t v11 = (v25 - 1) & v25;
        uint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      unint64_t v27 = 16 * v23;
      char v28 = (uint64_t *)(*(void *)(v5 + 48) + v27);
      BOOL v30 = *v28;
      unint64_t v29 = v28[1];
      uint64_t v37 = *(_OWORD *)(*(void *)(v5 + 56) + v27);
      if ((v36 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        uint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          char v33 = v18 == v32;
          if (v18 == v32) {
            unint64_t v18 = 0;
          }
          v31 |= v33;
          char v34 = *(void *)(v13 + 8 * v18);
        }
        while (v34 == -1);
        uint64_t v19 = __clz(__rbit64(~v34)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      unint64_t v20 = 16 * v19;
      int64_t v21 = (void *)(*(void *)(v7 + 48) + v20);
      *int64_t v21 = v30;
      v21[1] = v29;
      *(_OWORD *)(*(void *)(v7 + 56) + v20) = v37;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  long long *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  long long v33[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnsafeRawPointer, ActionHandlerProtocol>);
  uint64_t v32 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_41;
        }
        if (v8 >= v13)
        {
LABEL_32:
          if ((v32 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v31;
            goto LABEL_39;
          }
          BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
          if (v30 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v30;
          }
          uint64_t v3 = v31;
          *(void *)(v5 + 16) = 0;
          break;
        }
        uint64_t v19 = v9[v8];
        if (!v19)
        {
          unint64_t v20 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_32;
          }
          uint64_t v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              int64_t v8 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_32;
              }
              uint64_t v19 = v9[v8];
              ++v20;
              if (v19) {
                goto LABEL_19;
              }
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v22 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
      if (v32) {
        outlined init with take of BindableDataInternal(v22, (uint64_t)v33);
      }
      else {
        outlined init with copy of __REAssetService((uint64_t)v22, (uint64_t)v33);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          char v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      uint64_t result = outlined init with take of BindableDataInternal(v33, *(void *)(v7 + 56) + 40 * v15);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_39:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  long long v31;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, Component.Type>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    BOOL v30 = a2;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v30 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v2;
            goto LABEL_36;
          }
          unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
          if (v29 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v29;
          }
          uint64_t v3 = v2;
          *(void *)(v5 + 16) = 0;
          break;
        }
        uint64_t v19 = v9[v8];
        if (!v19)
        {
          unint64_t v20 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          uint64_t v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              int64_t v8 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              uint64_t v19 = v9[v8];
              ++v20;
              if (v19) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v31 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          unint64_t v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v15) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, REComponentClassPtr>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v34 = a2;
    char v33 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v34 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v33;
            goto LABEL_36;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v32;
          }
          uint64_t v3 = v33;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unint64_t v20 = v9[v8];
        if (!v20)
        {
          int64_t v21 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          unint64_t v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              unint64_t v20 = v9[v8];
              ++v21;
              if (v20) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  long long v41;
  long long v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, ComponentInfo>);
  uint64_t v37 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v35 = (void *)(v5 + 64);
    char v36 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    char v34 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_40;
        }
        uint64_t result = (uint64_t)v35;
        if (v8 >= v34)
        {
LABEL_31:
          if ((v37 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v2;
            goto LABEL_38;
          }
          char v33 = 1 << *(unsigned char *)(v5 + 32);
          if (v33 >= 64) {
            bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v35 = -1 << v33;
          }
          uint64_t v3 = v2;
          *(void *)(v5 + 16) = 0;
          break;
        }
        int64_t v21 = v35[v8];
        if (!v21)
        {
          uint64_t v22 = v8 + 1;
          if (v8 + 1 >= v34) {
            goto LABEL_31;
          }
          int64_t v21 = v35[v22];
          if (!v21)
          {
            while (1)
            {
              int64_t v8 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                break;
              }
              if (v8 >= v34) {
                goto LABEL_31;
              }
              int64_t v21 = v35[v8];
              ++v22;
              if (v21) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v24 = *(void *)(v5 + 56) + 80 * v19;
      uint64_t v25 = *(void *)v24;
      unint64_t v26 = *(void *)(v24 + 24);
      unint64_t v27 = *(_DWORD *)(v24 + 32);
      float v40 = *(unsigned char *)(v24 + 36);
      char v39 = *(void *)(v24 + 40);
      unsigned __int8 v38 = *(unsigned char *)(v24 + 48);
      char v28 = *(void *)(v24 + 56);
      Swift::UInt32 v41 = *(_OWORD *)(v24 + 64);
      uint64_t v42 = *(_OWORD *)(v24 + 8);
      if ((v37 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v29 = 0;
        BOOL v30 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v31 = v15 == v30;
          if (v15 == v30) {
            unint64_t v15 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v15);
        }
        while (v32 == -1);
        uint64_t v16 = __clz(__rbit64(~v32)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v23;
      unint64_t v17 = *(void *)(v7 + 56) + 80 * v16;
      *(void *)unint64_t v17 = v25;
      *(_OWORD *)(v17 + 8) = v42;
      *(void *)(v17 + 24) = v26;
      *(_DWORD *)(v17 + 32) = v27;
      *(unsigned char *)(v17 + 36) = v40;
      *(void *)(v17 + 40) = v39;
      *(unsigned char *)(v17 + 48) = v38;
      *(void *)(v17 + 56) = v28;
      *(_OWORD *)(v17 + 64) = v41;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v36;
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  long long v40;
  long long v41;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ComponentInfo>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v32 = v3;
    int64_t v8 = 0;
    char v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    char v33 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_40;
        }
        uint64_t result = v5 + 64;
        if (v8 >= v33)
        {
LABEL_31:
          if ((a2 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v32;
            goto LABEL_38;
          }
          uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
          if (v31 >= 64) {
            bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *char v34 = -1 << v31;
          }
          uint64_t v3 = v32;
          *(void *)(v5 + 16) = 0;
          break;
        }
        int64_t v21 = v34[v8];
        if (!v21)
        {
          uint64_t v22 = v8 + 1;
          if (v8 + 1 >= v33) {
            goto LABEL_31;
          }
          int64_t v21 = v34[v22];
          if (!v21)
          {
            while (1)
            {
              int64_t v8 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                break;
              }
              if (v8 >= v33) {
                goto LABEL_31;
              }
              int64_t v21 = v34[v8];
              ++v22;
              if (v21) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v24 = *(void *)(v5 + 56) + 80 * v19;
      char v39 = *(void *)v24;
      uint64_t v25 = *(void *)(v24 + 24);
      uint64_t v37 = *(unsigned char *)(v24 + 36);
      unsigned __int8 v38 = *(_DWORD *)(v24 + 32);
      char v36 = *(void *)(v24 + 40);
      uint64_t v35 = *(unsigned char *)(v24 + 48);
      unint64_t v26 = *(void *)(v24 + 56);
      float v40 = *(_OWORD *)(v24 + 64);
      Swift::UInt32 v41 = *(_OWORD *)(v24 + 8);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v27 = 0;
        char v28 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v29 = v15 == v28;
          if (v15 == v28) {
            unint64_t v15 = 0;
          }
          v27 |= v29;
          BOOL v30 = *(void *)(v12 + 8 * v15);
        }
        while (v30 == -1);
        uint64_t v16 = __clz(__rbit64(~v30)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v23;
      unint64_t v17 = *(void *)(v7 + 56) + 80 * v16;
      *(void *)unint64_t v17 = v39;
      *(_OWORD *)(v17 + 8) = v41;
      *(void *)(v17 + 24) = v25;
      *(_DWORD *)(v17 + 32) = v38;
      *(unsigned char *)(v17 + 36) = v37;
      *(void *)(v17 + 40) = v36;
      *(unsigned char *)(v17 + 48) = v35;
      *(void *)(v17 + 56) = v26;
      *(_OWORD *)(v17 + 64) = v40;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __USDARReferenceProvidingPlugin>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileARReferenceProvidingPlugin>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34[8];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver.Weak<__RealityFileURLResolver>>);
  char v33 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_41;
        }
        if (v8 >= v13)
        {
LABEL_32:
          if ((v33 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v2;
            goto LABEL_39;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v32;
          }
          uint64_t v3 = v2;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unint64_t v20 = v9[v8];
        if (!v20)
        {
          int64_t v21 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_32;
          }
          unint64_t v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_32;
              }
              unint64_t v20 = v9[v8];
              ++v21;
              if (v20) {
                goto LABEL_19;
              }
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(v5 + 56) + v22;
      if (v33) {
        outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(v24, (uint64_t)v34);
      }
      else {
        outlined init with copy of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(v24, (uint64_t)v34);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      uint64_t result = outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>((uint64_t)v34, *(void *)(v7 + 56) + v16);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_39:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IKComponent.Solver.ID, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v2;
            goto LABEL_36;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v32;
          }
          uint64_t v3 = v2;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unint64_t v20 = v9[v8];
        if (!v20)
        {
          int64_t v21 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          unint64_t v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              unint64_t v20 = v9[v8];
              ++v21;
              if (v20) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Int>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v2;
            goto LABEL_36;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v32;
          }
          uint64_t v3 = v2;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unint64_t v20 = v9[v8];
        if (!v20)
        {
          int64_t v21 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          unint64_t v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v8 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              unint64_t v20 = v9[v8];
              ++v21;
              if (v20) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  long long v32;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol.Type>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = a2;
    BOOL v30 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_38;
        }
        if (v8 >= v13)
        {
LABEL_29:
          if ((v31 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v30;
            goto LABEL_36;
          }
          unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
          if (v29 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v29;
          }
          uint64_t v3 = v30;
          *(void *)(v5 + 16) = 0;
          break;
        }
        uint64_t v19 = v9[v8];
        if (!v19)
        {
          unint64_t v20 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_29;
          }
          uint64_t v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              int64_t v8 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_29;
              }
              uint64_t v19 = v9[v8];
              ++v20;
              if (v19) {
                goto LABEL_19;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v17);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          unint64_t v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v15) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_36:
  *uint64_t v3 = v7;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  long long v23;
  long long v24;
  _OWORD v25[2];
  _OWORD v26[2];
  uint64_t v27;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REEventBus.DispatcherHandle, Any>);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v8 = (void *)(v5 + 64);
    uint64_t v9 = -1;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }
      else
      {
        if (__OFADD__(v13++, 1)) {
          goto LABEL_28;
        }
        if (v13 >= v11)
        {
LABEL_21:
          swift_release();
          if (a2)
          {
            uint64_t v22 = 1 << *(unsigned char *)(v5 + 32);
            if (v22 >= 64) {
              bzero((void *)(v5 + 64), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              *int64_t v8 = -1 << v22;
            }
            *(void *)(v5 + 16) = 0;
          }
          break;
        }
        unint64_t v17 = v8[v13];
        if (!v17)
        {
          unint64_t v18 = v13 + 1;
          if (v13 + 1 >= v11) {
            goto LABEL_21;
          }
          unint64_t v17 = v8[v18];
          if (!v17)
          {
            while (1)
            {
              int64_t v13 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                break;
              }
              if (v13 >= v11) {
                goto LABEL_21;
              }
              unint64_t v17 = v8[v13];
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
            __break(1u);
LABEL_28:
            __break(1u);
            return result;
          }
          ++v13;
        }
LABEL_18:
        uint64_t v10 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      uint64_t v19 = *(void *)(v5 + 48) + 40 * v15;
      unint64_t v20 = *(void *)(v19 + 32);
      int64_t v21 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v15);
      uint64_t v23 = *(_OWORD *)v19;
      uint64_t v24 = *(_OWORD *)(v19 + 16);
      if (a2)
      {
        outlined init with take of Any(v21, v25);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v21, (uint64_t)v25);
        swift_bridgeObjectRetain();
      }
      v26[0] = v23;
      v26[1] = v24;
      unint64_t v27 = v20;
      uint64_t result = (uint64_t)specialized _NativeDictionary._unsafeInsertNew(key:value:)((Swift::UInt64 *)v26, v25, v6);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnimationResource>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  char v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1)) {
      goto LABEL_40;
    }
    if (v14 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v36 + 8 * v14);
    if (!v24)
    {
      uint64_t v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        uint64_t v3 = v35;
        if ((v37 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      uint64_t v24 = *(void *)(v36 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          uint64_t v14 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            break;
          }
          if (v14 >= v11) {
            goto LABEL_31;
          }
          uint64_t v24 = *(void *)(v36 + 8 * v14);
          ++v25;
          if (v24) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    uint64_t v10 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    unint64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    char v28 = *v26;
    unint64_t v27 = v26[1];
    unint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v32 = v17 == v31;
        if (v17 == v31) {
          unint64_t v17 = 0;
        }
        v30 |= v32;
        char v33 = *(void *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *uint64_t v19 = v28;
    v19[1] = v27;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  char v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  uint64_t i;
  char v42;
  long long v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  long long v48;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioMixGroup>);
  uint64_t v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  float v40 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unsigned __int8 v38 = v2;
  char v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v13++, 1)) {
      goto LABEL_40;
    }
    if (v13 >= v39) {
      break;
    }
    uint64_t v23 = v40;
    uint64_t v24 = v40[v13];
    if (!v24)
    {
      uint64_t v25 = v13 + 1;
      if (v13 + 1 >= v39)
      {
LABEL_31:
        swift_release();
        uint64_t v3 = v38;
        if ((v42 & 1) == 0) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      uint64_t v24 = v40[v25];
      if (!v24)
      {
        while (1)
        {
          int64_t v13 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            break;
          }
          if (v13 >= v39) {
            goto LABEL_31;
          }
          uint64_t v24 = v40[v13];
          ++v25;
          if (v24) {
            goto LABEL_20;
          }
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v13;
    }
LABEL_20:
    uint64_t v10 = (v24 - 1) & v24;
    int64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_21:
    unint64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    char v28 = *v26;
    unint64_t v27 = v26[1];
    unint64_t v29 = *(void *)(v5 + 56) + 80 * v21;
    unint64_t v43 = *(_OWORD *)v29;
    BOOL v30 = *(unsigned char *)(v29 + 16);
    uint64_t v31 = *(void *)(v29 + 24);
    uint64_t v46 = *(unsigned char *)(v29 + 33);
    uint64_t v47 = *(unsigned char *)(v29 + 32);
    uint64_t v32 = *(void *)(v29 + 48);
    long long v45 = *(void *)(v29 + 40);
    uint64_t v48 = *(_OWORD *)(v29 + 56);
    char v44 = *(unsigned char *)(v29 + 72);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      char v34 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v35 = v16 == v34;
        if (v16 == v34) {
          uint64_t v16 = 0;
        }
        v33 |= v35;
        char v36 = *(void *)(v11 + 8 * v16);
      }
      while (v36 == -1);
      unint64_t v17 = __clz(__rbit64(~v36)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v28;
    v18[1] = v27;
    uint64_t v19 = *(void *)(v7 + 56) + 80 * v17;
    *(_OWORD *)uint64_t v19 = v43;
    *(unsigned char *)(v19 + 16) = v30;
    *(void *)(v19 + 24) = v31;
    *(unsigned char *)(v19 + 32) = v47;
    *(unsigned char *)(v19 + 33) = v46;
    *(void *)(v19 + 40) = v45;
    *(void *)(v19 + 48) = v32;
    *(_OWORD *)(v19 + 56) = v48;
    *(unsigned char *)(v19 + 72) = v44;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  uint64_t v23 = v40;
  if ((v42 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v37;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, String>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    char v33 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        int64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          int64_t v21 = v34[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  *char v34 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                int64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      char v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      unint64_t v29 = *v28;
      BOOL v30 = v28[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      char *v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, OpaquePointer>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v35 = a2;
    char v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    char v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        uint64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, MaterialParameters.Value>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of MaterialParameters.Value);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned char v32[16];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, __RKEntityAction.ActionStateObservation>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        unint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_34;
        }
        uint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_34;
          }
          uint64_t v19 = v9[v8];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_41;
              }
              BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v30;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v13) {
                  goto LABEL_34;
                }
                uint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v22 = *(void *)(v5 + 56) + 16 * v17;
      if (a2) {
        outlined init with take of __RKEntityAction.ActionStateObservation(v22, (uint64_t)v32);
      }
      else {
        outlined init with copy of __RKEntityAction.ActionStateObservation(v22, (uint64_t)v32);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          char v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      uint64_t result = outlined init with take of __RKEntityAction.ActionStateObservation((uint64_t)v32, *(void *)(v7 + 56) + 16 * v15);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Entity, [__RKEntityInteractionSpecification]>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v31 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        int64_t v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          int64_t v21 = v32[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v32 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                int64_t v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = 8 * v19;
      char v28 = *(void *)(*(void *)(v5 + 48) + v27);
      unint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(void *)(v28 + 16));
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    char v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        unint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        uint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          uint64_t v19 = v34[v13];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                uint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        uint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  Swift::UInt32 v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  char v39 = v2;
  float v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    uint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      uint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            uint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    uint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    char v34 = *v32;
    char v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    char v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v29 = v16 == v28;
        if (v16 == v28) {
          uint64_t v16 = 0;
        }
        v27 |= v29;
        BOOL v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  unsigned __int8 v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Int64>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int64>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v35 = a2;
    char v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    char v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        uint64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::UInt16 v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt16 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt8 v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  Swift::UInt32 *v42;
  Swift::UInt32 v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  Swift::UInt32 *v49;
  Swift::UInt32 v50;
  void *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  int64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  int64_t v68;
  char v69;
  char v70;
  Swift::UInt16 v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  Swift::UInt v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>>);
  uint64_t v66 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_57;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v63 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v61 = v2;
  uint64_t v62 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v65 = v6 + 64;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  uint64_t v74 = v7;
  os_log_type_t v64 = v5;
  while (1)
  {
    if (v10)
    {
      uint64_t v67 = (v10 - 1) & v10;
      long long v68 = v12;
      unint64_t v17 = __clz(__rbit64(v10)) | (v12 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      return result;
    }
    if (v18 >= v62) {
      break;
    }
    uint64_t v19 = v63[v18];
    unint64_t v20 = v12 + 1;
    if (!v19)
    {
      unint64_t v20 = v12 + 2;
      if (v12 + 2 >= v62) {
        goto LABEL_50;
      }
      uint64_t v19 = v63[v20];
      if (!v19)
      {
        int64_t v21 = v12 + 3;
        if (v12 + 3 >= v62)
        {
LABEL_50:
          swift_release();
          uint64_t v3 = v61;
          uint64_t v7 = v74;
          if ((v66 & 1) == 0) {
            goto LABEL_57;
          }
          goto LABEL_53;
        }
        uint64_t v19 = v63[v21];
        if (!v19)
        {
          while (1)
          {
            unint64_t v20 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_59;
            }
            if (v20 >= v62) {
              goto LABEL_50;
            }
            uint64_t v19 = v63[v20];
            ++v21;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v12 + 3;
      }
    }
LABEL_21:
    uint64_t v67 = (v19 - 1) & v19;
    long long v68 = v20;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_22:
    uint64_t v22 = *(void *)(v5 + 56);
    uint64_t v23 = *(void *)(v5 + 48) + 120 * v17;
    uint64_t v24 = *(_WORD *)v23;
    long long v75 = *(void *)(v23 + 8);
    uint64_t v25 = *(unsigned __int8 *)(v23 + 16);
    uint64_t v70 = *(unsigned char *)(v23 + 17);
    uint64_t v76 = *(unsigned __int8 *)(v23 + 18);
    char v77 = *(void *)(v23 + 24);
    unint64_t v26 = *(void *)(v23 + 40);
    long long v78 = *(void *)(v23 + 32);
    unint64_t v27 = *(void *)(v23 + 56);
    uint64_t v79 = *(void *)(v23 + 48);
    uint64_t v80 = *(void **)(v23 + 64);
    char v28 = *(void *)(v23 + 80);
    int64_t v81 = *(void *)(v23 + 72);
    unint64_t v29 = *(void *)(v23 + 88);
    BOOL v30 = *(void *)(v23 + 96);
    uint64_t v32 = *(void *)(v23 + 104);
    uint64_t v31 = *(void **)(v23 + 112);
    char v33 = *(void *)(v22 + 8 * v17);
    if ((v66 & 1) == 0)
    {
      outlined copy of __MaterialResource.CoreMaterialFunction?(v77, v78, v26, v79, v27, v80);
      outlined copy of __MaterialResource.CoreMaterialFunction?(v81, v28, v29, v30, v32, v31);
      swift_retain();
    }
    long long v73 = v33;
    Hasher.init(_seed:)();
    uint64_t v71 = v24;
    Hasher._combine(_:)(v24);
    int v69 = v25;
    if (v25)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v75);
    }
    char v34 = v29;
    uint64_t v35 = v26;
    char v36 = v30;
    uint64_t v37 = v28;
    uint64_t v72 = v31;
    if (v76 == 2)
    {
      unsigned __int8 v38 = 0;
    }
    else
    {
      unsigned __int8 v38 = v76 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v38);
    if (v26)
    {
      char v39 = v36;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v77);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      float v40 = (void *)REAssetHandleCopyAssetIdentifierString();
      type metadata accessor for CFStringRef(0);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
      _CFObject.hash(into:)();

      Hasher._combine(_:)(*(void *)(v27 + 16));
      Swift::UInt32 v41 = *(void *)(v27 + 16);
      if (v41)
      {
        uint64_t v42 = (Swift::UInt32 *)(v27 + 32);
        do
        {
          unint64_t v43 = *v42++;
          Hasher._combine(_:)(v43);
          --v41;
        }
        while (v41);
      }
      char v44 = v80;
      NSObject.hash(into:)();

      char v36 = v39;
      uint64_t v37 = v28;
      if (!v34)
      {
LABEL_40:
        Hasher._combine(_:)(0);
        long long v51 = v72;
        goto LABEL_41;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!v34) {
        goto LABEL_40;
      }
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v81);
    swift_bridgeObjectRetain();
    long long v45 = v37;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v46 = v36;
    uint64_t v47 = (void *)REAssetHandleCopyAssetIdentifierString();
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    _CFObject.hash(into:)();

    Hasher._combine(_:)(*(void *)(v32 + 16));
    uint64_t v48 = *(void *)(v32 + 16);
    if (v48)
    {
      __n128 v49 = (Swift::UInt32 *)(v32 + 32);
      do
      {
        uint64_t v50 = *v49++;
        Hasher._combine(_:)(v50);
        --v48;
      }
      while (v48);
    }
    long long v51 = v72;
    uint64_t v52 = v72;
    NSObject.hash(into:)();

    char v36 = v46;
    uint64_t v37 = v45;
LABEL_41:
    uint64_t v7 = v74;
    uint64_t result = Hasher._finalize()();
    uint64_t v53 = -1 << *(unsigned char *)(v74 + 32);
    id v54 = result & ~v53;
    uint64_t v55 = v54 >> 6;
    if (((-1 << v54) & ~*(void *)(v65 + 8 * (v54 >> 6))) != 0)
    {
      int64_t v13 = __clz(__rbit64((-1 << v54) & ~*(void *)(v65 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v14 = v73;
      unint64_t v15 = v71;
    }
    else
    {
      uint64_t v56 = 0;
      uint64_t v57 = (unint64_t)(63 - v53) >> 6;
      uint64_t v14 = v73;
      unint64_t v15 = v71;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_58;
        }
        uint64_t v58 = v55 == v57;
        if (v55 == v57) {
          uint64_t v55 = 0;
        }
        v56 |= v58;
        uint64_t v59 = *(void *)(v65 + 8 * v55);
      }
      while (v59 == -1);
      int64_t v13 = __clz(__rbit64(~v59)) + (v55 << 6);
    }
    *(void *)(v65 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t v16 = *(void *)(v74 + 48) + 120 * v13;
    *(_WORD *)uint64_t v16 = v15;
    *(void *)(v16 + 8) = v75;
    *(unsigned char *)(v16 + 16) = v69;
    *(unsigned char *)(v16 + 17) = v70;
    *(unsigned char *)(v16 + 18) = v76;
    *(void *)(v16 + 24) = v77;
    *(void *)(v16 + 32) = v78;
    *(void *)(v16 + 40) = v35;
    *(void *)(v16 + 48) = v79;
    *(void *)(v16 + 56) = v27;
    *(void *)(v16 + 64) = v80;
    *(void *)(v16 + 72) = v81;
    *(void *)(v16 + 80) = v37;
    *(void *)(v16 + 88) = v34;
    *(void *)(v16 + 96) = v36;
    *(void *)(v16 + 104) = v32;
    *(void *)(v16 + 112) = v51;
    *(void *)(*(void *)(v74 + 56) + 8 * v13) = v14;
    ++*(void *)(v74 + 16);
    uint64_t v5 = v64;
    uint64_t v10 = v67;
    unint64_t v12 = v68;
  }
  swift_release();
  uint64_t v3 = v61;
  if ((v66 & 1) == 0) {
    goto LABEL_57;
  }
LABEL_53:
  uint64_t v60 = 1 << *(unsigned char *)(v5 + 32);
  if (v60 >= 64) {
    bzero(v63, ((unint64_t)(v60 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v63 = -1 << v60;
  }
  *(void *)(v5 + 16) = 0;
LABEL_57:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::UInt16 v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt16 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt8 v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  Swift::UInt32 *v42;
  Swift::UInt32 v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  Swift::UInt32 *v49;
  Swift::UInt32 v50;
  void *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  int64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  int64_t v68;
  char v69;
  char v70;
  Swift::UInt16 v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  Swift::UInt v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, __MaterialResource>);
  uint64_t v66 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_57;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v63 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v61 = v2;
  uint64_t v62 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v65 = v6 + 64;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  uint64_t v74 = v7;
  os_log_type_t v64 = v5;
  while (1)
  {
    if (v10)
    {
      uint64_t v67 = (v10 - 1) & v10;
      long long v68 = v12;
      unint64_t v17 = __clz(__rbit64(v10)) | (v12 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      return result;
    }
    if (v18 >= v62) {
      break;
    }
    uint64_t v19 = v63[v18];
    unint64_t v20 = v12 + 1;
    if (!v19)
    {
      unint64_t v20 = v12 + 2;
      if (v12 + 2 >= v62) {
        goto LABEL_50;
      }
      uint64_t v19 = v63[v20];
      if (!v19)
      {
        int64_t v21 = v12 + 3;
        if (v12 + 3 >= v62)
        {
LABEL_50:
          swift_release();
          uint64_t v3 = v61;
          uint64_t v7 = v74;
          if ((v66 & 1) == 0) {
            goto LABEL_57;
          }
          goto LABEL_53;
        }
        uint64_t v19 = v63[v21];
        if (!v19)
        {
          while (1)
          {
            unint64_t v20 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_59;
            }
            if (v20 >= v62) {
              goto LABEL_50;
            }
            uint64_t v19 = v63[v20];
            ++v21;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v12 + 3;
      }
    }
LABEL_21:
    uint64_t v67 = (v19 - 1) & v19;
    long long v68 = v20;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_22:
    uint64_t v22 = *(void *)(v5 + 56);
    uint64_t v23 = *(void *)(v5 + 48) + 120 * v17;
    uint64_t v24 = *(_WORD *)v23;
    long long v75 = *(void *)(v23 + 8);
    uint64_t v25 = *(unsigned __int8 *)(v23 + 16);
    uint64_t v70 = *(unsigned char *)(v23 + 17);
    uint64_t v76 = *(unsigned __int8 *)(v23 + 18);
    char v77 = *(void *)(v23 + 24);
    unint64_t v26 = *(void *)(v23 + 40);
    long long v78 = *(void *)(v23 + 32);
    unint64_t v27 = *(void *)(v23 + 56);
    uint64_t v79 = *(void *)(v23 + 48);
    uint64_t v80 = *(void **)(v23 + 64);
    char v28 = *(void *)(v23 + 80);
    int64_t v81 = *(void *)(v23 + 72);
    unint64_t v29 = *(void *)(v23 + 88);
    BOOL v30 = *(void *)(v23 + 96);
    uint64_t v32 = *(void *)(v23 + 104);
    uint64_t v31 = *(void **)(v23 + 112);
    char v33 = *(void *)(v22 + 8 * v17);
    if ((v66 & 1) == 0)
    {
      outlined copy of __MaterialResource.CoreMaterialFunction?(v77, v78, v26, v79, v27, v80);
      outlined copy of __MaterialResource.CoreMaterialFunction?(v81, v28, v29, v30, v32, v31);
      swift_retain();
    }
    long long v73 = v33;
    Hasher.init(_seed:)();
    uint64_t v71 = v24;
    Hasher._combine(_:)(v24);
    int v69 = v25;
    if (v25)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v75);
    }
    char v34 = v29;
    uint64_t v35 = v26;
    char v36 = v30;
    uint64_t v37 = v28;
    uint64_t v72 = v31;
    if (v76 == 2)
    {
      unsigned __int8 v38 = 0;
    }
    else
    {
      unsigned __int8 v38 = v76 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v38);
    if (v26)
    {
      char v39 = v36;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v77);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      float v40 = (void *)REAssetHandleCopyAssetIdentifierString();
      type metadata accessor for CFStringRef(0);
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
      _CFObject.hash(into:)();

      Hasher._combine(_:)(*(void *)(v27 + 16));
      Swift::UInt32 v41 = *(void *)(v27 + 16);
      if (v41)
      {
        uint64_t v42 = (Swift::UInt32 *)(v27 + 32);
        do
        {
          unint64_t v43 = *v42++;
          Hasher._combine(_:)(v43);
          --v41;
        }
        while (v41);
      }
      char v44 = v80;
      NSObject.hash(into:)();

      char v36 = v39;
      uint64_t v37 = v28;
      if (!v34)
      {
LABEL_40:
        Hasher._combine(_:)(0);
        long long v51 = v72;
        goto LABEL_41;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!v34) {
        goto LABEL_40;
      }
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v81);
    swift_bridgeObjectRetain();
    long long v45 = v37;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v46 = v36;
    uint64_t v47 = (void *)REAssetHandleCopyAssetIdentifierString();
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
    _CFObject.hash(into:)();

    Hasher._combine(_:)(*(void *)(v32 + 16));
    uint64_t v48 = *(void *)(v32 + 16);
    if (v48)
    {
      __n128 v49 = (Swift::UInt32 *)(v32 + 32);
      do
      {
        uint64_t v50 = *v49++;
        Hasher._combine(_:)(v50);
        --v48;
      }
      while (v48);
    }
    long long v51 = v72;
    uint64_t v52 = v72;
    NSObject.hash(into:)();

    char v36 = v46;
    uint64_t v37 = v45;
LABEL_41:
    uint64_t v7 = v74;
    uint64_t result = Hasher._finalize()();
    uint64_t v53 = -1 << *(unsigned char *)(v74 + 32);
    id v54 = result & ~v53;
    uint64_t v55 = v54 >> 6;
    if (((-1 << v54) & ~*(void *)(v65 + 8 * (v54 >> 6))) != 0)
    {
      int64_t v13 = __clz(__rbit64((-1 << v54) & ~*(void *)(v65 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v14 = v73;
      unint64_t v15 = v71;
    }
    else
    {
      uint64_t v56 = 0;
      uint64_t v57 = (unint64_t)(63 - v53) >> 6;
      uint64_t v14 = v73;
      unint64_t v15 = v71;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_58;
        }
        uint64_t v58 = v55 == v57;
        if (v55 == v57) {
          uint64_t v55 = 0;
        }
        v56 |= v58;
        uint64_t v59 = *(void *)(v65 + 8 * v55);
      }
      while (v59 == -1);
      int64_t v13 = __clz(__rbit64(~v59)) + (v55 << 6);
    }
    *(void *)(v65 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t v16 = *(void *)(v74 + 48) + 120 * v13;
    *(_WORD *)uint64_t v16 = v15;
    *(void *)(v16 + 8) = v75;
    *(unsigned char *)(v16 + 16) = v69;
    *(unsigned char *)(v16 + 17) = v70;
    *(unsigned char *)(v16 + 18) = v76;
    *(void *)(v16 + 24) = v77;
    *(void *)(v16 + 32) = v78;
    *(void *)(v16 + 40) = v35;
    *(void *)(v16 + 48) = v79;
    *(void *)(v16 + 56) = v27;
    *(void *)(v16 + 64) = v80;
    *(void *)(v16 + 72) = v81;
    *(void *)(v16 + 80) = v37;
    *(void *)(v16 + 88) = v34;
    *(void *)(v16 + 96) = v36;
    *(void *)(v16 + 104) = v32;
    *(void *)(v16 + 112) = v51;
    *(void *)(*(void *)(v74 + 56) + 8 * v13) = v14;
    ++*(void *)(v74 + 16);
    uint64_t v5 = v64;
    uint64_t v10 = v67;
    unint64_t v12 = v68;
  }
  swift_release();
  uint64_t v3 = v61;
  if ((v66 & 1) == 0) {
    goto LABEL_57;
  }
LABEL_53:
  uint64_t v60 = 1 << *(unsigned char *)(v5 + 32);
  if (v60 >= 64) {
    bzero(v63, ((unint64_t)(v60 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v63 = -1 << v60;
  }
  *(void *)(v5 + 16) = 0;
LABEL_57:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<CustomMaterial.CustomShaderParameters>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<UnlitMaterial.UnlitShaderParameters>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<PhysicallyBasedMaterial.PBRShaderParameters>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, AudioPlaybackController.Internal>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<__REAsset, RESceneDescriptor>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v31 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        int64_t v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          int64_t v21 = v32[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v32 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                int64_t v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = 8 * v19;
      char v28 = *(void *)(*(void *)(v5 + 48) + v27);
      unint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(void *)(v28 + 16));
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  long long v31;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Component.Type>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    BOOL v30 = a2;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        unint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        uint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v19 = v9[v8];
          if (!v19)
          {
            unint64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v31 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v15) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::UInt *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt *v28;
  Swift::UInt v29;
  Swift::UInt v30;
  Swift::UInt v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<EmitterAssetKey, Int>);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v35 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    char v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v34) {
          goto LABEL_33;
        }
        uint64_t v22 = v35[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_33;
          }
          uint64_t v22 = v35[v13];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v36)
              {
                char v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v35 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v13 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v34) {
                  goto LABEL_33;
                }
                uint64_t v22 = v35[v13];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v23;
          }
        }
LABEL_30:
        uint64_t v10 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      char v28 = (Swift::UInt *)(*(void *)(v5 + 48) + 24 * v20);
      BOOL v30 = *v28;
      unint64_t v29 = v28[1];
      uint64_t v31 = v28[2];
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      if ((v36 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._combine(_:)(v30);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (Swift::UInt *)(*(void *)(v7 + 48) + 24 * v17);
      *unint64_t v18 = v30;
      v18[1] = v29;
      v18[2] = v31;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, SimpleMaterial.SimpleMaterialMapping>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<IKRig.Joint.ID, Int>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<IKRig.Constraint.ID, Int>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  long long *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  long long v38[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, StateMachineParameterProtocol>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  char v34 = v2;
  uint64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    uint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      outlined init with take of BindableDataInternal(v25, (uint64_t)v38);
    }
    else
    {
      outlined init with copy of __REAssetService((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    char v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v29 = 0;
      BOOL v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          char v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      uint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = outlined init with take of BindableDataInternal(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  char v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, __RKMaterialParameterBlock.Parameter>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of __RKMaterialParameterBlock.Parameter);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  unsigned __int8 v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  char v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    BOOL v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      char v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          uint64_t v16 = 0;
        }
        v25 |= v27;
        char v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t Trace;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;

  uint64_t v3 = v2;
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  unsigned __int8 v38 = *(void *)(Trace - 8);
  MEMORY[0x270FA5388](Trace - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, LoadTrace>);
  uint64_t v9 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v35 = v3;
    unint64_t v12 = 0;
    int64_t v13 = *(void *)(v8 + 64);
    uint64_t v37 = (void *)(v8 + 64);
    uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
    if (v14 < 64) {
      unint64_t v15 = ~(-1 << v14);
    }
    else {
      unint64_t v15 = -1;
    }
    uint64_t v16 = v15 & v13;
    char v36 = (unint64_t)(v14 + 63) >> 6;
    unint64_t v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        uint64_t v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v20 = v19 | (v12 << 6);
      }
      else
      {
        int64_t v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v37;
        if (v21 >= v36) {
          goto LABEL_34;
        }
        uint64_t v22 = v37[v21];
        ++v12;
        if (!v22)
        {
          unint64_t v12 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_34;
          }
          uint64_t v22 = v37[v12];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              if ((v9 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v35;
                goto LABEL_41;
              }
              char v34 = 1 << *(unsigned char *)(v8 + 32);
              if (v34 >= 64) {
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v37 = -1 << v34;
              }
              uint64_t v3 = v35;
              *(void *)(v8 + 16) = 0;
              break;
            }
            uint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                unint64_t v12 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v12 >= v36) {
                  goto LABEL_34;
                }
                uint64_t v22 = v37[v12];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v12 = v23;
          }
        }
LABEL_21:
        uint64_t v16 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      uint64_t v24 = *(unsigned int *)(*(void *)(v8 + 48) + 4 * v20);
      uint64_t v25 = *(void *)(v38 + 72);
      unint64_t v26 = *(void *)(v8 + 56) + v25 * v20;
      if (v9) {
        outlined init with take of LoadTrace(v26, (uint64_t)v7);
      }
      else {
        outlined init with copy of LoadTrace(v26, (uint64_t)v7, type metadata accessor for LoadTrace);
      }
      uint64_t result = MEMORY[0x22A68A330](*(void *)(v11 + 40), v24, 4);
      unint64_t v27 = -1 << *(unsigned char *)(v11 + 32);
      char v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          char v33 = *(void *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_DWORD *)(*(void *)(v11 + 48) + 4 * v18) = v24;
      uint64_t result = outlined init with take of LoadTrace((uint64_t)v7, *(void *)(v11 + 56) + v25 * v18);
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  long long v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  int64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    char v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    uint64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        int64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        uint64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        uint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          uint64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          uint64_t v24 = v36[v14];
          if (!v24)
          {
            uint64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                char v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  unint64_t *v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                uint64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                uint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v14 = v25;
          }
        }
LABEL_30:
        uint64_t v11 = (v24 - 1) & v24;
        uint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      BOOL v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      char v33 = *v31;
      uint64_t v32 = v31[1];
      uint64_t v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          char v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      void *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationCollectionCache>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.Configuration>);
  uint64_t v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  Swift::UInt32 v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  char v39 = v2;
  float v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    uint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      uint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            uint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    uint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    char v34 = *v32;
    char v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    char v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v29 = v16 == v28;
        if (v16 == v28) {
          uint64_t v16 = 0;
        }
        v27 |= v29;
        BOOL v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  unsigned __int8 v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Int, Entity>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  long long *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  long long v35;
  long long v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PhotogrammetrySession.Pose>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v34 = a2;
    char v33 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        uint64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v33;
                goto LABEL_38;
              }
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v31;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      uint64_t v23 = (long long *)(*(void *)(v5 + 56) + 32 * v18);
      uint64_t v35 = *v23;
      char v36 = v23[1];
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v25) & ~*(void *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v27 = 0;
        char v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          BOOL v30 = *(void *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v22;
      uint64_t v16 = (_OWORD *)(*(void *)(v7 + 56) + 32 * v15);
      *uint64_t v16 = v35;
      v16[1] = v36;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, simd_float4x4?>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v37 = a2;
    int64_t v8 = 0;
    char v39 = (uint64_t *)(v5 + 64);
    float v40 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    char v34 = -1 << v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
    char v36 = v3;
    unsigned __int8 v38 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v39;
        if (v17 >= v38) {
          goto LABEL_31;
        }
        unint64_t v18 = v39[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v38) {
            goto LABEL_31;
          }
          unint64_t v18 = v39[v8];
          if (!v18)
          {
            uint64_t v19 = v17 + 2;
            if (v19 >= v38)
            {
LABEL_31:
              if ((v37 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_38;
              }
              if (v35 >= 64) {
                bzero(v39, 8 * v38);
              }
              else {
                *char v39 = v34;
              }
              uint64_t v3 = v36;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v39[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v38) {
                  goto LABEL_31;
                }
                unint64_t v18 = v39[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = *(void *)(v5 + 56) + 80 * v16;
      int64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      char v44 = *(unsigned char *)(v20 + 64);
      uint64_t v42 = *(void *)(v20 + 48);
      unint64_t v43 = *(void *)(v20 + 56);
      uint64_t v22 = *(void *)(v20 + 32);
      Swift::UInt32 v41 = *(void *)(v20 + 40);
      uint64_t v23 = *(void *)(v20 + 16);
      uint64_t v24 = *(void *)(v20 + 24);
      uint64_t v25 = *(void *)v20;
      unint64_t v26 = *(void *)(v20 + 8);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
      char v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          char v33 = *(void *)(v12 + 8 * v29);
        }
        while (v33 == -1);
        int64_t v13 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v21;
      uint64_t v14 = *(void *)(v7 + 56) + 80 * v13;
      *(void *)uint64_t v14 = v25;
      *(void *)(v14 + 8) = v26;
      *(void *)(v14 + 16) = v23;
      *(void *)(v14 + 24) = v24;
      *(void *)(v14 + 32) = v22;
      *(void *)(v14 + 40) = v41;
      *(void *)(v14 + 48) = v42;
      *(void *)(v14 + 56) = v43;
      *(unsigned char *)(v14 + 64) = v44;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v40;
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  long long *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  long long v40[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MeshBuffers.Identifier, MeshBufferErased>);
  char v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unsigned __int8 v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  char v36 = v2;
  uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v37) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v38 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v38 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v37)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v38 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v37) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v38 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    uint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = *(void *)(v5 + 48) + 24 * v17;
    uint64_t v24 = *(void *)v22;
    uint64_t v23 = *(void *)(v22 + 8);
    uint64_t v25 = *(unsigned char *)(v22 + 16);
    unint64_t v26 = *(unsigned char *)(v22 + 17);
    unint64_t v27 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v39)
    {
      outlined init with take of BindableDataInternal(v27, (uint64_t)v40);
    }
    else
    {
      outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)v40);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    BOOL v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        char v33 = v30 == v32;
        if (v30 == v32) {
          BOOL v30 = 0;
        }
        v31 |= v33;
        char v34 = *(void *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      uint64_t v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = *(void *)(v7 + 48) + 24 * v14;
    *(void *)unint64_t v15 = v24;
    *(void *)(v15 + 8) = v23;
    *(unsigned char *)(v15 + 16) = v25;
    *(unsigned char *)(v15 + 17) = v26;
    uint64_t result = outlined init with take of BindableDataInternal(v40, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  uint64_t v19 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v19, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v19 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, BufferDescriptor>);
  float v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unsigned __int8 v38 = (uint64_t *)(v5 + 64);
    char v39 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    char v34 = -1 << v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
    char v36 = v3;
    uint64_t v37 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v20 >= v37) {
          goto LABEL_33;
        }
        int64_t v21 = v38[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v37) {
            goto LABEL_33;
          }
          int64_t v21 = v38[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v37)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_40;
              }
              if (v35 >= 64) {
                bzero(v38, 8 * v37);
              }
              else {
                *unsigned __int8 v38 = v34;
              }
              uint64_t v3 = v36;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v37) {
                  goto LABEL_33;
                }
                int64_t v21 = v38[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      char v28 = *(void *)(v5 + 56) + 24 * v19;
      unint64_t v29 = *(void *)v28;
      BOOL v30 = *(void *)(v28 + 8);
      uint64_t v31 = *(unsigned char *)(v28 + 16);
      uint64_t v32 = *(unsigned char *)(v28 + 17);
      char v33 = *(unsigned char *)(v28 + 18);
      Swift::UInt32 v41 = *(unsigned char *)(v28 + 20);
      uint64_t v42 = *(unsigned char *)(v28 + 19);
      if ((v40 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = *(void *)(v7 + 56) + 24 * v16;
      *(void *)unint64_t v17 = v29;
      *(void *)(v17 + 8) = v30;
      *(unsigned char *)(v17 + 16) = v31;
      *(unsigned char *)(v17 + 17) = v32;
      *(unsigned char *)(v17 + 18) = v33;
      *(unsigned char *)(v17 + 19) = v42;
      *(unsigned char *)(v17 + 20) = v41;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v39;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    char v33 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        int64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          int64_t v21 = v34[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  *char v34 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                int64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      char v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      unint64_t v29 = *v28;
      BOOL v30 = v28[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      char *v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  char v34;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, String>);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        unint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        int64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          int64_t v21 = v33[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                uint64_t *v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                int64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        uint64_t v11 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      char v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      unint64_t v29 = *v28;
      BOOL v30 = v28[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      int64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      char *v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Int32>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    BOOL v30 = a2;
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        unint64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            uint64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              unint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      unint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      int64_t v21 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        uint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      *(_DWORD *)(*(void *)(v7 + 56) + 4 * v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, UInt64>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationSetCache>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t i;
  char v40;
  long long v41;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationSet>);
  float v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unsigned __int8 v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        uint64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        uint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          uint64_t v23 = v38[v13];
          if (!v23)
          {
            uint64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v40)
              {
                char v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unsigned __int8 v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                uint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        uint64_t v10 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      BOOL v30 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 40 * v21;
      char v33 = *(void *)v32;
      char v34 = *(void *)(v32 + 8);
      uint64_t v35 = *(void *)(v32 + 16);
      Swift::UInt32 v41 = *(_OWORD *)(v32 + 24);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v27 = v16 == v26;
          if (v16 == v26) {
            uint64_t v16 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v30;
      uint64_t v19 = *(void *)(v7 + 56) + 40 * v17;
      *(void *)uint64_t v19 = v33;
      *(void *)(v19 + 8) = v34;
      *(void *)(v19 + 16) = v35;
      *(_OWORD *)(v19 + 24) = v41;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __ARReferenceProvider>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  long long v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt16 v38;
  Swift::UInt32 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  void *v47;
  uint64_t i;
  char v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  long long v55;
  long long v56;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ExtrudedGlyphDescriptor.Info, ExtrudedGlyphDescriptor>);
  __n128 v49 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v47 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  long long v45 = v2;
  uint64_t v46 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      uint64_t v22 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v50 = v13;
      uint64_t v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    uint64_t v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v46) {
      break;
    }
    uint64_t v25 = v47;
    unint64_t v26 = v47[v24];
    unint64_t v27 = v13 + 1;
    if (!v26)
    {
      unint64_t v27 = v13 + 2;
      if (v13 + 2 >= v46) {
        goto LABEL_36;
      }
      unint64_t v26 = v47[v27];
      if (!v26)
      {
        char v28 = v13 + 3;
        if (v13 + 3 >= v46)
        {
LABEL_36:
          swift_release();
          uint64_t v3 = v45;
          if ((v49 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }
        unint64_t v26 = v47[v28];
        if (!v26)
        {
          while (1)
          {
            unint64_t v27 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_45;
            }
            if (v27 >= v46) {
              goto LABEL_36;
            }
            unint64_t v26 = v47[v27];
            ++v28;
            if (v26) {
              goto LABEL_33;
            }
          }
        }
        unint64_t v27 = v13 + 3;
      }
    }
LABEL_33:
    uint64_t v10 = (v26 - 1) & v26;
    uint64_t v50 = v27;
    uint64_t v23 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_34:
    char v33 = *(void *)(v5 + 56);
    char v34 = *(void *)(v5 + 48) + 48 * v23;
    uint64_t v35 = *(void *)v34;
    char v36 = *(void *)(v34 + 8);
    uint64_t v37 = *(void *)(v34 + 32);
    unsigned __int8 v38 = *(_WORD *)(v34 + 40);
    char v39 = *(_DWORD *)(v34 + 44);
    float v40 = (uint64_t *)(v33 + (v23 << 6));
    Swift::UInt32 v41 = v40[1];
    long long v51 = *v40;
    uint64_t v42 = v40[2];
    unint64_t v43 = v40[4];
    uint64_t v52 = v40[3];
    uint64_t v53 = *((_DWORD *)v40 + 11);
    id v54 = *((_WORD *)v40 + 20);
    uint64_t v55 = *((_OWORD *)v40 + 3);
    uint64_t v56 = *(_OWORD *)(v34 + 16);
    if ((v49 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    if ((v56 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v14 = v56;
    }
    else {
      uint64_t v14 = 0;
    }
    Hasher._combine(_:)(v14);
    Hasher._combine(_:)(v38);
    Hasher._combine(_:)(v39);
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v19 = v56;
    }
    else
    {
      unint64_t v29 = 0;
      BOOL v30 = (unint64_t)(63 - v15) >> 6;
      uint64_t v19 = v56;
      do
      {
        if (++v17 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        uint64_t v31 = v17 == v30;
        if (v17 == v30) {
          unint64_t v17 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v17);
      }
      while (v32 == -1);
      unint64_t v18 = __clz(__rbit64(~v32)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v20 = *(void *)(v7 + 48) + 48 * v18;
    *(void *)unint64_t v20 = v35;
    *(void *)(v20 + 8) = v36;
    *(_OWORD *)(v20 + 16) = v19;
    *(void *)(v20 + 32) = v37;
    *(_WORD *)(v20 + 40) = v38;
    *(_DWORD *)(v20 + 44) = v39;
    int64_t v21 = *(void *)(v7 + 56) + (v18 << 6);
    int64_t v13 = v50;
    *(void *)int64_t v21 = v51;
    *(void *)(v21 + 8) = v41;
    *(void *)(v21 + 16) = v42;
    *(void *)(v21 + 24) = v52;
    *(void *)(v21 + 32) = v43;
    *(_WORD *)(v21 + 40) = v54;
    *(_DWORD *)(v21 + 44) = v53;
    *(_OWORD *)(v21 + 48) = v55;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v45;
  uint64_t v25 = v47;
  if ((v49 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v44 = 1 << *(unsigned char *)(v5 + 32);
  if (v44 >= 64) {
    bzero(v25, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v44;
  }
  *(void *)(v5 + 16) = 0;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [StateMachineTransition]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Swift.AnyObject>);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  char v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    BOOL v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          uint64_t v16 = 0;
        }
        v25 |= v27;
        char v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  long long *v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  char v36;
  long long v37;
  long long v38;
  long long v39;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, RESRT>);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v35 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    char v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        uint64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v34) {
          goto LABEL_33;
        }
        uint64_t v23 = v35[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v34) {
            goto LABEL_33;
          }
          uint64_t v23 = v35[v13];
          if (!v23)
          {
            uint64_t v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v36)
              {
                char v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v35 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v23 = v35[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v34) {
                  goto LABEL_33;
                }
                uint64_t v23 = v35[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        uint64_t v10 = (v23 - 1) & v23;
        int64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      BOOL v30 = v29[1];
      uint64_t v32 = (long long *)(*(void *)(v5 + 56) + 48 * v21);
      char v39 = v32[1];
      uint64_t v37 = *v32;
      unsigned __int8 v38 = v32[2];
      if ((v36 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v27 = v16 == v26;
          if (v16 == v26) {
            uint64_t v16 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v30;
      uint64_t v19 = (_OWORD *)(*(void *)(v7 + 56) + 48 * v17);
      *uint64_t v19 = v37;
      v19[1] = v39;
      void v19[2] = v38;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v10 = (void *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v21 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v22 = v21 | (v9 << 6);
      }
      else
      {
        if (__OFADD__(v9++, 1)) {
          goto LABEL_40;
        }
        if (v9 >= v14)
        {
LABEL_31:
          if ((v34 & 1) == 0)
          {
            uint64_t result = swift_release();
            unint64_t v4 = v3;
            goto LABEL_38;
          }
          uint64_t v33 = 1 << *(unsigned char *)(v6 + 32);
          if (v33 >= 64) {
            bzero((void *)(v6 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            void *v10 = -1 << v33;
          }
          unint64_t v4 = v3;
          *(void *)(v6 + 16) = 0;
          break;
        }
        unint64_t v24 = v10[v9];
        if (!v24)
        {
          int64_t v25 = v9 + 1;
          if (v9 + 1 >= v14) {
            goto LABEL_31;
          }
          unint64_t v24 = v10[v25];
          if (!v24)
          {
            while (1)
            {
              int64_t v9 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                break;
              }
              if (v9 >= v14) {
                goto LABEL_31;
              }
              unint64_t v24 = v10[v9];
              ++v25;
              if (v24) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v9;
        }
LABEL_20:
        unint64_t v13 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v9 << 6);
      }
      uint64_t v26 = 8 * v22;
      Swift::UInt v27 = *(void *)(*(void *)(v6 + 48) + v26);
      uint64_t v28 = *(void *)(*(void *)(v6 + 56) + v26);
      if ((v34 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v31 = v18 == v30;
          if (v18 == v30) {
            unint64_t v18 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v15 + 8 * v18);
        }
        while (v32 == -1);
        unint64_t v19 = __clz(__rbit64(~v32)) + (v18 << 6);
      }
      *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t v20 = 8 * v19;
      *(void *)(*(void *)(v8 + 48) + v20) = v27;
      *(void *)(*(void *)(v8 + 56) + v20) = v28;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *unint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    uint64_t v33 = a2;
    int64_t v9 = 0;
    char v34 = (void *)(v6 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v12 = v11 & *(void *)(v6 + 64);
    unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    int64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v9 << 6);
      }
      else
      {
        unint64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v6 + 64;
        if (v19 >= v13) {
          goto LABEL_31;
        }
        uint64_t v20 = v34[v19];
        ++v9;
        if (!v20)
        {
          int64_t v9 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v20 = v34[v9];
          if (!v20)
          {
            unint64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v4 = v3;
                goto LABEL_38;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v6 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v34 = -1 << v32;
              }
              unint64_t v4 = v3;
              *(void *)(v6 + 16) = 0;
              break;
            }
            uint64_t v20 = v34[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v9 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v20 = v34[v9];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v9 = v21;
          }
        }
LABEL_21:
        uint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      unint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v6 + 48) + v22);
      unint64_t v24 = *(void *)(*(void *)(v6 + 56) + v22);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      int64_t v25 = -1 << *(unsigned char *)(v8 + 32);
      uint64_t v26 = result & ~v25;
      Swift::UInt v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        char v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v30 = v27 == v29;
          if (v27 == v29) {
            Swift::UInt v27 = 0;
          }
          v28 |= v30;
          BOOL v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v8 + 48) + v16) = v23;
      *(void *)(*(void *)(v8 + 56) + v16) = v24;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *unint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v32 = -1 << v11;
    uint64_t v33 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    char v34 = (unint64_t)(v11 + 63) >> 6;
    int64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        uint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }
      else
      {
        unint64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34) {
          goto LABEL_33;
        }
        uint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v34) {
            goto LABEL_33;
          }
          uint64_t v23 = v10[v9];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if (a2)
              {
                if (v33 >= 64) {
                  bzero((void *)(v6 + 64), 8 * v34);
                }
                else {
                  void *v10 = v32;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            uint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v9 >= v34) {
                  goto LABEL_33;
                }
                uint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v24;
          }
        }
LABEL_30:
        unint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      char v29 = 8 * v21;
      unint64_t v30 = *(void *)(*(void *)(v6 + 48) + v29);
      BOOL v31 = *(void *)(*(void *)(v6 + 56) + v29);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          Swift::UInt v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      unint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v30;
      *(void *)(*(void *)(v8 + 56) + v19) = v31;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  unsigned __int8 v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  int64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = v3;
  char v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      uint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v36) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    BOOL v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v26 = 0;
      Swift::UInt v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        char v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v35;
  uint64_t v23 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  int64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  char v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      uint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    BOOL v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v26 = 0;
      Swift::UInt v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        char v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v33 = (void *)(v6 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v12 = v11 & *(void *)(v6 + 64);
    uint64_t v32 = (unint64_t)(v10 + 63) >> 6;
    unint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v20 = v19 | (v9 << 6);
      }
      else
      {
        unint64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v6 + 64;
        if (v21 >= v32) {
          goto LABEL_33;
        }
        unint64_t v22 = v33[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v22 = v33[v9];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v4 = v3;
                goto LABEL_40;
              }
              BOOL v31 = 1 << *(unsigned char *)(v6 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                uint64_t *v33 = -1 << v31;
              }
              unint64_t v4 = v3;
              *(void *)(v6 + 16) = 0;
              break;
            }
            unint64_t v22 = v33[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v9 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v22 = v33[v9];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v23;
          }
        }
LABEL_30:
        uint64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      uint64_t v28 = 8 * v20;
      char v29 = *(void *)(*(void *)(v6 + 48) + v28);
      unint64_t v30 = *(void *)(*(void *)(v6 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v29);
      uint64_t result = Hasher._finalize()();
      int64_t v14 = -1 << *(unsigned char *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        int64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0;
          }
          v24 |= v26;
          Swift::UInt v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v8 + 48) + v18) = v29;
      *(void *)(*(void *)(v8 + 56) + v18) = v30;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *unint64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  int64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  char v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      uint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    BOOL v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v26 = 0;
      Swift::UInt v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        char v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v50 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v55 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  long long v51 = (char *)&v44 - v8;
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, UUID>);
  int v52 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v46 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  char v44 = v3;
  int64_t v45 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  uint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  uint64_t v17 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  uint64_t v48 = v5;
  uint64_t v49 = v9;
  while (1)
  {
    if (v15)
    {
      unint64_t v23 = __clz(__rbit64(v15));
      uint64_t v24 = (v15 - 1) & v15;
      unint64_t v25 = v23 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v45) {
      break;
    }
    Swift::UInt v27 = v46;
    unint64_t v28 = v46[v26];
    ++v19;
    if (!v28)
    {
      int64_t v19 = v26 + 1;
      if (v26 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v28 = v46[v19];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v19 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v45) {
              goto LABEL_34;
            }
            unint64_t v28 = v46[v19];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v29;
      }
    }
LABEL_21:
    uint64_t v24 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v19 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v5 + 72);
    unint64_t v31 = v30 * v25;
    unint64_t v32 = *(void *)(v9 + 48) + v30 * v25;
    unint64_t v53 = v24;
    int64_t v54 = v19;
    if (v52)
    {
      uint64_t v33 = *v16;
      uint64_t v35 = v50;
      char v34 = v51;
      (*v16)(v51, v32, v50);
    }
    else
    {
      uint64_t v33 = *v47;
      uint64_t v35 = v50;
      char v34 = v51;
      (*v47)(v51, v32, v50);
    }
    v33(v55, *(void *)(v9 + 56) + v31, v35);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v36 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v17 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v37) & ~*(void *)(v17 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v17 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v20 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    unint64_t v21 = v30 * v20;
    unint64_t v22 = *v16;
    (*v16)((char *)(*(void *)(v11 + 48) + v30 * v20), (unint64_t)v34, v35);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v22)(*(void *)(v11 + 56) + v21, v55, v35);
    ++*(void *)(v11 + 16);
    uint64_t v5 = v48;
    uint64_t v9 = v49;
    unint64_t v15 = v53;
    int64_t v19 = v54;
  }
  swift_release();
  uint64_t v3 = v44;
  Swift::UInt v27 = v46;
  if ((v52 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v9 + 32);
  if (v43 >= 64) {
    bzero(v27, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *Swift::UInt v27 = -1 << v43;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
  uint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  else {
    unint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  unint64_t v40 = v3;
  BOOL v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  unint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    uint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    int64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      int64_t v26 = v42[v20];
      if (!v26)
      {
        Swift::UInt v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            int64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    unint64_t v28 = *(void *)(v45 + 72);
    int64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  void *v38;
  void (**v39)(char *, unint64_t, uint64_t);
  int v40;
  uint64_t v41;

  uint64_t v3 = v2;
  BOOL v41 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, URL>);
  unint64_t v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v36 = v3;
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    unint64_t v38 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    unint64_t v37 = (unint64_t)(v13 + 63) >> 6;
    char v39 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        int64_t v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v20 = v19 | (v11 << 6);
      }
      else
      {
        unint64_t v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_34;
        }
        unint64_t v22 = v38[v21];
        ++v11;
        if (!v22)
        {
          uint64_t v11 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_34;
          }
          unint64_t v22 = v38[v11];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_41;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v38 = -1 << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v37) {
                  goto LABEL_34;
                }
                unint64_t v22 = v38[v11];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v11 = v23;
          }
        }
LABEL_21:
        unint64_t v15 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      unint64_t v25 = v5;
      int64_t v26 = *(void *)(v5 + 72);
      Swift::UInt v27 = *(void *)(v8 + 56) + v26 * v20;
      if (v40) {
        (*v16)(v7, v27, v41);
      }
      else {
        (*v39)(v7, v27, v41);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      int64_t v29 = result & ~v28;
      uint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v33 = v30 == v32;
          if (v30 == v32) {
            uint64_t v30 = 0;
          }
          v31 |= v33;
          char v34 = *(void *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v10 + 48) + 8 * v18) = v24;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v10 + 56) + v26 * v18, v7, v41);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v25;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Task<(), Never>>);
  uint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  else {
    unint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  unint64_t v40 = v3;
  BOOL v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  unint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    uint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    int64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      int64_t v26 = v42[v20];
      if (!v26)
      {
        Swift::UInt v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            int64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    unint64_t v28 = *(void *)(v45 + 72);
    int64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, USKObjectPath>);
  uint64_t v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  else {
    unint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  unint64_t v40 = v3;
  BOOL v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  unint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    uint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    int64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      unint64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      int64_t v26 = v42[v20];
      if (!v26)
      {
        Swift::UInt v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            unint64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            int64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    unint64_t v28 = *(void *)(v45 + 72);
    int64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        unint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

unint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, __MaterialResource>);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v24 = v3;
    unint64_t v25 = (void *)(v5 + 64);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    unint64_t v9 = v8 & *(void *)(v5 + 64);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        int64_t v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_22;
        }
        unint64_t v16 = v25[v15];
        ++v12;
        if (!v16)
        {
          int64_t v12 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_22;
          }
          unint64_t v16 = v25[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 2;
            if (v17 >= v10)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v24;
              if (a2)
              {
                uint64_t v23 = 1 << *(unsigned char *)(v5 + 32);
                if (v23 > 63) {
                  bzero(v25, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v25 = -1 << v23;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v16 = v25[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_29;
                }
                if (v12 >= v10) {
                  goto LABEL_22;
                }
                unint64_t v16 = v25[v12];
                ++v17;
                if (v16) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v12 = v17;
          }
        }
LABEL_19:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      unint64_t v18 = (unsigned __int16 *)(*(void *)(v5 + 48) + 4 * v14);
      unsigned int v19 = *v18;
      int v20 = *((unsigned __int8 *)v18 + 2);
      int v21 = *((unsigned __int8 *)v18 + 3);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      unint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((v20 << 16) | (v21 << 24) | v19, v22, v6);
    }
  }
  unint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  Swift::UInt16 v18;
  Swift::UInt v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int64_t v26;
  void *v27;
  void *v28;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, __MaterialResource>);
  uint64_t v6 = a2;
  unint64_t v28 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    Swift::UInt v27 = (void *)(v5 + 64);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    unint64_t v9 = v8 & *(void *)(v5 + 64);
    unint64_t v25 = v2;
    int64_t v26 = (unint64_t)(v7 + 63) >> 6;
    unint64_t result = swift_retain();
    uint64_t v11 = 0;
    while (1)
    {
      if (v9)
      {
        int64_t v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v13 = v12 | (v11 << 6);
      }
      else
      {
        unint64_t v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_22;
        }
        int64_t v15 = v27[v14];
        ++v11;
        if (!v15)
        {
          uint64_t v11 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_22;
          }
          int64_t v15 = v27[v11];
          if (!v15)
          {
            unint64_t v16 = v14 + 2;
            if (v16 >= v26)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v25;
              if (v6)
              {
                uint64_t v24 = 1 << *(unsigned char *)(v5 + 32);
                if (v24 > 63) {
                  bzero(v27, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *Swift::UInt v27 = -1 << v24;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v15 = v27[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_29;
                }
                if (v11 >= v26) {
                  goto LABEL_22;
                }
                int64_t v15 = v27[v11];
                ++v16;
                if (v15) {
                  goto LABEL_19;
                }
              }
            }
            uint64_t v11 = v16;
          }
        }
LABEL_19:
        unint64_t v9 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      int64_t v17 = *(void *)(v5 + 48) + 24 * v13;
      unint64_t v18 = *(_WORD *)v17;
      unsigned int v19 = *(void *)(v17 + 8);
      int v20 = *(unsigned __int8 *)(v17 + 16);
      int v21 = *(unsigned __int8 *)(v17 + 17);
      uint64_t v22 = *(unsigned __int8 *)(v17 + 18);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * v13);
      if ((v6 & 1) == 0) {
        swift_retain();
      }
      unint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v18, v19, (v21 << 8) | (v22 << 16) | v20, v23, v28);
    }
  }
  unint64_t result = swift_release();
  *uint64_t v3 = v28;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  Swift::UInt16 v18;
  Swift::UInt v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int64_t v26;
  void *v27;
  void *v28;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, Task<__MaterialResource, Error>>);
  uint64_t v6 = a2;
  unint64_t v28 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    Swift::UInt v27 = (void *)(v5 + 64);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    unint64_t v9 = v8 & *(void *)(v5 + 64);
    unint64_t v25 = v2;
    int64_t v26 = (unint64_t)(v7 + 63) >> 6;
    unint64_t result = swift_retain();
    uint64_t v11 = 0;
    while (1)
    {
      if (v9)
      {
        int64_t v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v13 = v12 | (v11 << 6);
      }
      else
      {
        unint64_t v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_22;
        }
        int64_t v15 = v27[v14];
        ++v11;
        if (!v15)
        {
          uint64_t v11 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_22;
          }
          int64_t v15 = v27[v11];
          if (!v15)
          {
            unint64_t v16 = v14 + 2;
            if (v16 >= v26)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v25;
              if (v6)
              {
                uint64_t v24 = 1 << *(unsigned char *)(v5 + 32);
                if (v24 > 63) {
                  bzero(v27, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *Swift::UInt v27 = -1 << v24;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v15 = v27[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_29;
                }
                if (v11 >= v26) {
                  goto LABEL_22;
                }
                int64_t v15 = v27[v11];
                ++v16;
                if (v15) {
                  goto LABEL_19;
                }
              }
            }
            uint64_t v11 = v16;
          }
        }
LABEL_19:
        unint64_t v9 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      int64_t v17 = *(void *)(v5 + 48) + 24 * v13;
      unint64_t v18 = *(_WORD *)v17;
      unsigned int v19 = *(void *)(v17 + 8);
      int v20 = *(unsigned __int8 *)(v17 + 16);
      int v21 = *(unsigned __int8 *)(v17 + 17);
      uint64_t v22 = *(unsigned __int8 *)(v17 + 18);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * v13);
      if ((v6 & 1) == 0) {
        swift_retain();
      }
      unint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v18, v19, (v21 << 8) | (v22 << 16) | v20, v23, v28);
    }
  }
  unint64_t result = swift_release();
  *uint64_t v3 = v28;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, Task<__MaterialResource, Error>>);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v24 = v3;
    unint64_t v25 = (void *)(v5 + 64);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    unint64_t v9 = v8 & *(void *)(v5 + 64);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        int64_t v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_22;
        }
        unint64_t v16 = v25[v15];
        ++v12;
        if (!v16)
        {
          int64_t v12 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_22;
          }
          unint64_t v16 = v25[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 2;
            if (v17 >= v10)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v24;
              if (a2)
              {
                uint64_t v23 = 1 << *(unsigned char *)(v5 + 32);
                if (v23 > 63) {
                  bzero(v25, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v25 = -1 << v23;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v16 = v25[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_29;
                }
                if (v12 >= v10) {
                  goto LABEL_22;
                }
                unint64_t v16 = v25[v12];
                ++v17;
                if (v16) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v12 = v17;
          }
        }
LABEL_19:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      unint64_t v18 = (unsigned __int16 *)(*(void *)(v5 + 48) + 4 * v14);
      unsigned int v19 = *v18;
      int v20 = *((unsigned __int8 *)v18 + 2);
      int v21 = *((unsigned __int8 *)v18 + 3);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      unint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((v20 << 16) | (v21 << 24) | v19, v22, v6);
    }
  }
  unint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  uint64_t v5 = v4;
  uint64_t v7 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v51 = a2;
  uint64_t v55 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v7 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v48 = (void *)(v7 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v7 + 64);
  uint64_t v46 = v4;
  int64_t v47 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v55 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  uint64_t v50 = v7;
  while (1)
  {
    if (v10)
    {
      uint64_t v52 = (v10 - 1) & v10;
      int64_t v53 = v13;
      unint64_t v23 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v47) {
      break;
    }
    unint64_t v25 = v48;
    unint64_t v26 = v48[v24];
    int64_t v27 = v13 + 1;
    if (!v26)
    {
      int64_t v27 = v13 + 2;
      if (v13 + 2 >= v47) {
        goto LABEL_33;
      }
      unint64_t v26 = v48[v27];
      if (!v26)
      {
        uint64_t v28 = v13 + 3;
        if (v13 + 3 >= v47)
        {
LABEL_33:
          swift_release();
          uint64_t v5 = v46;
          if ((v51 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v26 = v48[v28];
        if (!v26)
        {
          while (1)
          {
            int64_t v27 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_42;
            }
            if (v27 >= v47) {
              goto LABEL_33;
            }
            unint64_t v26 = v48[v27];
            ++v28;
            if (v26) {
              goto LABEL_30;
            }
          }
        }
        int64_t v27 = v13 + 3;
      }
    }
LABEL_30:
    uint64_t v52 = (v26 - 1) & v26;
    int64_t v53 = v27;
    unint64_t v23 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_31:
    uint64_t v33 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v23);
    uint64_t v34 = v33[1];
    uint64_t v54 = *v33;
    uint64_t v35 = *(void *)(v7 + 56) + 80 * v23;
    uint64_t v36 = *(void *)(v35 + 8);
    uint64_t v56 = *(void *)v35;
    uint64_t v37 = *(void *)(v35 + 16);
    uint64_t v38 = *(void *)(v35 + 24);
    uint64_t v40 = *(void *)(v35 + 32);
    uint64_t v39 = *(void *)(v35 + 40);
    uint64_t v42 = *(void *)(v35 + 48);
    uint64_t v41 = *(void *)(v35 + 56);
    char v43 = *(unsigned char *)(v35 + 64);
    if ((v51 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      LOBYTE(v45) = v43;
      a4(v56, v36, v37, v38, v40, v39, v42, v41, v45);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v55 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      uint64_t result = v41;
      uint64_t v19 = v42;
      char v20 = v43;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v15) >> 6;
      uint64_t result = v41;
      uint64_t v19 = v42;
      char v20 = v43;
      do
      {
        if (++v17 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v31 = v17 == v30;
        if (v17 == v30) {
          unint64_t v17 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v17);
      }
      while (v32 == -1);
      unint64_t v18 = __clz(__rbit64(~v32)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    int v21 = (void *)(*(void *)(v55 + 48) + 16 * v18);
    *int v21 = v54;
    v21[1] = v34;
    uint64_t v22 = *(void *)(v55 + 56) + 80 * v18;
    *(void *)uint64_t v22 = v56;
    *(void *)(v22 + 8) = v36;
    *(void *)(v22 + 16) = v37;
    *(void *)(v22 + 24) = v38;
    *(void *)(v22 + 32) = v40;
    *(void *)(v22 + 40) = v39;
    *(void *)(v22 + 48) = v19;
    *(void *)(v22 + 56) = result;
    *(unsigned char *)(v22 + 64) = v20;
    ++*(void *)(v55 + 16);
    uint64_t v7 = v50;
    unint64_t v10 = v52;
    int64_t v13 = v53;
  }
  swift_release();
  uint64_t v5 = v46;
  unint64_t v25 = v48;
  if ((v51 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v44 = 1 << *(unsigned char *)(v7 + 32);
  if (v44 >= 64) {
    bzero(v25, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v44;
  }
  *(void *)(v7 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v5 = v55;
  return result;
}

_OWORD *specialized _NativeDictionary._unsafeInsertNew(key:value:)(Swift::UInt64 *a1, _OWORD *a2, void *a3)
{
  Swift::UInt64 v7 = *a1;
  Swift::UInt v6 = a1[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  if (v6)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Swift::UInt v8 = a1[2];
    if (v8) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (a1[4]) {
      goto LABEL_4;
    }
LABEL_7:
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  Swift::UInt v8 = a1[2];
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v8);
  if (!a1[4]) {
    goto LABEL_7;
  }
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined release of REEventBus.DispatcherHandle((uint64_t)a1);
LABEL_8:
  Hasher._finalize()();
  unint64_t v9 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
  uint64_t v10 = a3[6] + 40 * v9;
  Swift::UInt64 v11 = a1[4];
  long long v12 = *((_OWORD *)a1 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 16) = v12;
  *(void *)(v10 + 32) = v11;
  uint64_t result = outlined init with take of Any(a2, (_OWORD *)(a3[7] + 32 * v9));
  ++a3[2];
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(unsigned int a1, uint64_t a2, void *a3)
{
  int v6 = BYTE2(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if (v6 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(HIWORD(a1) & 1);
  }
  if (HIBYTE(a1) == 2)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    int v7 = HIBYTE(a1) & 1;
  }
  Hasher._combine(_:)(v7);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  *(_DWORD *)(a3[6] + 4 * result) = a1;
  *(void *)(a3[7] + 8 * result) = a2;
  ++a3[2];
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(Swift::UInt16 a1, Swift::UInt a2, unsigned int a3, uint64_t a4, void *a5)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  if (BYTE1(a3) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((a3 >> 8) & 1);
  }
  if (BYTE2(a3) == 2)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    int v10 = HIWORD(a3) & 1;
  }
  Hasher._combine(_:)(v10);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  uint64_t v12 = a5[6] + 24 * result;
  *(_WORD *)uint64_t v12 = a1;
  *(void *)(v12 + 8) = a2;
  *(unsigned char *)(v12 + 16) = a3 & 1;
  *(unsigned char *)(v12 + 17) = BYTE1(a3);
  *(unsigned char *)(v12 + 18) = BYTE2(a3);
  *(void *)(a5[7] + 8 * result) = a4;
  ++a5[2];
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt64>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long *v19;
  long long v20;
  long long v21;
  _OWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol & Decodable & Encodable.Type>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      unint64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v26 = __clz(__rbit64(v24));
    uint64_t v12 = (v24 - 1) & v24;
    uint64_t v15 = v26 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 32 * v15;
    uint64_t v19 = (long long *)(*(void *)(v2 + 56) + v18);
    char v20 = *v19;
    int v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (_OWORD *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v20;
    v22[1] = v21;
  }
  unint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    unint64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [ActionEventType : RESubscriptionHandle]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      unint64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  char v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unint64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ActionEventType, RESubscriptionHandle>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      unint64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      int v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v23 = __clz(__rbit64(v21));
    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unint64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, (_:_:_:_:_:_:_:_:)>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      unint64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      int v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    unint64_t result = (void *)swift_retain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unint64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  long long v24;
  long long v25;
  long long v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type)>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    char v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      unint64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      char v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v29 - 1) & v29;
    uint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    char v20 = 56 * v15;
    int v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)(v21 + 48);
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    int64_t v24 = *(_OWORD *)v21;
    unint64_t v25 = *(_OWORD *)(v21 + 16);
    unint64_t v26 = *(_OWORD *)(v21 + 32);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v27 = *(void *)(v4 + 56) + v20;
    *(_OWORD *)int64_t v27 = v24;
    *(_OWORD *)(v27 + 16) = v25;
    *(_OWORD *)(v27 + 32) = v26;
    *(void *)(v27 + 48) = v22;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  char v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    unint64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, EntityAction.Type>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      unint64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    char v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    int v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  long long v22[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnsafeRawPointer, ActionHandlerProtocol>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    char v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      unint64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      char v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 40 * v15;
    outlined init with copy of __REAssetService(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t result = (void *)outlined init with take of BindableDataInternal(v22, *(void *)(v4 + 56) + v18);
  }
  int v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  char v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    unint64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, Component.Type>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      unint64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      int v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v23 = __clz(__rbit64(v21));
    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unint64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, REComponentClassPtr>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      unint64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    int v21 = __clz(__rbit64(v19));
    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  char v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unint64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  long long v27;
  long long v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, ComponentInfo>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13) {
      goto LABEL_26;
    }
    BOOL v31 = *(void *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      unint64_t v9 = v30 + 1;
      if (v30 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v31 = *(void *)(v6 + 8 * v9);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v31 - 1) & v31;
    uint64_t v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 80 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    char v20 = *(void *)v19;
    int v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(_DWORD *)(v19 + 32);
    unint64_t v23 = *(unsigned char *)(v19 + 36);
    int64_t v24 = *(void *)(v19 + 40);
    unint64_t v25 = *(unsigned char *)(v19 + 48);
    unint64_t v26 = *(void *)(v19 + 56);
    int64_t v27 = *(_OWORD *)(v19 + 8);
    uint64_t v28 = *(_OWORD *)(v19 + 64);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    char v29 = *(void *)(v4 + 56) + v18;
    *(void *)char v29 = v20;
    *(_OWORD *)(v29 + 8) = v27;
    *(void *)(v29 + 24) = v21;
    *(_DWORD *)(v29 + 32) = v22;
    *(unsigned char *)(v29 + 36) = v23;
    *(void *)(v29 + 40) = v24;
    *(unsigned char *)(v29 + 48) = v25;
    *(void *)(v29 + 56) = v26;
    *(_OWORD *)(v29 + 64) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v32 = v30 + 2;
  if (v32 >= v13) {
    goto LABEL_26;
  }
  BOOL v31 = *(void *)(v6 + 8 * v32);
  if (v31)
  {
    unint64_t v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v31 = *(void *)(v6 + 8 * v9);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  long long v27;
  long long v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ComponentInfo>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13) {
      goto LABEL_26;
    }
    BOOL v31 = *(void *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      unint64_t v9 = v30 + 1;
      if (v30 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v31 = *(void *)(v6 + 8 * v9);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v31 - 1) & v31;
    uint64_t v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 80 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    char v20 = *(void *)v19;
    int v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(_DWORD *)(v19 + 32);
    unint64_t v23 = *(unsigned char *)(v19 + 36);
    int64_t v24 = *(void *)(v19 + 40);
    unint64_t v25 = *(unsigned char *)(v19 + 48);
    unint64_t v26 = *(void *)(v19 + 56);
    int64_t v27 = *(_OWORD *)(v19 + 8);
    uint64_t v28 = *(_OWORD *)(v19 + 64);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    char v29 = *(void *)(v4 + 56) + v18;
    *(void *)char v29 = v20;
    *(_OWORD *)(v29 + 8) = v27;
    *(void *)(v29 + 24) = v21;
    *(_DWORD *)(v29 + 32) = v22;
    *(unsigned char *)(v29 + 36) = v23;
    *(void *)(v29 + 40) = v24;
    *(unsigned char *)(v29 + 48) = v25;
    *(void *)(v29 + 56) = v26;
    *(_OWORD *)(v29 + 64) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v32 = v30 + 2;
  if (v32 >= v13) {
    goto LABEL_26;
  }
  BOOL v31 = *(void *)(v6 + 8 * v32);
  if (v31)
  {
    unint64_t v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v31 = *(void *)(v6 + 8 * v9);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __USDARReferenceProvidingPlugin>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileARReferenceProvidingPlugin>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  char v21[8];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver.Weak<__RealityFileURLResolver>>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      unint64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    outlined init with copy of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(*(void *)(v2 + 56) + 8 * v15, (uint64_t)v21);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t result = (void *)outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>((uint64_t)v21, *(void *)(v4 + 56) + v16);
  }
  char v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unint64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<IKComponent.Solver.ID, Int>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Int>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol.Type>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  long long v27;
  _OWORD v28[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REEventBus.DispatcherHandle, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    void *v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  int v6 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v6) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v6);
  }
  unint64_t v26 = v2 + 64;
  Swift::UInt v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  unint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  int v10 = -1;
  if (v9 < 64) {
    int v10 = ~(-1 << v9);
  }
  Swift::UInt64 v11 = v10 & *(void *)(v2 + 64);
  uint64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      int64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      Swift::Int v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v12) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v8;
    if (!v23)
    {
      Swift::UInt v8 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v8);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    Swift::UInt64 v11 = (v23 - 1) & v23;
    Swift::Int v14 = __clz(__rbit64(v23)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = 40 * v14;
    unint64_t v16 = *(void *)(v2 + 48) + 40 * v14;
    unint64_t v18 = *(void *)(v16 + 16);
    unint64_t v17 = *(void *)(v16 + 24);
    uint64_t v19 = *(void *)(v16 + 32);
    int64_t v27 = *(_OWORD *)v16;
    char v20 = 32 * v14;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v14, (uint64_t)v28);
    int v21 = *(void *)(v4 + 48) + v15;
    *(_OWORD *)int v21 = v27;
    *(void *)(v21 + 16) = v18;
    *(void *)(v21 + 24) = v17;
    *(void *)(v21 + 32) = v19;
    outlined init with take of Any(v28, (_OWORD *)(*(void *)(v4 + 56) + v20));
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v12)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    Swift::UInt v8 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    Swift::UInt v8 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v8);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, AnimationResource>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  long long v30;
  long long v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioMixGroup>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v33 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v33 >= v13) {
      goto LABEL_26;
    }
    uint64_t v34 = *(void *)(v6 + 8 * v33);
    ++v9;
    if (!v34)
    {
      unint64_t v9 = v33 + 1;
      if (v33 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v34 = *(void *)(v6 + 8 * v9);
      if (!v34) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v34 - 1) & v34;
    uint64_t v15 = __clz(__rbit64(v34)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    char v20 = 80 * v15;
    int v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(unsigned char *)(v21 + 16);
    unint64_t v23 = *(void *)(v21 + 24);
    int64_t v24 = *(unsigned char *)(v21 + 32);
    unint64_t v25 = *(unsigned char *)(v21 + 33);
    unint64_t v26 = *(void *)(v21 + 40);
    int64_t v27 = *(void *)(v21 + 48);
    uint64_t v28 = *(unsigned char *)(v21 + 72);
    char v29 = (void *)(*(void *)(v4 + 48) + v16);
    unint64_t v30 = *(_OWORD *)(v21 + 56);
    BOOL v31 = *(_OWORD *)v21;
    *char v29 = v19;
    v29[1] = v18;
    uint64_t v32 = *(void *)(v4 + 56) + v20;
    *(_OWORD *)uint64_t v32 = v31;
    *(unsigned char *)(v32 + 16) = v22;
    *(void *)(v32 + 24) = v23;
    *(unsigned char *)(v32 + 32) = v24;
    *(unsigned char *)(v32 + 33) = v25;
    *(void *)(v32 + 40) = v26;
    *(void *)(v32 + 48) = v27;
    *(_OWORD *)(v32 + 56) = v30;
    *(unsigned char *)(v32 + 72) = v28;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v35 = v33 + 2;
  if (v35 >= v13) {
    goto LABEL_26;
  }
  uint64_t v34 = *(void *)(v6 + 8 * v35);
  if (v34)
  {
    unint64_t v9 = v35;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v34 = *(void *)(v6 + 8 * v9);
    ++v35;
    if (v34) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, String>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, OpaquePointer>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, MaterialParameters.Value>, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of MaterialParameters.Value);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned char v22[16];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, __RKEntityAction.ActionStateObservation>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    char v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      unint64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      char v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 16 * v15;
    outlined init with copy of __RKEntityAction.ActionStateObservation(*(void *)(v2 + 56) + 16 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t result = (void *)outlined init with take of __RKEntityAction.ActionStateObservation((uint64_t)v22, *(void *)(v4 + 56) + v18);
  }
  int v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  char v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    unint64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  unint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(unint64_t, char *, uint64_t);
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void **)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v35 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v34 = (char *)&v30 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, UUID>);
  int v7 = *v0;
  Swift::UInt v8 = static _DictionaryStorage.copy(original:)();
  unint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    void *v1 = v9;
    return result;
  }
  unint64_t v30 = v1;
  unint64_t result = (void *)(v8 + 64);
  Swift::UInt64 v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    unint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  uint64_t v12 = 0;
  int64_t v13 = *(void *)(v7 + 16);
  uint64_t v36 = v7;
  uint64_t v37 = v9;
  *(void *)(v9 + 16) = v13;
  Swift::Int v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  BOOL v31 = v7 + 64;
  uint64_t v32 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v33 = v3 + 2;
  unint64_t v17 = v34;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      uint64_t v19 = v18 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v27 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v32) {
      goto LABEL_23;
    }
    uint64_t v28 = *(void *)(v31 + 8 * v27);
    ++v12;
    if (!v28)
    {
      uint64_t v12 = v27 + 1;
      if (v27 + 1 >= v32) {
        goto LABEL_23;
      }
      uint64_t v28 = *(void *)(v31 + 8 * v12);
      if (!v28) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v28 - 1) & v28;
    uint64_t v19 = __clz(__rbit64(v28)) + (v12 << 6);
LABEL_9:
    char v20 = v36;
    int v21 = v3[9] * v19;
    uint64_t v22 = (void (*)(char *, unint64_t, uint64_t))v3[2];
    v22(v17, *(void *)(v36 + 48) + v21, v2);
    unint64_t v23 = *(void *)(v20 + 56) + v21;
    int64_t v24 = v35;
    v22(v35, v23, v2);
    unint64_t v25 = v37;
    unint64_t v26 = (void (*)(unint64_t, char *, uint64_t))v3[4];
    v26(*(void *)(v37 + 48) + v21, v17, v2);
    unint64_t result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v25 + 56) + v21, v24, v2);
  }
  char v29 = v27 + 2;
  if (v29 >= v32)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v30;
    unint64_t v9 = v37;
    goto LABEL_25;
  }
  uint64_t v28 = *(void *)(v31 + 8 * v29);
  if (v28)
  {
    uint64_t v12 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v12 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v12 >= v32) {
      goto LABEL_23;
    }
    uint64_t v28 = *(void *)(v31 + 8 * v12);
    ++v29;
    if (v28) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  int v6 = static _DictionaryStorage.copy(original:)();
  int v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  Swift::UInt64 v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v24 = v5 + 64;
  unint64_t v25 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v26 = v2 + 32;
  int64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      Swift::Int v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    char v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      char v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    unint64_t v17 = 8 * v15;
    unint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    unint64_t result = (void *)swift_retain();
  }
  int v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  char v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    char v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Entity, [__RKEntityInteractionSpecification]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      unint64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    swift_retain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  char v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unint64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    void *v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      unint64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    char v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      unint64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    char v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    int v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    unint64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Int64>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int64>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>>);
  uint64_t v38 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t v37 = v3;
    unint64_t result = (void *)swift_release();
    *uint64_t v38 = v37;
    return result;
  }
  unint64_t result = (void *)(v2 + 64);
  uint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  int v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  uint64_t v41 = v3;
  if (v6)
  {
    unint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v5);
    uint64_t v3 = v41;
  }
  int v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  Swift::UInt v8 = 1 << *(unsigned char *)(v1 + 32);
  unint64_t v9 = -1;
  if (v8 < 64) {
    unint64_t v9 = ~(-1 << v8);
  }
  int v10 = v9 & *(void *)(v1 + 64);
  uint64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v40 = v1 + 64;
  while (1)
  {
    if (v10)
    {
      Swift::UInt64 v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v12 = v11 | (v7 << 6);
      uint64_t v3 = v41;
      goto LABEL_12;
    }
    uint64_t v34 = v7 + 1;
    uint64_t v3 = v41;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v34 >= v39) {
      goto LABEL_26;
    }
    uint64_t v35 = *(void *)(v40 + 8 * v34);
    ++v7;
    if (!v35)
    {
      int v7 = v34 + 1;
      if (v34 + 1 >= v39) {
        goto LABEL_26;
      }
      uint64_t v35 = *(void *)(v40 + 8 * v7);
      if (!v35) {
        break;
      }
    }
LABEL_25:
    int v10 = (v35 - 1) & v35;
    uint64_t v12 = __clz(__rbit64(v35)) + (v7 << 6);
LABEL_12:
    int64_t v13 = v12 << 7;
    Swift::Int v14 = 8 * v12;
    uint64_t v15 = v13 - v14;
    unint64_t v16 = *(void *)(v1 + 48) + v15;
    unint64_t v17 = *(void *)(v16 + 8);
    unint64_t v18 = *(unsigned char *)(v16 + 16);
    uint64_t v19 = *(_WORD *)(v16 + 17);
    char v20 = *(void *)(v16 + 24);
    int v21 = *(void *)(v16 + 32);
    uint64_t v22 = *(void *)(v16 + 40);
    unint64_t v23 = *(void *)(v16 + 48);
    int64_t v24 = *(void *)(v16 + 56);
    unint64_t v25 = *(void **)(v16 + 64);
    unint64_t v26 = *(void *)(v16 + 72);
    int64_t v27 = *(void *)(v16 + 80);
    uint64_t v28 = *(void *)(v16 + 88);
    char v29 = *(void *)(v16 + 96);
    unint64_t v30 = *(void *)(v16 + 104);
    BOOL v31 = *(void **)(v16 + 112);
    uint64_t v32 = *(void *)(*(void *)(v1 + 56) + v14);
    uint64_t v33 = *(void *)(v3 + 48) + v15;
    *(_WORD *)uint64_t v33 = *(_WORD *)v16;
    *(void *)(v33 + 8) = v17;
    *(unsigned char *)(v33 + 16) = v18;
    *(_WORD *)(v33 + 17) = v19;
    *(void *)(v33 + 24) = v20;
    *(void *)(v33 + 32) = v21;
    *(void *)(v33 + 40) = v22;
    *(void *)(v33 + 48) = v23;
    *(void *)(v33 + 56) = v24;
    *(void *)(v33 + 64) = v25;
    *(void *)(v33 + 72) = v26;
    *(void *)(v33 + 80) = v27;
    *(void *)(v33 + 88) = v28;
    *(void *)(v33 + 96) = v29;
    *(void *)(v33 + 104) = v30;
    *(void *)(v33 + 112) = v31;
    *(void *)(*(void *)(v3 + 56) + v14) = v32;
    outlined copy of __MaterialResource.CoreMaterialFunction?(v20, v21, v22, v23, v24, v25);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v26, v27, v28, v29, v30, v31);
    unint64_t result = (void *)swift_retain();
  }
  uint64_t v36 = v34 + 2;
  if (v36 >= v39) {
    goto LABEL_26;
  }
  uint64_t v35 = *(void *)(v40 + 8 * v36);
  if (v35)
  {
    int v7 = v36;
    goto LABEL_25;
  }
  while (1)
  {
    int v7 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v7 >= v39) {
      goto LABEL_26;
    }
    uint64_t v35 = *(void *)(v40 + 8 * v7);
    ++v36;
    if (v35) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, __MaterialResource>);
  uint64_t v38 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    uint64_t v37 = v3;
    unint64_t result = (void *)swift_release();
    *uint64_t v38 = v37;
    return result;
  }
  unint64_t result = (void *)(v2 + 64);
  uint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  int v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  uint64_t v41 = v3;
  if (v6)
  {
    unint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v5);
    uint64_t v3 = v41;
  }
  int v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  Swift::UInt v8 = 1 << *(unsigned char *)(v1 + 32);
  unint64_t v9 = -1;
  if (v8 < 64) {
    unint64_t v9 = ~(-1 << v8);
  }
  int v10 = v9 & *(void *)(v1 + 64);
  uint64_t v39 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v40 = v1 + 64;
  while (1)
  {
    if (v10)
    {
      Swift::UInt64 v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v12 = v11 | (v7 << 6);
      uint64_t v3 = v41;
      goto LABEL_12;
    }
    uint64_t v34 = v7 + 1;
    uint64_t v3 = v41;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v34 >= v39) {
      goto LABEL_26;
    }
    uint64_t v35 = *(void *)(v40 + 8 * v34);
    ++v7;
    if (!v35)
    {
      int v7 = v34 + 1;
      if (v34 + 1 >= v39) {
        goto LABEL_26;
      }
      uint64_t v35 = *(void *)(v40 + 8 * v7);
      if (!v35) {
        break;
      }
    }
LABEL_25:
    int v10 = (v35 - 1) & v35;
    uint64_t v12 = __clz(__rbit64(v35)) + (v7 << 6);
LABEL_12:
    int64_t v13 = v12 << 7;
    Swift::Int v14 = 8 * v12;
    uint64_t v15 = v13 - v14;
    unint64_t v16 = *(void *)(v1 + 48) + v15;
    unint64_t v17 = *(void *)(v16 + 8);
    unint64_t v18 = *(unsigned char *)(v16 + 16);
    uint64_t v19 = *(_WORD *)(v16 + 17);
    char v20 = *(void *)(v16 + 24);
    int v21 = *(void *)(v16 + 32);
    uint64_t v22 = *(void *)(v16 + 40);
    unint64_t v23 = *(void *)(v16 + 48);
    int64_t v24 = *(void *)(v16 + 56);
    unint64_t v25 = *(void **)(v16 + 64);
    unint64_t v26 = *(void *)(v16 + 72);
    int64_t v27 = *(void *)(v16 + 80);
    uint64_t v28 = *(void *)(v16 + 88);
    char v29 = *(void *)(v16 + 96);
    unint64_t v30 = *(void *)(v16 + 104);
    BOOL v31 = *(void **)(v16 + 112);
    uint64_t v32 = *(void *)(*(void *)(v1 + 56) + v14);
    uint64_t v33 = *(void *)(v3 + 48) + v15;
    *(_WORD *)uint64_t v33 = *(_WORD *)v16;
    *(void *)(v33 + 8) = v17;
    *(unsigned char *)(v33 + 16) = v18;
    *(_WORD *)(v33 + 17) = v19;
    *(void *)(v33 + 24) = v20;
    *(void *)(v33 + 32) = v21;
    *(void *)(v33 + 40) = v22;
    *(void *)(v33 + 48) = v23;
    *(void *)(v33 + 56) = v24;
    *(void *)(v33 + 64) = v25;
    *(void *)(v33 + 72) = v26;
    *(void *)(v33 + 80) = v27;
    *(void *)(v33 + 88) = v28;
    *(void *)(v33 + 96) = v29;
    *(void *)(v33 + 104) = v30;
    *(void *)(v33 + 112) = v31;
    *(void *)(*(void *)(v3 + 56) + v14) = v32;
    outlined copy of __MaterialResource.CoreMaterialFunction?(v20, v21, v22, v23, v24, v25);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v26, v27, v28, v29, v30, v31);
    unint64_t result = (void *)swift_retain();
  }
  uint64_t v36 = v34 + 2;
  if (v36 >= v39) {
    goto LABEL_26;
  }
  uint64_t v35 = *(void *)(v40 + 8 * v36);
  if (v35)
  {
    int v7 = v36;
    goto LABEL_25;
  }
  while (1)
  {
    int v7 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v7 >= v39) {
      goto LABEL_26;
    }
    uint64_t v35 = *(void *)(v40 + 8 * v7);
    ++v36;
    if (v35) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<CustomMaterial.CustomShaderParameters>>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<UnlitMaterial.UnlitShaderParameters>>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<PhysicallyBasedMaterial.PBRShaderParameters>>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AudioPlaybackController.Internal>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<__REAsset, RESceneDescriptor>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      unint64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v19 - 1) & v19;
    uint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    swift_retain();
    unint64_t result = (void *)swift_retain();
  }
  char v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unint64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Component.Type>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<EmitterAssetKey, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      unint64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 24 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    unint64_t v18 = *(void *)(v17 + 16);
    uint64_t v19 = 8 * v15;
    char v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int v21 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)int v21 = *(_OWORD *)v17;
    *(void *)(v21 + 16) = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, SimpleMaterial.SimpleMaterialMapping>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, __MaterialResource>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      unint64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      int v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 4 * v15;
    unint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    unint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    unint64_t result = (void *)swift_retain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unint64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, __MaterialResource>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      unint64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v25 - 1) & v25;
    uint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 24 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    unint64_t v18 = *(_WORD *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    LOWORD(v17) = *(_WORD *)(v17 + 17);
    int v21 = 8 * v15;
    uint64_t v22 = *(void *)(*(void *)(v2 + 56) + v21);
    unint64_t v23 = *(void *)(v4 + 48) + v16;
    *(_WORD *)unint64_t v23 = v18;
    *(void *)(v23 + 8) = v19;
    *(unsigned char *)(v23 + 16) = v20;
    *(_WORD *)(v23 + 17) = v17;
    *(void *)(*(void *)(v4 + 56) + v21) = v22;
    unint64_t result = (void *)swift_retain();
  }
  unint64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    unint64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<IKRig.Joint.ID, Int>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<IKRig.Constraint.ID, Int>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  long long v26[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, StateMachineParameterProtocol>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    void *v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      unint64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    char v20 = 40 * v15;
    outlined init with copy of __REAssetService(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    int v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int v21 = v19;
    v21[1] = v18;
    outlined init with take of BindableDataInternal(v26, *(void *)(v4 + 56) + v20);
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, __RKMaterialParameterBlock.Parameter>, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of __RKMaterialParameterBlock.Parameter);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, Task<__MaterialResource, Error>>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      unint64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v25 - 1) & v25;
    uint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 24 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    unint64_t v18 = *(_WORD *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    LOWORD(v17) = *(_WORD *)(v17 + 17);
    int v21 = 8 * v15;
    uint64_t v22 = *(void *)(*(void *)(v2 + 56) + v21);
    unint64_t v23 = *(void *)(v4 + 48) + v16;
    *(_WORD *)unint64_t v23 = v18;
    *(void *)(v23 + 8) = v19;
    *(unsigned char *)(v23 + 16) = v20;
    *(_WORD *)(v23 + 17) = v17;
    *(void *)(*(void *)(v4 + 56) + v21) = v22;
    unint64_t result = (void *)swift_retain();
  }
  unint64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    unint64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t Trace;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  unint64_t v25 = *(void *)(Trace - 8);
  MEMORY[0x270FA5388](Trace - 8);
  unint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, LoadTrace>);
  uint64_t v5 = *v0;
  int v6 = static _DictionaryStorage.copy(original:)();
  int v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    void *v1 = v7;
    return result;
  }
  int64_t v24 = v1;
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = v5 + 64;
  int v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v9 + 8 * v10) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  Swift::UInt64 v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  Swift::Int v14 = v13 & *(void *)(v5 + 64);
  uint64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v15) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v9 + 8 * v21);
    ++v11;
    if (!v22)
    {
      Swift::UInt64 v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_23;
      }
      uint64_t v22 = *(void *)(v9 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    Swift::Int v14 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    unint64_t v18 = 4 * v17;
    uint64_t v19 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v17);
    char v20 = *(void *)(v25 + 72) * v17;
    outlined init with copy of LoadTrace(*(void *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for LoadTrace);
    *(_DWORD *)(*(void *)(v7 + 48) + v18) = v19;
    unint64_t result = (void *)outlined init with take of LoadTrace((uint64_t)v4, *(void *)(v7 + 56) + v20);
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  uint64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    Swift::UInt64 v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    Swift::UInt64 v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v9 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  long long v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      unint64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    int64_t v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    char v20 = (void *)(*(void *)(v4 + 48) + v16);
    void *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)outlined copy of Data._Representation(v24, *((unint64_t *)&v24 + 1));
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    unint64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationCollectionCache>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.Configuration>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      unint64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    char v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    int v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    unint64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, Entity>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, URL>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  int v6 = static _DictionaryStorage.copy(original:)();
  int v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v24 = v5 + 64;
  int v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  Swift::UInt64 v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v27 = v2 + 16;
  unint64_t v25 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      Swift::Int v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    char v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      char v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
  }
  int v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  char v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    char v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long *v19;
  long long v20;
  long long v21;
  _OWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PhotogrammetrySession.Pose>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      unint64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v26 = __clz(__rbit64(v24));
    uint64_t v12 = (v24 - 1) & v24;
    uint64_t v15 = v26 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 32 * v15;
    uint64_t v19 = (long long *)(*(void *)(v2 + 56) + v18);
    char v20 = *v19;
    int v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (_OWORD *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v20;
    v22[1] = v21;
  }
  unint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    unint64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, simd_float4x4?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    int64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      unint64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    char v29 = __clz(__rbit64(v27));
    uint64_t v12 = (v27 - 1) & v27;
    uint64_t v15 = v29 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 80 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    char v20 = *(unsigned char *)(v19 + 64);
    int v21 = *(_OWORD *)v19;
    uint64_t v22 = *(_OWORD *)(v19 + 16);
    unint64_t v23 = *(_OWORD *)(v19 + 32);
    int64_t v24 = *(_OWORD *)(v19 + 48);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v25 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)unint64_t v25 = v21;
    *(_OWORD *)(v25 + 16) = v22;
    *(_OWORD *)(v25 + 32) = v23;
    *(_OWORD *)(v25 + 48) = v24;
    *(unsigned char *)(v25 + 64) = v20;
  }
  uint64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  int64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    unint64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Task<(), Never>>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  int v6 = static _DictionaryStorage.copy(original:)();
  int v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  Swift::UInt64 v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v24 = v5 + 64;
  unint64_t v25 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v26 = v2 + 32;
  int64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      Swift::Int v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    char v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      char v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    unint64_t v17 = 8 * v15;
    unint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    unint64_t result = (void *)swift_retain();
  }
  int v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  char v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    char v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  long long v27[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MeshBuffers.Identifier, MeshBufferErased>);
  int64_t v24 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *int64_t v24 = v3;
    return result;
  }
  unint64_t result = (void *)(v2 + 64);
  uint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5) {
    unint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  }
  int v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  Swift::UInt v8 = 1 << *(unsigned char *)(v1 + 32);
  unint64_t v9 = -1;
  if (v8 < 64) {
    unint64_t v9 = ~(-1 << v8);
  }
  int v10 = v9 & *(void *)(v1 + 64);
  unint64_t v25 = v1 + 64;
  unint64_t v26 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      Swift::UInt64 v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v12 = v11 | (v7 << 6);
      goto LABEL_12;
    }
    int v21 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v26) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v7;
    if (!v22)
    {
      int v7 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_26;
      }
      uint64_t v22 = *(void *)(v25 + 8 * v7);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    int v10 = (v22 - 1) & v22;
    uint64_t v12 = __clz(__rbit64(v22)) + (v7 << 6);
LABEL_12:
    int64_t v13 = 24 * v12;
    Swift::Int v14 = *(void *)(v1 + 48) + 24 * v12;
    unint64_t v16 = *(void *)v14;
    uint64_t v15 = *(void *)(v14 + 8);
    unint64_t v17 = *(unsigned char *)(v14 + 16);
    unint64_t v18 = *(unsigned char *)(v14 + 17);
    uint64_t v19 = 40 * v12;
    outlined init with copy of __REAssetService(*(void *)(v1 + 56) + 40 * v12, (uint64_t)v27);
    char v20 = *(void *)(v3 + 48) + v13;
    *(void *)char v20 = v16;
    *(void *)(v20 + 8) = v15;
    *(unsigned char *)(v20 + 16) = v17;
    *(unsigned char *)(v20 + 17) = v18;
    outlined init with take of BindableDataInternal(v27, *(void *)(v3 + 56) + v19);
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int v7 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int v7 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v7 >= v26) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v7);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  __int16 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, BufferDescriptor>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    int64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      unint64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v27 - 1) & v27;
    uint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    int v21 = *(void *)v19;
    char v20 = *(void *)(v19 + 8);
    uint64_t v22 = *(unsigned char *)(v19 + 16);
    unint64_t v23 = *(unsigned char *)(v19 + 17);
    int64_t v24 = *(_WORD *)(v19 + 18);
    LOBYTE(v19) = *(unsigned char *)(v19 + 20);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v25 = *(void *)(v4 + 56) + v18;
    *(void *)unint64_t v25 = v21;
    *(void *)(v25 + 8) = v20;
    *(unsigned char *)(v25 + 16) = v22;
    *(unsigned char *)(v25 + 17) = v23;
    *(_WORD *)(v25 + 18) = v24;
    *(unsigned char *)(v25 + 20) = v19;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  int64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    unint64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, String>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Int32>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      unint64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      int v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v23 = __clz(__rbit64(v21));
    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 4 * v15;
    uint64_t v19 = *(_DWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_DWORD *)(*(void *)(v4 + 56) + v18) = v19;
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unint64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, UInt64>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationSetCache>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  long long v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationSet>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    char v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      unint64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      char v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v29 - 1) & v29;
    uint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    char v20 = 40 * v15;
    int v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    unint64_t v23 = *(void *)(v21 + 8);
    int64_t v24 = *(void *)(v21 + 16);
    unint64_t v25 = (void *)(*(void *)(v4 + 48) + v16);
    unint64_t v26 = *(_OWORD *)(v21 + 24);
    void *v25 = v19;
    v25[1] = v18;
    int64_t v27 = *(void *)(v4 + 56) + v20;
    *(void *)int64_t v27 = v22;
    *(void *)(v27 + 8) = v23;
    *(void *)(v27 + 16) = v24;
    *(_OWORD *)(v27 + 24) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  char v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    unint64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __ARReferenceProvider>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  long long v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ExtrudedGlyphDescriptor.Info, ExtrudedGlyphDescriptor>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v36 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v36 >= v13) {
      goto LABEL_26;
    }
    uint64_t v37 = *(void *)(v6 + 8 * v36);
    ++v9;
    if (!v37)
    {
      unint64_t v9 = v36 + 1;
      if (v36 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v37 = *(void *)(v6 + 8 * v9);
      if (!v37) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v37 - 1) & v37;
    uint64_t v15 = __clz(__rbit64(v37)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 48 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + 48 * v15;
    unint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(void *)(v17 + 16);
    int v21 = *(void *)(v17 + 24);
    uint64_t v22 = *(void *)(v17 + 32);
    unint64_t v23 = *(_WORD *)(v17 + 40);
    LODWORD(v17) = *(_DWORD *)(v17 + 44);
    int64_t v24 = v15 << 6;
    unint64_t v25 = *(void *)(v2 + 56) + v24;
    unint64_t v26 = *(void *)v25;
    int64_t v27 = *(void *)(v25 + 8);
    uint64_t v28 = *(void *)(v25 + 16);
    unint64_t v30 = *(void *)(v25 + 24);
    char v29 = *(void *)(v25 + 32);
    BOOL v31 = *(_WORD *)(v25 + 40);
    uint64_t v32 = *(_DWORD *)(v25 + 44);
    uint64_t v33 = *(void *)(v4 + 48) + v16;
    uint64_t v34 = *(_OWORD *)(v25 + 48);
    *(void *)uint64_t v33 = v18;
    *(void *)(v33 + 8) = v19;
    *(void *)(v33 + 16) = v20;
    *(void *)(v33 + 24) = v21;
    *(void *)(v33 + 32) = v22;
    *(_WORD *)(v33 + 40) = v23;
    *(_DWORD *)(v33 + 44) = v17;
    uint64_t v35 = *(void *)(v4 + 56) + v24;
    *(void *)uint64_t v35 = v26;
    *(void *)(v35 + 8) = v27;
    *(void *)(v35 + 16) = v28;
    *(void *)(v35 + 24) = v30;
    *(void *)(v35 + 32) = v29;
    *(_WORD *)(v35 + 40) = v31;
    *(_DWORD *)(v35 + 44) = v32;
    *(_OWORD *)(v35 + 48) = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v38 = v36 + 2;
  if (v38 >= v13) {
    goto LABEL_26;
  }
  uint64_t v37 = *(void *)(v6 + 8 * v38);
  if (v37)
  {
    unint64_t v9 = v38;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v37 = *(void *)(v6 + 8 * v9);
    ++v38;
    if (v37) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [StateMachineTransition]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Swift.AnyObject>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      unint64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    char v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  long long v23;
  void *v24;
  _OWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, RESRT>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    int64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      unint64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v27 - 1) & v27;
    uint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = *(void *)(v2 + 56);
    unint64_t v18 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = v18[1];
    char v20 = 48 * v15;
    int v21 = *(_OWORD *)(v17 + v20);
    uint64_t v22 = *(_OWORD *)(v17 + v20 + 16);
    unint64_t v23 = *(_OWORD *)(v17 + v20 + 32);
    int64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v24 = *v18;
    v24[1] = v19;
    unint64_t v25 = (_OWORD *)(*(void *)(v4 + 56) + v20);
    void *v25 = v21;
    v25[1] = v22;
    unint64_t v25[2] = v23;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  int64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    unint64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, Task<__MaterialResource, Error>>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  unint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    void *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  int v6 = v2 + 64;
  int v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int v10 = 1 << *(unsigned char *)(v2 + 32);
  Swift::UInt64 v11 = -1;
  if (v10 < 64) {
    Swift::UInt64 v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      Swift::Int v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      unint64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      int v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 4 * v15;
    unint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    unint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    unint64_t result = (void *)swift_retain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  int v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unint64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v22 = __clz(__rbit64(v20));
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = v22 + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    int64_t v24 = __clz(__rbit64(v22));
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = v24 + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    int64_t v19 = 16 * v16;
    unint64_t v20 = *(_OWORD *)(*(void *)(v3 + 56) + v19);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(void *)(v5 + 56) + v19) = v20;
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v14) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v7 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    int64_t v19 = 16 * v16;
    unint64_t v20 = (uint64_t *)(*(void *)(v3 + 56) + v19);
    unint64_t v22 = *v20;
    int64_t v21 = v20[1];
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    unint64_t v23 = (void *)(*(void *)(v5 + 56) + v19);
    *unint64_t v23 = v22;
    v23[1] = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v26 = v24 + 2;
  if (v26 >= v14) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v7 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v14) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v7 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v16);
    unint64_t v20 = *v18;
    int64_t v19 = v18[1];
    int64_t v21 = 8 * v16;
    unint64_t v22 = *(void *)(*(void *)(v3 + 56) + v21);
    unint64_t v23 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v23 = v20;
    v23[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v21) = v22;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v26 = v24 + 2;
  if (v26 >= v14) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v7 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    unint64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    int64_t v19 = v18[1];
    unint64_t v20 = 8 * v16;
    int64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_retain();
  }
  unint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    unint64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    int64_t v19 = v18[1];
    unint64_t v20 = 8 * v16;
    int64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v38 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t v36 = v5;
    unint64_t result = (void *)swift_release();
    *uint64_t v38 = v36;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  BOOL v8 = v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v7;
  uint64_t v43 = v5;
  if (v8)
  {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v7);
    uint64_t v5 = v43;
  }
  int64_t v9 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v42 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  int64_t v39 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v40 = v3 + 64;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v44 = v9;
      unint64_t v14 = v13 | (v9 << 6);
      uint64_t v15 = v42;
      uint64_t v5 = v43;
      goto LABEL_12;
    }
    int64_t v32 = v9 + 1;
    uint64_t v15 = v42;
    uint64_t v5 = v43;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v32 >= v39) {
      goto LABEL_26;
    }
    unint64_t v33 = *(void *)(v40 + 8 * v32);
    int64_t v34 = v9 + 1;
    if (!v33)
    {
      int64_t v34 = v32 + 1;
      if (v32 + 1 >= v39) {
        goto LABEL_26;
      }
      unint64_t v33 = *(void *)(v40 + 8 * v34);
      if (!v33) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v33 - 1) & v33;
    int64_t v44 = v34;
    unint64_t v14 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_12:
    uint64_t v16 = 16 * v14;
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v18 = (void *)(*(void *)(v15 + 48) + 16 * v14);
    uint64_t v19 = v18[1];
    uint64_t v20 = 80 * v14;
    uint64_t v21 = *(void *)(v17 + v20);
    uint64_t v22 = *(void *)(v17 + v20 + 8);
    uint64_t v23 = *(void *)(v17 + v20 + 16);
    uint64_t v24 = *(void *)(v17 + v20 + 24);
    uint64_t v26 = *(void *)(v17 + v20 + 32);
    uint64_t v25 = *(void *)(v17 + v20 + 40);
    uint64_t v28 = *(void *)(v17 + v20 + 48);
    uint64_t v27 = *(void *)(v17 + v20 + 56);
    char v29 = *(unsigned char *)(v17 + v20 + 64);
    unint64_t v30 = (void *)(*(void *)(v5 + 48) + v16);
    *unint64_t v30 = *v18;
    v30[1] = v19;
    uint64_t v31 = *(void *)(v5 + 56) + v20;
    *(void *)uint64_t v31 = v21;
    *(void *)(v31 + 8) = v22;
    *(void *)(v31 + 16) = v23;
    *(void *)(v31 + 24) = v24;
    *(void *)(v31 + 32) = v26;
    *(void *)(v31 + 40) = v25;
    *(void *)(v31 + 48) = v28;
    *(void *)(v31 + 56) = v27;
    *(unsigned char *)(v31 + 64) = v29;
    swift_bridgeObjectRetain();
    LOBYTE(v37) = v29;
    unint64_t result = (void *)a2(v21, v22, v23, v24, v26, v25, v28, v27, v37);
    int64_t v9 = v44;
  }
  int64_t v35 = v32 + 2;
  if (v35 >= v39) {
    goto LABEL_26;
  }
  unint64_t v33 = *(void *)(v40 + 8 * v35);
  if (v33)
  {
    int64_t v34 = v35;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v34 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v34 >= v39) {
      goto LABEL_26;
    }
    unint64_t v33 = *(void *)(v40 + 8 * v34);
    ++v35;
    if (v33) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, USKObjectPath>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v24 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  uint64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void **)(*(void *)(v5 + 56) + v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = v18;
  }
  uint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *a1, char a2, void *a3)
{
  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v44 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[6];
  swift_bridgeObjectRetain();
  int64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>);
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v21 = (uint64_t *)(v20[6] + 16 * v11);
    *uint64_t v21 = v7;
    v21[1] = v6;
    *(void *)(v20[7] + 8 * v11) = v8;
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    unint64_t v20[2] = v24;
    uint64_t v25 = v44 - 1;
    if (v44 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v26 = a1 + 9;
    while (1)
    {
      uint64_t v28 = *(v26 - 2);
      uint64_t v27 = *(v26 - 1);
      uint64_t v29 = *v26;
      unint64_t v30 = (void *)*a3;
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v23 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v23) {
        break;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1, &demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>);
        unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_25;
        }
      }
      if (v36) {
        goto LABEL_10;
      }
      uint64_t v38 = (void *)*a3;
      *(void *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      int64_t v39 = (uint64_t *)(v38[6] + 16 * v31);
      *int64_t v39 = v28;
      v39[1] = v27;
      *(void *)(v38[7] + 8 * v31) = v29;
      uint64_t v40 = v38[2];
      BOOL v23 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v23) {
        goto LABEL_24;
      }
      v38[2] = v41;
      v26 += 3;
      if (!--v25) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1, &demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._unint64_t object = (void *)0x800000022834F0F0;
  v42._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)();
  v43._uint64_t countAndFlagsBits = 39;
  v43._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;

  uint64_t v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_22;
  }
  uint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  int64_t v9 = (void *)*a3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if ((v10 & 1) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) == 0) {
        goto LABEL_12;
      }
    }
LABEL_9:
    uint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_27:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_28:
    _StringGuts.grow(_:)(30);
    v41._unint64_t object = (void *)0x800000022834F0F0;
    v41._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v41);
    _print_unlocked<A, B>(_:_:)();
    v42._uint64_t countAndFlagsBits = 39;
    v42._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  unint64_t v11 = v16;
  if (v15) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v20 = (void *)*a3;
  *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  uint64_t v21 = 8 * v11;
  *(void *)(v20[6] + v21) = v8;
  *(void *)(v20[7] + v21) = v7;
  uint64_t v22 = v20[2];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v20[2] = v24;
  if (v6 != 1)
  {
    uint64_t v25 = a1 + 7;
    uint64_t v26 = 1;
    while (v26 < a1[2])
    {
      uint64_t v28 = *(v25 - 1);
      uint64_t v27 = *v25;
      uint64_t v29 = (void *)*a3;
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
      char v32 = v29[2];
      uint64_t v33 = (v31 & 1) == 0;
      BOOL v23 = __OFADD__(v32, v33);
      BOOL v34 = v32 + v33;
      if (v23) {
        goto LABEL_24;
      }
      uint64_t v35 = v31;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_27;
        }
      }
      if (v35) {
        goto LABEL_9;
      }
      char v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v38 = 8 * v30;
      *(void *)(v37[6] + v38) = v28;
      *(void *)(v37[7] + v38) = v27;
      int64_t v39 = v37[2];
      BOOL v23 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v23) {
        goto LABEL_25;
      }
      ++v26;
      v37[2] = v40;
      v25 += 2;
      if (v6 == v26) {
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
LABEL_22:
  swift_bridgeObjectRelease_n();
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;

  uint64_t v4 = a1[2];
  if (!v4) {
    goto LABEL_22;
  }
  uint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  int64_t v9 = (void *)*a3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if ((v10 & 1) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) == 0) {
        goto LABEL_12;
      }
    }
LABEL_9:
    uint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_28;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_27:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_28:
    _StringGuts.grow(_:)(30);
    v41._unint64_t object = (void *)0x800000022834F0F0;
    v41._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v41);
    _print_unlocked<A, B>(_:_:)();
    v42._uint64_t countAndFlagsBits = 39;
    v42._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  unint64_t v11 = v16;
  if (v15) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v20 = (void *)*a3;
  *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  uint64_t v21 = 8 * v11;
  *(void *)(v20[6] + v21) = v8;
  *(void *)(v20[7] + v21) = v7;
  uint64_t v22 = v20[2];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v20[2] = v24;
  if (v4 != 1)
  {
    uint64_t v25 = a1 + 7;
    uint64_t v26 = 1;
    while (v26 < a1[2])
    {
      uint64_t v27 = *(v25 - 1);
      uint64_t v28 = *v25;
      uint64_t v29 = (void *)*a3;
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
      char v32 = v29[2];
      uint64_t v33 = (v31 & 1) == 0;
      BOOL v23 = __OFADD__(v32, v33);
      BOOL v34 = v32 + v33;
      if (v23) {
        goto LABEL_24;
      }
      uint64_t v35 = v31;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_27;
        }
      }
      if (v35) {
        goto LABEL_9;
      }
      char v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v38 = 8 * v30;
      *(void *)(v37[6] + v38) = v27;
      *(void *)(v37[7] + v38) = v28;
      int64_t v39 = v37[2];
      BOOL v23 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v23) {
        goto LABEL_25;
      }
      ++v26;
      v37[2] = v40;
      v25 += 2;
      if (v4 == v26) {
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
LABEL_22:
  swift_bridgeObjectRelease();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;

  uint64_t v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_22;
  }
  uint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  int64_t v9 = (void *)*a3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if ((v10 & 1) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) == 0) {
        goto LABEL_12;
      }
    }
LABEL_9:
    uint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_27:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_28:
    _StringGuts.grow(_:)(30);
    v41._unint64_t object = (void *)0x800000022834F0F0;
    v41._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v41);
    _print_unlocked<A, B>(_:_:)();
    v42._uint64_t countAndFlagsBits = 39;
    v42._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  unint64_t v11 = v16;
  if (v15) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v20 = (void *)*a3;
  *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  uint64_t v21 = 8 * v11;
  *(void *)(v20[6] + v21) = v8;
  *(void *)(v20[7] + v21) = v7;
  uint64_t v22 = v20[2];
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v20[2] = v24;
  if (v6 != 1)
  {
    uint64_t v25 = a1 + 7;
    uint64_t v26 = 1;
    while (v26 < a1[2])
    {
      uint64_t v28 = *(v25 - 1);
      uint64_t v27 = *v25;
      uint64_t v29 = (void *)*a3;
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
      char v32 = v29[2];
      uint64_t v33 = (v31 & 1) == 0;
      BOOL v23 = __OFADD__(v32, v33);
      BOOL v34 = v32 + v33;
      if (v23) {
        goto LABEL_24;
      }
      uint64_t v35 = v31;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_27;
        }
      }
      if (v35) {
        goto LABEL_9;
      }
      char v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v38 = 8 * v30;
      *(void *)(v37[6] + v38) = v28;
      *(void *)(v37[7] + v38) = v27;
      int64_t v39 = v37[2];
      BOOL v23 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v23) {
        goto LABEL_25;
      }
      ++v26;
      v37[2] = v40;
      v25 += 2;
      if (v6 == v26) {
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
LABEL_22:
  swift_bridgeObjectRelease_n();
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  char v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;

  uint64_t v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v44 = a1[6];
  swift_bridgeObjectRetain();
  int64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v21 = (uint64_t *)(v20[6] + 16 * v11);
    *uint64_t v21 = v8;
    v21[1] = v7;
    *(void *)(v20[7] + 8 * v11) = v44;
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    unint64_t v20[2] = v24;
    uint64_t v25 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v26 = a1 + 9;
    while (1)
    {
      uint64_t v28 = *(v26 - 2);
      uint64_t v27 = *(v26 - 1);
      uint64_t v29 = *v26;
      unint64_t v30 = (void *)*a3;
      swift_bridgeObjectRetain();
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v23 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v23) {
        break;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1);
        unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_25;
        }
      }
      if (v36) {
        goto LABEL_10;
      }
      uint64_t v38 = (void *)*a3;
      *(void *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      int64_t v39 = (uint64_t *)(v38[6] + 16 * v31);
      *int64_t v39 = v28;
      v39[1] = v27;
      *(void *)(v38[7] + 8 * v31) = v29;
      uint64_t v40 = v38[2];
      BOOL v23 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v23) {
        goto LABEL_24;
      }
      v26 += 3;
      v38[2] = v41;
      if (!--v25) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._unint64_t object = (void *)0x800000022834F0F0;
  v42._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)();
  v43._uint64_t countAndFlagsBits = 39;
  v43._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type NSString and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSString and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSString and conformance NSObject)
  {
    type metadata accessor for OS_os_log(255, (unint64_t *)&lazy cache variable for type metadata for NSString);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSString and conformance NSObject);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioLibraryComponent()
{
  return &type metadata for AudioLibraryComponent;
}

uint64_t outlined release of REEventBus.DispatcherHandle(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of __RKEntityAction.ActionStateObservation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of __RKEntityAction.ActionStateObservation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of LoadTrace(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s10RealityKit29__RKEntityActionSpecificationOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t dispatch thunk of __ARReferenceProviding.__fetchReferenceObject(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t __RKEntityActionVisibilityTypeUSD.rawValue.getter(char a1)
{
  uint64_t result = 1701736302;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7466654C65766F6DLL;
      break;
    case 2:
      uint64_t result = 0x6867695265766F6DLL;
      break;
    case 3:
      uint64_t result = 0x6E6F724665766F6DLL;
      break;
    case 4:
      uint64_t result = 0x6B63614265766F6DLL;
      break;
    case 5:
      uint64_t result = 0x766F624165766F6DLL;
      break;
    case 6:
      uint64_t result = 0x6F6C654265766F6DLL;
      break;
    case 7:
      uint64_t result = 7368560;
      break;
    case 8:
      uint64_t result = 0x7055656C616373;
      break;
    case 9:
      uint64_t result = 0x776F44656C616373;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveEaseTypeUSD.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionVisibilityTypeUSD.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

void __swiftcall __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)(RealityKit::__RKEntityActionGroupArguments *__return_ptr retstr, RealityKit::__RKEntityGroupActionOrder order, Swift::OpaquePointer actions, Swift::Bool exclusive, Swift::Int loopCount)
{
  retstr->order = *(unsigned char *)order;
  retstr->actions = actions;
  retstr->exclusive.value = exclusive;
  retstr->loopCount.value = loopCount;
  *(_WORD *)&retstr->loopCount.is_nil = 0;
}

__n128 __RKEntitySpinActionArguments.init(target:duration:iterations:direction:axis:)@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>, __n128 a6@<Q2>)
{
  char v10 = *a2;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a3, a1, v11);
  if (a4 < 0.0) {
    a4 = 1.0;
  }
  uint64_t v12 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
  uint64_t v13 = a3 + v12[5];
  *(float *)uint64_t v13 = a4;
  *(unsigned char *)(v13 + 4) = 0;
  if (a5 < 0.0) {
    float v14 = 1.0;
  }
  else {
    float v14 = a5;
  }
  uint64_t v15 = v12[7];
  uint64_t v16 = a3 + v12[6];
  char v17 = (__n128 *)(a3 + v12[8]);
  *(float *)uint64_t v16 = v14;
  *(unsigned char *)(v16 + 4) = 0;
  *(unsigned char *)(a3 + v15) = v10;
  __n128 result = a6;
  __n128 *v17 = a6;
  v17[1].n128_u8[0] = 0;
  return result;
}

__n128 __RKEntityOrbitEntityActionArguments.init(target:pivotTarget:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, float a7@<S0>, float a8@<S1>, __n128 a9@<Q2>, float a10@<S3>, float a11@<S4>)
{
  char v20 = *a4;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32);
  v22(a6, a1, v21);
  BOOL v23 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  v22(a6 + v23[5], a2, v21);
  float v24 = 1.0;
  if (a7 >= 0.0) {
    float v24 = a7;
  }
  uint64_t v25 = a6 + v23[6];
  uint64_t v26 = a6 + v23[7];
  uint64_t v27 = v23[9];
  uint64_t v28 = (__n128 *)(a6 + v23[8]);
  uint64_t v29 = v23[10];
  uint64_t v30 = v23[11];
  uint64_t v31 = a6 + v23[12];
  uint64_t v32 = a6 + v23[13];
  *(float *)uint64_t v25 = v24;
  *(unsigned char *)(v25 + 4) = 0;
  *(float *)uint64_t v26 = a8;
  *(unsigned char *)(v26 + 4) = 0;
  __n128 result = a9;
  *uint64_t v28 = a9;
  v28[1].n128_u8[0] = 0;
  *(unsigned char *)(a6 + v27) = a3;
  *(unsigned char *)(a6 + v29) = v20;
  *(unsigned char *)(a6 + v30) = a5;
  *(float *)uint64_t v31 = a10;
  *(unsigned char *)(v31 + 4) = 0;
  *(float *)uint64_t v32 = a11;
  *(unsigned char *)(v32 + 4) = 0;
  return result;
}

uint64_t __RKEntityAudioActionArguments.init(target:path:type:spatialMode:volume:loops:multiplePerformBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, char a6@<W5>, char *a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  char v13 = *a4;
  char v14 = *a5;
  char v24 = *a7;
  uint64_t v15 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
  uint64_t v16 = v15[6];
  uint64_t v17 = a8 + v15[7];
  uint64_t v19 = v15[8];
  uint64_t v18 = v15[9];
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(a8, a1, v20);
  uint64_t v22 = (void *)(a8 + v15[5]);
  *uint64_t v22 = a2;
  v22[1] = a3;
  *(unsigned char *)(a8 + v16) = v13;
  *(unsigned char *)(a8 + v18) = v14;
  *(double *)uint64_t v17 = a9;
  *(unsigned char *)(v17 + 8) = 0;
  *(unsigned char *)(a8 + v19) = a6;
  *(unsigned char *)(a8 + v15[10]) = v24;
  return result;
}

uint64_t __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, float a9@<S2>)
{
  char v17 = *a3;
  uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  uint64_t v19 = a6 + started[14];
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  char v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v24(v19, 1, 1, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(a6, a1, v20);
  *(void *)(a6 + started[5]) = a2;
  *(unsigned char *)(a6 + started[6]) = v17;
  *(unsigned char *)(a6 + started[10]) = a4;
  *(double *)(a6 + started[8]) = a8;
  *(double *)(a6 + started[7]) = a7;
  *(float *)(a6 + started[11]) = a9;
  *(unsigned char *)(a6 + started[9]) = a5;
  *(unsigned char *)(a6 + started[12]) = 0;
  uint64_t v22 = a6 + started[13];
  *(void *)uint64_t v22 = 0x3FF0000000000000;
  *(unsigned char *)(v22 + 8) = 0;
  outlined destroy of BodyTrackingComponent?(v19, &demangling cache variable for type metadata for UUID?);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24)(v19, 1, 1, v20);
}

uint64_t __RKChangeSceneActionArguments.init(sceneRoot:targetSceneIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  int64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t))v9)((void *)(v6 - 8), a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for __RKChangeSceneActionArguments(0) + 20);

  return v9(v7, a2, v6);
}

int *__RKEntityEmphasisActionArguments.init(target:duration:iterations:animationStyle:emphasisAnimationType:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  char v10 = *a2;
  char v11 = *a3;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a4, a1, v12);
  if (a5 < 0.0) {
    a5 = 1.0;
  }
  uint64_t result = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
  uint64_t v14 = a4 + result[5];
  *(float *)uint64_t v14 = a5;
  *(unsigned char *)(v14 + 4) = 0;
  if (a6 < 0.0) {
    float v15 = 1.0;
  }
  else {
    float v15 = a6;
  }
  uint64_t v16 = result[7];
  uint64_t v17 = a4 + result[6];
  uint64_t v18 = result[8];
  *(float *)uint64_t v17 = v15;
  *(unsigned char *)(v17 + 4) = 0;
  *(unsigned char *)(a4 + v16) = v10;
  *(unsigned char *)(a4 + v18) = v11;
  return result;
}

uint64_t __RKEntityForceActionArguments.init(target:force:velocity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v16 = type metadata accessor for __RKEntityForceActionArguments(0);
  uint64_t v17 = a8 + *(int *)(v16 + 20);
  uint64_t v18 = a8 + *(int *)(v16 + 24);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(a8, a1, v19);
  *(void *)uint64_t v17 = a2;
  *(void *)(v17 + 8) = a3;
  *(unsigned char *)(v17 + 16) = a4 & 1;
  *(void *)uint64_t v18 = a5;
  *(void *)(v18 + 8) = a6;
  *(unsigned char *)(v18 + 16) = a7 & 1;
  return result;
}

__n128 __RKEntityLookAtCameraActionArguments.init(target:duration:animationDuration:direction:rotation:upVector:loops:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>, __n128 a6@<Q2>, float a7@<S3>, __n128 a8@<Q4>)
{
  uint64_t v14 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  uint64_t v15 = a3 + v14[5];
  uint64_t v16 = a3 + v14[6];
  uint64_t v17 = (__n128 *)(a3 + v14[7]);
  uint64_t v18 = a3 + v14[8];
  uint64_t v19 = v14[10];
  uint64_t v20 = (__n128 *)(a3 + v14[9]);
  uint64_t v21 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(a3, a1, v21);
  *(float *)uint64_t v15 = a4;
  *(unsigned char *)(v15 + 4) = 0;
  *(float *)uint64_t v16 = a5;
  *(unsigned char *)(v16 + 4) = 0;
  __n128 *v17 = a6;
  v17[1].n128_u8[0] = 0;
  *(float *)uint64_t v18 = a7;
  *(unsigned char *)(v18 + 4) = 0;
  __n128 result = a8;
  __n128 *v20 = a8;
  v20[1].n128_u8[0] = 0;
  *(unsigned char *)(a3 + v19) = a2;
  return result;
}

uint64_t __RKEntityCustomActionArguments.init(target:actionIdentifier:customArguments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v24 - v12;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v13);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v18(v13, 1, v14) == 1)
  {
    UUID.init(uuidString:)();
    uint64_t result = v18(v10, 1, v14);
    if (result == 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v20(v17, v10, v14);
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v20(v17, v13, v14);
  }
  v20(a5, v17, v14);
  uint64_t v21 = type metadata accessor for __RKEntityCustomActionArguments(0);
  uint64_t v22 = &a5[*(int *)(v21 + 20)];
  uint64_t v23 = v25;
  *(void *)uint64_t v22 = v24;
  *((void *)v22 + 1) = v23;
  if (!a4) {
    a4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  uint64_t result = outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for UUID?);
  *(void *)&a5[*(int *)(v21 + 24)] = a4;
  return result;
}

uint64_t __RKEntityTransformActionArguments.init(target:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:relativeToEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, char *a13, char *a14, char *a15, char a16, uint64_t a17)
{
  char v47 = *a14;
  char v48 = *a13;
  char v46 = *a15;
  uint64_t v26 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
  uint64_t v27 = a9 + v26[15];
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v28 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1, 1, v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(a9, a1, v28);
  float v30 = 1.0;
  if (a10 >= 0.0) {
    float v30 = a10;
  }
  uint64_t v31 = a9 + v26[5];
  uint64_t v32 = a9 + v26[6];
  uint64_t v33 = a9 + v26[8];
  *(float *)uint64_t v33 = v30;
  *(unsigned char *)(v33 + 4) = 0;
  *(void *)uint64_t v31 = a2;
  *(void *)(v31 + 8) = a3;
  *(unsigned char *)(v31 + 16) = a4 & 1;
  *(void *)uint64_t v32 = 0;
  *(void *)(v32 + 8) = 0;
  *(unsigned char *)(v32 + 16) = 1;
  if ((a7 & 1) == 0)
  {
    *(void *)uint64_t v32 = a5;
    *(void *)(v32 + 8) = a6;
    *(unsigned char *)(v32 + 16) = 0;
  }
  uint64_t v34 = a9 + v26[7];
  uint64_t v35 = v26[9];
  uint64_t v36 = v26[10];
  uint64_t v37 = v26[11];
  uint64_t v38 = v26[12];
  uint64_t v39 = v26[14];
  uint64_t v40 = a9 + v26[13];
  *(_DWORD *)uint64_t v34 = a8;
  *(unsigned char *)(v34 + 4) = BYTE4(a8) & 1;
  *(unsigned char *)(a9 + v35) = v48;
  *(unsigned char *)(a9 + v36) = v47;
  uint64_t v41 = a9 + v39;
  *(unsigned char *)(a9 + v37) = v46;
  *(unsigned char *)(a9 + v38) = a16 & 1;
  *(float *)uint64_t v40 = a11;
  *(unsigned char *)(v40 + 4) = 0;
  *(float *)uint64_t v41 = a12;
  *(unsigned char *)(v41 + 4) = 0;

  return outlined assign with take of UUID?(a17, v27);
}

uint64_t __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, float a11@<S2>, double a12@<D3>)
{
  char v21 = *a3;
  uint64_t started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  uint64_t v23 = a8 + started[14];
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v23, 1, 1, v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(a8, a1, v24);
  *(void *)(a8 + started[5]) = a2;
  *(unsigned char *)(a8 + started[6]) = v21;
  *(unsigned char *)(a8 + started[10]) = a4;
  *(double *)(a8 + started[8]) = a10;
  *(double *)(a8 + started[7]) = a9;
  *(float *)(a8 + started[11]) = a11;
  *(unsigned char *)(a8 + started[9]) = a5;
  *(unsigned char *)(a8 + started[12]) = a6;
  uint64_t v26 = a8 + started[13];
  *(double *)uint64_t v26 = a12;
  *(unsigned char *)(v26 + 8) = 0;

  return outlined assign with take of UUID?(a7, v23);
}

uint64_t __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char a4@<W3>, char a5@<W4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>, float a9@<S0>, float a10@<S1>, float a11@<S2>, float a12@<S3>, float a13@<S4>)
{
  return __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for __RKEntityShowActionArguments, a8, a9, a10, a11, a12, a13);
}

uint64_t __RKEntityHideActionArguments.init(target:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildOutAnimationType:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char a4@<W3>, char a5@<W4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>, float a9@<S0>, float a10@<S1>, float a11@<S2>, float a12@<S3>, float a13@<S4>)
{
  return __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for __RKEntityHideActionArguments, a8, a9, a10, a11, a12, a13);
}

uint64_t __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char a4@<W3>, char a5@<W4>, char *a6@<X5>, char *a7@<X6>, uint64_t (*a8)(void)@<X7>, uint64_t a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, float a13@<S3>, float a14@<S4>)
{
  char v24 = *a2;
  char v25 = *a3;
  char v26 = *a6;
  char v27 = *a7;
  uint64_t v28 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32))(a9, a1, v28);
  if (a10 < 0.0) {
    a10 = 1.0;
  }
  uint64_t v29 = (int *)a8(0);
  uint64_t v30 = a9 + v29[5];
  uint64_t v31 = a9 + v29[6];
  uint64_t v32 = v29[7];
  uint64_t v33 = v29[8];
  uint64_t v34 = v29[9];
  uint64_t v35 = a9 + v29[10];
  uint64_t v36 = v29[11];
  uint64_t v37 = a9 + v29[12];
  uint64_t v38 = v29[14];
  uint64_t v39 = a9 + v29[13];
  uint64_t result = v29[15];
  *(float *)uint64_t v30 = a10;
  *(unsigned char *)(v30 + 4) = 0;
  *(float *)uint64_t v31 = a11;
  *(unsigned char *)(v31 + 4) = 0;
  *(unsigned char *)(a9 + v32) = v24;
  *(unsigned char *)(a9 + v33) = v25;
  *(unsigned char *)(a9 + v34) = a4;
  *(float *)uint64_t v35 = a12;
  *(unsigned char *)(v35 + 4) = 0;
  *(unsigned char *)(a9 + v36) = a5;
  *(float *)uint64_t v37 = a13;
  *(unsigned char *)(v37 + 4) = 0;
  *(float *)uint64_t v39 = a14;
  *(unsigned char *)(v39 + 4) = 0;
  *(unsigned char *)(a9 + v38) = v26;
  *(unsigned char *)(a9 + result) = v27;
  return result;
}

RealityKit::__RKWaitActionArguments __swiftcall __RKWaitActionArguments.init(duration:)(RealityKit::__RKWaitActionArguments duration)
{
  if (duration.duration < 0.0) {
    duration.duration = 1.0;
  }
  float *v1 = duration.duration;
  return duration;
}

RealityKit::__RKEntityTriggerSpecification::Name_optional __swiftcall __RKEntityTriggerSpecification.Name.init(rawValue:)(Swift::String rawValue)
{
  unint64_t object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._unint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityTriggerSpecification.Name.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 14;
  if (v5 < 0xE) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

unint64_t __RKEntityTriggerSpecification.Name.rawValue.getter()
{
  unint64_t result = 1734439524;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x746867696CLL;
      break;
    case 2:
      unint64_t result = 0x74416B6F6F6CLL;
      break;
    case 3:
      unint64_t result = 0x6E656D6563616C70;
      break;
    case 4:
      unint64_t result = 0x74696D69786F7270;
      break;
    case 5:
      unint64_t result = 0x6C61766F6D6572;
      break;
    case 6:
      unint64_t result = 0x646E756F73;
      break;
    case 7:
      unint64_t result = 0x7472617473;
      break;
    case 8:
      unint64_t result = 0x6567726154706174;
      break;
    case 9:
      unint64_t result = 0x72656D6974;
      break;
    case 0xA:
      unint64_t result = 0x6F6973696C6C6F63;
      break;
    case 0xB:
      unint64_t result = 0x6D6F74737563;
      break;
    case 0xC:
      unint64_t result = 0xD000000000000013;
      break;
    case 0xD:
      unint64_t result = 0x70756F7267;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityTriggerSpecification.Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.Name(a1, a2, (void (*)(uint64_t))__RKEntityTriggerSpecification.Name.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.Name(a1, a2, a3, (void (*)(void))__RKEntityTriggerSpecification.Name.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.Name(a1, a2, a3, (void (*)(uint64_t))__RKEntityTriggerSpecification.Name.rawValue.getter);
}

RealityKit::__RKEntityTriggerSpecification::Name_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.Name(Swift::String *a1)
{
  return __RKEntityTriggerSpecification.Name.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.Name@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = __RKEntityTriggerSpecification.Name.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys(void *a1@<X8>)
{
  *a1 = 0x7372656767697274;
  a1[1] = 0xE800000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  return 0x7372656767697274;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys(void *a1@<X8>)
{
  *a1 = 0x746567726174;
  a1[1] = 0xE600000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  return 0x746567726174;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:);
  unint64_t result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.ProximityCodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x65636E6174736964;
  if (v2 != 1)
  {
    uint64_t v5 = 1701869940;
    unint64_t v4 = 0xE400000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x746567726174;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  uint64_t v1 = 0x65636E6174736964;
  if (*v0 != 1) {
    uint64_t v1 = 1701869940;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746567726174;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:);
  unint64_t result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.ProximityCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.ProximityCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityTriggerSpecification.CollisionCodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CollisionCodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CollisionCodingKeys.init(rawValue:);
  unint64_t result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.CollisionCodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE400000000000000;
  unint64_t v5 = 1936154996;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000011;
    unint64_t v4 = 0x800000022834D330;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x746567726174;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  unint64_t v1 = 1936154996;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000011;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746567726174;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CollisionCodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CollisionCodingKeys.init(rawValue:);
  unint64_t result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.CollisionCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.CollisionCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.CustomCodingKeys(void *a1@<X8>)
{
  *a1 = 0x696669746E656469;
  a1[1] = 0xEA00000000007265;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  return 0x696669746E656469;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, BOOL *a3@<X8>)
{
  unint64_t object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._unint64_t object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.CustomCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.CustomCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x696669746E656469;
  if (*v1) {
    uint64_t v2 = 0x72416D6F74737563;
  }
  unint64_t v3 = 0xEA00000000007265;
  if (*v1) {
    unint64_t v3 = 0xEF73746E656D7567;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  if (*v0) {
    return 0x72416D6F74737563;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(a1, v2, a2);
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityTriggerSpecification.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CodingKeys.init(rawValue:);
  unint64_t result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.CodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE900000000000073;
  uint64_t v5 = 0x746E656D75677261;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6F697469646E6F63;
    unint64_t v4 = 0xEA0000000000736ELL;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1701667182;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.CodingKeys()
{
  uint64_t v1 = 0x746E656D75677261;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F697469646E6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701667182;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CodingKeys.init(rawValue:);
  unint64_t result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityTriggerSpecification.name.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x270FA5388](v4);
  BOOL v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityTriggerSpecification(v2, (uint64_t)v6, type metadata accessor for __RKEntityTriggerSpecification);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      char v8 = 8;
      goto LABEL_5;
    case 2:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v8 = 10;
      goto LABEL_5;
    case 3:
      uint64_t result = outlined destroy of __RKEntityTriggerSpecification((uint64_t)v6, type metadata accessor for __RKEntityTriggerSpecification);
      char v10 = 11;
      goto LABEL_17;
    case 4:
      uint64_t result = outlined destroy of __RKEntityTriggerSpecification((uint64_t)v6, type metadata accessor for __RKEntityTriggerSpecification);
      char v10 = 12;
      goto LABEL_17;
    case 5:
      uint64_t result = outlined destroy of __RKEntityTriggerSpecification((uint64_t)v6, type metadata accessor for __RKEntityTriggerSpecification);
      char v10 = 13;
      goto LABEL_17;
    case 6:
      *a1 = 0;
      return result;
    case 7:
      char v10 = 1;
      goto LABEL_17;
    case 8:
      char v10 = 2;
      goto LABEL_17;
    case 9:
      char v10 = 3;
      goto LABEL_17;
    case 10:
      char v10 = 5;
      goto LABEL_17;
    case 11:
      char v10 = 6;
      goto LABEL_17;
    case 12:
      char v10 = 7;
      goto LABEL_17;
    case 13:
      char v10 = 9;
LABEL_17:
      *a1 = v10;
      break;
    default:
      char v8 = 4;
LABEL_5:
      *a1 = v8;
      uint64_t v9 = type metadata accessor for UUID();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v6, v9);
      break;
  }
  return result;
}

uint64_t __RKEntityTriggerSpecification.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v95 = a2;
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.GroupCodingKeys>);
  uint64_t v80 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  char v92 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.TapTargetCodingKeys>);
  uint64_t v79 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v90 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys>);
  uint64_t v76 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  unsigned __int8 v91 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.CustomCodingKeys>);
  uint64_t v78 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v89 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.CollisionCodingKeys>);
  uint64_t v77 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  uint64_t v93 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for UUID();
  uint64_t v86 = *(void *)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  unsigned __int8 v88 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v87 = (char *)&v73 - v10;
  MEMORY[0x270FA5388](v11);
  long long v85 = (char *)&v73 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.ProximityCodingKeys>);
  uint64_t v75 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.CodingKeys>);
  uint64_t v97 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x270FA5388](v19);
  char v21 = (uint64_t *)((char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = a1[3];
  char v98 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys();
  uint64_t v23 = v99;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
  }
  uint64_t v74 = v15;
  uint64_t v73 = v13;
  uint64_t v24 = v96;
  char v99 = v21;
  LOBYTE(v101) = 0;
  uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
  char v27 = v26;
  swift_bridgeObjectRetain();
  v28._uint64_t countAndFlagsBits = v25;
  v28._unint64_t object = v27;
  __RKEntityTriggerSpecification.Name.init(rawValue:)(v28);
  int v29 = v101;
  if (v101 == 14)
  {
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TriggerError and conformance __RKEntityTriggerSpecification.TriggerError();
    swift_allocError();
    *uint64_t v30 = v25;
    v30[1] = (uint64_t)v27;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v18, v16);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
  }
  swift_bridgeObjectRelease();
  switch(v29)
  {
    case 4:
      LOBYTE(v101) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v101) = 0;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      LOBYTE(v101) = 1;
      KeyedDecodingContainer.decode(_:forKey:)();
      int v63 = v62;
      char v100 = 2;
      lazy protocol witness table accessor for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      char v69 = (char)v101;
      if (v101 == 3)
      {
        LOBYTE(v101) = 2;
        char v69 = 2 * (KeyedDecodingContainer.decode(_:forKey:)() != 0);
      }
      (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v73);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v18, v16);
      uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      uint64_t v71 = *(int *)(v70 + 48);
      uint64_t v72 = *(int *)(v70 + 64);
      uint64_t v57 = (uint64_t)v99;
      (*(void (**)(uint64_t *, char *, uint64_t))(v86 + 32))(v99, v85, v94);
      *(_DWORD *)(v57 + v71) = v63;
      *(unsigned char *)(v57 + v72) = v69;
      uint64_t v36 = (uint64_t)v98;
      uint64_t v37 = v95;
      goto LABEL_10;
    case 8:
      LOBYTE(v101) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys();
      uint64_t v32 = v90;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v96 = (uint64_t)v18;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v33 = v94;
      uint64_t v34 = v82;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v35 = v97;
      uint64_t v36 = (uint64_t)v98;
      (*(void (**)(char *, uint64_t))(v79 + 8))(v32, v34);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v96, v16);
      uint64_t v57 = (uint64_t)v99;
      (*(void (**)(uint64_t *, char *, uint64_t))(v86 + 32))(v99, v88, v33);
      goto LABEL_9;
    case 10:
      LOBYTE(v101) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys();
      uint64_t v38 = v93;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v39 = v18;
      LOBYTE(v101) = 0;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      uint64_t v40 = v38;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v41 = v97;
      uint64_t v36 = (uint64_t)v98;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
      char v100 = 2;
      lazy protocol witness table accessor for type [UUID] and conformance <A> [A]();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v58 = v101;
      if (!v101) {
        uint64_t v58 = (char *)MEMORY[0x263F8EE78];
      }
      char v92 = v58;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      char v100 = 1;
      lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v40, v24);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v16);
      uint64_t v65 = v101;
      uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      uint64_t v67 = *(int *)(v66 + 48);
      uint64_t v68 = *(int *)(v66 + 64);
      uint64_t v57 = (uint64_t)v99;
      (*(void (**)(uint64_t *, char *, uint64_t))(v86 + 32))(v99, v87, v94);
      *(void *)(v57 + v67) = v92;
      *(void *)(v57 + v68) = v65;
      goto LABEL_9;
    case 11:
      LOBYTE(v101) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys();
      Swift::String v42 = v89;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      Swift::String v43 = v18;
      uint64_t v44 = v81;
      uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)();
      char v46 = v42;
      uint64_t v36 = (uint64_t)v98;
      uint64_t v37 = v95;
      uint64_t v59 = v45;
      uint64_t v61 = v60;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v46, v44);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v43, v16);
      uint64_t v57 = (uint64_t)v99;
      *char v99 = v59;
      *(void *)(v57 + 8) = v61;
      goto LABEL_10;
    case 12:
      LOBYTE(v101) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys();
      char v47 = v91;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v48 = v18;
      LOBYTE(v101) = 0;
      uint64_t v49 = v83;
      uint64_t v50 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v36 = (uint64_t)v98;
      uint64_t v52 = v51;
      uint64_t v96 = v50;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
      char v100 = 1;
      lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v47, v49);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v48, v16);
      os_log_type_t v64 = v101;
      uint64_t v57 = (uint64_t)v99;
      uint64_t v37 = v95;
      *char v99 = v96;
      *(void *)(v57 + 8) = v52;
      *(void *)(v57 + 16) = v64;
      goto LABEL_10;
    case 13:
      LOBYTE(v101) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys();
      int64_t v53 = v92;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v54 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
      lazy protocol witness table accessor for type [__RKEntityTriggerSpecification] and conformance <A> [A]();
      uint64_t v55 = v84;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v56 = v97;
      uint64_t v36 = (uint64_t)v98;
      uint64_t v37 = v95;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v53, v55);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v54, v16);
      uint64_t v57 = (uint64_t)v99;
      *char v99 = (uint64_t)v101;
      goto LABEL_10;
    default:
      (*(void (**)(char *, uint64_t))(v97 + 8))(v18, v16);
      uint64_t v36 = (uint64_t)v98;
      uint64_t v57 = (uint64_t)v99;
LABEL_9:
      uint64_t v37 = v95;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      outlined init with take of __RKEntityTriggerSpecification(v57, v37, type metadata accessor for __RKEntityTriggerSpecification);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1(v36);
      break;
  }
  return result;
}

uint64_t __RKEntityTriggerSpecification.encode(to:)(void *a1)
{
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.GroupCodingKeys>);
  uint64_t v77 = *(void *)(v87 - 8);
  MEMORY[0x270FA5388](v87);
  uint64_t v95 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys>);
  uint64_t v78 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  long long v85 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.CustomCodingKeys>);
  uint64_t v75 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v82 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.CollisionCodingKeys>);
  uint64_t v79 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  uint64_t v89 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.ProximityCodingKeys>);
  uint64_t v76 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  uint64_t v84 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.TapTargetCodingKeys>);
  uint64_t v74 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v80 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for UUID();
  uint64_t v94 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  unsigned __int8 v91 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v71 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v71 - v13;
  uint64_t v93 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x270FA5388](v93);
  uint64_t v16 = (char **)((char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.CodingKeys>);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v21 = v96;
  __RKEntityTriggerSpecification.name.getter((char *)&v99);
  __RKEntityTriggerSpecification.Name.rawValue.getter();
  LOBYTE(v99) = 0;
  uint64_t v22 = v97;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  else
  {
    uint64_t v73 = 0;
    uint64_t v71 = v11;
    uint64_t v25 = v94;
    uint64_t v24 = v95;
    uint64_t v97 = v20;
    uint64_t v72 = v18;
    swift_bridgeObjectRelease();
    outlined init with copy of __RKEntityTriggerSpecification(v21, (uint64_t)v16, type metadata accessor for __RKEntityTriggerSpecification);
    char v26 = v16;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        LODWORD(v96) = *((unsigned __int8 *)v16
                       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType))
                                + 64));
        uint64_t v27 = v25;
        Swift::String v28 = *(void (**)(char *, void *, uint64_t))(v25 + 32);
        int v29 = v71;
        uint64_t v30 = v92;
        v28(v71, v26, v92);
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys();
        uint64_t v31 = v84;
        uint64_t v32 = v17;
        uint64_t v33 = v97;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        LOBYTE(v99) = 0;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v34 = v86;
        uint64_t v35 = v73;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        if (v35)
        {
          (*(void (**)(char *, uint64_t))(v76 + 8))(v31, v34);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v30);
          return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v33, v32);
        }
        else
        {
          char v66 = v96;
          LOBYTE(v99) = 1;
          KeyedEncodingContainer.encode(_:forKey:)();
          LOBYTE(v99) = v66;
          char v98 = 2;
          lazy protocol witness table accessor for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType();
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          uint64_t v68 = v34;
          uint64_t v69 = v72;
          uint64_t v70 = v71;
          (*(void (**)(char *, uint64_t))(v76 + 8))(v31, v68);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v70, v30);
          return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v33, v32);
        }
      case 1u:
        uint64_t v36 = v25;
        uint64_t v37 = *(void (**)(char *, void *, uint64_t))(v25 + 32);
        uint64_t v38 = v14;
        uint64_t v39 = v26;
        uint64_t v40 = v92;
        v37(v14, v39, v92);
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys();
        uint64_t v41 = v80;
        Swift::String v42 = v97;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v43 = v81;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v41, v43);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v40);
        return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v42, v17);
      case 2u:
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        uint64_t v45 = *(void *)((char *)v16 + *(int *)(v44 + 48));
        uint64_t v95 = *(char **)((char *)v16 + *(int *)(v44 + 64));
        uint64_t v96 = v45;
        char v46 = v91;
        uint64_t v47 = v92;
        (*(void (**)(char *, void *, uint64_t))(v25 + 32))(v91, v26, v92);
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys();
        char v48 = v89;
        uint64_t v49 = v97;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        LOBYTE(v99) = 0;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v50 = v90;
        uint64_t v51 = v73;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        if (v51)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v79 + 8))(v48, v50);
          (*(void (**)(char *, uint64_t))(v25 + 8))(v46, v47);
          return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v49, v17);
        }
        uint64_t v67 = v95;
        char v99 = (char *)v96;
        char v98 = 2;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
        lazy protocol witness table accessor for type [UUID] and conformance <A> [A]();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        swift_bridgeObjectRelease();
        char v99 = v67;
        char v98 = 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v79 + 8))(v48, v50);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v91, v92);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v49, v17);
        return swift_bridgeObjectRelease();
      case 3u:
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys();
        uint64_t v52 = v82;
        uint64_t v53 = v17;
        uint64_t v54 = v97;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v55 = v83;
        KeyedEncodingContainer.encode(_:forKey:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v52, v55);
        return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v54, v53);
      case 4u:
        uint64_t v56 = (char *)v16[2];
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys();
        uint64_t v57 = v85;
        uint64_t v58 = v17;
        uint64_t v59 = v97;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        LOBYTE(v99) = 0;
        uint64_t v60 = v88;
        uint64_t v61 = v73;
        KeyedEncodingContainer.encode(_:forKey:)();
        if (v61)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v78 + 8))(v57, v60);
          return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v59, v58);
        }
        swift_bridgeObjectRelease();
        char v99 = v56;
        char v98 = 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]?);
        lazy protocol witness table accessor for type [String : String]? and conformance <A> A?();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v78 + 8))(v57, v60);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v59, v58);
        break;
      case 5u:
        int v62 = (char *)*v16;
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys();
        uint64_t v63 = v17;
        os_log_type_t v64 = v97;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        char v99 = v62;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
        lazy protocol witness table accessor for type [__RKEntityTriggerSpecification] and conformance <A> [A]();
        uint64_t v65 = v87;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v77 + 8))(v24, v65);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v64, v63);
        return swift_bridgeObjectRelease();
      default:
        (*(void (**)(char *, uint64_t))(v72 + 8))(v97, v17);
        return outlined destroy of __RKEntityTriggerSpecification((uint64_t)v16, type metadata accessor for __RKEntityTriggerSpecification);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityTriggerSpecification@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityTriggerSpecification.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityTriggerSpecification(void *a1)
{
  return __RKEntityTriggerSpecification.encode(to:)(a1);
}

RealityKit::__RKEntityActionSpecification::Name_optional __swiftcall __RKEntityActionSpecification.Name.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 4;
  switch(v3)
  {
    case 0:
      goto LABEL_6;
    case 1:
      char v5 = 1;
      goto LABEL_6;
    case 2:
      char v5 = 2;
      goto LABEL_6;
    case 3:
      char v5 = 3;
LABEL_6:
      char v6 = v5;
      break;
    case 4:
      break;
    case 5:
      char v6 = 5;
      break;
    case 6:
      char v6 = 6;
      break;
    case 7:
      char v6 = 7;
      break;
    case 8:
      char v6 = 8;
      break;
    case 9:
      char v6 = 9;
      break;
    case 10:
      char v6 = 10;
      break;
    case 11:
      char v6 = 11;
      break;
    case 12:
      char v6 = 12;
      break;
    case 13:
      char v6 = 13;
      break;
    case 14:
      char v6 = 14;
      break;
    case 15:
      char v6 = 15;
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    default:
      char v6 = 22;
      break;
  }
  *uint64_t v2 = v6;
  return result;
}

uint64_t __RKEntityActionSpecification.Name.rawValue.getter()
{
  uint64_t result = 0x6F69647561;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x635365676E616863;
      break;
    case 2:
      uint64_t result = 0x6D6F74737563;
      break;
    case 3:
      uint64_t result = 0x7369736168706D65;
      break;
    case 4:
      unsigned int v2 = 1701077350;
      goto LABEL_19;
    case 5:
      uint64_t result = 0x6E65635365646166;
      break;
    case 6:
      uint64_t result = 0x6563726F66;
      break;
    case 7:
      uint64_t result = 0x70756F7267;
      break;
    case 8:
      uint64_t result = 1701079400;
      break;
    case 9:
      uint64_t result = 0x614374416B6F6F6CLL;
      break;
    case 0xA:
      uint64_t result = 0x746E45746962726FLL;
      break;
    case 0xB:
      uint64_t result = 0x656D695479616C70;
      break;
    case 0xC:
      uint64_t result = 0x696361704F746573;
      break;
    case 0xD:
      uint64_t result = 2003789939;
      break;
    case 0xE:
      uint64_t result = 1852403827;
      break;
    case 0xF:
      uint64_t result = 0x696E417472617473;
      break;
    case 0x10:
      uint64_t result = 0x6D696E41706F7473;
      break;
    case 0x11:
      unsigned int v2 = 1885435763;
LABEL_19:
      uint64_t result = v2 | 0x69746E4500000000;
      break;
    case 0x12:
      uint64_t result = 0x6E41656C67676F74;
      break;
    case 0x13:
      uint64_t result = 0xD000000000000010;
      break;
    case 0x14:
      uint64_t result = 0x726F66736E617274;
      break;
    case 0x15:
      uint64_t result = 1953063287;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityActionSpecification.Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityActionSpecification.Name(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.Name(a1, a2, (void (*)(uint64_t))__RKEntityActionSpecification.Name.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = Hasher.init(_seed:)();
  a3(v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityActionSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.Name(a1, a2, a3, (void (*)(void))__RKEntityActionSpecification.Name.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityActionSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.Name(a1, a2, a3, (void (*)(uint64_t))__RKEntityActionSpecification.Name.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = Hasher.init(_seed:)();
  a4(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__RKEntityActionSpecification::Name_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityActionSpecification.Name(Swift::String *a1)
{
  return __RKEntityActionSpecification.Name.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityActionSpecification.Name@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = __RKEntityActionSpecification.Name.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t __RKEntityActionSpecification.name.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityTriggerSpecification(v2, (uint64_t)v6, type metadata accessor for __RKEntityActionSpecification);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      char v8 = 1;
      goto LABEL_24;
    case 2:
      char v8 = 2;
      goto LABEL_24;
    case 3:
      char v8 = 3;
      goto LABEL_24;
    case 4:
      char v8 = 4;
      goto LABEL_24;
    case 5:
      *a1 = 5;
      return result;
    case 6:
      uint64_t result = outlined destroy of __RKEntityTriggerSpecification((uint64_t)v6, type metadata accessor for __RKEntityActionSpecification);
      *a1 = 7;
      return result;
    case 7:
      char v8 = 8;
      goto LABEL_24;
    case 8:
      char v8 = 6;
      goto LABEL_24;
    case 9:
      char v8 = 13;
      goto LABEL_24;
    case 10:
      char v8 = 15;
      goto LABEL_24;
    case 11:
      char v8 = 16;
      goto LABEL_24;
    case 12:
      char v8 = 18;
      goto LABEL_24;
    case 13:
      char v8 = 19;
      goto LABEL_24;
    case 14:
      char v8 = 20;
      goto LABEL_24;
    case 15:
      *a1 = 21;
      return result;
    case 16:
      char v8 = 10;
      goto LABEL_24;
    case 17:
      char v8 = 9;
      goto LABEL_24;
    case 18:
      char v8 = 17;
      goto LABEL_24;
    case 19:
      char v8 = 14;
      goto LABEL_24;
    case 20:
      char v8 = 12;
      goto LABEL_24;
    case 21:
      char v8 = 11;
LABEL_24:
      *a1 = v8;
      break;
    default:
      *a1 = 0;
      break;
  }
  return outlined destroy of __RKEntityTriggerSpecification((uint64_t)v6, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t __RKEntityActionSpecification.target.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v83 = a1;
  uint64_t v1 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v82 = (uint64_t)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v81 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v80 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v79 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v78 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v77 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v76 = (uint64_t)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v75 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v74 = (uint64_t)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v73 = (uint64_t)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v72 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v26 - 8);
  Swift::String v28 = (char *)&v71 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v31 = (char *)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x270FA5388](v32 - 8);
  uint64_t v34 = (char *)&v71 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x270FA5388](v35 - 8);
  uint64_t v37 = (char *)&v71 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x270FA5388](v38 - 8);
  uint64_t v40 = (char *)&v71 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x270FA5388](started - 8);
  uint64_t v43 = (char *)&v71 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x270FA5388](v44 - 8);
  char v46 = (char *)&v71 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v47);
  uint64_t v49 = (char *)&v71 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityTriggerSpecification(v84, (uint64_t)v49, type metadata accessor for __RKEntityActionSpecification);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v55 = v73;
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, v73, type metadata accessor for __RKChangeSceneActionArguments);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v83, v55, v50);
      uint64_t v56 = type metadata accessor for __RKChangeSceneActionArguments;
      goto LABEL_25;
    case 2u:
      uint64_t v55 = v80;
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, v80, type metadata accessor for __RKEntityCustomActionArguments);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v83, v55, v50);
      uint64_t v56 = type metadata accessor for __RKEntityCustomActionArguments;
      goto LABEL_25;
    case 3u:
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, (uint64_t)v25, type metadata accessor for __RKEntityEmphasisActionArguments);
      uint64_t v57 = type metadata accessor for UUID();
      uint64_t v58 = *(void *)(v57 - 8);
      uint64_t v59 = v83;
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v83, v25, v57);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
    case 4u:
      uint64_t v61 = type metadata accessor for __RKEntityFadeActionArguments;
      uint64_t v62 = (uint64_t)v49;
      uint64_t v63 = (uint64_t)v72;
      goto LABEL_22;
    case 5u:
    case 0xFu:
      goto LABEL_8;
    case 6u:
      swift_bridgeObjectRelease();
LABEL_8:
      uint64_t v64 = type metadata accessor for UUID();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v83, 1, 1, v64);
    case 7u:
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, (uint64_t)v31, type metadata accessor for __RKEntityHideActionArguments);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v83, v31, v50);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v52, 0, 1, v50);
    case 8u:
      uint64_t v61 = type metadata accessor for __RKEntityForceActionArguments;
      uint64_t v62 = (uint64_t)v49;
      uint64_t v63 = (uint64_t)v75;
      goto LABEL_22;
    case 9u:
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, (uint64_t)v34, type metadata accessor for __RKEntityShowActionArguments);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v83, v34, v50);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v52, 0, 1, v50);
    case 0xAu:
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, (uint64_t)v43, type metadata accessor for __RKEntityStartAnimateActionArguments);
      uint64_t v65 = type metadata accessor for UUID();
      uint64_t v66 = *(void *)(v65 - 8);
      uint64_t v67 = v83;
      (*(void (**)(uint64_t, char *, uint64_t))(v66 + 16))(v83, v43, v65);
      outlined destroy of __RKEntityTriggerSpecification((uint64_t)v43, type metadata accessor for __RKEntityStartAnimateActionArguments);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v67, 0, 1, v65);
    case 0xBu:
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, (uint64_t)v40, type metadata accessor for __RKEntityStopAnimateActionArguments);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v83, v40, v50);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v52, 0, 1, v50);
    case 0xCu:
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, (uint64_t)v46, type metadata accessor for __RKEntityToggleAnimateActionArguments);
      uint64_t v68 = type metadata accessor for UUID();
      uint64_t v69 = *(void *)(v68 - 8);
      uint64_t v70 = v83;
      (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v83, v46, v68);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v70, 0, 1, v68);
    case 0xDu:
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, (uint64_t)v37, type metadata accessor for __RKEntityToggleVisibilityActionArguments);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v83, v37, v50);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v52, 0, 1, v50);
    case 0xEu:
      uint64_t v55 = v74;
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, v74, type metadata accessor for __RKEntityTransformActionArguments);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v83, v55, v50);
      uint64_t v56 = type metadata accessor for __RKEntityTransformActionArguments;
      goto LABEL_25;
    case 0x10u:
      uint64_t v55 = v76;
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, v76, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v83, v55, v50);
      uint64_t v56 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
      goto LABEL_25;
    case 0x11u:
      uint64_t v61 = type metadata accessor for __RKEntityLookAtCameraActionArguments;
      uint64_t v62 = (uint64_t)v49;
      uint64_t v63 = (uint64_t)v77;
      goto LABEL_22;
    case 0x12u:
      uint64_t v55 = v78;
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, v78, type metadata accessor for __RKEntitySwapEntityActionArguments);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v83, v55, v50);
      uint64_t v56 = type metadata accessor for __RKEntitySwapEntityActionArguments;
      goto LABEL_25;
    case 0x13u:
      uint64_t v61 = type metadata accessor for __RKEntitySpinActionArguments;
      uint64_t v62 = (uint64_t)v49;
      uint64_t v63 = (uint64_t)v79;
      goto LABEL_22;
    case 0x14u:
      uint64_t v61 = type metadata accessor for __RKEntitySetOpacityActionArguments;
      uint64_t v62 = (uint64_t)v49;
      uint64_t v63 = (uint64_t)v81;
LABEL_22:
      outlined init with take of __RKEntityTriggerSpecification(v62, v63, v61);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v83, v63, v50);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v52, 0, 1, v50);
    case 0x15u:
      uint64_t v55 = v82;
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, v82, type metadata accessor for __RKEntityPlayTimelineActionArguments);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v83, v55, v50);
      uint64_t v56 = type metadata accessor for __RKEntityPlayTimelineActionArguments;
LABEL_25:
      uint64_t v53 = v56;
      uint64_t v54 = v55;
      goto LABEL_26;
    default:
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v49, (uint64_t)v28, type metadata accessor for __RKEntityAudioActionArguments);
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v83;
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 16))(v83, v28, v50);
      uint64_t v53 = type metadata accessor for __RKEntityAudioActionArguments;
      uint64_t v54 = (uint64_t)v28;
LABEL_26:
      outlined destroy of __RKEntityTriggerSpecification(v54, v53);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v52, 0, 1, v50);
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityActionSpecification.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityActionSpecification.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityActionSpecification.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityActionSpecification.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityActionSpecification.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of __RKEntityActionSpecification.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityActionSpecification.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701667182;
  if (*v1) {
    uint64_t v2 = 0x746E656D75677261;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE900000000000073;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityActionSpecification.CodingKeys()
{
  if (*v0) {
    return 0x746E656D75677261;
  }
  else {
    return 1701667182;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityActionSpecification.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of __RKEntityActionSpecification.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  unint64_t object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._unint64_t object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityActionSpecification.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityActionSpecification.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityActionSpecification.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v102 = a2;
  uint64_t v104 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x270FA5388](v104);
  uint64_t v101 = (uint64_t)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x270FA5388](v103);
  char v100 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x270FA5388](v98);
  char v99 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x270FA5388](v96);
  uint64_t v97 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x270FA5388](v94);
  uint64_t v95 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x270FA5388](v92);
  uint64_t v93 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x270FA5388](v90);
  unsigned __int8 v91 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x270FA5388](v88);
  uint64_t v89 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x270FA5388](v86);
  uint64_t v87 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x270FA5388](v84);
  long long v85 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x270FA5388](v83);
  unint64_t v107 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v81);
  uint64_t v82 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x270FA5388](v79);
  uint64_t v80 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x270FA5388](v77);
  uint64_t v78 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x270FA5388](v75);
  uint64_t v76 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x270FA5388](v73);
  uint64_t v74 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x270FA5388](started);
  uint64_t v72 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x270FA5388](v70);
  uint64_t v71 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityActionSpecification.CodingKeys>);
  uint64_t v105 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = a1[3];
  unint64_t v108 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v30);
  lazy protocol witness table accessor for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys();
  uint64_t v31 = v109;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v31) {
    goto LABEL_2;
  }
  uint64_t v68 = v21;
  uint64_t v69 = v23;
  uint64_t v33 = (uint64_t)v107;
  Swift::String v109 = v29;
  LOBYTE(v110) = 0;
  uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v37 = v36;
  swift_bridgeObjectRetain();
  v38._uint64_t countAndFlagsBits = v35;
  v38._unint64_t object = v37;
  __RKEntityActionSpecification.Name.init(rawValue:)(v38);
  if (v110 == 22)
  {
    lazy protocol witness table accessor for type __RKEntityActionSpecification.ActionError and conformance __RKEntityActionSpecification.ActionError();
    swift_allocError();
    *uint64_t v39 = v35;
    v39[1] = (uint64_t)v37;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v105 + 8))(v26, v24);
LABEL_2:
    uint64_t v32 = (uint64_t)v108;
    return __swift_destroy_boxed_opaque_existential_1(v32);
  }
  swift_bridgeObjectRelease();
  uint64_t v40 = v105;
  switch(v41)
  {
    case 1:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKChangeSceneActionArguments and conformance __RKChangeSceneActionArguments, (void (*)(uint64_t))type metadata accessor for __RKChangeSceneActionArguments);
      uint64_t v45 = (uint64_t)v85;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v45, (uint64_t)v109, type metadata accessor for __RKChangeSceneActionArguments);
      goto LABEL_30;
    case 2:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityCustomActionArguments and conformance __RKEntityCustomActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityCustomActionArguments);
      uint64_t v46 = (uint64_t)v69;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v32 = (uint64_t)v108;
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v46, (uint64_t)v109, type metadata accessor for __RKEntityCustomActionArguments);
      uint64_t v43 = v102;
      goto LABEL_31;
    case 3:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments and conformance __RKEntityEmphasisActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityEmphasisActionArguments);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v33, (uint64_t)v109, type metadata accessor for __RKEntityEmphasisActionArguments);
      goto LABEL_30;
    case 4:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityFadeActionArguments and conformance __RKEntityFadeActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityFadeActionArguments);
      uint64_t v47 = (uint64_t)v87;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v47, (uint64_t)v109, type metadata accessor for __RKEntityFadeActionArguments);
      goto LABEL_30;
    case 5:
      char v117 = 1;
      lazy protocol witness table accessor for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      int v48 = v111;
      char v49 = v112;
      uint64_t v44 = v109;
      *Swift::String v109 = v110;
      v44[1] = v48;
      *((unsigned char *)v44 + 8) = v49;
      goto LABEL_30;
    case 6:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityForceActionArguments and conformance __RKEntityForceActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityForceActionArguments);
      uint64_t v50 = (uint64_t)v91;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v50, (uint64_t)v109, type metadata accessor for __RKEntityForceActionArguments);
      goto LABEL_30;
    case 7:
      char v117 = 1;
      lazy protocol witness table accessor for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v43 = v102;
      uint64_t v51 = v112;
      char v52 = v113;
      uint64_t v53 = v114;
      char v54 = v115;
      char v55 = v116;
      uint64_t v44 = v109;
      *(unsigned char *)Swift::String v109 = v110;
      *((void *)v44 + 1) = v51;
      *((unsigned char *)v44 + 16) = v52;
      *((void *)v44 + 3) = v53;
      *((unsigned char *)v44 + 32) = v54;
      *((unsigned char *)v44 + 33) = v55;
      goto LABEL_30;
    case 8:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityHideActionArguments and conformance __RKEntityHideActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityHideActionArguments);
      uint64_t v56 = (uint64_t)v80;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v56, (uint64_t)v109, type metadata accessor for __RKEntityHideActionArguments);
      goto LABEL_30;
    case 9:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments and conformance __RKEntityLookAtCameraActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityLookAtCameraActionArguments);
      uint64_t v57 = (uint64_t)v95;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v57, (uint64_t)v109, type metadata accessor for __RKEntityLookAtCameraActionArguments);
      goto LABEL_30;
    case 10:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments and conformance __RKEntityOrbitEntityActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityOrbitEntityActionArguments);
      uint64_t v58 = (uint64_t)v93;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v58, (uint64_t)v109, type metadata accessor for __RKEntityOrbitEntityActionArguments);
      goto LABEL_30;
    case 11:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments and conformance __RKEntityPlayTimelineActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityPlayTimelineActionArguments);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v101, (uint64_t)v109, type metadata accessor for __RKEntityPlayTimelineActionArguments);
      goto LABEL_30;
    case 12:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments and conformance __RKEntitySetOpacityActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntitySetOpacityActionArguments);
      uint64_t v59 = (uint64_t)v100;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v59, (uint64_t)v109, type metadata accessor for __RKEntitySetOpacityActionArguments);
      goto LABEL_30;
    case 13:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityShowActionArguments and conformance __RKEntityShowActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityShowActionArguments);
      uint64_t v60 = (uint64_t)v78;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v60, (uint64_t)v109, type metadata accessor for __RKEntityShowActionArguments);
      goto LABEL_30;
    case 14:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntitySpinActionArguments and conformance __RKEntitySpinActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntitySpinActionArguments);
      uint64_t v61 = (uint64_t)v99;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v61, (uint64_t)v109, type metadata accessor for __RKEntitySpinActionArguments);
      goto LABEL_30;
    case 15:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments and conformance __RKEntityStartAnimateActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityStartAnimateActionArguments);
      uint64_t v62 = (uint64_t)v72;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v62, (uint64_t)v109, type metadata accessor for __RKEntityStartAnimateActionArguments);
      goto LABEL_30;
    case 16:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments and conformance __RKEntityStopAnimateActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityStopAnimateActionArguments);
      uint64_t v63 = (uint64_t)v74;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v63, (uint64_t)v109, type metadata accessor for __RKEntityStopAnimateActionArguments);
      goto LABEL_30;
    case 17:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments and conformance __RKEntitySwapEntityActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntitySwapEntityActionArguments);
      uint64_t v64 = (uint64_t)v97;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v64, (uint64_t)v109, type metadata accessor for __RKEntitySwapEntityActionArguments);
      goto LABEL_30;
    case 18:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments and conformance __RKEntityToggleAnimateActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityToggleAnimateActionArguments);
      uint64_t v65 = (uint64_t)v71;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v65, (uint64_t)v109, type metadata accessor for __RKEntityToggleAnimateActionArguments);
      goto LABEL_30;
    case 19:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments and conformance __RKEntityToggleVisibilityActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityToggleVisibilityActionArguments);
      uint64_t v66 = (uint64_t)v76;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v66, (uint64_t)v109, type metadata accessor for __RKEntityToggleVisibilityActionArguments);
      goto LABEL_30;
    case 20:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityTransformActionArguments and conformance __RKEntityTransformActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityTransformActionArguments);
      uint64_t v67 = (uint64_t)v89;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v67, (uint64_t)v109, type metadata accessor for __RKEntityTransformActionArguments);
      goto LABEL_30;
    case 21:
      char v117 = 1;
      lazy protocol witness table accessor for type __RKWaitActionArguments and conformance __RKWaitActionArguments();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v43 = v102;
      uint64_t v44 = v109;
      *Swift::String v109 = v110;
      goto LABEL_30;
    default:
      LOBYTE(v110) = 1;
      lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityAudioActionArguments and conformance __RKEntityAudioActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityAudioActionArguments);
      uint64_t v42 = (uint64_t)v82;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v43 = v102;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v24);
      uint64_t v44 = v109;
      outlined init with take of __RKEntityTriggerSpecification(v42, (uint64_t)v109, type metadata accessor for __RKEntityAudioActionArguments);
LABEL_30:
      uint64_t v32 = (uint64_t)v108;
LABEL_31:
      swift_storeEnumTagMultiPayload();
      outlined init with take of __RKEntityTriggerSpecification((uint64_t)v44, v43, type metadata accessor for __RKEntityActionSpecification);
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1(v32);
}

uint64_t __RKEntityActionSpecification.encode(to:)(void *a1)
{
  uint64_t v118 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x270FA5388](v118);
  uint64_t v108 = (uint64_t)v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x270FA5388](v111);
  uint64_t v112 = (uint64_t)v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x270FA5388](v109);
  uint64_t v110 = (uint64_t)v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x270FA5388](v106);
  uint64_t v107 = (uint64_t)v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x270FA5388](v104);
  uint64_t v105 = (uint64_t)v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x270FA5388](v102);
  uint64_t v103 = (uint64_t)v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x270FA5388](v100);
  uint64_t v101 = (uint64_t)v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x270FA5388](v98);
  uint64_t v99 = (uint64_t)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x270FA5388](v116);
  uint64_t v117 = (uint64_t)v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x270FA5388](v96);
  uint64_t v97 = (uint64_t)v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x270FA5388](v95);
  uint64_t v114 = (char *)v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x270FA5388](v93);
  uint64_t v94 = (uint64_t)v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x270FA5388](v92);
  uint64_t v115 = (uint64_t)v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x270FA5388](v90);
  uint64_t v91 = (uint64_t)v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x270FA5388](v88);
  uint64_t v89 = (uint64_t)v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x270FA5388](v87);
  uint64_t v86 = (uint64_t)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x270FA5388](v84);
  uint64_t v85 = (uint64_t)v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x270FA5388](started);
  uint64_t v83 = (uint64_t)v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v113);
  uint64_t v24 = (char *)v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityActionSpecification.CodingKeys>);
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v29 = v119;
  __RKEntityActionSpecification.name.getter((char *)v121);
  __RKEntityActionSpecification.Name.rawValue.getter();
  LOBYTE(v121[0]) = 0;
  uint64_t v30 = v120;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v120 = v30;
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v80[1] = v20;
    uint64_t v81 = v22;
    uint64_t v32 = (uint64_t)v114;
    swift_bridgeObjectRelease();
    outlined init with copy of __RKEntityTriggerSpecification(v29, (uint64_t)v24, type metadata accessor for __RKEntityActionSpecification);
    uint64_t v33 = v24;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v35 = v26;
    uint64_t v36 = v117;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        uint64_t v37 = v35;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v32, type metadata accessor for __RKChangeSceneActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKChangeSceneActionArguments and conformance __RKChangeSceneActionArguments, (void (*)(uint64_t))type metadata accessor for __RKChangeSceneActionArguments);
        uint64_t v41 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v39 = v41;
        uint64_t v42 = type metadata accessor for __RKChangeSceneActionArguments;
        uint64_t v43 = v32;
        goto LABEL_8;
      case 2:
        uint64_t v37 = v35;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v117, type metadata accessor for __RKEntityCustomActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityCustomActionArguments and conformance __RKEntityCustomActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityCustomActionArguments);
        uint64_t v44 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v39 = v44;
        uint64_t v40 = type metadata accessor for __RKEntityCustomActionArguments;
        goto LABEL_7;
      case 3:
        uint64_t v45 = v35;
        uint64_t v46 = v94;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v94, type metadata accessor for __RKEntityEmphasisActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments and conformance __RKEntityEmphasisActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityEmphasisActionArguments);
        uint64_t v47 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v47;
        int v48 = type metadata accessor for __RKEntityEmphasisActionArguments;
        goto LABEL_29;
      case 4:
        uint64_t v45 = v35;
        uint64_t v46 = v97;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v97, type metadata accessor for __RKEntityFadeActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityFadeActionArguments and conformance __RKEntityFadeActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityFadeActionArguments);
        uint64_t v49 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v49;
        int v48 = type metadata accessor for __RKEntityFadeActionArguments;
        goto LABEL_29;
      case 5:
        uint64_t v50 = v35;
        int v51 = *((_DWORD *)v24 + 1);
        char v52 = v24[8];
        v121[0] = *(_DWORD *)v24;
        v121[1] = v51;
        LOBYTE(v122) = v52;
        char v127 = 1;
        lazy protocol witness table accessor for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments();
        goto LABEL_23;
      case 6:
        uint64_t v53 = v35;
        uint64_t v54 = *((void *)v33 + 1);
        char v55 = v33[16];
        uint64_t v56 = *((void *)v33 + 3);
        char v57 = v33[32];
        char v58 = v33[33];
        LOBYTE(v121[0]) = *v33;
        uint64_t v122 = v54;
        char v123 = v55;
        uint64_t v124 = v56;
        char v125 = v57;
        char v126 = v58;
        char v127 = 1;
        lazy protocol witness table accessor for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments();
        uint64_t v59 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v59;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v28, v25);
        return swift_bridgeObjectRelease();
      case 7:
        uint64_t v45 = v35;
        uint64_t v46 = v91;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v91, type metadata accessor for __RKEntityHideActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityHideActionArguments and conformance __RKEntityHideActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityHideActionArguments);
        uint64_t v60 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v60;
        int v48 = type metadata accessor for __RKEntityHideActionArguments;
        goto LABEL_29;
      case 8:
        uint64_t v45 = v35;
        uint64_t v46 = v107;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v107, type metadata accessor for __RKEntityForceActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityForceActionArguments and conformance __RKEntityForceActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityForceActionArguments);
        uint64_t v61 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v61;
        int v48 = type metadata accessor for __RKEntityForceActionArguments;
        goto LABEL_29;
      case 9:
        uint64_t v45 = v35;
        uint64_t v46 = v89;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v89, type metadata accessor for __RKEntityShowActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityShowActionArguments and conformance __RKEntityShowActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityShowActionArguments);
        uint64_t v62 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v62;
        int v48 = type metadata accessor for __RKEntityShowActionArguments;
        goto LABEL_29;
      case 10:
        uint64_t v50 = v35;
        uint64_t v63 = v83;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v83, type metadata accessor for __RKEntityStartAnimateActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments and conformance __RKEntityStartAnimateActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityStartAnimateActionArguments);
        uint64_t v64 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v64;
        uint64_t v65 = type metadata accessor for __RKEntityStartAnimateActionArguments;
        goto LABEL_19;
      case 11:
        uint64_t v50 = v35;
        uint64_t v63 = v85;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v85, type metadata accessor for __RKEntityStopAnimateActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments and conformance __RKEntityStopAnimateActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityStopAnimateActionArguments);
        uint64_t v66 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v66;
        uint64_t v65 = type metadata accessor for __RKEntityStopAnimateActionArguments;
        goto LABEL_19;
      case 12:
        uint64_t v50 = v35;
        uint64_t v63 = (uint64_t)v81;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, (uint64_t)v81, type metadata accessor for __RKEntityToggleAnimateActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments and conformance __RKEntityToggleAnimateActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityToggleAnimateActionArguments);
        uint64_t v67 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v67;
        uint64_t v65 = type metadata accessor for __RKEntityToggleAnimateActionArguments;
LABEL_19:
        uint64_t v68 = v65;
        uint64_t v69 = v63;
        goto LABEL_31;
      case 13:
        uint64_t v45 = v35;
        uint64_t v46 = v86;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v86, type metadata accessor for __RKEntityToggleVisibilityActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments and conformance __RKEntityToggleVisibilityActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityToggleVisibilityActionArguments);
        uint64_t v70 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v70;
        int v48 = type metadata accessor for __RKEntityToggleVisibilityActionArguments;
        goto LABEL_29;
      case 14:
        uint64_t v45 = v35;
        uint64_t v46 = v99;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v99, type metadata accessor for __RKEntityTransformActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityTransformActionArguments and conformance __RKEntityTransformActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityTransformActionArguments);
        uint64_t v71 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v71;
        int v48 = type metadata accessor for __RKEntityTransformActionArguments;
        goto LABEL_29;
      case 15:
        uint64_t v50 = v35;
        v121[0] = *(_DWORD *)v24;
        char v127 = 1;
        lazy protocol witness table accessor for type __RKWaitActionArguments and conformance __RKWaitActionArguments();
LABEL_23:
        uint64_t v72 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v72;
        goto LABEL_32;
      case 16:
        uint64_t v45 = v35;
        uint64_t v46 = v103;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v103, type metadata accessor for __RKEntityOrbitEntityActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments and conformance __RKEntityOrbitEntityActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityOrbitEntityActionArguments);
        uint64_t v73 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v73;
        int v48 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
        goto LABEL_29;
      case 17:
        uint64_t v45 = v35;
        uint64_t v46 = v101;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v101, type metadata accessor for __RKEntityLookAtCameraActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments and conformance __RKEntityLookAtCameraActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityLookAtCameraActionArguments);
        uint64_t v74 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v74;
        int v48 = type metadata accessor for __RKEntityLookAtCameraActionArguments;
        goto LABEL_29;
      case 18:
        uint64_t v45 = v35;
        uint64_t v46 = v105;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v105, type metadata accessor for __RKEntitySwapEntityActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments and conformance __RKEntitySwapEntityActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntitySwapEntityActionArguments);
        uint64_t v75 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v75;
        int v48 = type metadata accessor for __RKEntitySwapEntityActionArguments;
        goto LABEL_29;
      case 19:
        uint64_t v45 = v35;
        uint64_t v46 = v110;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v110, type metadata accessor for __RKEntitySpinActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntitySpinActionArguments and conformance __RKEntitySpinActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntitySpinActionArguments);
        uint64_t v76 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v76;
        int v48 = type metadata accessor for __RKEntitySpinActionArguments;
        goto LABEL_29;
      case 20:
        uint64_t v45 = v35;
        uint64_t v46 = v112;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v112, type metadata accessor for __RKEntitySetOpacityActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments and conformance __RKEntitySetOpacityActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntitySetOpacityActionArguments);
        uint64_t v77 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v77;
        int v48 = type metadata accessor for __RKEntitySetOpacityActionArguments;
LABEL_29:
        outlined destroy of __RKEntityTriggerSpecification(v46, v48);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v28, v25);
        break;
      case 21:
        uint64_t v50 = v35;
        uint64_t v78 = v108;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v108, type metadata accessor for __RKEntityPlayTimelineActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments and conformance __RKEntityPlayTimelineActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityPlayTimelineActionArguments);
        uint64_t v79 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v120 = v79;
        uint64_t v68 = type metadata accessor for __RKEntityPlayTimelineActionArguments;
        uint64_t v69 = v78;
LABEL_31:
        outlined destroy of __RKEntityTriggerSpecification(v69, v68);
LABEL_32:
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v28, v25);
        break;
      default:
        uint64_t v36 = v115;
        uint64_t v37 = v35;
        outlined init with take of __RKEntityTriggerSpecification((uint64_t)v24, v115, type metadata accessor for __RKEntityAudioActionArguments);
        LOBYTE(v121[0]) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type __RKEntityAudioActionArguments and conformance __RKEntityAudioActionArguments, (void (*)(uint64_t))type metadata accessor for __RKEntityAudioActionArguments);
        uint64_t v38 = v120;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v39 = v38;
        uint64_t v40 = type metadata accessor for __RKEntityAudioActionArguments;
LABEL_7:
        uint64_t v42 = v40;
        uint64_t v43 = v36;
LABEL_8:
        outlined destroy of __RKEntityTriggerSpecification(v43, v42);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v28, v25);
        uint64_t v120 = v39;
        break;
    }
  }
  return result;
}

uint64_t static __RKChangeSceneActionArguments.== infix(_:_:)()
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for __RKChangeSceneActionArguments(0);

  return static UUID.== infix(_:_:)();
}

uint64_t static __RKEntityCustomActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for __RKEntityCustomActionArguments(0);
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v10 = *(int *)(v4 + 24);
  uint64_t v11 = *(void *)(a1 + v10);
  uint64_t v12 = *(void *)(a2 + v10);

  return specialized static Dictionary<>.== infix(_:_:)(v11, v12);
}

uint64_t static __RKFadeSceneActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 != *(float *)a2) {
    return 0;
  }
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(float *)(a1 + 4) != *(float *)(a2 + 4)) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t static __RKEntityHideActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityHideActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1;
}

uint64_t static __RKEntityShowActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityShowActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1;
}

BOOL static __RKWaitActionArguments.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t static __RKEntitySwapEntityActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = type metadata accessor for __RKEntitySwapEntityActionArguments(0), (static UUID.== infix(_:_:)() & 1) != 0)
    && (specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24), type metadata accessor for __RKEntityHideActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1) != 0)
  {
    char v5 = specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1 + *(int *)(v4 + 28), a2 + *(int *)(v4 + 28), type metadata accessor for __RKEntityShowActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:));
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

BOOL static __RKEntitySetOpacityActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = type metadata accessor for __RKEntitySetOpacityActionArguments(0),
        *(float *)(a1 + *(int *)(v4 + 20)) == *(float *)(a2 + *(int *)(v4 + 20))))
  {
    return *(float *)(a1 + *(int *)(v4 + 24)) == *(float *)(a2 + *(int *)(v4 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityActionSpecification@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityActionSpecification.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityActionSpecification(void *a1)
{
  return __RKEntityActionSpecification.encode(to:)(a1);
}

RealityKit::__RKEntityGroupActionOrder_optional __swiftcall __RKEntityGroupActionOrder.init(rawValue:)(Swift::String rawValue)
{
  unint64_t object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._unint64_t object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityGroupActionOrder.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t __RKEntityGroupActionOrder.rawValue.getter()
{
  if (*v0) {
    return 0x65636E6575716573;
  }
  else {
    return 0x65727275636E6F63;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityGroupActionOrder()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityGroupActionOrder()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityGroupActionOrder()
{
  return Hasher._finalize()();
}

RealityKit::__RKEntityGroupActionOrder_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityGroupActionOrder(Swift::String *a1)
{
  return __RKEntityGroupActionOrder.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityGroupActionOrder(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x65727275636E6F63;
  if (*v1) {
    uint64_t v2 = 0x65636E6575716573;
  }
  unint64_t v3 = 0xEA0000000000746ELL;
  if (*v1) {
    unint64_t v3 = 0xE900000000000064;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityGroupActionOrder()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityGroupActionOrder()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityGroupActionOrder(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

void __RKEntityActionGroupArguments.order.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *__RKEntityActionGroupArguments.order.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*__RKEntityActionGroupArguments.order.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionGroupArguments.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __RKEntityActionGroupArguments.actions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*__RKEntityActionGroupArguments.actions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionGroupArguments.exclusive.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t __RKEntityActionGroupArguments.exclusive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*__RKEntityActionGroupArguments.exclusive.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionGroupArguments.loopCount.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t __RKEntityActionGroupArguments.loopCount.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 24) = result;
  *(unsigned char *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*__RKEntityActionGroupArguments.loopCount.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionGroupArguments.exclusiveBlocks.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t __RKEntityActionGroupArguments.exclusiveBlocks.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 33) = result;
  return result;
}

uint64_t (*__RKEntityActionGroupArguments.exclusiveBlocks.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __swiftcall __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:exclusiveBlocks:)(RealityKit::__RKEntityActionGroupArguments *__return_ptr retstr, RealityKit::__RKEntityGroupActionOrder order, Swift::OpaquePointer actions, Swift::Bool exclusive, Swift::Int loopCount, Swift::Bool exclusiveBlocks)
{
  retstr->order = *(unsigned char *)order;
  retstr->actions = actions;
  retstr->exclusive.value = exclusive;
  retstr->loopCount.value = loopCount;
  retstr->loopCount.is_nil = 0;
  retstr->exclusiveBlocks.value = exclusiveBlocks;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityActionGroupArguments.CodingKeys()
{
  uint64_t result = 0x726564726FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x736E6F69746361;
      break;
    case 2:
      uint64_t result = 0x766973756C637865;
      break;
    case 3:
      uint64_t result = 0x6E756F43706F6F6CLL;
      break;
    case 4:
      uint64_t result = 0x766973756C637865;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityActionGroupArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityActionGroupArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityActionGroupArguments.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityActionGroupArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityActionGroupArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityActionGroupArguments.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityActionGroupArguments.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  uint64_t v14 = *((void *)v1 + 1);
  int v13 = v1[16];
  uint64_t v12 = *((void *)v1 + 3);
  int v9 = v1[32];
  v11[2] = v1[33];
  void v11[3] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v21 = v8;
  char v20 = 0;
  lazy protocol witness table accessor for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v15 = v14;
    char v19 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityActionSpecification]);
    lazy protocol witness table accessor for type [__RKEntityActionSpecification] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v18 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v17 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v16 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t __RKEntityActionGroupArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityActionGroupArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v23 = 0;
  lazy protocol witness table accessor for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v9 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityActionSpecification]);
  char v22 = 1;
  lazy protocol witness table accessor for type [__RKEntityActionSpecification] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = v18;
  char v21 = 2;
  swift_bridgeObjectRetain();
  int v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v20 = 3;
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  HIDWORD(v15) = v13;
  uint64_t v16 = v11;
  char v19 = 4;
  char v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(unsigned char *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  *(unsigned char *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v16;
  *(unsigned char *)(a2 + 32) = BYTE4(v15) & 1;
  *(unsigned char *)(a2 + 33) = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityActionGroupArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityActionGroupArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityActionGroupArguments(void *a1)
{
  return __RKEntityActionGroupArguments.encode(to:)(a1);
}

float __RKWaitActionArguments.duration.getter()
{
  return *(float *)v0;
}

void __RKWaitActionArguments.duration.setter(float a1)
{
  float *v1 = a1;
}

uint64_t (*__RKWaitActionArguments.duration.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKWaitActionArguments.CodingKeys()
{
  return 0x6E6F697461727564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKWaitActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKWaitActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKWaitActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKWaitActionArguments.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKWaitActionArguments.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t __RKWaitActionArguments.init(from:)@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKWaitActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    int v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKWaitActionArguments@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return __RKWaitActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKWaitActionArguments(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKWaitActionArguments.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __RKWaitActionArguments(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t (*__RKEntityCustomActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityCustomActionArguments.actionIdentifier.getter()
{
  return __RKEntityCustomActionArguments.actionIdentifier.getter(type metadata accessor for __RKEntityCustomActionArguments);
}

uint64_t __RKEntityCustomActionArguments.actionIdentifier.setter(uint64_t a1, uint64_t a2)
{
  return __RKEntityCustomActionArguments.actionIdentifier.setter(a1, a2, type metadata accessor for __RKEntityCustomActionArguments);
}

uint64_t (*__RKEntityCustomActionArguments.actionIdentifier.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityCustomActionArguments.customArguments.getter()
{
  type metadata accessor for __RKEntityCustomActionArguments(0);

  return swift_bridgeObjectRetain();
}

uint64_t __RKEntityCustomActionArguments.customArguments.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for __RKEntityCustomActionArguments(0) + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*__RKEntityCustomActionArguments.customArguments.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityCustomActionArguments.optionalTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v21 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v11 = MEMORY[0x270FA5388](v10);
  int v13 = (char *)&v20 - v12;
  char v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
  v14((char *)&v20 - v12, v2, v6, v11);
  UUID.init(uuidString:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v9, v6);
    v17(v13, v6);
    if (v16)
    {
      uint64_t v18 = 1;
      uint64_t v19 = v21;
    }
    else
    {
      uint64_t v19 = v21;
      ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v21, v2, v6);
      uint64_t v18 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v19, v18, 1, v6);
  }
  return result;
}

uint64_t key path setter for __RKEntityCustomActionArguments.optionalTarget : __RKEntityCustomActionArguments(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v4);
  return __RKEntityCustomActionArguments.optionalTarget.setter((uint64_t)v4);
}

uint64_t __RKEntityCustomActionArguments.optionalTarget.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v8);
  int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v13(v8, 1, v9) != 1)
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 40))(v1, v12, v9);
  }
  UUID.init(uuidString:)();
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(v5, 1, v9);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v5, v9);
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 40))(v1, v12, v9);
  }
  __break(1u);
  return result;
}

void (*__RKEntityCustomActionArguments.optionalTarget.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                             - 8)
                 + 64);
  a1[1] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  __RKEntityCustomActionArguments.optionalTarget.getter((uint64_t)v4);
  return __RKEntityCustomActionArguments.optionalTarget.modify;
}

void __RKEntityCustomActionArguments.optionalTarget.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  size_t v3 = *(void **)(a1 + 16);
  if (a2)
  {
    outlined init with copy of UUID?((uint64_t)v3, (uint64_t)v2);
    __RKEntityCustomActionArguments.optionalTarget.setter((uint64_t)v2);
    outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    __RKEntityCustomActionArguments.optionalTarget.setter((uint64_t)v3);
  }
  free(v3);

  free(v2);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v34 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v35 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v36 = v4;
      unint64_t v9 = v8 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v10 >= v35) {
      return 1;
    }
    unint64_t v11 = *(void *)(v34 + 8 * v10);
    int64_t v12 = v4 + 1;
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v35) {
        return 1;
      }
      unint64_t v11 = *(void *)(v34 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v35) {
          return 1;
        }
        unint64_t v11 = *(void *)(v34 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v11 - 1) & v11;
    int64_t v36 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_22:
    uint64_t v14 = v3;
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void *)(v3 + 56) + 80 * v9;
    uint64_t v20 = *(void *)(v18 + 40);
    uint64_t v19 = *(void *)(v18 + 48);
    double v22 = *(double *)(v18 + 56);
    double v21 = *(double *)(v18 + 64);
    int v23 = *(unsigned __int8 *)(v18 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    char v26 = v25;
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v27 = *(void *)(a2 + 56) + 80 * v24;
    double v29 = *(double *)(v27 + 56);
    double v28 = *(double *)(v27 + 64);
    int v30 = *(unsigned __int8 *)(v27 + 72);
    if (*(void *)(v27 + 40) == v20 && *(void *)(v27 + 48) == v19)
    {
      swift_bridgeObjectRelease();
      uint64_t result = 0;
    }
    else
    {
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v32 & 1) == 0) {
        return result;
      }
    }
    if (v29 == v22 && v28 == v21)
    {
      uint64_t v3 = v14;
      int64_t v4 = v36;
      if (((v23 ^ v30) & 1) == 0) {
        continue;
      }
    }
    return result;
  }
  uint64_t v13 = v4 + 4;
  if (v4 + 4 >= v35) {
    return 1;
  }
  unint64_t v11 = *(void *)(v34 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v4 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v35) {
      return 1;
    }
    unint64_t v11 = *(void *)(v34 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  void *v24;
  char v26;
  int64_t v27;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  unint64_t v7 = -1;
  if (v6 < 64) {
    unint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  uint64_t v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    unint64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v27) {
      return 1;
    }
    int64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1;
      }
      int64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1;
        }
        int64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v12 - 1) & v12;
    int64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    uint64_t v14 = 16 * v10;
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    double v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    int v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    unint64_t v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0;
      }
    }
  }
  uint64_t v13 = v11 + 3;
  if (v13 >= v27) {
    return 1;
  }
  int64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    int64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityCustomActionArguments.CodingKeys()
{
  unint64_t v1 = 0xD000000000000010;
  if (*v0 != 1) {
    unint64_t v1 = 0x72416D6F74737563;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746567726174;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityCustomActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityCustomActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityCustomActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityCustomActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityCustomActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityCustomActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for __RKEntityCustomActionArguments(0);
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityCustomActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v25 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityCustomActionArguments.CodingKeys>);
  uint64_t v23 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x270FA5388](v8);
  int64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v12 = v23;
  uint64_t v11 = v24;
  double v21 = a1;
  char v30 = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v13 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v20 = v10;
  v13(v10, v25, v4);
  char v29 = 1;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = (uint64_t *)&v20[*(int *)(v8 + 20)];
  *uint64_t v15 = v14;
  v15[1] = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  char v28 = 2;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v26);
  uint64_t v17 = *(int *)(v8 + 24);
  uint64_t v18 = (uint64_t)v20;
  *(void *)&v20[v17] = v27;
  outlined init with copy of __RKEntityTriggerSpecification(v18, v22, type metadata accessor for __RKEntityCustomActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return outlined destroy of __RKEntityTriggerSpecification(v18, type metadata accessor for __RKEntityCustomActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityCustomActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityCustomActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityCustomActionArguments(void *a1)
{
  return __RKEntityCustomActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  BOOL v10 = v7 == *v9 && v8 == v9[1];
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);

  return specialized static Dictionary<>.== infix(_:_:)(v12, v13);
}

uint64_t (*protocol witness for __RKSpecificationHasTarget.target.modify in conformance __RKEntityCustomActionArguments())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t key path setter for __RKChangeSceneActionArguments.target : __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(a2, v8, v4);
}

uint64_t (*__RKChangeSceneActionArguments.target.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  v3[2] = v5;
  size_t v7 = *(void *)(v5 + 64);
  v3[3] = malloc(v7);
  v3[4] = malloc(v7);
  uint64_t v8 = *(void (**)(void))(v6 + 16);
  v3[5] = v8;
  v3[6] = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8();
  return __RKChangeSceneActionArguments.target.modify;
}

uint64_t (*__RKChangeSceneActionArguments.sceneRoot.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKChangeSceneActionArguments.targetSceneIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.getter(type metadata accessor for __RKChangeSceneActionArguments, a1);
}

uint64_t __RKChangeSceneActionArguments.targetSceneIdentifier.setter(uint64_t a1)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.setter(a1, type metadata accessor for __RKChangeSceneActionArguments);
}

uint64_t (*__RKChangeSceneActionArguments.targetSceneIdentifier.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKChangeSceneActionArguments.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000015;
  }
  else {
    return 0x6F6F52656E656373;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKChangeSceneActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKChangeSceneActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKChangeSceneActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKChangeSceneActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKChangeSceneActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKChangeSceneActionArguments.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for __RKChangeSceneActionArguments(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __RKChangeSceneActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v24 = (char *)&v21 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKChangeSceneActionArguments.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  uint64_t v26 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v21 = v13;
  uint64_t v22 = v15;
  uint64_t v16 = v27;
  char v30 = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v17 = v24;
  uint64_t v18 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v24 = *(char **)(v16 + 32);
  ((void (*)(char *, char *, uint64_t))v24)(v22, v17, v28);
  char v29 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v18);
  uint64_t v19 = (uint64_t)v22;
  ((void (*)(char *, char *, uint64_t))v24)(&v22[*(int *)(v21 + 20)], v6, v28);
  outlined init with copy of __RKEntityTriggerSpecification(v19, v23, type metadata accessor for __RKChangeSceneActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of __RKEntityTriggerSpecification(v19, type metadata accessor for __RKChangeSceneActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKChangeSceneActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKChangeSceneActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKChangeSceneActionArguments(void *a1)
{
  return __RKChangeSceneActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKChangeSceneActionArguments()
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }

  return static UUID.== infix(_:_:)();
}

uint64_t (*protocol witness for __RKSpecificationHasTarget.target.modify in conformance __RKChangeSceneActionArguments(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  v3[2] = v5;
  size_t v7 = *(void *)(v5 + 64);
  v3[3] = malloc(v7);
  v3[4] = malloc(v7);
  uint64_t v8 = *(void (**)(void))(v6 + 16);
  v3[5] = v8;
  v3[6] = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8();
  return __RKChangeSceneActionArguments.target.modify;
}

void __RKChangeSceneActionArguments.target.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 24);
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    uint64_t v7 = *v2;
    ((void (*)(void, void, uint64_t))v2[5])(v2[3], v2[4], v5);
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 40))(v7, v4, v5);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }
  else
  {
    (*(void (**)(void, void, void))(v2[2] + 40))(*v2, v2[4], v2[1]);
  }
  free(v3);
  free(v4);

  free(v2);
}

float __RKFadeSceneActionArguments.targetOpacity.getter()
{
  return *(float *)v0;
}

void __RKFadeSceneActionArguments.targetOpacity.setter(float a1)
{
  float *v1 = a1;
}

uint64_t (*__RKFadeSceneActionArguments.targetOpacity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKFadeSceneActionArguments.duration.getter()
{
  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t __RKFadeSceneActionArguments.duration.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  *(unsigned char *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

uint64_t (*__RKFadeSceneActionArguments.duration.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityKit::__RKFadeSceneActionArguments __swiftcall __RKFadeSceneActionArguments.init(targetOpacity:duration:)(Swift::Float targetOpacity, Swift::Float duration)
{
  if (duration < 0.0) {
    duration = 0.0;
  }
  *(Swift::Float *)uint64_t v2 = targetOpacity;
  *(Swift::Float *)(v2 + 4) = duration;
  *(unsigned char *)(v2 + 8) = 0;
  result.duration.value = duration;
  result.targetOpacity = targetOpacity;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKFadeSceneActionArguments.CodingKeys()
{
  if (*v0) {
    return 0x6E6F697461727564;
  }
  else {
    return 0x704F746567726174;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKFadeSceneActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKFadeSceneActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKFadeSceneActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKFadeSceneActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKFadeSceneActionArguments.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKFadeSceneActionArguments.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(unsigned int *)(v1 + 4);
  char v8 = *(unsigned char *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v12 = 1;
    char v11 = v8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t __RKFadeSceneActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKFadeSceneActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v13[15] = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v10 = v9;
    v13[14] = 1;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    *(_DWORD *)a2 = v10;
    *(_DWORD *)(a2 + 4) = v12;
    *(unsigned char *)(a2 + 8) = BYTE4(v12) & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKFadeSceneActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKFadeSceneActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKFadeSceneActionArguments(void *a1)
{
  return __RKFadeSceneActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKFadeSceneActionArguments(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 == *(float *)a2)
  {
    char v2 = *(unsigned char *)(a2 + 8);
    if (*(unsigned char *)(a1 + 8))
    {
      if (*(unsigned char *)(a2 + 8)) {
        return 1;
      }
    }
    else
    {
      if (*(float *)(a1 + 4) != *(float *)(a2 + 4)) {
        char v2 = 1;
      }
      if ((v2 & 1) == 0) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t (*__RKEntityFadeActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float __RKEntityFadeActionArguments.targetOpacity.getter()
{
  return *(float *)(v0 + *(int *)(type metadata accessor for __RKEntityFadeActionArguments(0) + 20));
}

uint64_t __RKEntityFadeActionArguments.targetOpacity.setter(float a1)
{
  uint64_t result = type metadata accessor for __RKEntityFadeActionArguments(0);
  *(float *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*__RKEntityFadeActionArguments.targetOpacity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityFadeActionArguments.duration.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityFadeActionArguments);
}

uint64_t __RKEntityFadeActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityFadeActionArguments);
}

uint64_t (*__RKEntityFadeActionArguments.duration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityFadeActionArguments.init(target:targetOpacity:duration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  uint64_t result = type metadata accessor for __RKEntityFadeActionArguments(0);
  *(float *)(a2 + *(int *)(result + 20)) = a3;
  float v10 = 1.0;
  if (a4 >= 0.0) {
    float v10 = a4;
  }
  uint64_t v11 = a2 + *(int *)(result + 24);
  *(float *)uint64_t v11 = v10;
  *(unsigned char *)(v11 + 4) = 0;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityFadeActionArguments.CodingKeys()
{
  uint64_t v1 = 0x704F746567726174;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6F697461727564;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746567726174;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityFadeActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityFadeActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityFadeActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityFadeActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityFadeActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityFadeActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for __RKEntityFadeActionArguments(0);
    v12[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v10 = *(unsigned char *)(v3 + *(int *)(v9 + 24) + 4);
    v12[13] = 2;
    v12[12] = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityFadeActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v20 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityFadeActionArguments.CodingKeys>);
  uint64_t v18 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = &v9[*(int *)(v10 + 24)];
  *(_DWORD *)uint64_t v11 = 0;
  _DWORD v11[4] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys();
  uint64_t v12 = v22;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v13 = v19;
  char v25 = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v9, v20, v3);
  char v24 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(_DWORD *)&v9[*(int *)(v7 + 20)] = v14;
  char v23 = 2;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v21);
  *(_DWORD *)uint64_t v11 = v15;
  _DWORD v11[4] = BYTE4(v15) & 1;
  outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v9, v17, type metadata accessor for __RKEntityFadeActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of __RKEntityTriggerSpecification((uint64_t)v9, type metadata accessor for __RKEntityFadeActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityFadeActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityFadeActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityFadeActionArguments(void *a1)
{
  return __RKEntityFadeActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityToggleAnimateActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityToggleAnimateActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityToggleAnimateActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityToggleAnimateActionArguments.encode(to:)(void *a1)
{
  return __RKEntityToggleAnimateActionArguments.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityToggleAnimateActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
}

uint64_t __RKEntityToggleAnimateActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityToggleAnimateActionArguments.CodingKeys>);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    outlined init with take of __RKEntityTriggerSpecification((uint64_t)v11, v15, type metadata accessor for __RKEntityToggleAnimateActionArguments);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityToggleAnimateActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityToggleAnimateActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleAnimateActionArguments(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleAnimateActionArguments(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityToggleAnimateActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
}

uint64_t (*__RKEntityStartAnimateActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityStartAnimateActionArguments.loopCount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 20));
}

uint64_t __RKEntityStartAnimateActionArguments.multiplePerformBehavior.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 24));
  return result;
}

double __RKEntityStartAnimateActionArguments.clipStart.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 28));
}

double __RKEntityStartAnimateActionArguments.clipDuration.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 32));
}

uint64_t __RKEntityStartAnimateActionArguments.clipReverses.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 36));
}

uint64_t __RKEntityStartAnimateActionArguments.clipReversed.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 40));
}

float __RKEntityStartAnimateActionArguments.animationSpeed.getter()
{
  return *(float *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 44));
}

uint64_t __RKEntityStartAnimateActionArguments.muteAudio.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 48));
}

uint64_t __RKEntityStartAnimateActionArguments.audioGain.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 52));
}

uint64_t __RKEntityStartAnimateActionArguments.targetAnimation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 56);

  return outlined init with copy of UUID?(v3, a1);
}

uint64_t __RKEntityStartAnimateActionArguments.targetAnimation.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 56);

  return outlined assign with take of UUID?(a1, v3);
}

uint64_t (*__RKEntityStartAnimateActionArguments.targetAnimation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityStartAnimateActionArguments.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x746567726174;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E756F43706F6F6CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0x7261745370696C63;
      break;
    case 4:
      unint64_t result = 0x6172754470696C63;
      break;
    case 5:
    case 6:
      unint64_t result = 0x6576655270696C63;
      break;
    case 7:
      unint64_t result = 0x6F6974616D696E61;
      break;
    case 8:
      unint64_t result = 0x696475416574756DLL;
      break;
    case 9:
      unint64_t result = 0x6961476F69647561;
      break;
    case 10:
      unint64_t result = 0x6E41746567726174;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityStartAnimateActionArguments.CodingKeys()
{
  return __RKEntityStartAnimateActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityStartAnimateActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityStartAnimateActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityStartAnimateActionArguments.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityStartAnimateActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t started = lazy protocol witness table accessor for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, started);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityStartAnimateActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t started = lazy protocol witness table accessor for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, started);
}

uint64_t __RKEntityStartAnimateActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityStartAnimateActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[31] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
    v11[30] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[29] = *(unsigned char *)(v3 + *(int *)(started + 24));
    v11[28] = 2;
    lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[27] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[26] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[25] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[24] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[15] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[14] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[13] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[12] = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityStartAnimateActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v32 = (uint64_t)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v34 = (int *)((char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityStartAnimateActionArguments.CodingKeys>);
  uint64_t v33 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  __n128 v11 = MEMORY[0x270FA5388](started);
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void (**)(__n128))(v6 + 56);
  uint64_t v37 = &v13[*(int *)(v14 + 56)];
  v15(v11);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys();
  int64_t v35 = v9;
  uint64_t v16 = (uint64_t)v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of BodyTrackingComponent?((uint64_t)v37, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    uint64_t v17 = v33;
    char v30 = v13;
    uint64_t v38 = a1;
    char v50 = 0;
    uint64_t v18 = lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v29[1] = v18;
    uint64_t v19 = (uint64_t)v30;
    (*(void (**)(char *, int *, uint64_t))(v6 + 32))(v30, v34, v5);
    char v49 = 1;
    uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v34 = (int *)started;
    *(void *)(v19 + *(int *)(started + 20)) = v20;
    char v47 = 2;
    lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(unsigned char *)(v19 + v34[6]) = v48;
    char v46 = 3;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v19 + v34[7]) = v21;
    char v45 = 4;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v19 + v34[8]) = v22;
    char v44 = 5;
    *(unsigned char *)(v19 + v34[9]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v43 = 6;
    *(unsigned char *)(v19 + v34[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    char v42 = 7;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(_DWORD *)(v19 + v34[11]) = v23;
    char v41 = 8;
    *(unsigned char *)(v19 + v34[12]) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v40 = 9;
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v25 = &v30[*(int *)(started + 52)];
    *(void *)char v25 = v24;
    v25[8] = v26 & 1;
    char v39 = 10;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v35, v36);
    outlined assign with take of UUID?(v32, (uint64_t)v37);
    uint64_t v27 = (uint64_t)v30;
    outlined init with copy of __RKEntityTriggerSpecification((uint64_t)v30, v31, type metadata accessor for __RKEntityStartAnimateActionArguments);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    return outlined destroy of __RKEntityTriggerSpecification(v27, type metadata accessor for __RKEntityStartAnimateActionArguments);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityStartAnimateActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityStartAnimateActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityStartAnimateActionArguments(void *a1)
{
  return __RKEntityStartAnimateActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityStopAnimateActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityStopAnimateActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityStopAnimateActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityStopAnimateActionArguments.encode(to:)(void *a1)
{
  return __RKEntityToggleAnimateActionArguments.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityStopAnimateActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
}

uint64_t __RKEntityStopAnimateActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityStopAnimateActionArguments.CodingKeys>);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x270FA5388](v9 - 8);
  __n128 v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    outlined init with take of __RKEntityTriggerSpecification((uint64_t)v11, v15, type metadata accessor for __RKEntityStopAnimateActionArguments);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityStopAnimateActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityStopAnimateActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityStopAnimateActionArguments(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleAnimateActionArguments(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityStopAnimateActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
}

uint64_t (*__RKEntityToggleVisibilityActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityToggleAnimateActionArguments.init(target:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityToggleAnimateActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746567726174 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityToggleVisibilityActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityToggleVisibilityActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityToggleVisibilityActionArguments.encode(to:)(void *a1)
{
  return __RKEntityToggleAnimateActionArguments.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityToggleVisibilityActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
}

uint64_t __RKEntityToggleAnimateActionArguments.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityToggleVisibilityActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityToggleVisibilityActionArguments.CodingKeys>);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x270FA5388](v9 - 8);
  __n128 v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    outlined init with take of __RKEntityTriggerSpecification((uint64_t)v11, v15, type metadata accessor for __RKEntityToggleVisibilityActionArguments);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityToggleVisibilityActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityToggleVisibilityActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleVisibilityActionArguments(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleAnimateActionArguments(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityToggleVisibilityActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleAnimateActionArguments(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t (*__RKEntityShowActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityShowActionArguments.duration.getter()
{
  return __RKEntityShowActionArguments.duration.getter(type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntityShowActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.duration.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.duration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityShowActionArguments.distance.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityShowActionArguments);
}

unint64_t __RKEntityFadeActionArguments.duration.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 24));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityShowActionArguments.distance.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntityFadeActionArguments.duration.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 24);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityShowActionArguments.distance.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.ease.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityShowActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t __RKEntityShowActionArguments.ease.setter(char *a1)
{
  return __RKEntityShowActionArguments.ease.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.ease.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.easeType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityShowActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t __RKEntityShowActionArguments.easeType.setter(char *a1)
{
  return __RKEntityShowActionArguments.easeType.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.easeType.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.fadeIn.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityShowActionArguments(0) + 36));
}

uint64_t __RKEntityShowActionArguments.fadeIn.setter(char a1)
{
  uint64_t result = type metadata accessor for __RKEntityShowActionArguments(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*__RKEntityShowActionArguments.fadeIn.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityShowActionArguments.finalOpacity.getter()
{
  return __RKEntityShowActionArguments.finalOpacity.getter(type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntityShowActionArguments.finalOpacity.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.finalOpacity.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.finalOpacity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.respectPhysics.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityShowActionArguments(0) + 44));
}

uint64_t __RKEntityShowActionArguments.respectPhysics.setter(char a1)
{
  uint64_t result = type metadata accessor for __RKEntityShowActionArguments(0);
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*__RKEntityShowActionArguments.respectPhysics.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityShowActionArguments.physicsLinearCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.getter(type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntityShowActionArguments.physicsLinearCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.physicsLinearCoefficient.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityShowActionArguments.physicsAngularCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.getter(type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntityShowActionArguments.physicsAngularCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.physicsAngularCoefficient.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.animationStyle.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityShowActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 56));
  return result;
}

uint64_t __RKEntityShowActionArguments.animationStyle.setter(char *a1)
{
  return __RKEntityShowActionArguments.animationStyle.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.animationStyle.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.buildInAnimationType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityShowActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 60));
  return result;
}

uint64_t __RKEntityShowActionArguments.buildInAnimationType.setter(char *a1)
{
  return __RKEntityShowActionArguments.buildInAnimationType.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.buildInAnimationType.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityShowActionArguments.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x746567726174;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F697461727564;
      break;
    case 2:
      unint64_t result = 0x65636E6174736964;
      break;
    case 3:
      unint64_t result = 1702060389;
      break;
    case 4:
      unint64_t result = 0x6570795465736165;
      break;
    case 5:
      unint64_t result = 0x6E4965646166;
      break;
    case 6:
      unint64_t result = 0x61704F6C616E6966;
      break;
    case 7:
      unint64_t result = 0x5074636570736572;
      break;
    case 8:
      unint64_t result = 0xD000000000000018;
      break;
    case 9:
      unint64_t result = 0xD000000000000019;
      break;
    case 10:
      unint64_t result = 0x6F6974616D696E61;
      break;
    case 11:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityShowActionArguments.CodingKeys()
{
  return __RKEntityShowActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityShowActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized __RKEntityShowActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityShowActionArguments.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityShowActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityShowActionArguments.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t __RKEntityShowActionArguments.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityShowActionArguments.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v18 = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
    char v10 = *(unsigned char *)(v3 + v9[5] + 4);
    char v18 = 1;
    char v17 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v11 = *(unsigned char *)(v3 + v9[6] + 4);
    char v18 = 2;
    char v17 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v18 = *(unsigned char *)(v3 + v9[7]);
    char v17 = 3;
    lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v18 = *(unsigned char *)(v3 + v9[8]);
    char v17 = 4;
    lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v18 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v12 = *(unsigned char *)(v3 + v9[10] + 4);
    char v18 = 6;
    char v17 = v12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v18 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v13 = *(unsigned char *)(v3 + v9[12] + 4);
    char v18 = 8;
    char v17 = v13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = *(unsigned char *)(v3 + v9[13] + 4);
    char v18 = 9;
    char v17 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v18 = *(unsigned char *)(v3 + v9[14]);
    char v17 = 10;
    lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v18 = *(unsigned char *)(v3 + v9[15]);
    char v17 = 11;
    lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityShowActionArguments.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  char v48 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityShowActionArguments.CodingKeys>);
  uint64_t v46 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  int v51 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = &v7[v8[7]];
  *(_DWORD *)uint64_t v9 = 0;
  char v45 = v9;
  v9[4] = 1;
  char v10 = &v7[v8[8]];
  *(_DWORD *)char v10 = 0;
  char v44 = v10;
  v10[4] = 1;
  uint64_t v42 = v8[9];
  v7[v42] = 10;
  uint64_t v41 = v8[10];
  v7[v41] = 3;
  uint64_t v40 = v8[11];
  v7[v40] = 2;
  char v11 = &v7[v8[12]];
  *(_DWORD *)char v11 = 0;
  _DWORD v11[4] = 1;
  uint64_t v12 = v8[13];
  v7[v12] = 2;
  char v13 = &v7[v8[14]];
  *(_DWORD *)char v13 = 0;
  uint64_t v13[4] = 1;
  char v14 = &v7[v8[15]];
  *(_DWORD *)char v14 = 0;
  uint64_t v14[4] = 1;
  uint64_t v38 = v8[16];
  uint64_t v39 = v12;
  v7[v38] = 3;
  uint64_t v15 = v8[17];
  v7[v15] = 10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys();
  uint64_t v16 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v17 = (uint64_t)a1;
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v19 = v44;
  char v18 = v45;
  int64_t v35 = v13;
  uint64_t v36 = v7;
  uint64_t v33 = v15;
  uint64_t v34 = v14;
  uint64_t v20 = v46;
  uint64_t v50 = v17;
  char v53 = 0;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v21 = v36;
  (*(void (**)(void))(v43 + 32))();
  char v53 = 1;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)char v18 = v22;
  v18[4] = BYTE4(v22) & 1;
  char v53 = 2;
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)uint64_t v19 = v23;
  v19[4] = BYTE4(v23) & 1;
  char v52 = 3;
  lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v21[v42] = v53;
  char v52 = 4;
  lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v21[v41] = v53;
  char v53 = 5;
  v21[v40] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v53 = 6;
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)char v11 = v24;
  _DWORD v11[4] = BYTE4(v24) & 1;
  char v53 = 7;
  v21[v39] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v53 = 8;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v26 = v35;
  *(_DWORD *)int64_t v35 = v25;
  v26[4] = BYTE4(v25) & 1;
  char v53 = 9;
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v28 = v34;
  *(_DWORD *)uint64_t v34 = v27;
  v28[4] = BYTE4(v27) & 1;
  char v52 = 10;
  lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v36[v38] = v53;
  char v52 = 11;
  lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v51, v49);
  uint64_t v30 = (uint64_t)v36;
  uint64_t v29 = v37;
  v36[v33] = v53;
  outlined init with copy of __RKEntityTriggerSpecification(v30, v29, type metadata accessor for __RKEntityShowActionArguments);
  __swift_destroy_boxed_opaque_existential_1(v50);
  return outlined destroy of __RKEntityTriggerSpecification(v30, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityShowActionArguments@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityShowActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityShowActionArguments(void *a1)
{
  return __RKEntityShowActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityShowActionArguments(uint64_t a1, uint64_t a2)
{
  return specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityShowActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1;
}

uint64_t (*__RKEntityHideActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityHideActionArguments.duration.getter()
{
  return __RKEntityShowActionArguments.duration.getter(type metadata accessor for __RKEntityHideActionArguments);
}

unint64_t __RKEntityShowActionArguments.duration.getter(uint64_t (*a1)(void))
{
  uint64_t v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 20));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityHideActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.duration.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.duration.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2(0);
  uint64_t v5 = v2 + *(int *)(result + 20);
  *(_DWORD *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.duration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityHideActionArguments.distance.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityHideActionArguments.distance.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t (*__RKEntityHideActionArguments.distance.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.ease.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for __RKEntityHideActionArguments(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 28));
  return result;
}